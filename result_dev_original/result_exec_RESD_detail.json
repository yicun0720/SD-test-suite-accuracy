[
  {
    "case_id": 16,
    "db_id": "concert_singer",
    "gold": "select max(capacity), average from stadium",
    "gpt_answers1": [
      "select max(stadium.capacity) , avg(stadium.capacity) from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) , stadium.location from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) , stadium.lowest from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) from stadium",
      "select max(stadium.capacity) , avg(stadium.capacity) from stadium"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 18,
    "db_id": "concert_singer",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "gpt_answers1": [
      "select stadium.name , stadium.capacity from stadium  group by stadium.name  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average",
      "select stadium.name , stadium.capacity from stadium  group by stadium.highest  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      1,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 19,
    "db_id": "concert_singer",
    "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "gpt_answers1": [
      "select stadium.name , stadium.capacity from stadium  group by stadium.name  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.average",
      "select stadium.name , stadium.capacity from stadium  group by stadium.capacity  order by avg(stadium.average) desc limit 1",
      "select stadium.name , stadium.capacity from stadium  group by stadium.capacity  order by avg(stadium.average) desc limit 1"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 24,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by stadium.stadium_id  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by stadium.stadium_id  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by stadium.name  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by stadium.name  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1",
      "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by stadium.stadium_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 33,
    "db_id": "concert_singer",
    "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
    "gpt_answers1": [
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by singer_in_concert.concert_id",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_id",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name, concert.theme",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_id",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 34,
    "db_id": "concert_singer",
    "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
    "gpt_answers1": [
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name, concert.theme",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by singer_in_concert.concert_id",
      "select concert.concert_name , concert.theme , count(*) , concert.year from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name",
      "select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 35,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "gpt_answers1": [
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.singer_id",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer_in_concert.singer_id",
      "select singer.name , count(*) , singer.singer_id from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 36,
    "db_id": "concert_singer",
    "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
    "gpt_answers1": [
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) , singer.song_name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer_in_concert.singer_id",
      "select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 47,
    "db_id": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "gpt_answers1": [
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pet_age = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\" and pets.pet_age = (select min(pets.pet_age) from Pets  )",
      "select pets.weight from Pets where  pets.pet_age = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 48,
    "db_id": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "gpt_answers1": [
      "select pets.weight from Pets where  pets.pet_age = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\" and pets.pet_age = (select min(pets.pet_age) from Pets  )",
      "select pets.weight from Pets where  pets.pet_age = \"dog\" and pets.pet_age = (select min(pets.pet_age) from Pets  )",
      "select pets.weight from Pets where  pets.pettype = \"dog\" and pets.pet_age = (select min(pets.pet_age) from Pets where  pets.pettype = \"dog\"  )",
      "select pets.weight from Pets where  pets.pet_age = \"dog\" and pets.pet_age = (select min(pets.pet_age) from Pets where  pets.pettype = \"dog\"  )",
      "select pets.weight from Pets where  pets.pet_age = \"dog\"   order by pets.pet_age asc limit 1",
      "select pets.weight from Pets where  pets.pettype = \"dog\"   order by pets.pet_age asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 57,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "gpt_answers1": [
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select distinct student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select distinct student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select distinct student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      1,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 58,
    "db_id": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "gpt_answers1": [
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select distinct student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   union select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   )",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\" or pets.pettype = \"dog\""
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 61,
    "db_id": "pets_1",
    "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "gpt_answers1": [
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    ],
    "tags1": [
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 62,
    "db_id": "pets_1",
    "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "gpt_answers1": [
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
      "select student.major , student.age from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )",
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 65,
    "db_id": "pets_1",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "gpt_answers1": [
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname , student.age from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   )",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 66,
    "db_id": "pets_1",
    "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "gpt_answers1": [
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"",
      "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   )",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\"",
      "select student.fname from Student where  student.stuid in (select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"   except select Has_Pet.StuID from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"   )",
      "select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\" and pets.pettype != \"cat\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 90,
    "db_id": "car_1",
    "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
    "gpt_answers1": [
      "select continents.continent , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
      "select continents.contid , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.contid",
      "select continents.contid , countries.continent , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.contid",
      "select continents.continent , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.contid",
      "select continents.contid , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
      "select continents.contid , countries.continent , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
      "select continents.continent , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent",
      "select continents.contid , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.contid"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 93,
    "db_id": "car_1",
    "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
    "gpt_answers1": [
      "select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
      "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
      "select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id",
      "select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 97,
    "db_id": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "gpt_answers1": [
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight <= (select avg(cars_data.Weight) from cars_data  )",
      "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 98,
    "db_id": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
    "gpt_answers1": [
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight <= (select avg(cars_data.Weight) from cars_data  )",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 99,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
    "gpt_answers1": [
      "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
      "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
      "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
      "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
      "select car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1970",
      "select car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1970",
      "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970",
      "select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 101,
    "db_id": "car_1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "gpt_answers1": [
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , car_names.model , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 102,
    "db_id": "car_1",
    "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
    "gpt_answers1": [
      "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
      "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
      "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_makers.maker , min(cars_data.year) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1",
      "select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1",
      "select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 107,
    "db_id": "car_1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname  order by count(*) desc limit 1",
      "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      1,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 109,
    "db_id": "car_1",
    "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
    "gpt_answers1": [
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.fullname",
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker",
      "select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.fullname",
      "select count(*) , car_makers.fullname from car_makers  group by car_makers.maker"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 116,
    "db_id": "car_1",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
    "gpt_answers1": [
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = \"USA\"",
      "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"USA\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 121,
    "db_id": "car_1",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "gpt_answers1": [
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_names.make , model_list.model from car_names join model_list on car_names.Model = model_list.Model",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 122,
    "db_id": "car_1",
    "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "gpt_answers1": [
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_names.make , model_list.model from car_names join model_list on car_names.Model = model_list.Model",
      "select car_makers.maker , car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id",
      "select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 123,
    "db_id": "car_1",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "gpt_answers1": [
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 124,
    "db_id": "car_1",
    "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
    "gpt_answers1": [
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) >= 1",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) >= 1",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
      "select distinct countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 131,
    "db_id": "car_1",
    "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "gpt_answers1": [
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.model",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.make",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by cars_data.cylinders",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.model",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.model",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by cars_data.cylinders",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.model",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.make",
      "select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 141,
    "db_id": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.make  order by count(*) desc limit 1",
      "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.make  order by count(*) desc limit 1",
      "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by model_list.model  order by count(*) desc limit 1",
      "select model_list.model , car_names.make from car_names join model_list on car_names.Model = model_list.Model  group by car_names.make  order by count(*) desc limit 1",
      "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.model  order by count(*) desc limit 1",
      "select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.make  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 142,
    "db_id": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "gpt_answers1": [
      "select model_list.model from model_list  group by model_list.model  order by count(*) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.maker) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.maker) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.modelid) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count( distinct model_list.model) desc limit 1",
      "select model_list.model from model_list  group by model_list.model  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 150,
    "db_id": "car_1",
    "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
    "gpt_answers1": [
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
      "select model_list.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3",
      "select model_list.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 153,
    "db_id": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "gpt_answers1": [
      "select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000",
      "select cars_data.year from cars_data where  cars_data.weight <= 3000   intersect select cars_data.year from cars_data where  cars_data.weight > 4000",
      "select cars_data.year from cars_data where  cars_data.weight <= 3000   intersect select cars_data.year from cars_data where  cars_data.weight > 4000",
      "select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000",
      "select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000",
      "select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000",
      "select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 154,
    "db_id": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "gpt_answers1": [
      "select distinct cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000",
      "select distinct cars_data.year from cars_data where  cars_data.weight <= 4000 and cars_data.weight > 3000",
      "select cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000",
      "select distinct cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000",
      "select distinct cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000",
      "select distinct cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000",
      "select distinct cars_data.year from cars_data where  cars_data.weight < 3000   intersect select distinct cars_data.year from cars_data where  cars_data.weight > 4000"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 159,
    "db_id": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "gpt_answers1": [
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
      "select count(*) from cars_data where  cars_data.horsepower > (select max(cars_data.horsepower) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data   ORDER BY cars_data.horsepower DESC LIMIT 1 )",
      "select count(*) from cars_data where  cars_data.id in (select cars_data.Id from cars_data  ) and cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )   union select count(*) from cars_data where  cars_data.horsepower = (select max(cars_data.horsepower) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data   ORDER BY cars_data.horsepower DESC LIMIT 1 )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data   order by cars_data.horsepower desc limit 1 )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 160,
    "db_id": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "gpt_answers1": [
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )",
      "select count(*) from cars_data where  cars_data.horsepower > (select max(cars_data.horsepower) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data   ORDER BY cars_data.horsepower DESC LIMIT 1 )",
      "select count(*) from cars_data where  cars_data.id in (select cars_data.Id from cars_data  ) and cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )   union select count(*) from cars_data where  cars_data.horsepower = (select max(cars_data.horsepower) from cars_data  )",
      "select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data   order by cars_data.horsepower desc limit 1 )",
      "select count(*) , cars_data.horsepower from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 161,
    "db_id": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "gpt_answers1": [
      "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
      "select count(*) from car_makers  group by car_makers.country having  count(*) > 2",
      "select count( distinct car_makers.country) from car_makers  group by car_makers.Id having  count( distinct car_makers.id) > 2",
      "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    ],
    "tags1": [
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 162,
    "db_id": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
    "gpt_answers1": [
      "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2",
      "select count(*) from car_makers  group by car_makers.country having  count(*) > 2",
      "select car_makers.country from car_makers  group by car_makers.country having  count(*) > 2",
      "select count(*) from car_makers  group by car_makers.Id having  count(*) > 2"
    ],
    "tags1": [
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 167,
    "db_id": "car_1",
    "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
    "gpt_answers1": [
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data where  cars_data.cylinders > 3  )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data where  cars_data.cylinders > 3  )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data where  cars_data.cylinders > 4  )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.cylinders) from cars_data   order by cars_data.horsepower asc limit 3 )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data where  cars_data.cylinders > 4  )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data  )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.cylinders) from cars_data   order by cars_data.horsepower asc limit 3 )",
      "select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 168,
    "db_id": "car_1",
    "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
    "gpt_answers1": [
      "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4",
      "select car_names.make , car_names.model from car_names where  car_names.makeid not in (select cars_data.Id from cars_data  group by cars_data.Id having  min(cars_data.cylinders) < 4 )",
      "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4",
      "select car_names.make , car_names.model from car_names where  car_names.makeid not in (select cars_data.Id from cars_data where  cars_data.cylinders < 4  )",
      "select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId  group by car_names.make having  min(cars_data.cylinders) < 4",
      "select car_names.make , car_names.model from car_names   except select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4",
      "select car_names.make , car_names.make from car_names where  car_names.makeid not in (select cars_data.Id from cars_data  group by cars_data.Id having  min(cars_data.cylinders) < 4 )",
      "select car_names.make , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 171,
    "db_id": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
    "gpt_answers1": [
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\"",
      "select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != \"Ford Motor Company\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 173,
    "db_id": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "gpt_answers1": [
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname , countries.continent from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries   except select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 174,
    "db_id": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
    "gpt_answers1": [
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries   except select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )",
      "select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 175,
    "db_id": "car_1",
    "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
    "gpt_answers1": [
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 2",
      "select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 2",
      "select car_makers.id , car_names.make from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.id , car_makers.maker , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 176,
    "db_id": "car_1",
    "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
    "gpt_answers1": [
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  union select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 2",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 3",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 2  union select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) >= 3",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  union select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 3",
      "select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2  intersect select car_makers.id , car_makers.maker from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 4"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 178,
    "db_id": "car_1",
    "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
    "gpt_answers1": [
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"Fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"Fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"Fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"Fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\"",
      "select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 206,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "gpt_answers1": [
      "select count(*) from flights where  flights.sourceairport = \"ATO\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"ATO\"",
      "select count(*) from flights where  flights.sourceairport = \"ATO\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"ATO\"",
      "select count(*) from flights where  flights.sourceairport = \"ATO\"",
      "select count(*) from flights where  flights.sourceairport = \"Ato\"",
      "select count(*) from flights where  flights.sourceairport = \"Ato\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"ATO\""
    ],
    "tags1": [
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 207,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Alberta\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abingdon\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberystwyth\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Berwick\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abington\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Barnsley\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 208,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Alberta\"",
      "select count(*) , airports.city from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"  group by airports.city",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abingdon\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Berwick\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Barnsley\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 211,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )",
      "select count(*) from airports where  airports.airportcode in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )",
      "select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportcode in (select airports.AirportCode from airports where  airports.city = \"Ashley\"  )",
      "select count(*) , airports.city from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"   intersect select count(*) , airports.city from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Ashley\"",
      "select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )",
      "select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )",
      "select count(*) from airports where  airports.airportcode in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 212,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abingdon\" and airports.airportname = \"Ashley\"",
      "select count(*) from airports where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Alberta\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\" and airports.airportname = \"Ashley\"",
      "select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = \"Aberdeen\"   intersect select airports.AirportCode from airports where  airports.city = \"Ashley\"   )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 215,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "gpt_answers1": [
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportcode = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportname = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportcode = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"ASY\" and airlines.airline = \"United Airlines\""
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 216,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
    "gpt_answers1": [
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportcode = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportname = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\" and airlines.airline = \"United Airlines\""
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 219,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 220,
    "db_id": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
    "gpt_answers1": [
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\"",
      "select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = \"Aberdeen\" and airlines.airline = \"United Airlines\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 223,
    "db_id": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 224,
    "db_id": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from airports  group by airports.city  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 225,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select flights.sourceairport from flights  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from airports  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 226,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 227,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from airports  group by airports.airportcode  order by count(*) asc limit 1",
      "select flights.sourceairport from flights  group by flights.sourceairport  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 228,
    "db_id": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode , flights.sourceairport from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from airports  group by airports.airportcode  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by flights.sourceairport  order by count(*) asc limit 1",
      "select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1",
      "select flights.sourceairport from flights  group by flights.sourceairport  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 231,
    "db_id": "flight_2",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by flights.airline  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 232,
    "db_id": "flight_2",
    "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "gpt_answers1": [
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.country  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country , count(*) from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.country  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country , count(*) from airlines join flights on airlines.uid = flights.Airline  group by airlines.country  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1",
      "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.country  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 235,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
    "gpt_answers1": [
      "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"AHD\"",
      "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"AHD\"",
      "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"AHD\"",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
      "select flights.airline from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"AHD\"",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"",
      "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"AHD\"",
      "select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = \"A HD\""
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 241,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "gpt_answers1": [
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline , count(*) from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select flights.airline from flights  group by flights.airline having  count(*) >= 10",
      "select airlines.airline , count(*) from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 242,
    "db_id": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
    "gpt_answers1": [
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline , count(*) from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10",
      "select flights.airline from flights  group by flights.airline having  count(*) >= 10",
      "select airlines.airline , count(*) from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10",
      "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by flights.airline having  count(*) >= 10"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 247,
    "db_id": "flight_2",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "gpt_answers1": [
      "select flights.flightno from flights where  flights.destairport = \"APG\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
      "select flights.flightno from flights where  flights.destairport = \"APG\"",
      "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
      "select flights.flightno from flights where  flights.sourceairport = \"APG\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportname = \"APG\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode = \"APG\""
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 251,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno , airports.city from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 252,
    "db_id": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
    "gpt_answers1": [
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Aberdeen\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Alberta\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abingdon\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Alberta\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Abingdon\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Barnsley\"",
      "select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = \"Berwick\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 257,
    "db_id": "flight_2",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "gpt_answers1": [
      "select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights  )",
      "select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode not in (select flights.DestAirport from flights  ) and flights.sourceairport = (select airports.airportname from airports  )",
      "select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights  )",
      "select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode not in (select flights.DestAirport from flights  ) and flights.destairport = (select airports.airportname from airports  )",
      "select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights where  flights.sourceairport = \"Bogota\"  )",
      "select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights where  flights.sourceairport = \"London Heathrow\"  )",
      "select airports.airportname from flights join airports on flights.DestAirport = airports.AirportCode where  airports.airportcode not in (select flights.DestAirport from flights  ) and flights.sourceairport = (select airports.airportname from airports  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 258,
    "db_id": "flight_2",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "gpt_answers1": [
      "select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights  )"
    ],
    "tags1": [
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 265,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "gpt_answers1": [
      "select employee.city from employee where  employee.age > 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age <= 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age > 30  group by employee.city having  count(*) > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 266,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
    "gpt_answers1": [
      "select employee.city from employee where  employee.age > 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age > 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age < 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age > 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age > 30  group by employee.city",
      "select employee.city , count(*) from employee where  employee.age > 30  group by employee.city having  count(*) > 1",
      "select employee.city , count(*) from employee where  employee.age <= 30  group by employee.city having  count(*) > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 287,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "gpt_answers1": [
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name , shop.shop_id from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name , shop.shop_id from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 288,
    "db_id": "employee_hire_evaluation",
    "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
    "gpt_answers1": [
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select shop.name , count(*) from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id",
      "select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by shop.name"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 335,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "gpt_answers1": [
      "select min(templates.version_number) , templates.template_type_code from Templates  group by templates.template_type_code",
      "select min(templates.version_number) , templates.template_type_code from Templates",
      "select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
      "select min(templates.version_number) , templates.template_type_code from Templates  group by templates.template_type_code  order by templates.version_number asc limit 1",
      "select min(templates.version_number) , templates.template_type_code from Templates  group by templates.template_type_code  order by sum(templates.version_number) asc limit 1",
      "select min(templates.version_number) , templates.template_type_code from Templates   order by templates.version_number asc limit 1",
      "select min(templates.version_number) , templates.template_type_code from Templates  group by templates.version_number  order by templates.template_type_code asc limit 1"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 349,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "gpt_answers1": [
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\""
    ],
    "tags1": [
      0,
      1,
      1,
      1,
      1,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 350,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "gpt_answers1": [
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Ref_Template_Types where  ref_template_types.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\"",
      "select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"AD\""
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 362,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "gpt_answers1": [
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"Korea%\"",
      "select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like \"%Korea%\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 367,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "gpt_answers1": [
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) desc",
      "select documents.document_id , count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by paragraphs.document_id asc",
      "select count(*) , paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 368,
    "db_id": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "gpt_answers1": [
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) desc",
      "select paragraphs.document_id , count(*) , paragraphs.paragraph_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select count(*) , paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc",
      "select documents.document_id , count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) asc"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 387,
    "db_id": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "gpt_answers1": [
      "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name = \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"%Little Lever Urban District%\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.hometown = \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.hometown != \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\"   except select teacher.name from teacher where  teacher.name = \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.hometown != \"Little Lever Urban District\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 388,
    "db_id": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "gpt_answers1": [
      "select teacher.name from teacher where  teacher.hometown != \"Little Lever Urban District\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name = \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\"   except select teacher.name from teacher where  teacher.name = \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.name like \"%Little Lever Urban District%\"",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.age >= 40",
      "select teacher.name from teacher where  teacher.hometown != \"\" and teacher.age > 40"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 405,
    "db_id": "course_teach",
    "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
    "gpt_answers1": [
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id",
      "select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 407,
    "db_id": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "gpt_answers1": [
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID  group by teacher.name having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 408,
    "db_id": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
    "gpt_answers1": [
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2",
      "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name having  count(*) >= 2"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 413,
    "db_id": "museum_visit",
    "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "gpt_answers1": [
      "select avg(visitor.age) from visitor where  visitor.level_of_membership > 4",
      "select avg(visitor.age) from visitor where  visitor.level_of_membership >= 4"
    ],
    "tags1": [
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 419,
    "db_id": "museum_visit",
    "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
    "gpt_answers1": [
      "select visit.visitor_id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visitor.id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visitor.id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visitor.id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visit.visitor_id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visit.visitor_id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visitor.id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1",
      "select visitor.id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id having  count(*) > 1"
    ],
    "tags1": [
      0,
      1,
      1,
      1,
      0,
      0,
      1,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 420,
    "db_id": "museum_visit",
    "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "gpt_answers1": [
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.total_spent) desc limit 1",
      "select visit.visitor_id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.total_spent) desc limit 1",
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.total_spent) desc limit 1",
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
      "select visit.visitor_id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.total_spent) desc limit 1",
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visitor.id  order by sum(visit.total_spent) desc limit 1",
      "select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID   order by visit.total_spent desc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 423,
    "db_id": "museum_visit",
    "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "gpt_answers1": [
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by count(*) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by count(*) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1",
      "select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 427,
    "db_id": "museum_visit",
    "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
    "gpt_answers1": [
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )",
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )",
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )",
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )",
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )",
      "select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 440,
    "db_id": "wta_1",
    "gold": "SELECT min(loser_rank) FROM matches",
    "gpt_answers1": [
      "select matches.loser_rank from matches   order by matches.loser_rank desc limit 1",
      "select matches.loser_rank from matches  group by matches.loser_rank  order by sum(matches.loser_rank_points) desc limit 1",
      "select max(matches.loser_rank) from matches",
      "select min(matches.loser_rank) from matches",
      "select matches.loser_rank from matches   order by matches.loser_rank_points desc limit 1",
      "select matches.loser_rank_points from matches   order by matches.loser_rank_points desc limit 1",
      "select matches.loser_rank from matches   order by matches.loser_rank asc"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 448,
    "db_id": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "gpt_answers1": [
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
      "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016",
      "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016",
      "select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 453,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "gpt_answers1": [
      "select players.first_name , players.country_code from players   order by players.birth_date desc limit 1",
      "select players.first_name , players.country_code from players   order by players.birth_date desc limit 1",
      "select players.first_name , players.country_code from players   order by players.birth_date asc limit 1",
      "select players.first_name , players.country_code from players where  players.birth_date = (select max(players.birth_date) from players  )",
      "select players.first_name , players.country_code from players   order by players.birth_date desc limit 1",
      "select players.first_name , players.country_code from players   order by players.birth_date asc",
      "select players.first_name , players.country_code from players   order by players.birth_date desc limit 1"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 454,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "gpt_answers1": [
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.winner_age = (select max(matches.winner_age) from matches  )",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.winner_age = (select max(matches.winner_age) from matches  )",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age asc limit 1",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1",
      "select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 457,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "gpt_answers1": [
      "select players.first_name , players.last_name from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"Left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"L\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"left\" or players.hand = \"right\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.birth_date = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"left/L\"   order by players.birth_date asc"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 458,
    "db_id": "wta_1",
    "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "gpt_answers1": [
      "select players.first_name , players.last_name from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"Left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name , players.hand from players where  players.hand = \"left\"   order by players.birth_date asc",
      "select players.first_name , players.last_name , players.hand from players where  players.hand = \"left\"   order by players.birth_date asc"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 459,
    "db_id": "wta_1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "gpt_answers1": [
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by players.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by players.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 460,
    "db_id": "wta_1",
    "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "gpt_answers1": [
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by players.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by players.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1",
      "select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 483,
    "db_id": "wta_1",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "gpt_answers1": [
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age desc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_name asc limit 3"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 484,
    "db_id": "wta_1",
    "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "gpt_answers1": [
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches where  matches.winner_age = (select min(matches.winner_age) from matches  )",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age desc limit 3",
      "select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 485,
    "db_id": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "gpt_answers1": [
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches where  matches.tourney_name = \"WTA Championships\" and matches.winner_hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"Left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.player_id = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 486,
    "db_id": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "gpt_answers1": [
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\"",
      "select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = \"WTA Championships\" and players.hand = \"left\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 488,
    "db_id": "wta_1",
    "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "gpt_answers1": [
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by matches.winner_rank_points  order by sum(matches.winner_rank_points) desc limit 1",
      "select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 493,
    "db_id": "battle_death",
    "gold": "SELECT name ,  date FROM battle",
    "gpt_answers1": [
      "select battle.name , battle.date , battle.result from battle",
      "select battle.name , battle.date , battle.result , max(battle.result) from battle  group by battle.name",
      "select battle.name , battle.date , battle.result , max(battle.result) from battle  group by battle.result",
      "select battle.name , battle.date , battle.result , min(battle.result) from battle  group by battle.name",
      "select battle.name , battle.date , battle.result , max(battle.result) from battle  group by battle.name",
      "select battle.name , battle.date , battle.result from battle  group by battle.name",
      "select battle.name , battle.date , battle.result , max(battle.result) from battle  group by battle.bulgarian_commander",
      "select battle.name , battle.date , battle.result , min(battle.result) from battle  group by battle.result"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 494,
    "db_id": "battle_death",
    "gold": "SELECT max(killed) ,  min(killed) FROM death",
    "gpt_answers1": [
      "select max(death.caused_by_ship_id) , min(death.caused_by_ship_id) from death  group by death.caused_by_ship_id",
      "select max(death.caused_by_ship_id) , min(death.caused_by_ship_id) from death",
      "select max(death.caused_by_ship_id) , min(death.caused_by_ship_id) , death.caused_by_ship_id from death  group by death.caused_by_ship_id",
      "select death.caused_by_ship_id , max(death.killed) , min(death.killed) from death  group by death.caused_by_ship_id",
      "select max(death.caused_by_ship_id) , min(death.caused_by_ship_id) from death  group by death.caused_by_ship_id",
      "select death.caused_by_ship_id , max(death.caused_by_ship_id) , min(death.caused_by_ship_id) from death  group by death.caused_by_ship_id",
      "select max(death.caused_by_ship_id) , min(death.killed) from death  group by death.caused_by_ship_id",
      "select max(death.caused_by_ship_id) , min(death.killed) , death.caused_by_ship_id from death  group by death.caused_by_ship_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 495,
    "db_id": "battle_death",
    "gold": "SELECT avg(injured) FROM death",
    "gpt_answers1": [
      "select death.id , avg(death.injured) from death  group by death.id",
      "select death.caused_by_ship_id , avg(death.injured) from death  group by death.caused_by_ship_id",
      "select death.id , avg(death.injured) from death  group by death.caused_by_ship_id",
      "select death.injured , avg(death.injured) from death  group by death.caused_by_ship_id",
      "select count(*) , death.injured from death  group by death.caused_by_ship_id",
      "select death.caused_by_ship_id , avg(death.injured) from death  group by death.caused_by_ship_id",
      "select death.caused_by_ship_id , avg(death.injured) from death  group by death.caused_by_ship_id",
      "select death.caused_by_ship_id , death.injured from death  group by death.caused_by_ship_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 500,
    "db_id": "battle_death",
    "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by ship.id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by ship.id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.caused_by_ship_id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.caused_by_ship_id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.caused_by_ship_id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name , sum(death.injured) from death join ship on death.caused_by_ship_id = ship.id  group by ship.id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.caused_by_ship_id  order by sum(death.injured) desc limit 1",
      "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by death.id  order by sum(death.injured) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 501,
    "db_id": "battle_death",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "gpt_answers1": [
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kalyoyan\" and battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin II\"",
      "select distinct battle.name from battle where  battle.latin_commander = \"Kaloyan\"   intersect select distinct battle.name from battle where  battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" or battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kalogyan\" and battle.latin_commander = \"Baldwin I\"",
      "select distinct battle.name from battle where  battle.bulgarian_commander = \"Kaloyan\" and battle.latin_commander = \"Baldwin 1\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 507,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT line_1 ,  line_2 FROM addresses",
    "gpt_answers1": [
      "select * from Addresses where  addresses.line_1 = \"1\" and addresses.line_2 = \"2\"",
      "select * from Addresses where  addresses.line_1 >= \"1\" and addresses.line_2 >= \"2\"",
      "select * from Addresses where  addresses.line_1 > \"1\" and addresses.line_2 > \"2\"",
      "select * from Addresses where  addresses.line_1 >= 1 and addresses.line_2 >= 2",
      "select * from Addresses where  addresses.line_1 > \"%1\" and addresses.line_2 > \"%2\"",
      "select * from Addresses where  addresses.line_1 > 0 and addresses.line_2 > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 521,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "gpt_answers1": [
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"  group by degree_programs.department_id",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"  group by degree_programs.department_id",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEER\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 522,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
    "gpt_answers1": [
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"ENGINEERING\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"engineering\"",
      "select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = \"Engineering\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 526,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
    "gpt_answers1": [
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) <= 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) <= 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2",
      "select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 531,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "gpt_answers1": [
      "select departments.department_description from Departments where  departments.department_name like \"%the computer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"%thecomputer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"%the_computer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"% the computer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"%the%\"",
      "select departments.department_description from Departments where  departments.department_name like \"%computer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"%the% computer%\"",
      "select departments.department_description from Departments where  departments.department_name like \"% computer%\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 533,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) = 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) >= 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.degree_program_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) = 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.degree_program_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) >= 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count( distinct student_enrolment.degree_program_id) = 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) = 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) = 2",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 535,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Boarder\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Board\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Baccalaureate\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Boardroom\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bobby\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 536,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"B\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"B\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelor\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelors\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"Bachelors\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_program_id = \"B\"",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = \"BA\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 537,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1",
      "select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 541,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select students.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id",
      "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id",
      "select students.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 542,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_enrolment_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_enrolment_id  order by count(*) desc limit 1",
      "select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select students.first_name , students.middle_name , students.last_name , count(*) , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1",
      "select students.first_name , students.middle_name , students.last_name , count(*) , student_enrolment.student_enrolment_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 545,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
    "gpt_answers1": [
      "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select distinct courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select distinct courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select distinct courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id",
      "select distinct courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      1,
      1,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 549,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "gpt_answers1": [
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 550,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
    "gpt_answers1": [
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"North Carolina\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"USA\"",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id",
      "select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\"   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = \"NC\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 554,
    "db_id": "student_transcripts_tracking",
    "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "gpt_answers1": [
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timothy\" and students.last_name = \"Ward\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Ward\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmothy\" and students.last_name = \"Wade\"",
      "select students.cell_mobile_number from Students where  students.first_name = \"Timmoty\" and students.last_name = \"Ward\""
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      1,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 557,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id   order by student_enrolment.student_enrolment_id asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 558,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "gpt_answers1": [
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1",
      "select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 561,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select students.current_address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by students.current_address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_3 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 562,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_1 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1",
      "select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 571,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id  order by count( distinct transcripts.transcript_id) desc limit 1",
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcripts.transcript_id) desc",
      "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count(*) desc limit 1",
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id  order by count( distinct transcript_contents.transcript_id) desc limit 1",
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) asc",
      "select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id  order by count( distinct transcripts.transcript_id) desc limit 1",
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id  order by count( distinct transcripts.transcript_date) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 572,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) desc limit 1",
      "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count(*) desc limit 1",
      "select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) desc",
      "select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) asc",
      "select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) asc",
      "select count(*) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count(*) desc limit 1",
      "select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) desc"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 573,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "gpt_answers1": [
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_date  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcript_contents.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 574,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "gpt_answers1": [
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1",
      "select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 576,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
    "gpt_answers1": [
      "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\"   intersect select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"Bachelor\"",
      "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\"   intersect select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"B\"",
      "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\"   intersect select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"BA\"",
      "select student_enrolment.semester_id from Student_Enrolment   union select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.degree_program_id = \"B\"",
      "select student_enrolment.semester_id from Student_Enrolment   union select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\" and student_enrolment.degree_program_id = \"Bachelor\"",
      "select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"MA\"   intersect select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = \"BEng\"",
      "select student_enrolment.semester_id from Student_Enrolment   union select student_enrolment.semester_id from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_program_id = \"MA\" and degree_programs.degree_program_id = \"B\"",
      "select student_enrolment.semester_id from Student_Enrolment   union select student_enrolment.semester_id from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_program_id = \"MA\" and degree_programs.degree_program_id = \"Bachelor\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 578,
    "db_id": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
    "gpt_answers1": [
      "select distinct addresses.address_id from Students join Addresses on Students.permanent_address_id = Addresses.address_id",
      "select count( distinct addresses.address_id) from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  students.student_id = students.current_address_id",
      "select count( distinct addresses.address_id) from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  students.current_address_id = 1",
      "select count( distinct addresses.address_id) from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  students.student_id = 1",
      "select count( distinct addresses.address_id) from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  students.student_id = \"current_address_id\"",
      "select count( distinct addresses.address_id) from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  students.current_address_id = students.permanent_address_id",
      "select distinct addresses.address_id , students.current_address_id from Students join Addresses on Students.permanent_address_id = Addresses.address_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 583,
    "db_id": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "gpt_answers1": [
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Hati\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = 9700166582",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    ],
    "tags1": [
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 584,
    "db_id": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
    "gpt_answers1": [
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\"   union select students.first_name from Students where  students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Hati\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = 9700166582",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Hati\" or students.cell_mobile_number = \"09700166582\"",
      "select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = \"Haiti\" or students.cell_mobile_number = \"09700166582\""
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 631,
    "db_id": "tvshow",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "gpt_answers1": [
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"Yes\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"yes\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"1\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"9\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"10\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"2\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"60\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"HD\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 632,
    "db_id": "tvshow",
    "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "gpt_answers1": [
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"Yes\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"yes\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"1\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"Y\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv >= 2",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"9\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"High\"",
      "select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = \"HDR\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 642,
    "db_id": "tvshow",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "gpt_answers1": [
      "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
      "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
      "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) >= 2",
      "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2",
      "select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 645,
    "db_id": "tvshow",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "gpt_answers1": [
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 646,
    "db_id": "tvshow",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
    "gpt_answers1": [
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\"",
      "select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = \"Ben Jones\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 683,
    "db_id": "poker_player",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "gpt_answers1": [
      "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
      "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
      "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    ],
    "tags1": [
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 684,
    "db_id": "poker_player",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "gpt_answers1": [
      "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
      "select people.name from people where  people.people_id not in (select poker_player.People_ID from poker_player  )",
      "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID",
      "select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID"
    ],
    "tags1": [
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 691,
    "db_id": "voter_1",
    "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "gpt_answers1": [
      "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
      "select max(votes.created) from VOTES where  votes.state = \"CA\"",
      "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created asc limit 1",
      "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1",
      "select votes.created from VOTES where  votes.state = \"CA\"",
      "select votes.created from VOTES where  votes.state = \"CA\"   order by votes.created desc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 707,
    "db_id": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "gpt_answers1": [
      "select sum(country.surfacearea) from country where  country.region = \"Carribean\"  group by country.region",
      "select sum(country.surfacearea) from country where  country.region = \"Carribean\"",
      "select sum(country.surfacearea) from country where  country.region = \"Caribbean\"  group by country.region",
      "select sum(country.surfacearea) from country where  country.region = \"Caribbean\"",
      "select sum(country.surfacearea) from country where  country.region like \"%Carribean%\"",
      "select sum(country.surfacearea) from country where  country.continent = \"Caribbean\"  group by country.region",
      "select sum(country.surfacearea) from country where  country.continent = \"Caribbean\"  group by country.continent",
      "select sum(country.surfacearea) from country where  country.continent = \"Caribbean\""
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 713,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "gpt_answers1": [
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by countrylanguage.percentage desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 723,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "gpt_answers1": [
      "select country.population , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.gnp , country.population from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.population , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.population , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.continent , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.population , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1",
      "select country.continent , country.population , country.gnp from country where  country.continent = \"Asia\"   order by country.gnp desc limit 1"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 736,
    "db_id": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\""
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 737,
    "db_id": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.localname = \"Aruba\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 738,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\" and countrylanguage.isofficial = \"1\"",
      "select count( distinct city.id) from city join country on city.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.percentage) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\" and countrylanguage.isofficial = 1",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 739,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 744,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "gpt_answers1": [
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"english\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Englisch\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 745,
    "db_id": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
    "gpt_answers1": [
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"England\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"english\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Englisch\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )",
      "select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"Dutch\"   )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 748,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 749,
    "db_id": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" and countrylanguage.isofficial = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"French\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 751,
    "db_id": "world_1",
    "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
    "gpt_answers1": [
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
      "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 752,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "gpt_answers1": [
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select distinct country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"England\" or countrylanguage.language = \"Dutch\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 753,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
    "gpt_answers1": [
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
      "select distinct country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"England\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\"",
      "select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\" or countrylanguage.language = \"English\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 754,
    "db_id": "world_1",
    "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 755,
    "db_id": "world_1",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.isofficial = \"English\" or countrylanguage.isofficial = \"Dutch\"",
      "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"English\" or countrylanguage.isofficial = \"Dutch\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.isofficial = \"English\" or countrylanguage.isofficial = \"Dutch\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 760,
    "db_id": "world_1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "gpt_answers1": [
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"  group by city.population  order by sum(city.population) desc limit 1",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"  group by city.name  order by sum(city.population) desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 761,
    "db_id": "world_1",
    "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "gpt_answers1": [
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" and city.population = (select max(city.population) from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"  )",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1",
      "select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"   order by city.population desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 764,
    "db_id": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "gpt_answers1": [
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial != \"English\"",
      "select avg(country.lifeexpectancy) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = \"English\"  )",
      "select avg(country.lifeexpectancy) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by countrylanguage.isofficial",
      "select avg(country.lifeexpectancy) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial != \"English\"  group by countrylanguage.isofficial",
      "select avg(country.lifeexpectancy) from country where  country.code not in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.isofficial = \"English\"  )",
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial not in (select countrylanguage.IsOfficial from countrylanguage where  countrylanguage.language = \"English\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 765,
    "db_id": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
    "gpt_answers1": [
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial != \"English\"",
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"English\"",
      "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial != \"English\"",
      "select avg(country.lifeexpectancy) from country where  country.code in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language != \"English\"  )    except select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"Yes\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 766,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "gpt_answers1": [
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by countrylanguage.countrycode",
      "select sum(country.population) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 767,
    "db_id": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
    "gpt_answers1": [
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select country.population from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 768,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrice\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrice\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 769,
    "db_id": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrice\"",
      "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"",
      "select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Bette Rix\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 770,
    "db_id": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930"
    ],
    "tags1": [
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 771,
    "db_id": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
    "gpt_answers1": [
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
      "select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930",
      "select count( distinct countrylanguage.isofficial) , country.indepyear from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930  group by countrylanguage.isofficial",
      "select count( distinct countrylanguage.isofficial) , country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930  group by country.name",
      "select count( distinct countrylanguage.isofficial) , country.indepyear from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930  group by countrylanguage.language"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 772,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "gpt_answers1": [
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.continent from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select * from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.continent from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 773,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "gpt_answers1": [
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.continent from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select distinct country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )",
      "select * from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = \"Europe\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 774,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "gpt_answers1": [
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.continent from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select country.name from country where  country.population <= (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 775,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
    "gpt_answers1": [
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.continent from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select min(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select country.name from country where  country.population <= (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population < (select sum(country.population) from country where  country.continent = \"Africa\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 776,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "gpt_answers1": [
      "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select country.continent from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.continent from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 777,
    "db_id": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "gpt_answers1": [
      "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select country.continent from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )",
      "select country.continent from country where  country.population > (select max(country.population) from country where  country.continent = \"Asia\"  )",
      "select distinct country.name from country where  country.population > (select max(country.population) from country where  country.continent = \"Africa\"  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 778,
    "db_id": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 779,
    "db_id": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "gpt_answers1": [
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 780,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 781,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 784,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "gpt_answers1": [
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.isofficial != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.isofficial != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 785,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "gpt_answers1": [
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.isofficial != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.isofficial != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city where  city.countrycode not in (select countrylanguage.CountryCode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  )    except select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.isofficial = \"English\"",
      "select city.name from city where  city.countrycode not in (select countrylanguage.CountryCode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  )    except select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.language != \"English\"",
      "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Europe\" and countrylanguage.isofficial != \"English\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 786,
    "db_id": "world_1",
    "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
    "gpt_answers1": [
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.isofficial = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select count( distinct city.name) from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.isofficial = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"Chinese\" and country.continent = \"Asia\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 787,
    "db_id": "world_1",
    "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "gpt_answers1": [
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.isofficial = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.isofficial = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"",
      "select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 801,
    "db_id": "world_1",
    "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "gpt_answers1": [
      "select country.name , country.surfacearea from country   order by country.population desc limit 5",
      "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
      "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
      "select country.name , country.surfacearea from country   order by country.population asc",
      "select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5",
      "select country.name , country.surfacearea from country   order by country.name desc limit 5",
      "select country.name , country.surfacearea from country   order by country.surfacearea asc"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 810,
    "db_id": "world_1",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "gpt_answers1": [
      "select avg(country.surfacearea) , sum(country.population) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
      "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
      "select country.surfacearea , avg(country.population) from country where  country.continent = \"North America\"  group by country.continent  intersect select country.surfacearea , avg(country.population) from country  group by country.continent having  avg(country.surfacearea) > 3000",
      "select avg(country.surfacearea) , sum(country.population) from country where  country.continent = \"North America\"   intersect select avg(country.surfacearea) , sum(country.population) from country  having  sum(country.surfacearea) > 3000",
      "select avg(country.surfacearea) , sum(country.population) from country where  country.continent = \"North America\"   intersect select avg(country.surfacearea) , sum(country.population) from country  having  max(country.surfacearea) > 3000",
      "select country.population , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000  group by country.continent"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 811,
    "db_id": "world_1",
    "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "gpt_answers1": [
      "select sum(country.population) , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
      "select avg(country.surfacearea) , sum(country.population) from country where  country.continent = \"North America\" and country.surfacearea > 3000",
      "select sum(country.population) , avg(country.surfacearea) from country where  country.region = \"North America\" and country.surfacearea > 3000",
      "select country.name , avg(country.surfacearea) from country where  country.continent = \"North America\" and country.surfacearea > 3000  group by country.name",
      "select country.name , avg(country.surfacearea) from country where  country.continent = \"North America\"  group by country.name  intersect select country.name , avg(country.surfacearea) from country  group by country.name having  avg(country.surfacearea) > 3000",
      "select avg(country.surfacearea) , sum(country.population) from country where  country.region = \"North America\" and country.surfacearea > 3000",
      "select avg(country.surfacearea) , sum(country.population) from country where  country.continent = \"North America\" and country.surfacearea > 3000"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 816,
    "db_id": "world_1",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "gpt_answers1": [
      "select countrylanguage.language from countrylanguage   order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.language , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select countrylanguage.language from countrylanguage  group by countrylanguage.percentage  order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.language from countrylanguage  group by countrylanguage.countrycode  order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.language from countrylanguage  group by countrylanguage.percentage  order by sum(countrylanguage.percentage) desc limit 1",
      "select countrylanguage.language , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.percentage",
      "select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by countrylanguage.percentage desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 817,
    "db_id": "world_1",
    "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "gpt_answers1": [
      "select countrylanguage.countrycode , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select countrylanguage.countrycode , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select countrylanguage.countrycode , countrylanguage.language from countrylanguage  group by countrylanguage.countrycode  order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.countrycode , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select countrylanguage.countrycode , countrylanguage.language , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select countrylanguage.countrycode , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode",
      "select country.name , country.code , max(countrylanguage.percentage) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.countrycode"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 818,
    "db_id": "world_1",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.countrycode  order by countrylanguage.percentage desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.countrycode  order by sum(countrylanguage.percentage) desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spain\"   order by countrylanguage.percentage desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.percentage  order by countrylanguage.percentage desc limit 1",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 3",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 819,
    "db_id": "world_1",
    "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.countrycode",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\" and countrylanguage.percentage >= 50",
      "select count(*) from countrylanguage where  countrylanguage.language = \"Spanish\" and countrylanguage.percentage >= \"50%\""
    ],
    "tags1": [
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 820,
    "db_id": "world_1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.countrycode  order by sum(countrylanguage.percentage) desc limit 1",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 3",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spain\"   order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
      "select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"   order by countrylanguage.percentage desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 821,
    "db_id": "world_1",
    "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "gpt_answers1": [
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\"  group by countrylanguage.countrycode",
      "select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"Spanish\" and countrylanguage.percentage = (select max(countrylanguage.percentage) from countrylanguage where  countrylanguage.language = \"Spanish\"  )"
    ],
    "tags1": [
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 866,
    "db_id": "network_1",
    "gold": "SELECT grade FROM Highschooler",
    "gpt_answers1": [
      "select distinct highschooler.grade from Highschooler",
      "select distinct highschooler.grade from Highschooler",
      "select distinct highschooler.grade from Highschooler",
      "select distinct highschooler.grade , highschooler.name from Highschooler",
      "select distinct highschooler.grade from Highschooler",
      "select distinct highschooler.grade from Highschooler",
      "select distinct highschooler.grade , highschooler.grade from Highschooler"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 884,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 885,
    "db_id": "network_1",
    "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
    "gpt_answers1": [
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id",
      "select count(*) , highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id",
      "select highschooler.name , count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
      "select sum(friend.friend_id) , highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name",
      "select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 886,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 887,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 888,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 889,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 890,
    "db_id": "network_1",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 891,
    "db_id": "network_1",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select highschooler.name from Highschooler where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyler\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 892,
    "db_id": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyler\"",
      "select count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyler\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 893,
    "db_id": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
    "gpt_answers1": [
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyler\"",
      "select count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\"",
      "select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = \"Kyle\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 896,
    "db_id": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "gpt_answers1": [
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.student_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 897,
    "db_id": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
    "gpt_answers1": [
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler   except select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.student_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 898,
    "db_id": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "gpt_answers1": [
      "select highschooler.id from Highschooler   intersect select likes.student_id from Likes",
      "select highschooler.id from Highschooler   intersect select friend.student_id from Friend",
      "select highschooler.id from Highschooler   union select likes.student_id from Likes",
      "select highschooler.id from Highschooler   intersect select likes.student_id from Likes",
      "select friend.student_id from Friend   intersect select likes.student_id from Likes",
      "select highschooler.id from Highschooler   intersect select likes.student_id from Likes",
      "select highschooler.id from Highschooler   intersect select friend.student_id from Friend"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 899,
    "db_id": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "gpt_answers1": [
      "select friend.student_id from Friend   intersect select likes.student_id from Likes",
      "select friend.student_id from Friend   union select likes.student_id from Likes",
      "select friend.student_id from Friend   intersect select likes.student_id from Likes",
      "select friend.student_id from Friend   intersect select likes.student_id from Likes",
      "select friend.student_id from Friend   intersect select likes.student_id from Likes",
      "select friend.student_id from Friend   intersect select likes.student_id from Likes"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 900,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "gpt_answers1": [
      "select highschooler.name from Highschooler   intersect select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
      "select highschooler.name from Highschooler where  highschooler.id in (select Friend.student_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1  )",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 2"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 901,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
    "gpt_answers1": [
      "select highschooler.name from Highschooler   intersect select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID",
      "select highschooler.name from Highschooler   intersect select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 1",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = \"1\"",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = \"%highschooler.name%\"",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = \"%likes%\"",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID join Likes on Highschooler.ID = Likes.student_id where  likes.liked_id = 4"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 910,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 911,
    "db_id": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
    "gpt_answers1": [
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by highschooler.name having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2",
      "select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 914,
    "db_id": "network_1",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "gpt_answers1": [
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )",
      "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.student_id from Friend  )",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 915,
    "db_id": "network_1",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "gpt_answers1": [
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name , avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select highschooler.name , avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID",
      "select avg(highschooler.grade) from Highschooler where  highschooler.id in (select Friend.friend_id from Friend  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 916,
    "db_id": "network_1",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "gpt_answers1": [
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.student_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 917,
    "db_id": "network_1",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
    "gpt_answers1": [
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.student_id from Friend  )",
      "select max(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )",
      "select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )"
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 920,
    "db_id": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "gpt_answers1": [
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id",
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select treatments.dog_id , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.name",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 921,
    "db_id": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "gpt_answers1": [
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id",
      "select dogs.name , avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id",
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 924,
    "db_id": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "gpt_answers1": [
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )   group by dogs.name",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )   group by dogs.owner_id",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )",
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by treatments.dog_id having  max(treatments.cost_of_treatment) > 1000",
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000",
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000",
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 925,
    "db_id": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
    "gpt_answers1": [
      "select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )   group by dogs.owner_id",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   group by dogs.owner_id",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   group by dogs.owner_id",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments where  treatments.cost_of_treatment > 1000  )",
      "select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.owner_id having  sum(treatments.cost_of_treatment) <= 1000",
      "select dogs.name from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  group by Treatments.dog_id having  max(treatments.cost_of_treatment) > 1000 )   group by dogs.name"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 926,
    "db_id": "dog_kennels",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "gpt_answers1": [
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Professionals where  professionals.first_name = \"dogs.name\"",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name != \"dogs.name\"",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Professionals",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Professionals where  professionals.first_name = \"Dogs.name\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 927,
    "db_id": "dog_kennels",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "gpt_answers1": [
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Professionals where  professionals.first_name = \"dogs.name\"",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id where  professionals.first_name != \"dogs.name\"",
      "select professionals.first_name from Professionals   intersect select owners.first_name from Owners",
      "select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 936,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 937,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "gpt_answers1": [
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 940,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "gpt_answers1": [
      "select dogs.owner_id , owners.zip_code from owners join charges join dogs  group by dogs.owner_id  order by sum(charges.charge_amount) desc limit 1",
      "select dogs.owner_id , owners.zip_code from owners join charges join dogs  group by dogs.owner_id  order by sum(charges.charge_amount) desc limit 1",
      "select dogs.owner_id , owners.zip_code from owners join charges join dogs  group by dogs.owner_id  order by sum(charges.charge_amount) desc limit 1",
      "select dogs.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1",
      "select dogs.owner_id , owners.zip_code from owners join charges join dogs  group by dogs.owner_id  order by sum(charges.charge_amount) desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 944,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "gpt_answers1": [
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment <= (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 945,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "gpt_answers1": [
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment <= (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select distinct professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )",
      "select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 954,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "gpt_answers1": [
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id   order by dogs.breed_code asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id   order by dogs.breed_code asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code   order by breeds.breed_name asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Breeds on Dogs.breed_code = Breeds.breed_code   order by breeds.breed_name asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  dogs.breed_code = (select min(dogs.breed_code) from Dogs  )",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  dogs.breed_code = (select max(dogs.breed_code) from Dogs  )",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 955,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "gpt_answers1": [
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.breed_code  order by count(*) asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id   order by dogs.breed_code asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.breed_code  order by count(*) asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) asc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) desc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.breed_code  order by count(*) desc limit 1",
      "select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  dogs.breed_code = (select max(dogs.breed_code) from Dogs  )"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 958,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "gpt_answers1": [
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 959,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
    "gpt_answers1": [
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select distinct dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id",
      "select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 960,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "gpt_answers1": [
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 961,
    "db_id": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
    "gpt_answers1": [
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  dogs.age = (select min(Dogs.age) from Dogs  )",
      "select owners.last_name , dogs.age from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  dogs.age = (select min(Dogs.age) from Dogs  )",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1",
      "select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 966,
    "db_id": "dog_kennels",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "gpt_answers1": [
      "select count(*) from Treatments",
      "select count( distinct treatments.dog_id) from Treatments",
      "select count(*) from Treatments",
      "select count(*) from Treatments"
    ],
    "tags1": [
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 990,
    "db_id": "dog_kennels",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges",
    "gpt_answers1": [
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , min(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , charges.charge_amount , min(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 991,
    "db_id": "dog_kennels",
    "gold": "SELECT charge_type ,  charge_amount FROM Charges",
    "gpt_answers1": [
      "select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , charges.charge_amount from Charges  group by charges.charge_type",
      "select charges.charge_type , min(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , avg(charges.charge_amount) from Charges  group by charges.charge_type",
      "select charges.charge_type , charges.charge_amount from Charges  group by charges.charge_type",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 992,
    "db_id": "dog_kennels",
    "gold": "SELECT max(charge_amount) FROM Charges",
    "gpt_answers1": [
      "select charges.charge_type from Charges   order by charges.charge_amount desc limit 1",
      "select charges.charge_type , charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type  order by max(charges.charge_amount) desc limit 1",
      "select max(charges.charge_amount) , charges.charge_type from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_type , charges.charge_amount from Charges   order by charges.charge_type desc limit 1",
      "select charges.charge_type , charges.charge_amount from Charges   order by charges.charge_type desc limit 1",
      "select max(charges.charge_amount) from Charges   order by charges.charge_type desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 993,
    "db_id": "dog_kennels",
    "gold": "SELECT max(charge_amount) FROM Charges",
    "gpt_answers1": [
      "select charges.charge_amount from Charges   order by charges.charge_type desc limit 1",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_amount from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_amount , charges.charge_type from Charges   order by charges.charge_amount desc limit 1",
      "select charges.charge_amount , charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_amount from Charges   order by charges.charge_amount desc limit 1",
      "select charges.charge_type , max(charges.charge_amount) from Charges  group by charges.charge_type  order by sum(charges.charge_amount) desc limit 1",
      "select charges.charge_amount from Charges   order by charges.charge_type desc limit 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 996,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "gpt_answers1": [
      "select distinct dogs.breed_code , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code",
      "select distinct dogs.breed_code , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code",
      "select dogs.breed_code , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code",
      "select count(*) , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code  group by dogs.breed_code",
      "select count(*) , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code  group by dogs.breed_code"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 998,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "gpt_answers1": [
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code where  professionals.professional_id = \"Treatments.professional_id\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 999,
    "db_id": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
    "gpt_answers1": [
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code where  professionals.professional_id = \"Treatments.professional_id\"",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code where  professionals.professional_id = \"Treatments.professional_id\"",
      "select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 1007,
    "db_id": "singer",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "gpt_answers1": [
      "select singer.name from singer where  singer.citizenship != \"French\"",
      "select singer.name from singer where  singer.citizenship != \"France\"",
      "select singer.name from singer where  singer.citizenship != \"F\"",
      "select singer.name from singer where  singer.citizenship != \"Francoise\"",
      "select singer.name from singer where  singer.citizenship != \"Fr\"",
      "select singer.name from singer where  singer.citizenship != \"Francois\"",
      "select singer.name from singer where  singer.citizenship != \"Franch\"",
      "select singer.name from singer where  singer.citizenship != \"Francis\""
    ],
    "tags1": [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 1022,
    "db_id": "singer",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "gpt_answers1": [
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name , count(*) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name , count(*) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 1023,
    "db_id": "singer",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
    "gpt_answers1": [
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name , count(*) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1",
      "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1"
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 1024,
    "db_id": "singer",
    "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
    "gpt_answers1": [
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name",
      "select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
    ],
    "tags1": [
      0,
      1,
      1,
      0,
      1,
      0,
      1,
      1
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  },
  {
    "case_id": 1032,
    "db_id": "real_estate_properties",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
    "gpt_answers1": [
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"C\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"A\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"H\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"ref\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"REF\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"Ref\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"B\"",
      "select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = \"Property\""
    ],
    "tags1": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    "gpt_answers2": [],
    "tags2": [],
    "gpt_answers3": [],
    "tags3": []
  }
]