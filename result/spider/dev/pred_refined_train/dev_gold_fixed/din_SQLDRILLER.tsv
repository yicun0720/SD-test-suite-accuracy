1	SELECT COUNT(DISTINCT Singer_ID) FROM singer	SELECT count(*) FROM singer
1	SELECT COUNT(*) FROM singer WHERE Singer_ID IS NOT NULL	SELECT count(*) FROM singer
1	SELECT Name, Country, Age FROM singer ORDER BY Age DESC, Singer_ID ASC	SELECT name, country, age FROM singer ORDER BY age DESC, Singer_ID ASC
1	SELECT Name AS SingerName, Country AS SingerCountry, Age AS SingerAge FROM singer ORDER BY Age DESC, Singer_ID ASC	SELECT name, country, age FROM singer ORDER BY age DESC, Singer_ID ASC
1	SELECT AVG(Age) average_age, MIN(Age) min_age, MAX(Age) max_age FROM singer WHERE Country = 'France'	SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'
0	SELECT AVG(singer.Age) AS Average, MIN(singer.Age) AS Minimum, MAX(singer.Age) AS Maximum FROM singer WHERE singer.Country = 'French'	SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'
0	SELECT Name, Song_release_year FROM (SELECT Name, Song_release_year, Age, RANK() OVER (ORDER BY Age ASC) AS rank FROM singer) WHERE rank = 1	SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
1	SELECT Song_Name, Song_release_year FROM singer WHERE Age IN (SELECT MIN(Age) FROM singer)	SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)
0	SELECT DISTINCT Country FROM singer WHERE Age > 20 AND Country <> ''	SELECT DISTINCT country FROM singer WHERE age > 20
0	SELECT DISTINCT Country FROM singer WHERE Age > 20 ORDER BY Country DESC LIMIT 100	SELECT DISTINCT country FROM singer WHERE age > 20
1	SELECT Country, COUNT(DISTINCT Singer_ID) AS NumberOfSingers FROM singer GROUP BY Country	SELECT country , count(*) FROM singer GROUP BY country
1	SELECT Country, COUNT(*) FROM singer GROUP BY Country	SELECT country , count(*) FROM singer GROUP BY country
1	SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2)	SELECT DISTINCT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)
1	SELECT DISTINCT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(s2.Age) FROM singer s2)	SELECT DISTINCT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)
1	SELECT Name, Location FROM stadium WHERE Capacity > 4999 AND Capacity < 10001	SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
1	SELECT Name, Location FROM stadium WHERE Capacity > 4999 AND Capacity < 10001	SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
1	SELECT MAX(stadium.Capacity) AS 'Max Capacity', AVG(stadium.Capacity) AS 'Average Capacity' FROM stadium	SELECT MAX(Capacity), AVG(Capacity) FROM stadium
0	SELECT MAX(Capacity) AS MaxCapacity, AVG(Average) AS AverageCapacity FROM stadium	select avg(capacity) , max(capacity) from stadium
1	SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT MIN(Stadium_ID) FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium))	SELECT name, capacity FROM stadium ORDER BY average DESC, Stadium_ID ASC LIMIT 1
1	SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium LIMIT 1)	SELECT name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium)
1	SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)	SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015
1	SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year IN (2014, 2015)	SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015
0	SELECT s.Name, COUNT(c.concert_ID) FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name	SELECT s.name as StadiumName, (SELECT COUNT(*) FROM concert WHERE stadium_id = s.stadium_id) AS NumberOfConcerts FROM stadium s
1	SELECT s.Stadium_ID AS ID, COUNT(c.concert_ID) AS TotalConcerts FROM stadium s LEFT OUTER JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID	SELECT s.stadium_id, COUNT(c.concert_id) AS concert_count FROM stadium s LEFT JOIN concert c ON s.stadium_id = c.stadium_id GROUP BY s.stadium_id
0	SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID = (SELECT c.Stadium_ID FROM concert c WHERE c.Year >= 2014 GROUP BY c.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM concert AS T3 JOIN stadium AS T4 ON T3.stadium_id = T4.stadium_id WHERE T3.year >= 2014 GROUP BY T4.stadium_id ORDER BY c desc LIMIT 1)
0	SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID HAVING COUNT(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) AS concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) AS Counts))	SELECT first.name, first.capacity FROM (SELECT s.name, s.capacity FROM stadium s, concert c WHERE s.stadium_id = c.stadium_id AND c.year > 2013 GROUP BY s.stadium_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM concert GROUP BY stadium_id) as subquery)) AS first
1	SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM concert GROUP BY Year) AS counts)	SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM concert GROUP BY Year) AS max_count)
0	SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1	SELECT Year FROM concert GROUP BY Year HAVING count(*) = (SELECT count(*) as cnt FROM concert GROUP BY Year ORDER BY cnt DESC LIMIT 1)
1	SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
1	SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)	SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
1	SELECT Country FROM (SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30) AS subquery	SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30
1	SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)	SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
1	SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)	SELECT s.name FROM stadium s WHERE s.stadium_id NOT IN (SELECT c.stadium_id FROM concert c WHERE c.year = 2014)
1	SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS NumberOfSingers FROM concert c LEFT OUTER JOIN singer_in_concert s ON c.concert_ID = s.concert_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme	SELECT concert_name, theme, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_in_concert.concert_id = concert.concert_id) AS number_of_singers FROM concert
1	SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme	SELECT concert.concert_name, concert.theme, COUNT(DISTINCT sic.singer_id) num_singers FROM concert LEFT JOIN singer_in_concert sic ON concert.concert_id = sic.concert_id GROUP BY concert.concert_id, concert.concert_name, concert.theme
0	SELECT s.Name, COUNT(c.concert_ID) AS Concert_Total FROM singer s LEFT JOIN singer_in_concert c ON s.Singer_ID = c.Singer_ID GROUP BY s.Name ORDER BY s.Name	SELECT name as SingerName, (SELECT COUNT(*) FROM singer_in_concert WHERE singer_id = singer.singer_id) as ConcertCount FROM singer
0	SELECT s.Name, COUNT(sic.Singer_ID) AS ConcertCount FROM singer s LEFT OUTER JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Name	SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id
1	SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014	SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014
1	SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014	SELECT DISTINCT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014
0	SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'	SELECT name, country FROM singer WHERE INSTR(song_name, 'Hey') > 0
0	SELECT DISTINCT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'	SELECT name, country FROM singer WHERE instr(song_name, 'Hey') > 0
1	SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (SELECT c.Stadium_ID FROM concert c GROUP BY c.Stadium_ID HAVING SUM(CASE WHEN c.Year = 2014 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN c.Year = 2015 THEN 1 ELSE 0 END) > 0)	SELECT Name, Location FROM stadium where Stadium_ID in (SELECT Stadium_ID FROM concert WHERE year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE year = 2015)
1	SELECT s.Name, s.Location FROM stadium s WHERE (SELECT COUNT(DISTINCT c.Year) FROM concert c WHERE c.Stadium_ID = s.Stadium_ID AND c.Year IN (2014, 2015)) = 2	SELECT Name, Location FROM stadium where Stadium_ID in (SELECT Stadium_ID FROM concert WHERE year = 2014 INTERSECT SELECT Stadium_ID FROM concert WHERE year = 2015)
0	SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)	SELECT COUNT(c.concert_id) FROM concert AS c JOIN stadium AS s ON c.stadium_id = s.stadium_id WHERE s.capacity = (SELECT MAX(capacity) FROM stadium)
1	SELECT COUNT(*) FROM concert INNER JOIN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)) AS MaxCapacityStadium ON concert.Stadium_ID = MaxCapacityStadium.Stadium_ID	SELECT COUNT(concert.concert_id) FROM concert JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium)
1	SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10.0	SELECT count(*) FROM pets WHERE weight > 10
1	SELECT COUNT(*) AS NumberOfPets FROM Pets WHERE weight > 10.0	SELECT count(*) FROM pets WHERE weight > 10
1	SELECT P.weight FROM Pets P WHERE P.PetType = 'dog' AND P.pet_age = (SELECT MIN(P2.pet_age) FROM Pets P2 WHERE P2.PetType = 'dog')	SELECT weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'
0	SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') GROUP BY weight	SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets WHERE PetType = 'dog') AND PetType = 'dog'
1	SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType	SELECT max(weight) , petType FROM pets GROUP BY petType
1	SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType	SELECT max(weight) , petType FROM pets GROUP BY petType
0	SELECT COUNT(HP.PetID) FROM Has_Pet HP, Student S WHERE HP.StuID = S.StuID AND S.Age > 20	SELECT COUNT(DISTINCT hp.petid) FROM has_pet hp INNER JOIN student s ON hp.stuid = s.stuid WHERE s.age > 20
1	SELECT COUNT(DISTINCT hp.PetID) FROM Has_Pet hp, Student s WHERE hp.StuID = s.StuID AND s.Age > 20	SELECT COUNT(*) FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE age > 20));
1	SELECT COUNT(DISTINCT Pets.PetID) FROM Pets, Has_Pet, Student WHERE Pets.PetID = Has_Pet.PetID AND Has_Pet.StuID = Student.StuID AND Pets.PetType = 'dog' AND Student.Sex = 'F'	SELECT COUNT(DISTINCT pets.petid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.sex = 'F' AND pets.pettype = 'dog'
0	SELECT COUNT(*) FROM Student s, Has_Pet hp, Pets p WHERE s.StuID = hp.StuID AND hp.PetID = p.PetID AND p.PetType = 'dog' AND s.Sex = 'female'	SELECT count(DISTINCT T3.PetID) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'
1	SELECT COUNT(*) FROM (SELECT DISTINCT PetType FROM Pets)	SELECT count(DISTINCT pettype) FROM pets
1	SELECT COUNT(*) FROM (SELECT DISTINCT PetType FROM Pets)	SELECT count(DISTINCT pettype) FROM pets
1	SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))	SELECT fname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' OR pettype = 'dog'))
1	SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))	SELECT T1.Fname FROM student AS T1 WHERE T1.StuID IN (SELECT T2.StuID FROM has_pet AS T2 JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog')
1	SELECT Fname FROM Student WHERE EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = Student.StuID) AND EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = Student.StuID)	SELECT s.fname FROM student s WHERE s.stuid IN (SELECT hp.stuid FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'cat') AND s.stuid IN (SELECT hp.stuid FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype = 'dog')
1	SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog') GROUP BY StuID HAVING COUNT(DISTINCT P.PetType) = 2)	SELECT s.fname FROM student s WHERE StuID in (SELECT hp.StuID FROM has_pet hp JOIN pets p ON hp.petid = p.petid WHERE p.pettype IN ('cat', 'dog') GROUP BY hp.StuID HAVING COUNT(DISTINCT p.pettype) = 2)
0	SELECT DISTINCT S.Major, S.Age FROM Student S WHERE NOT EXISTS (SELECT * FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)	SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')
1	SELECT Major, Age FROM Student AS S WHERE NOT EXISTS (SELECT * FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)	SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')
1	SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat'	SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
1	SELECT DISTINCT StuID FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')	SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'
1	SELECT Fname, Age FROM Student AS S WHERE EXISTS (SELECT * FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT * FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)	SELECT s.fname, s.age FROM student s WHERE EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND has_pet.stuid = s.stuid) AND NOT EXISTS (SELECT 1 FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND has_pet.stuid = s.stuid)
1	SELECT S.Fname FROM Student S WHERE EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND HP.StuID = S.StuID) AND NOT EXISTS (SELECT 1 FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND HP.StuID = S.StuID)	SELECT s1.fname FROM student s1 WHERE EXISTS (SELECT * FROM has_pet hp1 JOIN pets p1 ON hp1.petid = p1.petid WHERE p1.pettype = 'dog' AND hp1.stuid = s1.stuid) AND NOT EXISTS (SELECT * FROM has_pet hp2 JOIN pets p2 ON hp2.petid = p2.petid WHERE p2.pettype = 'cat' AND hp2.stuid = s1.stuid)
1	SELECT P.PetType, P.weight FROM Pets P WHERE P.pet_age = (SELECT MIN(pet_age) FROM Pets)	SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
1	SELECT P.PetType, P.weight FROM Pets P WHERE P.pet_age = (SELECT MIN(pet_age) FROM Pets)	SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
1	SELECT PetID, weight FROM Pets WHERE pet_age > 1	SELECT petid , weight FROM pets WHERE pet_age > 1
1	SELECT PetID, weight FROM Pets WHERE pet_age > 1	SELECT petid , weight FROM pets WHERE pet_age > 1
1	SELECT PetType, AVG(pet_age) as Average_Age, MAX(pet_age) as Maximum_Age FROM Pets GROUP BY PetType	SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype
1	SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Maximum_Age FROM Pets GROUP BY PetType	SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype
1	SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType	SELECT avg(weight) , pettype FROM pets GROUP BY pettype
1	SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType	SELECT avg(weight) , pettype FROM pets GROUP BY pettype
1	SELECT Fname, Age FROM Student WHERE EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = Student.StuID)	SELECT fname, age FROM student WHERE stuid IN (SELECT stuid FROM has_pet);
1	SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT DISTINCT StuID FROM Has_Pet)	SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid
0	SELECT p.PetID FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND s.LName = 'Smith'	SELECT petid FROM pets WHERE petid IN (SELECT petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE lname = 'Smith')
0	SELECT p.PetID FROM Pets p, Has_Pet hp, Student s WHERE p.PetID = hp.PetID AND hp.StuID = s.StuID AND s.LName = 'Smith'	SELECT petid FROM pets WHERE petid IN (SELECT petid FROM has_pet WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Smith'))
1	SELECT Student.StuID, COUNT(Has_Pet.PetID) AS PetCount FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID	SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid
1	SELECT Student.StuID, COUNT(Has_Pet.PetID) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID	select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid
1	SELECT Fname, Sex FROM Student S WHERE S.StuID IN (SELECT H.StuID FROM Has_Pet H GROUP BY H.StuID HAVING COUNT(H.PetID) > 1)	SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1
1	SELECT Fname, Sex FROM Student S WHERE (SELECT COUNT(*) FROM Has_Pet H WHERE H.StuID = S.StuID) > 1	SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1
1	SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3))	SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3))
1	SELECT LName FROM Student s WHERE EXISTS (SELECT * FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE hp.StuID = s.StuID AND p.PetType = 'cat' AND p.pet_age = 3)	SELECT lname FROM student WHERE stuid IN (SELECT stuid FROM has_pet WHERE petid IN (SELECT petid FROM pets WHERE pettype = 'cat' AND pet_age = 3))
1	SELECT AVG(Student.Age) AS AverageAge FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IS NULL	select avg(age) from student where stuid not in (select stuid from has_pet)
1	SELECT AVG(Age) FROM Student AS S LEFT JOIN Has_Pet AS H ON S.StuID = H.StuID WHERE H.StuID IS NULL	select avg(age) from student where stuid not in (select stuid from has_pet)
1	SELECT DISTINCT COUNT(Continent) FROM continents	SELECT count(*) FROM CONTINENTS;
1	SELECT COUNT(Continent) FROM continents	SELECT count(*) FROM CONTINENTS;
1	SELECT c.ContId, c.Continent, COUNT(d.CountryId) AS NumberOfCountries FROM continents c LEFT JOIN countries d ON c.ContId = d.Continent GROUP BY c.ContId, c.Continent	SELECT a.contid, a.continent, COALESCE(b.num_countries, 0) AS num_countries FROM continents a LEFT JOIN (SELECT continent, COUNT(*) AS num_countries FROM countries GROUP BY continent) b ON a.contid = b.continent
1	SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent	SELECT contid, continent, (SELECT COUNT(*) FROM countries WHERE continent = continents.contid) AS country_count FROM continents;
1	SELECT COUNT(*) FROM countries	SELECT count(*) FROM COUNTRIES;
1	SELECT COUNT(*) FROM countries	SELECT count(*) FROM COUNTRIES;
1	SELECT cm.FullName AS MakerName, cm.Id AS MakerId, COUNT(DISTINCT ml.Model) AS ModelsProduced FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id	SELECT fullName, id, (SELECT COUNT(*) FROM model_list WHERE model_list.maker = car_makers.id) AS model_count FROM car_makers
1	SELECT cm.FullName AS MakerName, cm.Id AS MakerId, COUNT(ml.ModelId) AS TotalModels FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName	SELECT id, fullname, (SELECT COUNT(modelid) FROM model_list WHERE model_list.maker = car_makers.id) AS TotalModels FROM car_makers
0	SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data))	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.horsepower = (SELECT min(T3.Horsepower) FROM CARS_DATA AS T3)
0	SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.horsepower = (SELECT min(T3.Horsepower) FROM CARS_DATA AS T3)
1	SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))	SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)
0	SELECT MakeId FROM car_names WHERE EXISTS (SELECT 1 FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data) AND Id = car_names.MakeId)	SELECT T1.ModelId FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < (SELECT AVG(Weight) FROM cars_data)
0	SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970	SELECT T1.FullName FROM CAR_MAKERS AS T1 WHERE T1.Id IN (SELECT T2.Maker FROM MODEL_LIST AS T2 JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970');
0	SELECT DISTINCT cm.FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970	SELECT T1.FullName FROM CAR_MAKERS AS T1 WHERE T1.Id IN (SELECT T2.Maker FROM MODEL_LIST AS T2 JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970');
1	SELECT car_names.Make, cars_data.Year FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)	SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);
0	SELECT cm.FullName, cd.Year FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.ModelId = cn.MakeId AND cn.MakeId = cd.Id ORDER BY cd.Year ASC LIMIT 1	SELECT T4.FullName , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);
0	SELECT DISTINCT Model FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Year > 1980 GROUP BY cn.Model	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;
1	SELECT ml.ModelId, ml.Model FROM model_list ml, car_names cn, cars_data cd WHERE ml.Model = cn.Model AND cn.MakeId = cd.Id AND cd.Year > 1980 GROUP BY ml.ModelId, ml.Model	SELECT DISTINCT T1.ModelId, T1.Model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id WHERE T3.Year > 1980
0	SELECT C.Continent AS ContinentName, COUNT(DISTINCT M.Id) AS TotalCarMakers FROM continents C LEFT JOIN countries CO ON C.ContId = CO.Continent LEFT JOIN car_makers M ON CO.CountryId = M.Country GROUP BY C.Continent	SELECT T1.Continent, count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId;
0	SELECT c.Continent AS ContinentName, COUNT(m.Id) AS TotalMakers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent ORDER BY c.Continent	SELECT cont.continent, numMakers FROM (SELECT contid, COUNT(DISTINCT car_makers.id) as numMakers FROM continents LEFT JOIN countries ON continents.contid = countries.continent LEFT JOIN car_makers ON car_makers.country = countries.countryid GROUP BY contid) AS subquery JOIN continents cont ON cont.contid = subquery.contid
1	SELECT c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers m WHERE m.Country = c.CountryId GROUP BY m.Country HAVING COUNT(m.Id) = (SELECT MAX(MakerCount) FROM (SELECT COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country) AS SubQuery))	SELECT c.countryname FROM countries c WHERE c.countryid IN (SELECT cm.country FROM car_makers cm GROUP BY cm.country HAVING COUNT(cm.maker) = (SELECT MAX(counted) FROM (SELECT COUNT(maker) AS counted FROM car_makers GROUP BY country)))
1	SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId HAVING COUNT(cm.Id) = (SELECT MAX(cnt) FROM (SELECT COUNT(Id) AS cnt FROM car_makers GROUP BY Country) t)	SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country, T2.CountryName HAVING COUNT(*) = (SELECT MAX(car_count) FROM (SELECT COUNT(*) as car_count FROM car_makers GROUP BY Country) as counts)
0	SELECT FullName, COUNT(Model) AS ModelCount FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY FullName	select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;
1	SELECT Id, FullName, (SELECT COUNT(Model) FROM model_list WHERE Maker = car_makers.Id) AS ModelCount FROM car_makers	SELECT cm.id, cm.fullname, (SELECT COUNT(*) FROM model_list WHERE model_list.maker = cm.id) AS model_count FROM car_makers cm GROUP BY cm.id, cm.fullname
0	SELECT Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId AND car_names.Model = 'amc hornet sportabout (sw)'	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';
0	SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'amc hornet sportabout (sw)'	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';
0	SELECT COUNT(car_makers.Id) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId AND countries.CountryName = 'France'	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';
1	SELECT COUNT(*) FROM (SELECT DISTINCT car_makers.Id FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France')	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';
0	SELECT COUNT(DISTINCT cn.Model) FROM car_names AS cn JOIN car_makers AS cm ON cn.MakeId = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA'	SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';
0	SELECT COUNT(DISTINCT cn.Model) FROM car_names AS cn JOIN car_makers AS cm ON cn.MakeId = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa'	SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';
1	SELECT AVG(MPG) AS average_mpg FROM cars_data WHERE Cylinders = 4	SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
1	SELECT AVG(MPG) AS Average_Miles_Per_Gallon FROM cars_data WHERE Cylinders = 4	SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;
1	SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974	select min(weight) from cars_data where cylinders = 8 and year = 1974
0	SELECT MIN(Weight) FROM cars_data WHERE Cylinders = '8' AND Year = 1974 GROUP BY Year	select min(weight) from cars_data where cylinders  =  8 and year  =  1974
1	SELECT `FullName`, `Model` FROM `car_makers` JOIN `model_list` ON `car_makers`.`Id` = `model_list`.`Maker`	SELECT T2.FullName , T1.Model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id;
1	SELECT car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker	SELECT T2.FullName , T1.Model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id;
1	SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country	SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;
1	SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId)	SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;
1	SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Horsepower > 150	SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;
1	SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Horsepower > 150	SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;
1	SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year ORDER BY AverageWeight DESC	SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;
1	SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year ORDER BY Year DESC, Average_Weight ASC	SELECT avg(Weight), YEAR FROM CARS_DATA GROUP BY YEAR;
0	SELECT countries.CountryName FROM countries INNER JOIN continents ON countries.Continent = continents.ContId INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryId HAVING count(*) >= 3;
0	SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN continents AS ct ON c.Continent = ct.ContId WHERE ct.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryId HAVING count(*) >= 3;
0	SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaximumHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId AND cars_data.Cylinders = 3 GROUP BY car_names.Make	SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 and T2.Horsepower = (SELECT max(T3.Horsepower) FROM cars_data AS T3)
0	SELECT car_names.Make, MAX(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make HAVING MAX(cars_data.Horsepower) = (SELECT MAX(Horsepower) FROM cars_data WHERE Cylinders = 3)	SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 and T2.Horsepower = (SELECT max(T3.Horsepower) FROM cars_data AS T3)
0	SELECT cn.Model FROM car_names cn INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data)	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(T3.MPG) FROM CARS_DATA AS T3)
0	SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data))	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(T3.MPG) FROM CARS_DATA AS T3)
1	SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980	SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;
1	SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980	select avg(horsepower) from cars_data where year < 1980;
0	SELECT AVG(Edispl) FROM cars_data cd, car_names cn WHERE cd.Id = cn.MakeId AND cn.Model = 'Volvo'	SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';
0	SELECT AVG(cars_data.Edispl) AS AvgEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'Volvo Corporation'	SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';
1	SELECT DISTINCT Cylinders, MAX(Accelerate) OVER (PARTITION BY Cylinders) AS MaxAcceleration FROM cars_data	SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;
1	SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders ORDER BY Cylinders DESC	SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;
0	SELECT M.ModelId FROM model_list M INNER JOIN car_names C ON M.Model = C.Model GROUP BY M.ModelId HAVING COUNT(DISTINCT C.MakeId) = (SELECT MAX(COUNTS) FROM (SELECT COUNT(DISTINCT MakeId) AS COUNTS FROM car_names GROUP BY Model) AS SubQuery)	SELECT T2.ModelId FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING count(DISTINCT T1.Make) = (SELECT max(cnt) FROM (SELECT count(DISTINCT T3.Make) AS cnt FROM CAR_NAMES AS T3 JOIN MODEL_LIST AS T4 ON T3.Model = T4.Model GROUP BY T4.Model));
0	WITH RankedModels AS (SELECT model_list.ModelId, RANK() OVER (ORDER BY COUNT(DISTINCT car_names.MakeId) DESC) AS Rank FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.ModelId) SELECT ModelId FROM RankedModels WHERE Rank = 1	SELECT T2.ModelId FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model GROUP BY T2.Model HAVING count(DISTINCT T1.Make) = (SELECT max(cnt) FROM (SELECT count(DISTINCT T3.Make) AS cnt FROM CAR_NAMES AS T3 JOIN MODEL_LIST AS T4 ON T3.Model = T4.Model GROUP BY T4.Model));
1	SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4	SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
1	SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Cylinders > 4	SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
1	SELECT COUNT(Id) AS CarCount FROM cars_data WHERE Year = '1980'	SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;
1	SELECT COUNT(*) FROM cars_data WHERE Year = 1980 AND Id IS NOT NULL	SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;
1	SELECT COUNT(*) FROM model_list m JOIN car_makers c ON m.Maker = c.Id WHERE c.FullName = 'American Motor Company'	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
1	SELECT COUNT(*) FROM model_list m JOIN car_makers c ON m.Maker = c.Id WHERE c.FullName = 'American Motor Company'	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
1	SELECT cm.FullName, cm.Id FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(ml.Model) > 3	SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;
0	SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3	SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;
0	SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight > 3500) OR MakeId IN (SELECT ModelId FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors'))	SELECT DISTINCT model FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE fullname = 'General Motors') OR model IN (SELECT cn.model FROM car_names cn JOIN cars_data cd ON cn.makeid = cd.id WHERE cd.weight > 3500)
0	SELECT DISTINCT Model FROM car_names WHERE MakeId IN (SELECT Id FROM car_makers WHERE Maker = 'General Motors' UNION SELECT Id FROM cars_data WHERE Weight > 3500)	SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;
1	SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 GROUP BY Year	select distinct year from cars_data where weight between 3000 and 4000;
1	SELECT DISTINCT a.Year FROM cars_data a JOIN cars_data b ON a.Year = b.Year WHERE a.Weight < 4000 AND b.Weight > 3000	SELECT year FROM (SELECT year FROM cars_data WHERE weight > 3000 INTERSECT SELECT year FROM cars_data WHERE weight < 4000)
1	SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data LIMIT 1)	SELECT d.horsepower FROM cars_data AS d WHERE d.accelerate = (SELECT MAX(accelerate) FROM cars_data)
1	SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)	SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.accelerate = (SELECT MAX(T2.accelerate) FROM CARS_DATA AS T2)
0	SELECT Cylinders FROM (SELECT * FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'Volvo' ORDER BY Accelerate) AS VolvoCars LIMIT 1	SELECT Distinct T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' and T1.Accelerate = (SELECT min(T3.Accelerate) FROM cars_data AS T3)
0	SELECT Cylinders FROM cars_data WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo')	SELECT Distinct T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' and T1.Accelerate = (SELECT min(T3.Accelerate) FROM cars_data AS T3)
0	SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Horsepower FROM cars_data ORDER BY Horsepower DESC LIMIT 1)	SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT min(Accelerate) FROM CARS_DATA WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data));
0	SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))	SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT min(Accelerate) FROM CARS_DATA WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data));
1	SELECT COUNT(*) FROM (SELECT Country, COUNT(*) AS TotalMakers FROM car_makers GROUP BY Country HAVING TotalMakers > 2) AS CountQuery	SELECT COUNT(*) FROM (SELECT country FROM car_makers GROUP BY country HAVING COUNT(maker) > 2)
0	SELECT COUNT(country) FROM (SELECT Country, COUNT(Id) AS MakerCount FROM car_makers GROUP BY Country HAVING MakerCount > 2) AS C	SELECT COUNT(DISTINCT c.countryid) FROM countries c INNER JOIN car_makers cm ON c.countryid = cm.country GROUP BY c.countryid HAVING COUNT(cm.id) > 2
1	SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Cylinders > 6	SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
1	SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6	SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;
0	SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Cylinders = 4) ORDER BY (SELECT Horsepower FROM cars_data WHERE cars_data.Id = car_names.MakeId) DESC LIMIT 1	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 AND T2.horsepower = (SELECT max(T3.Horsepower) FROM CARS_DATA AS T3 WHERE T3.Cylinders = 4)
0	SELECT Model FROM (SELECT car_names.Model, cars_data.Horsepower FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4) AS SubQuery ORDER BY Horsepower DESC LIMIT 1	SELECT DISTINCT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 AND T2.horsepower = (SELECT max(T3.Horsepower) FROM CARS_DATA AS T3 WHERE T3.Cylinders = 4)
0	SELECT cn.MakeId, cm.Maker FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3	SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;
1	SELECT cn.MakeId, cn.Make FROM car_names cn, cars_data cd WHERE cn.MakeId = cd.Id AND cd.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4	select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;
0	SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 GROUP BY Cylinders, Year	select max(mpg) from cars_data where cylinders = 8 or year < 1980
0	SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 GROUP BY Cylinders, Year	select max(mpg) from cars_data where cylinders = 8 or year < 1980
0	SELECT DISTINCT c.Id FROM cars_data c, car_names n, model_list m, car_makers k WHERE c.Weight < 3500 AND c.Id = n.MakeId AND n.Make = m.Model AND m.Maker = k.Id AND k.FullName <> 'Ford Motor Company'	SELECT DISTINCT T1.ModelId FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'
0	SELECT DISTINCT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id INNER JOIN model_list ON car_names.MakeId = model_list.ModelId INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';
1	SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL	SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
1	SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)	SELECT countryname FROM countries WHERE countryid NOT IN (SELECT country FROM car_makers)
0	SELECT M.Id, M.Maker FROM car_makers M JOIN model_list L ON M.Id = L.Maker JOIN car_names N ON L.Model = N.Model JOIN cars_data D ON N.MakeId = D.Id GROUP BY M.Id, M.Maker HAVING COUNT(DISTINCT L.Model) >= 2 AND COUNT(D.Id) > 3	select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;
0	SELECT DISTINCT cm.Id, cm.Maker FROM car_makers cm, model_list ml, car_names cn, cars_data cd WHERE cm.Id = ml.Maker AND ml.Model = cn.Model AND cn.MakeId = cd.Id GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cd.Id) > 3	SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;
0	SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)	SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';
0	SELECT c.CountryId, c.CountryName FROM countries c WHERE EXISTS (SELECT 1 FROM car_makers cm WHERE cm.Country = c.CountryId GROUP BY cm.Country HAVING COUNT(cm.Id) > 3) OR EXISTS (SELECT 1 FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model WHERE cn.Model = 'fiat' AND cm.Country = c.CountryId)	select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';
0	SELECT a.Country FROM airlines a WHERE a.Airline LIKE '%JetBlue Airways%'	SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'
0	SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways' AND Country IS NOT NULL	SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'
1	SELECT a.Abbreviation FROM airlines AS a WHERE a.Airline = 'JetBlue Airways'	SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
0	SELECT a.Abbreviation FROM airlines a WHERE a.Airline LIKE '%Jetblue Airways%'	SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'
1	SELECT Airline AS AirlineName, Abbreviation AS AirlineAbbreviation FROM airlines WHERE Country = 'USA' GROUP BY Airline, Abbreviation	SELECT DISTINCT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'
1	SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA'	SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'
1	SELECT AirportCode, AirportName FROM airports WHERE City LIKE 'Anthony'	SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'
1	SELECT AirportCode, AirportName FROM airports WHERE City LIKE 'Anthony'	SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'
1	SELECT COUNT(*) AS NumberOfAirlines FROM airlines	SELECT count(*) FROM AIRLINES
1	SELECT COUNT(1) FROM airlines	SELECT count(*) FROM AIRLINES
1	SELECT COUNT(1) FROM airports	SELECT count(*) FROM AIRPORTS
1	SELECT COUNT(DISTINCT AirportCode) AS UniqueAirports FROM airports	SELECT count(*) FROM AIRPORTS
1	SELECT COUNT(*) AS TotalFlights FROM flights	SELECT count(*) FROM FLIGHTS
1	SELECT COUNT(FlightNo) FROM flights	SELECT count(*) FROM FLIGHTS
1	SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' AND uid IS NOT NULL	SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
1	SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'	SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'
1	SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'	SELECT count(*) FROM AIRLINES WHERE Country = 'USA'
1	SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'	SELECT count(*) FROM AIRLINES WHERE Country  =  'USA'
1	SELECT City, Country FROM airports WHERE AirportName IN ('Alton')	SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'
1	SELECT City, Country FROM airports WHERE LOWER(AirportName) = 'alton'	SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'
1	SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
1	SELECT AirportName FROM airports WHERE AirportCode = 'AKO'	SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'
1	SELECT DISTINCT AirportName FROM airports WHERE City LIKE 'Aberdeen'	SELECT DISTINCT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
1	SELECT AirportName FROM airports WHERE City = 'Aberdeen'	SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'
1	SELECT COUNT(FlightNo) FROM flights WHERE SourceAirport = 'APG'	SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
1	SELECT COUNT(*) AS FlightCount FROM flights WHERE SourceAirport = 'APG'	SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'
1	SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = 'ATO'	SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO'
1	SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE AirportCode = 'ATO')	SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'
1	SELECT COUNT(1) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT COUNT(1) FROM flights, airports WHERE flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
1	SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
0	SELECT COUNT(flights.FlightNo) AS NumberOfFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT COUNT(*) FROM flights f INNER JOIN airports src ON f.SourceAirport = src.AirportCode INNER JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'
1	SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'
1	SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'
0	SELECT COUNT(*) FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Jetblue Airways'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'
1	SELECT COUNT(*) FROM flights f LEFT JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'
1	SELECT COUNT(1) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'
1	SELECT COUNT(1) FROM flights f, airlines a, airports p WHERE f.Airline = a.uid AND f.SourceAirport = p.AirportCode AND a.Airline = 'United Airlines' AND p.AirportCode = 'AHD'	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'
1	SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'
1	SELECT COUNT(flights.FlightNo) FROM flights LEFT JOIN airlines ON flights.Airline = airlines.uid LEFT JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'
0	SELECT COUNT(*) FROM flights, airlines, airports WHERE flights.Airline = airlines.uid AND flights.DestAirport = airports.AirportCode AND airlines.Airline = 'United Airlines' AND airports.AirportName LIKE '%Aberdeen%'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'
0	SELECT City FROM airports WHERE AirportCode = (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM AIRPORTS AS T3 JOIN FLIGHTS AS T4 ON T3.AirportCode = T4.DestAirport GROUP BY T3.City) AS subquery)
0	SELECT a.City FROM airports a, (SELECT DestAirport FROM flights GROUP BY DestAirport HAVING COUNT(DestAirport) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY DestAirport) sub)) b WHERE a.AirportCode = b.DestAirport	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City HAVING COUNT(*) = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM AIRPORTS AS T3 JOIN FLIGHTS AS T4 ON T3.AirportCode = T4.DestAirport GROUP BY T3.City) AS subquery)
0	SELECT A.City FROM airports A INNER JOIN (SELECT SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport) F ON A.AirportCode = F.SourceAirport ORDER BY F.FlightCount DESC LIMIT 1	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City HAVING count(*) = (SELECT MAX(Cnt) FROM (SELECT count(*) as Cnt FROM AIRPORTS JOIN FLIGHTS ON AirportCode = SourceAirport GROUP BY City) as maxTable)
1	SELECT City FROM (SELECT City, COUNT(*) AS flight_count FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS counts WHERE flight_count = (SELECT MAX(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City) AS subquery)	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City HAVING count(*) = (SELECT MAX(Cnt) FROM (SELECT count(*) as Cnt FROM AIRPORTS JOIN FLIGHTS ON AirportCode = SourceAirport GROUP BY City) as maxTable)
0	SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT DestAirport AS AirportCode FROM flights UNION ALL SELECT SourceAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY TotalFlights DESC LIMIT 1) AS MaxFlights	WITH CombinedAirports AS (SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport AS airportcode FROM flights) SELECT airportcode FROM CombinedAirports GROUP BY airportcode HAVING COUNT(airportcode) = (SELECT MAX(Count) FROM (SELECT COUNT(airportcode) AS Count FROM CombinedAirports GROUP BY airportcode))
1	WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MAX(TotalFlights) FROM FlightCounts)	SELECT combined.airport FROM (SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights) combined GROUP BY combined.airport HAVING COUNT(*) = (SELECT max(C) FROM (SELECT COUNT(*) AS C FROM (SELECT sourceairport AS airport FROM flights UNION ALL SELECT destairport AS airport FROM flights) t GROUP BY t.airport))
1	SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) AS FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM (SELECT COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode))	SELECT airportcode FROM ( SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport FROM flights ) AllFlights GROUP BY airportcode HAVING COUNT(*) = (SELECT MIN(Count) FROM ( SELECT COUNT(*) AS Count FROM ( SELECT sourceairport AS airportcode FROM flights UNION ALL SELECT destairport FROM flights ) GROUPED GROUP BY airportcode ))
0	WITH FlightCounts AS (SELECT AirportCode, COUNT(*) AS TotalFlights FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) AS CombinedFlights GROUP BY AirportCode) SELECT AirportCode FROM FlightCounts WHERE TotalFlights = (SELECT MIN(TotalFlights) FROM FlightCounts)	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode HAVING COUNT(*) = (SELECT MIN(C) FROM (SELECT COUNT(*) AS C FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode) AS max_count)
1	SELECT A.Airline FROM airlines A WHERE EXISTS (SELECT 1 FROM flights F WHERE F.Airline = A.uid GROUP BY F.Airline HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM flights GROUP BY Airline) AS MaxCount))	SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(flightno) = (SELECT MAX(cnt) FROM (SELECT COUNT(flightno) AS cnt FROM flights GROUP BY airline)))
0	SELECT A.Airline FROM airlines A JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) F ON A.uid = F.Airline WHERE F.FlightCount = (SELECT MAX(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) sub)	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) = (SELECT MAX(FlightCount) FROM (SELECT count(*) AS FlightCount FROM FLIGHTS GROUP BY Airline) AS SubQuery)
1	SELECT A.Abbreviation, A.Country FROM airlines A, (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS Sub)) AS F WHERE A.uid = F.Airline	SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM FLIGHTS GROUP BY Airline) AS Temp)
1	SELECT A.Abbreviation, A.Country FROM airlines A INNER JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING FlightCount = (SELECT MIN(FlightCount) FROM (SELECT COUNT(*) AS FlightCount FROM flights GROUP BY Airline) AS SubQuery)) F ON A.uid = F.Airline	SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM flights GROUP BY Airline) AS subquery)
1	SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'AHD')	SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights WHERE sourceairport = 'AHD')
1	SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'AHD')	SELECT T1.Airline FROM airlines as T1 WHERE T1.uid in (SELECT T2.Airline FROM flights as T2 WHERE T2.sourceairport = 'AHD')
1	SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD')	SELECT airline FROM airlines WHERE uid IN (SELECT DISTINCT airline FROM flights WHERE destairport = 'AHD')
0	SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD' GROUP BY Airline)	SELECT T1.Airline FROM airlines as T1 WHERE T1.uid in (SELECT T2.Airline FROM flights as T2 WHERE T2.sourceairport = 'AHD')
1	SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO')	SELECT al.airline FROM airlines al WHERE EXISTS (SELECT 1 FROM flights f WHERE f.airline = al.uid AND f.sourceairport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.airline = al.uid AND f.sourceairport = 'CVO')
1	SELECT a.Airline FROM airlines a WHERE EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'APG') AND EXISTS (SELECT 1 FROM flights f WHERE f.Airline = a.uid AND f.SourceAirport = 'CVO')	SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'APG') AND al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO')
1	WITH CVO_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'CVO'), APG_Airlines AS (SELECT Airline FROM flights WHERE SourceAirport = 'APG') SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM CVO_Airlines) AND uid NOT IN (SELECT Airline FROM APG_Airlines)	SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND al.uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');
0	SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')	SELECT al.airline FROM airlines al WHERE al.uid IN (SELECT airline FROM flights WHERE sourceairport = 'CVO') AND al.uid NOT IN (SELECT airline FROM flights WHERE sourceairport = 'APG');
1	SELECT a.Airline FROM airlines a JOIN (SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) >= 10) f ON a.uid = f.Airline	SELECT airline FROM airlines WHERE uid IN (SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10)
1	SELECT a.Airline FROM airlines a JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline) fc ON a.uid = fc.Airline WHERE fc.FlightCount >= 10	SELECT a.airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.airline = a.uid) >= 10
0	SELECT A.Airline FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.uid HAVING COUNT(DISTINCT F.FlightNo) < 200	SELECT A.airline FROM airlines A WHERE (SELECT COUNT(*) FROM flights F WHERE F.airline = A.uid) < 200
1	SELECT A.Airline FROM airlines A WHERE (SELECT COUNT(*) FROM flights F WHERE F.Airline = A.uid) < 200	SELECT a.airline FROM airlines a WHERE (SELECT COUNT(*) FROM flights f WHERE f.airline = a.uid) < 200
0	SELECT DISTINCT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines'	SELECT DISTINCT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT f.FlightNo FROM flights f INNER JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines'	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines'
1	SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' AND FlightNo IS NOT NULL	SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'
1	SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'	SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'
1	SELECT f.FlightNo FROM flights f WHERE f.DestAirport = 'APG'	SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'
1	SELECT f.FlightNo FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG'	SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG'
1	SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode AND airports.City = 'Aberdeen'	SELECT DISTINCT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT FlightNo FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT FlightNo FROM flights f INNER JOIN airports a ON f.DestAirport = a.AirportCode AND a.City = 'Aberdeen'	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen'
1	SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
1	SELECT COUNT(1) FROM flights, airports WHERE flights.DestAirport = airports.AirportCode AND (airports.City = 'Aberdeen' OR airports.City = 'Abilene')	SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'
0	SELECT COUNT(flights.FlightNo) AS TotalFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene'	SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'
1	SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)	SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
0	SELECT AirportCode FROM airports a WHERE NOT EXISTS (SELECT NULL FROM flights f WHERE f.SourceAirport = a.AirportCode UNION SELECT NULL FROM flights f WHERE f.DestAirport = a.AirportCode)	SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
1	SELECT COUNT(Employee_ID) AS TotalEmployees FROM employee	SELECT count(*) FROM employee
1	SELECT COUNT(DISTINCT Employee_ID) AS UniqueEmployeeCount FROM employee	SELECT count(*) FROM employee
1	SELECT Name FROM employee ORDER BY employee.Age, employee.Employee_ID ASC	SELECT name FROM employee ORDER BY age, Employee_ID
1	SELECT Name FROM employee ORDER BY Age ASC, Name ASC	SELECT name FROM employee ORDER BY age, name ASC
1	SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City	SELECT count(*) , city FROM employee GROUP BY city
1	SELECT City, COUNT(*) AS Num_Employees FROM employee GROUP BY City	SELECT count(*) , city FROM employee GROUP BY city
1	SELECT DISTINCT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(City) > 1	SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1
1	SELECT e.City FROM employee e WHERE e.Age < 30 GROUP BY e.City HAVING COUNT(e.Employee_ID) > 1	SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1
1	SELECT Location, COUNT(Shop_ID) AS ShopTotal FROM shop GROUP BY Location ORDER BY Location	SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION
1	SELECT COUNT(*), Location FROM shop GROUP BY Location	SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION
1	SELECT Manager_name, District FROM shop AS s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop AS s2)	SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
1	SELECT Manager_name, District FROM shop AS s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop AS s2)	SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop)
1	SELECT MIN(shop.Number_products) AS MinimumProducts, MAX(shop.Number_products) AS MaximumProducts FROM shop	SELECT min(Number_products) , max(Number_products) FROM shop
1	SELECT MIN(Number_products), MAX(Number_products) FROM shop	SELECT min(Number_products) , max(Number_products) FROM shop
1	SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID	SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC, Shop_ID ASC
1	SELECT Name, Location, District FROM shop ORDER BY Number_products DESC, Shop_ID	SELECT name, location, district FROM shop ORDER BY number_products DESC, Shop_ID ASC
1	SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)	SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
1	SELECT Name FROM shop s1 WHERE s1.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2)	SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)
1	SELECT e.Name FROM employee e INNER JOIN (SELECT Employee_ID, COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) ev ON e.Employee_ID = ev.Employee_ID WHERE ev.awards_count = (SELECT MAX(awards_count) FROM (SELECT COUNT(*) AS awards_count FROM evaluation GROUP BY Employee_ID) AS subquery)	SELECT employee.name FROM employee JOIN (SELECT MAX(totalAwards) AS totalAwards FROM (SELECT employee_id, COUNT(employee_id) AS totalAwards FROM evaluation GROUP BY employee_id)) Awards ON Awards.totalAwards = (SELECT COUNT(*) FROM evaluation WHERE evaluation.employee_id = employee.employee_id)
1	SELECT e.Name FROM employee e, (SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) ev WHERE e.Employee_ID = ev.Employee_ID AND ev.Awards = (SELECT MAX(Awards) FROM (SELECT COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID) AS AwardCounts)	WITH AwardCount AS (SELECT t1.Name, COUNT(*) as TotalAwards FROM employee t1 JOIN evaluation t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Employee_ID) SELECT Name FROM AwardCount WHERE TotalAwards = (SELECT MAX(TotalAwards) FROM AwardCount)
1	SELECT Name FROM employee e WHERE EXISTS (SELECT 1 FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID AND ev.Bonus = (SELECT MAX(Bonus) FROM evaluation))	SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation WHERE bonus = (SELECT MAX(bonus) FROM evaluation))
1	SELECT Name FROM employee WHERE Employee_ID IN (SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))	SELECT e.name FROM employee e WHERE e.employee_id IN (SELECT ee.employee_id FROM evaluation ee WHERE ee.bonus = (SELECT MAX(bonus) FROM evaluation))
1	SELECT Name FROM employee e WHERE NOT EXISTS (SELECT NULL FROM evaluation ev WHERE ev.Employee_ID = e.Employee_ID)	SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
1	SELECT Name, Employee_ID FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)	SELECT Employee_ID, Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
1	SELECT s.Name FROM shop s WHERE EXISTS (SELECT 1 FROM hiring h WHERE h.Shop_ID = s.Shop_ID GROUP BY h.Shop_ID HAVING COUNT(h.Employee_ID) = (SELECT MAX(c) FROM (SELECT COUNT(Employee_ID) AS c FROM hiring GROUP BY Shop_ID) t))	SELECT t2.Name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING count(*) = (SELECT MAX(employee_count) FROM (SELECT count(*) AS employee_count FROM hiring GROUP BY shop_id) AS counts)
1	SELECT Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM (SELECT Shop_ID, COUNT(Employee_ID) AS TotalEmployees FROM hiring GROUP BY Shop_ID) AS EmployeeCounts WHERE TotalEmployees = (SELECT MAX(TotalEmployees) FROM (SELECT COUNT(Employee_ID) AS TotalEmployees FROM hiring GROUP BY Shop_ID) AS MaxEmployees))	SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id HAVING COUNT(*) = (SELECT MAX(total_employees) FROM (SELECT COUNT(*) AS total_employees FROM hiring GROUP BY shop_id) AS employee_counts)
1	SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL	SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
1	SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;	SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
0	SELECT Name, COUNT(Employee_ID) AS TotalEmployees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY Name	SELECT name, (SELECT COUNT(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) AS num_employees FROM shop
1	SELECT s.Name, COUNT(DISTINCT h.Employee_ID) AS Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name	SELECT shop.name, (SELECT COUNT(*) FROM hiring WHERE hiring.shop_id = shop.shop_id) AS emp_count FROM shop
1	SELECT TOTAL(evaluation.Bonus) AS TotalBonus FROM evaluation	SELECT sum(bonus) FROM evaluation
1	SELECT SUM(evaluation.Bonus) FROM evaluation	SELECT sum(bonus) FROM evaluation
1	SELECT hiring.Shop_ID, hiring.Employee_ID, hiring.Start_from, hiring.Is_full_time FROM hiring	SELECT * FROM hiring
1	SELECT Shop_ID AS ShopID, Employee_ID AS EmployeeID, Start_from AS StartDate, Is_full_time AS FullTimeStatus FROM hiring	SELECT * FROM hiring
1	SELECT DISTINCT District FROM shop WHERE (SELECT COUNT(*) FROM shop s WHERE s.District = shop.District AND s.Number_products < 3000) > 0 AND (SELECT COUNT(*) FROM shop s WHERE s.District = shop.District AND s.Number_products > 10000) > 0	SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000
1	SELECT s.District FROM shop s GROUP BY s.District HAVING MIN(s.Number_products) < 3000 AND MAX(s.Number_products) > 10000	SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000
1	SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM shop) AS unique_locations	SELECT count(DISTINCT LOCATION) FROM shop
1	SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM shop) AS unique_locations	SELECT count(DISTINCT LOCATION) FROM shop
1	SELECT COUNT(*) AS DocumentCount FROM Documents	SELECT count(*) FROM Documents
1	SELECT COUNT(Document_ID) AS NumberOfDocuments FROM Documents	SELECT count(*) FROM Documents
1	SELECT Document_ID, Document_Name, Document_Description FROM Documents	SELECT document_id , document_name , document_description FROM Documents
1	SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents	SELECT document_id , document_name , document_description FROM Documents
1	SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'	SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'
1	SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%' COLLATE SQL_Latin1_General_CP1_CI_AS	SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'
1	SELECT D.Document_ID, D.Template_ID, D.Document_Description FROM Documents D WHERE D.Document_Name = 'Robbin CV'	SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'
1	SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'	SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'
1	SELECT COUNT(DISTINCT Template_ID) AS NumberOfUniqueTemplates FROM Documents	SELECT count(DISTINCT template_id) FROM Documents
1	SELECT COUNT(DISTINCT Template_ID) AS NumberOfUniqueTemplates FROM Documents	SELECT count(DISTINCT template_id) FROM Documents
1	SELECT COUNT(*) FROM Documents d, Templates t WHERE d.Template_ID = t.Template_ID AND t.Template_Type_Code = 'PPT'	SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'
0	SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'PPT'))	SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
1	SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID	SELECT t.template_id, COUNT(d.document_id) AS number_of_documents FROM templates t LEFT JOIN documents d ON t.template_id = d.template_id GROUP BY t.template_id
1	SELECT d.Template_ID, COUNT(*) AS usage_count FROM Documents d GROUP BY d.Template_ID	SELECT template_id , count(*) FROM Documents GROUP BY template_id
1	SELECT T.Template_ID, T.Template_Type_Code FROM Templates T, (SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID HAVING Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS Temp)) AS D WHERE T.Template_ID = D.Template_ID	SELECT T1.template_id, T2.Template_Type_code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id, T2.Template_Type_code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Documents GROUP BY template_id) AS max_count)
1	SELECT T.Template_ID, T.Template_Type_Code FROM Templates T WHERE T.Template_ID IN (SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Documents GROUP BY Template_ID) AS DocumentCounts))	SELECT T1.template_id, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id, T2.Template_Type_Code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Documents GROUP BY template_id) AS subquery)
1	SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1	SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1
1	SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1	SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1
1	SELECT DISTINCT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL)	SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
1	SELECT DISTINCT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents WHERE Template_ID IS NOT NULL)	SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
1	SELECT COUNT(1) FROM Templates	SELECT count(*) FROM Templates
1	SELECT COUNT(*) AS TotalTemplates FROM Templates	SELECT count(*) FROM Templates
1	SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	SELECT template_id , version_number , template_type_code FROM Templates
1	SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates	SELECT template_id , version_number , template_type_code FROM Templates
1	SELECT DISTINCT T.Template_Type_Code FROM Templates T WHERE T.Template_Type_Code IS NOT NULL	SELECT DISTINCT template_type_code FROM Templates
1	SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IS NOT NULL	SELECT DISTINCT template_type_code FROM ref_template_types;
1	SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT')	SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'
0	SELECT Template_ID FROM Templates WHERE Template_Type_Code LIKE 'PP%' OR Template_Type_Code LIKE 'PPT%'	SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'
1	SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV'	SELECT count(*) FROM Templates WHERE template_type_code = 'CV'
0	SELECT COUNT(*) FROM Templates t, Ref_Template_Types r WHERE t.Template_Type_Code = r.Template_Type_Code AND r.Template_Type_Description = 'CV'	SELECT count(*) FROM Templates WHERE template_type_code  =  'CV'
1	SELECT T.Version_Number, T.Template_Type_Code FROM Templates AS T WHERE T.Version_Number > 5	SELECT version_number , template_type_code FROM Templates WHERE version_number > 5
1	SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5 AND Template_Type_Code IS NOT NULL	SELECT version_number , template_type_code FROM Templates WHERE version_number > 5
0	SELECT r.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types AS r LEFT OUTER JOIN Templates AS t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code	SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code
0	SELECT r.Template_Type_Code, COUNT(t.Template_ID) FROM Ref_Template_Types AS r LEFT JOIN Templates AS t ON r.Template_Type_Code = t.Template_Type_Code GROUP BY r.Template_Type_Code	SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code
1	SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) = (SELECT MAX(template_count) FROM (SELECT COUNT(Template_ID) AS template_count FROM Templates GROUP BY Template_Type_Code) AS subquery)	WITH template_counts AS (SELECT template_type_code, COUNT(*) AS template_count FROM Templates GROUP BY template_type_code) SELECT template_type_code FROM template_counts WHERE template_count = (SELECT MAX(template_count) FROM template_counts)
1	SELECT Template_Type_Code FROM (SELECT Template_Type_Code, COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code) AS Temp WHERE Count = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code) AS Temp2)	SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) as count FROM Templates GROUP BY template_type_code) as counts)
0	SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3	SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3
1	SELECT R.Template_Type_Code FROM Ref_Template_Types R WHERE (SELECT COUNT(*) FROM Templates T WHERE T.Template_Type_Code = R.Template_Type_Code) < 3	SELECT r.template_type_code FROM ref_template_types r WHERE (SELECT COUNT(*) FROM templates t WHERE t.template_type_code = r.template_type_code) < 3
0	SELECT a.Template_Type_Code, a.MinVersion FROM (SELECT Template_Type_Code, MIN(Version_Number) AS MinVersion FROM Templates GROUP BY Template_Type_Code) a	SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)
0	SELECT Template_Type_Code, MIN(Version_Number) AS MinimumVersion FROM Templates GROUP BY Template_Type_Code HAVING MIN(Version_Number) IS NOT NULL	SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number = (SELECT MIN(Version_Number) FROM Templates)
1	SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')	SELECT template_type_code FROM templates WHERE template_id IN (SELECT template_id FROM documents WHERE document_name = 'Data base')
0	SELECT T.Template_Type_Code FROM Templates T WHERE EXISTS (SELECT 1 FROM Documents D WHERE D.Template_ID = T.Template_ID AND D.Document_Name = 'Data base')	SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code IN (SELECT t.template_type_code FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE d.document_name = 'Data base')
1	SELECT Document_Name FROM Documents, Templates WHERE Documents.Template_ID = Templates.Template_ID AND Templates.Template_Type_Code = 'BK'	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'
1	SELECT D.Document_Name FROM Documents AS D, Templates AS T WHERE D.Template_ID = T.Template_ID AND T.Template_Type_Code = 'BK'	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'
0	SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS TotalDocuments FROM Templates T LEFT OUTER JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code	SELECT rt.template_type_code, COUNT(distinct doc.document_id) FROM ref_template_types rt LEFT JOIN templates temp ON rt.template_type_code = temp.template_type_code LEFT JOIN documents doc ON temp.template_id = doc.template_id GROUP BY rt.template_type_code
1	SELECT r.Template_Type_Code, IFNULL(COUNT(d.Document_ID), 0) AS Document_Count FROM Ref_Template_Types r LEFT JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY r.Template_Type_Code	SELECT ref_template_types.template_type_code, COUNT(documents.document_id) AS document_count FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code
1	SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code HAVING COUNT(*) = (SELECT MAX(doc_count) FROM (SELECT COUNT(*) AS doc_count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code) AS subquery)	WITH TemplateCount AS (SELECT T1.template_type_code, COUNT(*) AS doc_count FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code) SELECT template_type_code FROM TemplateCount WHERE doc_count = (SELECT MAX(doc_count) FROM TemplateCount)
1	WITH CTE AS (SELECT T.Template_Type_Code, COUNT(*) AS NumDocs FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code) SELECT Template_Type_Code FROM CTE WHERE NumDocs = (SELECT MAX(NumDocs) FROM CTE)	WITH TypeCount AS (SELECT T1.template_type_code, COUNT(*) AS cnt FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code) SELECT template_type_code FROM TypeCount WHERE cnt = (SELECT MAX(cnt) FROM TypeCount)
1	SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))	SELECT rt.template_type_code FROM ref_template_types rt WHERE NOT EXISTS (SELECT 1 FROM templates t WHERE rt.template_type_code = t.template_type_code AND EXISTS (SELECT 1 FROM documents d WHERE t.template_id = d.template_id))
1	SELECT Template_Type_Code FROM Ref_Template_Types rtt WHERE Template_Type_Code NOT IN (SELECT t.Template_Type_Code FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID)	SELECT rtt.template_type_code FROM ref_template_types rtt WHERE NOT EXISTS (SELECT 1 FROM templates t JOIN documents d ON t.template_id = d.template_id WHERE t.template_type_code = rtt.template_type_code)
1	SELECT * FROM Ref_Template_Types	SELECT template_type_code , template_type_description FROM Ref_template_types
1	SELECT * FROM Ref_Template_Types	SELECT template_type_code , template_type_description FROM Ref_template_types
1	SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code LIKE 'AD'	SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'
1	SELECT rtt.Template_Type_Description FROM Ref_Template_Types rtt WHERE rtt.Template_Type_Code = 'AD'	SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AD'
1	SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description LIKE 'Book'	SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'
1	SELECT r.Template_Type_Code FROM Ref_Template_Types r WHERE r.Template_Type_Description = 'Book'	SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'
1	SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
0	SELECT DISTINCT T.Template_Details FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID
1	SELECT T.Template_ID FROM Templates T, Ref_Template_Types R WHERE T.Template_Type_Code = R.Template_Type_Code AND R.Template_Type_Description = 'Presentation'	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'
0	SELECT Template_ID FROM Templates WHERE Template_Details = 'Presentation'	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'
1	SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Paragraph_ID IS NOT NULL	SELECT count(*) FROM Paragraphs
1	SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Paragraph_ID IS NOT NULL	SELECT count(*) FROM Paragraphs
1	SELECT COUNT(DISTINCT Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'	SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
1	SELECT COUNT(DISTINCT Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show'	SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'
0	SELECT * FROM Paragraphs WHERE TRIM(Paragraph_Text) = 'Korea'	SELECT * FROM paragraphs WHERE paragraph_text = 'Korea '
1	SELECT * FROM Paragraphs WHERE INSTR(Paragraph_Text, 'Korea') > 0	SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
1	SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents USING(Document_ID) WHERE Document_Name = 'Welcome to NY'	SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'
1	SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Welcome to NY'	SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'
1	SELECT Paragraph_Text FROM Paragraphs WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.Document_ID = Paragraphs.Document_ID AND Documents.Document_Name = 'Customer reviews')	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews'
1	SELECT Paragraph_Text FROM Paragraphs p, Documents d WHERE p.Document_ID = d.Document_ID AND d.Document_Name = 'Customer reviews'	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'
1	SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Total_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID	SELECT documents.document_id, COALESCE(SUM(CASE WHEN paragraphs.paragraph_id IS NOT NULL THEN 1 ELSE 0 END), 0) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id
1	SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS ParagraphCount FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID	SELECT doc.document_id, COUNT(para.paragraph_id) AS count_paragraphs FROM documents doc LEFT JOIN paragraphs para ON doc.document_id = para.document_id GROUP BY doc.document_id ORDER BY doc.document_id
1	SELECT doc.Document_ID, doc.Document_Name, COUNT(para.Paragraph_ID) AS TotalParagraphs FROM Documents doc LEFT JOIN Paragraphs para ON doc.Document_ID = para.Document_ID GROUP BY doc.Document_ID, doc.Document_Name	SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM documents d LEFT JOIN paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name
1	SELECT doc.Document_ID, doc.Document_Name, (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = doc.Document_ID) AS ParagraphsCount FROM Documents doc	SELECT doc.document_id, doc.document_name, (SELECT COUNT(paragraph_id) FROM paragraphs WHERE paragraphs.document_id = doc.document_id) AS number_of_paragraphs FROM documents doc
1	SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2
1	SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2
1	SELECT D.Document_ID, D.Document_Name FROM Documents D WHERE D.Document_ID IN (SELECT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) = (SELECT MAX(Counted.NumParagraphs) FROM (SELECT COUNT(Paragraph_ID) AS NumParagraphs FROM Paragraphs GROUP BY Document_ID) AS Counted))	SELECT T1.document_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING count(*) = (SELECT MAX(ct) FROM (SELECT count(*) as ct FROM Paragraphs GROUP BY document_id) AS counts)
1	SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN (SELECT Document_ID, COUNT(*) AS TotalParagraphs FROM Paragraphs GROUP BY Document_ID) AS ParagraphCount ON Documents.Document_ID = ParagraphCount.Document_ID WHERE ParagraphCount.TotalParagraphs = (SELECT MAX(TotalParagraphs) FROM (SELECT COUNT(*) AS TotalParagraphs FROM Paragraphs GROUP BY Document_ID) AS MaxParagraphs)	SELECT D.document_id, D.document_name FROM Documents D WHERE D.document_id IN (SELECT P.document_id FROM Paragraphs P GROUP BY P.document_id HAVING COUNT(*) = (SELECT MAX(par_count) FROM (SELECT COUNT(*) as par_count FROM Paragraphs GROUP BY document_id) count_summary))
1	SELECT D.Document_ID FROM Documents D JOIN (SELECT Document_ID, COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) P ON D.Document_ID = P.Document_ID WHERE P.Count = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Paragraphs GROUP BY Document_ID) AS SubQuery)	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) = (SELECT MIN(counted) FROM (SELECT document_id, COUNT(*) as counted FROM Paragraphs GROUP BY document_id) AS counts)
1	SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) = (SELECT MIN(ParagraphCount) FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery)	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) = (SELECT count(*) FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1)
1	SELECT Document_ID FROM (SELECT Document_ID, COUNT(Paragraph_ID) AS ParaCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery WHERE ParaCount BETWEEN 1 AND 2	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
1	SELECT d.Document_ID FROM Documents d WHERE d.Document_ID IN (SELECT p.Document_ID FROM Paragraphs p GROUP BY p.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2)	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
1	SELECT Document_ID FROM Documents WHERE EXISTS (SELECT 1 FROM Paragraphs WHERE Paragraph_Text = 'Brazil' AND Documents.Document_ID = Paragraphs.Document_ID) AND EXISTS (SELECT 1 FROM Paragraphs WHERE Paragraph_Text = 'Ireland' AND Documents.Document_ID = Paragraphs.Document_ID)	SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'
1	SELECT DISTINCT p1.Document_ID FROM Paragraphs p1, Paragraphs p2 WHERE p1.Document_ID = p2.Document_ID AND p1.Paragraph_Text LIKE '%Brazil%' AND p2.Paragraph_Text LIKE '%Ireland%'	SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Brazil%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Ireland%'
1	SELECT COUNT(DISTINCT Teacher_ID) FROM teacher	SELECT count(*) FROM teacher
1	SELECT COUNT(*) AS NumberOfTeachers FROM teacher	SELECT count(*) FROM teacher
1	SELECT t.Name FROM teacher t ORDER BY t.Age, t.Teacher_ID	SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC
1	SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC, teacher.Teacher_ID ASC	SELECT Name FROM teacher ORDER BY Age ASC, Teacher_ID ASC
1	SELECT teacher.Age AS Age, teacher.Hometown AS Hometown FROM teacher	SELECT Age , Hometown FROM teacher
1	SELECT teacher.Age AS Age, teacher.Hometown AS Hometown FROM teacher	SELECT Age , Hometown FROM teacher
1	SELECT Name FROM teacher WHERE Hometown NOT IN ('Little Lever Urban District')	select name from teacher where hometown != 'Little Lever Urban District'
1	SELECT DISTINCT Name FROM teacher WHERE Hometown NOT IN ('Little Lever Urban District')	SELECT DISTINCT name FROM teacher WHERE hometown != 'Little Lever Urban District'
1	SELECT Name FROM teacher WHERE (Age = 32) OR (Age = 33)	SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
1	SELECT Name FROM teacher WHERE (Age = 32) OR (Age = 33)	SELECT Name FROM teacher WHERE Age = 32 OR Age = 33
1	SELECT t.Hometown FROM teacher t WHERE t.Age = (SELECT MIN(t2.Age) FROM teacher t2)	SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
1	SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher t WHERE t.Age IS NOT NULL)	SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
1	SELECT teacher.Hometown, COUNT(teacher.Teacher_ID) FROM teacher GROUP BY teacher.Hometown	SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown
1	SELECT Hometown, COUNT(DISTINCT Teacher_ID) AS Teachers FROM teacher GROUP BY Hometown	SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown
1	SELECT Hometown FROM (SELECT Hometown, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM teacher GROUP BY Hometown) sub WHERE rank = 1	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM teacher GROUP BY Hometown) subquery)
1	SELECT Hometown FROM (SELECT Hometown, COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS T WHERE freq = (SELECT MAX(freq) FROM (SELECT COUNT(*) AS freq FROM teacher GROUP BY Hometown) AS subquery)	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM teacher GROUP BY Hometown) t)
1	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
1	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
1	SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
1	SELECT t.Name, c.Course FROM teacher t, course c, course_arrange ca WHERE t.Teacher_ID = ca.Teacher_ID AND c.Course_ID = ca.Course_ID	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID
1	SELECT t.Name, c.Course FROM teacher t CROSS JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID CROSS JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC, c.Course ASC	SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name, T2.Course
1	SELECT Name, Course FROM teacher JOIN course_arrange USING (Teacher_ID) JOIN course USING (Course_ID) ORDER BY Name, Course	SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name, T2.Course
0	SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'
0	SELECT t.Name FROM teacher t WHERE t.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math')	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'
0	SELECT t.Name AS Teacher_Name, COUNT(DISTINCT ca.Course_ID) AS Course_Count FROM teacher AS t LEFT JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name	SELECT t.name AS teacher_name, COUNT(ca.course_id) FROM teacher t LEFT JOIN course_arrange ca ON t.teacher_id = ca.teacher_id GROUP BY t.teacher_id
1	SELECT Name, COUNT(Course_ID) FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name	SELECT name, (SELECT COUNT(*) FROM course_arrange WHERE teacher_id = teacher.teacher_id) AS num_courses FROM teacher
1	SELECT t.Name FROM teacher t JOIN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2) c ON t.Teacher_ID = c.Teacher_ID	SELECT T.Name FROM teacher AS T WHERE T.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca GROUP BY ca.Teacher_ID HAVING COUNT(DISTINCT ca.course_id) > 1)
1	SELECT T.Name FROM teacher AS T JOIN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(Course_ID) >= 2) AS C ON T.Teacher_ID = C.Teacher_ID	SELECT t.name FROM teacher t WHERE t.teacher_id IN (SELECT ca.teacher_id FROM course_arrange ca GROUP BY ca.teacher_id HAVING COUNT(DISTINCT ca.course_id) >= 2)
1	SELECT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT c.Teacher_ID FROM course_arrange c)	SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
1	SELECT t.Name FROM teacher t WHERE NOT EXISTS (SELECT * FROM course_arrange c WHERE c.Teacher_ID = t.Teacher_ID)	SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
1	SELECT COUNT(visitor.ID) FROM visitor WHERE visitor.Age < 30	SELECT count(*) FROM visitor WHERE age < 30
1	SELECT Name FROM visitor WHERE Level_of_membership > '4' ORDER BY Level_of_membership DESC	SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
1	SELECT AVG(Age) AS AverageAge FROM visitor WHERE Level_of_membership <= '4'	SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
1	SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > '4' ORDER BY Age DESC	SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC
1	SELECT Museum_ID, Name FROM museum m1 WHERE NOT EXISTS (SELECT 1 FROM museum m2 WHERE m2.Num_of_Staff > m1.Num_of_Staff)	SELECT museum_id, name FROM museum WHERE num_of_staff = (SELECT MAX(num_of_staff) FROM museum)
1	SELECT AVG(Num_of_Staff) FROM museum m WHERE m.Open_Year < 2009	SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009
1	SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' AND Open_Year IS NOT NULL	SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'
1	SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum m WHERE m.Open_Year > '2010')	SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)
0	SELECT v.ID, v.Name, v.Age FROM visitor v WHERE v.ID IN (SELECT visitor_ID FROM visit vi GROUP BY vi.visitor_ID, vi.Museum_ID HAVING COUNT(vi.visitor_ID) > 1)	SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
1	SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) s ON v.ID = s.visitor_ID WHERE s.TotalSpent = (SELECT MAX(TotalSpent) FROM (SELECT SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID) t)	SELECT t1.ID, t1.name, t1.Level_of_membership from visitor AS T1 WHERE T1.ID IN (SELECT T2.visitor_ID FROM visit AS T2 GROUP BY t2.visitor_ID HAVING sum(T2.Total_spent) = (SELECT sum(T3.Total_spent) AS S FROM visit AS T3 GROUP BY t3.visitor_ID ORDER BY S DESC LIMIT 1))
1	SELECT M.Museum_ID, M.Name FROM museum M INNER JOIN (SELECT Museum_ID FROM visit GROUP BY Museum_ID HAVING COUNT(*) = (SELECT MAX(visit_count) FROM (SELECT COUNT(*) AS visit_count FROM visit GROUP BY Museum_ID) AS Counts)) AS V ON M.Museum_ID = V.Museum_ID	SELECT t2.Museum_ID, t1.Name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID HAVING COUNT(*) = (SELECT MAX(visit_counts) FROM (SELECT COUNT(*) AS visit_counts FROM visit GROUP BY Museum_ID) AS subquery)
1	SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)	SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
1	SELECT Name, Age FROM visitor v WHERE EXISTS (SELECT 1 FROM visit vi WHERE vi.visitor_ID = v.ID AND vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit))	SELECT v.name, v.age FROM (SELECT visitor_id FROM visit GROUP BY visitor_id HAVING MAX(num_of_ticket) = (SELECT MAX(num_of_ticket) FROM visit)) ids JOIN visitor v ON v.id = ids.visitor_id
1	SELECT AVG(Num_of_Ticket) AS Average, MAX(Num_of_Ticket) AS Maximum FROM visit	SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit
1	SELECT SUM(Total_spent) FROM visit, visitor WHERE visit.visitor_ID = visitor.ID AND visitor.Level_of_membership = 1	SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
0	SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 GROUP BY v.ID HAVING COUNT(DISTINCT CASE WHEN m.Open_Year > 2011 THEN m.Museum_ID ELSE NULL END) > 0	SELECT T1.Name FROM visitor AS T1 WHERE exists(SELECT 1 FROM visit AS T2 JOIN museum AS T3 on T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 AND T2.visitor_ID = T1.ID) AND exists(SELECT 1 FROM visit AS T4 JOIN museum AS T5 on T4.Museum_ID = T5.Museum_ID WHERE T5.Open_Year > 2011 AND T4.visitor_ID = T1.ID)
1	SELECT COUNT(DISTINCT ID) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))	SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)
1	SELECT COUNT(*) FROM museum WHERE Open_Year NOT BETWEEN 2008 AND 2013	SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008
1	SELECT COUNT(1) FROM players	SELECT count(*) FROM players
1	SELECT COUNT(players.player_id) FROM players	SELECT count(*) FROM players
0	SELECT COUNT(*) FROM matches, qualifying_matches;	SELECT count(*) FROM matches
1	SELECT COUNT(1) FROM matches	SELECT count(*) FROM matches
1	SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	SELECT first_name , birth_date FROM players WHERE country_code = 'USA'
1	SELECT first_name, birth_date FROM players WHERE country_code = 'USA'	SELECT first_name , birth_date FROM players WHERE country_code = 'USA'
1	SELECT AVG(loser_age) AS 'Average Age of Losers', AVG(winner_age) AS 'Average Age of Winners' FROM matches	SELECT avg(loser_age) , avg(winner_age) FROM matches
1	SELECT AVG(loser_age) AS 'Average Age of Losers', AVG(winner_age) AS 'Average Age of Winners' FROM matches	SELECT avg(loser_age) , avg(winner_age) FROM matches
1	SELECT AVG(winner_rank) AS average_winner_rank FROM matches	SELECT avg(winner_rank) FROM matches
0	SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches)	SELECT avg(winner_rank) FROM matches
0	SELECT MAX(loser_rank) AS MaxRank FROM matches	SELECT min(loser_rank) FROM matches
1	SELECT MIN(loser_rank) AS LowestRank FROM matches WHERE loser_rank IS NOT NULL	SELECT min(loser_rank) FROM matches
1	SELECT COUNT(DISTINCT players.country_code) FROM players	SELECT count(DISTINCT country_code) FROM players
1	SELECT COUNT(*) FROM (SELECT DISTINCT country_code FROM players) AS unique_countries	SELECT count(DISTINCT country_code) FROM players
1	SELECT COUNT(DISTINCT loser_name) AS distinct_losers FROM matches	SELECT count(DISTINCT loser_name) FROM matches
1	SELECT COUNT(DISTINCT matches.loser_name) FROM matches	SELECT count(DISTINCT loser_name) FROM matches
1	SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.tourney_name) > 10	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
1	SELECT m.tourney_name FROM matches m GROUP BY m.tourney_name HAVING COUNT(m.tourney_name) > 10	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10
0	SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)	SELECT T.winner_name FROM (SELECT winner_id, winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_id, winner_name FROM matches WHERE YEAR = 2016) AS T
1	SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2013) INTERSECT SELECT P.first_name, P.last_name FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.year = 2016)	SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)
1	SELECT COUNT(*) FROM matches WHERE year = '2013' OR year = '2016'	SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
1	SELECT COUNT(*) FROM matches WHERE year BETWEEN 2013 AND 2016 AND year IN (2013, 2016)	SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016
1	SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships') AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')	SELECT p.country_code, p.first_name FROM players p WHERE EXISTS (SELECT 1 FROM matches m WHERE m.winner_id = p.player_id AND m.tourney_name = 'WTA Championships') AND EXISTS (SELECT 1 FROM matches m WHERE m.winner_id = p.player_id AND m.tourney_name = 'Australian Open')
1	SELECT P.first_name, P.country_code FROM players P WHERE P.player_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'WTA Championships' AND M.winner_id IN (SELECT M.winner_id FROM matches M WHERE M.tourney_name = 'Australian Open'))	SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' INTERSECT SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
1	SELECT first_name, country_code FROM (SELECT first_name, country_code, RANK() OVER (ORDER BY birth_date) AS rank FROM players) AS Ranked WHERE rank = 1	SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
1	SELECT P.first_name, P.country_code FROM players P WHERE P.birth_date = (SELECT birth_date FROM players ORDER BY birth_date LIMIT 1)	SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)
0	SELECT first_name, last_name FROM players ORDER BY birth_date ASC, last_name COLLATE NOCASE, player_id	SELECT first_name, last_name FROM players ORDER BY birth_date, last_name, player_id
0	SELECT first_name || ' ' || last_name FROM players ORDER BY birth_date ASC, player_id ASC	SELECT first_name, last_name FROM players ORDER BY birth_date, player_id
1	SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC	SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
0	SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date ASC	SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
1	SELECT P.first_name, P.country_code FROM players P WHERE EXISTS (SELECT 1 FROM rankings R WHERE R.player_id = P.player_id AND R.tours = (SELECT MAX(tours) FROM rankings))	SELECT p.first_name, p.country_code FROM players p, (SELECT player_id FROM rankings GROUP BY player_id HAVING MAX(tours) = (SELECT MAX(tours) FROM rankings)) as r WHERE p.player_id = r.player_id
1	SELECT P.first_name, P.country_code FROM players P WHERE EXISTS (SELECT 1 FROM rankings R WHERE R.player_id = P.player_id AND R.tours = (SELECT MAX(tours) FROM rankings))	SELECT T1.first_name, T1.country_code FROM players AS T1 WHERE T1.player_id IN (SELECT T2.player_id FROM rankings AS T2 WHERE T2.tours = (SELECT MAX(tours) FROM rankings))
1	SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, MIN(year) ASC LIMIT 1	SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC, year ASC LIMIT 1
1	SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC, year ASC LIMIT 1	SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC, year ASC LIMIT 1
0	SELECT first_name, last_name, TOTAL(ranking_points) FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id HAVING COUNT(matches.winner_id) = (SELECT MAX(win_count) FROM (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id) AS subquery)	SELECT first_name, last_name, SUM(winner_rank_points) AS total_winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id HAVING COUNT(*) = (SELECT max(cnt) FROM (SELECT COUNT(*) AS cnt FROM matches GROUP BY winner_id))
0	SELECT first_name, last_name, total_points FROM players JOIN (SELECT player_id, SUM(ranking_points) AS total_points FROM rankings GROUP BY player_id) AS rank_totals ON players.player_id = rank_totals.player_id WHERE players.player_id = (SELECT winner_id FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT p.first_name, p.last_name, T.total_winner_rank_points FROM players AS p JOIN (SELECT m1.winner_id, SUM(m1.winner_rank_points) AS total_winner_rank_points FROM matches AS m1 GROUP BY m1.winner_id HAVING count(*) = (SELECT count(*) AS C FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY C DESC LIMIT 1)) AS T on p.player_id = T.winner_id
0	SELECT P.first_name, P.last_name FROM players P INNER JOIN matches M ON P.player_id = M.winner_id WHERE M.tourney_name = 'Australian Open' ORDER BY M.winner_rank_points DESC LIMIT 1	SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open'))
0	SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id AND m.tourney_name = 'Australian Open' JOIN rankings r ON p.player_id = r.player_id ORDER BY r.ranking_points DESC LIMIT 1	SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open'))
0	SELECT m.loser_name, m.winner_name FROM matches m ORDER BY m.minutes DESC LIMIT 1	WITH LongestMatch AS (SELECT MAX(minutes) AS max_minutes FROM matches) SELECT m.winner_name, m.loser_name FROM matches m JOIN LongestMatch lm ON m.minutes = lm.max_minutes
0	SELECT m.winner_name, m.loser_name FROM matches m ORDER BY m.minutes DESC LIMIT 1	WITH LongestMatch AS (SELECT MAX(minutes) AS max_minutes FROM matches) SELECT m.winner_name, m.loser_name FROM matches m JOIN LongestMatch lm ON m.minutes = lm.max_minutes
1	SELECT players.first_name, players.player_id, AVG(rankings.ranking) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name	SELECT T1.player_id, avg(ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name
0	SELECT p.first_name, p.player_id, AVG(COALESCE(r.ranking, 0)) AS avg_ranking FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id	SELECT T1.first_name, T1.player_id, COALESCE(AVG(T2.ranking), 0) AS average_ranking FROM players AS T1 LEFT JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name, T1.player_id
1	SELECT players.first_name, players.player_id, SUM(rankings.ranking_points) FROM players, rankings WHERE players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name	SELECT sum(ranking_points), T1.first_name, T1.player_id FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name, T1.player_id
0	SELECT first_name, IFNULL(ranking_points, 0) AS total_points FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id	SELECT p.first_name, IFNULL(SUM(r.ranking_points), 0) FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id
1	SELECT p.country_code, COUNT(p.player_id) AS total_players FROM players p GROUP BY p.country_code	SELECT count(*) , country_code FROM players GROUP BY country_code
1	SELECT p.country_code, COUNT(p.player_id) FROM players p GROUP BY p.country_code	SELECT count(*) , country_code FROM players GROUP BY country_code
1	SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) = (SELECT MAX(count) FROM (SELECT COUNT(player_id) AS count FROM players GROUP BY country_code) sub)	SELECT country_code FROM players GROUP BY country_code HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) AS count FROM players GROUP BY country_code) AS counts)
1	SELECT country_code FROM (SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code) AS T WHERE num_players = (SELECT MAX(num_players) FROM (SELECT COUNT(*) AS num_players FROM players GROUP BY country_code) AS subquery)	SELECT country_code FROM players GROUP BY country_code HAVING count(*) = (SELECT MAX(player_count) FROM (SELECT count(*) AS player_count FROM players GROUP BY country_code) AS counts)
0	SELECT country_code, COUNT(*) AS total_players FROM players GROUP BY country_code HAVING total_players > 50	SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
1	SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50	SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50
1	SELECT r.ranking_date, SUM(r.tours) FROM rankings r GROUP BY r.ranking_date	SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date
1	SELECT r.ranking_date, SUM(r.tours) FROM rankings r GROUP BY r.ranking_date	SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date
1	SELECT year, COUNT(1) AS num_matches FROM matches GROUP BY year	SELECT count(*) , YEAR FROM matches GROUP BY YEAR
1	SELECT year, COUNT(match_num) FROM matches GROUP BY year ORDER BY year	SELECT count(*) , YEAR FROM matches GROUP BY YEAR
0	SELECT P.first_name, P.last_name, R.ranking FROM players AS P JOIN rankings AS R ON P.player_id = R.player_id WHERE P.player_id IN (SELECT winner_id FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3)	SELECT winner_name, winner_rank FROM matches WHERE winner_age <= (SELECT MAX(winner_age) FROM (SELECT winner_age AS winner_age FROM matches ORDER BY winner_age Limit 3)) ORDER BY winner_age
0	SELECT first_name, last_name, ranking FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3	SELECT winner_name, winner_rank FROM matches WHERE winner_age <= (SELECT MAX(winner_age) FROM (SELECT winner_age AS winner_age FROM matches ORDER BY winner_age Limit 3)) ORDER BY winner_age
0	SELECT COUNT(DISTINCT winner_id) FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'L'	SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
0	SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name LIKE '%WTA Championships%'	SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
0	SELECT p.first_name, p.country_code, p.birth_date FROM players p INNER JOIN (SELECT winner_id, MAX(ranking_points) AS max_rank FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_id ORDER BY max_rank DESC LIMIT 1) sub ON p.player_id = sub.winner_id	SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 WHERE T1.player_id IN (SELECT T2.winner_id FROM matches AS T2 WHERE T2.winner_rank_points = (SELECT max(T3.winner_rank_points) FROM matches AS T3))
0	SELECT p.first_name, p.country_code, p.birth_date FROM players p WHERE EXISTS (SELECT 1 FROM rankings r WHERE r.player_id = p.player_id AND r.ranking_points = (SELECT MAX(ranking_points) FROM rankings))	SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 WHERE T1.player_id IN (SELECT T2.winner_id FROM matches AS T2 WHERE T2.winner_rank_points = (SELECT max(T3.winner_rank_points) FROM matches AS T3))
1	SELECT hand, COUNT(player_id) AS count_of_players FROM players GROUP BY hand	SELECT count(*) , hand FROM players GROUP BY hand
1	SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand	SELECT count(*) , hand FROM players GROUP BY hand
1	SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'	SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
0	SELECT ship.name, ship.tonnage FROM ship ORDER BY UPPER(ship.name) DESC, ship.tonnage ASC	SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage ASC
1	SELECT b.name, b.date, b.result FROM battle b	SELECT name, date, result FROM battle
0	SELECT battle.id AS BattleID, MAX(death.killed) AS MaxDeathToll, MIN(death.killed) AS MinDeathToll FROM death LEFT JOIN ship ON death.caused_by_ship_id = ship.id LEFT JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id	SELECT max(killed) , min(killed) FROM death
1	SELECT AVG(injured) AS average_injuries FROM death	SELECT avg(injured) FROM death
1	SELECT d.killed, d.injured FROM death d, ship s WHERE d.caused_by_ship_id = s.id AND s.tonnage = 't'	SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
1	SELECT name, result FROM battle WHERE NOT bulgarian_commander = 'Boril'	SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'
1	SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'	SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'
1	SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10))	SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10
1	SELECT T1.id, T1.name FROM ship AS T1 JOIN (SELECT caused_by_ship_id, SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) AS T2 ON T1.id = T2.caused_by_ship_id WHERE T2.total_injuries = (SELECT MAX(total_injuries) FROM (SELECT SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id) AS T3)	SELECT T2.id, T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id HAVING SUM(T1.injured) = (SELECT max(total_injured) FROM (SELECT SUM(T3.injured) AS total_injured FROM death AS T3 JOIN ship AS T4 ON T3.caused_by_ship_id = T4.id GROUP BY T4.id))
1	SELECT DISTINCT b.name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'	SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'
1	SELECT COUNT(DISTINCT result) AS NumberOfUniqueResults FROM battle	SELECT count(DISTINCT RESULT) FROM battle
1	SELECT COUNT(battle.id) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 225)	SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );
1	SELECT b.name, b.date FROM battle b WHERE EXISTS (SELECT NULL FROM ship s WHERE s.lost_in_battle = b.id AND s.name = 'Lettice') AND EXISTS (SELECT NULL FROM ship s WHERE s.lost_in_battle = b.id AND s.name = 'HMS Atalanta')	SELECT T3.name, T3.date FROM (SELECT T1.id, T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.id, T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta') AS T3
1	SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = 'English Channel')	SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
1	SELECT note FROM death WHERE note LIKE '%East%'	SELECT note FROM death WHERE note LIKE '%East%'
1	SELECT line_1 AS 'Address Line 1', line_2 AS 'Address Line 2' FROM Addresses	SELECT line_1 , line_2 FROM addresses
1	SELECT line_1, line_2 FROM Addresses WHERE line_1 IS NOT NULL AND line_2 IS NOT NULL	SELECT line_1 , line_2 FROM addresses
1	SELECT COUNT(DISTINCT course_id) AS TotalUniqueCourses FROM Courses	SELECT count(*) FROM Courses
1	SELECT COUNT(*) AS CourseCount FROM Courses	SELECT count(*) FROM Courses
1	SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'math'	SELECT course_description FROM Courses WHERE course_name = 'math'
0	SELECT course_description FROM Courses WHERE course_name LIKE '%math%' OR course_name LIKE '%Mathematics%'	SELECT course_description FROM Courses WHERE course_name = 'math'
1	SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'Port Chelsea'	SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
1	SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea' AND zip_postcode IS NOT NULL	SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
1	SELECT D.department_id, D.department_name FROM Departments D WHERE (SELECT COUNT(*) FROM Degree_Programs DP WHERE DP.department_id = D.department_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Degree_Programs GROUP BY department_id) sub)	WITH DegreeCount AS (SELECT department_id, COUNT(*) AS num_degrees FROM Degree_Programs GROUP BY department_id) SELECT D.department_name, D.department_id FROM Departments AS D JOIN DegreeCount AS DC ON D.department_id = DC.department_id WHERE DC.num_degrees = (SELECT MAX(num_degrees) FROM DegreeCount)
1	SELECT D.department_id, D.department_name FROM Departments D WHERE D.department_id IN (SELECT DP.department_id FROM Degree_Programs DP GROUP BY DP.department_id HAVING COUNT(DP.degree_program_id) = (SELECT MAX(C) FROM (SELECT COUNT(degree_program_id) AS C FROM Degree_Programs GROUP BY department_id) T))	SELECT t2.department_name, t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_id HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT COUNT(*) AS degree_count FROM degree_programs GROUP BY department_id) AS counts)
1	SELECT COUNT(DISTINCT D.department_id) FROM Departments D WHERE EXISTS (SELECT department_id FROM Degree_Programs DP WHERE DP.department_id = D.department_id)	SELECT count(DISTINCT department_id) FROM Degree_Programs
1	SELECT COUNT(DISTINCT department_id) FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs)	SELECT count(DISTINCT department_id) FROM Degree_Programs
1	SELECT COUNT(*) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs) AS unique_degrees	SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
1	SELECT COUNT(degree_summary_name) FROM (SELECT DISTINCT degree_summary_name FROM Degree_Programs) AS unique_degrees	SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
0	SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs, Departments WHERE Degree_Programs.department_id = Departments.department_id AND Departments.department_name = 'engineering'	SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'
0	SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs, Departments WHERE Degree_Programs.department_id = Departments.department_id AND Departments.department_name = 'engineering'	SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'
1	SELECT section_name AS 'Section Name', section_description AS 'Description' FROM Sections	SELECT section_name , section_description FROM Sections
1	SELECT section_name AS 'Section Name', section_description AS 'Description' FROM Sections	SELECT section_name , section_description FROM Sections
1	SELECT C.course_name, C.course_id FROM Courses C WHERE (SELECT COUNT(S.section_id) FROM Sections S WHERE S.course_id = C.course_id) <= 2	SELECT c.course_id, c.course_name FROM courses c WHERE (SELECT COUNT(*) FROM sections s WHERE s.course_id = c.course_id) <= 2
1	SELECT C.course_id, C.course_name FROM Courses C LEFT JOIN Sections S ON C.course_id = S.course_id GROUP BY C.course_id HAVING COUNT(S.section_id) < 2	SELECT c.course_name, c.course_id FROM courses c WHERE (SELECT COUNT(*) FROM sections s WHERE s.course_id = c.course_id) < 2
1	SELECT section_name FROM Sections ORDER BY section_name DESC	SELECT section_name FROM Sections ORDER BY section_name DESC
1	SELECT section_name FROM Sections ORDER BY section_name DESC	SELECT section_name FROM Sections ORDER BY section_name DESC
1	SELECT S.semester_name, S.semester_id FROM Semesters S, Student_Enrolment SE WHERE S.semester_id = SE.semester_id GROUP BY S.semester_id, S.semester_name HAVING COUNT(SE.student_id) = (SELECT MAX(total) FROM (SELECT COUNT(student_id) AS total FROM Student_Enrolment GROUP BY semester_id) AS MaxEnrollments)	SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id HAVING count(*) = (SELECT MAX(counted) FROM (SELECT count(*) as counted FROM Student_Enrolment GROUP BY semester_id) AS temp)
1	SELECT semester_name, semester_id FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(student_id) = (SELECT MAX(c) FROM (SELECT COUNT(student_id) AS c FROM Student_Enrolment GROUP BY semester_id) AS counts))	SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id HAVING COUNT(*) = (SELECT MAX(total_enrolments) FROM (SELECT COUNT(*) AS total_enrolments FROM Student_Enrolment GROUP BY semester_id) AS enrolment_counts)
1	SELECT department_description FROM Departments WHERE department_name LIKE '%the%computer%'	SELECT department_description FROM departments WHERE department_name LIKE '%the computer%'
1	SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' ESCAPE '\'	SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
0	SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Student_Enrolment WHERE student_id = S.student_id GROUP BY semester_id HAVING COUNT(degree_program_id) = 2) >= 1	SELECT DISTINCT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s WHERE EXISTS (SELECT 1 FROM student_enrolment se WHERE se.student_id = s.student_id GROUP BY se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2)
1	SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students S WHERE S.student_id IN (SELECT SE.student_id FROM Student_Enrolment SE GROUP BY SE.student_id, SE.semester_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2)	SELECT DISTINCT s.student_id, s.first_name, s.middle_name, s.last_name FROM students s JOIN student_enrolment se ON s.student_id = se.student_id JOIN (SELECT student_id, semester_id FROM student_enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2) ds ON s.student_id = ds.student_id AND se.semester_id = ds.semester_id
1	SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor')	SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelor'))
1	SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors')	SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM degree_programs WHERE degree_summary_name = 'Bachelors'))
0	SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name HAVING COUNT(Student_Enrolment.student_id) = (SELECT MAX(Count) FROM (SELECT COUNT(student_id) AS Count FROM Student_Enrolment GROUP BY degree_program_id) AS MaxCount)	SELECT dp.degree_summary_name FROM degree_programs dp INNER JOIN student_enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name HAVING COUNT(DISTINCT se.student_id) = (SELECT MAX(total_enrolled) FROM (SELECT COUNT(DISTINCT student_id) AS total_enrolled FROM student_enrolment GROUP BY degree_program_id))
0	SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1)	WITH EnrollmentCounts AS (SELECT T1.degree_summary_name, COUNT(*) AS student_count FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name) SELECT degree_summary_name FROM EnrollmentCounts WHERE student_count = (SELECT MAX(student_count) FROM EnrollmentCounts)
0	SELECT D.degree_program_id, D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment S ON D.degree_program_id = S.degree_program_id GROUP BY D.degree_program_id, D.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(*) = (SELECT MAX(student_count) FROM (SELECT degree_program_id, COUNT(*) as student_count FROM Student_Enrolment GROUP BY degree_program_id) AS counts)
1	SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(T2.student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) AS subquery)	SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id HAVING COUNT(*) = (SELECT MAX(total_enrolled) FROM (SELECT COUNT(*) AS total_enrolled FROM Student_Enrolment GROUP BY degree_program_id) AS counts)
1	SELECT student_id, first_name, middle_name, last_name, num_enrollments FROM (SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) AS num_enrollments, RANK() OVER (ORDER BY COUNT(Student_Enrolment.student_id) DESC) AS rank FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id) WHERE rank = 1	WITH EnrollmentCounts AS (SELECT student_id, COUNT(*) AS num_enrollments FROM Student_Enrolment GROUP BY student_id) SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, EnrollmentCounts.num_enrollments FROM Students JOIN EnrollmentCounts ON Students.student_id = EnrollmentCounts.student_id WHERE EnrollmentCounts.num_enrollments = (SELECT MAX(num_enrollments) FROM EnrollmentCounts)
0	SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(SE.student_id) AS total_enrollments FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY total_enrollments DESC LIMIT 1	SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_id) AS num_enrollments FROM students T1 INNER JOIN student_enrolment T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING num_enrollments = (SELECT COUNT(*) AS num_enrollments FROM student_enrolment AS T3 GROUP BY T3.student_id ORDER BY num_enrollments DESC LIMIT 1)
1	SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL	SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
1	SELECT S.semester_name FROM Semesters S LEFT JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id WHERE SE.semester_id IS NULL	SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
1	SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id	SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
1	SELECT course_name FROM Courses c WHERE EXISTS (SELECT NULL FROM Student_Enrolment_Courses sec WHERE sec.course_id = c.course_id)	SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)
1	SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(enrollment_count) FROM (SELECT course_id, COUNT(*) AS enrollment_count FROM Student_Enrolment_Courses GROUP BY course_id) AS subquery))	SELECT C.course_name FROM courses C INNER JOIN (SELECT course_id FROM student_enrolment_courses GROUP BY course_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM student_enrolment_courses GROUP BY course_id))) SC ON C.course_id = SC.course_id
1	SELECT C.course_name FROM Courses C JOIN (SELECT course_id, COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id) AS S ON C.course_id = S.course_id WHERE S.total = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM Student_Enrolment_Courses GROUP BY course_id) AS T)	SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) = (SELECT COUNT(*) AS C FROM student_enrolment_courses GROUP BY course_id ORDER BY C DESC LIMIT 1)
1	SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT DISTINCT student_id FROM Student_Enrolment)	SELECT T.last_name FROM (SELECT T1.student_id, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T3.student_id, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id) AS T
0	SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT DISTINCT student_id FROM Student_Enrolment)	SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' and T1.student_id not in (SELECT T3.student_id From Student_Enrolment AS T3)
1	SELECT T.transcript_id, T.transcript_date FROM Transcripts T INNER JOIN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2) TC ON T.transcript_id = TC.transcript_id	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2
1	SELECT T1.transcript_id, T1.transcript_date FROM Transcripts T1 JOIN Transcript_Contents T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(DISTINCT T2.student_course_id) >= 2	SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2
1	SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'	SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
1	SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward' AND cell_mobile_number IS NOT NULL	select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'
1	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1
1	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC, student_id ASC LIMIT 1
1	SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC LIMIT 1	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC, student_id ASC LIMIT 1
1	SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC, student_id ASC LIMIT 1)	SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC, student_id ASC LIMIT 1
1	SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id	SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
1	SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id	SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
0	SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM addresses A INNER JOIN students S ON A.address_id = S.current_address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3 HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) count FROM students GROUP BY current_address_id))
1	SELECT A.address_id, A.line_1, A.line_2 FROM Addresses A WHERE A.address_id = (SELECT address_id FROM (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id FROM Students) AS combined GROUP BY address_id ORDER BY COUNT(*) DESC, address_id ASC LIMIT 1)	SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN (SELECT current_address_id AS address_id FROM Students UNION ALL SELECT permanent_address_id AS address_id FROM Students) AS T2 ON T1.address_id = T2.address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC, T1.address_id ASC LIMIT 1
0	SELECT AVG(CAST(SUBSTRING(CAST(transcript_date AS VARCHAR), 1, 4) AS INT)) FROM Transcripts	SELECT AVG(strftime('%Y', transcript_date) ) FROM Transcripts
1	SELECT AVG(CAST(transcript_date AS TIMESTAMP)) FROM Transcripts	SELECT avg(transcript_date) FROM Transcripts
1	SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date IN (SELECT MIN(transcript_date) FROM Transcripts)	SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT min(transcript_date) FROM Transcripts)
0	SELECT * FROM Transcripts WHERE transcript_date = (SELECT MIN(T.transcript_date) FROM Transcripts T)	SELECT transcript_date, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)
1	SELECT COUNT(*) AS TotalTranscripts FROM Transcripts	SELECT count(*) FROM Transcripts
1	SELECT COUNT(transcript_id) FROM (SELECT transcript_id FROM Transcripts) AS transcript_ids	SELECT count(*) FROM Transcripts
1	SELECT MAX(transcript_date) FROM Transcripts	SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
1	SELECT MAX(transcript_date) FROM Transcripts	SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
0	SELECT student_course_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY student_course_id ORDER BY count DESC LIMIT 1	WITH CountPerStudentCourse AS (SELECT student_course_id, COUNT(*) AS cnt FROM Transcript_Contents GROUP BY student_course_id) SELECT cnt, student_course_id FROM CountPerStudentCourse WHERE cnt = (SELECT MAX(cnt) FROM CountPerStudentCourse)
0	SELECT student_enrolment_id, student_course_id FROM Student_Enrolment_Courses WHERE student_course_id IN (SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT count(*) as num_transcripts, student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING count(*) = (SELECT max(counts) FROM (SELECT count(*) as counts FROM Transcript_Contents GROUP BY student_course_id) as subquery)
1	SELECT MIN(T.transcript_date) AS transcript_date, T.transcript_id FROM Transcripts T INNER JOIN (SELECT transcript_id, COUNT(*) AS num_courses FROM Transcript_Contents GROUP BY transcript_id) TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING TC.num_courses = (SELECT MIN(num_courses) FROM (SELECT COUNT(*) AS num_courses FROM Transcript_Contents GROUP BY transcript_id) sub) ORDER BY T.transcript_id ASC LIMIT 1	SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*), T1.transcript_id ASC LIMIT 1
1	SELECT T.transcript_id, T.transcript_date FROM Transcripts T INNER JOIN (SELECT transcript_id, COUNT(*) AS num_results FROM Transcript_Contents GROUP BY transcript_id) TC ON T.transcript_id = TC.transcript_id WHERE TC.num_results = (SELECT MIN(num_results) FROM (SELECT COUNT(*) AS num_results FROM Transcript_Contents GROUP BY transcript_id) sub)	SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) = (SELECT COUNT(*) AS c FROM Transcript_Contents AS T3 JOIN Transcripts AS T4 ON T3.transcript_id = T4.transcript_id GROUP BY T3.transcript_id ORDER BY c LIMIT 1)
0	SELECT DISTINCT S.semester_name FROM Semesters S, Student_Enrolment SE, Degree_Programs DP WHERE S.semester_id = SE.semester_id AND SE.degree_program_id = DP.degree_program_id AND DP.degree_summary_name IN ('Master', 'Bachelor') GROUP BY S.semester_id HAVING COUNT(DISTINCT DP.degree_summary_name) = 2	SELECT s.semester_name FROM semesters s WHERE s.semester_id IN (SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Master' INTERSECT SELECT se.semester_id FROM student_enrolment se JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor')
0	SELECT DISTINCT S1.semester_id FROM Student_Enrolment S1 JOIN Degree_Programs D1 ON S1.degree_program_id = D1.degree_program_id WHERE D1.degree_summary_name LIKE '%Masters%' AND S1.semester_id IN (SELECT S2.semester_id FROM Student_Enrolment S2 JOIN Degree_Programs D2 ON S2.degree_program_id = D2.degree_program_id WHERE D2.degree_summary_name LIKE '%Bachelors%')	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'
1	SELECT COUNT(DISTINCT S.current_address_id) FROM Students S	SELECT count(DISTINCT current_address_id) FROM Students
0	SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country FROM Addresses WHERE EXISTS (SELECT NULL FROM Students WHERE current_address_id = address_id OR permanent_address_id = address_id)	SELECT COUNT(*) FROM (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students) AS T
0	SELECT Students.* FROM Students ORDER BY last_name DESC, first_name DESC	SELECT other_student_details FROM Students ORDER BY other_student_details DESC
0	SELECT other_student_details FROM Students ORDER BY last_name DESC, student_id DESC	SELECT other_student_details FROM Students ORDER BY other_student_details DESC
1	SELECT section_description FROM Sections WHERE section_name IN ('H')	SELECT section_description FROM Sections WHERE section_name = 'H'
1	SELECT section_description FROM Sections WHERE section_name = 'h'	SELECT section_description FROM Sections WHERE section_name  =  'h'
1	SELECT first_name FROM Students, Addresses WHERE Students.permanent_address_id = Addresses.address_id AND (Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582')	select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' or t1.cell_mobile_number = '09700166582'
1	SELECT first_name FROM Students, Addresses WHERE Students.permanent_address_id = Addresses.address_id AND (Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582')	select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'Haiti' or t1.cell_mobile_number = '09700166582'
1	SELECT Title FROM Cartoon ORDER BY Title ASC	SELECT Title FROM Cartoon ORDER BY title
1	SELECT Title FROM Cartoon ORDER BY Title ASC	SELECT Title FROM Cartoon ORDER BY title
0	SELECT * FROM Cartoon c WHERE c.Directed_by = 'Ben Jones'	SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
1	SELECT c.Title FROM Cartoon c WHERE c.Directed_by = 'Ben Jones'	SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
1	SELECT COUNT(*) AS Total FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
1	SELECT COUNT(Title) AS NumberOfCartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr'	SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
1	SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASC	SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date, id
1	SELECT Title AS Cartoon_Name, Directed_by AS Director FROM Cartoon ORDER BY Original_air_date ASC, id ASC	SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date, id ASC
1	SELECT Title FROM Cartoon WHERE Directed_by IN (SELECT Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')	SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
1	SELECT Title FROM Cartoon WHERE Directed_by IN (SELECT Directed_by FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti')	SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
1	SELECT Country, COUNT(*) AS TotalChannels FROM TV_Channel GROUP BY Country HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM TV_Channel GROUP BY Country) AS SubQuery)	WITH ranked_countries AS (SELECT country, COUNT(id) AS total_channels, RANK() OVER (ORDER BY COUNT(id) DESC) AS rank FROM tv_channel GROUP BY country) SELECT country, total_channels FROM ranked_countries WHERE rank = 1
1	SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country HAVING COUNT(*) = (SELECT MAX(ChannelCount) FROM (SELECT COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Country) AS SubQuery)	SELECT Country, count(*) FROM TV_Channel GROUP BY Country HAVING count(*) = (SELECT count(*) as c FROM TV_Channel GROUP BY Country ORDER BY c DESC LIMIT 1)
1	SELECT COUNT(DISTINCT series_name) AS SeriesNameCount, COUNT(DISTINCT Content) AS ContentCount FROM TV_Channel	SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;
1	SELECT COUNT(DISTINCT series_name) AS SeriesCount, COUNT(DISTINCT Content) AS ContentCount FROM TV_Channel	SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;
1	SELECT c.Content FROM TV_Channel AS c WHERE c.series_name = 'Sky Radio'	SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
1	SELECT c.Content FROM TV_Channel AS c WHERE c.series_name = 'Sky Radio'	SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
1	SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'	SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
1	SELECT Package_Option FROM TV_Channel WHERE series_name IN ('Sky Radio')	SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
1	SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'	SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';
1	SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'	SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';
1	SELECT T1.Language, T1.Channel_Count FROM (SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS T1 WHERE T1.Channel_Count = (SELECT MIN(Channel_Count) FROM (SELECT COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language) AS T2)	SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM TV_Channel GROUP BY LANGUAGE) as subquery)
1	SELECT Language, COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language HAVING ChannelCount = (SELECT MIN(ChannelCount) FROM (SELECT COUNT(id) AS ChannelCount FROM TV_Channel GROUP BY Language) AS SubQuery)	WITH Language_Count AS (SELECT LANGUAGE, COUNT(*) AS num_channels FROM TV_Channel GROUP BY LANGUAGE) SELECT LANGUAGE, num_channels FROM Language_Count WHERE num_channels = (SELECT MIN(num_channels) FROM Language_Count);
1	SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language	SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE
1	SELECT COUNT(*), Language FROM TV_Channel GROUP BY Language	SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE
1	SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')	SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!')
0	SELECT series_name FROM TV_Channel WHERE EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Cartoon.Title = 'The Rise of the Blue Beetle')	SELECT T1.series_name FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Title = 'The Rise of the Blue Beetle!')
1	SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
1	SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
1	SELECT Episode FROM TV_series ORDER BY Rating ASC, id ASC	SELECT Episode FROM TV_series ORDER BY Rating, id ASC
1	SELECT Episode FROM TV_series ORDER BY Rating, id	SELECT Episode FROM TV_series ORDER BY Rating, id ASC
1	SELECT Episode, Rating FROM TV_series WHERE Rating IS NOT NULL ORDER BY Rating DESC, Episode LIMIT 3	SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC, Episode ASC LIMIT 3
1	SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3	SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
1	SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series	SELECT max(SHARE) , min(SHARE) FROM TV_series;
1	SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series	SELECT max(SHARE) , min(SHARE) FROM TV_series;
1	SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
1	SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'	SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
1	SELECT Weekly_Rank FROM TV_series AS t WHERE t.Episode = 'A Love of a Lifetime'	SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
1	SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' AND Weekly_Rank IS NOT NULL	SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
1	SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime')	SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime')
1	SELECT series_name FROM TV_Channel WHERE EXISTS (SELECT 1 FROM TV_series WHERE TV_series.Channel = TV_Channel.id AND Episode = 'A Love of a Lifetime')	SELECT series_name FROM tv_channel WHERE id IN (SELECT channel FROM tv_series WHERE episode = 'A Love of a Lifetime')
1	SELECT t.Episode FROM TV_series t INNER JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
1	SELECT t.Episode FROM TV_series t INNER JOIN TV_Channel c ON t.Channel = c.id WHERE c.series_name = 'Sky Radio'	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
1	SELECT Directed_by, COUNT(*) AS TotalCartoons FROM Cartoon GROUP BY Directed_by	SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by
1	SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by	SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by
1	SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date IN (SELECT MAX(Original_air_date) FROM Cartoon)	SELECT production_code, channel FROM cartoon WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)
1	SELECT Production_code, Channel FROM (SELECT Production_code, Channel, RANK() OVER (ORDER BY Original_air_date DESC) AS rk FROM Cartoon) AS Ranked WHERE rk = 1	select production_code, channel from cartoon where Original_air_date = (SELECT max(original_air_date) FROM cartoon)
0	SELECT T.Package_Option, T.series_name FROM TV_Channel AS T WHERE T.Hight_definition_TV = 'High definition TV'	SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'
1	SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV LIKE 'Yes'	SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'
1	SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'	SELECT DISTINCT country FROM tv_channel WHERE id IN (SELECT channel FROM cartoon WHERE written_by = 'Todd Casey')
1	SELECT DISTINCT c.Country FROM TV_Channel c, Cartoon ct WHERE c.id = ct.Channel AND ct.Written_by = 'Todd Casey'	SELECT DISTINCT tc.country FROM tv_channel tc JOIN cartoon c ON tc.id = c.channel WHERE c.written_by = 'Todd Casey'
1	SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'	SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'
1	SELECT Country FROM TV_Channel EXCEPT SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'	SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'
0	SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang')	SELECT T1.series_name, T1.country FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Michael Chang' INTERSECT SELECT T2.Id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Ben Jones')
1	SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' AND Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang'))	SELECT T1.series_name, T1.country FROM TV_Channel AS T1 WHERE T1.id IN (SELECT T2.id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Michael Chang' INTERSECT SELECT T2.Id FROM TV_Channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.directed_by = 'Ben Jones')
1	SELECT Pixel_aspect_ratio_PAR AS PAR, Country AS Nation FROM TV_Channel WHERE Language NOT IN ('English')	SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'
1	SELECT Country, Pixel_aspect_ratio_PAR FROM TV_Channel WHERE Language <> 'English' AND Language IS NOT NULL	SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'
1	SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)	SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)
1	SELECT id FROM TV_Channel AS T1 WHERE (SELECT COUNT(*) FROM TV_Channel AS T2 WHERE T2.Country = T1.Country) > 2	SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)
1	SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')	SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
1	SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')	SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'
1	SELECT T1.Package_Option FROM TV_Channel AS T1 WHERE NOT EXISTS (SELECT 1 FROM Cartoon AS T2 WHERE T2.Channel = T1.id AND T2.Directed_by = 'Ben Jones')	SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
1	SELECT Package_Option FROM TV_Channel AS T WHERE T.id NOT IN (SELECT C.Channel FROM Cartoon AS C WHERE C.Directed_by = 'Ben Jones')	SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')
1	SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player	SELECT count(*) FROM poker_player
1	SELECT COUNT(DISTINCT Poker_Player_ID) FROM poker_player	SELECT count(*) FROM poker_player
1	SELECT Earnings FROM poker_player ORDER BY Earnings DESC	SELECT Earnings FROM poker_player ORDER BY Earnings DESC
0	SELECT Earnings, Poker_Player_ID FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID	SELECT Earnings FROM poker_player ORDER BY Earnings DESC, Poker_Player_ID ASC
1	SELECT p.Final_Table_Made, p.Best_Finish FROM poker_player p	SELECT Final_Table_Made , Best_Finish FROM poker_player
1	SELECT p.Final_Table_Made, p.Best_Finish FROM poker_player p	SELECT Final_Table_Made , Best_Finish FROM poker_player
1	SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player	SELECT avg(Earnings) FROM poker_player
1	SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player	SELECT avg(Earnings) FROM poker_player
1	SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(p.Earnings) FROM poker_player p)	SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
1	SELECT Money_Rank FROM poker_player AS pp WHERE pp.Earnings = (SELECT MAX(Earnings) FROM poker_player AS pp2)	SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
1	SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 ORDER BY Final_Table_Made DESC LIMIT 1	SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
1	SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 ORDER BY Final_Table_Made DESC LIMIT 1	SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000
0	SELECT Name FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NOT NULL	SELECT name FROM people WHERE exists (SELECT 1 FROM poker_player WHERE poker_player.people_id = people.people_id)
1	SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID
1	SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
1	SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000
1	SELECT P.Name FROM people P, poker_player PP WHERE P.People_ID = PP.People_ID ORDER BY PP.Final_Table_Made ASC, PP.Earnings DESC, PP.Poker_Player_ID ASC	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC, T2.Earnings DESC, T2.Poker_Player_ID ASC
1	SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made, people.Name, poker_player.Poker_Player_ID	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC, T1.Name ASC, T2.Poker_Player_ID ASC
1	SELECT Birth_Date FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID AND poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player))	SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))
1	SELECT Birth_Date FROM people WHERE EXISTS (SELECT 1 FROM poker_player WHERE People_ID = people.People_ID AND Earnings = (SELECT MIN(Earnings) FROM poker_player))	SELECT birth_date FROM people WHERE people_id IN (SELECT people_id FROM poker_player WHERE earnings = (SELECT MIN(earnings) FROM poker_player))
0	SELECT p.Money_Rank FROM poker_player p WHERE EXISTS (SELECT 1 FROM people pe WHERE p.People_ID = pe.People_ID AND pe.Height = (SELECT MAX(Height) FROM people))	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = (SELECT MAX(Height) FROM people AS T3 JOIN poker_player AS T4 ON T3.People_ID = T4.People_ID)
0	SELECT pp.Money_Rank FROM poker_player pp WHERE EXISTS (SELECT 1 FROM people p WHERE p.People_ID = pp.People_ID AND p.Height = (SELECT MAX(Height) FROM people))	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height = (SELECT MAX(Height) FROM people AS T3 JOIN poker_player AS T4 ON T3.People_ID = T4.People_ID)
1	SELECT AVG(Earnings) AS AverageEarnings FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200	SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
1	SELECT AVG(Earnings) AS AverageEarnings FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200	SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200
1	SELECT people.Name AS PlayerName FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name ASC	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC, T1.Name ASC
1	SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC, people.Name, poker_player.Poker_Player_ID	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC, T1.Name ASC, T2.Poker_Player_ID ASC
1	SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC	SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality
1	SELECT COUNT(*), Nationality FROM people GROUP BY Nationality	SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality
0	SELECT p.Nationality FROM people p GROUP BY p.Nationality ORDER BY COUNT(p.Nationality) DESC LIMIT 1	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(ncount) FROM (SELECT COUNT(*) as ncount FROM people GROUP BY Nationality) as counts)
1	SELECT p.Nationality FROM people p GROUP BY p.Nationality HAVING COUNT(p.Nationality) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM people GROUP BY Nationality) AS counts)	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(ncount) FROM (SELECT COUNT(*) as ncount FROM people GROUP BY Nationality) as counts)
1	SELECT DISTINCT Nationality FROM people WHERE Nationality IN (SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1)	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
1	SELECT DISTINCT Nationality FROM people WHERE Nationality IN (SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1)	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
1	SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC	SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC
1	SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC	SELECT Name, Birth_Date FROM people ORDER BY Name ASC, People_ID ASC
1	SELECT Name FROM people WHERE Nationality IS NOT 'Russia'	SELECT Name FROM people WHERE Nationality != 'Russia'
1	SELECT Name FROM people WHERE Nationality IS NOT 'Russia'	SELECT Name FROM people WHERE Nationality != 'Russia'
1	SELECT Name FROM people WHERE NOT EXISTS (SELECT 1 FROM poker_player WHERE poker_player.People_ID = people.People_ID)	SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
1	SELECT p.Name FROM people p LEFT OUTER JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL	SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
1	SELECT COUNT(DISTINCT Nationality) FROM people	SELECT count(DISTINCT Nationality) FROM people
1	SELECT COUNT(DISTINCT p.Nationality) FROM people p	SELECT count(DISTINCT Nationality) FROM people
0	SELECT COUNT(state) FROM (SELECT DISTINCT state FROM AREA_CODE_STATE AS A)	SELECT count(*) FROM area_code_state
1	SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY 2 DESC	SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
1	SELECT vote_id, phone_number, state FROM VOTES GROUP BY vote_id, phone_number, state	SELECT vote_id , phone_number , state FROM votes
1	SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE	SELECT max(area_code) , min(area_code) FROM area_code_state
1	SELECT MAX(VOTES.created) AS LastCreatedDate FROM VOTES WHERE VOTES.state = 'CA'	SELECT max(created) FROM votes WHERE state  =  'CA'
1	SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'	SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
1	SELECT DISTINCT state, created FROM VOTES	SELECT DISTINCT state , created FROM votes
1	SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(vote_id) >= 2)	SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2
1	SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VOTES V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number HAVING COUNT(*) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(*) AS vote_count FROM VOTES GROUP BY contestant_number) AS votes)	WITH VoteCounts AS (SELECT contestant_number, COUNT(*) AS vote_count FROM votes GROUP BY contestant_number), MinVotes AS (SELECT MIN(vote_count) AS min_votes FROM VoteCounts) SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS C JOIN VoteCounts VC ON C.contestant_number = VC.contestant_number JOIN MinVotes MV ON VC.vote_count = MV.min_votes
1	SELECT COUNT(vote_id) FROM VOTES WHERE state = 'NY' OR state = 'CA'	SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
1	SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number)	SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
1	SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES GROUP BY state HAVING COUNT(*) = (SELECT MAX(vote_count) FROM (SELECT COUNT(*) AS vote_count FROM VOTES GROUP BY state) AS subquery))	SELECT T1.area_code FROM area_code_state AS T1 JOIN (SELECT state, COUNT(*) as votes_count FROM votes GROUP BY state) AS T2 ON T1.state = T2.state WHERE T2.votes_count = (SELECT MAX(votes_count) FROM (SELECT state, COUNT(*) AS votes_count FROM votes GROUP BY state) AS V2)
1	SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'	SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'
1	SELECT area_code FROM AREA_CODE_STATE WHERE state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' AND state IN (SELECT state FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Kelly Clauss'))	SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'
0	SELECT contestant_name FROM CONTESTANTS WHERE INSTR(contestant_name, 'Al') > 0	select contestant_name from contestants where contestant_name like '%al%'
1	SELECT c.Name FROM country AS c WHERE c.IndepYear > 1950	SELECT Name FROM country WHERE IndepYear > 1950
1	SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear IS NOT NULL	SELECT Name FROM country WHERE IndepYear > 1950
1	SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE 'Republic'	SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'
0	SELECT COUNT(Code) FROM country WHERE GovernmentForm LIKE '%republic%'	SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'
1	SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = 'Caribbean'	SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'
1	SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = 'Caribbean'	SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean'
0	SELECT DISTINCT Continent FROM country WHERE Name = 'Anguilla'	SELECT Continent FROM country WHERE Name = 'Anguilla'
1	SELECT c.Continent FROM country c WHERE c.Name = 'Anguilla'	SELECT Continent FROM country WHERE Name = 'Anguilla'
0	SELECT DISTINCT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'	SELECT region FROM country WHERE code IN (SELECT countrycode FROM city WHERE name = 'Kabul')
0	SELECT DISTINCT country.Region FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'	SELECT region FROM country WHERE code IN (SELECT countrycode FROM city WHERE name = 'Kabul');
1	SELECT CL.Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba' AND CL.Percentage IN (SELECT MAX(Percentage) FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.Name = 'Aruba')	SELECT language FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba') AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode IN (SELECT code FROM country WHERE name = 'Aruba'))
0	SELECT DISTINCT Language FROM countrylanguage WHERE CountryCode IN (SELECT CountryCode FROM city WHERE Name = 'Aruba') AND IsOfficial = 'T'	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND Percentage = (SELECT max(T4.Percentage) FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Name = 'Aruba')
1	SELECT Population, LifeExpectancy FROM country WHERE Name LIKE 'Brazil'	SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'
1	SELECT Population AS 'Population', LifeExpectancy AS 'Life Expectancy' FROM country WHERE Name = 'Brazil'	SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'
1	SELECT country.Region AS Region, country.Population AS Population FROM country WHERE country.Name = 'Angola'	SELECT Population , Region FROM country WHERE Name = 'Angola'
1	SELECT Population, Region FROM country WHERE Name = 'Angola'	SELECT Population , Region FROM country WHERE Name = 'Angola'
1	SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'	SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'
1	SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa'	SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
1	SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Asia')	SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')
1	SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')	SELECT name FROM country WHERE continent = 'Asia' AND lifeexpectancy = (SELECT MIN(lifeexpectancy) FROM country WHERE continent = 'Asia')
1	SELECT SUM(Population) TotalPopulation, MAX(GNP) MaxGNP FROM country WHERE Continent = 'Asia'	SELECT sum(Population) , max(GNP) FROM country WHERE Continent = 'Asia'
1	SELECT SUM(Population) AS PopulationSum, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'	SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'
0	SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%' GROUP BY Continent, GovernmentForm	SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
0	SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'	SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
1	SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')	SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
1	SELECT SUM(c.SurfaceArea) FROM country AS c WHERE c.Continent = 'Asia' OR c.Continent = 'Europe'	SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'
0	SELECT TOTAL(Population) FROM city WHERE District = 'Gelderland'	SELECT sum(Population) FROM city WHERE District  =  'Gelderland'
1	SELECT SUM(Population) FROM city WHERE District LIKE 'Gelderland'	SELECT sum(Population) FROM city WHERE District  =  'Gelderland'
1	SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory'	SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US territory'
0	SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm LIKE '%US territory%'	SELECT avg(GNP), sum(population) FROM country WHERE GovernmentForm = 'US territory'
1	SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE Language IS NOT NULL	SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
1	SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE Language IS NOT NULL	SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
1	SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
1	SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'	SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
1	SELECT COUNT(Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'	SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'
0	SELECT COUNT(Language) AS NumberOfLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'	SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.name = 'Aruba'
1	SELECT COUNT(Language) AS OfficialLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'	SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'
0	SELECT COUNT(DISTINCT Language) FROM countrylanguage cl, country c WHERE cl.CountryCode = c.Code AND c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'	SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'
0	SELECT c.Name FROM country c JOIN (SELECT CountryCode, COUNT(*) AS LangCount FROM countrylanguage GROUP BY CountryCode ORDER BY LangCount DESC LIMIT 1) AS sub ON c.Code = sub.CountryCode	SELECT T1.name FROM country AS T1 WHERE T1.Code IN (SELECT T2.CountryCode FROM countrylanguage AS T2 GROUP BY T2.CountryCode HAVING count(*) = (SELECT COUNT(*) AS C FROM countrylanguage AS T3 GROUP BY T3.CountryCode ORDER BY C DESC LIMIT 1))
1	SELECT c.Name FROM country c WHERE (SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = c.Code) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage GROUP BY CountryCode))	SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage GROUP BY countrycode HAVING COUNT(DISTINCT language) = (SELECT MAX(lang_count) FROM (SELECT COUNT(DISTINCT language) AS lang_count FROM countrylanguage GROUP BY countrycode)))
1	SELECT T1.Continent FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS T1 WHERE T1.LanguageCount = (SELECT MAX(LanguageCount) FROM (SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) AS T2)	SELECT continent FROM (SELECT continent, COUNT(DISTINCT language) AS lang_count FROM country c INNER JOIN countrylanguage cl ON c.code = cl.countrycode GROUP BY continent ORDER BY lang_count DESC) WHERE lang_count = (SELECT MAX(lang_count) FROM (SELECT continent, COUNT(DISTINCT language) AS lang_count FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent))
1	WITH LanguageCounts AS (SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent) SELECT Continent FROM LanguageCounts WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM LanguageCounts)	WITH LanguageCount AS (SELECT continent, COUNT(DISTINCT language) AS NumLanguages FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY continent) SELECT continent FROM LanguageCount WHERE NumLanguages = (SELECT MAX(NumLanguages) FROM LanguageCount)
0	SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage cl1 WHERE cl1.Language = 'English' AND EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.CountryCode = cl1.CountryCode AND cl2.Language = 'Dutch')	SELECT COUNT(DISTINCT a.code) FROM country AS a JOIN countrylanguage AS b ON a.code = b.countrycode WHERE b.language IN ('English', 'Dutch') GROUP BY a.code HAVING COUNT(DISTINCT b.language) = 2
1	SELECT COUNT(DISTINCT a.CountryCode) FROM countrylanguage a JOIN countrylanguage b ON a.CountryCode = b.CountryCode WHERE a.Language = 'English' AND b.Language = 'Dutch'	SELECT COUNT(*) FROM (SELECT T1.Code, T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Code, T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch');
1	SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'	SELECT T1.Name FROM country AS T1 WHERE T1.Code IN (SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English' INTERSECT SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'French')
1	SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'	SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE language = 'French')
1	SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'	SELECT country.name FROM country JOIN countrylanguage AS cl1 ON country.code = cl1.countrycode JOIN countrylanguage AS cl2 ON country.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T' AND cl2.language = 'French' AND cl2.isofficial = 'T'
1	SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T')	SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'English') AND code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language = 'French')
1	SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese'	SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
1	SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')	SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
1	SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'
1	SELECT DISTINCT country.Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' UNION SELECT DISTINCT country.Region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English'	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'
0	SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T')	select t1.Code from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where (t2.language = 'English' or t2.language = 'Dutch') and isofficial = 't'
1	SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T')	SELECT name FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE isofficial = 'T' AND language IN ('English', 'Dutch'))
0	SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' AND CL.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia')	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language HAVING COUNT(*) = (SELECT MAX(LangCount) FROM (SELECT COUNT(*) AS LangCount FROM country AS SubT1 JOIN countrylanguage AS SubT2 ON SubT1.Code = SubT2.CountryCode WHERE SubT1.Continent = 'Asia' GROUP BY SubT2.Language) AS Counts)
1	SELECT T1.Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS T1 WHERE T1.NumCountries = (SELECT MAX(T2.NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language) AS T2)	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) as c FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language) as counts)
0	SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.GovernmentForm LIKE '%republic%' GROUP BY CL.Language HAVING COUNT(DISTINCT C.Code) = 1	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT(*) = 1
0	SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%') AND Language IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) = 1)	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1
0	SELECT Name, Population FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') ORDER BY Population DESC LIMIT 1 OFFSET 0	SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' AND T1.Population = (SELECT max(T3.Population) FROM city AS T3 JOIN countrylanguage AS T4 ON T3.CountryCode = T4.CountryCode WHERE T4.Language = 'English')
1	SELECT Name, Population FROM (SELECT Name, Population, RANK() OVER (ORDER BY Population DESC) AS rank FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')) WHERE rank = 1	SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' AND T1.Population = (SELECT max(T3.Population) FROM city AS T3 JOIN countrylanguage AS T4 ON T3.CountryCode = T4.CountryCode WHERE T4.Language = 'English')
1	SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' AND c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')	SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')
1	SELECT c.Name, c.Population, c.LifeExpectancy FROM country c JOIN (SELECT MAX(SurfaceArea) AS MaxArea FROM country WHERE Continent = 'Asia') sub ON c.SurfaceArea = sub.MaxArea WHERE c.Continent = 'Asia'	SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')
1	SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	SELECT AVG(c.lifeexpectancy) FROM country AS c WHERE c.code NOT IN (SELECT cl.countrycode FROM countrylanguage AS cl WHERE cl.language = 'English' AND cl.isofficial = 'T')
1	SELECT AVG(LifeExpectancy) FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T')	SELECT AVG(c.lifeexpectancy) FROM country c WHERE NOT EXISTS (SELECT 1 FROM countrylanguage cl WHERE cl.countrycode = c.code AND cl.language = 'English' AND cl.isofficial = 'T')
1	SELECT SUM(Population) FROM country AS c WHERE NOT EXISTS (SELECT * FROM countrylanguage AS cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')	SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
1	SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')	SELECT SUM(population) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
0	SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = '1'	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
1	SELECT Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState LIKE 'Beatrix' AND cl.IsOfficial = 'T'	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'
1	SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930	SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'
0	SELECT COUNT(DISTINCT cl.Language) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'TRUE'	SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'
1	SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(c.SurfaceArea) FROM country c WHERE c.Continent = 'Europe')	SELECT name FROM country WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
1	SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe') AND Continent NOT IN ('Europe')	SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')
1	SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Asia')	SELECT A.name FROM country AS A WHERE A.continent = 'Africa' AND A.population < (SELECT MIN(B.population) FROM country B WHERE B.continent = 'Asia')
1	SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT Population FROM country WHERE Continent = 'Asia' ORDER BY Population LIMIT 1)	SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT min(population) FROM country WHERE Continent = 'Asia')
1	SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')	SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT max(population) FROM country WHERE Continent = 'Africa')
0	SELECT Name FROM country AS c1 WHERE Continent = 'Asia' AND NOT EXISTS (SELECT 1 FROM country AS c2 WHERE c2.Continent = 'Africa' AND c2.Population >= c1.Population)	SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
1	SELECT DISTINCT c.Code FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')	SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
1	SELECT c.Code FROM country c WHERE NOT EXISTS (SELECT NULL FROM countrylanguage cl WHERE cl.CountryCode = c.Code AND cl.Language = 'English')	SELECT code FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English')
0	SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL GROUP BY c.Code	SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'
1	SELECT DISTINCT Code FROM country WHERE EXISTS (SELECT 1 FROM countrylanguage WHERE CountryCode = country.Code AND Language <> 'English')	SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'
0	SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%'	SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'
0	SELECT Code FROM country WHERE GovernmentForm NOT LIKE '%Republic%' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')	SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English'
1	SELECT c.Name FROM city c WHERE EXISTS (SELECT * FROM country co WHERE co.Continent = 'Europe' AND co.Code = c.CountryCode AND NOT EXISTS (SELECT * FROM countrylanguage cl WHERE cl.CountryCode = co.Code AND cl.Language = 'English' AND cl.IsOfficial = 'T'))	SELECT T1.name FROM city AS T1 WHERE T1.countrycode IN (SELECT T2.code FROM country AS T2 WHERE T2.continent = 'Europe' AND NOT EXISTS (SELECT countrycode FROM countrylanguage AS T3 WHERE T2.code = T3.countrycode AND T3.language = 'English' AND T3.isofficial = 'T'))
0	SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') EXCEPT SELECT Name FROM city WHERE CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')	SELECT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Code NOT IN (SELECT T3.Code FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')
0	SELECT DISTINCT c.Name, c.Population FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'	select t3.name, t3.population from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'Chinese' and t1.continent = 'Asia'
1	SELECT DISTINCT c.Name FROM city AS c, country AS co, countrylanguage AS cl WHERE c.CountryCode = co.Code AND co.Code = cl.CountryCode AND co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'	SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'
1	SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country GROUP BY Population)	SELECT Name, SurfaceArea, IndepYear FROM country WHERE Population = (SELECT MIN(Population) FROM country)
1	SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country GROUP BY Population)	SELECT Name, SurfaceArea, IndepYear FROM country WHERE Population = (SELECT MIN(Population) FROM country)
1	SELECT Name, Population, HeadOfState FROM country c1 WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country c2)	SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
1	SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country)	SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
0	SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS TotalLanguages FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3	SELECT distinctcountry.name, num_languages FROM (SELECT C.name, COUNT(DISTINCT L.language) AS num_languages FROM country C INNER JOIN countrylanguage L ON C.code = L.countrycode GROUP BY C.code) AS distinctcountry WHERE distinctcountry.num_languages >= 3
1	SELECT c.Name, COUNT(*) AS LanguageCount FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(*) > 2	SELECT country.name, COUNT(DISTINCT countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING COUNT(DISTINCT countrylanguage.language) > 2
1	SELECT district, COUNT(ID) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district	SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District
1	SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District	SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District
1	SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72	SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72
1	SELECT c.GovernmentForm, SUM(c.Population) FROM country c WHERE c.GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY c.GovernmentForm	SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72
1	SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExp, SUM(Population) AS SumPopulation FROM country GROUP BY Continent HAVING AvgLifeExp < 72	SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72
1	SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country AS c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72	SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72
0	SELECT Name, SurfaceArea FROM country ORDER BY Name, Code LIMIT 5	SELECT Name, SurfaceArea, Code FROM country ORDER BY SurfaceArea DESC, Name ASC, Code ASC LIMIT 5
1	SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5;	SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC, Population DESC, Code ASC LIMIT 5
0	SELECT Name FROM (SELECT Name, Code, Population FROM country ORDER BY Population DESC LIMIT 3) AS top_countries ORDER BY Name ASC, Code ASC	SELECT name FROM country ORDER BY population DESC, name, code LIMIT 3
1	SELECT Name FROM country ORDER BY Population DESC, Name, Code LIMIT 3	SELECT Name FROM country ORDER BY Population DESC, Name ASC, Code ASC LIMIT 3
0	SELECT Name FROM country WHERE Population IN (SELECT Population FROM country ORDER BY Population ASC LIMIT 3) ORDER BY Name ASC, Code ASC	SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3
1	SELECT Name FROM country ORDER BY Population ASC, Name, Code LIMIT 3	SELECT Name FROM country ORDER BY Population ASC, Name ASC, Code ASC LIMIT 3
1	SELECT COUNT(*) AS CountryCount FROM country WHERE Continent = 'Asia'	SELECT count(*) FROM country WHERE continent  =  'Asia'
1	SELECT COUNT(*) AS CountryCount FROM country WHERE Continent = 'Asia'	SELECT count(*) FROM country WHERE continent  =  'Asia'
1	SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000	SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'
1	SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000 LIMIT 100	SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'
0	SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 GROUP BY Continent HAVING AVG(SurfaceArea) > 0	select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000
1	SELECT SUM(Population) TotalPopulation, AVG(SurfaceArea) AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000	select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000
1	SELECT c.Name FROM city c WHERE c.Population BETWEEN 160000 AND 900000	SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
1	SELECT Name FROM city WHERE Population >= 160000 AND Population <= 900000	select name from city where population between 160000 and 900000
1	SELECT Language FROM (SELECT Language, RANK() OVER (ORDER BY COUNT(DISTINCT CountryCode) DESC) AS rank FROM countrylanguage GROUP BY Language) sub WHERE rank = 1	SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING count(*) = (SELECT max(c) FROM (SELECT count(*) as c FROM countrylanguage GROUP BY LANGUAGE) temp)
1	SELECT Language FROM (SELECT Language, COUNT(*) AS NumCountries FROM countrylanguage GROUP BY Language) AS LangCount WHERE NumCountries = (SELECT MAX(NumCountries) FROM (SELECT COUNT(*) AS NumCountries FROM countrylanguage GROUP BY Language))	SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING COUNT(*) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM countrylanguage GROUP BY LANGUAGE) sub)
0	SELECT CL.Language, CL.Percentage, CL.CountryCode, C.Name FROM countrylanguage CL, country C WHERE CL.CountryCode = C.Code AND (CL.CountryCode, CL.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)	SELECT T1.Language, T1.CountryCode, T2.Name FROM countrylanguage AS T1 JOIN country as T2 on T1.CountryCode = T2.Code WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T3 WHERE T3.CountryCode = T2.Code)
1	SELECT c.Code, l.Language FROM country c, countrylanguage l WHERE c.Code = l.CountryCode AND (l.CountryCode, l.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)	SELECT CountryCode, Language FROM countrylanguage WHERE (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)
1	SELECT COUNT(DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code);	SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage as T1 WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T2 WHERE T2.CountryCode = T1.CountryCode)
1	SELECT COUNT(DISTINCT c.Code) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T'	SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE LANGUAGE = 'Spanish' and (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)
1	SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode, Language HAVING Language = 'Spanish' AND MAX(Percentage) = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'))	SELECT DISTINCT CountryCode FROM countrylanguage as T1 WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage as T2 WHERE T2.CountryCode = T1.CountryCode)
1	SELECT DISTINCT country.Code FROM country, countrylanguage WHERE country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T'	SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Spanish' and (CountryCode, Percentage) IN (SELECT CountryCode, max(Percentage) FROM countrylanguage GROUP BY CountryCode)
1	SELECT COUNT(*) AS Total FROM conductor WHERE Conductor_ID IS NOT NULL	SELECT count(*) FROM conductor
1	SELECT COUNT(1) FROM conductor	SELECT count(*) FROM conductor
1	SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC	SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC
1	SELECT c.Name FROM conductor c ORDER BY c.Age, c.Conductor_ID	SELECT Name FROM conductor ORDER BY Age ASC, Conductor_ID ASC
1	SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')	SELECT Name FROM conductor WHERE Nationality != 'USA'
1	SELECT Name FROM conductor WHERE Nationality NOT IN ('USA')	SELECT Name FROM conductor WHERE Nationality != 'USA'
1	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC
1	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC, Orchestra_ID ASC
1	SELECT AVG(Attendance) AS AvgAttendance FROM show	SELECT avg(Attendance) FROM SHOW
1	SELECT AVG(Attendance) AS AvgAttendance FROM show	SELECT avg(Attendance) FROM SHOW
1	SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type != 'Live final'	SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != 'Live final'
1	SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'	SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != 'Live final'
1	SELECT COUNT(DISTINCT Nationality) AS total_nationalities FROM conductor	SELECT count(DISTINCT Nationality) FROM conductor
1	SELECT COUNT(DISTINCT Nationality) AS count_of_nationalities FROM conductor	SELECT count(DISTINCT Nationality) FROM conductor
1	SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC	SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC
1	SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC	SELECT Name FROM conductor ORDER BY Year_of_Work DESC, Conductor_ID ASC
0	SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
1	SELECT Name FROM (SELECT Name, Year_of_Work, RANK() OVER (ORDER BY Year_of_Work DESC) as rank FROM conductor) WHERE rank = 1	SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
1	SELECT Name, Orchestra FROM conductor, orchestra WHERE conductor.Conductor_ID = orchestra.Conductor_ID	SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
1	SELECT Name, Orchestra FROM conductor JOIN orchestra USING (Conductor_ID)	SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
1	SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
0	SELECT DISTINCT c.Name FROM conductor c, orchestra o WHERE c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
1	SELECT c.Name FROM conductor c INNER JOIN (SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) AS counts)) o ON c.Conductor_ID = o.Conductor_ID	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) = (SELECT MAX(Counted) FROM (SELECT COUNT(*) as Counted FROM orchestra GROUP BY Conductor_ID) as MaxCount)
1	SELECT c.Name FROM conductor c WHERE EXISTS (SELECT 1 FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID GROUP BY o.Conductor_ID HAVING COUNT(*) = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY Conductor_ID) sub))	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(*) = (SELECT MAX(CountOrch) FROM (SELECT COUNT(*) AS CountOrch FROM orchestra GROUP BY Conductor_ID) AS TempTable)
0	SELECT DISTINCT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008)	SELECT T1.Name FROM conductor AS T1 WHERE T1.conductor_id IN (SELECT T2.conductor_id FROM orchestra AS T2 WHERE T2.year_of_founded > 2008)
1	SELECT Name FROM conductor WHERE EXISTS (SELECT 1 FROM orchestra WHERE Conductor_ID = conductor.Conductor_ID AND Year_of_Founded > 2008)	SELECT T1.Name FROM conductor AS T1 WHERE T1.conductor_id IN (SELECT T2.conductor_id FROM orchestra AS T2 WHERE T2.year_of_founded > 2008)
1	SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company	SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company
1	SELECT Record_Company, COUNT(*) AS Orchestra_Count FROM orchestra GROUP BY Record_Company	SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company
0	SELECT Major_Record_Format, COUNT(Orchestra) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC, Major_Record_Format ASC	SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*), Major_Record_Format ASC
0	SELECT Major_Record_Format, COUNT(Orchestra_ID) AS Frequency, Orchestra_ID FROM orchestra GROUP BY Major_Record_Format, Orchestra_ID ORDER BY Frequency DESC, Major_Record_Format, Orchestra_ID	SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*), Major_Record_Format, Orchestra_ID
1	SELECT Record_Company FROM (SELECT Record_Company, COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company) AS SubQuery WHERE OrchestraCount = (SELECT MAX(OrchestraCount) FROM (SELECT COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company) AS SubQuery2)	SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = (SELECT MAX(orch_count) FROM (SELECT COUNT(*) AS orch_count FROM orchestra GROUP BY Record_Company) AS counts)
1	SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM orchestra GROUP BY Record_Company) tmp)	SELECT record_company FROM (SELECT record_company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC) AS rc WHERE rc.num_orchestras = (SELECT MAX(num_orchestras) FROM (SELECT COUNT(*) AS num_orchestras FROM orchestra GROUP BY record_company) as stats)
1	SELECT o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID)	SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
1	SELECT o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID)	SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
1	SELECT DISTINCT o.Record_Company FROM orchestra o WHERE EXISTS (SELECT 1 FROM orchestra WHERE Record_Company = o.Record_Company AND Year_of_Founded < 2003) AND EXISTS (SELECT 1 FROM orchestra WHERE Record_Company = o.Record_Company AND Year_of_Founded > 2003)	SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
1	SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003	SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
1	SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'	SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD'
1	SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')	SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'
1	SELECT DISTINCT o.Year_of_Founded FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1	SELECT DISTINCT o.year_of_founded FROM orchestra o WHERE o.orchestra_id IN (SELECT p.orchestra_id FROM performance p GROUP BY p.orchestra_id HAVING COUNT(p.performance_id) > 1)
1	SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1)	SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1
1	SELECT COUNT(*) FROM Highschooler WHERE ID IS NOT NULL	SELECT count(*) FROM Highschooler
1	SELECT COUNT(*) FROM Highschooler WHERE ID IS NOT NULL	SELECT count(*) FROM Highschooler
1	SELECT name, grade FROM Highschooler	SELECT name , grade FROM Highschooler
1	SELECT name, grade FROM Highschooler	SELECT name , grade FROM Highschooler
1	SELECT DISTINCT(Highschooler.grade) FROM Highschooler	SELECT DISTINCT grade FROM Highschooler
0	SELECT DISTINCT name, grade FROM Highschooler	SELECT grade FROM Highschooler
1	SELECT grade FROM Highschooler WHERE name = 'Kyle'	SELECT grade FROM Highschooler WHERE name = 'Kyle'
1	SELECT h.grade FROM Highschooler h WHERE h.name LIKE 'Kyle'	SELECT grade FROM Highschooler WHERE name = 'Kyle'
1	SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10	SELECT name FROM Highschooler WHERE grade = 10
1	SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10	SELECT name FROM Highschooler WHERE grade = 10
1	SELECT h.ID FROM Highschooler h WHERE h.name = 'Kyle'	SELECT ID FROM Highschooler WHERE name = 'Kyle'
1	SELECT ID FROM Highschooler WHERE name = 'Kyle' AND grade IS NOT NULL	SELECT ID FROM Highschooler WHERE name = 'Kyle'
1	SELECT COUNT(*) FROM Highschooler WHERE grade IN (SELECT DISTINCT grade FROM Highschooler WHERE grade BETWEEN 9 AND 10)	SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
1	SELECT COUNT(*) AS NumberOfStudents FROM Highschooler WHERE grade BETWEEN 9 AND 10	SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10
1	SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade	SELECT grade , count(*) FROM Highschooler GROUP BY grade
1	SELECT Highschooler.grade, COUNT(Highschooler.ID) AS NumberOfStudents FROM Highschooler GROUP BY Highschooler.grade	SELECT grade , count(*) FROM Highschooler GROUP BY grade
1	SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) = (SELECT MAX(count) FROM (SELECT COUNT(ID) AS count FROM Highschooler GROUP BY grade) AS counts)	WITH GradeCounts AS (SELECT grade, COUNT(*) AS total FROM Highschooler GROUP BY grade) SELECT grade FROM GradeCounts WHERE total = (SELECT MAX(total) FROM GradeCounts)
1	SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) = (SELECT COUNT(ID) FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1)	SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Highschooler GROUP BY grade) AS counts)
1	SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4
1	SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4
0	SELECT Highschooler.ID, SUM(CASE WHEN Friend.student_id = Highschooler.ID THEN 1 ELSE 0 END) + SUM(CASE WHEN Friend.friend_id = Highschooler.ID THEN 1 ELSE 0 END) AS total_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID	SELECT ide, COUNT(DISTINCT fre.friend_id) AS total_friends FROM (SELECT id AS ide FROM highschooler) LEFT JOIN (SELECT student_id, friend_id FROM friend UNION ALL SELECT friend_id, student_id FROM friend) fre ON ide = fre.student_id GROUP BY ide
0	SELECT H.ID, COUNT(DISTINCT CASE WHEN F.student_id = H.ID THEN F.friend_id ELSE F.student_id END) AS total_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID	SELECT id, (SELECT COUNT(*) FROM friend WHERE friend_id = h.id) + (SELECT COUNT(*) FROM friend WHERE student_id = h.id) AS num_friends FROM highschooler h
0	SELECT Highschooler.name AS student_name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name	SELECT name, (SELECT COUNT(*) FROM friend WHERE highschooler.id = friend.student_id) AS friend_count FROM highschooler
1	SELECT h.name, (SELECT COUNT(*) FROM Friend f WHERE f.student_id = h.ID) AS num_of_friends FROM Highschooler h	SELECT h2.name as HighschoolerName, (SELECT COUNT(*) FROM friend WHERE student_id = h2.id) as FriendshipCount FROM highschooler h2
0	SELECT H.name FROM Highschooler H WHERE H.ID = (SELECT ID FROM (SELECT student_id AS ID FROM Friend UNION ALL SELECT friend_id AS ID FROM Friend) F GROUP BY ID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T2.name FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T1 JOIN Highschooler AS T2 ON T1.id = T2.ID GROUP BY T1.id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T3 GROUP BY T3.id ORDER BY c DESC LIMIT 1)
0	SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(F.friend_id) = (SELECT MAX(num_friends) FROM (SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id) F))	SELECT T2.name FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T1 JOIN Highschooler AS T2 ON T1.id = T2.ID GROUP BY T1.id HAVING COUNT(*) = (SELECT COUNT(*) AS c FROM (SELECT student_id AS id FROM Friend UNION ALL SELECT friend_id AS id FROM Friend) AS T3 GROUP BY T3.id ORDER BY c DESC LIMIT 1)
0	SELECT DISTINCT H.name FROM Highschooler H, Friend F WHERE H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(*) >= 3	SELECT H.name FROM highschooler H WHERE (SELECT COUNT(*) FROM friend F WHERE F.student_id = H.id OR F.friend_id = H.id) >= 3
0	SELECT H.name FROM Highschooler H JOIN (SELECT student_id FROM Friend UNION ALL SELECT friend_id FROM Friend) F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.student_id) >= 3	SELECT h.name FROM highschooler h WHERE (SELECT COUNT(*) FROM friend WHERE student_id = h.id OR friend_id = h.id) >= 3
0	SELECT Highschooler.ID AS 'Student ID', Friend_Highschooler.name AS 'Friend Name' FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler AS Friend_Highschooler ON Friend.friend_id = Friend_Highschooler.ID WHERE Highschooler.name = 'Kyle'	SELECT T3.ID, T4.name FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 JOIN Highschooler AS T4 ON T3.friend_id = T4.ID
0	SELECT hs.ID, friend.name FROM Highschooler hs JOIN Friend ON hs.ID = Friend.student_id JOIN Highschooler friend ON Friend.friend_id = friend.ID WHERE hs.name = 'Kyle'	SELECT T3.ID, T4.name FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 JOIN Highschooler AS T4 ON T3.friend_id = T4.ID
1	SELECT h.ID, COUNT(f.friend_id) FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle' GROUP BY h.ID	SELECT H.id, COUNT(F.friend_id) AS num_friends FROM highschooler H LEFT JOIN friend F ON H.id = F.student_id WHERE H.name = 'Kyle' GROUP BY H.id
0	SELECT ID, (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) AS Friends FROM Highschooler WHERE name = 'Kyle'	SELECT T3.ID, COUNT(T3.friend_id) FROM (SELECT T2.ID, T1.friend_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle' UNION SELECT T2.ID, T1.student_id AS friend_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle') AS T3 GROUP BY T3.ID;
0	SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend UNION SELECT friend_id FROM friend)
0	SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend	SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)
1	SELECT H.name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F UNION SELECT F.friend_id FROM Friend F)	SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
1	SELECT H.name FROM Highschooler H WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)	SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend) AND id NOT IN (SELECT friend_id FROM friend)
1	SELECT DISTINCT F.student_id FROM Friend F, Likes L WHERE F.student_id = L.liked_id	SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
1	SELECT ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)	SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
1	SELECT name FROM Highschooler WHERE EXISTS (SELECT 1 FROM Friend WHERE student_id = Highschooler.ID) AND EXISTS (SELECT 1 FROM Likes WHERE liked_id = Highschooler.ID)	SELECT T1.name FROM highschooler AS T1 WHERE T1.id IN (SELECT DISTINCT T2.student_id FROM friend AS T2) and T1.id IN (SELECT DISTINCT T3.liked_id FROM likes AS T3)
0	SELECT H.name FROM Highschooler H INNER JOIN Friend F ON H.ID = F.student_id INNER JOIN Likes L ON H.ID = L.liked_id	SELECT T3.name FROM Highschooler as T3 WHERE T3.ID IN (SELECT T2.ID FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id UNION SELECT T2.ID FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.id INTERSECT SELECT T2.ID FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id)
1	SELECT ID, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) + (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS total_likes FROM Highschooler H	SELECT id, COUNT(DISTINCT L1.liked_id) + COUNT(DISTINCT L2.student_id) AS total_likes FROM highschooler h LEFT JOIN likes L1 ON h.id = L1.student_id LEFT JOIN likes L2 ON h.id = L2.liked_id GROUP BY id
1	SELECT ID, SUM(CASE WHEN student_id = ID THEN 1 ELSE 0 END) AS likes_given, SUM(CASE WHEN liked_id = ID THEN 1 ELSE 0 END) AS likes_received FROM Highschooler LEFT JOIN Likes ON ID = student_id OR ID = liked_id GROUP BY ID	SELECT T1.ID, (SELECT COUNT(*) FROM Likes as T2 WHERE T2.student_id = T1.ID) as given, (SELECT COUNT(*) FROM Likes AS T3 WHERE T3.liked_id = T1.ID) as received FROM Highschooler AS T1
1	SELECT H.name, (SELECT COUNT(*) FROM Likes WHERE student_id = H.ID) AS likes_given, (SELECT COUNT(*) FROM Likes WHERE liked_id = H.ID) AS likes_received FROM Highschooler H	SELECT T2.name, COALESCE(COUNT(DISTINCT T1.liked_id), 0) AS likes_given, COALESCE(COUNT(DISTINCT T3.student_id), 0) AS likes_received FROM Highschooler AS T2 LEFT JOIN Likes AS T1 ON T1.student_id = T2.ID LEFT JOIN Likes AS T3 ON T3.liked_id = T2.ID GROUP BY T2.ID, T2.name
0	SELECT H.name, IFNULL(LG.likes_given, 0) AS likes_given, IFNULL(LR.likes_received, 0) AS likes_received FROM Highschooler H LEFT JOIN (SELECT student_id, COUNT(*) AS likes_given FROM Likes GROUP BY student_id) LG ON H.ID = LG.student_id LEFT JOIN (SELECT liked_id, COUNT(*) AS likes_received FROM Likes GROUP BY liked_id) LR ON H.ID = LR.liked_id	SELECT T2.name, COUNT(DISTINCT T1.student_id) AS likes_given, COUNT(DISTINCT T3.liked_id) AS likes_received FROM Highschooler AS T2 LEFT JOIN Likes AS T1 ON T1.student_id = T2.ID LEFT JOIN Likes AS T3 ON T3.liked_id = T2.ID GROUP BY T2.ID
1	SELECT H.name FROM Highschooler H INNER JOIN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)) AS MostLiked ON H.ID = MostLiked.liked_id	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) = (SELECT max(count) FROM (SELECT count(*) as count FROM Likes GROUP BY liked_id) AS counts)
1	SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID, H.name HAVING COUNT(*) = (SELECT MAX(like_count) FROM (SELECT COUNT(*) AS like_count FROM Likes GROUP BY liked_id) AS subquery)	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) = (SELECT MAX(ncount) from (SELECT COUNT(*) as ncount FROM Likes AS T3 JOIN Highschooler AS T4 ON T3.liked_id = T4.id GROUP BY T3.liked_id) temp)
1	SELECT name FROM Highschooler WHERE ID IN (SELECT liked_id FROM Likes GROUP BY liked_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) >= 2
1	SELECT H.name FROM Highschooler H WHERE H.ID IN (SELECT L.liked_id FROM Likes L GROUP BY L.liked_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id GROUP BY T1.liked_id HAVING count(*) >= 2
1	SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*) FROM Friend WHERE student_id = H.ID OR friend_id = H.ID) >= 2	SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T1 ON T1.student_id = T2.id OR T1.friend_id = T2.id WHERE T2.grade > 5 GROUP BY T2.id HAVING count(*) >= 2
0	SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND H.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 UNION ALL SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM Highschooler AS T2 JOIN Friend AS T1 ON T1.student_id = T2.id OR T1.friend_id = T2.id WHERE T2.grade > 5 GROUP BY T2.id HAVING count(*) >= 2
1	SELECT ID, (SELECT COUNT(*) FROM Likes WHERE liked_id = Highschooler.ID) AS likes_count FROM Highschooler WHERE name = 'Kyle'	SELECT h.id AS student_id, (SELECT COUNT(*) FROM likes WHERE liked_id = h.id) AS likes_count FROM highschooler h WHERE h.name = 'Kyle'
1	SELECT H.ID, COUNT(L.liked_id) AS likes_count FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id WHERE H.name = 'Kyle' GROUP BY H.ID	SELECT T2.ID, count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle' GROUP BY T2.ID
1	SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)	SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
1	SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)	SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
1	SELECT MIN(H.grade) FROM Highschooler H WHERE NOT EXISTS (SELECT 1 FROM Friend F WHERE F.student_id = H.ID OR F.friend_id = H.ID)	SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 UNION SELECT T2.friend_id FROM Friend AS T2)
1	SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend)	SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
1	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
1	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
1	SELECT AVG(D.age) FROM Dogs D WHERE D.dog_id IN (SELECT T.dog_id FROM Treatments T)	SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
1	SELECT AVG(age) FROM Dogs WHERE EXISTS (SELECT 1 FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id)	SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
1	SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) > 2	SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2
1	SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P LEFT JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) T ON P.professional_id = T.professional_id WHERE P.state = 'Indiana' OR T.professional_id IS NOT NULL	SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2
1	SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000	select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )
1	SELECT D.name FROM Dogs D WHERE D.dog_id NOT IN (SELECT T.dog_id FROM Treatments T GROUP BY T.dog_id HAVING SUM(T.cost_of_treatment) > 1000)	select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )
1	WITH HumanNames AS (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) SELECT first_name FROM HumanNames WHERE first_name NOT IN (SELECT name FROM Dogs)	SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
1	SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS all_names WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE name = all_names.first_name)	SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
1	SELECT DISTINCT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT professional_id FROM Treatments)	SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
1	SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)	SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id
1	WITH DogCounts AS (SELECT owner_id, COUNT(*) AS count FROM Dogs GROUP BY owner_id), MaxCount AS (SELECT MAX(count) AS max_count FROM DogCounts) SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN DogCounts DC ON O.owner_id = DC.owner_id JOIN MaxCount MC ON DC.count = MC.max_count	SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) sub)
1	SELECT O.owner_id, O.first_name, O.last_name FROM Owners O JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) D ON O.owner_id = D.owner_id WHERE D.dog_count = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) T)	SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id HAVING count(*) = (SELECT MAX(dog_count) FROM (SELECT owner_id, count(*) AS dog_count FROM Dogs GROUP BY owner_id) AS subquery)
1	SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P INNER JOIN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2) AS T ON P.professional_id = T.professional_id	SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2
1	SELECT DISTINCT P.professional_id, P.role_code, P.first_name FROM Professionals P, Treatments T WHERE P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2	SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2
0	SELECT B.breed_name FROM Breeds B WHERE B.breed_code = (SELECT D.breed_code FROM Dogs D GROUP BY D.breed_code ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) AS counts FROM Dogs GROUP BY breed_code) AS subquery)
1	WITH DogCounts AS (SELECT breed_code, COUNT(*) AS NumDogs FROM Dogs GROUP BY breed_code), MaxCount AS (SELECT MAX(NumDogs) AS MaxNum FROM DogCounts) SELECT B.breed_name FROM Breeds B JOIN DogCounts D ON B.breed_code = D.breed_code WHERE D.NumDogs = (SELECT MaxNum FROM MaxCount)	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code HAVING COUNT(*) = (SELECT MAX(dog_count) FROM (SELECT COUNT(*) AS dog_count FROM Dogs GROUP BY breed_code) AS subquery)
1	WITH TreatmentCounts AS (SELECT O.owner_id, O.last_name, COUNT(T.treatment_id) AS num_treatments FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name) SELECT owner_id, last_name FROM TreatmentCounts WHERE num_treatments = (SELECT MAX(num_treatments) FROM TreatmentCounts)	SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name HAVING COUNT(*) = (SELECT MAX(treatment_count) FROM (SELECT COUNT(*) AS treatment_count FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS max_count)
1	SELECT O.owner_id, O.last_name FROM Owners O WHERE EXISTS (SELECT 1 FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.owner_id = O.owner_id GROUP BY D.owner_id HAVING SUM(T.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_cost FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Costs))	SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(cost) FROM (SELECT SUM(T5.cost_of_treatment) as cost FROM Dogs AS T4 JOIN Treatments AS T5 ON T4.dog_id = T5.dog_id GROUP BY T4.owner_id))
1	SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS Sub))	WITH TotalCosts AS (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN TotalCosts AS T2 ON T1.treatment_type_code = T2.treatment_type_code WHERE T2.total_cost = (SELECT MIN(total_cost) FROM TotalCosts)
0	SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) ASC LIMIT 1)	SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code HAVING SUM(T2.cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code) AS SubQuery)
1	SELECT O.owner_id, O.zip_code FROM Owners O WHERE O.owner_id = (SELECT D.owner_id FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY D.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1)	SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(cost) FROM (SELECT SUM(T5.cost_of_treatment) as cost FROM Dogs AS T4 JOIN Treatments AS T5 ON T4.dog_id = T5.dog_id GROUP BY T4.owner_id))
1	SELECT O.owner_id, O.zip_code FROM Owners O, (SELECT owner_id, SUM(cost_of_treatment) AS total_spent FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS Spending WHERE O.owner_id = Spending.owner_id AND Spending.total_spent = (SELECT MAX(total_spent) FROM (SELECT owner_id, SUM(cost_of_treatment) AS total_spent FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id) AS TotalSpending)	SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id HAVING SUM(T3.cost_of_treatment) = (SELECT MAX(total_cost) FROM (SELECT SUM(T3.cost_of_treatment) AS total_cost FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id) AS Sub)
1	SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2	SELECT p.professional_id, p.cell_number FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2
1	SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) > 1)	SELECT P.professional_id, P.cell_number FROM professionals P JOIN treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2
0	SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)	SELECT T1.first_name, T1.last_name FROM Professionals AS T1 WHERE T1.professional_id IN (SELECT T2.professional_id FROM treatments AS T2 WHERE T2.cost_of_treatment < (SELECT AVG(T3.cost_of_treatment) FROM treatments AS T3))
1	SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) GROUP BY professional_id)	SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments))
1	SELECT t.date_of_treatment, p.first_name FROM Treatments t INNER JOIN Professionals p ON t.professional_id = p.professional_id	SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
1	SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id	SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
1	SELECT cost_of_treatment AS TreatmentCost, treatment_type_description AS Description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code	SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
1	SELECT cost_of_treatment, treatment_type_description FROM Treatments CROSS JOIN Treatment_Types USING(treatment_type_code)	SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
0	SELECT DISTINCT O.first_name, O.last_name, S.size_description FROM Owners O, Dogs D, Sizes S WHERE O.owner_id = D.owner_id AND D.size_code = S.size_code ORDER BY O.first_name, O.last_name, S.size_description	SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
0	SELECT O.first_name, O.last_name, S.size_description FROM Owners O CROSS JOIN Dogs D ON O.owner_id = D.owner_id CROSS JOIN Sizes S ON D.size_code = S.size_code	SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
1	SELECT O.first_name, D.name FROM Owners AS O, Dogs AS D WHERE O.owner_id = D.owner_id	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
1	SELECT O.first_name AS OwnerFirstName, D.name AS DogName FROM Owners O, Dogs D WHERE O.owner_id = D.owner_id	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
1	SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) as count FROM Dogs GROUP BY breed_code ORDER BY count) WHERE count = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Dogs GROUP BY breed_code)))	SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = (SELECT COUNT(*) FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1))
1	SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code IN (SELECT breed_code FROM (SELECT breed_code, COUNT(*) AS cnt FROM Dogs GROUP BY breed_code ORDER BY cnt ASC) AS subquery WHERE cnt = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Dogs GROUP BY breed_code) AS subquery2))	SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING count(*) = (SELECT MIN(c) FROM (SELECT count(*) AS c FROM Dogs GROUP BY breed_code) AS counts))
0	SELECT O.first_name AS OwnerFirstName, D.name AS DogName FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'VA'	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
1	SELECT first_name, name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia'	SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
1	SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)	SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
1	SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments)	SELECT date_arrived, date_departed FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
0	SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs GROUP BY owner_id))	SELECT o.last_name FROM Owners AS o WHERE o.owner_id IN (SELECT d1.owner_id FROM dogs AS d1 WHERE d1.age = (SELECT MIN(d2.age) FROM dogs AS d2))
0	SELECT O.last_name FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs GROUP BY date_of_birth)	SELECT o.last_name FROM Owners AS o WHERE o.owner_id IN (SELECT d1.owner_id FROM dogs AS d1 WHERE d1.age = (SELECT MIN(d2.age) FROM dogs AS d2))
0	SELECT DISTINCT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'	SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
1	SELECT email_address FROM Professionals WHERE state LIKE 'Hawaii' OR state LIKE 'Wisconsin'	SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
1	SELECT date_arrived, date_departed FROM Dogs WHERE date_departed IS NOT NULL	SELECT date_arrived , date_departed FROM Dogs
1	SELECT `date_arrived`, `date_departed` FROM `Dogs`	SELECT date_arrived , date_departed FROM Dogs
1	SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id	SELECT count(DISTINCT dog_id) FROM Treatments
1	SELECT COUNT(*) FROM (SELECT dog_id FROM Treatments GROUP BY dog_id) AS TreatedDogs	SELECT count(DISTINCT dog_id) FROM Treatments
1	SELECT COUNT(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id	SELECT count(DISTINCT professional_id) FROM Treatments
1	SELECT COUNT(DISTINCT pro_id) FROM (SELECT professional_id AS pro_id FROM Treatments) AS subquery	SELECT count(DISTINCT professional_id) FROM Treatments
1	SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%' ORDER BY state, city	SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
1	SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'	SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'
1	SELECT O.first_name, O.last_name, O.email_address FROM Owners O WHERE O.state LIKE '%North%'	SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'
1	SELECT first_name, last_name, email_address FROM Owners WHERE LOWER(state) LIKE LOWER('%North%')	SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'
1	SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )
1	SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)	SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )
1	SELECT MAX(T.cost_of_treatment) FROM Treatments T JOIN (SELECT MAX(date_of_treatment) AS MaxDate FROM Treatments) M ON T.date_of_treatment = M.MaxDate	SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
1	SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment IN (SELECT MAX(date_of_treatment) FROM Treatments)	SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
1	SELECT COUNT(*) FROM Dogs d WHERE d.dog_id NOT IN (SELECT DISTINCT t.dog_id FROM Treatments t WHERE t.dog_id IS NOT NULL)	SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
1	SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.dog_id IS NULL	select count(*) from dogs where dog_id not in ( select dog_id from treatments )
1	SELECT COUNT(DISTINCT o.owner_id) FROM Owners o WHERE NOT EXISTS (SELECT 1 FROM Dogs d WHERE d.owner_id = o.owner_id);	SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
0	SELECT COUNT(DISTINCT O.owner_id) FROM Owners O LEFT JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.owner_id IS NULL OR D.abandoned_yn = 'N'	SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
1	SELECT COUNT(professional_id) FROM Professionals WHERE NOT EXISTS (SELECT NULL FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)	SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
1	SELECT COUNT(professional_id) FROM Professionals WHERE NOT EXISTS (SELECT NULL FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id)	SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
0	SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'true'	SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1
1	SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1	SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1
1	SELECT AVG(Dogs.age) AS avg_age FROM Dogs	SELECT avg(age) FROM Dogs
1	SELECT AVG(age) AS AvgAge FROM Dogs	SELECT avg(age) FROM Dogs
1	SELECT age FROM Dogs ORDER BY age DESC LIMIT 1	SELECT max(age) FROM Dogs
1	SELECT MAX(age) AS MaximumAge FROM Dogs GROUP BY age ORDER BY age DESC LIMIT 1	SELECT max(age) FROM Dogs
1	SELECT C.charge_type, C.charge_amount FROM Charges C	SELECT charge_type , charge_amount FROM Charges
1	SELECT c.charge_type, c.charge_amount FROM Charges AS c	SELECT charge_type , charge_amount FROM Charges
1	SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	SELECT max(charge_amount) FROM Charges
1	SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1	SELECT max(charge_amount) FROM Charges
1	SELECT p.email_address, p.cell_number, p.home_phone FROM Professionals p	SELECT email_address , cell_number , home_phone FROM professionals
1	SELECT email_address AS Email, cell_number AS CellPhone, home_phone AS HomePhone FROM Professionals	SELECT email_address , cell_number , home_phone FROM professionals
0	SELECT DISTINCT B.breed_name, S.size_description FROM Breeds B, Sizes S, Dogs D WHERE B.breed_code = D.breed_code AND S.size_code = D.size_code	SELECT DISTINCT breed_code , size_code FROM dogs
0	SELECT DISTINCT breed_name AS BreedType, size_description AS SizeType FROM Breeds, Sizes, Dogs WHERE Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code	SELECT DISTINCT breed_code , size_code FROM dogs
1	SELECT first_name, treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code	SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code
1	SELECT first_name, treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code	SELECT p.first_name, tt.treatment_type_description FROM professionals p JOIN treatments t ON p.professional_id = t.professional_id JOIN treatment_types tt ON t.treatment_type_code = tt.treatment_type_code
1	SELECT COUNT(*) FROM singer	SELECT count(*) FROM singer
1	SELECT COUNT(*) FROM singer	SELECT count(*) FROM singer
1	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Name ASC
1	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC, Singer_ID ASC
1	SELECT Birth_Year, Citizenship FROM singer	SELECT Birth_Year , Citizenship FROM singer
1	SELECT Birth_Year, Citizenship FROM singer	SELECT Birth_Year , Citizenship FROM singer
1	SELECT Name FROM singer WHERE Citizenship NOT IN ('France')	SELECT Name FROM singer WHERE Citizenship != 'France'
0	SELECT Name FROM singer WHERE Citizenship <> 'French'	SELECT Name FROM singer WHERE Citizenship != 'France'
1	SELECT s.Name FROM singer s WHERE s.Birth_Year IN (1948, 1949)	SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
1	SELECT s.Name FROM singer s WHERE s.Birth_Year = 1948 OR s.Birth_Year = 1949	SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
0	SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
1	SELECT Name FROM (SELECT Name, RANK() OVER (ORDER BY Net_Worth_Millions DESC) AS rank FROM singer) WHERE rank = 1	SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
1	SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship	SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship
1	SELECT Citizenship, COUNT(*) AS SingerCount FROM singer GROUP BY Citizenship	SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship
1	WITH Citizenship_Frequencies AS (SELECT Citizenship, COUNT(*) AS Frequency FROM singer GROUP BY Citizenship) SELECT Citizenship FROM Citizenship_Frequencies WHERE Frequency = (SELECT MAX(Frequency) FROM Citizenship_Frequencies)	SELECT Citizenship FROM singer GROUP BY Citizenship HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM singer GROUP BY Citizenship) AS counts)
1	SELECT s.Citizenship, COUNT(*) AS Total FROM singer s GROUP BY s.Citizenship	SELECT citizenship, COUNT(*) AS occurrence FROM singer GROUP BY citizenship
1	SELECT Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC	SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
1	SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC	SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
1	SELECT song.Title, singer.Name FROM song LEFT JOIN singer ON song.Singer_ID = singer.Singer_ID	SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
1	SELECT song.Title, singer.Name FROM song LEFT JOIN singer ON song.Singer_ID = singer.Singer_ID	SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
1	SELECT DISTINCT s.Name FROM singer s, song sg WHERE s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
1	SELECT DISTINCT s.Name FROM singer s, song sg WHERE s.Singer_ID = sg.Singer_ID AND sg.Sales > 300000	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000
1	SELECT s.Name FROM singer s WHERE (SELECT COUNT(*) FROM song sg WHERE sg.Singer_ID = s.Singer_ID) > 1	SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1)
1	SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)	SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1)
0	SELECT Name, Total_Sales FROM (SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name) AS Sales_Info	SELECT T1.Name, sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID
1	SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name	SELECT singer.name, SUM(song.sales) FROM song JOIN singer ON singer.singer_id = song.singer_id GROUP BY singer.singer_id
1	SELECT s.Name FROM singer s LEFT OUTER JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Singer_ID IS NULL	SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
1	SELECT s.Name FROM singer s WHERE s.Singer_ID NOT IN (SELECT sg.Singer_ID FROM song sg)	SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
1	SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955	SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
1	SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955	SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955
1	SELECT COUNT(1) FROM Other_Available_Features	SELECT count(*) FROM Other_Available_Features
0	SELECT feature_type_name FROM Ref_Feature_Types, Other_Available_Features WHERE Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code AND Other_Available_Features.feature_name = 'AirCon'	SELECT feature_type_name FROM ref_feature_types WHERE feature_type_code IN (SELECT feature_type_code FROM other_available_features WHERE feature_name = 'AirCon')
0	SELECT R.property_type_description FROM Ref_Property_Types R JOIN Properties P ON R.property_type_code = P.property_type_code	SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code
0	SELECT property_name FROM Properties WHERE property_type_code IN ('HSE', 'APT') AND room_count > 1	SELECT property_name FROM Properties WHERE (property_type_code = 'House' or property_type_code = 'Apartment') AND room_count > 1;
                     easy                 medium               hard                 extra                all                 
count                0                    0                    0                    0                    1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.779               
