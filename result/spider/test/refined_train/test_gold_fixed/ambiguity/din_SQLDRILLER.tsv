1	SELECT COUNT(DISTINCT Club_ID) AS UniqueClubCount FROM club	SELECT count(*) FROM club
1	SELECT COUNT(*) AS TotalNumberOfClubs FROM club	SELECT count(*) FROM club
1	SELECT club.Name FROM club ORDER BY Name ASC	SELECT Name FROM club ORDER BY Name ASC
1	SELECT Name FROM club ORDER BY LOWER(Name) ASC	SELECT Name FROM club ORDER BY Name ASC
1	SELECT c.Manager, c.Captain FROM club c	SELECT Manager ,  Captain FROM club
1	SELECT c.Manager, c.Captain FROM club c	SELECT Manager ,  Captain FROM club
1	SELECT Name FROM club WHERE Manufacturer NOT LIKE 'Nike'	SELECT Name FROM club WHERE Manufacturer != "Nike"
1	SELECT Name FROM club WHERE LOWER(Manufacturer) <> 'nike'	SELECT Name FROM club WHERE Manufacturer != "Nike"
1	SELECT p.Name FROM player p ORDER BY p.Wins_count ASC	SELECT Name FROM player ORDER BY Wins_count ASC
1	SELECT p.Name FROM player p ORDER BY p.Wins_count ASC	SELECT Name FROM player ORDER BY Wins_count ASC
1	SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)	SELECT p.name FROM player p WHERE p.earnings = (SELECT MAX(earnings) FROM player);
1	SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)	SELECT P.name FROM player P WHERE P.earnings = (SELECT MAX(earnings) FROM player)
1	SELECT DISTINCT Country FROM player p WHERE p.Earnings > 1200000	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
1	SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country HAVING COUNT(*) > 0	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
1	SELECT Country FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2) AND Wins_count > 2	SELECT p.country FROM player p WHERE p.wins_count > 2 and p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count>2)
0	SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC, Country ASC LIMIT 1	SELECT p.country FROM player p WHERE p.wins_count > 2 and p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count>2)
1	SELECT p.Name AS Player, c.Name AS Club FROM player p JOIN club c ON p.Club_ID = c.Club_ID	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
1	SELECT player.Name, club.Name FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
1	SELECT c.Name FROM club c WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID AND p.Wins_count > 2)	SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)
1	SELECT c.Name FROM club c WHERE EXISTS (SELECT p.Club_ID FROM player p WHERE p.Club_ID = c.Club_ID GROUP BY p.Club_ID HAVING MAX(p.Wins_count) > 2)	SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)
1	SELECT p.Name FROM player p WHERE EXISTS (SELECT 1 FROM club c WHERE p.Club_ID = c.Club_ID AND c.Manager = 'Sam Allardyce')	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
1	SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID ORDER BY AVG(Earnings) DESC)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
0	SELECT C.Name FROM club C JOIN player P ON C.Club_ID = P.Club_ID GROUP BY C.Name ORDER BY AVG(P.Earnings) DESC	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
1	SELECT c.Manufacturer, COUNT(*) FROM club c GROUP BY c.Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1	SELECT Manufacturer, COUNT(*) AS NumberOfClubs FROM club GROUP BY Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM club GROUP BY Manufacturer) AS counts)	SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM club GROUP BY manufacturer))
1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM club GROUP BY Manufacturer) AS counts)	SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM club GROUP BY manufacturer))
1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
1	SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
0	SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000	SELECT DISTINCT country FROM player WHERE earnings > 1400000 UNION ALL SELECT DISTINCT country FROM player WHERE earnings < 1100000
1	SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000	SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1	SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player)	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT COUNT(*) FROM (SELECT DISTINCT Country FROM player)	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT p.Earnings FROM player p WHERE p.Country = 'Australia' OR p.Country = 'Zimbabwe'	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O GROUP BY O.customer_id HAVING COUNT(*) > 2) AND C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.customer_id HAVING COUNT(I.order_item_id) >= 3)	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(o.order_id) > 2) AND EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(oi.order_item_id) >= 3)	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT o.order_id, o.order_status_code, (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id = o.order_id) AS ProductCount FROM Orders o WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.order_id = o.order_id) GROUP BY o.order_id, o.order_status_code	SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
1	SELECT O.order_id, O.order_status_code, (SELECT COUNT(*) FROM Order_Items WHERE Order_Items.order_id = O.order_id) AS product_count FROM Orders O	SELECT order_id, order_status_code, (SELECT COUNT(*) FROM order_items WHERE order_items.order_id = orders.order_id) AS product_count FROM orders
0	SELECT date_order_placed FROM Orders WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Orders.order_id = Order_Items.order_id GROUP BY order_id HAVING COUNT(order_item_id) > 1) OR date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
1	SELECT DISTINCT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1)	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
1	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE Orders.customer_id IS NOT NULL)	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)
1	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders GROUP BY customer_id)	SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id)
1	SELECT product_id, product_name, product_price, product_color FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id GROUP BY product_id HAVING COUNT(*) >= 2)	SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2
0	SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE (SELECT COUNT(*) FROM Order_Items OI WHERE OI.product_id = P.product_id) < 2	SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p WHERE (SELECT COUNT(DISTINCT oi.order_id) FROM order_items oi WHERE oi.product_id = p.product_id) < 2
1	SELECT o.order_id, o.date_order_placed FROM Orders o, Order_Items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
1	SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2)	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0	SELECT P.product_id, P.product_name, P.product_price FROM Products P WHERE P.product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1)	WITH RankedProducts AS (SELECT P.product_id, P.product_name, P.product_price, RANK() OVER (ORDER BY COUNT(OI.product_id) DESC) as Rank FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id) SELECT product_id, product_name, product_price FROM RankedProducts WHERE Rank = 1;
0	SELECT Products.product_id, Products.product_name, Products.product_price FROM Products INNER JOIN (SELECT product_id, COUNT(product_id) AS freq FROM Order_Items GROUP BY product_id) AS MostOrdered ON Products.product_id = MostOrdered.product_id ORDER BY MostOrdered.freq DESC LIMIT 1	SELECT product_id, product_name, product_price FROM (SELECT T1.product_id, T1.product_name, T1.product_price, rank() over (ORDER BY count(*) DESC) as rk FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id) WHERE rk = 1;
1	SELECT Orders.order_id, SUM(Products.product_price) AS total_price FROM Orders, Order_Items, Products WHERE Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY Orders.order_id HAVING SUM(Products.product_price) = (SELECT MIN(total_price) FROM (SELECT SUM(Products.product_price) AS total_price FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS SubQuery)	SELECT order_id, sum_price FROM (SELECT T1.order_id, sum(T2.product_price) as sum_price, rank() over (ORDER BY sum(T2.product_price) ) as rk FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id) WHERE rk = 1;
1	SELECT O.order_id, SUM(P.product_price) AS Total_Cost FROM Orders O, Order_Items OI, Products P WHERE O.order_id = OI.order_id AND OI.product_id = P.product_id GROUP BY O.order_id HAVING Total_Cost = (SELECT MIN(Total_Cost) FROM (SELECT SUM(P.product_price) AS Total_Cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id) AS MinCostTable)	SELECT order_id, sum_price FROM (SELECT T1.order_id, sum(T2.product_price) as sum_price, rank() over (ORDER BY sum(T2.product_price) ) as rk FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id) WHERE rk = 1;
1	SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS counts)	SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM customer_payment_methods GROUP BY payment_method_code) WHERE rank = 1
1	SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(customer_id) DESC) AS rank FROM Customer_Payment_Methods GROUP BY payment_method_code) ranked WHERE rank = 1	SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT max(count_global.use_count) FROM (SELECT payment_method_code, COUNT(*) AS use_count FROM customer_payment_methods GROUP BY payment_method_code) count_global)
0	SELECT gender_code, COUNT(DISTINCT Products.product_id) AS total_products FROM Customers, Orders, Order_Items, Products WHERE Customers.customer_id = Orders.customer_id AND Orders.order_id = Order_Items.order_id AND Order_Items.product_id = Products.product_id GROUP BY gender_code	SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
0	SELECT Customers.gender_code, COUNT(DISTINCT Products.product_id) AS total_products FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code	SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
1	SELECT gender_code, COUNT(Orders.order_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code	SELECT c.gender_code, COUNT(o.order_id) FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code
0	SELECT gender_code, COUNT(Orders.order_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code	SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
0	SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id	SELECT first_name, middle_initial, last_name, method_code FROM (SELECT customer_first_name AS first_name, customer_middle_initial AS middle_initial, customer_last_name AS last_name, customer_id FROM customers) AS cust LEFT JOIN (SELECT payment_method_code AS method_code, customer_id FROM customer_payment_methods) AS paym ON cust.customer_id = paym.customer_id
1	SELECT A.customer_first_name, A.customer_middle_initial, A.customer_last_name, B.payment_method_code FROM Customers A LEFT JOIN Customer_Payment_Methods B ON A.customer_id = B.customer_id	SELECT c1.customer_first_name, c1.customer_middle_initial, c1.customer_last_name, cp.payment_method_code FROM customers c1 LEFT JOIN customer_payment_methods cp ON c1.customer_id = cp.customer_id
1	SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM Invoices I, Shipments S WHERE I.invoice_number = S.invoice_number	SELECT T2.invoice_status_code, T2.invoice_date, T1.shipment_date FROM Shipments AS T1 LEFT JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
0	SELECT invoice_status_code AS "Invoice Status", invoice_date AS "Invoice Date", shipment_date AS "Shipment Date" FROM Invoices JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number	SELECT A.invoice_status_code, A.invoice_date, B.shipment_date FROM (SELECT invoice_number, invoice_status_code, invoice_date FROM invoices) A LEFT JOIN shipments B ON A.invoice_number = B.invoice_number
1	SELECT p.product_name, s.shipment_date FROM Products p, Order_Items oi, Shipment_Items si, Shipments s WHERE p.product_id = oi.product_id AND oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
1	SELECT P.product_name, S.shipment_date FROM Products P, Order_Items OI, Shipment_Items SI, Shipments S WHERE P.product_id = OI.product_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT DISTINCT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI, Orders O, Shipments S, Shipment_Items SI WHERE OI.order_id = O.order_id AND O.order_id = S.order_id AND OI.order_item_id = SI.order_item_id AND SI.shipment_id = S.shipment_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0	SELECT OI.order_item_status_code, S.shipment_tracking_number FROM Order_Items OI LEFT JOIN Shipments S ON OI.order_id = S.order_id LEFT JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id WHERE SI.shipment_id = S.shipment_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0	SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.order_item_id IN (SELECT order_item_id FROM Shipment_Items)	SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))
1	SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_Items))	SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))
0	SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
0	SELECT DISTINCT product_name, product_price, product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
0	sql placeholder	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
1	SELECT invoice_status_code FROM Invoices I WHERE NOT EXISTS (SELECT * FROM Shipments S WHERE S.invoice_number = I.invoice_number)	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
0	sql placeholder	select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id
0	sql placeholder	SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id
1	SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(DISTINCT customer_id) FROM Orders	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT COUNT(payment_method_code) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_size IS NOT NULL)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT P.product_price, P.product_size FROM Products AS P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE product_id IS NOT NULL)	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items WHERE product_id IS NOT NULL)	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id WHERE p.customer_id IS NULL	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT order_status_code, date_order_placed FROM Orders	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT order_status_code, date_order_placed FROM Orders	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT Customers.address_line_1, Customers.town_city, Customers.county FROM Customers WHERE Customers.country = 'USA'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
0	SELECT DISTINCT address_line_1, town_city, county FROM Customers WHERE country = 'United States'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
0	SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id	SELECT c.customer_first_name AS buyer, p.product_name AS product FROM customers c CROSS JOIN products p WHERE EXISTS (SELECT 1 FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id)
0	SELECT C.customer_first_name, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id	SELECT c.customer_first_name AS buyer, p.product_name AS product FROM customers c CROSS JOIN products p WHERE EXISTS (SELECT 1 FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id)
1	SELECT COUNT(order_item_id) FROM Shipment_Items	SELECT count(*) FROM Shipment_Items
0	SELECT COUNT(DISTINCT order_item_id) AS shipped_products_count FROM Shipment_Items	SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id
1	SELECT AVG(product_price) FROM Products WHERE product_price > 0	SELECT avg(product_price) FROM Products
1	SELECT AVG(product_price) AS AvgPrice FROM Products WHERE product_price > 0	SELECT avg(product_price) FROM Products
1	SELECT AVG(product_price) FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)	SELECT AVG(product_price) FROM products p JOIN (SELECT DISTINCT product_id FROM order_items) pi ON p.product_id = pi.product_id
1	SELECT AVG(product_price) FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)	SELECT AVG(product_price) FROM products WHERE product_id IN (SELECT product_id FROM order_items)
0	SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)	SELECT email_address, town_city, county FROM customers WHERE customers.gender_code IN (SELECT gender_code FROM customers GROUP BY gender_code HAVING count(*) = (SELECT count(*) AS c FROM customers GROUP BY gender_code ORDER BY c limit 1))
0	SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1)	SELECT email_address, town_city, county FROM customers WHERE customers.gender_code IN (SELECT gender_code FROM customers GROUP BY gender_code HAVING count(*) = (SELECT count(*) AS c FROM customers GROUP BY gender_code ORDER BY c limit 1))
1	SELECT O.date_order_placed FROM Orders O WHERE EXISTS (SELECT 1 FROM Customer_Payment_Methods CPM WHERE CPM.customer_id = O.customer_id GROUP BY CPM.customer_id HAVING COUNT(CPM.payment_method_code) >= 2)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1	SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1	SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Orders GROUP BY order_status_code) as counts)	SELECT order_status_code FROM orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(order_status_code) as count FROM orders GROUP BY order_status_code))
1	SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Orders GROUP BY order_status_code) AS counts)	WITH OrderStatusCount AS (SELECT order_status_code, COUNT(*) AS OSCOUNT FROM orders GROUP BY order_status_code) SELECT order_status_code FROM OrderStatusCount WHERE OSCOUNT = (SELECT MIN(OSCOUNT) FROM OrderStatusCount)
1	SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2)	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT shipment_date, shipment_tracking_number FROM Shipments	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)	SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )
1	SELECT product_color, product_description, product_size FROM Products WHERE product_price NOT IN (SELECT MAX(product_price) FROM Products)	select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )
0	SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director d GROUP BY d.Age)	SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)
1	SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director)	SELECT name FROM director WHERE Age = (SELECT max(Age) From director)
1	SELECT COUNT(Channel_ID) AS TotalChannels FROM channel WHERE Internet LIKE '%bbc%'	SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"
1	SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel	SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
1	SELECT Title FROM program ORDER BY Start_Year DESC	SELECT title FROM program ORDER BY start_year DESC
1	SELECT d.Name FROM director d INNER JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID HAVING COUNT(p.Program_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Program_ID) AS Count FROM program GROUP BY Director_ID) AS Counts)	SELECT name FROM director WHERE director_id in (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(count_programs) FROM (SELECT COUNT(program_id) AS count_programs FROM program GROUP BY director_id)));
1	SELECT Name, Age FROM director WHERE Director_ID IN (SELECT Director_ID FROM program GROUP BY Director_ID HAVING COUNT(Program_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Program_ID) AS cnt FROM program GROUP BY Director_ID) tmp))	SELECT name, age FROM director WHERE director_id IN (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(program_id) AS cnt FROM program GROUP BY director_id)))
1	SELECT Title FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program)	SELECT title FROM program WHERE start_year = (SELECT MAX(start_year) FROM program);
1	SELECT channel.Name, channel.Internet FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID HAVING COUNT(DISTINCT program.Program_ID) > 1	SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1
1	SELECT Name, (SELECT COUNT(*) FROM program WHERE Channel_ID = channel.Channel_ID) AS ProgramCount FROM channel	SELECT c.name, COUNT(p.program_id) AS program_count FROM channel AS c LEFT JOIN program AS p ON c.channel_id = p.channel_id GROUP BY c.channel_id
1	SELECT COUNT(*) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID WHERE program.Channel_ID IS NULL	SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)
0	SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID WHERE p.Title = 'Dracula'	SELECT name FROM director WHERE director_id IN (SELECT director_id FROM program WHERE title = 'Dracula')
1	SELECT c.Name, c.Internet FROM channel c WHERE c.Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID HAVING COUNT(Director_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Director_ID) AS cnt FROM director_admin GROUP BY Channel_ID) t))	SELECT c.name, c.internet FROM channel c INNER JOIN (SELECT channel_id FROM director_admin GROUP BY channel_id HAVING COUNT(DISTINCT director_id) = (SELECT MAX(num_directors) FROM (SELECT COUNT(DISTINCT director_id) AS num_directors FROM director_admin GROUP BY channel_id))) da ON c.channel_id = da.channel_id
1	SELECT director.Name FROM director WHERE Age BETWEEN 30 AND 60	SELECT name FROM director WHERE age BETWEEN 30 AND 60
0	SELECT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age < 40 AND da.Channel_ID = c.Channel_ID) AND EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Age > 60 AND da.Channel_ID = c.Channel_ID)	SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id = t2.channel_id JOIN director AS t3 ON t2.director_id = t3.director_id WHERE t3.age < 40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id = t2.channel_id JOIN director AS t3 ON t2.director_id = t3.director_id WHERE t3.age > 60
1	SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT da.Channel_ID FROM director_admin da INNER JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett')	SELECT ch.channel_id, ch.name FROM channel ch WHERE ch.channel_id NOT IN (SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett')
1	SELECT COUNT(Radio_ID) FROM radio WHERE Radio_ID IS NOT NULL	SELECT count(*) FROM radio
0	SELECT Transmitter FROM radio ORDER BY ERP_kW ASC, Transmitter ASC	select transmitter from radio order by erp_kw asc
1	SELECT t.tv_show_name, t.Original_Airdate FROM tv_show t	SELECT tv_show_name ,  Original_Airdate FROM tv_show
1	SELECT Station_name FROM city_channel WHERE Affiliation NOT LIKE 'ABC'	SELECT Station_name FROM city_channel WHERE Affiliation != "ABC"
1	SELECT radio.Transmitter FROM radio WHERE radio.ERP_kW > 150 OR radio.ERP_kW < 30	SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30
1	SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio)	SELECT transmitter FROM radio WHERE erp_kw = (SELECT MAX(erp_kw) FROM radio)
1	SELECT AVG(ERP_kW) FROM radio AS AverageERP	SELECT avg(ERP_kW) FROM radio
1	SELECT Affiliation, COUNT(*) AS NumberOfChannels FROM city_channel GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation
0	SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1	SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(AffiliationCount) FROM (SELECT COUNT(*) AS AffiliationCount FROM city_channel GROUP BY affiliation))
1	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3
1	SELECT city_channel.City, city_channel.Station_name FROM city_channel ORDER BY Station_name	SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC
1	SELECT r.Transmitter AS Transmitter, cc.City AS City FROM radio AS r INNER JOIN city_channel_radio AS ccr ON r.Radio_ID = ccr.Radio_ID INNER JOIN city_channel AS cc ON ccr.City_channel_ID = cc.ID	SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID
1	SELECT r.Transmitter, cc.Station_name FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC	SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC
0	SELECT r.Transmitter, COUNT(c.City_channel_ID) AS Channel_Count FROM radio r LEFT OUTER JOIN city_channel_radio c ON r.Radio_ID = c.Radio_ID GROUP BY r.Transmitter	SELECT r.transmitter, COUNT(distinct id) AS ChannelsCount FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id LEFT JOIN city_channel c ON c.id = ccr.city_channel_id GROUP BY r.radio_id
1	SELECT DISTINCT Transmitter FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE Radio_ID = radio.Radio_ID)	SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio)
1	SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000)	SELECT model FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000)
1	SELECT Model FROM vehicle WHERE Power > 6000 AND Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle WHERE Power > 6000)	SELECT model FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000)
1	SELECT Name FROM driver WHERE Citizenship = 'United States' AND Citizenship IS NOT NULL	SELECT name FROM driver WHERE citizenship  =  'United States'
1	SELECT Name FROM driver WHERE Citizenship LIKE 'United States'	SELECT name FROM driver WHERE citizenship  =  'United States'
1	SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) subquery)	SELECT A.driver_id, A.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id) A WHERE A.num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id))
1	SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(VehicleCount) FROM (SELECT COUNT(*) AS VehicleCount FROM vehicle_driver GROUP BY Driver_ID) AS SubQuery)	SELECT A.driver_id, A.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id) A WHERE A.num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id))
1	SELECT MAX(Power) max_power, AVG(Power) avg_power FROM vehicle WHERE Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1	SELECT MAX(Power) AS MaxPower, AVG(Power) AS AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1	SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(usage_count) FROM (SELECT COUNT(*) AS usage_count FROM vehicle_driver GROUP BY Vehicle_ID) tmp)	SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id ORDER BY frequency ASC) WHERE frequency = (SELECT MIN(frequency) FROM (SELECT COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id))
1	SELECT V.Vehicle_ID FROM vehicle_driver V GROUP BY V.Vehicle_ID HAVING COUNT(V.Driver_ID) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM vehicle_driver GROUP BY Vehicle_ID) AS counts)	SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id ORDER BY frequency ASC) WHERE frequency = (SELECT MIN(frequency) FROM (SELECT COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id))
1	SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT Build_Year, Model, Builder FROM vehicle	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT Build_Year, Model, Builder FROM vehicle	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT COUNT(DISTINCT Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(DISTINCT driver.Driver_ID) AS NumberOfDrivers FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series LIKE '%NASCAR%'	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series IN ('NASCAR')	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT AVG(vehicle.Top_Speed) AS Avg_Top_Speed FROM vehicle	SELECT avg(top_speed) FROM vehicle
1	SELECT AVG(Top_Speed) AS AverageTopSpeed FROM vehicle	SELECT avg(top_speed) FROM vehicle
1	SELECT DISTINCT Name FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Power > 5000)	select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000
1	SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))	SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 5000))
1	SELECT Model FROM vehicle WHERE Total_Production > 100 UNION SELECT Model FROM vehicle WHERE Top_Speed > 150	SELECT DISTINCT v.model FROM vehicle v WHERE (v.total_production > 100 OR v.top_speed > 150);
1	SELECT vehicle.Model FROM vehicle WHERE vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150	SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1	SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
1	SELECT v.Model, v.Build_Year FROM vehicle v WHERE v.Model LIKE '%DJ%'	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
0	SELECT v.Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)	SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
1	SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)	SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver)
1	SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'	SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)
1	SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE Builder = 'Ziyang' UNION SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(vehicle_driver.Driver_ID) = 2	SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)
1	SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE EXISTS (SELECT 1 FROM vehicle_driver D WHERE D.Vehicle_ID = V.Vehicle_ID GROUP BY D.Vehicle_ID HAVING COUNT(DISTINCT D.Driver_ID) > 2) OR EXISTS (SELECT 1 FROM vehicle_driver D JOIN driver DR ON D.Driver_ID = DR.Driver_ID WHERE DR.Name = 'Jeff Gordon' AND D.Vehicle_ID = V.Vehicle_ID)	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2) OR vehicle.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle AS v)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT COUNT(*) FROM vehicle WHERE Top_Speed IN (SELECT MAX(Top_Speed) FROM vehicle)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT driver.Name FROM driver ORDER BY driver.Name ASC	SELECT name FROM driver ORDER BY name
1	SELECT driver.Name FROM driver ORDER BY driver.Name ASC	SELECT name FROM driver ORDER BY name
1	SELECT COUNT(*) AS CountOfDrivers, Racing_Series FROM driver GROUP BY Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1	SELECT Racing_Series, COUNT(Driver_ID) FROM driver GROUP BY Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1	SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1')	SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))
1	SELECT Name, Citizenship FROM driver WHERE EXISTS (SELECT 1 FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle_driver.Driver_ID = driver.Driver_ID AND vehicle.Model = 'DJ1')	SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))
1	SELECT COUNT(Driver_ID) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d LEFT OUTER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Driver_ID IS NULL	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams	SELECT count(*) FROM Exams
1	SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams	SELECT count(*) FROM Exams
1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC, Exam_ID ASC	select distinct subject_code from exams order by subject_code asc
1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
1	SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code IS NOT 'Database'	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date, Exam_Name FROM Exams WHERE 'Database' != Subject_Code	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date FROM Exams WHERE LOWER(Subject_Code) LIKE LOWER('%data%') ORDER BY Exam_Date DESC	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1	SELECT Exam_Date FROM Exams WHERE LOWER(Subject_Code) LIKE '%data%' ORDER BY Exam_Date DESC	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1	SELECT Type_of_Question_Code, COUNT(Question_ID) AS count FROM Questions GROUP BY Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT Type_of_Question_Code, COUNT(Question_ID) AS Total FROM Questions GROUP BY Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT COUNT(DISTINCT Comments) FROM Student_Answers	SELECT count(DISTINCT Comments) FROM Student_Answers
1	SELECT COUNT(DISTINCT Comments) FROM Student_Answers	SELECT count(DISTINCT Comments) FROM Student_Answers
0	SELECT Student_Answer_Text, COUNT(*) AS NumberOfOccurrences FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY NumberOfOccurrences DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
0	SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
1	SELECT S.First_Name, A.Date_of_Answer FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT S.First_Name, A.Date_of_Answer FROM Students AS S, Student_Answers AS A WHERE S.Student_ID = A.Student_ID	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1	SELECT email, date FROM (SELECT Email_Adress AS email, Date_of_Answer AS date FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID) AS subquery ORDER BY date DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1	SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Student_Assessments GROUP BY Assessment) AS SubCounts)	SELECT assessment FROM student_assessments GROUP BY assessment HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM student_assessments GROUP BY assessment))
1	WITH AssessmentCounts AS (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) SELECT Assessment FROM AssessmentCounts WHERE Count = (SELECT MIN(Count) FROM AssessmentCounts)	WITH AssessmentFrequency AS (SELECT assessment, COUNT(*) AS freq FROM student_assessments GROUP BY assessment) SELECT assessment FROM AssessmentFrequency WHERE freq = (SELECT MIN(freq) FROM AssessmentFrequency)
1	SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1	SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery)	SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, rank() over (ORDER BY COUNT(*) DESC) as rk FROM Valid_Answers GROUP BY Valid_Answer_Text) WHERE rk = 1
0	SELECT Valid_Answer_Text FROM Valid_Answers V, Student_Assessments S WHERE V.Valid_Answer_ID = S.Valid_Answer_ID GROUP BY V.Valid_Answer_Text HAVING COUNT(S.Valid_Answer_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Student_Assessments GROUP BY Valid_Answer_ID) AS Sub)	SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, rank() over (ORDER BY COUNT(*) DESC) as rk FROM Valid_Answers GROUP BY Valid_Answer_Text) WHERE rk = 1
0	sql placeholder	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1	SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'U' OR Gender_MFU IS NULL	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1	SELECT Gender_MFU, COUNT(Student_ID) AS NumberOfStudents FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1	SELECT Gender_MFU, COUNT(Student_ID) AS NumberOfStudents FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1	SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1	SELECT Last_Name FROM Students WHERE Gender_MFU IN ('M', 'F')	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1	SELECT S.First_Name FROM Students S WHERE S.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1	SELECT S.First_Name FROM Students S WHERE S.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
0	SELECT a.Student_Answer_Text FROM Student_Answers a, Student_Answers b WHERE a.Student_Answer_ID = b.Student_Answer_ID AND a.Comments = 'Normal' AND b.Comments = 'Absent'	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal') INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT Students.Student_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students WHERE Student_ID > 0	SELECT * FROM Students
1	SELECT * FROM Students WHERE Student_ID IS NOT NULL	SELECT * FROM Students
1	SELECT COUNT(1) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT COUNT(1) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT * FROM Addresses	SELECT address_id ,  address_details FROM Addresses
1	SELECT * FROM Addresses	SELECT address_id ,  address_details FROM Addresses
1	SELECT COUNT(*) AS ProductCount FROM Products	SELECT count(*) FROM Products
1	SELECT COUNT(product_name) FROM Products	SELECT count(*) FROM Products
1	SELECT Products.product_id, Products.product_type_code, Products.product_name FROM Products	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT product_id AS ID, product_type_code AS TypeCode, product_name AS Name FROM Products	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT Products.product_price FROM Products WHERE Products.product_name = 'Monitor'	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT AVG(product_price) FROM Products WHERE product_type_code LIKE 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1	SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1	SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
1	SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
0	SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
1	SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
1	SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Clothes' AND P.product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')	SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')
1	SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')	SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')
1	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')	SELECT product_id, product_name FROM (SELECT product_id, product_name, RANK() OVER (ORDER BY product_price ASC) AS rnk FROM products WHERE product_type_code = 'Hardware') WHERE rnk = 1
1	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')	SELECT p1.product_id, p1.product_name FROM products p1 WHERE p1.product_type_code = 'Hardware' AND p1.product_price = (SELECT MIN(product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')
1	SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC	SELECT product_name FROM Products ORDER BY product_price DESC
1	SELECT Products.product_name FROM Products ORDER BY Products.product_price DESC	SELECT product_name FROM Products ORDER BY product_price DESC
0	SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT p.product_type_code, COUNT(p.product_id) FROM Products p GROUP BY p.product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, COUNT(*) AS total_products FROM Products GROUP BY product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code ORDER BY AveragePrice DESC	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code HAVING AVG(product_price) IS NOT NULL	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(count) FROM (SELECT COUNT(product_id) AS count FROM Products GROUP BY product_type_code) AS counts)	SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(product_id) AS cnt FROM products GROUP BY product_type_code))
0	SELECT product_type_code FROM Products P INNER JOIN Order_Items O ON P.product_id = O.product_id GROUP BY product_type_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code) T)	SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(product_id) AS cnt FROM products GROUP BY product_type_code))
1	SELECT COUNT(*) FROM Customers	SELECT count(*) FROM Customers
1	SELECT COUNT(*) FROM Customers	SELECT count(*) FROM Customers
1	SELECT customer_id, customer_name FROM Customers	SELECT customer_id ,  customer_name FROM Customers
1	SELECT customer_id, customer_name FROM Customers	SELECT customer_id ,  customer_name FROM Customers
1	SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT customer_address AS Address, customer_phone AS Phone, customer_email AS Email FROM Customers WHERE customer_name = 'Jeromy'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers WHERE payment_method_code <> '' GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
1	SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customers GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(count) FROM (SELECT COUNT(customer_id) AS count FROM Customers GROUP BY payment_method_code) AS counts)	SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(customer_count) FROM (SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM customers GROUP BY payment_method_code) sub)
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM Customers GROUP BY payment_method_code) AS counts)	SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM customers GROUP BY payment_method_code))
1	SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS sub))	SELECT customer_name FROM customers WHERE payment_method_code IN (SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MIN(count) FROM (SELECT COUNT(customer_id) AS count FROM customers GROUP BY payment_method_code)))
0	SELECT customer_name FROM Customers WHERE EXISTS (SELECT 1 FROM Customers GROUP BY payment_method_code HAVING Customers.payment_method_code = payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)	SELECT C.customer_name FROM customers C WHERE EXISTS (SELECT 1 FROM customers WHERE customers.payment_method_code = C.payment_method_code GROUP BY payment_method_code HAVING COUNT(*) = (SELECT COUNT(*) FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1))
1	SELECT payment_method_code, customer_number FROM Customers WHERE customer_name COLLATE NOCASE = 'Jeromy'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code, customer_number FROM Customers WHERE customer_name LIKE '%Jeromy%'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT p.product_id, p.product_type_code FROM Products AS p ORDER BY p.product_name ASC	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
0	SELECT product_id, product_type_code FROM Products ORDER BY LOWER(product_name)	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Products GROUP BY product_type_code) sub)	SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(product_id) as cnt FROM products GROUP BY product_type_code) t)
1	WITH TypeCounts AS (SELECT product_type_code, COUNT(*) AS TypeCount FROM Products GROUP BY product_type_code) SELECT product_type_code FROM TypeCounts WHERE TypeCount = (SELECT MIN(TypeCount) FROM TypeCounts)	SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(p1.product_id) AS cnt FROM products p1 GROUP BY p1.product_type_code) sub)
1	SELECT COUNT(*) AS TotalOrders FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT COUNT(*) AS TotalOrders FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO INNER JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1	SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders AS CO INNER JOIN Customers AS C ON CO.customer_id = C.customer_id WHERE C.customer_name = 'Jeromy'	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1	SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS order_count FROM Customers C	SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id, customers.customer_name
1	SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS num_orders FROM Customers C	SELECT c.customer_name, c.customer_id, (SELECT COUNT(*) FROM customer_orders WHERE customer_id = c.customer_id) AS num_orders FROM customers c
0	SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Orders CO WHERE CO.customer_id = C.customer_id GROUP BY CO.customer_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT DISTINCT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_orders.order_id) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(order_id) AS OrderCount FROM customer_orders GROUP BY customer_id) temp)
1	SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Orders CO WHERE CO.customer_id = C.customer_id GROUP BY CO.customer_id HAVING COUNT(*) = (SELECT MAX(order_count) FROM (SELECT COUNT(*) AS order_count FROM Customer_Orders GROUP BY customer_id) AS Orders))	SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c INNER JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM customer_orders GROUP BY customer_id) tmp)
1	SELECT order_status_code, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1	SELECT order_status_code, COUNT(*) FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1	WITH OrderCounts AS (SELECT order_status_code, COUNT(*) AS TotalCount FROM Customer_Orders GROUP BY order_status_code) SELECT order_status_code FROM OrderCounts WHERE TotalCount = (SELECT MAX(TotalCount) FROM OrderCounts)	SELECT order_status_code AS MostFrequentStatusCode FROM customer_orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(cnt) FROM (SELECT order_status_code, COUNT(order_status_code) as cnt FROM customer_orders GROUP BY order_status_code))
1	SELECT order_status_code FROM (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Customer_Orders GROUP BY order_status_code) ranked WHERE rank = 1	WITH RankFrequency AS (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(order_id) DESC) as rank FROM customer_orders GROUP BY order_status_code) SELECT order_status_code FROM RankFrequency WHERE rank = 1
1	SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1	SELECT COUNT(*) FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id)	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1	SELECT product_name FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL	SELECT p.product_name FROM products p WHERE p.product_id NOT IN (SELECT o.product_id FROM order_items o)
1	SELECT product_name FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Products.product_id = Order_Items.product_id)	SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
0	SELECT COUNT(*) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'	SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'
0	SELECT SUM(order_quantity) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'	SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'
0	SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor' GROUP BY CO.customer_id	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor')))	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT c.customer_id) FROM Customers c, Customer_Orders co WHERE c.customer_id = co.customer_id	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1	SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
0	SELECT C.order_id, C.order_date FROM Customer_Orders C WHERE C.order_id IN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 UNION SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
0	SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING SUM(order_quantity) > 6) OR order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
1	SELECT COUNT(Building_ID) AS BuildingCount FROM building	SELECT count(*) FROM building
1	SELECT COUNT(*) FROM (SELECT DISTINCT Building_ID FROM building) AS UniqueBuildings	SELECT count(*) FROM building
0	SELECT Name FROM building ORDER BY Number_of_Stories ASC, Name ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
1	SELECT b.Name FROM building b ORDER BY b.Number_of_Stories ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
1	SELECT Address FROM building ORDER BY Completed_Year DESC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT Address FROM building ORDER BY Completed_Year DESC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT MAX(b.Number_of_Stories) FROM building AS b WHERE b.Completed_Year != 1980	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT LIKE '1980'	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT AVG(Population) AS Average_Population FROM region	SELECT avg(Population) FROM region
1	SELECT AVG(Population) AS Average_Population FROM region	SELECT avg(Population) FROM region
1	SELECT r.Name AS RegionName FROM region r ORDER BY RegionName ASC	SELECT Name FROM region ORDER BY Name ASC
1	SELECT Name FROM region ORDER BY Name	SELECT Name FROM region ORDER BY Name ASC
1	SELECT Capital FROM region WHERE Area > 10000 AND Capital IS NOT NULL	SELECT Capital FROM region WHERE Area  >  10000
1	SELECT Capital FROM region WHERE Area > 10000 AND Capital IS NOT NULL	SELECT Capital FROM region WHERE Area  >  10000
0	SELECT Capital FROM region WHERE Population IN (SELECT MAX(Population) FROM region)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0	SELECT Capital FROM region WHERE Population IN (SELECT MAX(Population) FROM region)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0	SELECT Name FROM region WHERE Area >= (SELECT MIN(Area) FROM (SELECT Area FROM region ORDER BY Area DESC LIMIT 5) AS subquery)	SELECT Name FROM region WHERE Area IS NOT NULL AND Area >= (SELECT min(T.Area) FROM (SELECT Area FROM region WHERE Area IS NOT NULL ORDER BY Area DESC LIMIT 5) T) ORDER BY Area DESC
0	SELECT Name FROM region ORDER BY Area DESC LIMIT 5;	SELECT Name FROM region WHERE Area IS NOT NULL AND Area >= (SELECT min(T.Area) FROM (SELECT Area FROM region WHERE Area IS NOT NULL ORDER BY Area DESC LIMIT 5) T) ORDER BY Area DESC
1	SELECT building.Name AS Building, region.Name AS Region FROM building INNER JOIN region ON building.Region_ID = region.Region_ID	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT Name AS Building, (SELECT Name FROM region WHERE Region_ID = building.Region_ID) AS Region FROM building	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT region.Name FROM region INNER JOIN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1) AS SubQuery ON region.Region_ID = SubQuery.Region_ID	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
1	SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
1	WITH RankedRegions AS (SELECT Region_ID, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM building GROUP BY Region_ID) SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM RankedRegions WHERE rank = 1)	SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(building_id) AS cnt FROM building GROUP BY region_id)))
1	SELECT region.Capital FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID, region.Capital HAVING COUNT(building.Building_ID) = (SELECT MAX(BuildingCount) FROM (SELECT COUNT(building.Building_ID) AS BuildingCount FROM building GROUP BY building.Region_ID) AS SubQuery)	SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(building_id) AS cnt FROM building GROUP BY region_id)))
1	SELECT Address AS 'Building Address', Capital AS 'Region Capital' FROM building JOIN region ON building.Region_ID = region.Region_ID	SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT A.Address, N.Name FROM building A, region N WHERE A.Region_ID = N.Region_ID	SELECT building.address, region.name FROM building JOIN region ON building.region_id = region.region_id
1	SELECT b.Number_of_Stories FROM building b WHERE EXISTS (SELECT 1 FROM region r WHERE r.Region_ID = b.Region_ID AND r.Name = 'Abruzzo')	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
0	SELECT b.Name, b.Number_of_Stories FROM building AS b INNER JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1	SELECT Completed_Year, COUNT(Building_ID) AS BuildingCount FROM building GROUP BY Completed_Year ORDER BY Completed_Year	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
1	SELECT Completed_Year AS Year, COUNT(Building_ID) AS CountOfBuildings FROM building GROUP BY Completed_Year	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
1	WITH YearlyCount AS (SELECT Completed_Year, COUNT(*) AS TotalBuildings FROM building GROUP BY Completed_Year) SELECT Completed_Year FROM YearlyCount WHERE TotalBuildings = (SELECT MAX(TotalBuildings) FROM YearlyCount)	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT COUNT(*) FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1)
1	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM building GROUP BY Completed_Year) AS counts)	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT COUNT(*) FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1)
1	SELECT Name FROM region AS r WHERE NOT EXISTS (SELECT * FROM building AS b WHERE b.Region_ID = r.Region_ID)	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT * FROM building b WHERE b.Region_ID = r.Region_ID)	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20) INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT DISTINCT Completed_Year FROM building WHERE Number_of_Stories > 20 AND Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15)	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT DISTINCT b.Address FROM building b	SELECT DISTINCT Address FROM building
1	SELECT DISTINCT b.Address FROM building b	SELECT DISTINCT Address FROM building
1	SELECT b.Completed_Year FROM building b ORDER BY b.Number_of_Stories DESC	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
0	SELECT building.Name, building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1	SELECT Channel_Details FROM Channels ORDER BY 1	select channel_details from channels order by channel_details
1	SELECT Channel_Details FROM Channels ORDER BY 1	select channel_details from channels order by channel_details
1	SELECT COUNT(DISTINCT Service_ID) AS TotalUniqueServices FROM Services	SELECT count(*) FROM services
1	SELECT COUNT(DISTINCT Service_ID) AS TotalServices FROM Services	SELECT count(*) FROM services
1	SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(CountType) FROM (SELECT COUNT(*) AS CountType FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS SubQuery)	SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code HAVING COUNT(analytical_layer_type_code) = (SELECT MAX(count_type) FROM (SELECT COUNT(analytical_layer_type_code) AS count_type FROM analytical_layer GROUP BY analytical_layer_type_code))
1	SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) tmp)	WITH TypeFrequency AS (SELECT analytical_layer_type_code, COUNT(*) AS Count FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM TypeFrequency WHERE Count = (SELECT MAX(Count) FROM TypeFrequency)
0	SELECT DISTINCT service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id INNER JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customer_details = 'Hardy Kutch'	SELECT service_details FROM services WHERE EXISTS (SELECT * FROM customers INNER JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND services.service_id = customers_and_services.service_id)
0	SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))	SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3)	SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.customers_and_services_id) > 3)
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3)	SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.customers_and_services_id) > 3)
0	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(Customer_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Customer_ID) as cnt FROM Customer_Interactions GROUP BY Customer_ID) T))	SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) = (SELECT MAX(service_count) FROM (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id)))
0	SELECT Customers.* FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(Service_ID) = (SELECT MAX(Service_Count) FROM (SELECT COUNT(Service_ID) AS Service_Count FROM Customers_and_Services GROUP BY Customer_ID) AS Temp))	SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) = (SELECT MAX(service_count) FROM (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id)))
1	SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT 1 FROM Customers_and_Services CAS WHERE C.Customer_ID = CAS.Customer_ID GROUP BY CAS.Customer_ID HAVING COUNT(DISTINCT CAS.Service_ID) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT Service_ID) AS CountServices FROM Customers_and_Services GROUP BY Customer_ID) AS Sub))	SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(DISTINCT service_id) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT service_id) AS CountServices FROM customers_and_services GROUP BY customer_id)))
1	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT MAX(service_count) FROM (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS service_count FROM Customers_and_Services GROUP BY Customer_ID) AS Temp))	SELECT cu.customer_details FROM customers cu WHERE cu.customer_id IN (SELECT ca.customer_id FROM customers_and_services ca GROUP BY ca.customer_id HAVING COUNT(DISTINCT ca.service_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT service_id) cnt FROM customers_and_services GROUP BY customer_id)))
1	SELECT C.Customer_Details FROM Customers C LEFT JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
1	SELECT C.Customer_Details FROM Customers C LEFT JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
0	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT CS.Customer_ID FROM Customers_and_Services CS WHERE CS.Service_ID = (SELECT Service_ID FROM (SELECT Service_ID, COUNT(*) AS UsageCount FROM Customers_and_Services GROUP BY Service_ID) AS ServiceUsage ORDER BY ServiceUsage.UsageCount ASC LIMIT 1))	SELECT customer_details FROM customers WHERE customer_id IN (SELECT Customer_ID FROM customers_and_services WHERE service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING (COUNT(*)) = (SELECT COUNT(*) FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1)))
0	WITH LeastUsedService AS (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID AND CS.Service_ID IN (SELECT Service_ID FROM LeastUsedService)	SELECT DISTINCT c.customer_details FROM customers c INNER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id IN (SELECT s.service_id FROM services s WHERE s.service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) count FROM customers_and_services GROUP BY service_id) tmp)))
0	SELECT DISTINCT COUNT(Customers_and_Services_Details) FROM Customers_and_Services	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
0	SELECT (SELECT COUNT(DISTINCT Customer_Details) FROM Customers) + (SELECT COUNT(DISTINCT Service_Details) FROM Services) AS Total_Details	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
1	SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0	SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0	WITH HardyServices AS (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')), GoodServices AS (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good') SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM HardyServices UNION SELECT Service_ID FROM GoodServices)	SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'good')
0	SELECT Service_Details FROM Services WHERE EXISTS (SELECT 1 FROM Customers_and_Services CS JOIN Customer_Interactions CI ON CS.Service_ID = CI.Service_ID JOIN Customers C ON CI.Customer_ID = C.Customer_ID WHERE Services.Service_ID = CS.Service_ID AND (C.Customer_Details = 'Hardy Kutch' OR CI.Status_Code = 'good'))	SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'good')
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch') INTERSECT SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad')	SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') AND EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'bad')
0	SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad' GROUP BY S.Service_ID	SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') AND EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'bad')
1	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij')	SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE CI.service_id = S.service_id AND C.channel_details = '15 ij')
1	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))	SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE CI.service_id = S.service_id AND C.channel_details = '15 ij')
0	SELECT DISTINCT Customers.* FROM Customers, Customer_Interactions WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad'	SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'stuck' AND services_and_channels_details = 'bad')
1	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')	SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND services_and_channels_details = 'bad')
0	SELECT COUNT(*) FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'	SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1	SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'	SELECT count(*) FROM integration_platform WHERE integration_platform_details  LIKE  "%Success%"
0	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Status_Code = 'failed'))	SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE CI.customer_id = customers.customer_id AND IP.integration_platform_details = 'Fail')
1	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details = 'Fail'))	SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE CI.customer_id = customers.customer_id AND IP.integration_platform_details = 'Fail')
0	SELECT Services.* FROM Services WHERE NOT EXISTS (SELECT 1 FROM Customer_Interactions WHERE Customer_Interactions.Service_ID = Services.Service_ID)	SELECT service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL
1	SELECT S.Service_Details FROM Services S LEFT JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Service_ID IS NULL	SELECT service_details FROM services WHERE service_id NOT IN (SELECT service_id FROM customers_and_services)
1	SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
1	SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) > 0	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
0	SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE '%unsatisfied%'	SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'unsatisfied')
0	SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE '%unsatisfied%'	SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'unsatisfied')
1	SELECT COUNT(*) FROM Vehicles WHERE id IS NOT NULL	SELECT count(*) FROM vehicles
1	SELECT COUNT(*) FROM Vehicles WHERE id IS NOT NULL	SELECT count(*) FROM vehicles
1	SELECT V.name FROM Vehicles V ORDER BY V.Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT name FROM Vehicles ORDER BY Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT DISTINCT V.Type_of_powertrain FROM Vehicles V	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL GROUP BY Type_of_powertrain	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION ALL SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	SELECT name AS 'Vehicle Name', Type_of_powertrain AS 'Powertrain Type', Annual_fuel_cost AS 'Annual Fuel Cost' FROM Vehicles WHERE Model_year IN (2013, 2014)	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014)	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT COUNT(id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
1	SELECT COUNT(DISTINCT id), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
0	SELECT Type_of_powertrain FROM (SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain) AS subquery ORDER BY num_vehicles DESC LIMIT 1	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) = (SELECT MAX(count) FROM (SELECT COUNT(id) count FROM vehicles GROUP BY type_of_powertrain))
1	SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) = (SELECT MAX(count) FROM (SELECT COUNT(Type_of_powertrain) AS count FROM Vehicles GROUP BY Type_of_powertrain) AS counts)	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(type_of_powertrain) = (SELECT MAX(cnt) FROM (SELECT COUNT(type_of_powertrain) AS cnt FROM vehicles GROUP BY type_of_powertrain))
1	SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year IS NOT NULL	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Combined_fuel_economy_rate IS NOT NULL	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) > 1	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers	SELECT name ,  age ,  membership_credit FROM customers
1	SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers	SELECT name ,  age ,  membership_credit FROM customers
1	SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)	SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)
1	SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers LIMIT 1)	SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)
1	SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT * FROM Discount	SELECT * FROM discount
1	SELECT * FROM Discount	SELECT * FROM discount
0	SELECT DISTINCT name, SUM(total_hours) OVER (PARTITION BY Vehicles.id) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
0	SELECT name, TOTAL(total_hours) AS TotalHours FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY name	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
1	SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT C.name FROM Customers C WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.customer_id = C.id GROUP BY R.customer_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
1	SELECT C.name FROM Customers C WHERE EXISTS (SELECT 1 FROM Renting_history R WHERE R.customer_id = C.id GROUP BY R.customer_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
0	SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)	SELECT name, model_year FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(id) = (SELECT MAX(cnt) FROM (SELECT COUNT(id) AS cnt FROM renting_history GROUP BY vehicles_id)))
0	SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)	SELECT v.name, v.model_year FROM vehicles v WHERE v.id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = (SELECT MAX(ccount) FROM (SELECT COUNT(vehicles_id) AS ccount FROM renting_history GROUP BY vehicles_id)))
0	SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC)	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC)	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.name HAVING COUNT(R.id) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Renting_history GROUP BY discount_id) T)	SELECT d.name FROM discount d, renting_history rh WHERE d.id = rh.discount_id GROUP BY d.id HAVING COUNT(rh.discount_id) = (SELECT MAX(COUNTed) FROM (SELECT discount_id, COUNT(*) AS COUNTed FROM renting_history GROUP BY discount_id) count_max)
1	SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY discount_id) AS subquery))	SELECT d.name FROM discount d, renting_history rh WHERE d.id = rh.discount_id GROUP BY d.id HAVING COUNT(rh.discount_id) = (SELECT MAX(COUNTed) FROM (SELECT discount_id, COUNT(*) AS COUNTed FROM renting_history GROUP BY discount_id) count_max)
0	SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history R GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30)	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS AvgCityFuel, AVG(Highway_fuel_economy_rate) AS AvgHighwayFuel FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Fuel_Economy_Average, AVG(Highway_fuel_economy_rate) AS Highway_Fuel_Economy_Average FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans	SELECT avg(amount_of_loan) FROM Student_Loans
1	SELECT AVG(amount_of_loan) AS average_loan FROM Student_Loans	SELECT avg(amount_of_loan) FROM Student_Loans
0	SELECT bio_data, student_id FROM Students WHERE EXISTS (SELECT 1 FROM Classes WHERE Students.student_id = Classes.student_id GROUP BY Classes.student_id HAVING COUNT(*) >= 2) AND NOT EXISTS (SELECT 1 FROM Detention WHERE Students.student_id = Detention.student_id GROUP BY Detention.student_id HAVING COUNT(*) >= 2)	SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 OR (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2
1	SELECT S.bio_data, S.student_id FROM Students S WHERE (SELECT COUNT(*) FROM Classes C WHERE C.student_id = S.student_id) >= 2 OR (SELECT COUNT(*) FROM Detention D WHERE D.student_id = S.student_id) < 2	SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 OR (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2
0	SELECT DISTINCT T.* FROM Teachers T, Classes C1 WHERE T.teacher_id = C1.teacher_id AND C1.class_details LIKE '%data%' AND NOT EXISTS (SELECT 1 FROM Classes C2 WHERE C2.teacher_id = T.teacher_id AND C2.class_details LIKE 'net%')	SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE '%data%') AND teacher_id NOT IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE 'net%') GROUP BY teacher_id
1	SELECT teacher_details FROM Teachers WHERE EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM Classes WHERE teacher_id = Teachers.teacher_id AND class_details LIKE 'net%')	SELECT t.teacher_details FROM teachers t WHERE EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes c2 WHERE c2.teacher_id = t.teacher_id AND c2.class_details LIKE 'net%')
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT SL.date_of_loan, SL.amount_of_loan FROM Student_Loans SL JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) AS Sub ON SL.student_id = Sub.student_id	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
1	SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
1	SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id GROUP BY C.teacher_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT COUNT(*) AS course_count FROM Classes GROUP BY teacher_id) AS counts))	SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes GROUP BY teacher_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM classes GROUP BY teacher_id)))
0	SELECT T1.teacher_id, T1.teacher_details FROM Teachers T1 WHERE T1.teacher_id = (SELECT teacher_id FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(class_id) AS cnt FROM Classes GROUP BY teacher_id) AS subquery))	SELECT t.teacher_details, t.teacher_id FROM classes c JOIN teachers t ON c.teacher_id = t.teacher_id GROUP BY c.teacher_id HAVING COUNT(c.class_id) = (SELECT MAX(total_classes) FROM (SELECT teacher_id, COUNT(class_id) AS total_classes FROM classes GROUP BY teacher_id) sub)
0	SELECT DISTINCT d.detention_summary FROM Detention d	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0	SELECT DISTINCT d.detention_summary FROM Detention d	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
1	SELECT student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
1	SELECT student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
1	SELECT address_details, bio_data FROM Addresses INNER JOIN Students_Addresses ON Addresses.address_id = Students_Addresses.address_id INNER JOIN Students ON Students_Addresses.student_id = Students.student_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT bio_data AS StudentBio, address_details AS StudentAddress FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0	SELECT a.bio_data, b.date_of_transcript FROM Students a, Transcripts b WHERE a.student_id = b.student_id	SELECT students.bio_data AS BioData, transcripts.date_of_transcript AS IssuanceDate FROM students LEFT JOIN transcripts ON students.student_id = transcripts.student_id
0	SELECT bio_data, date_of_transcript FROM Students S CROSS JOIN Transcripts T ON S.student_id = T.student_id	SELECT students.bio_data AS BioData, transcripts.date_of_transcript AS IssuanceDate FROM students LEFT JOIN transcripts ON students.student_id = transcripts.student_id
0	SELECT behaviour_monitoring_details, COUNT(student_id) AS num_students FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery)	SELECT count(DISTINCT student_id), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)
1	SELECT behaviour_monitoring_details, COUNT(*) as count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) temp)	SELECT count(*), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)
0	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AND behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3))	SELECT T1.bio_data, T1.student_details FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)) AND T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = 3))
0	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details, COUNT(*) AS cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS T WHERE T.cnt = 3 OR T.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)))	SELECT T1.bio_data, T1.student_details FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)) AND T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = 3))
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY B.student_id HAVING COUNT(B.behaviour_monitoring_details) = (SELECT COUNT(*) FROM Behaviour_Monitoring WHERE student_id = B.student_id))	SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id, behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))	SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)))
1	SELECT S.bio_data, E.event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
1	SELECT S.bio_data, E.event_date FROM Students S, Student_Events E WHERE S.student_id = E.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
0	WITH EventCounts AS (SELECT event_type_code, COUNT(student_id) AS num_students FROM Student_Events GROUP BY event_type_code) SELECT EC.num_students, EC.event_type_code, ET.event_type_description FROM EventCounts EC JOIN Ref_Event_Types ET ON EC.event_type_code = ET.event_type_code WHERE EC.num_students = (SELECT MAX(num_students) FROM EventCounts)	SELECT COUNT(DISTINCT student_id), E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code WHERE E.event_type_code IN (SELECT event_type_code FROM student_events GROUP BY event_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1)) GROUP BY E.event_type_code, R.event_type_description
0	WITH EventCounts AS (SELECT event_type_code, COUNT(student_id) AS count FROM Student_Events GROUP BY event_type_code) SELECT E.event_type_code, E.event_type_description, EC.count FROM EventCounts EC JOIN Ref_Event_Types E ON EC.event_type_code = E.event_type_code WHERE EC.count = (SELECT MAX(count) FROM EventCounts)	SELECT COUNT(DISTINCT student_id), E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code WHERE E.event_type_code IN (SELECT event_type_code FROM student_events GROUP BY event_type_code HAVING COUNT(DISTINCT student_id) = (SELECT COUNT(DISTINCT student_id) FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1)) GROUP BY E.event_type_code, R.event_type_description
1	SELECT achievement_details, achievement_type_description FROM Achievements A LEFT JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT ach.achievement_details, ref.achievement_type_description FROM Achievements ach, Ref_Achievement_Type ref WHERE ach.achievement_type_code = ref.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements))	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT COUNT(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE NOT EXISTS (SELECT 1 FROM Achievements WHERE T2.student_id = Achievements.student_id)	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements WHERE achievement_type_code IS NOT NULL	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT datetime_detention_start AS 'Start Time', datetime_detention_end AS 'End Time' FROM Detention	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT datetime_detention_start AS 'Start Time', datetime_detention_end AS 'End Time' FROM Detention	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT S.bio_data FROM Students S WHERE S.student_details LIKE '%Suite%'	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1	SELECT S.bio_data FROM Students S WHERE S.student_details LIKE '%Suite%'	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
0	SELECT * FROM Teachers, Students, Classes WHERE Teachers.teacher_id = Classes.teacher_id AND Students.student_id = Classes.student_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT T.teacher_details, S.student_details FROM Classes C JOIN Teachers T ON C.teacher_id = T.teacher_id JOIN Students S ON C.student_id = S.student_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	WITH TeacherCourseCounts AS (SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM TeacherCourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM TeacherCourseCounts)	WITH CourseCounts AS (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts);
1	WITH CourseCounts AS (SELECT teacher_id, COUNT(class_id) AS num_courses FROM Classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts)	WITH CourseCounts AS (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts);
0	sql placeholder	SELECT c.student_id, COUNT(*) as tot_courses FROM classes c GROUP BY c.student_id HAVING tot_courses = (SELECT MAX(count_classes) FROM (SELECT COUNT(class_id) as count_classes FROM classes GROUP BY student_id))
1	SELECT student_id, COUNT(class_id) FROM Classes GROUP BY student_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(class_id) AS course_count FROM Classes GROUP BY student_id) AS subquery)	SELECT c.student_id, COUNT(*) as tot_courses FROM classes c GROUP BY c.student_id HAVING tot_courses = (SELECT MAX(count_classes) FROM (SELECT COUNT(class_id) as count_classes FROM classes GROUP BY student_id))
0	sql placeholder	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	sql placeholder	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	SELECT D.detention_type_code, R.detention_type_description FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1	WITH DetentionCounts AS (SELECT detention_type_code, COUNT(*) AS Cnt FROM detention GROUP BY detention_type_code) SELECT ref_detention_type.detention_type_code, detention_type_description FROM ref_detention_type JOIN DetentionCounts ON DetentionCounts.detention_type_code = ref_detention_type.detention_type_code WHERE DetentionCounts.Cnt = (SELECT MIN(Cnt) FROM DetentionCounts)
0	SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)	WITH RankedDetType AS (SELECT detention_type_code, RANK() OVER (ORDER BY COUNT(*) ASC) AS rk FROM detention GROUP BY detention_type_code) SELECT dt.detention_type_code, dt.detention_type_description FROM RankedDetType rdt INNER JOIN ref_detention_type dt ON dt.detention_type_code = rdt.detention_type_code WHERE rk = 1
0	SELECT bio_data, other_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)	SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))
1	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans) GROUP BY student_id)	SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))
1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan LIMIT 1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1	SELECT date_of_loan FROM Student_Loans GROUP BY date_of_loan ORDER BY date_of_loan ASC LIMIT 1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1	SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))	SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Student_Loans AS T2 WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans))
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)	SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Student_Loans AS T2 WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans))
1	SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))	SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans));
0	SELECT T.date_of_transcript FROM Transcripts T JOIN Student_Loans S ON T.student_id = S.student_id ORDER BY S.amount_of_loan DESC LIMIT 1	SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans));
0	SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1))	SELECT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id IN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))
0	SELECT T.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Transcripts TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)	SELECT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id IN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))
0	SELECT s.student_id, IFNULL(SUM(sl.amount_of_loan), 0) AS total_loan FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id	SELECT students.student_id, (SELECT SUM(sl.amount_of_loan) FROM student_loans sl WHERE sl.student_id = students.student_id) FROM students GROUP BY students.student_id
0	SELECT s.student_id, AggregateLoanAmount.total_loan FROM Students s JOIN (SELECT student_id, SUM(amount_of_loan) AS total_loan FROM Student_Loans GROUP BY student_id) AS AggregateLoanAmount ON s.student_id = AggregateLoanAmount.student_id	SELECT students.student_id, (SELECT SUM(sl.amount_of_loan) FROM student_loans sl WHERE sl.student_id = students.student_id) FROM students GROUP BY students.student_id
0	sql placeholder	SELECT student_id, bio_data, (SELECT COUNT(*) FROM classes WHERE student_id = students.student_id) AS course_count FROM students
1	SELECT s.student_id, s.bio_data, IFNULL(c.num_courses, 0) AS num_courses FROM Students s LEFT JOIN (SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id) c ON s.student_id = c.student_id	SELECT s.student_id, s.bio_data, (SELECT COUNT(*) FROM classes WHERE classes.student_id = s.student_id) AS num_courses FROM students s
1	SELECT COUNT(DISTINCT student_id) AS total_students FROM Detention	SELECT count(DISTINCT student_id) FROM Detention
1	SELECT COUNT(DISTINCT Students.student_id) FROM Students, Detention WHERE Students.student_id = Detention.student_id	SELECT count(DISTINCT student_id) FROM Detention
1	SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Students_Addresses GROUP BY address_type_code) AS Counts)) AS MostCommon ON R.address_type_code = MostCommon.address_type_code	SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM students_addresses GROUP BY address_type_code)))
1	WITH CountedTypes AS (SELECT address_type_code, COUNT(*) AS cnt FROM Students_Addresses GROUP BY address_type_code) SELECT Ref_Address_Types.address_type_code, address_type_description FROM Ref_Address_Types JOIN CountedTypes ON Ref_Address_Types.address_type_code = CountedTypes.address_type_code WHERE cnt = (SELECT MAX(cnt) FROM CountedTypes)	SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM students_addresses GROUP BY address_type_code)))
1	SELECT bio_data FROM Students AS S WHERE EXISTS (SELECT * FROM Student_Events AS SE WHERE SE.student_id = S.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans AS SL WHERE SL.student_id = S.student_id)	SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)
1	SELECT bio_data FROM Students WHERE EXISTS (SELECT student_id FROM Student_Events WHERE student_id = Students.student_id) AND NOT EXISTS (SELECT student_id FROM Student_Loans WHERE student_id = Students.student_id)	SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)
1	SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start IS NOT NULL	SELECT datetime_detention_start FROM Detention
1	SELECT datetime_detention_start AS StartDate FROM Detention	SELECT datetime_detention_start FROM Detention
1	SELECT Name FROM Author	SELECT name FROM Author
1	SELECT Name FROM Author	SELECT name FROM Author
1	SELECT Name, Address FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL	SELECT name ,  address FROM Client
1	SELECT Name, Address FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL	SELECT name ,  address FROM Client
1	SELECT `Title`, `ISBN`, `SalePrice` FROM `Book`	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT B.Title, B.ISBN, B.SalePrice FROM Book B	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT COUNT(1) FROM Book	SELECT count(*) FROM Book
1	SELECT COUNT(1) FROM Book	SELECT count(*) FROM Book
1	SELECT COUNT(DISTINCT idAuthor) AS UniqueAuthors FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(Author.idAuthor) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(IdClient) AS NumberOfClients FROM Client	SELECT count(*) FROM Client
1	SELECT COUNT(IdClient) AS NumberOfClients FROM Client	SELECT count(*) FROM Client
1	SELECT Name, Address FROM Client ORDER BY LOWER(Name) ASC	SELECT name ,  address FROM Client ORDER BY name
0	SELECT Name, Address FROM Client ORDER BY Name ASC, Address ASC	SELECT name ,  address FROM Client ORDER BY name
1	SELECT b.Title, a.Name FROM Book b, Author a, Author_Book ab WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT b.Title, a.Name FROM Book b, Author_Book ab, Author a WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
1	SELECT IdOrder, Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
1	SELECT Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = Author.idAuthor) AS BookCount FROM Author	SELECT author.name, COUNT(author_book.author) FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor
1	SELECT Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = idAuthor) AS NumberOfBooks FROM Author	SELECT author.name, COUNT(author_book.author) FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor
1	SELECT B.ISBN, COUNT(O.ISBN) AS NumberOfOrders FROM Book AS B LEFT OUTER JOIN Books_Order AS O ON B.ISBN = O.ISBN GROUP BY B.ISBN	SELECT book.isbn, COUNT(books_order.isbn) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn;
1	SELECT b.ISBN, COUNT(o.ISBN) FROM Book b LEFT JOIN Books_Order o ON b.ISBN = o.ISBN GROUP BY b.ISBN	SELECT book.isbn, COUNT(books_order.isbn) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn
0	SELECT b.ISBN, SUM(o.amount) total_amount FROM Book b, Books_Order o WHERE b.ISBN = o.ISBN GROUP BY b.ISBN	SELECT T1.isbn, sum(T2.amount) FROM Book AS T1 LEFT JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.isbn
1	SELECT B.ISBN, COALESCE(SUM(BO.amount), 0) AS TotalAmount FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN	SELECT book.isbn, IFNULL(TOTAL(books_order.amount), 0) AS totalOrders FROM book LEFT JOIN books_order ON books_order.isbn = book.isbn GROUP BY book.isbn
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order GROUP BY ISBN HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Books_Order GROUP BY ISBN) AS Sub))	SELECT b1.title FROM book b1 WHERE b1.isbn = (SELECT bo1.isbn FROM books_order bo1 GROUP BY bo1.isbn HAVING COUNT(bo1.isbn) = (SELECT MAX(cnt) FROM (SELECT COUNT(isbn) AS cnt FROM books_order GROUP BY isbn)));
0	SELECT B.Title FROM Book B WHERE B.ISBN = (SELECT BO.ISBN FROM Books_Order BO GROUP BY BO.ISBN ORDER BY SUM(BO.amount) DESC LIMIT 1)	SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn = T2.isbn GROUP BY T1.isbn)
0	SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)	SELECT t.title, t.purchaseprice FROM book t JOIN (SELECT isbn FROM books_order GROUP BY isbn HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM books_order GROUP BY isbn))) t2 ON t.isbn = t2.isbn
0	SELECT Title, PurchasePrice FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)	SELECT t.title, t.purchaseprice FROM book t JOIN (SELECT isbn FROM books_order GROUP BY isbn HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM books_order GROUP BY isbn))) t2 ON t.isbn = t2.isbn
0	SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NOT NULL	SELECT book.title FROM book WHERE EXISTS (SELECT 1 FROM books_order WHERE books_order.isbn = book.isbn);
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order)	SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT Name FROM Client WHERE EXISTS (SELECT * FROM Orders WHERE Orders.IdClient = Client.IdClient)	SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
1	SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)	SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders)
0	SELECT Name, COUNT(IdOrder) AS Orders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name	SELECT cl.name, (SELECT COUNT(*) FROM orders ords WHERE ords.idclient = cl.idclient) FROM client cl
0	SELECT Name, COUNT(IdOrder) AS Orders FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name	SELECT c1.name, COALESCE(order_count.count, 0) AS order_number FROM client c1 LEFT JOIN (SELECT idclient, COUNT(idorder) AS count FROM orders GROUP BY idclient) order_count ON c1.idclient = order_count.idclient
1	SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient HAVING COUNT(O.IdOrder) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(IdOrder) AS OrderCount FROM Orders GROUP BY IdClient) AS SubQuery)	SELECT c.name FROM client AS c INNER JOIN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(total_orders) FROM (SELECT idclient, COUNT(*) as total_orders FROM orders GROUP BY idclient) tmp)) AS max_orders ON c.idclient = max_orders.idclient
1	SELECT C.Name FROM Client C, Orders O WHERE C.IdClient = O.IdClient GROUP BY C.IdClient, C.Name HAVING COUNT(O.IdOrder) = (SELECT MAX(Total) FROM (SELECT COUNT(IdOrder) AS Total FROM Orders GROUP BY IdClient) AS SubQuery)	SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(order_count) FROM (SELECT idclient, COUNT(idorder) AS order_count FROM orders GROUP BY idclient) temp))
0	SELECT Client.Name, AggregateTotal FROM Client JOIN (SELECT IdClient, SUM(amount) AS AggregateTotal FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS OrderTotals ON Client.IdClient = OrderTotals.IdClient	SELECT T1.name, sum(T3.amount) FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.idClient = T2.idClient LEFT JOIN Books_Order AS T3 ON T2.idOrder = T3.idOrder GROUP BY T1.idClient;
0	SELECT Client.Name, TotalAmount FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS SubQuery ON Client.IdClient = SubQuery.IdClient	SELECT T1.name, sum(T3.amount) FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.idClient = T2.idClient LEFT JOIN Books_Order AS T3 ON T2.idOrder = T3.idOrder GROUP BY T1.idClient;
0	SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1)	SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient HAVING SUM(bo.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) totals)
0	sql placeholder	SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient HAVING SUM(bo.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) totals)
1	SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT O.ISBN FROM Books_Order O)	SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)
1	SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)	SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)
1	SELECT Client.Name FROM Client WHERE Client.IdClient NOT IN (SELECT DISTINCT IdClient FROM Orders)	SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
1	SELECT C.Name FROM Client C WHERE C.IdClient NOT IN (SELECT O.IdClient FROM Orders O)	SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
1	SELECT MAX(Book.SalePrice) AS MaximumSalePrice, MIN(Book.SalePrice) AS MinimumSalePrice FROM Book	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT MAX(B.SalePrice) AS HighestPrice, MIN(B.SalePrice) AS LowestPrice FROM Book B	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT AVG(PurchasePrice) AS Purchase_Price_Average, AVG(SalePrice) AS Sale_Price_Average FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT AVG(PurchasePrice) AS Purchase_Price_Avg, AVG(SalePrice) AS Sale_Price_Avg FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT MAX(Book.SalePrice - Book.PurchasePrice) FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT MAX(Book.SalePrice - Book.PurchasePrice) AS MaxPriceDifference FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT B.Title FROM Book AS B WHERE B.SalePrice > (SELECT AVG(SalePrice) FROM Book AS B2)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
1	SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
0	SELECT Title FROM Book AS B WHERE B.SalePrice = (SELECT MIN(SalePrice) FROM Book)	select title from book order by saleprice asc limit 1
0	SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book AS B)	select title from book order by saleprice asc limit 1
0	SELECT Title FROM Book B WHERE EXISTS (SELECT 1 FROM Book WHERE PurchasePrice > B.PurchasePrice) = FALSE	select title from book order by purchaseprice  desc limit 1
0	SELECT B.Title FROM Book B WHERE B.PurchasePrice = (SELECT MAX(B2.PurchasePrice) FROM Book B2)	select title from book order by purchaseprice  desc limit 1
0	SELECT AVG(SalePrice) FROM (SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell') AS Prices	SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell'))
1	SELECT AVG(SalePrice) AS AverageSalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'George Orwell'))	SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')
1	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')	SELECT saleprice FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato'))
1	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato')	SELECT b.saleprice FROM book AS b WHERE EXISTS (SELECT 1 FROM author_book AS ab JOIN author AS a ON ab.author = a.idauthor WHERE ab.isbn = b.isbn AND a.name = 'Plato')
0	SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	WITH LowestPrice AS (SELECT book.isbn FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' and book.SalePrice = (SELECT MIN(saleprice) FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')) SELECT title FROM book WHERE isbn IN (SELECT isbn FROM LowestPrice);
0	SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	WITH LowestPrice AS (SELECT book.isbn FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' and book.SalePrice = (SELECT MIN(saleprice) FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')) SELECT title FROM book WHERE isbn IN (SELECT isbn FROM LowestPrice);
1	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book);
1	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book)
1	SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))	SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
0	SELECT A.Name FROM Author A JOIN Author_Book AB ON A.idAuthor = AB.Author JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title LIKE 'Pride and Prejudice'	SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
1	SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%' AND Author_Book.ISBN = Book.ISBN)	SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))
1	SELECT Title FROM Book WHERE EXISTS (SELECT 1 FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%' AND Author_Book.ISBN = Book.ISBN)	SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))
1	SELECT COUNT(DISTINCT Books_Order.IdOrder) FROM Books_Order LEFT JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'	SELECT COUNT(DISTINCT orders.idorder) FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder WHERE book.title = 'Pride and Prejudice'
0	SELECT COUNT(Books_Order.amount) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title LIKE 'Pride and Prejudice'	SELECT COUNT(*) FROM orders WHERE idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
1	SELECT DISTINCT o1.IdOrder FROM Orders o1, Books_Order bo1, Book b1 WHERE o1.IdOrder = bo1.IdOrder AND bo1.ISBN = b1.ISBN AND b1.Title = 'Pride and Prejudice' AND EXISTS (SELECT 1 FROM Books_Order bo2 JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE bo2.IdOrder = o1.IdOrder AND b2.Title = 'The Little Prince')	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT IdOrder FROM Orders WHERE EXISTS (SELECT * FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' AND Books_Order.IdOrder = Orders.IdOrder) AND EXISTS (SELECT * FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'The Little Prince' AND Books_Order.IdOrder = Orders.IdOrder)	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
1	SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT O.IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT O.IdOrder FROM Orders O INNER JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith')	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
1	SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') AND B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith')	SELECT title FROM Book WHERE ISBN IN (SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "Peter Doe" EXCEPT SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "James Smith")
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND Title NOT IN (SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))))	SELECT title FROM Book WHERE ISBN IN (SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "Peter Doe" EXCEPT SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "James Smith")
0	SELECT c.Name FROM Client c, Orders o, Books_Order bo, Book b WHERE c.IdClient = o.IdClient AND o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice'	SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice'))
0	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')))	SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice'))
1	SELECT COUNT(Book_ID) FROM book	SELECT count(*) FROM book
1	SELECT Title FROM book ORDER BY Title COLLATE NOCASE ASC	SELECT Title FROM book ORDER BY Title ASC
1	SELECT book.Title FROM book ORDER BY book.Pages DESC	SELECT Title FROM book ORDER BY Pages DESC
1	SELECT b.Type AS BookType, b.Release AS ReleaseDate FROM book b	SELECT TYPE ,  Release FROM book
0	SELECT Title, MAX(Chapters) AS Max_Chapters, MIN(Chapters) AS Min_Chapters FROM book GROUP BY Title	SELECT max(Chapters) ,  min(Chapters) FROM book
1	SELECT Title FROM book WHERE NOT Type = 'Poet'	SELECT Title FROM book WHERE TYPE != "Poet"
1	SELECT AVG(Rating) FROM review AS r	SELECT avg(Rating) FROM review
1	SELECT b.Title, r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID	SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID
1	SELECT R.Rating FROM review R JOIN book B ON R.Book_ID = B.Book_ID WHERE B.Chapters = (SELECT MAX(Chapters) FROM book)	SELECT r.rating FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.chapters = (SELECT MAX(chapters) FROM book);
1	SELECT Rank FROM review WHERE Book_ID IN (SELECT Book_ID FROM book WHERE Pages = (SELECT MIN(Pages) FROM book))	SELECT r.rank FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.pages = (SELECT MIN(pages) FROM book);
0	SELECT b.Title FROM book b, review r WHERE b.Book_ID = r.Book_ID AND r.Rank = (SELECT MAX(Rank) FROM review)	SELECT Title FROM (SELECT Title, rank() over (ORDER BY (SELECT max(rank) FROM review WHERE review.Book_ID = book.Book_ID)) as rk FROM book) WHERE rk = 1
1	SELECT AVG(r.Readers_in_Million) FROM review r, book b WHERE r.Book_ID = b.Book_ID AND b.Type = 'Novel'	SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  "Novel"
1	SELECT b.Type, COUNT(b.Book_ID) FROM book b GROUP BY b.Type	SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE
1	SELECT Type FROM book GROUP BY Type HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM book GROUP BY Type) sub)	SELECT type FROM book GROUP BY type HAVING COUNT(type) = (SELECT MAX(count) FROM (SELECT type, COUNT(*) AS count FROM book GROUP BY type))
1	SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3	SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3
1	SELECT Title FROM book JOIN review USING(Book_ID) ORDER BY Rating ASC	SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC
0	SELECT Title, Audio FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID ORDER BY Readers_in_Million DESC	SELECT T1.Title ,  T1.audio FROM book AS T1 LEFT JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID GROUP BY T1.Book_ID ORDER BY sum(T2.Readers_in_Million) DESC
1	SELECT COUNT(*) FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL	SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
1	SELECT Type FROM book GROUP BY Type HAVING MAX(Chapters) > 75 AND MIN(Chapters) < 50	SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50
1	SELECT COUNT(DISTINCT Type) FROM book WHERE Type IS NOT NULL	SELECT count(DISTINCT TYPE) FROM book
0	SELECT Type, Title FROM book WHERE NOT EXISTS (SELECT 1 FROM review WHERE review.Book_ID = book.Book_ID)	SELECT DISTINCT book.type, book.title FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.rating IS NULL
1	SELECT COUNT(*) FROM customer WHERE Customer_ID <> ''	SELECT count(*) FROM customer
1	SELECT COUNT(*) FROM customer WHERE Customer_ID != ''	SELECT count(*) FROM customer
1	SELECT Name FROM customer ORDER BY Level_of_Membership+0 ASC	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT c.Name FROM customer AS c ORDER BY c.Level_of_Membership ASC	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT Nationality, Card_Credit FROM customer WHERE Nationality IS NOT NULL AND Card_Credit IS NOT NULL	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT Nationality, Card_Credit FROM customer WHERE Nationality IS NOT NULL AND Card_Credit IS NOT NULL	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
1	SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1 AND Card_Credit IS NOT NULL	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
0	SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1	SELECT card_credit FROM (SELECT card_credit, RANK() OVER (ORDER BY level_of_membership DESC) as rk FROM customer) WHERE rk = 1;
1	SELECT Card_Credit FROM customer WHERE Level_of_Membership IN (SELECT MAX(Level_of_Membership) FROM customer)	SELECT card_credit FROM (SELECT card_credit, RANK() OVER (ORDER BY level_of_membership DESC) as rk FROM customer) WHERE rk = 1;
1	SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
1	SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
1	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM customer GROUP BY Nationality) AS counts)	SELECT nationality FROM customer GROUP BY nationality HAVING COUNT(nationality) = (SELECT MAX(cnt) FROM (SELECT nationality, COUNT(*) as cnt FROM customer GROUP BY nationality) subquery)
1	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM customer GROUP BY Nationality) AS SubQuery)	WITH RankedNationalities AS (SELECT nationality, RANK() OVER (ORDER BY COUNT(customer_id) DESC) as rank FROM customer GROUP BY nationality) SELECT nationality FROM RankedNationalities WHERE rank = 1
1	SELECT Nationality FROM customer GROUP BY Nationality HAVING MIN(Card_Credit) < 50 AND MAX(Card_Credit) > 75	SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
1	SELECT DISTINCT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit > 50 AND c2.Card_Credit < 75	SELECT DISTINCT c1.nationality FROM customer c1 JOIN customer c2 ON c1.nationality = c2.nationality WHERE c1.card_credit > 50 AND c2.card_credit < 75
1	SELECT c.Name AS CustomerName, co.Dish_Name AS DishName FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT Name, Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1	SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1	SELECT customer.Name, Total_Quantity FROM customer LEFT JOIN (SELECT Customer_ID, SUM(Quantity) AS Total_Quantity FROM customer_order GROUP BY Customer_ID) co ON customer.Customer_ID = co.Customer_ID	SELECT c.name, SUM(quantity) AS total_orders FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id
0	SELECT customer.Name, TotalQuantity FROM customer JOIN (SELECT Customer_ID, SUM(Quantity) AS TotalQuantity FROM customer_order GROUP BY Customer_ID) co ON customer.Customer_ID = co.Customer_ID	SELECT c.name, SUM(quantity) AS total_orders FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id
0	SELECT customer.Name, customer.Customer_ID FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1	SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1
1	SELECT c.Name FROM customer c INNER JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING SUM(co.Quantity) > 1	SELECT c.name FROM customer c WHERE c.customer_id IN (SELECT co.customer_id FROM customer_order co GROUP BY co.customer_id HAVING SUM(co.quantity) > 1)
1	SELECT b.Manager FROM branch b GROUP BY b.Manager	SELECT DISTINCT Manager FROM branch
1	SELECT DISTINCT Manager FROM branch	SELECT DISTINCT Manager FROM branch
1	SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM customer_order)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT COUNT(1) AS count_of_members FROM member	SELECT count(*) FROM member
0	SELECT Name FROM member ORDER BY Age ASC, Name ASC	SELECT Name FROM member ORDER BY Age ASC
1	SELECT Name, Nationality FROM member	SELECT Name ,  Nationality FROM member
1	SELECT Name FROM member WHERE NOT (Nationality = 'England')	SELECT name FROM member WHERE nationality != 'England'
1	SELECT Name FROM member WHERE Age >= 19 AND Age <= 20	SELECT Name FROM member WHERE Age  =  19 OR Age  =  20
1	SELECT Name FROM member AS m WHERE m.Age = (SELECT MAX(Age) FROM member AS sub)	SELECT name FROM member WHERE age = (SELECT MAX(age) FROM member)
1	SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality HAVING COUNT(Member_ID) > 0	SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality
1	WITH NationalityCount AS (SELECT Nationality, COUNT(*) AS Total FROM member GROUP BY Nationality) SELECT Nationality FROM NationalityCount WHERE Total = (SELECT MAX(Total) FROM NationalityCount)	SELECT M.nationality FROM member M GROUP BY M.nationality HAVING COUNT(M.nationality) = (SELECT MAX(count) FROM (SELECT COUNT(M2.nationality) as count FROM member M2 GROUP BY M2.nationality))
1	SELECT Nationality FROM (SELECT Nationality, COUNT(Member_ID) AS total FROM member GROUP BY Nationality) AS subquery WHERE total >= 2	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2
1	SELECT Name, Club_Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID
0	SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100	SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE club_id IN (SELECT club_id FROM club WHERE overall_ranking > 100))
0	SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018	SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE year_join < 2018)
0	SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID AND c.Club_Name = 'Houston'	SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))
1	SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NULL	SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
1	SELECT Nationality FROM member GROUP BY Nationality HAVING SUM(CASE WHEN Age > 22 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Age < 19 THEN 1 ELSE 0 END) > 0	SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19
1	SELECT AVG(Age) AS AvgAge FROM member WHERE EXISTS (SELECT 1 FROM club_leader WHERE club_leader.Member_ID = member.Member_ID)	SELECT AVG(age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader)
1	SELECT Club_Name FROM club WHERE LOWER(Club_Name) LIKE '%state%'	SELECT club_name FROM club WHERE club_name LIKE '%state%'
1	SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets	SELECT Collection_Subset_Name FROM Collection_Subsets;
1	SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_Name <> ''	SELECT Collection_Subset_Name FROM Collection_Subsets;
0	SELECT * FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
0	SELECT C.Collection_Description FROM Collections C JOIN Collection_Subset_Members M ON C.Collection_ID = M.Collection_ID JOIN Collection_Subsets S ON M.Collection_Subset_ID = S.Collection_Subset_ID WHERE S.Collection_Subset_Name = 'Top collection'	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
0	SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_Name IS NOT NULL	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details IS NOT NULL	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details IS NOT NULL	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT Document_Object_ID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
1	SELECT Document_Object_ID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
1	SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'	SELECT document_object_id FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin')
1	SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin'	SELECT document_object_id FROM document_objects WHERE owner = 'Marlin'
1	SELECT d.Owner FROM Document_Objects d WHERE d.Description = 'Braeden Collection'	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
0	SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT dic.Document_Object_ID FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Description = 'Braeden Collection')	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
0	SELECT D.Owner FROM Document_Objects D WHERE D.Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')	SELECT parent.owner FROM document_objects AS parent WHERE parent.document_object_id IN (SELECT child.parent_document_object_id FROM document_objects AS child WHERE child.owner = 'Marlin')
0	SELECT D2.Owner FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Parent_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Marlin'	SELECT parent.owner FROM document_objects AS parent WHERE parent.document_object_id IN (SELECT child.parent_document_object_id FROM document_objects AS child WHERE child.owner = 'Marlin')
1	SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
0	SELECT Description FROM Document_Objects WHERE Document_Object_ID IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects)	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1	SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT d.Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT NULL FROM Document_Objects p WHERE p.Parent_Document_Object_ID = d.Document_Object_ID)	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1	SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects)	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1	SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT Collection_Name AS Name FROM Collections	SELECT Collection_Name FROM Collections;
1	SELECT Collection_Name AS Name FROM Collections	SELECT Collection_Name FROM Collections;
1	SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1	SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
0	SELECT B.Collection_Name FROM Collections A INNER JOIN Collections B ON A.Parent_Collection_ID = B.Collection_ID WHERE A.Collection_Name = 'Nice'	SELECT c1.Collection_Name FROM Collections AS c1 WHERE c1.Collection_ID IN (SELECT c2.Parent_Collection_ID FROM Collections AS c2 WHERE c2.Collection_Name = "Nice");
0	SELECT parent.Collection_Name FROM Collections parent JOIN Collections child ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'	SELECT c1.Collection_Name FROM Collections AS c1 WHERE c1.Collection_ID IN (SELECT c2.Parent_Collection_ID FROM Collections AS c2 WHERE c2.Collection_Name = "Nice");
0	SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)	SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)
0	SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)	SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)
1	SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
1	SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
0	SELECT COUNT(*) FROM Collections c1 JOIN Collections c2 ON c1.Collection_ID = c2.Parent_Collection_ID WHERE c2.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT COUNT(Child.Collection_ID) FROM Collections Child WHERE Child.Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT DISTINCT Related_Document_Object_ID FROM Document_Subset_Members INNER JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'	SELECT DISTINCT d.document_object_id FROM document_objects d JOIN document_subset_members dsm ON d.document_object_id = dsm.Document_Object_ID JOIN document_objects do ON do.document_object_id = dsm.Related_Document_Object_ID WHERE do.owner = 'Ransom';
0	SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO, Document_Subset_Members DSM WHERE DO.Document_Object_ID = DSM.Document_Object_ID AND DO.Owner = 'Ransom'	SELECT DISTINCT d.document_object_id FROM document_objects d JOIN document_subset_members dsm ON d.document_object_id = dsm.Document_Object_ID JOIN document_objects do ON do.document_object_id = dsm.Related_Document_Object_ID WHERE do.owner = 'Ransom';
1	SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = cs.Collection_Subset_ID) FROM Collection_Subsets cs	SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS number_of_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name
1	SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = CS.Collection_Subset_ID) AS Num_Collections FROM Collection_Subsets CS	SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS num_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name
1	SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Document_Objects GROUP BY Parent_Document_Object_ID) AS SubQuery)	SELECT Document_Object_ID, cnt FROM ( SELECT T2.Document_Object_ID, COUNT(*) as cnt, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ) AS subquery WHERE rk = 1
1	SELECT d1.Document_Object_ID, IFNULL(COUNT(d2.Parent_Document_Object_ID), 0) AS children_count FROM Document_Objects d1 LEFT JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID GROUP BY d1.Document_Object_ID	SELECT parent.document_object_id, COUNT(child.document_object_id) AS child_count FROM document_objects AS parent LEFT JOIN document_objects AS child ON parent.document_object_id = child.parent_document_object_id GROUP BY parent.document_object_id
0	SELECT A.Document_Object_ID, A.Related_Count FROM (SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID) A WHERE A.Related_Count = (SELECT MIN(B.Related_Count) FROM (SELECT COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID) B)	SELECT d.document_object_id, COUNT(r.related_document_object_id) AS CountRelated FROM document_objects d LEFT JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id ORDER BY CountRelated ASC LIMIT 1
0	WITH CountedDocs AS (SELECT Document_Object_ID, COUNT(*) AS NumberOfDocs FROM Documents_in_Collections GROUP BY Document_Object_ID) SELECT Document_Object_ID FROM CountedDocs WHERE NumberOfDocs = (SELECT MIN(NumberOfDocs) FROM CountedDocs)	SELECT d.document_object_id, COUNT(r.related_document_object_id) AS CountRelated FROM document_objects d LEFT JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id ORDER BY CountRelated ASC LIMIT 1
1	SELECT d.Document_Object_ID, COUNT(r.Related_Document_Object_ID) AS Total_Related FROM Document_Objects d LEFT JOIN Document_Subset_Members r ON d.Document_Object_ID = r.Document_Object_ID GROUP BY d.Document_Object_ID HAVING Total_Related BETWEEN 2 AND 4	select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;
1	SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Total_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Total_Related > 1 AND Total_Related < 5	SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;
0	SELECT DISTINCT D2.Owner FROM Document_Objects D1 INNER JOIN Document_Subset_Members DSM ON D1.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Objects D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden'	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
0	SELECT DISTINCT d.Owner FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members m WHERE m.Related_Document_Object_ID = d.Document_Object_ID AND m.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
1	SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do CROSS JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID CROSS JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
1	SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID WHERE dsm.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
1	SELECT a.Document_Subset_ID, a.Document_Subset_Name, COUNT(DISTINCT b.Document_Object_ID) AS Total_Documents FROM Document_Subsets a LEFT JOIN Document_Subset_Members b ON a.Document_Subset_ID = b.Document_Subset_ID GROUP BY a.Document_Subset_ID, a.Document_Subset_Name	SELECT doc_sub.document_subset_id, doc_sub.document_subset_name, (SELECT COUNT(DISTINCT doc_mem.document_object_id) FROM document_subset_members doc_mem WHERE doc_mem.document_subset_id = doc_sub.document_subset_id) AS doc_count FROM document_subsets doc_sub
0	SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(DISTINCT dic.Document_Object_ID) AS DocumentCount FROM Collection_Subsets cs LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID LEFT JOIN Collections c ON csm.Collection_ID = c.Collection_ID LEFT JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name	SELECT document_subsets.document_subset_id, document_subset_name, (SELECT COUNT(DISTINCT document_object_id) FROM document_subset_members WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id) FROM document_subsets
1	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING DocumentCount = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT Document_Object_ID) AS Count FROM Document_Subset_Members GROUP BY Document_Subset_ID) AS MaxCount)	SELECT document_subset_id, document_subset_name, num_docs FROM (SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) as num_docs, rank() over (ORDER BY COUNT(DISTINCT dsm.document_object_id) DESC) as rk FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id, ds.document_subset_name) WHERE rk = 1;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets AS DS JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1	SELECT a.document_subset_id, a.document_subset_name, COUNT(DISTINCT b.document_object_id) AS document_count FROM document_subsets a INNER JOIN document_subset_members b ON a.document_subset_id = b.document_subset_id GROUP BY a.document_subset_id HAVING document_count = (SELECT MAX(c.countdoc) FROM (SELECT COUNT(DISTINCT document_object_id) AS countdoc FROM document_subset_members GROUP BY document_subset_id) c)
1	SELECT DISTINCT DSM.Document_Object_ID FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0	SELECT document_object_id FROM Document_Subset_Members INNER JOIN Document_Subsets ON Document_Subset_Members.document_subset_id = Document_Subsets.document_subset_id WHERE Document_Subsets.document_subset_name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
1	SELECT dsub.Document_Subset_Name, dsmem.Document_Object_ID FROM Document_Subsets AS dsub JOIN Document_Subset_Members AS dsmem ON dsub.Document_Subset_ID = dsmem.Document_Subset_ID	SELECT DS.document_subset_name, DSM.document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id
1	SELECT DS.Document_Subset_Name AS Subset_Name, DO.Document_Object_ID AS Document_ID FROM Document_Subsets AS DS JOIN Document_Subset_Members AS DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID JOIN Document_Objects AS DO ON DSM.Document_Object_ID = DO.Document_Object_ID	SELECT ds.document_subset_name, dsm.document_object_id FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id
1	SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))	SELECT c.collection_name FROM collections c WHERE c.collection_id IN ( SELECT dc.collection_id FROM documents_in_collections dc JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom' )
1	SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))	SELECT c.collection_name FROM collections c WHERE c.collection_id IN ( SELECT dc.collection_id FROM documents_in_collections dc JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom' )
0	SELECT COUNT(DISTINCT Collection_ID) AS Collection_Count, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID	SELECT d.document_object_id, COUNT(c.collection_id) AS total_collections FROM document_objects d LEFT JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id LEFT JOIN collections c ON dc.collection_id = c.collection_id GROUP BY d.document_object_id
0	SELECT d.Document_Object_ID, COUNT(*) FROM Documents_in_Collections d GROUP BY d.Document_Object_ID	SELECT d.document_object_id, COUNT(c.collection_id) AS total_collections FROM document_objects d LEFT JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id LEFT JOIN collections c ON dc.collection_id = c.collection_id GROUP BY d.document_object_id
1	SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best'	SELECT COUNT(DISTINCT doc.document_object_id) FROM collections col INNER JOIN documents_in_collections doc_col ON col.collection_id = doc_col.collection_id INNER JOIN document_objects doc ON doc_col.document_object_id = doc.document_object_id WHERE col.collection_name = 'Best'
1	SELECT COUNT(DISTINCT Documents_in_Collections.Document_Object_ID) AS NumberOfDocuments FROM Documents_in_Collections INNER JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'	SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections dic JOIN collections c ON dic.collection_id = c.collection_id JOIN document_objects doc ON dic.document_object_id = doc.document_object_id WHERE c.collection_name = 'Best'
1	SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'	SELECT DISTINCT document_objects.document_object_id FROM document_objects, documents_in_collections, collections WHERE document_objects.document_object_id = documents_in_collections.document_object_id AND documents_in_collections.collection_id = collections.collection_id AND collections.collection_name = 'Best'
1	SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'	SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections AS doc JOIN collections AS col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best'
0	SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS NumberOfDocuments FROM Collections AS C LEFT JOIN Documents_in_Collections AS D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID, C.Collection_Name HAVING COUNT(D.Document_Object_ID) = (SELECT MAX(Counted) FROM (SELECT COUNT(Document_Object_ID) AS Counted FROM Documents_in_Collections GROUP BY Collection_ID) AS SubQuery)	SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total_docs FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING total_docs = (SELECT MAX(doc_counts) FROM (SELECT COUNT(document_object_id) AS doc_counts FROM documents_in_collections GROUP BY collection_id))
0	SELECT C.Collection_ID, C.Collection_Name, COUNT(D.Document_Object_ID) AS Document_Count FROM Collections AS C INNER JOIN Documents_in_Collections AS D ON C.Collection_ID = D.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name ORDER BY Document_Count DESC LIMIT 1	SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total_docs FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING total_docs = (SELECT MAX(doc_counts) FROM (SELECT COUNT(document_object_id) AS doc_counts FROM documents_in_collections GROUP BY collection_id))
1	SELECT D.Document_Object_ID FROM Document_Objects D WHERE EXISTS (SELECT 1 FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DSM.Document_Object_ID = D.Document_Object_ID AND DS.Document_Subset_Name = 'Best for 2000') AND EXISTS (SELECT 1 FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE DIC.Document_Object_ID = D.Document_Object_ID AND C.Collection_Name = 'Best')	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
1	SELECT DISTINCT a.Document_Object_ID FROM (SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') a JOIN (SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best') b ON a.Document_Object_ID = b.Document_Object_ID	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
1	SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000')	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
1	SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND dm.Document_Object_ID = d.Document_Object_ID)	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
0	SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members dsm LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections dic LEFT JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	SELECT c2.Collection_Name FROM Collections AS c1 JOIN Collection_Subset_Members AS csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections AS c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'	SELECT T1.collection_name FROM collections AS T1 WHERE T1.collection_id IN (SELECT T2.collection_id FROM collection_subset_members AS T2 JOIN collections AS T3 ON T2.Related_Collection_ID = T3.collection_id WHERE T3.collection_name = 'Best')
0	SELECT c2.Collection_Name FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'	SELECT T1.collection_name FROM collections AS T1 WHERE T1.collection_id IN (SELECT T2.collection_id FROM collection_subset_members AS T2 JOIN collections AS T3 ON T2.Related_Collection_ID = T3.collection_id WHERE T3.collection_name = 'Best')
1	SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY Collection_ID	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
1	SELECT CS.Collection_Subset_Name FROM Collection_Subsets CS WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members CSM JOIN Collections C ON CSM.Collection_ID = C.Collection_ID WHERE CSM.Collection_Subset_ID = CS.Collection_Subset_ID AND C.Collection_Name = 'Best')	SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members AS csm WHERE csm.collection_id IN (SELECT c.collection_id FROM collections AS c WHERE c.collection_name = 'Best'))
1	SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE csm.Collection_Subset_ID = cs.Collection_Subset_ID AND c.Collection_Name = 'Best')	SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members AS csm WHERE csm.collection_id IN (SELECT c.collection_id FROM collections AS c WHERE c.collection_name = 'Best'))
1	SELECT COUNT(*) AS count FROM songs WHERE name LIKE '%Love%'	SELECT count(*) FROM songs WHERE name LIKE "%Love%"
1	SELECT name FROM songs ORDER BY name ASC	SELECT name FROM songs ORDER BY name
1	SELECT s.name, s.language FROM songs s	select name , language from songs
1	SELECT MAX(voice_sound_quality) AS MaxQuality, MIN(voice_sound_quality) AS MinQuality FROM performance_score	SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
1	SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name = 'Freeway'	SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
1	SELECT id, language, original_artist FROM songs WHERE name <> 'Love' AND name IS NOT NULL	SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'
1	SELECT songs.name, songs.original_artist FROM songs WHERE songs.english_translation LIKE 'All the streets of love'	SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'
1	SELECT DISTINCT stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id AND songs.language = 'English'	SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'
1	SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(DISTINCT songs_id) >= 2)	SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2
0	SELECT p.id, p.name, p.popularity, (SELECT COUNT(*) FROM performance_score WHERE participant_id = p.id) AS songs_count FROM participants p ORDER BY songs_count DESC	SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)
1	SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)	SELECT DISTINCT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)
0	SELECT voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'	SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'
1	SELECT S.id, S.name FROM songs S JOIN (SELECT songs_id, COUNT(participant_id) AS total_participants FROM performance_score GROUP BY songs_id) AS P ON S.id = P.songs_id WHERE total_participants = (SELECT MAX(total_participants) FROM (SELECT COUNT(participant_id) AS total_participants FROM performance_score GROUP BY songs_id) AS subquery)	SELECT s.id, s.name FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(DISTINCT ps.participant_id) = (SELECT MAX(participant_count) FROM (SELECT COUNT(DISTINCT ps.participant_id) AS participant_count FROM performance_score ps GROUP BY ps.songs_id) t)
1	SELECT COUNT(*) FROM performance_score WHERE stage_presence NOT BETWEEN 7 AND 9	SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9
1	SELECT COUNT(*) FROM songs s WHERE NOT EXISTS (SELECT 1 FROM performance_score p WHERE p.songs_id = s.id)	SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );
0	SELECT language, AVG(rhythm_tempo) FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language	SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language
1	SELECT DISTINCT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON songs.id = performance_score.songs_id AND songs.language = 'English'	SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
1	SELECT P.name, P.popularity FROM participants P WHERE P.id IN (SELECT PS.participant_id FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'Croatian') AND P.id IN (SELECT PS.participant_id FROM performance_score PS JOIN songs S ON PS.songs_id = S.id WHERE S.language = 'English')	SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) AND EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'English' AND ps.participant_id = p.id)
0	SELECT name FROM songs WHERE INSTR(name, 'Is') > 0	SELECT name FROM songs WHERE name LIKE "%Is%"
0	SELECT s.original_artist FROM songs s, performance_score p WHERE s.id = p.songs_id AND p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC	select original_artist from songs AS T1 join (select songs_id, max(voice_sound_quality) as voice_sound_quality from performance_score where rhythm_tempo > 5 group by songs_id) AS T2 where T1.id = T2.songs_id ORDER BY T2.voice_sound_quality
1	SELECT COUNT(*) AS NumberOfCities FROM City	SELECT count(*) FROM City
1	SELECT COUNT(*) AS CityCount FROM City	SELECT count(*) FROM City
1	SELECT DISTINCT state FROM City	select distinct state from city
1	SELECT DISTINCT state FROM City	SELECT DISTINCT state FROM City
1	SELECT COUNT(*) FROM (SELECT country FROM City GROUP BY country) AS distinct_countries	SELECT count(DISTINCT country) FROM City
1	SELECT COUNT(country) FROM (SELECT DISTINCT country FROM City) AS distinct_countries	SELECT count(DISTINCT country) FROM City
1	SELECT C.city_name, C.city_code, C.state, C.country FROM City C	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT DISTINCT city_name, city_code, state, country FROM City	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT city_name AS CityName FROM City WHERE state = 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT city_name AS CityName FROM City WHERE state = 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT COUNT(city_name) FROM City WHERE country LIKE 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
1	SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
1	SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT state, COUNT(city_name) FROM City GROUP BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT state, COUNT(city_code) FROM City GROUP BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country	select country ,  count(*) from city group by country
1	SELECT country, COUNT(city_name) AS num_cities FROM City GROUP BY country	SELECT country ,  count(*) FROM City GROUP BY country
1	SELECT DISTINCT state FROM City GROUP BY state HAVING COUNT(city_name) > 1	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
1	SELECT DISTINCT state FROM City WHERE (SELECT COUNT(city_name) FROM City AS C WHERE C.state = City.state) >= 2	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
1	SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state) AS counts)	SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM city GROUP BY state))
1	WITH StateCounts AS (SELECT state, COUNT(*) AS city_count FROM City GROUP BY state) SELECT state FROM StateCounts WHERE city_count = (SELECT MAX(city_count) FROM StateCounts)	SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM city GROUP BY state))
1	SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY country) AS subquery)	SELECT country FROM city GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(total) FROM (SELECT COUNT(city_code) AS total FROM city GROUP BY country))
1	SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT country, COUNT(city_name) AS city_count FROM City GROUP BY country) AS sub)	WITH CityCount AS (SELECT country, COUNT(*) AS count FROM city GROUP BY country) SELECT country FROM CityCount WHERE count = (SELECT MIN(count) FROM CityCount)
1	SELECT Fname, LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0	SELECT Student.Fname || ' ' || Student.LName AS FullName FROM Student LEFT JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0	SELECT COUNT(DISTINCT Student.StuID) FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
0	SELECT COUNT(1) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
1	SELECT Fname AS FirstName, Major AS MajorField FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1	SELECT Fname AS FirstName, Major AS FieldOfStudy FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
0	SELECT country AS CountryName, COUNT(Student.StuID) AS TotalStudents FROM Student, City WHERE Student.city_code = City.city_code GROUP BY CountryName	SELECT T1.country ,  count(*) FROM City AS T1 LEFT JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0	SELECT country, COUNT(DISTINCT Student.StuID) FROM Student LEFT JOIN City ON Student.city_code = City.city_code GROUP BY country	SELECT T1.country ,  count(*) FROM City AS T1 LEFT JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0	SELECT City.city_name, COUNT(*) FROM City, Student WHERE City.city_code = Student.city_code GROUP BY City.city_name	SELECT CITY.CITY_NAME, (SELECT COUNT(STUID) FROM STUDENT WHERE CITY_CODE = CITY.CITY_CODE) AS STUDENT_COUNT FROM CITY
0	SELECT c.city_name, COUNT(s.StuID) AS total_students FROM City AS c LEFT JOIN Student AS s ON c.city_code = s.city_code GROUP BY c.city_name	SELECT CITY.CITY_NAME, (SELECT COUNT(STUID) FROM STUDENT WHERE CITY_CODE = CITY.CITY_CODE) AS STUDENT_COUNT FROM CITY
0	WITH StudentCounts AS (SELECT state, COUNT(*) AS total FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) SELECT state FROM StudentCounts ORDER BY total DESC LIMIT 1	SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.city_code) = (SELECT MAX(c) FROM (SELECT COUNT(student.city_code) AS c FROM city JOIN student ON city.city_code = student.city_code GROUP BY state))
1	SELECT state FROM City, Student WHERE City.city_code = Student.city_code GROUP BY state HAVING COUNT(*) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS counts)	SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.city_code) = (SELECT MAX(c) FROM (SELECT COUNT(student.city_code) AS c FROM city JOIN student ON city.city_code = student.city_code GROUP BY state))
0	SELECT country FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country HAVING COUNT(Student.StuID) = (SELECT MIN(count) FROM (SELECT COUNT(Student.StuID) as count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS counts)	WITH StudentCount AS (SELECT country, COUNT(student.stuid) AS s_count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM StudentCount WHERE s_count = (SELECT min(s_count) FROM StudentCount)
0	SELECT country FROM City, Student WHERE City.city_code = Student.city_code GROUP BY country HAVING COUNT(Student.StuID) = (SELECT MIN(count) FROM (SELECT COUNT(Student.StuID) AS count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country) AS counts)	WITH StudentCount AS (SELECT country, COUNT(student.stuid) AS s_count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM StudentCount WHERE s_count = (SELECT min(s_count) FROM StudentCount)
1	SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT C.state FROM City AS C, Student AS S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(*) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(*) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country NOT IN ('USA')	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country NOT IN ('USA')	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT Student.StuID FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE Student.Sex = 'F' AND City.state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
0	SELECT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'female' AND c.state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
0	SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'Male' AND c.country NOT IN ('USA')	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
0	SELECT DISTINCT StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'male' AND c.country <> 'USA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
0	SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') UNION SELECT distance FROM Direct_distance WHERE (city1_code = 'CHI' AND city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
0	SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') OR (d.city1_code = 'CHI' AND d.city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
0	SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
0	SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark'))	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
1	SELECT AVG(distance) AS average_distance, MIN(distance) AS minimum_distance, MAX(distance) AS maximum_distance FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1	SELECT AVG(distance) as Average, MIN(distance) as Minimum, MAX(distance) as Maximum FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)	SELECT city1_code, city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance)
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance)	SELECT city1_code, city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance)
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(D.distance) FROM Direct_distance D)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
0	SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance <= 999	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT DISTINCT C.city_code FROM City C, Direct_distance D WHERE (C.city_code = D.city1_code OR C.city_code = D.city2_code) AND D.distance < 1000	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT SUM(D.distance) FROM Direct_distance D WHERE D.city1_code = 'BAL' OR D.city2_code = 'BAL'	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0	SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
1	SELECT AVG(D.distance) FROM Direct_distance D INNER JOIN City C ON D.city1_code = C.city_code AND C.city_name = 'Boston'	SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0	SELECT AVG(D.distance) FROM Direct_distance D, City C WHERE (D.city1_code = C.city_code AND C.city_name = 'Boston') OR (D.city2_code = C.city_code AND C.city_name = 'Boston')	SELECT AVG(distance) FROM direct_distance JOIN city ON city.city_code = direct_distance.city2_code WHERE city.city_name = 'Boston'
0	SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago')))	SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Chicago' ) AS subquery WHERE rk = 1
0	SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance JOIN City ON City.city_code = Direct_distance.city1_code WHERE city_name = 'Chicago' ORDER BY distance LIMIT 1)	SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Chicago' ) AS subquery WHERE rk = 1
0	SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)	SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance DESC) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Boston' ) AS subquery WHERE rk = 1
0	SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)	SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance DESC) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Boston' ) AS subquery WHERE rk = 1
1	SELECT city_code, SUM(distance) AS total_distance FROM City, Direct_distance WHERE City.city_code = Direct_distance.city1_code GROUP BY city_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0	SELECT city_code, SUM(distance) FROM (SELECT city1_code AS city_code, distance FROM Direct_distance UNION SELECT city2_code AS city_code, distance FROM Direct_distance) AS distances GROUP BY city_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0	SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name	SELECT city_name, (SELECT AVG(distance) FROM direct_distance WHERE city_code = city1_code) AS average_distance FROM city
0	SELECT city_name, AVG(distance) AS average_distance FROM (SELECT city_name, distance FROM City JOIN Direct_distance ON city_code = city1_code UNION ALL SELECT city_name, distance FROM City JOIN Direct_distance ON city_code = city2_code) AS subquery GROUP BY city_name	SELECT city_name, (SELECT AVG(distance) FROM direct_distance WHERE city_code = city1_code) AS average_distance FROM city
1	SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
1	SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
0	SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))	SELECT fn.fname, fn.lname FROM student fn, direct_distance dd, (SELECT st.city_code FROM student st WHERE st.fname = 'Linda' AND st.lname = 'Smith') linda WHERE fn.city_code = dd.city2_code AND dd.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = linda.city_code)
0	SELECT Fname, LName FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance D INNER JOIN (SELECT MAX(distance) AS MaxDistance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')) AS MaxD ON D.distance = MaxD.MaxDistance)	SELECT fn.fname, fn.lname FROM student fn, direct_distance dd, (SELECT st.city_code FROM student st WHERE st.fname = 'Linda' AND st.lname = 'Smith') linda WHERE fn.city_code = dd.city2_code AND dd.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = linda.city_code)
0	SELECT DISTINCT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'	SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')
0	SELECT DISTINCT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'	SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')
1	SELECT Sailors.sid, Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT Sailors.* FROM Sailors WHERE Sailors.age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30	SELECT name ,  age FROM Sailors WHERE age  <  30
1	SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30	SELECT name ,  age FROM Sailors WHERE age  <  30
0	SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid = 1)	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
1	SELECT DISTINCT(bid) FROM Reserves WHERE sid = 1	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
1	SELECT S.name FROM Sailors S WHERE EXISTS (SELECT NULL FROM Reserves R WHERE R.sid = S.sid AND R.bid = 102)	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)
1	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 102)	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)
1	SELECT DISTINCT Boats.bid FROM Boats WHERE Boats.bid IN (SELECT Reserves.bid FROM Reserves)	SELECT DISTINCT bid FROM Reserves
1	SELECT bid FROM Boats WHERE bid IN (SELECT DISTINCT bid FROM Reserves)	SELECT DISTINCT bid FROM Reserves
1	SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'	SELECT name FROM Sailors WHERE name LIKE '%e%'
1	SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'	SELECT name FROM Sailors WHERE name LIKE '%e%'
0	SELECT sid FROM Sailors WHERE age = (SELECT age FROM Sailors ORDER BY age DESC LIMIT 1)	SELECT S.sid FROM sailors S WHERE S.age > (SELECT MAX(S2.age) FROM sailors S2 WHERE S2.sid != S.sid)
1	SELECT S.sid FROM Sailors S WHERE S.age > (SELECT MIN(age) FROM Sailors)	SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
1	SELECT DISTINCT S.name FROM Sailors S WHERE S.age > (SELECT MAX(S2.age) FROM Sailors S2 WHERE S2.rating > 7 AND S2.sid != S.sid)	SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age  >  (SELECT max(s2.age) FROM Sailors s2 WHERE s2.sid != s1.sid AND s2.rating  >  7);
0	SELECT DISTINCT name FROM Sailors AS S1 WHERE S1.age > (SELECT AVG(age) FROM Sailors AS S2 WHERE S2.rating > 7)	SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1	SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT DISTINCT S.sid, S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT s.sid, s.name FROM Sailors s, Reserves r WHERE s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1	SELECT S.sid, S.name FROM sailors S INNER JOIN reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1
0	SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves R GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) >= 2)	SELECT DISTINCT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2
1	SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT s.sid FROM Sailors s WHERE EXISTS (SELECT 1 FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color IN ('red', 'blue'))	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT name, sid FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue'))	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue'))	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red') INTERSECT SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1	SELECT sid FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' AND r.sid = s.sid) AND EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color = 'blue' AND r.sid = s.sid)	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1	WITH RedBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'red'), BlueBoats AS (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE color = 'blue') SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT sid FROM RedBoats) AND S.sid IN (SELECT sid FROM BlueBoats)	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
0	SELECT S.sid, S.name FROM Sailors S WHERE S.sid IN (SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' UNION SELECT R.sid FROM Reserves R JOIN Boats B ON R.bid = B.bid WHERE B.color = 'blue')	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1	SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT S.name, S.sid FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Reserves R WHERE R.sid = S.sid)	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT Sailors.name, Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 103)	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)
1	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 103)	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)
0	SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')	SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 WHERE S2.name = 'Luis' AND S2.rating >= S.rating)
0	SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM Sailors S2 WHERE S2.name = 'Luis') AND S.name <> 'Luis'	SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 WHERE S2.name = 'Luis' AND S2.rating >= S.rating)
0	SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' GROUP BY name)	SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors l WHERE l.name = 'Luis' AND l.rating >= s.rating)
0	SELECT Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT MAX(Sailors.rating) FROM Sailors WHERE Sailors.name = 'Luis')	SELECT name FROM sailors s1 WHERE NOT EXISTS (SELECT s2.sid FROM sailors s2 WHERE s2.name = 'Luis' AND s1.rating <= s2.rating)
1	SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) AND rating > 2	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT s.sid, s.name FROM Sailors s WHERE s.rating >= 3 AND EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid)	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT name, age FROM Sailors AS S WHERE S.age = (SELECT MAX(age) FROM Sailors AS S2)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT name, age FROM Sailors AS S WHERE S.age = (SELECT MAX(age) FROM Sailors AS S2)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT COUNT(DISTINCT sid) FROM Sailors	SELECT COUNT(*) FROM Sailors
1	SELECT COUNT(DISTINCT Sailors.sid) FROM Sailors	SELECT COUNT(*) FROM Sailors
1	SELECT AVG(age) FROM Sailors WHERE rating = '7'	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT AVG(age) AS Average_Age FROM Sailors WHERE rating = 7	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT COUNT(DISTINCT sid) FROM Sailors WHERE name LIKE 'D%'	select count(*) from sailors where name like 'd%'
1	SELECT COUNT(DISTINCT sid) FROM Sailors WHERE name LIKE 'D%'	select count(*) from sailors where name like 'd%'
1	SELECT AVG(rating) average_rating, MAX(age) max_age FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
1	SELECT AVG(rating), MAX(age) FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
0	SELECT name, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT OUTER JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid
0	SELECT B.name AS BoatName, COUNT(R.bid) AS NumberOfReservations FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.name, B.bid	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid
0	SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid  >  50 GROUP BY boats.bid
0	SELECT bid, COUNT(sid) FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE bid > 50) GROUP BY bid	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid  >  50 GROUP BY boats.bid
0	SELECT name, COUNT(Reserves.bid) AS num_reservations FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid HAVING COUNT(Reserves.bid) > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
1	SELECT bid, COUNT(bid) AS TotalReservations FROM Reserves GROUP BY bid HAVING TotalReservations > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
0	SELECT B.bid, COUNT(*) AS reservation_count FROM Boats B LEFT JOIN (Reserves R INNER JOIN Sailors S ON R.sid = S.sid AND S.sid > 1) ON B.bid = R.bid GROUP BY B.bid	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid  >  1 GROUP BY boats.bid
0	SELECT B.name, COUNT(R.bid) FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid LEFT JOIN Sailors S ON R.sid = S.sid WHERE S.sid > 1 GROUP BY B.name	SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid  >  1 GROUP BY boats.bid
0	SELECT Sailors.rating, AVG(Sailors.age) AS Average_Age FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid INNER JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating	SELECT rating, AVG(age) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY rating
0	SELECT Sailors.rating, AVG(Sailors.age) AS AvgAge FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating	SELECT RATING, AVG(AGE) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY RATING
1	SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age ASC	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY Sailors.rating ASC, Sailors.age ASC	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT COUNT(*) FROM Boats AS total_number_of_boats	SELECT count(*) FROM Boats
1	SELECT COUNT(1) FROM Boats	SELECT count(*) FROM Boats
1	SELECT COUNT(*) AS NumberOfRedBoats FROM Boats WHERE color = 'red'	SELECT count(*) FROM Boats WHERE color  =  'red'
1	SELECT COUNT(bid) AS red_boat_count FROM Boats WHERE color = 'red'	SELECT count(*) FROM Boats WHERE color  =  'red'
1	SELECT B.name FROM Boats B WHERE B.bid IN (SELECT R.bid FROM Reserves R INNER JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30)	SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age >= 20 AND s.age <= 30)
0	SELECT B.name FROM Boats B JOIN (SELECT R.bid FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE S.age BETWEEN 20 AND 30) AS Filtered ON B.bid = Filtered.bid	SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age >= 20 AND s.age <= 30)
0	SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red')	SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 JOIN reserves R ON S2.sid = R.sid JOIN boats B ON B.bid = R.bid WHERE B.color = 'red' AND S2.rating >= S.rating)
1	SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)	SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors s2 JOIN reserves r ON s2.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' AND s2.rating >= s.rating)
1	SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1	SELECT max(rating) FROM Sailors
1	SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1	SELECT max(rating) FROM Sailors
1	SELECT name FROM Sailors WHERE sid IN (SELECT Reserves.sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE name = 'Melon'))
1	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Reserves.sid = Sailors.sid AND Boats.name = 'Melon')	SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves, boats WHERE reserves.bid = boats.bid AND boats.name = 'Melon')
1	SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
1	SELECT Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
1	SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)	SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone)
1	SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)	SELECT h1.model FROM headphone AS h1 WHERE NOT EXISTS (SELECT 1 FROM headphone AS h2 WHERE h2.price > h1.price)
0	SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE	SELECT DISTINCT model FROM headphone ORDER BY model
1	SELECT Model FROM headphone WHERE Model IS NOT NULL GROUP BY Model ORDER BY Model ASC	SELECT DISTINCT model FROM headphone ORDER BY model
1	SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM headphone GROUP BY Class) tmp)	SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.class) = (SELECT MAX(freq) FROM (SELECT COUNT(*) freq FROM headphone GROUP BY class) sub)
0	SELECT Class FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class ORDER BY SUM(Quantity) DESC LIMIT 1	SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) = (SELECT MAX(count) FROM (SELECT class, COUNT(headphone_id) AS count FROM headphone GROUP BY class))
0	SELECT Class FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING COUNT(*) > 2)	SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
0	SELECT Class FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.Headphone_ID = h.Headphone_ID GROUP BY s.Headphone_ID HAVING SUM(s.Quantity) > 2)	SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(DISTINCT h.headphone_id) <= 2
1	SELECT h.Class, COUNT(h.Headphone_ID) FROM headphone h WHERE h.Price > 200 GROUP BY h.Class	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT Class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE Price > 200 GROUP BY Class	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone WHERE Earpads != '') AS non_empty_earpads	SELECT count(DISTINCT earpads) FROM headphone
1	SELECT COUNT(*) FROM (SELECT Earpads FROM headphone GROUP BY Earpads)	SELECT count(DISTINCT earpads) FROM headphone
0	SELECT H.Earpads FROM headphone H JOIN stock S ON H.Headphone_ID = S.Headphone_ID GROUP BY H.Earpads ORDER BY SUM(S.Quantity) DESC LIMIT 2	SELECT earpads FROM ( SELECT earpads, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM headphone GROUP BY earpads ) AS subquery WHERE rk <= 2
0	SELECT Earpads, COUNT(Headphone_ID) AS Total_Headphones FROM headphone GROUP BY Earpads ORDER BY Total_Headphones DESC LIMIT 2	SELECT earpads FROM ( SELECT earpads, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM headphone GROUP BY earpads ) AS subquery WHERE rk <= 2
1	SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)	SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)
1	SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)	SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)
1	SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
0	SELECT Construction, ROUND(AVG(Price), 2) AS Avg_Price FROM headphone GROUP BY Construction	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1	SELECT Class FROM (SELECT Class, COUNT(DISTINCT Earpads) AS EarpadTypes FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class) AS SubQuery WHERE EarpadTypes = 2	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
1	SELECT Class FROM (SELECT Class, COUNT(DISTINCT Earpads) AS EarpadTypes FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class) AS SubQuery WHERE EarpadTypes = 2	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
0	SELECT DISTINCT Earpads FROM headphone WHERE NOT Construction = 'plastic'	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
0	SELECT Earpads FROM headphone WHERE Construction NOT LIKE '%plastic%'	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
1	SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1	SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1	SELECT store.Name FROM store ORDER BY store.Date_Opened ASC	SELECT name FROM store ORDER BY date_opened
1	SELECT store.Name FROM store ORDER BY store.Date_Opened ASC	SELECT name FROM store ORDER BY date_opened
1	SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT COUNT(DISTINCT Neighborhood) FROM store	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT COUNT(DISTINCT Neighborhood) FROM store	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT COUNT(Store_ID), Neighborhood FROM store GROUP BY Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1	SELECT COUNT(Store_ID) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1	SELECT S.Name, SUM(ST.Quantity) AS Total_Headphones FROM store S LEFT JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID HAVING SUM(ST.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Store_ID) Temp)	SELECT name, sum FROM ( SELECT t1.name, SUM(t2.quantity) as sum, RANK() OVER (ORDER BY SUM(t2.quantity) DESC) as rk FROM store AS t1 JOIN stock AS t2 ON t1.store_id = t2.store_id GROUP BY t2.store_id ) AS subquery WHERE rk = 1
0	SELECT store.Name, AggregateQuantity FROM store JOIN (SELECT Store_ID, SUM(Quantity) AS AggregateQuantity FROM stock GROUP BY Store_ID) AS StockInfo ON store.Store_ID = StockInfo.Store_ID	SELECT s.name, (SELECT SUM(st.quantity) FROM stock st WHERE st.store_id = s.store_id GROUP BY st.store_id) AS Quantity FROM store s
1	SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock st WHERE st.Quantity > 0)	SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)
1	SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)	SELECT name FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)
0	SELECT Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.Headphone_ID = headphone.Headphone_ID AND stock.Quantity > 0)	SELECT DISTINCT h.model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.headphone_id = h.headphone_id AND quantity > 0)
0	SELECT h.Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)	SELECT DISTINCT h.model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.headphone_id = h.headphone_id AND quantity > 0)
0	SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)	SELECT model FROM (SELECT t1.model, rank() over (ORDER BY sum(t2.quantity) DESC ) as rk FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id = t2.headphone_id GROUP BY t1.model) WHERE rk = 1;
1	SELECT Model FROM headphone H WHERE EXISTS (SELECT 1 FROM stock S WHERE S.Headphone_ID = H.Headphone_ID GROUP BY S.Headphone_ID HAVING SUM(S.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID) AS Sub))	SELECT model FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM stock GROUP BY headphone_id HAVING SUM(quantity) = (SELECT MAX(total_quantity) FROM (SELECT SUM(quantity) AS total_quantity FROM stock GROUP BY headphone_id)))
0	SELECT TOTAL(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
0	SELECT TOTAL(stock.Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1	SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0	SELECT neighborhood FROM store EXCEPT SELECT neighborhood FROM store WHERE store_id IN (SELECT store_id FROM stock WHERE quantity > 0)
0	SELECT DISTINCT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)	SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id GROUP BY s.neighborhood HAVING SUM(st.quantity) IS NULL OR SUM(st.quantity) = 0
1	SELECT COUNT(author_id) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(author_id) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(DISTINCT paper_id) FROM Paper	SELECT count(*) FROM Paper
1	SELECT COUNT(DISTINCT paper_id) FROM Paper	SELECT count(*) FROM Paper
1	SELECT COUNT(affiliation_id) AS AffiliationCount FROM Affiliation	SELECT count(*) FROM Affiliation
1	SELECT COUNT(DISTINCT Affiliation.affiliation_id) FROM Affiliation	SELECT count(*) FROM Affiliation
1	SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL' AND p.year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AND year = 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1	SELECT COUNT(*) FROM (SELECT Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009) AS temp	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1	SELECT Affiliation.name AS Name, Affiliation.address AS Address FROM Affiliation	SELECT name, address FROM affiliation
1	SELECT Affiliation.name, Affiliation.address FROM Affiliation WHERE address <> ''	SELECT name, address FROM affiliation;
1	SELECT venue, year FROM Paper ORDER BY year	SELECT venue, year FROM paper ORDER BY year
0	SELECT DISTINCT venue FROM Paper ORDER BY Paper.year	SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
0	SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Harvard University'	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
1	SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Author_list.paper_id = Paper.paper_id AND Affiliation.name = 'Harvard University')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
1	SELECT title, paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown')	SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = '%Mckeown%'))
1	SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))	SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = '%Mckeown%'))
1	SELECT P.title, P.paper_id FROM Paper P INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AS S ON P.paper_id = S.paper_id INNER JOIN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University')) AS C ON P.paper_id = C.paper_id	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list A ON P.paper_id = A.paper_id INNER JOIN Affiliation AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name IN ('Stanford', 'Columbia University') GROUP BY P.paper_id HAVING COUNT(DISTINCT AF.name) = 2	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT P.title, P.paper_id FROM Paper P JOIN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2) AS CoAuthored ON P.paper_id = CoAuthored.paper_id	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
1	SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id HAVING COUNT(DISTINCT A.author_id) = 2	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
0	SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list A JOIN Author B ON A.author_id = B.author_id WHERE B.name = 'Mckeown' AND A.paper_id = P.paper_id) AND NOT EXISTS (SELECT * FROM Author_list C JOIN Author D ON C.author_id = D.author_id WHERE D.name = 'Rambow' AND C.paper_id = P.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT * FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown' AND paper_id = Paper.paper_id) AND NOT EXISTS (SELECT * FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow' AND paper_id = Paper.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown,  Kathleen%" OR T3.name LIKE "%Rambow,  Owen%"
0	SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown,  Kathleen%" OR T3.name LIKE "%Rambow,  Owen%"
0	SELECT name, COUNT(paper_id) AS num_papers FROM Author LEFT JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY name ORDER BY num_papers DESC	SELECT aut.name, (SELECT COUNT(*) FROM paper WHERE paper.paper_id IN (SELECT author_list.paper_id FROM author_list WHERE author_list.author_id = aut.author_id)) AS paper_num FROM author aut GROUP BY aut.author_id ORDER BY paper_num DESC
1	SELECT A.name, COUNT(DISTINCT P.paper_id) AS NumOfPapers FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY NumOfPapers DESC	SELECT aut.name, (SELECT COUNT(*) FROM paper WHERE paper.paper_id IN (SELECT author_list.paper_id FROM author_list WHERE author_list.author_id = aut.author_id)) AS paper_num FROM author aut GROUP BY aut.author_id ORDER BY paper_num DESC
0	SELECT A.name, COUNT(AL.paper_id) AS PaperCount FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.name ORDER BY PaperCount ASC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
0	SELECT DISTINCT Affiliation.name FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id GROUP BY Affiliation.name ORDER BY COUNT(Author_list.paper_id) DESC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(*) = 1)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
1	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue, year) AS counts)	SELECT venue, year FROM paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) as count FROM paper GROUP BY venue, year))
1	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue, year) AS counts)	SELECT p.venue, p.year FROM paper p GROUP BY p.venue, p.year HAVING COUNT(p.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM paper GROUP BY venue, year) t)
1	SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue) AS counts)	SELECT p.venue FROM paper p GROUP BY p.venue HAVING COUNT(p.paper_id) = (SELECT MIN(c.count) FROM (SELECT COUNT(paper_id) AS count FROM paper GROUP BY venue) c)
1	SELECT venue FROM (SELECT venue, COUNT(*) AS num_papers FROM Paper GROUP BY venue) AS venue_counts WHERE num_papers = (SELECT MIN(num_papers) FROM (SELECT COUNT(*) AS num_papers FROM Paper GROUP BY venue) AS counts)	WITH VenueCount AS (SELECT venue, COUNT(paper_id) as cnt FROM paper GROUP BY venue) SELECT venue FROM VenueCount WHERE cnt = (SELECT MIN(cnt) FROM VenueCount)
1	SELECT COUNT(1) FROM Citation WHERE cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1	SELECT COUNT(paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1	SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027' AND cited_paper_id IS NOT NULL	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
0	SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
1	SELECT cited_paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id) AS subquery)	SELECT cited_paper_id, COUNT(cited_paper_id) as total_citations FROM citation GROUP BY cited_paper_id HAVING total_citations = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id))
0	SELECT cited_paper_id AS MostCitedPaperID, MAX(citation_count) AS MaxCitations FROM (SELECT cited_paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY cited_paper_id) AS CitationCounts	SELECT cited_paper_id, COUNT(cited_paper_id) as total_citations FROM citation GROUP BY cited_paper_id HAVING total_citations = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id))
1	SELECT P.title FROM Paper P WHERE EXISTS (SELECT 1 FROM Citation C WHERE C.paper_id = P.paper_id GROUP BY C.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) count FROM Citation GROUP BY paper_id) AS sub))	SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id) WHERE rk = 1
0	SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id) WHERE rk = 1
0	sql placeholder	SELECT cited_paper_id, cnt FROM (SELECT cited_paper_id ,  count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation GROUP BY cited_paper_id) WHERE rk <= 10
0	sql placeholder	SELECT cited_paper_id, cnt FROM (SELECT cited_paper_id ,  count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation GROUP BY cited_paper_id) WHERE rk <= 10
1	SELECT COUNT(*) FROM Citation C, Paper P, Author_list AL, Author A WHERE C.paper_id = P.paper_id AND P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT C.cited_paper_id) FROM Citation C, Paper P, Author_list AL, Author A WHERE C.paper_id = P.paper_id AND P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT C.cited_paper_id) AS TotalCitations FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.paper_id AND A.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A, Author_list AL, Citation C WHERE A.author_id = AL.author_id AND AL.paper_id = C.cited_paper_id GROUP BY A.author_id HAVING citation_count = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS subquery)	SELECT name, cnt FROM ( SELECT T3.name, count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id GROUP BY T2.author_id ) WHERE rk <= 1
1	SELECT A.name, citation_count FROM Author AS A JOIN (SELECT AL.author_id, COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AS AL JOIN Citation AS C ON AL.paper_id = C.cited_paper_id GROUP BY AL.author_id) AS SubQuery)) AS MaxCitations ON A.author_id = MaxCitations.author_id	SELECT name, cnt FROM ( SELECT T3.name, count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id GROUP BY T2.author_id ) WHERE rk <= 1
0	SELECT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name LIKE '%Mckeown, Kathleen%'))	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0	SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name LIKE 'Mckeown, Kathleen'	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' GROUP BY venue, year	SELECT DISTINCT p.venue, p.year FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'
1	SELECT venue, year FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' GROUP BY venue, year	SELECT DISTINCT P.venue, P.year FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id JOIN affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'
1	SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(P.paper_id) AS paper_count FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) AS T)	SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T3.author_id = T2.author_id WHERE T1.year = 2009 GROUP BY T2.author_id ) AS subquery WHERE rk = 1
1	SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id HAVING COUNT(P.paper_id) = (SELECT MAX(num_papers) FROM (SELECT COUNT(P.paper_id) AS num_papers FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) T)	SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T3.author_id = T2.author_id WHERE T1.year = 2009 GROUP BY T2.author_id ) AS subquery WHERE rk = 1
0	SELECT name FROM (SELECT A.name, COUNT(P.paper_id) AS cnt FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name) AS SubQuery ORDER BY cnt DESC LIMIT 3	SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 GROUP BY T2.affiliation_id ) AS subquery WHERE rk <= 3
0	SELECT name FROM (SELECT Affiliation.name, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.name ORDER BY paper_count DESC) AS subquery LIMIT 3	SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 GROUP BY T2.affiliation_id ) AS subquery WHERE rk <= 3
1	SELECT COUNT(paper_id) FROM Paper p WHERE p.year <= 2009 AND EXISTS (SELECT 1 FROM Author_list al JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')	SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009
1	SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009	SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009
1	SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year >= 2000 AND Paper.year <= 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
1	SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Stanford University' AND Paper.year > 1999 AND Paper.year < 2010	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
1	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(author_id) AS cnt FROM Author_list GROUP BY paper_id) T))	SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT A.paper_id FROM author_list A GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(T.auth_count) FROM (SELECT COUNT(author_id) AS auth_count FROM author_list GROUP BY paper_id) T))
1	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(count) FROM (SELECT COUNT(author_id) AS count FROM Author_list GROUP BY paper_id) AS counts))	SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT A.paper_id FROM author_list A GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(T.auth_count) FROM (SELECT COUNT(author_id) AS auth_count FROM author_list GROUP BY paper_id) T))
1	SELECT COUNT(DISTINCT AL2.author_id) FROM Author_list AL1, Author_list AL2 WHERE AL1.paper_id = AL2.paper_id AND AL1.author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND AL2.author_id != AL1.author_id	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT T2.author_id) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.name = 'Mckeown, Kathleen' AND T2.author_id != T1.author_id	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id)))	SELECT name FROM ( SELECT t4.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM author_list as t1 JOIN author_list as t2 ON t1.paper_id = t2.paper_id AND t1.author_id != t2.author_id JOIN author as t3 ON t1.author_id = t3.author_id JOIN author as t4 ON t2.author_id = t4.author_id WHERE t3.name = 'mckeown , kathleen' GROUP BY t2.author_id ) AS subquery WHERE rk = 1
1	WITH CoAuthors AS (SELECT AL.author_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT AL2.paper_id FROM Author_list AL2 JOIN Author A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Mckeown, Kathleen')) SELECT A.name FROM Author A JOIN CoAuthors C ON A.author_id = C.author_id GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1	SELECT name FROM ( SELECT t4.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM author_list as t1 JOIN author_list as t2 ON t1.paper_id = t2.paper_id AND t1.author_id != t2.author_id JOIN author as t3 ON t1.author_id = t3.author_id JOIN author as t4 ON t2.author_id = t4.author_id WHERE t3.name = 'mckeown , kathleen' GROUP BY t2.author_id ) AS subquery WHERE rk = 1
1	SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT Paper.paper_id FROM Paper WHERE Paper.title LIKE '%translation%'	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT paper_id, title FROM Paper WHERE NOT EXISTS (SELECT 1 FROM Citation WHERE cited_paper_id = Paper.paper_id)	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
1	SELECT DISTINCT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
0	SELECT A.name FROM (SELECT AF.name, COUNT(AL.paper_id) AS total_papers FROM Affiliation AF JOIN Author_list AL ON AF.affiliation_id = AL.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AF.name ORDER BY total_papers DESC LIMIT 1) A	SELECT a.name FROM affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id IN (SELECT al.affiliation_id FROM author_list al GROUP BY al.affiliation_id HAVING COUNT(DISTINCT al.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY affiliation_id)))
0	SELECT A.name FROM Affiliation A WHERE A.affiliation_id = (SELECT AL.affiliation_id FROM Author_list AL JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AL.affiliation_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)	SELECT a.name FROM affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id IN (SELECT al.affiliation_id FROM author_list al GROUP BY al.affiliation_id HAVING COUNT(DISTINCT al.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY affiliation_id)))
1	SELECT venue, year, COUNT(*) AS count_of_papers FROM Paper GROUP BY venue, year ORDER BY count_of_papers	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1	SELECT venue, year, COUNT(paper_id) AS paper_total FROM Paper GROUP BY venue, year ORDER BY year, venue	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1	SELECT A.name, COUNT(DISTINCT P.paper_id) AS total_papers FROM Affiliation A JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
0	SELECT A.name AS Affiliation, COUNT(DISTINCT P.paper_id) AS Papers_Published FROM Affiliation A LEFT OUTER JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT OUTER JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
1	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT title FROM Paper WHERE EXISTS (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50 AND Paper.paper_id = Citation.cited_paper_id)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT COUNT(DISTINCT A.author_id) FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN Citation C ON AL.paper_id = C.cited_paper_id WHERE A.author_id = AL.author_id GROUP BY C.cited_paper_id HAVING COUNT(*) > 50)	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
1	SELECT COUNT(*) FROM (SELECT author_id FROM Author EXCEPT SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50)) AS Result	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
0	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009 UNION SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009))	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'NAACL' AND P.year = 2009) INTERSECT SELECT name FROM Author WHERE author_id IN (SELECT AL.author_id FROM Author_list AL, Paper P WHERE AL.paper_id = P.paper_id AND P.venue = 'ACL' AND P.year = 2009)	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
0	SELECT DISTINCT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list, Paper WHERE Author_list.paper_id = Paper.paper_id AND Paper.venue = 'ACL')	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1	SELECT COUNT(1) FROM conference	SELECT count(*) FROM conference
1	SELECT COUNT(*) AS Total_Number_of_Conferences FROM conference	SELECT count(*) FROM conference
1	SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL	SELECT DISTINCT conference_name FROM conference
1	SELECT Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(*) >= 1	SELECT DISTINCT conference_name FROM conference
1	SELECT conference.Conference_Name, conference.Year, conference.Location FROM conference	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
1	SELECT `Conference_Name`, `Year`, `Location` FROM `conference`	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
0	SELECT c.Conference_Name, COUNT(cp.Conference_ID) AS Num_Times_Participated FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Conference_Name, COUNT(*) AS occurrences FROM conference GROUP BY Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Year, COUNT(*) FROM conference GROUP BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1	SELECT COUNT(Conference_ID), Year FROM conference GROUP BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1	SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY Year) AS counts)	SELECT year FROM conference GROUP BY year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY year))
1	SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY Year) t)	SELECT a.year FROM (SELECT year, COUNT(conference_id) transmission_count FROM conference GROUP BY year) a WHERE a.transmission_count = (SELECT MIN(transmission_count) FROM (SELECT COUNT(conference_id) transmission_count FROM conference GROUP BY year))
1	SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT i.Institution_Name, i.Location, i.Founded FROM institution i	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT Institution_Name AS Name, Location AS Location, Founded AS 'Founding Year' FROM institution	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1	SELECT COUNT(Institution_ID) AS Count FROM institution WHERE Founded > 1849 AND Founded < 1901	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1	SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Founded = (SELECT MAX(Founded) FROM institution)	SELECT i.institution_name, i.location FROM institution i WHERE i.founded = (SELECT MAX(founded) FROM institution)
1	SELECT i.Institution_Name, i.Location FROM institution i WHERE i.Founded = (SELECT MAX(Founded) FROM institution)	SELECT i.institution_name, i.location FROM institution i WHERE i.founded = (SELECT MAX(founded) FROM institution)
0	SELECT I.Institution_Name, COUNT(S.staff_ID) AS StaffTotal FROM institution I LEFT OUTER JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_Name	SELECT institution_name, (SELECT COUNT(*) FROM staff WHERE staff.institution_id = institution.institution_id) AS staff_count FROM institution WHERE founded > 1800
0	SELECT I.Institution_ID, COUNT(S.staff_ID) AS Staff_Count, GROUP_CONCAT(S.name) AS Staff_Names FROM institution I JOIN staff S ON I.Institution_ID = S.Institution_ID WHERE I.Founded > 1800 GROUP BY I.Institution_ID	SELECT institution_name, (SELECT COUNT(*) FROM staff WHERE staff.institution_id = institution.institution_id) AS staff_count FROM institution WHERE founded > 1800
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(s.Age) FROM staff AS s)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1	SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff WHERE Age > 0)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1	SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'	SELECT MAX(age) AS maximum_age, MIN(age) AS minimum_age FROM staff WHERE nationality = 'United States';
1	SELECT MAX(staff.Age) AS MaximumAge, MIN(staff.Age) AS MinimumAge FROM staff	SELECT max(age) ,  min(age) FROM staff
1	SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))	SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))
1	SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'))	SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))
0	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') INTERSECT SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')	SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')
0	SELECT DISTINCT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role IN ('speaker', 'sponsor') GROUP BY staff_ID HAVING COUNT(DISTINCT role) = 2)	SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') AND staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')
1	WITH ACL_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')), Naccl_Participants AS (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')) SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM ACL_Participants INTERSECT SELECT staff_ID FROM Naccl_Participants)	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'Naccl')
1	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL'))	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'NACCL')
1	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2003 OR c.Year = 2004)	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.year IN (2003, 2004))
1	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year IN (2003, 2004)))	SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = staff.staff_id AND (c.year BETWEEN 2003 AND 2004))
0	SELECT c.Conference_Name AS Name, c.Year AS Year, COUNT(cp.staff_ID) AS Participant_Count FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year	SELECT c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_participation.conference_id = c.conference_id) AS participants FROM conference c
1	SELECT Conference_ID, Conference_Name, Year, (SELECT COUNT(*) FROM conference_participation cp WHERE cp.Conference_ID = conference.Conference_ID) AS Participants FROM conference	SELECT c.conference_id, c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_id = c.conference_id) AS num_participants FROM conference AS c
0	SELECT Conference_Name FROM conference c JOIN (SELECT Conference_ID, COUNT(*) as total FROM conference_participation GROUP BY Conference_ID ORDER BY total DESC LIMIT 2) cp ON c.Conference_ID = cp.Conference_ID	SELECT conference_name FROM (SELECT T1.conference_name, rank() over (ORDER BY count(*) DESC) as rk FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id = T2.conference_id GROUP BY T2.conference_id) WHERE rk <= 2
0	SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(DISTINCT cp.staff_ID) DESC LIMIT 2	SELECT conference_name FROM (SELECT T1.conference_name, rank() over (ORDER BY count(*) DESC) as rk FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id = T2.conference_id GROUP BY T2.conference_id) WHERE rk <= 2
1	SELECT s.name, s.Nationality FROM staff s WHERE NOT EXISTS (SELECT NULL FROM conference_participation cp INNER JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND s.staff_ID = cp.staff_ID)	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
0	SELECT DISTINCT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name = 'ACL')	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
1	SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)	SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.year = 2004 AND s.institution_id = i.institution_id)
1	SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)	SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE s.institution_id = i.institution_id AND c.year = 2004)
1	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills LIMIT 1)	SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)
1	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills LIMIT 1)	SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)
1	SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT P.pilot_name FROM PilotSkills P WHERE P.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY P.age ASC	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT PilotSkills.* FROM PilotSkills WHERE age < 30	SELECT * FROM PilotSkills WHERE age  <  30
1	SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30	select * from pilotskills where age  <  30
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age BETWEEN 1 AND 34	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT H.location FROM Hangar H WHERE H.plane_name = 'F-14 Fighter'	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT COUNT(DISTINCT location) FROM Hangar WHERE plane_name IS NOT NULL	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT COUNT(DISTINCT location) AS NumberOfLocations FROM Hangar	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT p.plane_name FROM PilotSkills p WHERE p.pilot_name = 'Jones' AND p.age = 32	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1	SELECT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name AND P.pilot_name = 'Jones' AND P.age = 32	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 GROUP BY pilot_name	SELECT count(*) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL	SELECT count(*) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(DISTINCT Hangar.plane_name) FROM Hangar, PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND PilotSkills.age < 35 AND Hangar.plane_name = 'B-52 Bomber'	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
0	SELECT COUNT(*) FROM (SELECT h.plane_name FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age < 35 AND h.plane_name = 'B-52') AS subquery	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') AND plane_name = 'Piper Cub'	SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')
1	SELECT H.plane_name FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.plane_name HAVING COUNT(P.pilot_name) = (SELECT MAX(COUNT) FROM (SELECT COUNT(P.pilot_name) AS COUNT FROM PilotSkills P GROUP BY P.plane_name) AS T)	WITH RankedPlanes AS (SELECT plane_name, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM RankedPlanes WHERE rank = 1
1	WITH PlaneFrequency AS (SELECT plane_name, COUNT(*) AS frequency FROM PilotSkills GROUP BY plane_name) SELECT plane_name FROM PlaneFrequency WHERE frequency = (SELECT MAX(frequency) FROM PlaneFrequency)	SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM pilotskills GROUP BY plane_name) t)
0	SELECT H.plane_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name ORDER BY COUNT(P.pilot_name) ASC LIMIT 1	SELECT plane_name FROM (SELECT h.plane_name, rank() over (ORDER BY COUNT(p.plane_name)) as rk FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name) WHERE rk = 1
0	WITH PlaneUsage AS (SELECT plane_name, COUNT(*) AS usage_count FROM PilotSkills GROUP BY plane_name) SELECT plane_name FROM PlaneUsage WHERE usage_count = (SELECT MIN(usage_count) FROM PlaneUsage)	SELECT plane_name FROM (SELECT h.plane_name, rank() over (ORDER BY COUNT(p.plane_name)) as rk FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name) WHERE rk = 1
1	SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills LEFT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills LEFT JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41 AND plane_name IN (SELECT plane_name FROM Hangar)	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT plane_name FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE Hangar.plane_name = PilotSkills.plane_name AND pilot_name = 'Smith' AND age = 41)	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills) AS unique_planes	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
1	SELECT COUNT(DISTINCT H.plane_name) FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.pilot_name = 'Smith'	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
0	SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND plane_name IN (SELECT plane_name FROM Hangar)	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(DISTINCT h.plane_name) FROM Hangar h INNER JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age > 40	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
1	SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT pilot_name FROM PilotSkills WHERE (age BETWEEN 30 AND 40) ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT location FROM Hangar ORDER BY plane_name	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM Hangar ORDER BY plane_name)	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT DISTINCT H.plane_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name ORDER BY H.plane_name ASC	SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
1	SELECT DISTINCT plane_name FROM Hangar ORDER BY 1	SELECT DISTINCT plane_name FROM hangar ORDER BY plane_name ASC
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
0	SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
1	SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	SELECT DISTINCT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	WITH PiperCubPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'), B52BomberPilots AS (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber') SELECT pilot_name FROM PiperCubPilots WHERE pilot_name NOT IN (SELECT pilot_name FROM B52BomberPilots)	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') INTERSECT SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	SELECT AVG(PilotSkills.age) AS Average_Age, MIN(PilotSkills.age) AS Minimum_Age FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	WITH AustinPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'), BostonPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Boston') SELECT pilot_name FROM AustinPilots INTERSECT SELECT pilot_name FROM BostonPilots	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1	SELECT P.pilot_name FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name WHERE H.location IN ('Austin', 'Boston') GROUP BY P.pilot_name HAVING COUNT(DISTINCT H.location) = 2	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
0	SELECT H.plane_name, AVG(P.age) FROM Hangar H LEFT OUTER JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
1	SELECT ps.plane_name, AVG(ps.age) FROM PilotSkills ps GROUP BY ps.plane_name	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
0	SELECT COUNT(plane_name) AS number_of_planes, location AS plane_type FROM Hangar GROUP BY location	SELECT h.plane_name, count(p.plane_name) FROM Hangar AS h LEFT JOIN PilotSkills as p on h.plane_name = p.plane_name group by h.plane_name
0	SELECT plane_name, COUNT(plane_name) FROM Hangar GROUP BY plane_name	SELECT h.plane_name, count(p.plane_name) FROM Hangar AS h LEFT JOIN PilotSkills as p on h.plane_name = p.plane_name group by h.plane_name
1	SELECT a.plane_name, b.pilot_name FROM Hangar a, PilotSkills b WHERE a.plane_name = b.plane_name AND b.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = a.plane_name) ORDER BY a.plane_name	SELECT ps.plane_name, ps.pilot_name FROM pilotskills ps WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = ps.plane_name) ORDER BY ps.plane_name
1	SELECT H.plane_name, P.pilot_name FROM Hangar H LEFT JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills PS WHERE PS.plane_name = H.plane_name) ORDER BY H.plane_name	SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = h.plane_name) ORDER BY h.plane_name
1	SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) rank FROM PilotSkills) WHERE rank = 1	SELECT ps.pilot_name, ps.plane_name FROM pilotskills ps INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM pilotskills GROUP BY plane_name) max_ps ON ps.plane_name = max_ps.plane_name AND ps.age = max_ps.max_age
0	SELECT plane_name, pilot_name FROM PilotSkills WHERE age IN (SELECT MIN(age) FROM PilotSkills GROUP BY plane_name) AND plane_name IN (SELECT plane_name FROM Hangar)	SELECT DISTINCT hangar.plane_name, pilotskills.pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name)
1	SELECT p.pilot_name, MAX(p.age) AS max_age FROM PilotSkills p GROUP BY p.pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
1	SELECT DISTINCT pilot_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
0	SELECT H.location, COUNT(P.pilot_name) AS PilotCount, AVG(P.age) AS AvgAge FROM Hangar H, PilotSkills P WHERE H.plane_name = P.plane_name GROUP BY H.location	SELECT h.location, COUNT(pilot_name) as num_pilots, AVG(ps.age) as av_age FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location
0	SELECT location, COUNT(DISTINCT pilot_name), AVG(age) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location	SELECT h.location, COUNT(pilot_name) as num_pilots, AVG(ps.age) as av_age FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location
1	SELECT COUNT(pilot_name), plane_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY plane_name	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
1	SELECT p.plane_name, COUNT(DISTINCT p.pilot_name) FROM PilotSkills p WHERE (SELECT AVG(age) FROM PilotSkills ps WHERE ps.plane_name = p.plane_name) < 35 GROUP BY p.plane_name	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
1	SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))	SELECT location FROM hangar WHERE plane_name in (SELECT plane_name FROM pilotskills WHERE age = (select min(age) from PilotSkills))
1	SELECT H.location FROM Hangar H WHERE EXISTS (SELECT 1 FROM PilotSkills P WHERE P.plane_name = H.plane_name AND P.age = (SELECT MIN(age) FROM PilotSkills))	SELECT location FROM hangar WHERE plane_name in (SELECT plane_name FROM pilotskills WHERE age = (select min(age) from PilotSkills))
1	SELECT pilot_name AS PilotName, age AS PilotAge FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1	SELECT pilot_name AS PilotName, age AS PilotAge FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1	SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC	SELECT DISTINCT p1.pilot_name FROM pilotskills p1, pilotskills p2 WHERE p1.age > p2.age AND p2.plane_name = 'Piper Cub' ORDER BY p1.pilot_name
0	SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name	SELECT ps1.pilot_name FROM pilotskills ps1 WHERE ps1.age > (SELECT MAX(ps2.age) FROM pilotskills ps2 WHERE ps2.plane_name = 'Piper Cub') ORDER BY ps1.pilot_name
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter'))
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')
1	SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'	SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'
1	SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'	SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'
1	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT COUNT(DISTINCT ps1.pilot_name) FROM pilotskills AS ps1 WHERE ps1.age > (SELECT MIN(ps2.age) FROM pilotskills AS ps2 WHERE ps2.plane_name = 'Piper Cub')
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') GROUP BY pilot_name	SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub' GROUP BY plane_name)
1	SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district)	SELECT d.name FROM district d WHERE d.area_km = (SELECT MAX(area_km) FROM district)
1	SELECT Area_km, Government_website FROM district WHERE Population IN (SELECT MIN(Population) FROM district)	SELECT area_km ,  Government_website FROM district WHERE Population  = (SELECT min(Population) FROM district);
1	SELECT d.Name, d.Population FROM district d WHERE d.Area_km > (SELECT AVG(Area_km) FROM district)	SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)
1	SELECT MAX(Area_km) AS 'Max Area km', AVG(Area_km) AS 'Avg Area km' FROM district	SELECT max(area_km) ,  avg(area_km) FROM district
1	SELECT SUM(Population) FROM district WHERE Area_km >= (SELECT MIN(Area_km) FROM (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3))	SELECT SUM(Population) FROM (SELECT Population, rank() over (ORDER BY Area_km DESC ) AS rk FROM district) WHERE rk <= 3
1	SELECT District_ID, Name, Government_website FROM district ORDER BY Population ASC	SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population
1	SELECT Name FROM district WHERE Government_website LIKE '%.gov'	SELECT name FROM district WHERE Government_website LIKE "%gov%"
1	SELECT d.District_ID, d.Name FROM district AS d WHERE d.Population > 4000 OR d.Area_km > 3000	SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000
1	SELECT s.Name, s.Speach_title FROM spokesman s	SELECT name ,  speach_title FROM spokesman
1	SELECT AVG(Points) AS AveragePoints, AVG(Age) AS AverageAge FROM spokesman WHERE Rank_position = 1	SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1
1	SELECT Name, Points FROM spokesman WHERE Age < 40	SELECT name ,  points FROM spokesman WHERE age  <  40
1	SELECT Name FROM spokesman AS s WHERE s.Age = (SELECT MAX(Age) FROM spokesman AS s2)	SELECT name FROM spokesman WHERE Age = (SELECT max(Age) FROM spokesman)
1	SELECT Name FROM spokesman s WHERE s.Points < (SELECT AVG(Points) FROM spokesman WHERE Points > 0)	SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)
0	SELECT D.Name FROM district D, spokesman_district SD WHERE D.District_ID = SD.District_ID GROUP BY D.Name HAVING COUNT(SD.Spokesman_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM spokesman_district GROUP BY District_ID) T)	SELECT d.name FROM district AS d INNER JOIN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(spokesman_id) = (SELECT MAX(c) FROM (SELECT COUNT(spokesman_id) as c FROM spokesman_district GROUP BY district_id))) y ON d.district_id = y.district_id
0	SELECT DISTINCT s.Name FROM spokesman s, spokesman_district sd WHERE s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004	SELECT name FROM spokesman WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman_district WHERE start_year < 2004)
1	SELECT d.Name AS District, COUNT(sd.Spokesman_ID) AS CountOfSpokesmen FROM district d LEFT OUTER JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name	SELECT name, (SELECT COUNT(spokesman_id) FROM spokesman_district WHERE district_id = d.district_id) AS num_spokesmen FROM district AS d
1	SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 2)	SELECT d.name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 2);
1	SELECT Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(DISTINCT sd.Spokesman_ID) > 1	SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1
1	SELECT COUNT(*) FROM (SELECT District_ID FROM district EXCEPT SELECT District_ID FROM spokesman_district) AS subquery	SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)
0	SELECT DISTINCT s.Name FROM spokesman s WHERE s.Spokesman_ID NOT IN (SELECT sd.Spokesman_ID FROM spokesman_district sd)	SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
1	SELECT (SELECT SUM(Population) FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)) AS TotalPopulation, (SELECT AVG(Population) FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)) AS AveragePopulation	SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)
1	SELECT title FROM Sculptures WHERE year IN (SELECT MAX(year) FROM Sculptures)	SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)
1	SELECT S.title FROM Sculptures S WHERE S.year = (SELECT MAX(year) FROM Sculptures)	SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)
1	SELECT title, location FROM Paintings AS p WHERE p.year = (SELECT MIN(year) FROM Paintings AS min_year)	SELECT paintings.title, paintings.location FROM paintings WHERE paintings.year = (SELECT MIN(year) FROM paintings);
1	SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)	SELECT paintings.title, paintings.location FROM paintings WHERE paintings.year = (SELECT MIN(year) FROM paintings);
1	SELECT title FROM Sculptures WHERE location LIKE '%226%'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title FROM Sculptures WHERE location LIKE '%226%'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title AS PaintingTitle, location AS PaintingLocation FROM Paintings	SELECT title ,  LOCATION FROM paintings
1	SELECT title AS PaintingTitle, location AS PaintingLocation FROM Paintings	SELECT title ,  LOCATION FROM paintings
1	SELECT title, location FROM Sculptures	SELECT title ,  LOCATION FROM sculptures
1	SELECT title, location FROM Sculptures	SELECT title ,  LOCATION FROM sculptures
1	SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80	SELECT medium FROM paintings WHERE paintingID  =  80
1	SELECT Paintings.medium FROM Paintings WHERE Paintings.paintingID = 80	select medium from paintings where paintingid  =  80
1	SELECT Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
0	SELECT fname || ' ' || lname AS full_name FROM Artists WHERE birthYear > 1850	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
1	SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
1	SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
0	SELECT DISTINCT Artists.fname, Artists.lname FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900	SELECT fname, lname FROM (SELECT DISTINCT artistid, fname, lname FROM artists) AS unique_artists WHERE unique_artists.artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900)
0	SELECT DISTINCT Artists.fname, Artists.lname FROM Artists, Sculptures WHERE Artists.artistID = Sculptures.sculptorID AND Sculptures.year < 1900	SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptorid = artistid AND year < 1900)
0	SELECT DISTINCT birthYear FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID AND year > 1920)	SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920)
0	SELECT DISTINCT A.birthYear FROM Artists A WHERE A.artistID IN (SELECT S.sculptorID FROM Sculptures S WHERE S.year > 1920)	SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920)
1	SELECT A.fname, A.lname FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)	SELECT a.fname, a.lname FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(b.deathyear - b.birthyear) FROM artists b)
0	SELECT fname || ' ' || lname AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT a.fname, a.lname FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(b.deathyear - b.birthyear) FROM artists b)
0	SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL	SELECT lifespan FROM (SELECT (deathyear - birthyear) AS lifespan FROM artists) WHERE lifespan = (SELECT MIN(deathyear - birthyear) FROM artists)
0	SELECT MIN(deathYear - birthYear) AS age FROM Artists WHERE deathYear IS NOT NULL AND birthYear IS NOT NULL	SELECT lifespan FROM (SELECT (deathyear - birthyear) AS lifespan FROM artists) WHERE lifespan = (SELECT MIN(deathyear - birthyear) FROM artists)
1	SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT fname, deathyear - birthyear AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)
1	SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT fname, deathyear - birthyear AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)
1	SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
1	SELECT COUNT(*) FROM Paintings WHERE location LIKE '%240%'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0	SELECT COUNT(*) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE (a.deathYear - a.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT artistid, COUNT(*) FROM artists a LEFT JOIN paintings p ON p.painterid = a.artistid WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) GROUP BY a.artistid;
0	SELECT COUNT(paintingID) FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.artistID ORDER BY (Artists.deathYear - Artists.birthYear) DESC LIMIT 1	SELECT artistid, COUNT(*) FROM artists a LEFT JOIN paintings p ON p.painterid = a.artistid WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) GROUP BY a.artistid;
1	SELECT P.title, P.year FROM Paintings P JOIN Artists A ON P.painterID = A.artistID WHERE A.fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT Paintings.title, Paintings.year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT p.width_mm FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.birthYear < 1850	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT width_mm FROM Paintings WHERE EXISTS (SELECT 1 FROM Artists WHERE Artists.artistID = Paintings.painterID AND Artists.birthYear < 1850)	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT Paintings.location, Paintings.medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo' AND Artists.lname IS NOT NULL	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
0	SELECT DISTINCT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
1	SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT P.painterID FROM Paintings P) AND A.artistID IN (SELECT S.sculptorID FROM Sculptures S)	SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)
1	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE painterID IN (SELECT sculptorID FROM Sculptures))	SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING SUM(CASE WHEN medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN medium = 'lithographic' THEN 1 ELSE 0 END) > 0)	SELECT a.fname, a.lname FROM artists a WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')
0	WITH OilArtists AS (SELECT painterID FROM Paintings WHERE medium = 'oil'), LithoArtists AS (SELECT painterID FROM Paintings WHERE medium = 'lithographic') SELECT A.fname, A.lname FROM Artists A JOIN OilArtists O ON A.artistID = O.painterID JOIN LithoArtists L ON A.artistID = L.painterID	SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')
1	SELECT a.birthYear FROM Artists a WHERE EXISTS (SELECT 1 FROM Paintings p WHERE p.painterID = a.artistID AND p.year = 1884 AND p.mediumOn = 'canvas')	SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884 AND mediumon = 'canvas')
1	SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)	SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884)
1	SELECT DISTINCT A.fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' AND P.location LIKE 'gallery 241'	SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT A.fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium LIKE 'oil' AND P.location = '241'	SELECT fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')
1	SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) AS combined GROUP BY medium	SELECT medium, COUNT(*) AS NumWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium;
1	SELECT medium, COUNT(*) AS total_count FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) combined_table GROUP BY medium	SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium
1	SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT medium, AVG(height_mm) AS averageHeight FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location HAVING COUNT(*) > 0	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
1	SELECT location, COUNT(paintingID) AS count FROM Paintings WHERE year < 1900 GROUP BY location	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
0	SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT P.title FROM Paintings P WHERE P.medium = 'oil' AND P.year > 1910	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1	SELECT DISTINCT artistID FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium LIKE 'oil' AND Paintings.location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
0	SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT height_mm FROM Paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 1800)	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0	SELECT DISTINCT P1.paintingID FROM Paintings P1 WHERE P1.year < (SELECT P2.year FROM Paintings P2 WHERE P2.location = 'gallery 240' LIMIT 1)	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
1	SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)
1	SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)
1	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')	SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%')
0	SELECT Artists.fname || ' ' || Artists.lname AS full_name FROM Artists, Sculptures WHERE Artists.artistID = Sculptures.sculptorID AND Sculptures.title LIKE '%female%'	SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%')
0	SELECT title FROM Paintings GROUP BY title ORDER BY title COLLATE NOCASE	SELECT title FROM paintings ORDER BY title
0	SELECT title FROM (SELECT DISTINCT title FROM Paintings) AS unique_titles ORDER BY title ASC	SELECT title FROM paintings ORDER BY title
0	SELECT DISTINCT title FROM Paintings ORDER BY width_mm ASC, title ASC	SELECT title FROM paintings ORDER BY height_mm
0	SELECT title FROM Paintings GROUP BY title HAVING MIN(height_mm) ORDER BY height_mm ASC	SELECT title FROM paintings ORDER BY height_mm
1	SELECT title FROM Paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT title FROM Sculptures WHERE year >= 1900 AND year <= 1950	SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950
1	SELECT Art.title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Art WHERE Art.year BETWEEN 1900 AND 1950	SELECT title FROM (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) WHERE year BETWEEN 1900 AND 1950
1	SELECT title FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE artistID = 222) UNION ALL SELECT title FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Artists WHERE artistID = 222)	SELECT p.title FROM paintings AS p WHERE p.painterid = 222 UNION ALL SELECT s.title FROM sculptures AS s WHERE s.sculptorid = 222
1	SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222	SELECT title FROM paintings WHERE painterid = 222 UNION ALL SELECT title FROM sculptures WHERE sculptorid = 222
0	SELECT A.artistID FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.year < 1900 GROUP BY A.artistID ORDER BY COUNT(P.paintingID) DESC LIMIT 1	SELECT a.artistid FROM artists a WHERE (SELECT COUNT(*) FROM paintings p WHERE p.painterid = a.artistid AND p.year < 1900) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) c);
0	WITH PaintingCounts AS (SELECT painterID, COUNT(*) AS Total FROM Paintings WHERE year < 1900 GROUP BY painterID) SELECT painterID FROM PaintingCounts ORDER BY Total DESC LIMIT 1	SELECT a.artistid FROM artists a WHERE (SELECT COUNT(*) FROM paintings p WHERE p.painterid = a.artistid AND p.year < 1900) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) c);
0	SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0)	SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT sculptorid, COUNT(*) as cnt FROM sculptures GROUP BY sculptorid)))
1	SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID, A.fname HAVING COUNT(S.sculptureID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Sculptures GROUP BY sculptorID) AS MaxCount)	SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptorid) = (SELECT MAX(work_count) FROM (SELECT COUNT(*) AS work_count FROM sculptures GROUP BY sculptorid)))
1	SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1	SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800 AND (width_mm IS NOT NULL AND height_mm IS NOT NULL)	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1	SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location HAVING COUNT(*) > 0	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1	SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1	SELECT Paintings.paintingID FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
1	SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999;	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
0	SELECT P.location FROM Paintings P WHERE P.medium = 'on panel' OR P.medium = 'on canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0	SELECT location FROM Paintings WHERE medium LIKE 'on panels' OR medium LIKE 'on canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0	SELECT DISTINCT location FROM Paintings WHERE year < 1885 UNION ALL SELECT DISTINCT location FROM Paintings WHERE year > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
0	SELECT location FROM Paintings WHERE year < 1885 UNION SELECT location FROM Paintings WHERE year > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
1	SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT AVG(height_mm) as 'Average Height', AVG(width_mm) as 'Average Width' FROM Paintings WHERE medium = 'oil' AND location = '241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
1	SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)	SELECT height_mm, paintingID FROM paintings WHERE YEAR < 1900 AND height_mm = (SELECT MAX(height_mm) FROM paintings WHERE YEAR < 1900)
1	SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)	SELECT height_mm, paintingID FROM paintings WHERE YEAR < 1900 AND height_mm = (SELECT MAX(height_mm) FROM paintings WHERE YEAR < 1900)
1	SELECT p.year, MAX(p.height_mm) AS 'Maximum Height', MAX(p.width_mm) AS 'Maximum Width' FROM Paintings p GROUP BY p.year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
1	SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
0	SELECT A.lname AS LastName, A.fname AS FirstName, AVG(P.height_mm) AS HeightAverage, AVG(P.width_mm) AS WidthAverage FROM Artists A, Paintings P WHERE A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname	SELECT artists.artistID, AVG(paintings.height_mm) ASAverageHeight, AVG(paintings.width_mm) AS AverageWidth FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY artists.lname, artists.fname
0	SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname	SELECT artists.artistID, AVG(paintings.height_mm) ASAverageHeight, AVG(paintings.width_mm) AS AverageWidth FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY artists.lname, artists.fname
1	SELECT fname, COUNT(*) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
1	SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID HAVING COUNT(paintingID) >= 2	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
1	SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) <= 3	SELECT A.deathyear FROM artists A WHERE 3 >= (SELECT COUNT(*) FROM paintings WHERE painterid = A.artistid)
1	SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4	SELECT deathyear FROM artists WHERE (SELECT COUNT(*) FROM paintings WHERE painterid = artistid) < 4
0	SELECT A.deathYear FROM Artists A WHERE A.artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(num_sculptures) FROM (SELECT COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID) AS SculptureCounts))	WITH tmp as (SELECT A.deathYear, count(S.sculptureID) as cnt FROM Artists A LEFT JOIN Sculptures S on A.artistID = S.sculptorID GROUP BY A.artistID) SELECT tmp.deathYear FROM tmp WHERE cnt = (SELECT min(cnt) FROM tmp)
0	SELECT deathYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Sculptures GROUP BY sculptorID) AS counts))	WITH tmp as (SELECT A.deathYear, count(S.sculptureID) as cnt FROM Artists A LEFT JOIN Sculptures S on A.artistID = S.sculptorID GROUP BY A.artistID) SELECT tmp.deathYear FROM tmp WHERE cnt = (SELECT min(cnt) FROM tmp)
0	SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC, paintingID ASC LIMIT 1	SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240')
0	SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1	SELECT paintingid, height_mm FROM paintings WHERE width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240') AND location = 'Gallery 240'
0	SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' AND year > 1000)	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
0	SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = '240') AND location IN ('240')	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
1	SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
1	SELECT P.paintingID FROM Paintings P WHERE P.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
0	SELECT A.fname, A.lname, COUNT(P.paintingID) AS OilPaintingCount FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname ORDER BY OilPaintingCount DESC LIMIT 3	SELECT fname, lname FROM (SELECT a.fname, a.lname, rank() over (ORDER BY COUNT(p.paintingid) DESC) as rk FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid) WHERE rk <= 3
1	SELECT A.fname, A.lname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium = 'oil' GROUP BY A.artistID, A.fname, A.lname HAVING COUNT(P.paintingID) = (SELECT MAX(PaintCount) FROM (SELECT COUNT(*) AS PaintCount FROM Paintings WHERE medium = 'oil' GROUP BY painterID) Temp)	SELECT fname, lname FROM (SELECT a.fname, a.lname, rank() over (ORDER BY COUNT(p.paintingid) DESC) as rk FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid) WHERE rk = 1
1	SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY Paintings.year ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC, paintingID ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1	SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1	SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID)	SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p) AND a.artistid NOT IN (SELECT s.sculptorid FROM sculptures s)
1	SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE painterID = Artists.artistID) AND NOT EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID)	SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p) AND a.artistid NOT IN (SELECT s.sculptorid FROM sculptures s)
1	SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND location NOT IN (SELECT location FROM Paintings WHERE mediumOn = 'canvas') GROUP BY location	SELECT p.location FROM paintings p WHERE p.year < 1885 EXCEPT SELECT p.location FROM paintings p WHERE p.mediumon = 'canvas'
0	SELECT location FROM Paintings WHERE year < 1885 AND mediumOn <> 'canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
1	SELECT COUNT(Race_Name) FROM race WHERE Race_Name IS NOT NULL	SELECT count(*) FROM race
1	SELECT COUNT(Race_Name) FROM race	SELECT count(*) FROM race
1	SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver FROM race WHERE 'Junior Strous' <> Pole_Position	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1	SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous'	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1	SELECT Constructor FROM driver WHERE Age IS NOT NULL ORDER BY Age ASC	SELECT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT DISTINCT Constructor FROM driver WHERE Constructor IS NOT NULL ORDER BY Age	SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM driver	SELECT max(Age) ,  min(Age) FROM driver
1	SELECT MAX(driver.Age) AS MaximumAge, MIN(driver.Age) AS MinimumAge FROM driver	SELECT max(Age) ,  min(Age) FROM driver
0	SELECT COUNT(DISTINCT Engine) FROM driver GROUP BY Engine HAVING Age > 30 OR Age < 20	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1	SELECT COUNT(DISTINCT Engine) AS EngineCount FROM driver WHERE Age > 30 OR Age < 20	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1	SELECT d.Driver_Name FROM driver AS d ORDER BY d.Driver_Name DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT Driver_Name, Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
1	SELECT a.Driver_Name, b.Race_Name FROM driver a JOIN race b ON a.Driver_ID = b.Driver_ID	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
0	SELECT d.Driver_Name, COUNT(r.Driver_ID) FROM driver d LEFT OUTER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name	SELECT D.driver_name, (SELECT COUNT(*) FROM race R WHERE R.driver_id = D.driver_id) AS races_participated FROM driver D
1	SELECT D.Driver_Name, COUNT(R.Race_Name) FROM driver D LEFT JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID	SELECT D.driver_name, (SELECT COUNT(*) FROM race R WHERE R.driver_id = D.driver_id) AS races_participated FROM driver D
1	SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM race GROUP BY Driver_ID) AS subquery))	SELECT age FROM driver d WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(x.total) FROM (SELECT driver_id, COUNT(*) as total FROM race GROUP BY driver_id) x))
0	SELECT d.Age FROM driver d, (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) as MostRaces WHERE d.Driver_ID = MostRaces.Driver_ID	SELECT age FROM driver d WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(x.total) FROM (SELECT driver_id, COUNT(*) as total FROM race GROUP BY driver_id) x))
1	SELECT D.Driver_Name, D.Age FROM driver D INNER JOIN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Driver_ID) >= 2) R ON D.Driver_ID = R.Driver_ID	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT D.Driver_Name, D.Age FROM driver D WHERE EXISTS (SELECT Driver_ID FROM race WHERE race.Driver_ID = D.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(*) >= 2)	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT r.Race_Name FROM race r, driver d WHERE r.Driver_ID = d.Driver_ID AND d.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID AND d.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT Driver_Name FROM driver WHERE Constructor NOT LIKE 'Bugatti'	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT d.Driver_Name FROM driver d WHERE d.Constructor != 'Bugatti'	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT Constructor, COUNT(*) AS DriverCount FROM driver GROUP BY Constructor	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
1	SELECT Constructor, COUNT(*) AS DriverCount FROM driver GROUP BY Constructor	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
1	SELECT Engine FROM (SELECT Engine, COUNT(*) AS Frequency FROM driver GROUP BY Engine) AS subquery WHERE Frequency = (SELECT MAX(Frequency) FROM (SELECT COUNT(*) AS Frequency FROM driver GROUP BY Engine) AS subquery2)	SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(counts) FROM (SELECT COUNT(engine) AS counts FROM driver GROUP BY engine))
1	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM driver GROUP BY Engine) AS SubQuery)	SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(count) FROM (SELECT engine, COUNT(*) as count FROM driver GROUP BY engine))
1	SELECT DISTINCT Engine FROM driver WHERE Engine IN (SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1)	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT Engine FROM driver d GROUP BY d.Engine HAVING COUNT(DISTINCT d.Driver_ID) >= 2	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT r.Driver_ID FROM race r)	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver GROUP BY Constructor HAVING MIN(Age) < 20 AND MAX(Age) > 30)	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	SELECT DISTINCT d1.Constructor FROM driver d1 JOIN driver d2 ON d1.Constructor = d2.Constructor WHERE d1.Age < 20 AND d2.Age > 30	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	WITH WinningCounts AS (SELECT Winning_team, COUNT(*) AS WinCount FROM race GROUP BY Winning_team) SELECT Winning_team FROM WinningCounts WHERE WinCount > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1	SELECT Winning_team FROM (SELECT Winning_team, COUNT(*) AS TotalWins FROM race GROUP BY Winning_team) AS subquery WHERE TotalWins > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
0	SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')	SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' INTERSECT SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe');
0	WITH James AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe'), Carl AS (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong') SELECT d.Driver_Name FROM driver d JOIN James j ON d.Driver_ID = j.Driver_ID JOIN Carl c ON d.Driver_ID = c.Driver_ID	SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY driver_id HAVING COUNT(DISTINCT pole_position) = 2);
1	SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')	SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')
1	SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')	SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')
1	SELECT COUNT(*) FROM languages	SELECT count(*) FROM languages
1	SELECT COUNT(*) FROM languages	SELECT count(*) FROM languages
1	SELECT name FROM languages ORDER BY name	SELECT name FROM languages ORDER BY name ASC
1	SELECT name AS LanguageName FROM languages ORDER BY LanguageName	SELECT name FROM languages ORDER BY name ASC
1	SELECT name FROM languages WHERE name LIKE '%ish' OR name LIKE 'ish%' OR name LIKE '%ish%'	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT name FROM languages WHERE name LIKE '%ish' OR name LIKE 'ish%' OR name LIKE '%ish%'	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT c.name FROM countries c ORDER BY c.overall_score DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT name AS CountryName FROM countries ORDER BY overall_score DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT AVG(justice_score) AS avg_justice_score FROM countries	SELECT avg(justice_score) FROM countries
1	SELECT AVG(justice_score) AS AverageJusticeScore FROM countries	SELECT avg(justice_score) FROM countries
1	SELECT MAX(health_score) as MaxHealth, MIN(health_score) as MinHealth FROM countries WHERE name != 'Norway'	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT MAX(health_score) AS MaxHealth, MIN(health_score) AS MinHealth FROM countries WHERE name NOT IN (SELECT name FROM countries WHERE name = 'Norway')	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT COUNT(DISTINCT id) FROM (SELECT language_id AS id FROM official_languages) AS distinct_languages	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT COUNT(DISTINCT L.id) FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT name FROM countries WHERE education_score IS NOT NULL ORDER BY education_score DESC	SELECT name FROM countries ORDER BY education_score DESC
1	SELECT name AS CountryName FROM countries ORDER BY education_score DESC	SELECT name FROM countries ORDER BY education_score DESC
1	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT countries.name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)
1	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)
1	SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
1	SELECT countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
0	SELECT L.name, COUNT(DISTINCT O.country_id) FROM languages L LEFT JOIN official_languages O ON L.id = O.language_id GROUP BY L.name	SELECT language.name, (SELECT COUNT(*) FROM official_languages WHERE language_id = language.id) AS CountriesCount FROM languages AS language
0	SELECT name, COUNT(DISTINCT country_id) FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name	SELECT L.name, (SELECT COUNT(distinct O.country_id) FROM official_languages O WHERE L.id = O.language_id) AS num_countries FROM languages L
1	SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(OL.country_id) = (SELECT MAX(C) FROM (SELECT COUNT(country_id) AS C FROM official_languages GROUP BY language_id) AS sub)	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY language_id)))
0	SELECT name FROM (SELECT name, COUNT(OL.language_id) AS lang_count FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY name) AS subquery ORDER BY lang_count DESC LIMIT 1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY language_id)))
1	SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id, L.name HAVING COUNT(*) > 1	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
1	SELECT L.name FROM languages L, official_languages OL WHERE L.id = OL.language_id GROUP BY L.id HAVING COUNT(DISTINCT OL.country_id) >= 2	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
1	SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English'))	SELECT AVG(ov_score) FROM (SELECT overall_score AS ov_score FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English')))
1	SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English'))	SELECT AVG(ovsc) FROM (SELECT overall_score AS ovsc FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'))
0	SELECT L.name FROM languages L WHERE L.id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)	WITH RankedLanguages AS (SELECT language_id, RANK() OVER (ORDER BY COUNT(DISTINCT country_id) DESC) as rank FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages WHERE rank <= 3)
0	SELECT L.name FROM languages L WHERE L.id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(DISTINCT country_id) DESC LIMIT 3)	WITH RankedLanguages AS (SELECT language_id, RANK() OVER (ORDER BY COUNT(DISTINCT country_id) DESC) as rank FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages WHERE rank <= 3)
0	SELECT lang.name FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY lang.name ORDER BY AVG(c.overall_score) DESC	SELECT (SELECT name FROM languages WHERE id = OL.language_id) AS Language FROM official_languages OL JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id ORDER BY AVG(C.overall_score) DESC
0	SELECT languages.name FROM languages INNER JOIN (SELECT language_id, AVG(overall_score) AS avg_score FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id) AS scores ON languages.id = scores.language_id ORDER BY scores.avg_score DESC	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
1	SELECT C.name FROM countries C WHERE EXISTS (SELECT 1 FROM official_languages O WHERE O.country_id = C.id GROUP BY O.country_id HAVING COUNT(O.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS subquery))	SELECT name FROM countries WHERE id IN (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))
1	SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY country_id) sub))	SELECT name FROM countries WHERE id IN (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))
1	SELECT L.name FROM languages L WHERE L.id NOT IN (SELECT language_id FROM official_languages)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT languages.name FROM languages WHERE languages.id NOT IN (SELECT official_languages.language_id FROM official_languages)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
1	SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
1	SELECT name FROM languages WHERE id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id HAVING MAX(C.overall_score) > 95 AND MIN(C.overall_score) < 90)	SELECT name FROM languages WHERE id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95) AND id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90);
1	SELECT L.name FROM languages L WHERE L.id IN (SELECT O.language_id FROM official_languages O JOIN countries C ON O.country_id = C.id WHERE C.overall_score > 95 INTERSECT SELECT O.language_id FROM official_languages O JOIN countries C ON O.country_id = C.id WHERE C.overall_score < 90)	SELECT languages.name FROM languages WHERE languages.id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id GROUP BY ol.language_id HAVING MAX(c.overall_score) > 95 AND MIN(c.overall_score) < 90)
1	SELECT country, town_city FROM Addresses GROUP BY country, town_city	SELECT DISTINCT country, town_city FROM addresses
1	SELECT Addresses.country, Addresses.town_city FROM Addresses	SELECT country ,  town_city FROM Addresses;
0	SELECT property_id, county_state_province FROM Properties CROSS JOIN Addresses WHERE Properties.property_address_id = Addresses.address_id	SELECT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
0	SELECT DISTINCT P.property_id, A.county_state_province FROM Properties P, Addresses A WHERE P.property_address_id = A.address_id	SELECT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
1	SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
1	SELECT f.feature_description FROM Features f WHERE f.feature_name = 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
0	SELECT F.feature_name, F.feature_description FROM Features F JOIN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON F.feature_id = MostCommon.feature_id	SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id HAVING COUNT(pf.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM property_features GROUP BY feature_id))
0	SELECT feature_name, feature_description FROM Features WHERE EXISTS (SELECT 1 FROM Property_Features WHERE Features.feature_id = Property_Features.feature_id GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id HAVING COUNT(pf.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM property_features GROUP BY feature_id))
0	sql placeholder	SELECT MIN(room_info.min_rooms) FROM (SELECT property_id, COUNT(*) AS min_rooms FROM rooms GROUP BY property_id) room_info
1	SELECT MIN(room_count) AS LowestRoomCount FROM Properties	SELECT min(room_count) FROM Properties;
0	SELECT COUNT(*) FROM Properties WHERE (parking_lots = 1) OR (garage_yn = 'Y')	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0	SELECT COUNT(*) FROM Properties WHERE (parking_lots = 1) OR (garage_yn = 'Y')	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code IN (SELECT age_category_code FROM Users WHERE other_user_details LIKE '%Mother%')	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0	SELECT RAC.age_category_description FROM Ref_Age_Categories RAC WHERE EXISTS (SELECT 1 FROM Users U WHERE U.age_category_code = RAC.age_category_code AND U.other_user_details LIKE '%Mother%')	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
1	SELECT U.first_name FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(property_count) FROM (SELECT owner_user_id, COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id) AS Temp))	SELECT U.first_name FROM users U WHERE EXISTS (SELECT 1 FROM properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))
1	SELECT U.first_name FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(property_count) FROM (SELECT COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id) AS Temp))	SELECT U.first_name FROM users U WHERE EXISTS (SELECT 1 FROM properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))
1	WITH GardenProperties AS (SELECT property_id FROM Property_Features JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden') SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM GardenProperties)	SELECT AVG(room_count) FROM properties WHERE EXISTS (SELECT 1 FROM property_features JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden' AND properties.property_id = property_features.property_id)
0	SELECT AVG(total_rooms) FROM (SELECT COUNT(*) AS total_rooms FROM Rooms WHERE property_id IN (SELECT Properties.property_id FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden') GROUP BY property_id) AS room_totals	SELECT AVG(room_count) AS avg_rooms FROM properties WHERE property_id IN (SELECT properties.property_id FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden')
1	SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE 'swimming pool'	SELECT DISTINCT t.town_city FROM addresses t JOIN properties p ON t.address_id = p.property_address_id JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'
1	SELECT DISTINCT town_city FROM Addresses WHERE EXISTS (SELECT * FROM Properties INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Properties.property_address_id = Addresses.address_id AND Features.feature_name = 'swimming pool')	SELECT DISTINCT t.town_city FROM addresses t JOIN properties p ON t.address_id = p.property_address_id JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'
1	SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price IN (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)
1	SELECT P.property_id, P.vendor_requested_price FROM Properties P WHERE P.vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)
0	SELECT AVG(room_count) FROM (SELECT property_id, COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_summary	SELECT avg(room_count) FROM Properties;
0	SELECT AVG(room_count) FROM (SELECT COUNT(room_number) AS room_count FROM Rooms GROUP BY property_id) AS room_summary	SELECT avg(room_count) FROM Properties;
1	SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM Rooms) AS unique_sizes	SELECT count(DISTINCT room_size) FROM Rooms;
1	SELECT COUNT(DISTINCT room_size) AS unique_room_sizes FROM Rooms	SELECT count(DISTINCT room_size) FROM Rooms;
0	SELECT user_id, search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)	SELECT u.user_id, us.search_string FROM user_searches us INNER JOIN users u ON us.user_id = u.user_id WHERE u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)
0	SELECT U.user_id, US.search_seq FROM Users U CROSS JOIN User_Searches US ON U.user_id = US.user_id WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = U.user_id) >= 2 GROUP BY U.user_id, US.search_seq	SELECT DISTINCT us.user_id, us.search_seq FROM user_searches us INNER JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) t ON us.user_id = t.user_id
1	SELECT MAX(search_datetime) AS LatestSearchTime FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
1	SELECT MAX(search_datetime) AS MostRecentSearch FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
1	SELECT search_datetime AS Time, search_string AS Content FROM User_Searches ORDER BY Content DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
1	SELECT search_string AS SearchString, search_datetime AS SearchTime FROM User_Searches ORDER BY SearchString DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0	SELECT DISTINCT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE NOT EXISTS (SELECT NULL FROM Properties pp WHERE pp.owner_user_id = p.owner_user_id GROUP BY pp.owner_user_id HAVING COUNT(pp.property_id) <= 2)	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
0	SELECT DISTINCT A.zip_postcode FROM Addresses A WHERE A.address_id IN (SELECT P.property_address_id FROM Properties P LEFT JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2) AS Sub ON P.owner_user_id = Sub.owner_user_id WHERE Sub.owner_user_id IS NULL)	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
0	SELECT user_id, user_category_description FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
1	SELECT U.user_id, U.user_category_code FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) = 1	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
0	SELECT RAC.age_category_description FROM Ref_Age_Categories RAC JOIN Users U ON RAC.age_category_code = U.age_category_code JOIN User_Searches US ON U.user_id = US.user_id ORDER BY US.search_datetime ASC LIMIT 1	SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_datetime = (SELECT min(search_datetime) FROM User_Searches))
0	SELECT R.age_category_description FROM Ref_Age_Categories R INNER JOIN Users U ON R.age_category_code = U.age_category_code WHERE U.user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)	SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_datetime = (SELECT min(search_datetime) FROM User_Searches))
0	SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'senior citizen' ORDER BY U.first_name ASC	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
0	SELECT U.login_name FROM Users U, Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description LIKE 'Senior Citizens' ORDER BY U.first_name ASC	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
1	SELECT COUNT(search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = 1)	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = 1	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
1	SELECT Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = TRUE	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
0	SELECT A.line_1_number_building, A.line_2_number_street, A.town_city FROM Users U JOIN Addresses A ON U.user_address_id = A.address_id WHERE U.age_category_code = 'SC'	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0	SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses, Users, Ref_Age_Categories WHERE Addresses.address_id = Users.user_address_id AND Users.age_category_code = Ref_Age_Categories.age_category_code AND Ref_Age_Categories.age_category_description = 'Senior'	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
1	SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2	SELECT COUNT(DISTINCT properties.property_id) FROM properties JOIN property_features ON properties.property_id = property_features.property_id GROUP BY properties.property_id HAVING COUNT(property_features.feature_id) >= 2
0	SELECT COUNT(*) FROM (SELECT COUNT(feature_id) AS feature_count, property_id FROM Property_Features GROUP BY property_id HAVING feature_count >= 2) AS property_count	SELECT COUNT(DISTINCT pf.property_id) FROM property_features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2
1	SELECT Properties.property_id, COUNT(Property_Photos.photo_seq) AS photo_count FROM Properties LEFT JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.property_id	SELECT p.property_id, IFNULL(COUNT(pp.photo_seq), 0) FROM properties p LEFT JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY p.property_id
1	SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id	SELECT properties.property_id, COUNT(property_photos.photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.property_id
0	SELECT owner_user_id, COUNT(photo_seq) FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id	SELECT owner_user_id AS user_id, COUNT(photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY owner_user_id
1	SELECT owner_user_id AS user_id, COUNT(*) AS photo_count FROM Properties INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id	SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
0	SELECT SUM(price_max) AS TotalPrice FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('single mother', 'student') GROUP BY Users.user_category_code	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
0	SELECT SUM(Properties.price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id INNER JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description IN ('single mother', 'student')	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
1	SELECT a.datestamp, b.property_name FROM User_Property_History AS a JOIN Properties AS b ON a.property_id = b.property_id ORDER BY a.datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
1	SELECT a.datestamp, b.property_name FROM User_Property_History AS a JOIN Properties AS b ON a.property_id = b.property_id ORDER BY a.datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
0	SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_type_code = R.property_type_code GROUP BY P.property_type_code ORDER BY COUNT(*) DESC LIMIT 1)	SELECT property_type_description, property_type_code FROM (SELECT T1.property_type_description, T1.property_type_code, rank() over (ORDER BY count(*) DESC) as rk FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code) WHERE rk = 1
0	SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(property_type_code) DESC LIMIT 1)	SELECT property_type_description, property_type_code FROM (SELECT T1.property_type_description, T1.property_type_code, rank() over (ORDER BY count(*) DESC) as rk FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code) WHERE rk = 1
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT room_size, COUNT(room_size) AS count_of_rooms FROM Rooms GROUP BY room_size ORDER BY count_of_rooms	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1	SELECT room_size, COUNT(*) AS room_count FROM Rooms GROUP BY room_size	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
0	SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
0	SELECT country FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
1	SELECT first_name, middle_name, last_name FROM Users U WHERE U.user_id IN (SELECT P.owner_user_id FROM Properties P WHERE P.property_address_id = U.user_address_id)	SELECT first_name, middle_name, last_name FROM users WHERE user_id IN (SELECT owner_user_id FROM properties WHERE property_address_id IN (SELECT address_id FROM addresses WHERE address_id = user_address_id))
0	SELECT U.first_name || ' ' || U.middle_name || ' ' || U.last_name AS full_name FROM Users U, Properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id	SELECT first_name, middle_name, last_name FROM users WHERE EXISTS (SELECT 1 FROM properties WHERE property_address_id = user_address_id)
1	SELECT search_string FROM User_Searches WHERE NOT EXISTS (SELECT 1 FROM Properties WHERE owner_user_id = User_Searches.user_id)	SELECT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT properties.owner_user_id FROM properties)
0	SELECT search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT owner_user_id FROM Properties))	SELECT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT properties.owner_user_id FROM properties)
1	SELECT U.last_name, U.user_id FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id HAVING COUNT(P.property_id) >= 2 AND NOT EXISTS (SELECT 1 FROM User_Searches S WHERE S.user_id = U.user_id GROUP BY S.user_id HAVING COUNT(*) > 2)	SELECT u.user_id, u.last_name FROM users u WHERE (SELECT COUNT(*) FROM properties p WHERE p.owner_user_id = u.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches s WHERE s.user_id = u.user_id) <= 2
0	SELECT U.user_id, U.last_name FROM Users U JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) S ON U.user_id = S.user_id JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) P ON U.user_id = P.owner_user_id	SELECT u.user_id, u.last_name FROM users u WHERE (SELECT COUNT(*) FROM properties p WHERE p.owner_user_id = u.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches s WHERE s.user_id = u.user_id) <= 2
0	SELECT COUNT(*) FROM bike WHERE weight > 780 GROUP BY id	SELECT count(*) FROM bike WHERE weight  >  780
1	SELECT product_name, weight FROM bike WHERE price IS NOT NULL ORDER BY price ASC	SELECT product_name ,  weight FROM bike ORDER BY price ASC
1	SELECT `heat`, `name`, `nation` FROM `cyclist`	SELECT heat ,  name ,  nation FROM cyclist
1	SELECT MAX(b.weight), MIN(b.weight) FROM bike b	SELECT max(weight) ,  min(weight) FROM bike
1	SELECT AVG(bike.price) AS AveragePrice FROM bike WHERE bike.material = 'Carbon CC'	SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'
1	SELECT name, result FROM cyclist WHERE nation != 'Russia'	SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'
1	SELECT DISTINCT b.id, b.product_name FROM bike b WHERE b.id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)	SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015
1	SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id, b.product_name HAVING COUNT(cob.cyclist_id) >= 4	SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4
1	SELECT cyclist.id, cyclist.name FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id, cyclist.name HAVING COUNT(cyclists_own_bikes.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery)	SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id HAVING COUNT(cb.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id));
1	SELECT DISTINCT b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')	SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'
1	SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist)	SELECT count(DISTINCT heat) FROM cyclist
1	SELECT COUNT(*) FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id AND b.purchase_year > 2015 WHERE b.cyclist_id IS NULL	SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )
0	SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'	SELECT T1.product_name FROM bike AS T1 WHERE T1.id IN (SELECT T3.bike_id FROM cyclist AS T2 JOIN cyclists_own_bikes AS T3 ON T2.id = T3.cyclist_id WHERE T2.result < '4:21.558')
1	SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))	SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike.id HAVING COUNT(DISTINCT cyclist.name) = 2
0	SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id LEFT JOIN bike b ON cob.bike_id = b.id WHERE b.product_name = 'racing bike' AND cob.bike_id IS NULL	SELECT name, nation, RESULT FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)
1	SELECT product_name FROM bike WHERE material LIKE '%fiber%'	SELECT product_name FROM bike WHERE material LIKE "%fiber%"
1	SELECT c.id AS cyclist_id, COUNT(b.bike_id) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id	SELECT cy.id, COUNT(distinct cb.bike_id) FROM cyclist cy LEFT JOIN cyclists_own_bikes cb ON cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY cy.id
0	SELECT Flavor FROM goods WHERE Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake') AND Food = 'cake'	SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cake' AND goods.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')
1	SELECT Id, Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods g WHERE g.Food = 'cake')	SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cake' AND goods.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')
0	SELECT Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')	SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')
1	SELECT Id, Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')	SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')
1	SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE	SELECT id FROM goods WHERE flavor = 'apple'
1	SELECT Id FROM goods WHERE Flavor = 'apple' COLLATE NOCASE	SELECT id FROM goods WHERE flavor = 'apple'
1	SELECT Id FROM goods WHERE Price < 3	SELECT id FROM goods WHERE price  <  3
1	SELECT Id FROM goods WHERE Price < 3	SELECT id FROM goods WHERE price  <  3
1	SELECT DISTINCT Id FROM customers WHERE EXISTS (SELECT * FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.Id = receipts.CustomerId AND goods.Food = 'cake' AND goods.Flavor = 'lemon')	SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'cake' AND goods.flavor = 'lemon'
1	SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'	SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'cake' AND goods.flavor = 'lemon'
0	SELECT Food, COUNT(DISTINCT CustomerId) AS Customers FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food	SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
1	SELECT Food, COUNT(DISTINCT CustomerId) AS NumberOfCustomers FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber JOIN customers ON receipts.CustomerId = customers.Id GROUP BY Food	SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
0	SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(r.CustomerId) >= 15	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT Id FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15)	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1	SELECT c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
0	SELECT COUNT(DISTINCT Flavor) AS CakeTypes FROM goods WHERE Food = 'Cake'	SELECT count(*) FROM goods WHERE food  =  "Cake"
0	SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food LIKE '%cake%'	SELECT COUNT(DISTINCT id) FROM goods WHERE food = 'cake'
0	SELECT Flavor FROM goods WHERE Food LIKE 'Croissant'	SELECT flavor FROM goods WHERE food  =  "Croissant"
1	SELECT Flavor FROM goods WHERE Food = 'croissant' AND Flavor IS NOT NULL	SELECT flavor FROM goods WHERE food  =  "croissant"
0	SELECT DISTINCT goods.Flavor, goods.Food FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
0	SELECT DISTINCT Flavor FROM goods, items, receipts WHERE goods.Id = items.Item AND items.Receipt = receipts.ReceiptNumber AND receipts.CustomerId = 15	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
1	SELECT g.Food, AVG(g.Price) AS AvgPrice, MAX(g.Price) AS MaximumPrice, MIN(g.Price) AS MinimumPrice FROM goods g GROUP BY g.Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT Food, AVG(Price) as 'Average Price', MIN(Price) as 'Minimum Price', MAX(Price) as 'Maximum Price' FROM goods GROUP BY Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT Receipt FROM items i INNER JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('Cake', 'Cookie') GROUP BY Receipt HAVING COUNT(DISTINCT g.Food) = 2	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
0	SELECT DISTINCT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Food IN ('cakes', 'cookies') GROUP BY i.Receipt HAVING COUNT(DISTINCT g.Food) = 2	SELECT DISTINCT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cake' AND i.receipt = r.receiptnumber) AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.item = g2.id WHERE g2.food = 'cookie' AND i2.receipt = r.receiptnumber)
1	SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant'	SELECT DISTINCT receipts.receiptnumber FROM receipts, customers, items, goods WHERE receipts.customerid = customers.id AND items.receipt = receipts.receiptnumber AND items.item = goods.id AND customers.lastname = 'LOGAN' AND goods.food = 'Croissant'
0	SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'croissant'))	SELECT DISTINCT r.receiptnumber FROM receipts r JOIN customers c ON r.customerid = c.id JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE c.lastname = 'Logan' AND g.food = 'croissant'
1	SELECT ReceiptNumber, Date FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE receipts.ReceiptNumber = items.Receipt AND goods.Price = (SELECT MAX(Price) FROM goods))	SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods)))
1	SELECT R.ReceiptNumber, R.Date FROM receipts R JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods) GROUP BY R.ReceiptNumber, R.Date	SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods)))
0	SELECT G.Flavor, G.Food FROM goods G WHERE G.Id = (SELECT I.Item FROM items I GROUP BY I.Item ORDER BY COUNT(I.Item) ASC LIMIT 1)	SELECT I.item FROM items I GROUP BY I.item HAVING COUNT(I.item) = (SELECT MIN(Count) FROM (SELECT COUNT(item) Count FROM items GROUP BY item))
0	SELECT goods.Flavor FROM goods INNER JOIN (SELECT Item, COUNT(*) AS ItemCount FROM items GROUP BY Item) AS ItemCounts ON goods.Id = ItemCounts.Item ORDER BY ItemCounts.ItemCount ASC LIMIT 1	SELECT I.item FROM items I GROUP BY I.item HAVING COUNT(I.item) = (SELECT MIN(Count) FROM (SELECT COUNT(item) Count FROM items GROUP BY item))
1	SELECT Food, COUNT(Id) FROM goods GROUP BY Food	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT COUNT(*) AS TotalGoods, Food FROM goods GROUP BY Food	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT goods.Food, AVG(goods.Price) AS AveragePrice FROM goods GROUP BY goods.Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT g.Food, AVG(g.Price) AS Average_Price FROM goods g GROUP BY g.Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT g.Id FROM goods g WHERE g.Flavor = 'Apricot' AND g.Price < 5	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
1	SELECT g.Id FROM goods g WHERE g.Flavor = 'Apricot' AND g.Price < 5	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
0	SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10	SELECT flavor FROM goods WHERE food  =  "cake" AND price  >  10
0	SELECT Flavor FROM goods WHERE Food LIKE 'cake' AND Price > 10	SELECT flavor FROM goods WHERE food  =  "cake" AND price  >  10
1	SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods WHERE Price IS NOT NULL)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
1	SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
0	SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart')	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
0	SELECT DISTINCT Id FROM goods g WHERE g.Price < (SELECT Price FROM goods t WHERE t.Flavor = 'Tart' ORDER BY Price LIMIT 1)	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE food  =  "Tart")
1	SELECT DISTINCT r.ReceiptNumber FROM receipts AS r INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE g.Price > 13	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1	SELECT DISTINCT ReceiptNumber FROM receipts, items, goods WHERE receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id AND goods.Price > 13	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
0	SELECT r.Date FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 AND i.Receipt = r.ReceiptNumber)	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
0	SELECT r.Date FROM receipts r WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt = r.ReceiptNumber AND g.Price > 15)	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
1	SELECT Id FROM goods WHERE Id LIKE '%%APP%%'	SELECT id FROM goods WHERE id LIKE "%APP%"
1	SELECT Id FROM goods WHERE Id LIKE '%APP%'	SELECT id FROM goods WHERE id LIKE "%APP%"
0	SELECT Flavor, Price FROM goods WHERE Id LIKE '%_70%'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1	SELECT g.Id, g.Price FROM goods g WHERE g.Id LIKE '%70%'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1	SELECT LastName FROM customers ORDER BY LastName	SELECT LastName FROM customers ORDER BY LastName
1	SELECT LastName FROM customers ORDER BY LastName	SELECT LastName FROM customers ORDER BY LastName
1	SELECT goods.Id FROM goods ORDER BY goods.Id ASC	SELECT DISTINCT id FROM goods ORDER BY id
1	SELECT DISTINCT goods.Id FROM goods ORDER BY goods.Id ASC	SELECT DISTINCT id FROM goods ORDER BY id
1	SELECT DISTINCT R.ReceiptNumber FROM receipts R LEFT JOIN items I ON R.ReceiptNumber = I.Receipt LEFT JOIN goods G ON I.Item = G.Id WHERE (G.Flavor = 'apple' AND G.Food = 'pie') OR R.CustomerId = 12	SELECT DISTINCT r.receiptnumber FROM receipts r WHERE r.customerid = 12 OR r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie')
1	SELECT r.ReceiptNumber FROM receipts r WHERE r.CustomerId = 12 UNION SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie'	SELECT receipts.receiptnumber FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.receiptnumber AND goods.flavor = 'apple' AND goods.food = 'pie') OR receipts.customerid = 12
1	SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(r.Date) FROM receipts r)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
1	SELECT ReceiptNumber, Date FROM receipts WHERE Date IN (SELECT MAX(Date) FROM receipts)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
1	SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10)	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
1	SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
1	SELECT Id FROM goods WHERE Food = 'Cookie' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cake' AND Price BETWEEN 3 AND 7	SELECT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7
0	SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price >= 3.00 AND Price <= 7.00	SELECT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7
1	SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts))	SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))
0	SELECT c.FirstName, c.LastName FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts)	SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))
1	SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')	SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')
0	SELECT AVG(Price) FROM goods WHERE Flavor LIKE '%blackberry%' OR Flavor LIKE '%blueberry%'	SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')
0	SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1	SELECT MIN(price) FROM goods WHERE flavor = 'cheese'
0	SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price LIMIT 1	SELECT id FROM goods WHERE flavor = 'cheese' AND price = (SELECT MIN(price) FROM goods WHERE flavor = 'cheese')
1	SELECT Flavor, MAX(Price) HighestPrice, MIN(Price) LowestPrice, AVG(Price) AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Flavor, MAX(Price) AS 'Maximum Price', MIN(Price) AS 'Minimum Price', AVG(Price) AS 'Average Price' FROM goods GROUP BY Flavor ORDER BY Flavor ASC	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
1	SELECT Food, MIN(Price) AS Minimum, MAX(Price) AS Maximum FROM goods GROUP BY Food ORDER BY Food ASC	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
0	SELECT Date FROM (SELECT Date, COUNT(*) AS NumReceipts FROM receipts GROUP BY Date) AS ReceiptCounts ORDER BY NumReceipts DESC LIMIT 3	WITH RankedDates AS (SELECT date, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM receipts GROUP BY date) SELECT date FROM RankedDates WHERE rnk <= 3
0	SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3	WITH RankedDates AS (SELECT date, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM receipts GROUP BY date) SELECT date FROM RankedDates WHERE rnk <= 3
0	SELECT FirstName, LastName, COUNT(ReceiptNumber) AS NumberOfReceipts FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY NumberOfReceipts DESC LIMIT 1	WITH cnt AS ( SELECT CustomerId, count(*) AS cnt FROM receipts GROUP BY CustomerId ) SELECT CustomerId, cnt FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
1	SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM receipts GROUP BY CustomerId) AS SubQuery)	WITH cnt AS ( SELECT CustomerId, count(*) AS cnt FROM receipts GROUP BY CustomerId ) SELECT CustomerId, cnt FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
1	SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) AS distinct_customers FROM receipts GROUP BY receipts.Date	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
1	SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
1	SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts INNER JOIN items ON ReceiptNumber = Receipt INNER JOIN goods ON Item = Id WHERE Flavor = 'apple' AND Food = 'Tart')	SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tart')))
0	SELECT c.FirstName, c.LastName FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'apple' AND g.Food = 'Tarts'	SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tart')))
0	SELECT goods.Id FROM goods WHERE goods.Food = 'Cookies' AND goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'Croissant')	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
0	SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
1	SELECT g1.Id FROM goods g1 WHERE g1.Food = 'Cake' AND g1.Price >= (SELECT AVG(g2.Price) FROM goods g2 WHERE g2.Food = 'Tart' GROUP BY g2.Food)	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
1	SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
1	SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)	SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)
1	SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods)	SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)
1	SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
1	SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
0	SELECT g.Id, g.Flavor FROM goods AS g WHERE g.Food = 'Cakes' ORDER BY g.Flavor ASC	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0	SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor DESC	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
1	SELECT DISTINCT g.Id FROM goods g WHERE g.Flavor = 'chocolate' AND g.Id NOT IN (SELECT i.Item FROM items i GROUP BY i.Item HAVING COUNT(*) > 10)	SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10
0	SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'chocolate' GROUP BY items.Item HAVING COUNT(items.Item) <= 10	SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10
1	SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Tart')	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
1	SELECT DISTINCT g1.Flavor FROM goods g1 LEFT JOIN goods g2 ON g1.Flavor = g2.Flavor AND g2.Food = 'Tart' WHERE g1.Food = 'Cake' AND g2.Flavor IS NULL	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0	SELECT Flavor, Food FROM goods WHERE Id IN (SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3)	WITH cnt AS ( SELECT item, COUNT(*) AS cnt FROM items GROUP BY item ) SELECT item FROM cnt WHERE EXISTS ( SELECT 1 FROM (SELECT cnt FROM cnt ORDER BY cnt DESC LIMIT 3) t WHERE cnt.cnt = t.cnt )
0	SELECT G.Food, COUNT(I.Item) AS TotalPurchases FROM goods G JOIN items I ON G.Id = I.Item GROUP BY G.Food ORDER BY TotalPurchases DESC LIMIT 3	WITH cnt AS ( SELECT item, COUNT(*) AS cnt FROM items GROUP BY item ) SELECT item FROM cnt WHERE EXISTS ( SELECT 1 FROM (SELECT cnt FROM cnt ORDER BY cnt DESC LIMIT 3) t WHERE cnt.cnt = t.cnt )
1	SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT r.CustomerId FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT CustomerId FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT CustomerId FROM (SELECT r.CustomerId, AVG(g.Price) AS AveragePrice FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId) AS SubQuery WHERE AveragePrice > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date HAVING SUM(goods.Price) > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT DISTINCT r.Date FROM receipts r, items i, goods g WHERE r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT COUNT(1) FROM driver	SELECT count(*) FROM driver
1	SELECT COUNT(1) FROM driver	SELECT count(*) FROM driver
1	SELECT Make, COUNT(*) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT Make, COUNT(Driver) FROM driver WHERE Points > 150 GROUP BY Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make ORDER BY Make	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT Make, AVG(Age) AS Average_Age FROM driver WHERE Age IS NOT NULL GROUP BY Make	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT AVG(Laps) FROM driver WHERE Age < 20 AND Laps > 0	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT AVG(Laps) FROM driver d WHERE d.Age < 20 AND d.Laps IS NOT NULL	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1	SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1	SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1	SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1
1	SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1	SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1
1	SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT MAX(Points) AS Max_Points, MIN(Points) AS Min_Points FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points < 150	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT COUNT(Driver_ID) AS DriverCount FROM driver WHERE Points < 150	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT Driver FROM driver ORDER BY CAST(Age AS INTEGER) ASC	SELECT Driver FROM driver ORDER BY Age ASC
1	SELECT Driver FROM driver ORDER BY Age	SELECT Driver FROM driver ORDER BY Age ASC
0	SELECT Driver FROM driver ORDER BY Points DESC, Driver	SELECT Driver FROM driver ORDER BY Points DESC
1	SELECT Driver FROM driver ORDER BY Points DESC	SELECT Driver FROM driver ORDER BY Points DESC
0	SELECT Driver, Country FROM driver GROUP BY Driver, Country	SELECT T2.Driver, T1.Country FROM country AS T1 RIGHT JOIN driver AS T2 ON T1.Country_ID = T2.Country
0	SELECT Driver AS DriverName, Country AS DriverCountry FROM driver	SELECT T2.Driver, T1.Country FROM country AS T1 RIGHT JOIN driver AS T2 ON T1.Country_ID = T2.Country
1	SELECT MAX(Points) AS MaxPoints FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT AVG(driver.Age) FROM driver JOIN country ON driver.Country = country.Country_Id AND country.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
0	SELECT AVG(Age) FROM driver d INNER JOIN country c ON d.Country = c.Country WHERE c.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
0	SELECT Country FROM driver WHERE Points > 150 GROUP BY Country	SELECT country.country FROM country WHERE country_id IN (SELECT country_id FROM country JOIN driver ON country.country_id = driver.country WHERE driver.points > 150)
0	SELECT Country FROM driver WHERE Points > 150 GROUP BY Country	SELECT country.country FROM country WHERE country_id IN (SELECT country_id FROM country JOIN driver ON country.country_id = driver.country WHERE driver.points > 150)
0	SELECT C.Capital FROM country C WHERE EXISTS (SELECT 1 FROM driver D WHERE D.Country = C.Country_Id AND D.Points = (SELECT MAX(Points) FROM driver))	SELECT (SELECT capital FROM country WHERE country = d.country) AS capital FROM driver d WHERE d.points = (SELECT MAX(points) FROM driver)
0	SELECT c.Capital FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Points = (SELECT MAX(Points) FROM driver))	SELECT (SELECT capital FROM country WHERE country = d.country) AS capital FROM driver d WHERE d.points = (SELECT MAX(points) FROM driver)
1	SELECT Make, COUNT(Driver) FROM driver GROUP BY Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
1	SELECT d.Make, COUNT(d.Driver_ID) FROM driver d GROUP BY d.Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
1	SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(Driver_ID) AS DriverCount FROM driver GROUP BY Make) AS SubQuery)	WITH Ranked AS (SELECT make, RANK() OVER (ORDER BY COUNT(driver_id) DESC) AS rank FROM driver GROUP BY make) SELECT make FROM Ranked WHERE rank = 1
1	SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Driver_ID) AS count FROM driver GROUP BY Make) AS counts)	SELECT make FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp WHERE num_drivers = (SELECT MAX(num_drivers) FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp2)
1	SELECT Make FROM driver d GROUP BY d.Make HAVING COUNT(DISTINCT d.Driver_ID) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
0	SELECT D.Make FROM driver D JOIN team_driver TD ON D.Driver_ID = TD.Driver_ID GROUP BY D.Make HAVING COUNT(DISTINCT D.Driver_ID) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1	SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT NULL FROM team_driver td WHERE td.Team_ID = t.Team_ID)	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
1	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
0	WITH DodgeCountries AS (SELECT Country FROM driver WHERE Make = 'Dodge'), ChevroletCountries AS (SELECT Country FROM driver WHERE Make = 'Chevrolet') SELECT Country FROM DodgeCountries WHERE Country IN (SELECT Country FROM ChevroletCountries)	SELECT Country FROM country WHERE Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Dodge' ) AND Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Chevrolet' )
0	SELECT DISTINCT Country FROM driver WHERE Make = 'Dodge' OR Make = 'Chevrolet' GROUP BY Country HAVING COUNT(DISTINCT Make) > 1	SELECT Country FROM country WHERE Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Dodge' ) AND Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Chevrolet' )
1	SELECT SUM(Points) AS Total, AVG(Points) AS Average FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
1	SELECT SUM(Points) AS Total, AVG(Points) AS Average FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
0	SELECT DISTINCT c.Country FROM country c WHERE c.Country NOT IN (SELECT Country FROM driver)	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
0	SELECT DISTINCT c.Country FROM country c WHERE c.Country NOT IN (SELECT Country FROM driver)	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
1	SELECT t.Manager, t.Sponsor FROM team t WHERE EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) sub))	WITH DriverCounts AS ( SELECT t.team_id, COUNT(td.team_id) AS num_drivers FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ) SELECT t.manager, t.sponsor FROM team t INNER JOIN DriverCounts dc ON t.team_id = dc.team_id WHERE dc.num_drivers = ( SELECT MAX(num_drivers) FROM DriverCounts )
1	SELECT t.Manager, t.Sponsor FROM team t WHERE EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) tmp))	WITH DriverCounts AS ( SELECT t.team_id, COUNT(td.team_id) AS num_drivers FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ) SELECT t.manager, t.sponsor FROM team t INNER JOIN DriverCounts dc ON t.team_id = dc.team_id WHERE dc.num_drivers = ( SELECT MAX(num_drivers) FROM DriverCounts )
1	SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) >= 2)	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT COUNT(*) FROM (SELECT DISTINCT Institution_ID FROM institution) AS unique_institutions	SELECT count(*) FROM institution
1	SELECT COUNT(Institution_ID) AS InstitutionCount FROM institution	SELECT count(*) FROM institution
1	SELECT Name FROM institution ORDER BY Name ASC, Institution_ID ASC	SELECT Name FROM institution ORDER BY Name ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Name	SELECT Name FROM institution ORDER BY Name ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Founded ASC	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Founded	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT City, Province FROM institution	SELECT City ,  Province FROM institution
1	SELECT City, Province FROM institution	SELECT City ,  Province FROM institution
1	SELECT MAX(Enrollment), MIN(Enrollment) FROM institution	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT MAX(Enrollment) 'Maximum Enrollment', MIN(Enrollment) 'Minimum Enrollment' FROM institution	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT Affiliation FROM institution WHERE City <> 'Vancouver' AND City IS NOT NULL	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT Affiliation FROM institution WHERE City != 'Vancouver'	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
0	SELECT DISTINCT Stadium FROM institution ORDER BY Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
1	SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)	SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution)
1	SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)	SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution)
0	SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID	SELECT i.Name, c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID
0	SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID	SELECT i.Name, c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID
0	SELECT C.Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID AND I.Enrollment = (SELECT MIN(Enrollment) FROM institution)	SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i WHERE enrollment = (SELECT MIN(enrollment) FROM institution)
0	SELECT C.Nickname FROM Championship C LEFT JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Enrollment = (SELECT MIN(Enrollment) FROM institution)	SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i WHERE enrollment = (SELECT MIN(enrollment) FROM institution)
0	SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship GROUP BY Institution_ID ORDER BY COUNT(*) DESC)	SELECT i.Name FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC
0	SELECT institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC	SELECT i.Name FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC
0	SELECT Name FROM institution i WHERE i.Institution_ID IN (SELECT c.Institution_ID FROM Championship c)	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1	SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
0	SELECT TOTAL(Championship.Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT TOTAL(Championship.Number_of_Championships) FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT Affiliation, COUNT(*) AS Total FROM institution GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS Counts)	SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM institution GROUP BY affiliation))
1	SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS Counts)	SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) Cnt FROM institution GROUP BY affiliation))
1	SELECT Founded AS Year FROM institution GROUP BY Year HAVING COUNT(Institution_ID) > 1	SELECT founded FROM institution GROUP BY founded HAVING COUNT(*) > 1
1	SELECT Founded AS Year, COUNT(*) FROM institution GROUP BY Year HAVING COUNT(*) > 1	SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
0	SELECT Nickname FROM Championship AS C, institution AS I WHERE C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC	SELECT c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC
0	SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Capacity DESC, institution.Name ASC	SELECT c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC
0	SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary') GROUP BY City	SELECT SUM(enrollment) FROM institution WHERE city IN ('Vancouver', 'Calgary')
1	SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')	SELECT enrollment FROM institution WHERE city IN ('Calgary', 'Vancouver')
1	SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT DISTINCT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) INTERSECT SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded > 1950)	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT COUNT(DISTINCT Province) FROM institution WHERE Province IS NOT NULL	SELECT count(DISTINCT Province) FROM institution
1	SELECT COUNT(DISTINCT Province) FROM institution WHERE Province IS NOT NULL	SELECT count(DISTINCT Province) FROM institution
1	SELECT * FROM Warehouses WHERE Code <> ''	SELECT * FROM warehouses
1	SELECT W.Code, W.Location, W.Capacity FROM Warehouses W	SELECT * FROM warehouses
1	SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code AND w.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code AND w.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT Contents FROM Boxes WHERE Value > 150	SELECT CONTENTS FROM boxes WHERE Value  >  150
1	SELECT Contents FROM Boxes WHERE Value > 150.0	SELECT CONTENTS FROM boxes WHERE Value  >  150
1	SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageBoxValue FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code	SELECT w.Code, AVG(b.Value) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code
1	SELECT AVG(B.Value) AS AverageBoxValue, W.Code FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code	SELECT w.Code, AVG(b.Value) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code
1	SELECT AVG(Value), SUM(Value) FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Value), SUM(Value) FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Max_Value FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, AVG(Value) AS 'Average Value', MAX(Value) AS 'Maximum Value' FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(total_sum) FROM (SELECT SUM(Value) AS total_sum FROM Boxes GROUP BY Contents))	SELECT t.contents FROM (SELECT contents, SUM(value) AS total_value FROM boxes GROUP BY contents) t WHERE t.total_value = (SELECT MAX(t2.total_value) FROM (SELECT SUM(value) AS total_value FROM boxes GROUP BY contents) t2)
0	SELECT Contents FROM (SELECT Contents, Value, RANK() OVER (ORDER BY Value DESC) AS rank FROM Boxes) WHERE rank = 1	SELECT DISTINCT contents FROM boxes WHERE value = (SELECT MAX(value) FROM boxes)
1	SELECT AVG(Value) FROM Boxes AS Average_Value	SELECT avg(value) FROM boxes
1	SELECT AVG(Value) FROM Boxes AS Average_Value	SELECT avg(value) FROM boxes
1	SELECT DISTINCT Contents FROM Boxes GROUP BY Contents	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT Contents FROM Boxes GROUP BY Contents	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT COUNT(DISTINCT B.Contents) FROM Boxes B	SELECT count(DISTINCT CONTENTS) FROM boxes
1	SELECT COUNT(DISTINCT Contents) FROM Boxes	SELECT count(DISTINCT CONTENTS) FROM boxes
1	SELECT DISTINCT Location FROM Warehouses WHERE Location != ''	SELECT DISTINCT location FROM warehouses;
1	SELECT DISTINCT Location FROM Warehouses WHERE Location != ''	SELECT DISTINCT location FROM warehouses;
1	SELECT Code FROM Boxes AS B WHERE EXISTS (SELECT 1 FROM Warehouses AS W WHERE W.Code = B.Warehouse AND W.Location IN ('Chicago', 'New York'))	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(Boxes.Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(Value) FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
0	SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') AND Contents IN (SELECT DISTINCT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York'))	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')	SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')
1	SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')	SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')
1	SELECT DISTINCT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' UNION SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
1	SELECT DISTINCT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Warehouses.Code AND (Contents = 'Rocks' OR Contents = 'Scissors'))	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
0	SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING SUM(CASE WHEN Contents = 'Rocks' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Contents = 'Scissors' THEN 1 ELSE 0 END) > 0)	SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT warehouse FROM boxes WHERE contents = 'Scissors')
0	SELECT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors') GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) = 2	SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT warehouse FROM boxes WHERE contents = 'Scissors')
1	SELECT Code AS BoxCode, Contents AS BoxContents FROM Boxes ORDER BY Value	SELECT code ,  CONTENTS FROM boxes ORDER BY value
1	SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value ASC	SELECT code ,  CONTENTS FROM boxes ORDER BY value
1	SELECT Code, Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(Value) FROM Boxes AS B2)	SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)
1	SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(B.Value) FROM Boxes B)	SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)
1	SELECT DISTINCT Contents FROM Boxes B1 WHERE B1.Value > (SELECT AVG(B2.Value) FROM Boxes B2)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT Contents FROM Boxes B1 WHERE B1.Value > (SELECT AVG(B2.Value) FROM Boxes B2)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT Contents FROM Boxes GROUP BY Contents ORDER BY Contents ASC	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
1	SELECT DISTINCT Contents FROM Boxes ORDER BY LOWER(Contents) ASC	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
0	SELECT Code FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Rocks')	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
0	SELECT Code FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Rocks')	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
1	SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' AND Value IS NOT NULL)	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
1	SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' GROUP BY Contents)	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
0	WITH MaxCapacity AS (SELECT MAX(Capacity) AS Capacity FROM Warehouses) SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses, MaxCapacity WHERE Warehouses.Capacity = MaxCapacity.Capacity)	SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = w.code) FROM warehouses w WHERE capacity = (SELECT MAX(capacity) FROM warehouses)
0	SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Capacity = (SELECT MAX(Capacity) FROM Warehouses))	SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = w.code) FROM warehouses w WHERE capacity = (SELECT MAX(capacity) FROM warehouses)
1	SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AverageValue > 150	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT B.Warehouse, AVG(B.Value) AS AverageValue FROM Boxes B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS BoxCount FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS BoxCount FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Location, SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Avg_Capacity, MAX(Capacity) AS Max_Capacity FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT Location, SUM(Capacity) AS 'Total Capacity', AVG(Capacity) AS 'Average Capacity', MAX(Capacity) AS 'Maximum Capacity' FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses	SELECT sum(capacity) FROM warehouses
1	SELECT SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses	SELECT sum(capacity) FROM warehouses
0	SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location	SELECT w.location, MAX(b.value) max_val FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.location
0	SELECT Warehouses.Location, MAX(Boxes.Value) FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location	SELECT w.location, MAX(b.value) max_val FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.location
1	SELECT W.Code, COUNT(B.Warehouse) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code	SELECT warehouses.code, COUNT(boxes.code) FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code
1	SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS TotalBoxes FROM Warehouses	SELECT warehouses.code, COUNT(boxes.code) AS box_total FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code
1	SELECT COUNT(*) FROM (SELECT DISTINCT Location FROM Warehouses, Boxes WHERE Warehouses.Code = Boxes.Warehouse AND Boxes.Contents = 'Rocks')	SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
0	SELECT DISTINCT COUNT(Warehouse) FROM Boxes WHERE Contents = 'Rocks' GROUP BY Warehouse	SELECT COUNT(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks';
1	SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
1	SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
1	SELECT w.Code, COUNT(b.Code) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code	SELECT w.code, COUNT(b.code) FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code
1	SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS BoxCount FROM Warehouses	SELECT w.code, COUNT(b.code) as box_count FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code
1	SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code	SELECT w2.code, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w2.code) FROM warehouses w2
1	SELECT w.Code, COUNT(DISTINCT b.Contents) FROM Warehouses AS w LEFT JOIN Boxes AS b ON w.Code = b.Warehouse GROUP BY w.Code	SELECT w2.code, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w2.code) FROM warehouses w2
0	SELECT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Code GROUP BY Warehouse HAVING SUM(Value) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))	SELECT w.code FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity
1	SELECT W.Code FROM Warehouses W JOIN (SELECT Warehouse, COUNT(*) AS BoxCount FROM Boxes GROUP BY Warehouse) AS B ON W.Code = B.Warehouse WHERE B.BoxCount > W.Capacity	SELECT w.code FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity
1	SELECT SUM(Value) FROM Boxes AS B WHERE B.Warehouse NOT IN (SELECT W.Code FROM Warehouses AS W WHERE W.Location = 'Chicago')	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location <> 'Chicago'	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT University_Name, City, State FROM university ORDER BY University_Name ASC	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1	SELECT University_Name, City, State FROM university ORDER BY University_Name ASC	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1	SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT COUNT(*) AS NumberOfUniversities FROM university WHERE State = 'Illinois' OR State = 'Ohio'	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT MAX(Enrollment) AS MaxEnrollment, AVG(Enrollment) AS AvgEnrollment, MIN(Enrollment) AS MinEnrollment FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT MAX(Enrollment) AS Max_Enrollment, AVG(Enrollment) AS Avg_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT U.Team_Name FROM university AS U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)	SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)
1	SELECT U.Team_Name FROM university U WHERE U.Enrollment > (SELECT AVG(Enrollment) FROM university)	select team_name from university where enrollment  >  (select avg(enrollment) from university)
0	SELECT Home_Conference FROM university	SELECT DISTINCT home_conference FROM University
1	SELECT DISTINCT Home_Conference FROM university WHERE Home_Conference IS NOT NULL	SELECT DISTINCT home_conference FROM University
1	SELECT Home_Conference, COUNT(*) AS University_Count FROM university GROUP BY Home_Conference	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
1	SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
1	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)	SELECT state FROM university GROUP BY state HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM university GROUP BY state))
1	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)	SELECT state FROM university GROUP BY state HAVING COUNT(university_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(university_id) AS cnt FROM university GROUP BY state))
1	SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
1	SELECT DISTINCT u.Home_Conference FROM university u WHERE (SELECT AVG(Enrollment) FROM university WHERE Home_Conference = u.Home_Conference) > 2000	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
1	SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(TotalEnrollment) FROM (SELECT SUM(Enrollment) AS TotalEnrollment FROM university GROUP BY Home_Conference) AS TempTable)	WITH Enrollment_Sums AS (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM Enrollment_Sums WHERE total_enrollment = (SELECT MIN(total_enrollment) FROM Enrollment_Sums)
1	SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING SUM(u.Enrollment) = (SELECT MIN(total_enrollment) FROM (SELECT SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) AS temp)	WITH Enrollment_Sums AS (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM Enrollment_Sums WHERE total_enrollment = (SELECT MIN(total_enrollment) FROM Enrollment_Sums)
1	SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT Major_Name, Rank FROM major m CROSS JOIN major_ranking mr ON m.Major_ID = mr.Major_ID CROSS JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1	SELECT Major_Name, Rank FROM major, major_ranking, university WHERE major.Major_ID = major_ranking.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
0	SELECT DISTINCT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'	SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.rank = 1 AND major.major_name = 'Accounting')
0	SELECT DISTINCT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'	SELECT U.university_name, U.city, U.state FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking R INNER JOIN major M ON M.major_id = R.major_id WHERE R.university_id = U.university_id AND M.major_name = 'Accounting' AND R.rank = 1)
1	SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))	SELECT U.university_name FROM university AS U JOIN (SELECT university_id, COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id HAVING c = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id))) AS R ON U.university_id = R.university_id
1	SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(CountRank) FROM (SELECT COUNT(*) AS CountRank FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) T))	SELECT U.university_name FROM university AS U JOIN (SELECT university_id, COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id HAVING c = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id))) AS R ON U.university_id = R.university_id
1	SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1 GROUP BY m.University_ID)	SELECT u.university_name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking mr WHERE mr.rank = 1 AND mr.university_id = u.university_id)
1	SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)	SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)
1	SELECT U.University_Name FROM university U WHERE EXISTS (SELECT * FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Accounting') AND EXISTS (SELECT * FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name = 'Urban Education')	SELECT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' INTERSECT SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Urban Education')
1	WITH Accounting_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting')), Urban_Education_Universities AS (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM Accounting_Universities INTERSECT SELECT University_ID FROM Urban_Education_Universities)	SELECT university_name FROM university WHERE university_id IN (SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Accounting' INTERSECT SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Urban Education')
0	SELECT University_Name, Rank FROM university NATURAL JOIN overall_ranking WHERE State = 'Wisconsin'	SELECT T1.University_Name, T2.Rank FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
0	SELECT name, rank FROM (SELECT University_Name AS name, Rank FROM university JOIN overall_ranking USING (University_ID) WHERE State = 'Wisconsin') AS subquery	SELECT T1.University_Name, T2.Rank FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
1	SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Research_point = (SELECT MAX(Research_point) FROM overall_ranking)	SELECT U.university_name FROM university U INNER JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.research_point = (SELECT MAX(research_point) FROM overall_ranking)
1	SELECT U.University_Name FROM university U, overall_ranking O WHERE U.University_ID = O.University_ID AND O.Research_point = (SELECT MAX(Research_point) FROM overall_ranking)	SELECT U.university_name FROM university U INNER JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.research_point = (SELECT MAX(research_point) FROM overall_ranking)
0	SELECT university.University_Name FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC	SELECT T1.University_Name FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_Point
0	SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point ASC	SELECT T1.University_Name FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_Point
0	SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank >= 3)	SELECT university_name FROM university WHERE EXISTS (SELECT 1 FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.university_id = university.university_id AND major_name = 'Accounting' AND rank <= 3)
0	SELECT DISTINCT U.University_Name FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND M.Major_Name = 'Accounting' AND MR.Rank >= 3	SELECT university_name FROM university WHERE EXISTS (SELECT 1 FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.university_id = university.university_id AND major_name = 'Accounting' AND rank <= 3)
0	SELECT SUM(u.Enrollment) FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID WHERE o.Rank <= 5	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT U.University_Name, O.Citation_point FROM university U LEFT JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS TempTable)	SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 WHERE EXISTS ( SELECT 1 FROM ( SELECT T2.Reputation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3 ) T WHERE T.Reputation_point = T2.Reputation_point )
0	SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3	SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 WHERE EXISTS ( SELECT 1 FROM ( SELECT T2.Reputation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3 ) T WHERE T.Reputation_point = T2.Reputation_point )
1	SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT u.State FROM university u GROUP BY u.State HAVING COUNT(CASE WHEN u.Enrollment < 3000 THEN 1 ELSE NULL END) > 2	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT Title FROM Movies WHERE Rating IS NULL	SELECT title FROM movies WHERE rating IS NULL
1	SELECT Title FROM Movies WHERE Rating IS NULL	SELECT title FROM movies WHERE rating IS NULL
1	SELECT m.Title FROM Movies m WHERE m.Rating = 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT m.Title FROM Movies m WHERE m.Rating = 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1	SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
0	SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.code, T2.name
0	SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.code, T2.name
1	SELECT COUNT(*) FROM Movies WHERE Rating = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
1	SELECT COUNT(*) FROM Movies WHERE Rating = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
1	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT COUNT(DISTINCT movie) FROM movietheaters
1	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT COUNT(DISTINCT movie) FROM movietheaters
0	SELECT DISTINCT COUNT(Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT DISTINCT COUNT(Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(DISTINCT Code) AS TotalTheaters FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
0	SELECT COUNT(DISTINCT Code) AS NumberOfTheaters FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
1	SELECT m.Rating FROM Movies m WHERE m.Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
1	SELECT m.Rating FROM Movies m WHERE m.Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
0	SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie AND Movies.Rating IN ('G', 'PG'))	SELECT DISTINCT mt.name FROM movietheaters AS mt JOIN movies AS m ON mt.movie = m.code WHERE m.rating IN ('G', 'PG')
0	SELECT MT.Name FROM MovieTheaters MT LEFT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G' OR M.Rating = 'PG'	SELECT DISTINCT mt.name FROM movietheaters AS mt JOIN movies AS m ON mt.movie = m.code WHERE m.rating IN ('G', 'PG')
0	SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND MT.Name IN ('Odeon', 'Imperial')	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')
1	SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' OR Name = 'Imperial')	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')
0	SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Title HAVING COUNT(DISTINCT MT.Name) = 2	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1	WITH OdeonMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon'), ImperialMovies AS (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial') SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM OdeonMovies INTERSECT SELECT Movie FROM ImperialMovies)	SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1	SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name = 'Odeon' WHERE MT.Movie IS NULL	SELECT title FROM movies WHERE NOT EXISTS (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name = 'Odeon')
1	SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie AND MT.Name = 'Odeon' WHERE MT.Movie IS NULL	SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1	SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC	SELECT title FROM movies ORDER BY title
1	SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC	SELECT title FROM movies ORDER BY title
1	SELECT m.Title FROM Movies m ORDER BY m.Rating	SELECT title FROM movies ORDER BY rating
0	SELECT Title FROM Movies ORDER BY Rating, Title	SELECT title FROM movies ORDER BY rating
1	SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(DISTINCT Movie) = (SELECT MAX(MovieCount) FROM (SELECT COUNT(DISTINCT Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery)	SELECT name FROM movietheaters GROUP BY name HAVING COUNT(DISTINCT movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(DISTINCT movie) AS movie_count FROM movietheaters GROUP BY name) T)
0	WITH MovieCount AS (SELECT Name, COUNT(Movie) AS TotalMovies FROM MovieTheaters GROUP BY Name) SELECT Name FROM MovieCount WHERE TotalMovies = (SELECT MAX(TotalMovies) FROM MovieCount)	SELECT name FROM movietheaters GROUP BY name HAVING COUNT(DISTINCT movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(DISTINCT movie) AS movie_count FROM movietheaters GROUP BY name) T)
0	SELECT Title FROM Movies WHERE Code = (SELECT Movie FROM (SELECT Movie, COUNT(*) AS Count FROM MovieTheaters GROUP BY Movie) AS Temp ORDER BY Count DESC LIMIT 1)	WITH CNT AS ( SELECT m.Title, COUNT(mt.Code) AS cnt FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code ) SELECT Title FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
0	SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1	WITH CNT AS ( SELECT m.Title, COUNT(mt.Code) AS cnt FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code ) SELECT Title FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
1	SELECT Rating, COUNT(Code) AS Total FROM Movies GROUP BY Rating	SELECT count(*) ,  rating FROM movies GROUP BY rating
1	SELECT Rating, COUNT(Code) AS MovieCount FROM Movies GROUP BY Rating ORDER BY MovieCount	SELECT count(*) ,  rating FROM movies GROUP BY rating
1	SELECT COUNT(*) AS NumberOfMovies FROM Movies WHERE Rating IS NOT NULL	SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL
1	SELECT COUNT(*) AS NumberOfMovies FROM Movies WHERE Rating IS NOT NULL	SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL
0	SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE MT.Movie = M.Code)	SELECT name FROM movietheaters GROUP BY name HAVING count(movie)  >=  1
0	SELECT Name FROM MovieTheaters AS MT WHERE EXISTS (SELECT Code FROM Movies AS M WHERE M.Code = MT.Movie)	SELECT name FROM movietheaters GROUP BY name HAVING count(movie)  >=  1
1	SELECT Name FROM MovieTheaters WHERE Movie = 'NULL'	SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = 0
1	SELECT Name FROM MovieTheaters WHERE Movie = ''	SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = 0
1	SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT Title FROM Movies WHERE Title IS NOT NULL	SELECT title FROM movies
1	SELECT m.Title FROM Movies m	SELECT title FROM movies
1	SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating	SELECT DISTINCT rating FROM movies
1	SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating	SELECT DISTINCT rating FROM movies
1	SELECT Code, Title, Rating FROM Movies WHERE Rating = 'unrated'	SELECT * FROM movies WHERE rating IS NULL
1	SELECT Code, Title, Rating FROM Movies WHERE Rating = 'unrated'	SELECT * FROM movies WHERE rating IS NULL
1	SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE Movie = Movies.Code)	SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)
1	SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code)	SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)
0	SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Recipient WHERE P.Weight = (SELECT MAX(Weight) FROM Package)	SELECT name FROM client WHERE accountnumber IN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package))
1	SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))	SELECT name FROM client WHERE accountnumber IN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package))
0	SELECT TOTAL(Package.Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1	SELECT SUM(P.Weight) FROM Package P CROSS JOIN Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT Position, Salary FROM Employee WHERE Name LIKE 'Turanga Leela'	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT Position, Salary FROM Employee WHERE Name LIKE 'Turanga Leela'	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position LIKE 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
1	SELECT AVG(Salary) FROM Employee WHERE LOWER(Position) = 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
0	SELECT DISTINCT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Position = 'Physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position LIKE 'physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT Package.PackageNumber FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT DISTINCT PackageNumber FROM Package JOIN Client ON Recipient = AccountNumber WHERE Name = 'Leo Wong'	SELECT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'
1	SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong";
0	SELECT Package.* FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'	SELECT p.PackageNumber FROM Package AS p JOIN Client AS c1 ON p.Sender = c1.AccountNumber JOIN Client AS c2 ON p.Recipient = c2.AccountNumber WHERE c1.Name = 'Leo Wong' OR c2.Name = 'Leo Wong'
1	SELECT DISTINCT p.PackageNumber FROM Package p LEFT JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong'	SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1	SELECT COUNT(*) FROM (SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')) AS SubQuery	SELECT COUNT(*) FROM package JOIN client AS sender ON package.sender = sender.accountnumber JOIN client AS recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'
1	SELECT COUNT(PackageNumber) AS TotalPackages FROM Package, Client AS Sender, Client AS Recipient WHERE Package.Sender = Sender.AccountNumber AND Package.Recipient = Recipient.AccountNumber AND Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'	SELECT COUNT(*) FROM package JOIN client AS sender ON package.sender = sender.accountnumber JOIN client AS recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'
1	SELECT p.Contents FROM Package p, Client c WHERE p.Sender = c.AccountNumber AND c.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
1	SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
0	SELECT PackageNumber, MAX(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%' GROUP BY PackageNumber HAVING MAX(Weight) = (SELECT MAX(Weight) FROM Package JOIN Client ON Sender = AccountNumber WHERE Name LIKE '%John%')	WITH Weights AS ( SELECT p.PackageNumber, p.Weight FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ) SELECT * FROM Weights WHERE Weight = (SELECT MAX(Weight) FROM Weights)
0	SELECT P.PackageNumber, P.Weight FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE '%John%' ORDER BY P.Weight DESC LIMIT 1	WITH Weights AS ( SELECT p.PackageNumber, p.Weight FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ) SELECT * FROM Weights WHERE Weight = (SELECT MAX(Weight) FROM Weights)
0	SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3 OFFSET 0	SELECT PackageNumber, Weight FROM ( SELECT PackageNumber, Weight, RANK() OVER (ORDER BY Weight) AS rnk FROM Package ) t WHERE rnk <= 3
0	SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC, PackageNumber ASC LIMIT 3	SELECT PackageNumber, Weight FROM ( SELECT PackageNumber, Weight, RANK() OVER (ORDER BY Weight) AS rnk FROM Package ) t WHERE rnk <= 3
0	SELECT C.Name, COUNT(P.PackageNumber) AS NumberOfPackages FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.Name ORDER BY NumberOfPackages DESC LIMIT 1	WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MAX(cnt) FROM PackageCount)
0	SELECT Name, COUNT(PackageNumber) FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Name HAVING COUNT(PackageNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(PackageNumber) AS Count FROM Package GROUP BY Sender))	WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MAX(cnt) FROM PackageCount)
0	SELECT Client.Name, COUNT(Package.Recipient) AS ReceivedPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY ReceivedPackages ASC LIMIT 1	WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MIN(cnt) FROM PackageCount)
0	SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Recipient GROUP BY C.Name, P.Recipient HAVING COUNT(P.Recipient) = (SELECT MIN(CountPackages) FROM (SELECT COUNT(*) AS CountPackages FROM Package GROUP BY Recipient) AS SubQuery)	WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MIN(cnt) FROM PackageCount)
1	SELECT C.Name FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.PackageNumber) > 1	SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(packagenumber) > 1)
1	SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Package P WHERE P.Sender = C.AccountNumber GROUP BY P.Sender HAVING COUNT(*) > 1)	SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1)
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
0	SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
1	SELECT Shipment.Date AS ShipmentDate FROM Shipment	SELECT Date FROM Shipment;
1	SELECT Date FROM Shipment	SELECT Date FROM Shipment;
1	SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT Shipment.ShipmentID FROM Shipment LEFT JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT ShipmentID FROM Shipment AS s JOIN Planet AS p ON s.Planet = p.PlanetID JOIN Employee AS e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT ShipmentID FROM Shipment s, Planet p, Employee e WHERE s.Planet = p.PlanetID AND s.Manager = e.EmployeeID AND (p.Name = 'Mars' OR e.Name = 'Turanga Leela')	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
1	SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name LIKE 'Mars' AND Employee.Name LIKE 'Turanga Leela'	SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'
0	SELECT Name, COUNT(ShipmentID) FROM Planet LEFT JOIN Shipment ON PlanetID = Planet GROUP BY Name	SELECT name, (SELECT COUNT(*) FROM shipment WHERE shipment.planet = planet.planetid) AS total_shipments FROM planet
0	SELECT Name, COUNT(ShipmentID) AS Shipments FROM Planet LEFT OUTER JOIN Shipment ON PlanetID = Planet GROUP BY Name	SELECT name, (SELECT COUNT(shipmentid) FROM shipment WHERE planet = planetid) AS Shipments FROM planet
1	SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Shipment GROUP BY Planet HAVING COUNT(ShipmentID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(ShipmentID) AS Cnt FROM Shipment GROUP BY Planet) AS Sub))	WITH CNT AS ( SELECT p.Name, COUNT(ShipmentID) AS cnt FROM Planet p LEFT JOIN Shipment s ON s.Planet = p.PlanetID GROUP BY p.PlanetID ) SELECT Name FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
1	SELECT P.Name FROM Planet P WHERE P.PlanetID IN (SELECT S.Planet FROM Shipment S GROUP BY S.Planet HAVING COUNT(S.ShipmentID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Shipment GROUP BY Planet) T))	WITH CNT AS ( SELECT p.Name, COUNT(ShipmentID) AS cnt FROM Planet p LEFT JOIN Shipment s ON s.Planet = p.PlanetID GROUP BY p.PlanetID ) SELECT Name FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
0	SELECT Name, COUNT(ShipmentID) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
0	SELECT Name, COUNT(ShipmentID) FROM Employee, Shipment WHERE Employee.EmployeeID = Shipment.Manager GROUP BY Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1	SELECT SUM(P.Weight) FROM Package AS P JOIN Shipment AS S ON P.Shipment = S.ShipmentID JOIN Planet AS Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT SUM(P.Weight) AS TotalWeight FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars' GROUP BY Pl.Name	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name	SELECT P.NAME AS PLANET_NAME, TOTAL_WEIGHT FROM PLANET P LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) S ON P.PLANETID = S.PLANET ORDER BY P.NAME
0	SELECT DISTINCT P.Name, SUM(Pa.Weight) OVER (PARTITION BY P.Name) AS TotalWeight FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment	SELECT P.NAME AS PLANET_NAME, TOTAL_WEIGHT FROM PLANET P LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) S ON P.PLANETID = S.PLANET ORDER BY P.NAME
1	SELECT P.Name FROM Planet P JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet) AS SubQuery ON P.PlanetID = SubQuery.Planet WHERE SubQuery.TotalWeight > 30	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT P.Name FROM Planet P JOIN (SELECT Planet, SUM(Weight) AS TotalWeight FROM Shipment JOIN Package ON ShipmentID = Shipment GROUP BY Planet HAVING TotalWeight > 30) AS SubQuery ON P.PlanetID = SubQuery.Planet	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT Package.PackageNumber FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0	SELECT COUNT(Package.PackageNumber) FROM Package, Shipment, Client, Planet WHERE Package.Sender = Client.AccountNumber AND Shipment.Planet = Planet.PlanetID AND Package.Shipment = Shipment.ShipmentID AND Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0	SELECT PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8' UNION SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Zapp Brannigan'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
1	SELECT COUNT(*) FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'	SELECT COUNT(packagenumber) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment JOIN planet ON planet.planetid = shipment.planet WHERE name = 'Omicron Persei 8') OR sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')
1	SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1	SELECT PackageNumber, Weight FROM Package WHERE Weight > 9 AND Weight < 31	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1	SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')
1	SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')
1	SELECT E.Name FROM Employee E WHERE E.EmployeeID IN (SELECT HC.Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')	SELECT name FROM employee WHERE employeeid IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Omega III'))
1	SELECT E.Name FROM Employee E WHERE E.EmployeeID IN (SELECT HC.Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')	SELECT e.name FROM employee e WHERE EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON p.planetid = h.planet WHERE h.employee = e.employeeid AND p.name = 'Omega III')
1	SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance H GROUP BY H.Planet HAVING COUNT(DISTINCT H.Employee) = 1)	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT P.Name FROM Planet P WHERE (SELECT COUNT(DISTINCT Employee) FROM Has_Clearance WHERE Planet = P.PlanetID) = 1	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT E.Name FROM Employee E WHERE E.Salary > 4999 AND E.Salary < 10001	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT Employee.Name FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
1	SELECT Name FROM Employee WHERE Salary > 5000 OR Salary > (SELECT AVG(Salary) FROM Employee)	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
1	SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Has_Clearance.Employee = Employee.EmployeeID AND Planet.Name = 'Mars')	SELECT COUNT(DISTINCT e.employeeid) FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')
1	SELECT COUNT(DISTINCT Employee.EmployeeID) FROM Employee LEFT OUTER JOIN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') AS MarsClearance ON Employee.EmployeeID = MarsClearance.Employee WHERE MarsClearance.Employee IS NULL	SELECT COUNT(employeeid) FROM employee WHERE NOT EXISTS (SELECT 1 FROM has_clearance JOIN planet ON has_clearance.planet = planet.planetid WHERE has_clearance.employee = employee.employeeid AND planet.name = 'Mars')
1	SELECT COUNT(*) FROM (SELECT * FROM game) AS AllGames	SELECT count(*) FROM game
1	SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL	SELECT count(*) FROM game
1	SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1	SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1	SELECT AVG(Units_sold_Millions) FROM game WHERE LOWER(Developers) != LOWER('Nintendo')	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
0	SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1	SELECT platform.Platform_name AS Name, platform.Market_district AS District FROM platform	SELECT Platform_name ,  Market_district FROM platform
1	SELECT Platform_name, Market_district FROM platform WHERE Platform_name IS NOT NULL	SELECT Platform_name ,  Market_district FROM platform
1	SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 AND Platform_ID IS NOT NULL	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 AND Platform_ID IS NOT NULL	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT (SELECT MAX(Rank_of_the_year) FROM player) AS MaxRank, (SELECT MIN(Rank_of_the_year) FROM player) AS MinRank	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT MAX(player.Rank_of_the_year) AS MaxRank, MIN(player.Rank_of_the_year) AS MinRank FROM player	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3	SELECT COUNT(DISTINCT player_id) FROM player WHERE rank_of_the_year < 3
1	SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3	SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1	SELECT Player_name AS Name FROM player ORDER BY Name ASC	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT p.Player_name FROM player AS p ORDER BY p.Player_name	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
1	SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
0	SELECT Player_name, Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'	SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT player_id FROM game_player WHERE game_id IN (SELECT game_id FROM game WHERE title = 'Super Mario World'))
1	SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World'))	SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT game_player.player_id FROM game_player JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World');
1	SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn' AND g.Developers IS NOT NULL	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT DISTINCT Developers FROM game, game_player, player WHERE game.Game_ID = game_player.Game_ID AND game_player.Player_ID = player.Player_ID AND player.College = 'Auburn'	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))	SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))
1	SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))	SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1	SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT Title FROM game AS g JOIN platform AS p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT g.Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA')	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
1	SELECT Franchise, COUNT(Game_ID) AS CountOfGames FROM game GROUP BY Franchise ORDER BY CountOfGames DESC	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
1	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) = (SELECT MAX(TotalGames) FROM (SELECT COUNT(*) AS TotalGames FROM game GROUP BY Franchise) tmp)	SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) = (SELECT MAX(game_count) FROM (SELECT COUNT(game_id) as game_count FROM game GROUP BY franchise))
1	SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) = (SELECT MAX(GameCount) FROM (SELECT COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise) AS SubQuery)	SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) = (SELECT MAX(game_count) FROM (SELECT COUNT(game_id) as game_count FROM game GROUP BY franchise))
1	SELECT DISTINCT Franchise FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2)	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1	SELECT Franchise FROM (SELECT Franchise, COUNT(Game_ID) AS NumGames FROM game GROUP BY Franchise) AS subquery WHERE NumGames > 1	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1	SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
1	SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
0	SELECT game.Title FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Oklahoma' INTERSECT SELECT game.Title FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn'	SELECT title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Auburn') AND EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Oklahoma')
0	SELECT Title FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE gp.Game_ID = g.Game_ID AND p.College IN ('Oklahoma', 'Auburn'))	SELECT title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Auburn') AND EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Oklahoma')
1	SELECT DISTINCT Franchise FROM game	SELECT DISTINCT Franchise FROM game
1	SELECT DISTINCT Franchise FROM game	SELECT DISTINCT Franchise FROM game
1	SELECT Title FROM game g WHERE g.Game_ID NOT IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard')	SELECT title FROM game WHERE game_id NOT IN (SELECT g.game_id FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1	SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')	SELECT title FROM game WHERE game_id NOT IN (SELECT g.game_id FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1	SELECT Name FROM press WHERE Year_Profits_billion IS NOT NULL ORDER BY Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT AVG(p.Year_Profits_billion) AS Average_Yearly_Profit, MAX(p.Year_Profits_billion) AS Maximum_Yearly_Profit FROM press p	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0	SELECT Press_ID, Name, AVG(Year_Profits_billion) AS Avg_Profit, MAX(Year_Profits_billion) AS Max_Profit FROM press GROUP BY Press_ID, Name	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
1	SELECT Name FROM press p1 WHERE NOT EXISTS (SELECT 1 FROM press p2 WHERE p2.Month_Profits_billion > p1.Month_Profits_billion)	SELECT press.name FROM press WHERE press.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)
1	SELECT Name FROM press AS p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press AS sub_p)	SELECT p.name FROM press p WHERE p.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)
1	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT COUNT(*) FROM author WHERE Age IN (SELECT Age FROM author WHERE Age < 30)	SELECT count(*) FROM author WHERE age  <  30
1	SELECT COUNT(*) FROM author WHERE Age < 30	SELECT count(*) FROM author WHERE age  <  30
1	SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender HAVING COUNT(*) > 0	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT author.Gender, AVG(author.Age) AS Avg_Age FROM author GROUP BY author.Gender	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT a.Gender, COUNT(a.Author_ID) FROM author a WHERE a.Age > 30 GROUP BY a.Gender	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT Gender, COUNT(Author_ID) AS CountOfAuthors FROM author WHERE Age > 30 GROUP BY Gender	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT Title FROM book ORDER BY Release_date DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT Title FROM book AS b ORDER BY b.Release_date DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT Book_Series, COUNT(Book_ID) AS NumberOfBooks FROM book GROUP BY Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
1	SELECT b.Book_Series, COUNT(b.Book_ID) AS TotalBooks FROM book b GROUP BY b.Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
0	SELECT Title, Release_date FROM book AS b ORDER BY b.Sale_Amount DESC LIMIT 5	SELECT b.Title, b.release_date FROM book b WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 5) top WHERE top.sale_amount = b.sale_amount )
0	SELECT book.Title, book.Release_date FROM book ORDER BY book.Sale_Amount DESC LIMIT 5	SELECT b.Title, b.release_date FROM book b WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 5) top WHERE top.sale_amount = b.sale_amount )
1	SELECT DISTINCT b.Book_Series FROM book b WHERE (SELECT COUNT(*) FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount > 1000) > 0 AND (SELECT COUNT(*) FROM book WHERE Book_Series = b.Book_Series AND Sale_Amount < 500) > 0	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
1	SELECT b.Book_Series FROM book b JOIN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AS high ON b.Book_Series = high.Book_Series JOIN (SELECT Book_Series FROM book WHERE Sale_Amount < 500) AS low ON b.Book_Series = low.Book_Series GROUP BY b.Book_Series	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
1	SELECT Name FROM author a WHERE (SELECT COUNT(DISTINCT Book_Series) FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series IN ('MM', 'LT')) = 2	SELECT name FROM author WHERE EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'MM') AND EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'LT')
1	SELECT Name FROM author WHERE Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'MM') AND Author_ID IN (SELECT b.Author_ID FROM book b WHERE b.Book_Series = 'LT')	SELECT author.name FROM author WHERE author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'LT') AND author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'MM')
1	SELECT Name, Age FROM author a LEFT OUTER JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Author_ID IS NULL	SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)
1	SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Author_ID IS NULL	select name from author where author_id not in (select author_id from book)
1	SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(*) > 1)	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1	SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
0	SELECT B.Title, A.Name, P.Name FROM book B CROSS JOIN author A CROSS JOIN press P WHERE B.Author_ID = A.Author_ID AND B.Press_ID = P.Press_ID ORDER BY B.Sale_Amount DESC LIMIT 3	SELECT b.Title, a.Name, p.Name FROM book b JOIN press p ON b.Press_ID = p.Press_ID JOIN author a ON b.Author_ID = a.Author_ID WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 3) top WHERE top.sale_amount = b.sale_amount )
0	SELECT book.Title, author.Name, press.Name FROM book CROSS JOIN author ON book.Author_ID = author.Author_ID CROSS JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3	SELECT b.Title, a.Name, p.Name FROM book b JOIN press p ON b.Press_ID = p.Press_ID JOIN author a ON b.Author_ID = a.Author_ID WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 3) top WHERE top.sale_amount = b.sale_amount )
0	SELECT Name, SUM(Sale_Amount) FROM press, book WHERE press.Press_ID = book.Press_ID GROUP BY Name	SELECT p.Name, IFNULL( (SELECT SUM(b.sale_amount) FROM book b WHERE b.Press_ID = p.Press_ID), 0) FROM press p
0	SELECT Name, Total_Sales FROM (SELECT press.Name AS Name, SUM(book.Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name) AS SalesSummary	SELECT p.Name, IFNULL( (SELECT SUM(b.sale_amount) FROM book b WHERE b.Press_ID = p.Press_ID), 0) FROM press p
0	SELECT p.Name AS PublisherName, COUNT(*) AS BooksSold FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name	SELECT press.name, (SELECT COUNT(*) FROM book WHERE book.press_id = press.press_id AND book.sale_amount > 1000) AS num_books FROM press
0	SELECT p.Name, COUNT(b.Book_ID) AS HighSellingBooks FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name	SELECT press.name, (SELECT COUNT(*) FROM book WHERE book.press_id = press.press_id AND book.sale_amount > 1000) AS num_books FROM press
0	SELECT author.Name FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)	WITH BestSellingBook AS ( SELECT MAX(Sale_amount) AS MaxSale FROM book ) SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID, BestSellingBook WHERE b.Sale_amount = BestSellingBook.MaxSale GROUP BY a.Author_ID, a.Name
0	SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book))	WITH BestSellingBook AS ( SELECT MAX(Sale_amount) AS MaxSale FROM book ) SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID, BestSellingBook WHERE b.Sale_amount = BestSellingBook.MaxSale GROUP BY a.Author_ID, a.Name
0	SELECT a.Name, a.Gender FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID ORDER BY COUNT(*) DESC LIMIT 1)	WITH BookCount AS ( SELECT author.Author_ID, COUNT(book.Book_ID) AS cnt FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ) SELECT author.name, author.gender FROM author JOIN BookCount ON author.Author_ID = BookCount.Author_ID WHERE BookCount.cnt = (SELECT MAX(cnt) FROM BookCount)
1	SELECT a.Name, a.Gender FROM author a, book b WHERE a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender HAVING COUNT(b.Book_ID) = (SELECT MAX(book_count) FROM (SELECT COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID) subquery)	WITH BookCount AS ( SELECT author.Author_ID, COUNT(book.Book_ID) AS cnt FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ) SELECT author.name, author.gender FROM author JOIN BookCount ON author.Author_ID = BookCount.Author_ID WHERE BookCount.cnt = (SELECT MAX(cnt) FROM BookCount)
1	SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')	SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b INNER JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor')
1	SELECT Name FROM author WHERE Author_ID NOT IN (SELECT b.Author_ID FROM book b, press p WHERE b.Press_ID = p.Press_ID AND p.Name = 'Accor')	SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE press_id IN (SELECT press_id FROM press WHERE name = 'Accor'))
1	SELECT p.Name, p.Year_Profits_billion FROM press p JOIN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2) b ON p.Press_ID = b.Press_ID	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT p.Name, p.Year_Profits_billion FROM press p JOIN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(*) > 2) b ON p.Press_ID = b.Press_ID	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT COUNT(*) FROM Authors	SELECT count(*) FROM Authors
1	SELECT author_name FROM Authors	SELECT author_name FROM Authors
1	SELECT author_name, other_details FROM Authors WHERE author_name IS NOT NULL	SELECT author_name ,  other_details FROM Authors
1	SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'	SELECT other_details FROM Authors WHERE author_name  =  "Addison Denesik"
1	SELECT COUNT(*) AS Total FROM Documents	SELECT count(*) FROM Documents
1	SELECT author_name FROM Documents WHERE document_id = 4 LIMIT 1	SELECT author_name FROM Documents WHERE document_id  =  4
1	SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to Brazil'	SELECT author_name FROM Documents WHERE document_name  =  "Travel to Brazil"
1	SELECT COUNT(document_id) AS NumberOfDocuments FROM Documents WHERE author_name = 'Era Kerluke'	SELECT count(*) FROM Documents WHERE author_name  =  "Era Kerluke"
1	SELECT d.document_name, d.document_description FROM Documents d	SELECT document_name ,  document_description FROM Documents
1	SELECT D.document_id, D.document_name FROM Documents AS D JOIN Authors AS A ON D.author_name = A.author_name WHERE A.author_name = 'Bianka Cummings'	SELECT document_id ,  document_name FROM Documents WHERE author_name  =  "Bianka Cummings"
0	SELECT a.author_name, a.other_details FROM Authors a WHERE a.author_name IN (SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to China')	SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  "Travel to China"
1	SELECT Authors.author_name, COUNT(Documents.document_id) FROM Authors LEFT JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name	SELECT a.author_name, (SELECT COUNT(*) FROM Documents WHERE author_name = a.author_name) FROM Authors a GROUP BY a.author_name
1	SELECT A.author_name FROM Authors A, Documents D WHERE A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(D.document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) T)	WITH DocCount AS ( SELECT a.author_name, (SELECT COUNT(*) FROM Documents WHERE author_name = a.author_name) AS cnt FROM Authors a GROUP BY a.author_name ) SELECT author_name FROM DocCount WHERE cnt = (SELECT MAX(cnt) FROM DocCount)
1	SELECT author_name FROM Authors WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.author_name = Authors.author_name GROUP BY author_name HAVING COUNT(document_id) >= 2)	SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2
1	SELECT COUNT(*) FROM (SELECT DISTINCT process_id FROM Business_Processes) AS UniqueProcesses	SELECT count(*) FROM Business_processes
1	SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9 AND next_process_id IS NOT NULL	SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9
1	SELECT process_name FROM Business_Processes WHERE process_id = (SELECT B.process_id FROM Business_Processes A JOIN Business_Processes B ON A.next_process_id = B.process_id WHERE A.process_id = 9)	SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)
1	SELECT COUNT(1) FROM Process_Outcomes	SELECT count(*) FROM Process_outcomes
1	SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IS NOT NULL	SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes
1	SELECT Process_Outcomes.process_outcome_description FROM Process_Outcomes WHERE Process_Outcomes.process_outcome_code = 'working'	SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  "working"
1	SELECT DISTINCT COUNT(process_status_code) FROM Process_Status	SELECT count(*) FROM Process_status
1	SELECT DISTINCT process_status_code, process_status_description FROM Process_Status	SELECT process_status_code ,  process_status_description FROM Process_status
1	SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'	SELECT process_status_description FROM Process_status WHERE process_status_code  =  "ct"
1	SELECT COUNT(staff_id) AS TotalStaff FROM Staff	SELECT count(*) FROM Staff
1	SELECT staff_id, staff_details FROM Staff WHERE staff_id IS NOT NULL	SELECT staff_id ,  staff_details FROM Staff
1	SELECT staff_details FROM Staff WHERE staff_id = 100	SELECT staff_details FROM Staff WHERE staff_id  =  100
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles WHERE staff_role_code IS NOT NULL) AS roles_count	SELECT count(*) FROM Ref_staff_roles
1	SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles	SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles
1	SELECT Ref_Staff_Roles.staff_role_description FROM Ref_Staff_Roles WHERE Ref_Staff_Roles.staff_role_code = 'HR'	SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  "HR"
1	SELECT COUNT(*) FROM (SELECT DISTINCT document_id FROM Documents_Processes) AS subquery	SELECT count(DISTINCT document_id) FROM Documents_processes
1	SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents)	SELECT DISTINCT process_id FROM Documents_processes
1	SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_Processes	SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes
1	SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes)	SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes
1	SELECT A.process_outcome_description, B.process_status_description FROM (SELECT * FROM Documents_Processes WHERE document_id = 0) AS C JOIN Process_Outcomes A ON C.process_outcome_code = A.process_outcome_code JOIN Process_Status B ON C.process_status_code = B.process_status_code	SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0
0	SELECT process_name FROM Business_Processes WHERE EXISTS (SELECT 1 FROM Documents_Processes dp JOIN Documents d ON dp.document_id = d.document_id WHERE dp.process_id = Business_Processes.process_id AND d.document_name = 'Travel to Brazil')	SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  "Travel to Brazil"
1	SELECT bp.process_id, COUNT(dp.document_id) FROM Business_Processes bp LEFT JOIN Documents_Processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id	SELECT p.process_id, COUNT(d.document_id) FROM business_processes AS p LEFT JOIN documents_processes AS d ON p.process_id = d.process_id GROUP BY p.process_id
1	SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff, Staff_in_Processes WHERE Staff.staff_id = Staff_in_Processes.staff_id AND Staff_in_Processes.document_id = 0 AND Staff_in_Processes.process_id = 9	SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9
1	SELECT s.staff_id, COUNT(DISTINCT sp.document_id) AS NumberOfProcesses FROM Staff s LEFT JOIN Staff_in_Processes sp ON s.staff_id = sp.staff_id GROUP BY s.staff_id	SELECT staff.staff_id, COUNT(documents_processes.process_id) AS document_processes_count FROM staff LEFT JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id LEFT JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY staff.staff_id
0	SELECT R.staff_role_code, COUNT(P.document_id) AS num_processes FROM Ref_Staff_Roles R LEFT JOIN Staff_in_Processes P ON R.staff_role_code = P.staff_role_code GROUP BY R.staff_role_code	SELECT staff_role_code, COUNT(*) FROM ( SELECT DISTINCT staff_role_code, document_id, process_id FROM Staff_in_Processes ) t GROUP BY staff_role_code
0	SELECT COUNT(DISTINCT T2.staff_role_description) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T3 ON T1.staff_id = T3.staff_id INNER JOIN Ref_Staff_Roles AS T2 ON T3.staff_role_code = T2.staff_role_code WHERE T1.staff_id = 3	SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3
1	SELECT COUNT(agency_id) FROM Agencies	SELECT count(*) FROM Agencies
1	SELECT COUNT(1) FROM Agencies	SELECT count(*) FROM Agencies
1	SELECT DISTINCT agency_id, agency_details FROM Agencies	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_details IS NOT NULL	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT COUNT(client_id) AS NumberOfClients FROM Clients	SELECT count(*) FROM Clients
1	SELECT COUNT(*) AS NumberOfClients FROM Clients	SELECT count(*) FROM Clients
1	SELECT Clients.client_id, Clients.client_details FROM Clients	SELECT client_id ,  client_details FROM Clients
1	SELECT Clients.client_id, Clients.client_details FROM Clients	SELECT client_id ,  client_details FROM Clients
1	SELECT A.agency_id, COUNT(C.client_id) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id	SELECT agency_id, (SELECT COUNT(*) FROM clients WHERE clients.agency_id = agencies.agency_id) AS num_clients FROM agencies
1	SELECT A.agency_id, COUNT(C.client_id) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id	SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM agencies a LEFT JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id
1	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Clients GROUP BY agency_id) AS subquery))	WITH ClientCount AS ( SELECT a.agency_id, COUNT(c.agency_id) AS cnt FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ) SELECT a.agency_id, a.agency_details FROM Agencies a JOIN ClientCount c ON a.agency_id = c.agency_id WHERE c.cnt = (SELECT MAX(cnt) FROM ClientCount)
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1 OFFSET 0)	WITH ClientCount AS ( SELECT a.agency_id, COUNT(c.agency_id) AS cnt FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ) SELECT a.agency_id, a.agency_details FROM Agencies a JOIN ClientCount c ON a.agency_id = c.agency_id WHERE c.cnt = (SELECT MAX(cnt) FROM ClientCount)
1	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(C.client_id) > 1)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1	SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) >= 2	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1	SELECT A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%'	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1	SELECT A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id AND C.client_details LIKE '%Mac%'	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1	SELECT client_details, agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT Clients.client_details, Agencies.agency_details FROM Clients INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad' AND client_id IS NOT NULL	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1	SELECT client_id, client_details FROM Clients WHERE sic_code IN ('Bad')	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)	SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id
1	SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT agency_id FROM Clients WHERE Clients.agency_id = Agencies.agency_id)	SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id
1	SELECT DISTINCT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT DISTINCT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM Clients)	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT COUNT(DISTINCT invoice_id) FROM Invoices	SELECT count(*) FROM Invoices
1	SELECT COUNT(DISTINCT invoice_id) FROM Invoices	SELECT count(*) FROM Invoices
1	SELECT invoice_id AS ID, invoice_status AS Status, invoice_details AS Details FROM Invoices	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1	SELECT `invoice_id`, `invoice_status`, `invoice_details` FROM `Invoices`	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1	SELECT Clients.client_id, IFNULL(COUNT(Invoices.invoice_id), 0) AS total_invoices FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id	SELECT c.client_id, IFNULL(COUNT(i.invoice_id), 0) as total_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id
0	SELECT COUNT(invoice_id), client_id FROM Invoices GROUP BY client_id	SELECT c.client_id, COUNT(i.invoice_id) as total_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id
0	SELECT client_id, client_details FROM Clients WHERE client_id = (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id) AS Sub))	WITH InvoiceCount AS ( SELECT c.client_id, COUNT(i.client_id) AS cnt FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ) SELECT c.client_id, c.client_details FROM Clients c JOIN InvoiceCount i ON c.client_id = i.client_id WHERE i.cnt = (SELECT MAX(cnt) FROM InvoiceCount)
1	SELECT Clients.client_id, Clients.client_details FROM Clients INNER JOIN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY client_id) AS sub)) AS MaxInvoices ON Clients.client_id = MaxInvoices.client_id	WITH InvoiceCount AS ( SELECT c.client_id, COUNT(i.client_id) AS cnt FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ) SELECT c.client_id, c.client_details FROM Clients c JOIN InvoiceCount i ON c.client_id = i.client_id WHERE i.cnt = (SELECT MAX(cnt) FROM InvoiceCount)
1	SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT DISTINCT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1	SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS subquery)	SELECT invoice_status FROM invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(Count) FROM (SELECT COUNT(invoice_status) Count FROM invoices GROUP BY invoice_status) Temp)
1	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(count) FROM (SELECT COUNT(invoice_status) AS count FROM Invoices GROUP BY invoice_status) AS counts)	WITH cnt AS ( SELECT invoice_status, COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status ) SELECT invoice_status FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
1	SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT I.invoice_status, I.invoice_details, C.client_id, C.client_details, A.agency_id, A.agency_details FROM Invoices I JOIN Clients C ON I.client_id = C.client_id JOIN Agencies A ON C.agency_id = A.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT meeting_type, other_details FROM Meetings	SELECT meeting_type ,  other_details FROM meetings
1	SELECT meeting_type, other_details FROM Meetings	SELECT meeting_type ,  other_details FROM meetings
1	SELECT Meetings.meeting_outcome, Meetings.purpose_of_meeting FROM Meetings	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL AND purpose_of_meeting IS NOT NULL	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT p.payment_id, p.payment_details FROM Payments p, Invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p WHERE p.invoice_id IS NOT NULL)	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices WHERE NOT EXISTS (SELECT 1 FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id)	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT COUNT(payment_id) FROM Payments	SELECT count(*) FROM Payments
1	SELECT COUNT(payment_id) FROM Payments	SELECT count(*) FROM Payments
1	SELECT p.payment_id, p.invoice_id, i.invoice_details FROM Payments AS p JOIN Invoices AS i ON p.invoice_id = i.invoice_id	SELECT p.payment_id, p.invoice_id, i.invoice_details FROM payments p INNER JOIN invoices i ON p.invoice_id = i.invoice_id
1	SELECT * FROM Payments	SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
0	SELECT invoice_id, invoice_status FROM Invoices GROUP BY invoice_id, invoice_status	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT DISTINCT invoice_id AS InvoiceID, invoice_status AS Status FROM Invoices JOIN Payments USING (invoice_id)	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT Invoices.invoice_id AS InvoiceID, COUNT(Payments.payment_id) AS NumberOfPayments FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY InvoiceID	SELECT invoices.invoice_id, COUNT(payments.payment_id) AS payment_count FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id
0	SELECT p.invoice_id, COUNT(p.payment_id) AS payment_count FROM Payments p WHERE p.invoice_id IS NOT NULL GROUP BY p.invoice_id	SELECT i.invoice_id, COUNT(p.payment_id) AS payment_count FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))	WITH invoice_payments AS ( SELECT i.invoice_id, COUNT(p.invoice_id) AS total_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN invoice_payments ON i.invoice_id = invoice_payments.invoice_id WHERE invoice_payments.total_payments = ( SELECT MAX(total_payments) FROM invoice_payments )
1	SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I JOIN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Payments GROUP BY invoice_id) AS sub)) AS P ON I.invoice_id = P.invoice_id	WITH invoice_payments AS ( SELECT i.invoice_id, COUNT(p.invoice_id) AS total_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN invoice_payments ON i.invoice_id = invoice_payments.invoice_id WHERE invoice_payments.total_payments = ( SELECT MAX(total_payments) FROM invoice_payments )
1	SELECT COUNT(staff_id) AS NumberOfStaff FROM Staff	SELECT count(*) FROM Staff
1	SELECT COUNT(*) FROM Staff	SELECT count(*) FROM Staff
1	SELECT a.agency_id, COUNT(s.staff_id) AS num_staff FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id	SELECT a.agency_id, COUNT(s.staff_id) FROM agencies a LEFT JOIN staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id
1	SELECT A.agency_id, COUNT(S.staff_id) AS staff_number FROM Agencies A LEFT JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id	SELECT a.agency_id, COUNT(s.staff_id) AS staff_count FROM agencies AS a LEFT JOIN staff AS s ON a.agency_id = s.agency_id GROUP BY a.agency_id
0	SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxStaff ON A.agency_id = MaxStaff.agency_id	WITH StaffCount AS ( SELECT Agencies.agency_id, COUNT(Staff.agency_id) AS TotalStaff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ) SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN StaffCount ON Agencies.agency_id = StaffCount.agency_id WHERE StaffCount.TotalStaff = ( SELECT MAX(TotalStaff) FROM StaffCount )
0	SELECT A.agency_id, A.agency_details FROM Agencies A JOIN (SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) S ON A.agency_id = S.agency_id	WITH StaffCount AS ( SELECT Agencies.agency_id, COUNT(Staff.agency_id) AS TotalStaff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ) SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN StaffCount ON Agencies.agency_id = StaffCount.agency_id WHERE StaffCount.TotalStaff = ( SELECT MAX(TotalStaff) FROM StaffCount )
1	SELECT COUNT(meeting_id) AS meeting_counts, meeting_outcome FROM Meetings GROUP BY meeting_outcome	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1	SELECT COUNT(meeting_id) AS total_meetings, meeting_outcome FROM Meetings GROUP BY meeting_outcome	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1	SELECT Clients.client_id AS ClientID, COUNT(Meetings.meeting_id) AS MeetingsCount FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id	SELECT cl.client_id, (SELECT COUNT(*) FROM meetings mt WHERE mt.client_id = cl.client_id) AS meetings_sum FROM clients cl
0	SELECT Meetings.client_id, COUNT(*) FROM Meetings GROUP BY Meetings.client_id	SELECT c.client_id, COUNT(m.meeting_id) FROM clients c LEFT JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id
1	SELECT Meetings.client_id, Meetings.meeting_type, COUNT(*) AS TotalMeetings FROM Meetings GROUP BY Meetings.client_id, Meetings.meeting_type	SELECT client_id, meeting_type, COUNT(meeting_id) AS meeting_count FROM meetings GROUP BY client_id, meeting_type
1	SELECT COUNT(*) AS total_meetings, meeting_type FROM Meetings GROUP BY meeting_type	SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1	SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1	SELECT Meetings.meeting_id, Meetings.meeting_outcome, Meetings.meeting_type, Clients.client_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1	SELECT m.meeting_id, COUNT(DISTINCT s.staff_id) FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id	SELECT m.meeting_id, COUNT(si.staff_id) AS TotalStaff FROM meetings m LEFT JOIN staff_in_meetings si ON m.meeting_id = si.meeting_id GROUP BY m.meeting_id
0	SELECT meeting_id, COUNT(DISTINCT staff_id) FROM Staff_in_Meetings GROUP BY meeting_id	SELECT m.meeting_id, COUNT(si.staff_id) AS TotalStaff FROM meetings m LEFT JOIN staff_in_meetings si ON m.meeting_id = si.meeting_id GROUP BY m.meeting_id
1	WITH MeetingCounts AS (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id) SELECT staff_id, num_meetings FROM MeetingCounts WHERE num_meetings = (SELECT MIN(num_meetings) FROM MeetingCounts)	SELECT s.staff_id, COUNT(*) AS num_meetings FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING num_meetings = (SELECT MIN(total_meetings) FROM (SELECT COUNT(*) AS total_meetings FROM staff_in_meetings GROUP BY staff_id))
1	SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(num_meetings) FROM (SELECT staff_id, COUNT(meeting_id) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) AS subquery)	SELECT s.staff_id FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING COUNT(*) = (SELECT MIN(total_meetings) FROM (SELECT COUNT(*) AS total_meetings FROM staff_in_meetings GROUP BY staff_id))
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AS unique_staff	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings) AS unique_staff	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(*) FROM (SELECT staff_id FROM Staff EXCEPT SELECT staff_id FROM Staff_in_Meetings) AS NonAttendees	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT COUNT(*) FROM Staff s WHERE s.staff_id NOT IN (SELECT sm.staff_id FROM Staff_in_Meetings sm)	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION ALL SELECT i.client_id FROM Invoices i)	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT DISTINCT c.client_id, c.client_details FROM Clients c, Meetings m, Invoices i WHERE c.client_id = m.client_id OR c.client_id = i.client_id	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(*) >= 1	SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id JOIN meetings ON staff_in_meetings.meeting_id = meetings.meeting_id WHERE staff.staff_details LIKE '%s%';
1	SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) >= 1	SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id JOIN meetings ON staff_in_meetings.meeting_id = meetings.meeting_id WHERE staff.staff_details LIKE '%s%';
1	SELECT client_id, sic_code, agency_id FROM Clients WHERE EXISTS (SELECT 1 FROM Meetings WHERE Meetings.client_id = Clients.client_id GROUP BY Meetings.client_id HAVING COUNT(*) = 1) AND EXISTS (SELECT 1 FROM Invoices WHERE Invoices.client_id = Clients.client_id)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT M.start_date_time AS 'Start Time', M.end_date_time AS 'End Time', C.client_details AS 'Client Details', S.staff_details AS 'Staff Details' FROM Meetings M, Clients C, Staff_in_Meetings SM, Staff S WHERE M.client_id = C.client_id AND M.meeting_id = SM.meeting_id AND SM.staff_id = S.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
1	SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
Accuracy: 73.963
