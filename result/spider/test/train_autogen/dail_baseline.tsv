1       SELECT COUNT(*) FROM club;      SELECT count(*) FROM club
1       SELECT COUNT(*) FROM club;      SELECT count(*) FROM club
1       SELECT Name FROM club ORDER BY Name ASC SELECT Name FROM club ORDER BY Name ASC
1       SELECT Name FROM club ORDER BY Name ASC SELECT Name FROM club ORDER BY Name ASC
1       SELECT Manager, Captain FROM club;      SELECT Manager ,  Captain FROM club
1       SELECT Manager, Captain FROM club       SELECT Manager ,  Captain FROM club
1       SELECT Name FROM club WHERE manufacturer != 'Nike'      SELECT Name FROM club WHERE Manufacturer != "Nike"
1       SELECT Name FROM club WHERE Manufacturer != 'Nike'      SELECT Name FROM club WHERE Manufacturer != "Nike"
1       SELECT Name FROM player ORDER BY Wins_count ASC SELECT Name FROM player ORDER BY Wins_count ASC
1       SELECT Name FROM player ORDER BY Wins_count ASC;        SELECT Name FROM player ORDER BY Wins_count ASC
1       SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)     SELECT p.name FROM player p WHERE p.earnings = (SELECT MAX(earnings) FROM player);
1       SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);    SELECT P.name FROM player P WHERE P.earnings = (SELECT MAX(earnings) FROM player)
1       SELECT DISTINCT Country FROM player WHERE Earnings > 1200000    SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
0       SELECT Country FROM player WHERE Earnings > 1200000     SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
0       SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1  SELECT p.country FROM player p WHERE p.wins_count > 2 and p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count>2)
0       SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1  SELECT p.country FROM player p WHERE p.wins_count > 2 and p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count>2)
1       SELECT p.Name AS player_name, c.Name AS club_name FROM player p JOIN club c ON p.Club_ID = c.Club_ID    SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
1       SELECT player.Name AS player_name, club.Name AS club_name FROM player JOIN club ON player.Club_ID = club.Club_ID        SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
0       SELECT DISTINCT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2        SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)
0       SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)
1       SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'      SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
1       SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'  SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
0       SELECT c.Name, AVG(p.Earnings) AS average_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Club_ID ORDER BY average_earnings DESC SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
0       SELECT Name FROM club JOIN player ON club.Club_ID = player.Club_ID GROUP BY club.Name ORDER BY AVG(player.Earnings) DESC        SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
1       SELECT manufacturer, COUNT(Club_ID) AS number_of_clubs FROM club GROUP BY manufacturer  SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1       SELECT manufacturer, COUNT(DISTINCT Club_ID) AS num_clubs FROM club GROUP BY manufacturer       SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1       SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(manufacturer) = (SELECT MAX(count) FROM (SELECT COUNT(manufacturer) as count FROM club GROUP BY manufacturer)) SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM club GROUP BY manufacturer))
0       SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1      SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM club GROUP BY manufacturer))
1       SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1   SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1       SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1   SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1       SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1 SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1       SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1 SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1       SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player) SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
1       SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player) SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
0       SELECT country FROM player WHERE earnings > 1400000 INTERSECT SELECT country FROM player WHERE earnings < 1100000       SELECT DISTINCT country FROM player WHERE earnings > 1400000 UNION ALL SELECT DISTINCT country FROM player WHERE earnings < 1100000
1       SELECT country FROM player WHERE earnings > 1400000 INTERSECT SELECT country FROM player WHERE earnings < 1100000       SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1       SELECT COUNT(DISTINCT Country) FROM player      SELECT COUNT (DISTINCT Country) FROM player
1       SELECT COUNT(DISTINCT Country) FROM player      SELECT COUNT (DISTINCT Country) FROM player
1       SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe')  SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1       SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')  SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
0       SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE c.customer_id IN (SELECT o.customer_id FROM Orders o GROUP BY o.customer_id HAVING COUNT(o.order_id) > 2) AND c.customer_id IN (SELECT oi.customer_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id GROUP BY oi.customer_id HAVING COUNT(oi.order_item_id) >= 3)       SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
0       SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND SUM(oi.order_item_id) >= 3   SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1       SELECT o.order_id, o.order_status_code, COUNT(oi.order_item_id) AS number_of_products FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code    SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
0       SELECT o.order_id, o.order_status_code, COUNT(oi.order_item_id) AS number_of_products FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code    SELECT order_id, order_status_code, (SELECT COUNT(*) FROM order_items WHERE order_items.order_id = orders.order_id) AS product_count FROM orders
0       SELECT DISTINCT Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_item_id) > 1 OR Orders.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders)  SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
0       SELECT MIN(o.date_order_placed) AS EarliestOrderDate, o.date_order_placed AS OrderDate, COUNT(oi.order_item_id) AS NumberOfItems FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.date_order_placed HAVING COUNT(oi.order_item_id) > 1  SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
1       SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)        SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)
1       SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)        SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id)
1       SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN ( SELECT product_id, COUNT(*) AS order_count FROM Order_Items GROUP BY product_id HAVING COUNT(*) >= 2 ) oc ON p.product_id = oc.product_id WHERE oc.product_id IS NULL SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2
0       SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_id) < 2      SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p WHERE (SELECT COUNT(DISTINCT oi.order_id) FROM order_items oi WHERE oi.product_id = p.product_id) < 2
1       SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(Order_Items.product_id) >= 2    SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0       SELECT order_id, date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(DISTINCT Order_Items.product_id) >= 2 SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0       SELECT product_id, product_name, product_price FROM Products WHERE product_id = (SELECT product_id FROM Order_Items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)WITH RankedProducts AS (SELECT P.product_id, P.product_name, P.product_price, RANK() OVER (ORDER BY COUNT(OI.product_id) DESC) as Rank FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id) SELECT product_id, product_name, product_price FROM RankedProducts WHERE Rank = 1;
0       SELECT Products.product_id, Products.product_name, Products.product_price FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY Products.product_id ORDER BY COUNT(*) DESC    SELECT product_id, product_name, product_price FROM (SELECT T1.product_id, T1.product_name, T1.product_price, rank() over (ORDER BY count(*) DESC) as rk FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id) WHERE rk = 1;
0       SELECT o.order_id, SUM(p.product_price) AS total_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_price ASC LIMIT 1       SELECT order_id, sum_price FROM (SELECT T1.order_id, sum(T2.product_price) as sum_price, rank() over (ORDER BY sum(T2.product_price) ) as rk FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id) WHERE rk = 1;
0       SELECT o.order_id, SUM(p.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1 SELECT order_id, sum_price FROM (SELECT T1.order_id, sum(T2.product_price) as sum_price, rank() over (ORDER BY sum(T2.product_price) ) as rk FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.order_id) WHERE rk = 1;
0       SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1    SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM customer_payment_methods GROUP BY payment_method_code) WHERE rank = 1
0       SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1  SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT max(count_global.use_count) FROM (SELECT payment_method_code, COUNT(*) AS use_count FROM customer_payment_methods GROUP BY payment_method_code) count_global)
0       SELECT Customers.gender_code, COUNT(Order_Items.product_id) AS number_of_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.gender_code    SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
0       SELECT c.gender_code, COUNT(DISTINCT p.product_id) AS products_bought FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id JOIN Order_Items AS oi ON o.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id GROUP BY c.gender_code        SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
0       SELECT gender_code, COUNT(order_id) AS number_of_orders FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code   SELECT c.gender_code, COUNT(o.order_id) FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code
0       SELECT c.gender_code, COUNT(o.order_id) AS orders_count FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.gender_code    SELECT g.gender_code, COUNT(*) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id GROUP BY g.gender_code;
0       SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;      SELECT first_name, middle_initial, last_name, method_code FROM (SELECT customer_first_name AS first_name, customer_middle_initial AS middle_initial, customer_last_name AS last_name, customer_id FROM customers) AS cust LEFT JOIN (SELECT payment_method_code AS method_code, customer_id FROM customer_payment_methods) AS paym ON cust.customer_id = paym.customer_id
0       SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id;      SELECT c1.customer_first_name, c1.customer_middle_initial, c1.customer_last_name, cp.payment_method_code FROM customers c1 LEFT JOIN customer_payment_methods cp ON c1.customer_id = cp.customer_id
1       SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number   SELECT T2.invoice_status_code, T2.invoice_date, T1.shipment_date FROM Shipments AS T1 LEFT JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number
0       SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number   SELECT A.invoice_status_code, A.invoice_date, B.shipment_date FROM (SELECT invoice_number, invoice_status_code, invoice_date FROM invoices) A LEFT JOIN shipments B ON A.invoice_number = B.invoice_number
0       SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0       SELECT product_name, shipment_date FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id ORDER BY shipment_date    SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0       SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id   SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0       SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipments ON Order_Items.order_id = Shipments.order_id    SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0       SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))
0       SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipments s ON oi.order_id = s.order_id SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))
1       SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female'   SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
1       SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female'   SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
1       SELECT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_id IS NULL   SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
1       SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments)     SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
1       SELECT Orders.order_id, Orders.date_order_placed AS date, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, Orders.date_order_placed     select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id
1       SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed        SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id
1       SELECT COUNT(DISTINCT customer_id) FROM Orders  SELECT count(DISTINCT customer_id) FROM Orders
1       SELECT COUNT(DISTINCT customer_id) FROM Orders  SELECT count(DISTINCT customer_id) FROM Orders
1       SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items  SELECT count(DISTINCT order_item_status_code) FROM Order_items
1       SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items  SELECT count(DISTINCT order_item_status_code) FROM Order_items
1       SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods        SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1       SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods        SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1       SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1       SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1       SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'      SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1       SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'      SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1       SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)        SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1       SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)        SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1       SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)      SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1       SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)      SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1       SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)      SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1       SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)      SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1       SELECT order_status_code, date_order_placed FROM Orders;        SELECT order_status_code ,  date_order_placed FROM Orders
1       SELECT order_status_code, date_order_placed FROM Orders;        SELECT order_status_code ,  date_order_placed FROM Orders
1       SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'   SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
0       SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States' SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
0       SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id    SELECT c.customer_first_name AS buyer, p.product_name AS product FROM customers c CROSS JOIN products p WHERE EXISTS (SELECT 1 FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id)
0       SELECT Customers.customer_first_name, Products.product_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id   SELECT c.customer_first_name AS buyer, p.product_name AS product FROM customers c CROSS JOIN products p WHERE EXISTS (SELECT 1 FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id)
1       SELECT COUNT(*) FROM Shipment_Items;    SELECT count(*) FROM Shipment_Items
1       SELECT COUNT(DISTINCT `product_id`) FROM `Shipment_Items` JOIN `Order_Items` ON `Shipment_Items`.`order_item_id` = `Order_Items`.`order_item_id`;       SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id
1       SELECT AVG(product_price) FROM Products SELECT avg(product_price) FROM Products
1       SELECT AVG(product_price) FROM Products SELECT avg(product_price) FROM Products
0       SELECT AVG(product_price) FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id  SELECT AVG(product_price) FROM products p JOIN (SELECT DISTINCT product_id FROM order_items) pi ON p.product_id = pi.product_id
0       SELECT AVG(product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id        SELECT AVG(product_price) FROM products WHERE product_id IN (SELECT product_id FROM order_items)
0       SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)      SELECT email_address, town_city, county FROM customers WHERE customers.gender_code IN (SELECT gender_code FROM customers GROUP BY gender_code HAVING count(*) = (SELECT count(*) AS c FROM customers GROUP BY gender_code ORDER BY c limit 1))
0       SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code = (SELECT gender_code FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id GROUP BY c.gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1) SELECT email_address, town_city, county FROM customers WHERE customers.gender_code IN (SELECT gender_code FROM customers GROUP BY gender_code HAVING count(*) = (SELECT count(*) AS c FROM customers GROUP BY gender_code ORDER BY c limit 1))
1       SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2 SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1       SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2 SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
0       SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1   SELECT order_status_code FROM orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(order_status_code) as count FROM orders GROUP BY order_status_code))
0       SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1   WITH OrderStatusCount AS (SELECT order_status_code, COUNT(*) AS OSCOUNT FROM orders GROUP BY order_status_code) SELECT order_status_code FROM OrderStatusCount WHERE OSCOUNT = (SELECT MIN(OSCOUNT) FROM OrderStatusCount)
1       SELECT product_id, product_description FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3)      SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1       SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1       SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number, i.invoice_date HAVING COUNT(s.shipment_id) >= 2      SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1       SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2      SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1       SELECT shipment_tracking_number, shipment_date FROM Shipments;  SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1       SELECT shipment_tracking_number, shipment_date FROM Shipments;  SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1       SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);  SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )
1       SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);  select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )
1       SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director)   SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)
1       SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director)   SELECT name FROM director WHERE Age = (SELECT max(Age) From director)
1       SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'        SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"
1       SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
1       SELECT Title FROM program ORDER BY Start_Year DESC      SELECT title FROM program ORDER BY start_year DESC
0       SELECT Name FROM director WHERE Director_ID = (SELECT Director_ID FROM program GROUP BY Director_ID ORDER BY COUNT(*) DESC LIMIT 1)     SELECT name FROM director WHERE director_id in (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(count_programs) FROM (SELECT COUNT(program_id) AS count_programs FROM program GROUP BY director_id)));
0       SELECT d.Name, d.Age FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID ORDER BY COUNT(*) DESC LIMIT 1      SELECT name, age FROM director WHERE director_id IN (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(program_id) AS cnt FROM program GROUP BY director_id)))
0       SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1      SELECT title FROM program WHERE start_year = (SELECT MAX(start_year) FROM program);
0       SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1)  SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1
1       SELECT c.Name, COUNT(p.Program_ID) AS number_of_programs FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name        SELECT c.name, COUNT(p.program_id) AS program_count FROM channel AS c LEFT JOIN program AS p ON c.channel_id = p.channel_id GROUP BY c.channel_id
1       SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)   SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)
0       SELECT director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title = 'Dracula'   SELECT name FROM director WHERE director_id IN (SELECT director_id FROM program WHERE title = 'Dracula')
0       SELECT C.Name, C.Internet FROM channel C JOIN director_admin DA ON C.Channel_ID = DA.Channel_ID GROUP BY C.Channel_ID ORDER BY COUNT(DA.Director_ID) DESC LIMIT 1      SELECT c.name, c.internet FROM channel c INNER JOIN (SELECT channel_id FROM director_admin GROUP BY channel_id HAVING COUNT(DISTINCT director_id) = (SELECT MAX(num_directors) FROM (SELECT COUNT(DISTINCT director_id) AS num_directors FROM director_admin GROUP BY channel_id))) da ON c.channel_id = da.channel_id
1       SELECT Name FROM director WHERE Age BETWEEN 30 AND 60   SELECT name FROM director WHERE age BETWEEN 30 AND 60
0       SELECT DISTINCT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age < 40) AND EXISTS (SELECT 1 FROM director_admin da INNER JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age > 60)  SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id = t2.channel_id JOIN director AS t3 ON t2.director_id = t3.director_id WHERE t3.age < 40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id = t2.channel_id JOIN director AS t3 ON t2.director_id = t3.director_id WHERE t3.age > 60
1       SELECT channel.Channel_ID, channel.Name FROM channel WHERE channel.Channel_ID NOT IN (SELECT director_admin.Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Name = 'Hank Baskett')     SELECT ch.channel_id, ch.name FROM channel ch WHERE ch.channel_id NOT IN (SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett')
1       SELECT COUNT(*) FROM radio;     SELECT count(*) FROM radio
1       SELECT Transmitter FROM radio ORDER BY ERP_kW ASC       select transmitter from radio order by erp_kw asc
1       SELECT tv_show_name, Original_Airdate FROM tv_show      SELECT tv_show_name ,  Original_Airdate FROM tv_show
1       SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC'        SELECT Station_name FROM city_channel WHERE Affiliation != "ABC"
1       SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30 SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30
1       SELECT Transmitter FROM radio WHERE ERP_kW = (SELECT MAX(ERP_kW) FROM radio)    SELECT transmitter FROM radio WHERE erp_kw = (SELECT MAX(erp_kw) FROM radio)
1       SELECT AVG(ERP_kW) FROM radio;  SELECT avg(ERP_kW) FROM radio
1       SELECT Affiliation, COUNT(ID) AS num_city_channels FROM city_channel GROUP BY Affiliation       SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation
1       SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) = (SELECT MAX(count) FROM (SELECT COUNT(Affiliation) as count FROM city_channel GROUP BY Affiliation))      SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(AffiliationCount) FROM (SELECT COUNT(*) AS AffiliationCount FROM city_channel GROUP BY affiliation))
1       SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3  SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3
1       SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC   SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC
1       SELECT radio.Transmitter, city_channel.City FROM radio INNER JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID INNER JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID    SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID
1       SELECT r.Transmitter, cc.Station_name FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC  SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC
0       SELECT r.Transmitter, COUNT(DISTINCT ccr.City_channel_ID) AS num_city_channels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter     SELECT r.transmitter, COUNT(distinct id) AS ChannelsCount FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id LEFT JOIN city_channel c ON c.id = ccr.city_channel_id GROUP BY r.radio_id
1       SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)  SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio)
0       SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1    SELECT model FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000)
0       SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1    SELECT model FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000)
1       SELECT Name FROM driver WHERE Citizenship = 'United States'     SELECT name FROM driver WHERE citizenship  =  'United States'
1       SELECT d.Name FROM driver d WHERE d.Citizenship = 'United States'       SELECT name FROM driver WHERE citizenship  =  'United States'
0       SELECT Driver_ID, COUNT(Vehicle_ID) AS total_vehicles FROM vehicle_driver GROUP BY Driver_ID ORDER BY total_vehicles DESC LIMIT 1       SELECT A.driver_id, A.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id) A WHERE A.num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id))
0       SELECT Driver_ID, COUNT(Vehicle_ID) AS total_vehicles FROM vehicle_driver GROUP BY Driver_ID ORDER BY total_vehicles DESC LIMIT 1       SELECT A.driver_id, A.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id) A WHERE A.num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id))
1       SELECT MAX(Power) AS MaxPower, AVG(Power) AS AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'    SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1       SELECT MAX(Power) AS MaxPower, AVG(Power) AS AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'        SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
0       SELECT v.Vehicle_ID FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Driver_ID) ASC LIMIT 1   SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id ORDER BY frequency ASC) WHERE frequency = (SELECT MIN(frequency) FROM (SELECT COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id))
0       SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1 SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id ORDER BY frequency ASC) WHERE frequency = (SELECT MIN(frequency) FROM (SELECT COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id))
1       SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996    SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1       SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996    SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1       SELECT Build_Year, Model, Builder FROM vehicle; SELECT build_year ,  model ,  builder FROM vehicle
1       SELECT Build_Year, Model, Builder FROM vehicle; SELECT build_year ,  model ,  builder FROM vehicle
1       SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012   SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1       SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012     SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
0       SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE driver.Racing_Series = 'NASCAR'    SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1       SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'      SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1       SELECT AVG(Top_Speed) FROM vehicle      SELECT avg(top_speed) FROM vehicle
1       SELECT AVG(Top_Speed) FROM vehicle      SELECT avg(top_speed) FROM vehicle
1       SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000   select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000
0       SELECT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000    SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 5000))
0       SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150       SELECT DISTINCT v.model FROM vehicle v WHERE (v.total_production > 100 OR v.top_speed > 150);
1       SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150       SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1       SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'   SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
1       SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'   SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
0       SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)       SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
1       SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)       SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver)
0       SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Builder = 'Ziyang' OR (SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) >= 2 GROUP BY v.Vehicle_ID, v.Model       SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)
1       SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(vd.Driver_ID) = 2) OR v.Builder = 'Ziyang'   SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)
1       SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2) OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'))       SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1       SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2 OR 'Jeff Gordon' IN (SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID = vehicle.Vehicle_ID))) SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1       SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)     SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1       SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)     SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1       SELECT Name FROM driver ORDER BY Name ASC;      SELECT name FROM driver ORDER BY name
1       SELECT Name FROM driver ORDER BY Name   SELECT name FROM driver ORDER BY name
1       SELECT Racing_Series, COUNT(DISTINCT Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Racing_Series   SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1       SELECT Racing_Series, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Racing_Series        SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
0       SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'   SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))
0       SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1'   SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))
1       SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)       SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1       SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)       SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1       SELECT COUNT(*) FROM Exams;     SELECT count(*) FROM Exams
1       SELECT COUNT(*) FROM Exams;     SELECT count(*) FROM Exams
1       SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC       select distinct subject_code from exams order by subject_code asc
1       SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;      SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
1       SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database' SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1       SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database' SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1       SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;   SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1       SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC    SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1       SELECT Type_of_Question_Code, COUNT(Question_ID) AS question_count FROM Questions GROUP BY Type_of_Question_Code        SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1       SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code  SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1       SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'      SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1       SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';     SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1       SELECT COUNT(DISTINCT Comments) FROM Student_Answers    SELECT count(DISTINCT Comments) FROM Student_Answers
1       SELECT COUNT(DISTINCT Comments) FROM Student_Answers    SELECT count(DISTINCT Comments) FROM Student_Answers
0       SELECT Student_Answer_Text, COUNT(*) AS answer_count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY answer_count DESC       SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
0       SELECT Student_Answer_Text, COUNT(*) AS frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY frequency DESC     SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
1       SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID       SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1       SELECT S.First_Name, A.Date_of_Answer FROM Student_Answers A JOIN Students S ON A.Student_ID = S.Student_ID     SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1       SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1       SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
0       SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1    SELECT assessment FROM student_assessments GROUP BY assessment HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM student_assessments GROUP BY assessment))
0       SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1    WITH AssessmentFrequency AS (SELECT assessment, COUNT(*) AS freq FROM student_assessments GROUP BY assessment) SELECT assessment FROM AssessmentFrequency WHERE freq = (SELECT MIN(freq) FROM AssessmentFrequency)
1       SELECT First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.Student_ID HAVING COUNT(sa.Student_Answer_ID) >= 2 SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1       SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_Answer_ID) >= 2)   SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1       SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(Valid_Answer_Text) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Valid_Answer_Text) AS Cnt FROM Valid_Answers GROUP BY Valid_Answer_Text))  SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, rank() over (ORDER BY COUNT(*) DESC) as rk FROM Valid_Answers GROUP BY Valid_Answer_Text) WHERE rk = 1
0       SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1   SELECT Valid_Answer_Text FROM (SELECT Valid_Answer_Text, rank() over (ORDER BY COUNT(*) DESC) as rk FROM Valid_Answers GROUP BY Valid_Answer_Text) WHERE rk = 1
1       SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'  SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1       SELECT Last_Name FROM Students WHERE Gender_MFU <> 'M'  SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1       SELECT Gender_MFU, COUNT(Student_ID) AS number_of_students FROM Students GROUP BY Gender_MFU    SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1       SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU  SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1       SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')   SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1       SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')   SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1       SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)        SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1       SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)        SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
0       SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent')  SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1       SELECT sa.Student_Answer_Text FROM Student_Answers AS sa WHERE sa.Comments = 'Normal' INTERSECT SELECT sa.Student_Answer_Text FROM Student_Answers AS sa WHERE sa.Comments = 'Absent'   SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1       SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3       SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1       SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3       SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1       SELECT * FROM Students; SELECT * FROM Students
1       SELECT * FROM Students  SELECT * FROM Students
1       SELECT COUNT(*) FROM Addresses; SELECT count(*) FROM Addresses
1       SELECT COUNT(*) FROM Addresses; SELECT count(*) FROM Addresses
1       SELECT address_id, address_details FROM Addresses       SELECT address_id ,  address_details FROM Addresses
1       SELECT address_id, address_details FROM Addresses;      SELECT address_id ,  address_details FROM Addresses
1       SELECT COUNT(*) FROM Products;  SELECT count(*) FROM Products
1       SELECT COUNT(*) FROM Products;  SELECT count(*) FROM Products
1       SELECT product_id, product_type_code, product_name FROM Products        SELECT product_id ,  product_type_code ,  product_name FROM Products
1       SELECT product_id, product_type_code, product_name FROM Products;       SELECT product_id ,  product_type_code ,  product_name FROM Products
1       SELECT product_price FROM Products WHERE product_name = 'Monitor'       SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1       SELECT product_price FROM Products WHERE product_name = 'Monitor'       SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1       SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1       SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products     SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1       SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';    SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1       SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';    SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
0       SELECT COUNT(*) FROM Products WHERE product_type_code = 'hardware'      SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1       SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'      SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1       SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)       SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
1       SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)       SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
0       SELECT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')       SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
1       SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')       SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
0       SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1       SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')
0       SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1       SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')
1       SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware');  SELECT product_id, product_name FROM (SELECT product_id, product_name, RANK() OVER (ORDER BY product_price ASC) AS rnk FROM products WHERE product_type_code = 'Hardware') WHERE rnk = 1
1       SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')   SELECT p1.product_id, p1.product_name FROM products p1 WHERE p1.product_type_code = 'Hardware' AND p1.product_price = (SELECT MIN(product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')
1       SELECT product_name FROM Products ORDER BY product_price DESC   SELECT product_name FROM Products ORDER BY product_price DESC
1       SELECT product_name FROM Products ORDER BY product_price DESC   SELECT product_name FROM Products ORDER BY product_price DESC
1       SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC       SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1       SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC       SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1       SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code    SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1       SELECT product_type_code, COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code   SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1       SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code   SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1       SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code  SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1       SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2 SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
1       SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2 SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
0       SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1        SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(product_id) AS cnt FROM products GROUP BY product_type_code))
0       SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1        SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(product_id) AS cnt FROM products GROUP BY product_type_code))
1       SELECT COUNT(DISTINCT customer_id) FROM Customers;      SELECT count(*) FROM Customers
1       SELECT COUNT(*) FROM Customers; SELECT count(*) FROM Customers
1       SELECT customer_id, customer_name FROM Customers        SELECT customer_id ,  customer_name FROM Customers
1       SELECT customer_id, customer_name FROM Customers;       SELECT customer_id ,  customer_name FROM Customers
1       SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'   SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1       SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy' SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1       SELECT payment_method_code, COUNT(customer_id) AS NumberOfCustomers FROM Customers GROUP BY payment_method_code SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
1       SELECT payment_method_code, COUNT(DISTINCT customer_id) AS num_customers FROM Customers GROUP BY payment_method_code    SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
0       SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1   SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(customer_count) FROM (SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM customers GROUP BY payment_method_code) sub)
0       SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1   SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM customers GROUP BY payment_method_code))
0       SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) SELECT customer_name FROM customers WHERE payment_method_code IN (SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MIN(count) FROM (SELECT COUNT(customer_id) AS count FROM customers GROUP BY payment_method_code)))
0       SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) SELECT C.customer_name FROM customers C WHERE EXISTS (SELECT 1 FROM customers WHERE customers.payment_method_code = C.payment_method_code GROUP BY payment_method_code HAVING COUNT(*) = (SELECT COUNT(*) FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1))
1       SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';      SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1       SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'       SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1       SELECT DISTINCT payment_method_code FROM Customers;     SELECT DISTINCT payment_method_code FROM Customers
1       SELECT DISTINCT payment_method_code FROM Customers      SELECT DISTINCT payment_method_code FROM Customers
1       SELECT product_id, product_type_code FROM Products ORDER BY product_name        SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
1       SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;   SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
0       SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1 SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(product_id) as cnt FROM products GROUP BY product_type_code) t)
0       SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1 SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(p1.product_id) AS cnt FROM products p1 GROUP BY p1.product_type_code) sub)
1       SELECT COUNT(*) FROM Customer_Orders;   SELECT count(*) FROM Customer_orders
1       SELECT COUNT(*) FROM Customer_Orders    SELECT count(*) FROM Customer_orders
1       SELECT Customer_Orders.order_id, Customer_Orders.order_date, Customer_Orders.order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'      SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1       SELECT order_id, order_date, order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE customer_name = 'Jeromy';       SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1       SELECT customer_name, customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE Customer_Orders.customer_id = Customers.customer_id) AS number_of_orders FROM Customers SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id, customers.customer_name
1       SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS num_orders FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name    SELECT c.customer_name, c.customer_id, (SELECT COUNT(*) FROM customer_orders WHERE customer_id = c.customer_id) AS num_orders FROM customers c
0       SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1    SELECT DISTINCT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_orders.order_id) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(order_id) AS OrderCount FROM customer_orders GROUP BY customer_id) temp)
0       SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1       SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c INNER JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM customer_orders GROUP BY customer_id) tmp)
1       SELECT order_status_code, COUNT(order_id) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code   SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1       SELECT order_status_code, COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY order_status_code        SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1       SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(order_status_code) AS Cnt FROM Customer_Orders GROUP BY order_status_code))      SELECT order_status_code AS MostFrequentStatusCode FROM customer_orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(cnt) FROM (SELECT order_status_code, COUNT(order_status_code) as cnt FROM customer_orders GROUP BY order_status_code))
1       SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(order_status_code) AS Cnt FROM Customer_Orders GROUP BY order_status_code) Temp);        WITH RankFrequency AS (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(order_id) DESC) as rank FROM customer_orders GROUP BY order_status_code) SELECT order_status_code FROM RankFrequency WHERE rank = 1
1       SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)       SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1       SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)       SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1       SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)  SELECT p.product_name FROM products p WHERE p.product_id NOT IN (SELECT o.product_id FROM order_items o)
1       SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)  SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
0       SELECT SUM(Order_Items.order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'   SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'
0       SELECT SUM(Order_Items.order_quantity) AS TotalMonitorsOrdered FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'   SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'
0       SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id = (SELECT product_id FROM Products WHERE product_name = 'Monitor'))        SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1       SELECT COUNT(DISTINCT Customer_Orders.customer_id) FROM Customer_Orders JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'       SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1       SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders SELECT count(DISTINCT customer_id) FROM Customer_orders
1       SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders SELECT count(DISTINCT customer_id) FROM Customer_orders
1       SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)    SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1       SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)    SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1       SELECT o.order_date, o.order_id FROM Customer_Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING MAX(oi.order_quantity) > 6 OR COUNT(oi.product_id) > 3        SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
0       SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN Order_Items OI ON CO.order_id = OI.order_id GROUP BY CO.order_id HAVING SUM(OI.order_quantity) > 6 OR COUNT(OI.product_id) > 3   SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
1       SELECT COUNT(*) FROM building;  SELECT count(*) FROM building
1       SELECT COUNT(*) FROM building   SELECT count(*) FROM building
1       SELECT Name FROM building ORDER BY Number_of_Stories ASC        SELECT Name FROM building ORDER BY Number_of_Stories ASC
1       SELECT Name FROM building ORDER BY Number_of_Stories ASC        SELECT Name FROM building ORDER BY Number_of_Stories ASC
1       SELECT Address FROM building ORDER BY Completed_Year DESC       SELECT Address FROM building ORDER BY Completed_Year DESC
1       SELECT Address FROM building ORDER BY Completed_Year DESC       SELECT Address FROM building ORDER BY Completed_Year DESC
1       SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980        SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1       SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980        SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1       SELECT AVG(Population) FROM region;     SELECT avg(Population) FROM region
1       SELECT AVG(Population) FROM region;     SELECT avg(Population) FROM region
1       SELECT Name FROM region ORDER BY Name ASC       SELECT Name FROM region ORDER BY Name ASC
1       SELECT name FROM region ORDER BY name ASC       SELECT Name FROM region ORDER BY Name ASC
1       SELECT r.Capital FROM region r WHERE r.Area > 10000     SELECT Capital FROM region WHERE Area  >  10000
1       SELECT r.Capital FROM region r WHERE r.Area > 10000     SELECT Capital FROM region WHERE Area  >  10000
0       SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)      SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0       SELECT r.Capital FROM region r WHERE r.Population = (SELECT MAX(Population) FROM region)        SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0       SELECT Name FROM region ORDER BY Area DESC LIMIT 5      SELECT Name FROM region WHERE Area IS NOT NULL AND Area >= (SELECT min(T.Area) FROM (SELECT Area FROM region WHERE Area IS NOT NULL ORDER BY Area DESC LIMIT 5) T) ORDER BY Area DESC
0       SELECT Name FROM region ORDER BY Area DESC LIMIT 5      SELECT Name FROM region WHERE Area IS NOT NULL AND Area >= (SELECT min(T.Area) FROM (SELECT Area FROM region WHERE Area IS NOT NULL ORDER BY Area DESC LIMIT 5) T) ORDER BY Area DESC
1       SELECT b.Name AS building_name, r.Name AS region_name FROM building b JOIN region r ON b.Region_ID = r.Region_ID        SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1       SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID    SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1       SELECT R.Name FROM region R WHERE EXISTS (SELECT 1 FROM building B WHERE B.Region_ID = R.Region_ID GROUP BY B.Region_ID HAVING COUNT(B.Building_ID) > 1)        SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
0       SELECT Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID HAVING COUNT(b.Building_ID) > 1     SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
0       SELECT R.Capital FROM region R WHERE R.Region_ID = (SELECT B.Region_ID FROM building B GROUP BY B.Region_ID ORDER BY COUNT(*) DESC LIMIT 1)     SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(building_id) AS cnt FROM building GROUP BY region_id)))
0       SELECT R.Capital FROM region R WHERE R.Region_ID = (SELECT B.Region_ID FROM building B GROUP BY B.Region_ID ORDER BY COUNT(*) DESC LIMIT 1)     SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(building_id) AS cnt FROM building GROUP BY region_id)))
1       SELECT b.Address, r.Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID  SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1       SELECT building.Address, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID SELECT building.address, region.name FROM building JOIN region ON building.region_id = region.region_id
1       SELECT Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'       SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1       SELECT b.Number_of_Stories FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'    SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1       SELECT "Completed_Year", COUNT("Building_ID") AS "Number_of_Buildings" FROM "building" GROUP BY "Completed_Year"        SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
1       SELECT Completed_Year, COUNT(*) AS buildings_count FROM building GROUP BY Completed_Year;       SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
0       SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1      SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT COUNT(*) FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1)
0       SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1      SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT COUNT(*) FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1)
1       SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building) SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1       SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building) SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1       SELECT DISTINCT b1.Completed_Year FROM building b1 WHERE b1.Number_of_Stories > 20 AND b1.Completed_Year IN (SELECT b2.Completed_Year FROM building b2 WHERE b2.Number_of_Stories < 15) SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1       SELECT DISTINCT b1.Completed_Year FROM building AS b1 WHERE b1.Number_of_Stories > 20 INTERSECT SELECT DISTINCT b2.Completed_Year FROM building AS b2 WHERE b2.Number_of_Stories < 15   SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1       SELECT DISTINCT Address FROM building   SELECT DISTINCT Address FROM building
1       SELECT DISTINCT "Address" FROM "building";      SELECT DISTINCT Address FROM building
1       SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;    SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1       SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC     SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1       SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC       select channel_details from channels order by channel_details
1       SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;      select channel_details from channels order by channel_details
1       SELECT COUNT(*) FROM Services;  SELECT count(*) FROM services
1       SELECT COUNT(*) FROM Services;  SELECT count(*) FROM services
1       SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(Analytical_Layer_Type_Code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Analytical_Layer_Type_Code) AS Cnt FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) Temp); SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code HAVING COUNT(analytical_layer_type_code) = (SELECT MAX(count_type) FROM (SELECT COUNT(analytical_layer_type_code) AS count_type FROM analytical_layer GROUP BY analytical_layer_type_code))
0       SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1      WITH TypeFrequency AS (SELECT analytical_layer_type_code, COUNT(*) AS Count FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM TypeFrequency WHERE Count = (SELECT MAX(Count) FROM TypeFrequency)
0       SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch'     SELECT service_details FROM services WHERE EXISTS (SELECT * FROM customers INNER JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND services.service_id = customers_and_services.service_id)
0       SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customer_Details = 'Hardy Kutch' SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))
1       SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(Service_ID) > 3)       SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.customers_and_services_id) > 3)
0       SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Services.Service_ID HAVING COUNT(DISTINCT Customer_ID) > 3 SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.customers_and_services_id) > 3)
0       SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1) SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) = (SELECT MAX(service_count) FROM (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id)))
1       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(Service_ID) = (SELECT MAX(counts) FROM (SELECT Customer_ID, COUNT(Service_ID) AS counts FROM Customers_and_Services GROUP BY Customer_ID)))       SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(service_id) = (SELECT MAX(service_count) FROM (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id)))
0       SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)       SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(DISTINCT service_id) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT service_id) AS CountServices FROM customers_and_services GROUP BY customer_id)))
1       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT Service_ID) AS cnt FROM Customers_and_Services GROUP BY Customer_ID)))        SELECT cu.customer_details FROM customers cu WHERE cu.customer_id IN (SELECT ca.customer_id FROM customers_and_services ca GROUP BY ca.customer_id HAVING COUNT(DISTINCT ca.service_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT service_id) cnt FROM customers_and_services GROUP BY customer_id)))
1       SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)        select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
1       SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)        select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
0       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))       SELECT customer_details FROM customers WHERE customer_id IN (SELECT Customer_ID FROM customers_and_services WHERE service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING (COUNT(*)) = (SELECT COUNT(*) FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1)))
0       SELECT DISTINCT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1))      SELECT DISTINCT c.customer_details FROM customers c INNER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id IN (SELECT s.service_id FROM services s WHERE s.service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) count FROM customers_and_services GROUP BY service_id) tmp)))
1       SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services;      SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
1       SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services       SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
1       SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'    SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
1       SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'    SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0       SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')     SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'good')
0       SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customer_Details = 'Hardy Kutch' UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')      SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'good')
0       SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID AND Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Details = 'Hardy Kutch' AND Status_Code = 'bad'      SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') AND EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'bad')
0       SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') AND EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'bad')
0       SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij'        SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE CI.service_id = S.service_id AND C.channel_details = '15 ij')
0       SELECT Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij'  SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE CI.service_id = S.service_id AND C.channel_details = '15 ij')
0       SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck' AND ci.Services_and_Channels_Details = 'bad'  SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'stuck' AND services_and_channels_details = 'bad')
1       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')       SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND services_and_channels_details = 'bad')
0       SELECT COUNT(*) FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'successful'     SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1       SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'   SELECT count(*) FROM integration_platform WHERE integration_platform_details  LIKE  "%Success%"
0       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%failed%'))      SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE CI.customer_id = customers.customer_id AND IP.integration_platform_details = 'Fail')
1       SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform_Details = 'Fail')       SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE CI.customer_id = customers.customer_id AND IP.integration_platform_details = 'Fail')
1       SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)    SELECT service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL
1       SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)    SELECT service_details FROM services WHERE service_id NOT IN (SELECT service_id FROM customers_and_services)
1       SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code   SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
1       SELECT Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code    SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
1       SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details = 'unsatisfied' SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'unsatisfied')
1       SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details = 'unsatisfied')   SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'unsatisfied')
1       SELECT COUNT(*) FROM Vehicles;  SELECT count(*) FROM vehicles
1       SELECT COUNT(*) FROM Vehicles;  SELECT count(*) FROM vehicles
1       SELECT name FROM Vehicles ORDER BY Model_year DESC      SELECT name FROM vehicles ORDER BY model_year DESC
1       SELECT name FROM Vehicles ORDER BY Model_year DESC      SELECT name FROM vehicles ORDER BY model_year DESC
1       SELECT DISTINCT Type_of_powertrain FROM Vehicles        SELECT DISTINCT type_of_powertrain FROM vehicles
1       SELECT DISTINCT Type_of_powertrain FROM Vehicles        SELECT DISTINCT type_of_powertrain FROM vehicles
1       SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)        SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1       SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)        SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1       SELECT DISTINCT V1.Type_of_powertrain FROM Vehicles V1 WHERE EXISTS (SELECT 1 FROM Vehicles V2 WHERE V2.Type_of_powertrain = V1.Type_of_powertrain AND V2.Model_year = 2014) AND EXISTS (SELECT 1 FROM Vehicles V3 WHERE V3.Type_of_powertrain = V1.Type_of_powertrain AND V3.Model_year = 2013)        SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1       SELECT DISTINCT v1.Type_of_powertrain FROM Vehicles v1 JOIN Vehicles v2 ON v1.Type_of_powertrain = v2.Type_of_powertrain WHERE v1.Model_year = 2013 AND v2.Model_year = 2014    SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1       SELECT Type_of_powertrain, COUNT(id) AS number_of_vehicles FROM Vehicles GROUP BY Type_of_powertrain    SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
1       SELECT Type_of_powertrain, COUNT(id) AS vehicle_count FROM Vehicles GROUP BY Type_of_powertrain SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
0       SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1      SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) = (SELECT MAX(count) FROM (SELECT COUNT(id) count FROM vehicles GROUP BY type_of_powertrain))
0       SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1      SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(type_of_powertrain) = (SELECT MAX(cnt) FROM (SELECT COUNT(type_of_powertrain) AS cnt FROM vehicles GROUP BY type_of_powertrain))
1       SELECT MIN(Annual_fuel_cost) AS Min_Annual_Fuel_Cost, MAX(Annual_fuel_cost) AS Max_Annual_Fuel_Cost, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles       SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1       SELECT MIN(Annual_fuel_cost) AS MinAnnualFuelCost, MAX(Annual_fuel_cost) AS MaxAnnualFuelCost, AVG(Annual_fuel_cost) AS AvgAnnualFuelCost FROM Vehicles SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1       SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1       SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1       SELECT V.Type_of_powertrain, AVG(V.Annual_fuel_cost) AS AverageAnnualFuelCost FROM Vehicles V GROUP BY V.Type_of_powertrain HAVING COUNT(V.id) >= 2     SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1       SELECT V.Type_of_powertrain, AVG(V.Annual_fuel_cost) AS AverageAnnualFuelCost FROM Vehicles V GROUP BY V.Type_of_powertrain HAVING COUNT(V.id) >= 2     SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1       SELECT name, age, membership_credit FROM Customers      SELECT name ,  age ,  membership_credit FROM customers
1       SELECT name, age, membership_credit FROM Customers      SELECT name ,  age ,  membership_credit FROM customers
1       SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)        SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)
1       SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)        SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)
1       SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers) SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1       SELECT AVG(Customers.age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)       SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1       SELECT * FROM Discount; SELECT * FROM discount
1       SELECT * FROM Discount; SELECT * FROM discount
0       SELECT V.name, SUM(RH.total_hours) FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.name     SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
0       SELECT Vehicles.name, SUM(Renting_history.total_hours) AS TotalRentalHours FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name       SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
1       SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)     SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1       SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)     SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
0       SELECT name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.name HAVING COUNT(Renting_history.id) >= 2     SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
1       SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)     SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
1       SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.id, Vehicles.name, Vehicles.Model_year HAVING COUNT(Renting_history.id) = (SELECT MAX(cnt) FROM (SELECT COUNT(id) AS cnt FROM Renting_history GROUP BY vehicles_id))        SELECT name, model_year FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(id) = (SELECT MAX(cnt) FROM (SELECT COUNT(id) AS cnt FROM renting_history GROUP BY vehicles_id)))
0       SELECT Vehicles.name, Vehicles.Model_year FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1   SELECT v.name, v.model_year FROM vehicles v WHERE v.id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = (SELECT MAX(ccount) FROM (SELECT COUNT(vehicles_id) AS ccount FROM renting_history GROUP BY vehicles_id)))
0       SELECT V.name, SUM(RH.total_hours) AS total_renting_hours FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.name ORDER BY total_renting_hours DESC    SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0       SELECT V.name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC   SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0       SELECT Discount.name FROM Discount JOIN Renting_history ON Discount.id = Renting_history.discount_id GROUP BY Discount.id ORDER BY COUNT(*) DESC LIMIT 1        SELECT d.name FROM discount d, renting_history rh WHERE d.id = rh.discount_id GROUP BY d.id HAVING COUNT(rh.discount_id) = (SELECT MAX(COUNTed) FROM (SELECT discount_id, COUNT(*) AS COUNTed FROM renting_history GROUP BY discount_id) count_max)
0       SELECT D.name FROM Discount D JOIN Renting_history RH ON D.id = RH.discount_id GROUP BY D.id ORDER BY COUNT(RH.id) DESC LIMIT 1 SELECT d.name FROM discount d, renting_history rh WHERE d.id = rh.discount_id GROUP BY d.id HAVING COUNT(rh.discount_id) = (SELECT MAX(COUNTed) FROM (SELECT discount_id, COUNT(*) AS COUNTed FROM renting_history GROUP BY discount_id) count_max)
0       SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.total_hours > 30SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1       SELECT Vehicles.name, Vehicles.Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.id HAVING SUM(Renting_history.total_hours) > 30     SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1       SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel_Rate FROM Vehicles GROUP BY Type_of_powertrain SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1       SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS Avg_City_Fuel_Economy, AVG(Highway_fuel_economy_rate) AS Avg_Highway_Fuel_Economy FROM Vehicles GROUP BY Type_of_powertrain   SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1       SELECT AVG(amount_of_loan) FROM Student_Loans   SELECT avg(amount_of_loan) FROM Student_Loans
1       SELECT AVG(amount_of_loan) FROM Student_Loans;  SELECT avg(amount_of_loan) FROM Student_Loans
0       SELECT Students.student_id, Students.bio_data FROM Students WHERE Students.student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND Students.student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(detention_id) < 2)      SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 OR (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2
1       SELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN ( SELECT student_id, COUNT(class_id) AS class_count FROM Classes GROUP BY student_id ) AS ClassCounts ON Students.student_id = ClassCounts.student_id LEFT JOIN ( SELECT student_id, COUNT(detention_id) AS detention_count FROM Detention GROUP BY student_id ) AS DetentionCounts ON Students.student_id = DetentionCounts.student_id WHERE (ClassCounts.class_count >= 2 OR DetentionCounts.detention_count < 2 OR DetentionCounts.detention_count IS NULL)   SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 OR (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2
1       SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')      SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE '%data%') AND teacher_id NOT IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE 'net%') GROUP BY teacher_id
0       SELECT DISTINCT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' AND T.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')    SELECT t.teacher_details FROM teachers t WHERE EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes c2 WHERE c2.teacher_id = t.teacher_id AND c2.class_details LIKE 'net%')
1       SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)   select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1       SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)   select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1       SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans AS sl WHERE sl.student_id IN (SELECT a.student_id FROM Achievements AS a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2)        SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
1       SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl WHERE sl.student_id IN ( SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2 )    SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
0       SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(*) DESC LIMIT 1       SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes GROUP BY teacher_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM classes GROUP BY teacher_id)))
0       SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(*) DESC LIMIT 1       SELECT t.teacher_details, t.teacher_id FROM classes c JOIN teachers t ON c.teacher_id = t.teacher_id GROUP BY c.teacher_id HAVING COUNT(c.class_id) = (SELECT MAX(total_classes) FROM (SELECT teacher_id, COUNT(class_id) AS total_classes FROM classes GROUP BY teacher_id) sub)
0       SELECT DISTINCT detention_summary FROM Detention        SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0       SELECT DISTINCT detention_summary FROM Detention        SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0       SELECT s.bio_data, s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code        SELECT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
0       SELECT s.bio_data, s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code       SELECT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
1       SELECT a.address_details, s.bio_data FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id       SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1       SELECT bio_data, address_details FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id    SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0       SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id      SELECT students.bio_data AS BioData, transcripts.date_of_transcript AS IssuanceDate FROM students LEFT JOIN transcripts ON students.student_id = transcripts.student_id
0       SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id      SELECT students.bio_data AS BioData, transcripts.date_of_transcript AS IssuanceDate FROM students LEFT JOIN transcripts ON students.student_id = transcripts.student_id
0       SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1      SELECT count(DISTINCT student_id), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)
0       SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1      SELECT count(*), behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)
0       SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = 3)     SELECT T1.bio_data, T1.student_details FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)) AND T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = 3))
0       SELECT DISTINCT s.bio_data, s.student_details FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY bm.behaviour_monitoring_details HAVING COUNT(bm.student_id) = 3     SELECT T1.bio_data, T1.student_details FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)) AND T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*) = 3))
0       SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY s.student_id, s.bio_data HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1 AND bm.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)  SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id, behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))
0       SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1 SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Behaviour_Monitoring AS T2 WHERE T2.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING (count(*)) = (SELECT count(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1)))
1       SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
1       SELECT Students.bio_data, Student_Events.event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id        SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
0       SELECT COUNT(DISTINCT se.student_id) AS num_students, et.event_type_code, et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY et.event_type_code ORDER BY num_students DESC LIMIT 1    SELECT COUNT(DISTINCT student_id), E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code WHERE E.event_type_code IN (SELECT event_type_code FROM student_events GROUP BY event_type_code HAVING COUNT(*) = (SELECT COUNT(*) FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1)) GROUP BY E.event_type_code, R.event_type_description
0       SELECT et.event_type_code, et.event_type_description, COUNT(DISTINCT se.student_id) AS student_count FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY se.event_type_code ORDER BY student_count DESC LIMIT 1  SELECT COUNT(DISTINCT student_id), E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code WHERE E.event_type_code IN (SELECT event_type_code FROM student_events GROUP BY event_type_code HAVING COUNT(DISTINCT student_id) = (SELECT COUNT(DISTINCT student_id) FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1)) GROUP BY E.event_type_code, R.event_type_description
1       SELECT a.achievement_details, rat.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type rat ON a.achievement_type_code = rat.achievement_type_codeSELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1       SELECT a.achievement_details, rat.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type rat ON a.achievement_type_code = rat.achievement_type_code;SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1       SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT student_id FROM Achievements)      SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1       SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT DISTINCT a.student_id FROM Achievements a)  SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1       SELECT date_of_transcript, transcript_details FROM Transcripts  SELECT date_of_transcript ,  transcript_details FROM Transcripts
1       SELECT date_of_transcript, transcript_details FROM Transcripts  SELECT date_of_transcript ,  transcript_details FROM Transcripts
1       SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements   SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1       SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements   SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1       SELECT datetime_detention_start, datetime_detention_end FROM Detention  SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1       SELECT datetime_detention_start, datetime_detention_end FROM Detention  SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1       SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'      SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1       SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'      SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
0       SELECT c.class_details, t.teacher_details, s.student_details FROM Classes c JOIN Teachers t ON c.teacher_id = t.teacher_id JOIN Students s ON c.student_id = s.student_id       SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1       SELECT t.teacher_details, s.student_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id        SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0       SELECT MAX(Count), teacher_id FROM (SELECT teacher_id, COUNT(class_id) AS Count FROM Classes GROUP BY teacher_id) GROUP BY teacher_id ORDER BY Count DESC LIMIT 1      WITH CourseCounts AS (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts);
0       SELECT t.teacher_id, COUNT(c.class_id) AS number_of_courses FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(c.class_id) DESC LIMIT 1 WITH CourseCounts AS (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts);
0       SELECT MAX(course_count) AS max_courses, student_id FROM (SELECT COUNT(class_id) AS course_count, student_id FROM Classes GROUP BY student_id) AS course_totals ORDER BY course_count DESC LIMIT 1      SELECT c.student_id, COUNT(*) as tot_courses FROM classes c GROUP BY c.student_id HAVING tot_courses = (SELECT MAX(count_classes) FROM (SELECT COUNT(class_id) as count_classes FROM classes GROUP BY student_id))
0       SELECT student_id, COUNT(class_id) AS number_of_courses FROM Classes GROUP BY student_id ORDER BY number_of_courses DESC LIMIT 1        SELECT c.student_id, COUNT(*) as tot_courses FROM classes c GROUP BY c.student_id HAVING tot_courses = (SELECT MAX(count_classes) FROM (SELECT COUNT(class_id) as count_classes FROM classes GROUP BY student_id))
1       SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2)    SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
1       SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2)    SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0       SELECT d.detention_type_code, r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code GROUP BY d.detention_type_code, r.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1       WITH DetentionCounts AS (SELECT detention_type_code, COUNT(*) AS Cnt FROM detention GROUP BY detention_type_code) SELECT ref_detention_type.detention_type_code, detention_type_description FROM ref_detention_type JOIN DetentionCounts ON DetentionCounts.detention_type_code = ref_detention_type.detention_type_code WHERE DetentionCounts.Cnt = (SELECT MIN(Cnt) FROM DetentionCounts)
0       SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)       WITH RankedDetType AS (SELECT detention_type_code, RANK() OVER (ORDER BY COUNT(*) ASC) AS rk FROM detention GROUP BY detention_type_code) SELECT dt.detention_type_code, dt.detention_type_description FROM RankedDetType rdt INNER JOIN ref_detention_type dt ON dt.detention_type_code = rdt.detention_type_code WHERE rk = 1
0       SELECT bio_data, other_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)        SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))
1       SELECT s.bio_data, s.student_details FROM Students s WHERE s.student_id IN (SELECT sl.student_id FROM Student_Loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))       SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))
1       SELECT MIN(date_of_loan) FROM Student_Loans;    SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1       SELECT MIN(date_of_loan) FROM Student_Loans     SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1       SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)) SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Student_Loans AS T2 WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans))
0       SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)     SELECT T1.bio_data FROM Students AS T1 WHERE T1.student_id IN (SELECT T2.student_id FROM Student_Loans AS T2 WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans))
0       SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))     SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans));
0       SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC LIMIT 1)     SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans));
0       SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE student_id = (SELECT student_id FROM Transcripts ORDER BY date_of_transcript LIMIT 1))   SELECT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id IN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))
0       SELECT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id = ( SELECT tr.student_id FROM Transcripts tr WHERE tr.date_of_transcript = ( SELECT MIN(date_of_transcript) FROM Transcripts ) )        SELECT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id IN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))
0       SELECT student_id, SUM(amount_of_loan) AS TotalLoanAmount FROM Student_Loans GROUP BY student_id        SELECT students.student_id, (SELECT SUM(sl.amount_of_loan) FROM student_loans sl WHERE sl.student_id = students.student_id) FROM students GROUP BY students.student_id
0       SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id      SELECT students.student_id, (SELECT SUM(sl.amount_of_loan) FROM student_loans sl WHERE sl.student_id = students.student_id) FROM students GROUP BY students.student_id
1       SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS course_count FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_dataSELECT student_id, bio_data, (SELECT COUNT(*) FROM classes WHERE student_id = students.student_id) AS course_count FROM students
1       SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) AS courses_count FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, Students.bio_data     SELECT s.student_id, s.bio_data, (SELECT COUNT(*) FROM classes WHERE classes.student_id = s.student_id) AS num_courses FROM students s
1       SELECT COUNT(DISTINCT student_id) FROM Detention        SELECT count(DISTINCT student_id) FROM Detention
1       SELECT COUNT(DISTINCT student_id) FROM Detention        SELECT count(DISTINCT student_id) FROM Detention
0       SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY Ref_Address_Types.address_type_code ORDER BY COUNT(*) DESC LIMIT 1     SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM students_addresses GROUP BY address_type_code)))
0       SELECT Ref_Address_Types.address_type_code, Ref_Address_Types.address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY Ref_Address_Types.address_type_code ORDER BY COUNT(*) DESC LIMIT 1 SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM students_addresses GROUP BY address_type_code)))
0       SELECT S.bio_data FROM Students S JOIN Student_Events SE ON S.student_id = SE.student_id LEFT JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.student_id IS NULL SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)
1       SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)  SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)
1       SELECT sa.date_from, sa.date_to FROM Students_Addresses sa WHERE sa.student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) = 2)      SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1       SELECT sa.date_from, sa.date_to FROM Students_Addresses sa WHERE sa.student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) = 2)      SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
0       SELECT MIN(datetime_detention_start) FROM Detention     SELECT datetime_detention_start FROM Detention
1       SELECT datetime_detention_start FROM Detention  SELECT datetime_detention_start FROM Detention
1       SELECT Name FROM Author SELECT name FROM Author
1       SELECT Name FROM Author;        SELECT name FROM Author
1       SELECT Name, Address FROM Client        SELECT name ,  address FROM Client
1       SELECT Name, Address FROM Client        SELECT name ,  address FROM Client
1       SELECT Title, ISBN, SalePrice FROM Book;        SELECT title ,  isbn ,  SalePrice FROM Book
1       SELECT Title, ISBN, SalePrice FROM Book SELECT title ,  isbn ,  SalePrice FROM Book
1       SELECT COUNT(*) FROM Book;      SELECT count(*) FROM Book
1       SELECT COUNT(*) FROM Book;      SELECT count(*) FROM Book
1       SELECT COUNT(*) FROM Author;    SELECT count(*) FROM Author
1       SELECT COUNT(*) FROM Author;    SELECT count(*) FROM Author
1       SELECT COUNT(*) FROM Client;    SELECT count(*) FROM Client
1       SELECT COUNT(*) FROM Client     SELECT count(*) FROM Client
1       SELECT Name, Address FROM Client ORDER BY Name ASC      SELECT name ,  address FROM Client ORDER BY name
1       SELECT Name, Address FROM Client ORDER BY Name ASC;     SELECT name ,  address FROM Client ORDER BY name
1       SELECT Book.Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor       SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1       SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor   SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1       SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
1       SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;        SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
0       SELECT a.Name, COUNT(ab.ISBN) AS NumOfBooks FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name SELECT author.name, COUNT(author_book.author) FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor
0       SELECT Author.Name, COUNT(Author_Book.Author) AS number_of_books FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name      SELECT author.name, COUNT(author_book.author) FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor
1       SELECT B.ISBN, COUNT(O.IdOrder) AS order_count FROM Book B LEFT JOIN Books_Order O ON B.ISBN = O.ISBN GROUP BY B.ISBN   SELECT book.isbn, COUNT(books_order.isbn) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn;
0       SELECT ISBN, COUNT(IdOrder) AS number_of_orders FROM Books_Order GROUP BY ISBN  SELECT book.isbn, COUNT(books_order.isbn) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn
0       SELECT B.ISBN, SUM(BO.amount) AS total_amount FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN GROUP BY B.ISBN       SELECT T1.isbn, sum(T2.amount) FROM Book AS T1 LEFT JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.isbn
0       SELECT ISBN, SUM(amount) AS total_amount_ordered FROM Books_Order GROUP BY ISBN SELECT book.isbn, IFNULL(TOTAL(books_order.amount), 0) AS totalOrders FROM book LEFT JOIN books_order ON books_order.isbn = book.isbn GROUP BY book.isbn
1       SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY COUNT(*) DESC LIMIT 1  SELECT b1.title FROM book b1 WHERE b1.isbn = (SELECT bo1.isbn FROM books_order bo1 GROUP BY bo1.isbn HAVING COUNT(bo1.isbn) = (SELECT MAX(cnt) FROM (SELECT COUNT(isbn) AS cnt FROM books_order GROUP BY isbn)));
0       SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.Title ORDER BY COUNT(*) DESC LIMIT 1 SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn = T2.isbn GROUP BY T1.isbn)
0       SELECT Book.Title, Book.PurchasePrice FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY SUM(Books_Order.amount) DESC LIMIT 1      SELECT t.title, t.purchaseprice FROM book t JOIN (SELECT isbn FROM books_order GROUP BY isbn HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM books_order GROUP BY isbn))) t2 ON t.isbn = t2.isbn
0       SELECT Book.Title, Book.PurchasePrice FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY SUM(Books_Order.amount) DESC LIMIT 1      SELECT t.title, t.purchaseprice FROM book t JOIN (SELECT isbn FROM books_order GROUP BY isbn HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM books_order GROUP BY isbn))) t2 ON t.isbn = t2.isbn
0       SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.Title        SELECT book.title FROM book WHERE EXISTS (SELECT 1 FROM books_order WHERE books_order.isbn = book.isbn);
1       SELECT DISTINCT Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN;       SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0       SELECT Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient HAVING COUNT(*) >= 1  SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0       SELECT DISTINCT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient        SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders)
0       SELECT Client.Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient       SELECT cl.name, (SELECT COUNT(*) FROM orders ords WHERE ords.idclient = cl.idclient) FROM client cl
0       SELECT Client.Name, COUNT(Orders.IdOrder) AS number_of_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient     SELECT c1.name, COALESCE(order_count.count, 0) AS order_number FROM client c1 LEFT JOIN (SELECT idclient, COUNT(idorder) AS count FROM orders GROUP BY idclient) order_count ON c1.idclient = order_count.idclient
0       SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1) SELECT c.name FROM client AS c INNER JOIN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(total_orders) FROM (SELECT idclient, COUNT(*) as total_orders FROM orders GROUP BY idclient) tmp)) AS max_orders ON c.idclient = max_orders.idclient
0       SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders GROUP BY IdClient ORDER BY COUNT(*) DESC LIMIT 1) SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(order_count) FROM (SELECT idclient, COUNT(idorder) AS order_count FROM orders GROUP BY idclient) temp))
0       SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooks FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name    SELECT T1.name, sum(T3.amount) FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.idClient = T2.idClient LEFT JOIN Books_Order AS T3 ON T2.idOrder = T3.idOrder GROUP BY T1.idClient;
0       SELECT C.Name, SUM(BO.amount) AS TotalBooksOrdered FROM Client C JOIN Orders O ON C.IdClient = O.IdClient JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY C.NameSELECT T1.name, sum(T3.amount) FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.idClient = T2.idClient LEFT JOIN Books_Order AS T3 ON T2.idOrder = T3.idOrder GROUP BY T1.idClient;
0       SELECT C.Name FROM Client C WHERE C.IdClient = (SELECT O.IdClient FROM Orders O JOIN Books_Order BO ON O.IdOrder = BO.IdOrder GROUP BY O.IdClient ORDER BY SUM(BO.amount) DESC LIMIT 1) SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient HAVING SUM(bo.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) totals)
0       SELECT Name FROM Client WHERE IdClient = (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)     SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient HAVING SUM(bo.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) totals)
1       SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order) SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)
1       SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order) SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)
1       SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)     SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
1       SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)     SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
1       SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book SELECT max(saleprice) ,  min(saleprice) FROM Book
1       SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;        SELECT max(saleprice) ,  min(saleprice) FROM Book
1       SELECT AVG(PurchasePrice) AS Average_Purchase_Price, AVG(SalePrice) AS Average_Sale_Price FROM Book     SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1       SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1       SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book        SELECT max(saleprice - purchaseprice) FROM Book
1       SELECT MAX(SalePrice - PurchasePrice) AS LargestDifference FROM Book    SELECT max(saleprice - purchaseprice) FROM Book
1       SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)      SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
1       SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)      SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
0       SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)      select title from book order by saleprice asc limit 1
0       SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)      select title from book order by saleprice asc limit 1
0       SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)      select title from book order by purchaseprice  desc limit 1
0       SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)      select title from book order by purchaseprice  desc limit 1
0       SELECT AVG(SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell';       SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell'))
0       SELECT AVG(b.SalePrice) FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell'      SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')
0       SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato'       SELECT saleprice FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato'))
0       SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato'       SELECT b.saleprice FROM book AS b WHERE EXISTS (SELECT 1 FROM author_book AS ab JOIN author AS a ON ab.author = a.idauthor WHERE ab.isbn = b.isbn AND a.name = 'Plato')
0       SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice ASC LIMIT 1     WITH LowestPrice AS (SELECT book.isbn FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' and book.SalePrice = (SELECT MIN(saleprice) FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')) SELECT title FROM book WHERE isbn IN (SELECT isbn FROM LowestPrice);
0       SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice LIMIT 1 WITH LowestPrice AS (SELECT book.isbn FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell' and book.SalePrice = (SELECT MIN(saleprice) FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')) SELECT title FROM book WHERE isbn IN (SELECT isbn FROM LowestPrice);
0       SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)   SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book);
0       SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book)  SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book)
0       SELECT a.Name FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
0       SELECT a.Name FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
0       SELECT Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'      SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))
0       SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name LIKE '%Plato%'  SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))
0       SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')       SELECT COUNT(DISTINCT orders.idorder) FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder WHERE book.title = 'Pride and Prejudice'
0       SELECT COUNT(*) FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')       SELECT COUNT(*) FROM orders WHERE idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))
0       SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')) INTERSECT SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince'))   SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1       SELECT DISTINCT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2       SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
0       SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name IN ('Peter Doe', 'James Smith'))) GROUP BY ISBN HAVING COUNT(DISTINCT IdClient) = 2 SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
0       SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe')) AND ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith'))) SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
0       SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))        SELECT title FROM Book WHERE ISBN IN (SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "Peter Doe" EXCEPT SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "James Smith")
0       SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = (SELECT IdClient FROM Client WHERE Name = 'James Smith')))        SELECT title FROM Book WHERE ISBN IN (SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "Peter Doe" EXCEPT SELECT T2.ISBN FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder = T2.IdOrder JOIN Client AS T3 ON T1.IdClient = T3.IdClient WHERE T3.name = "James Smith")
0       SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'     SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice'))
0       SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'     SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice'))
1       SELECT COUNT(*) FROM book;      SELECT count(*) FROM book
1       SELECT Title FROM book ORDER BY Title ASC       SELECT Title FROM book ORDER BY Title ASC
1       SELECT Title FROM book ORDER BY Pages DESC      SELECT Title FROM book ORDER BY Pages DESC
1       SELECT Type, Release FROM book  SELECT TYPE ,  Release FROM book
0       SELECT Book_ID, MAX(Chapters) AS MaxChapters, MIN(Chapters) AS MinChapters FROM book GROUP BY Book_ID   SELECT max(Chapters) ,  min(Chapters) FROM book
1       SELECT Title FROM book WHERE Type != 'Poet'     SELECT Title FROM book WHERE TYPE != "Poet"
1       SELECT AVG(Rating) FROM review  SELECT avg(Rating) FROM review
1       SELECT Title, Rating FROM book JOIN review ON book.Book_ID = review.Book_ID;    SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID
0       SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1)     SELECT r.rating FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.chapters = (SELECT MAX(chapters) FROM book);
0       SELECT R.rank FROM review R JOIN book B ON R.Book_ID = B.Book_ID ORDER BY B.Pages ASC LIMIT 1   SELECT r.rank FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.pages = (SELECT MIN(pages) FROM book);
0       SELECT b.Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Rank = (SELECT MAX(Rank) FROM review) SELECT Title FROM (SELECT Title, rank() over (ORDER BY (SELECT max(rank) FROM review WHERE review.Book_ID = book.Book_ID)) as rk FROM book) WHERE rk = 1
1       SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE Type = 'Novel'      SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  "Novel"
1       SELECT Type, COUNT(Book_ID) AS number_of_books FROM book GROUP BY Type  SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE
1       SELECT Type FROM book GROUP BY Type HAVING COUNT(Type) = (SELECT MAX(CountType) FROM (SELECT COUNT(Type) AS CountType FROM book GROUP BY Type) Temp)    SELECT type FROM book GROUP BY type HAVING COUNT(type) = (SELECT MAX(count) FROM (SELECT type, COUNT(*) AS count FROM book GROUP BY type))
1       SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3  SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3
1       SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC  SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC
0       SELECT b.Title, b.Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID GROUP BY b.Book_ID ORDER BY SUM(r.Readers_in_Million) DESC   SELECT T1.Title ,  T1.audio FROM book AS T1 LEFT JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID GROUP BY T1.Book_ID ORDER BY sum(T2.Readers_in_Million) DESC
1       SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)     SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
1       SELECT DISTINCT b.type FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE chapters > 75 AND type = b.type) AND EXISTS (SELECT 1 FROM book WHERE chapters < 50 AND type = b.type)        SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50
1       SELECT COUNT(DISTINCT Type) FROM book   SELECT count(DISTINCT TYPE) FROM book
0       SELECT type, title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)  SELECT DISTINCT book.type, book.title FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.rating IS NULL
1       SELECT COUNT(*) FROM customer;  SELECT count(*) FROM customer
1       SELECT COUNT(*) FROM customer;  SELECT count(*) FROM customer
1       SELECT Name FROM customer ORDER BY Level_of_Membership ASC      SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1       SELECT Name FROM customer ORDER BY Level_of_Membership ASC;     SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1       SELECT Nationality, Card_Credit FROM customer;  SELECT Nationality ,  Card_Credit FROM customer
1       SELECT Nationality, Card_Credit FROM customer   SELECT Nationality ,  Card_Credit FROM customer
1       SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia') SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1       SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia') SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1       SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;    SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
1       SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;    SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
0       SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1      SELECT card_credit FROM (SELECT card_credit, RANK() OVER (ORDER BY level_of_membership DESC) as rk FROM customer) WHERE rk = 1;
1       SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)      SELECT card_credit FROM (SELECT card_credit, RANK() OVER (ORDER BY level_of_membership DESC) as rk FROM customer) WHERE rk = 1;
1       SELECT Nationality, COUNT(Customer_ID) AS number_of_customers FROM customer GROUP BY Nationality        SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
1       SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality       SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
0       SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1    SELECT nationality FROM customer GROUP BY nationality HAVING COUNT(nationality) = (SELECT MAX(cnt) FROM (SELECT nationality, COUNT(*) as cnt FROM customer GROUP BY nationality) subquery)
1       SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(Customer_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Customer_ID) as count FROM customer GROUP BY Nationality) sub)  WITH RankedNationalities AS (SELECT nationality, RANK() OVER (ORDER BY COUNT(customer_id) DESC) as rank FROM customer GROUP BY nationality) SELECT nationality FROM RankedNationalities WHERE rank = 1
1       SELECT DISTINCT c.Nationality FROM customer AS c WHERE c.Card_Credit < 50 INTERSECT SELECT DISTINCT c.Nationality FROM customer AS c WHERE c.Card_Credit > 75   SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
1       SELECT DISTINCT nationality FROM customer WHERE card_credit > 50 INTERSECT SELECT DISTINCT nationality FROM customer WHERE card_credit < 75     SELECT DISTINCT c1.nationality FROM customer c1 JOIN customer c2 ON c1.nationality = c2.nationality WHERE c1.card_credit > 50 AND c2.card_credit < 75
1       SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID    SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1       SELECT customer.Name, customer_order.Dish_Name FROM customer_order JOIN customer ON customer_order.Customer_ID = customer.Customer_ID   SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1       SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC  SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1       SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC  SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
0       SELECT c.Name, SUM(co.Quantity) AS Total_Quantities FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name    SELECT c.name, SUM(quantity) AS total_orders FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id
0       SELECT c.Name, SUM(co.Quantity) AS TotalQuantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID GROUP BY c.Customer_ID ORDER BY TotalQuantitySELECT c.name, SUM(quantity) AS total_orders FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id
0       SELECT Customer_ID, Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(Quantity) > 1 SELECT c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1
1       SELECT customer.Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1       SELECT c.name FROM customer c WHERE c.customer_id IN (SELECT co.customer_id FROM customer_order co GROUP BY co.customer_id HAVING SUM(co.quantity) > 1)
1       SELECT DISTINCT Manager FROM branch;    SELECT DISTINCT Manager FROM branch
1       SELECT DISTINCT Manager FROM branch;    SELECT DISTINCT Manager FROM branch
1       SELECT c.Name FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL        SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1       SELECT c.Name FROM customer c LEFT JOIN customer_order co ON c.Customer_ID = co.Customer_ID WHERE co.Customer_ID IS NULL        SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1       SELECT COUNT(*) FROM member;    SELECT count(*) FROM member
1       SELECT Name FROM member ORDER BY Age ASC        SELECT Name FROM member ORDER BY Age ASC
1       SELECT Name, Nationality FROM member    SELECT Name ,  Nationality FROM member
1       SELECT Name FROM member WHERE Nationality != 'England'  SELECT name FROM member WHERE nationality != 'England'
1       SELECT name FROM member WHERE age IN (19, 20)   SELECT Name FROM member WHERE Age  =  19 OR Age  =  20
1       SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member)       SELECT name FROM member WHERE age = (SELECT MAX(age) FROM member)
1       SELECT Nationality, COUNT(Member_ID) AS number_of_members FROM member GROUP BY Nationality      SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality
1       SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Nationality) = (SELECT MAX(count) FROM (SELECT COUNT(Nationality) as count FROM member GROUP BY Nationality))  SELECT M.nationality FROM member M GROUP BY M.nationality HAVING COUNT(M.nationality) = (SELECT MAX(count) FROM (SELECT COUNT(M2.nationality) as count FROM member M2 GROUP BY M2.nationality))
1       SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2        SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2
1       SELECT m.Name AS leader_name, c.Club_Name AS club_name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID    SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID
0       SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100       SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE club_id IN (SELECT club_id FROM club WHERE overall_ranking > 100))
0       SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018 SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE year_join < 2018)
0       SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Club_Name = 'Houston'       SELECT Name FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Club_Name = 'Houston'))
1       SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)      SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
1       SELECT DISTINCT m.Nationality FROM member m WHERE EXISTS (SELECT 1 FROM member WHERE Age > 22 AND Nationality = m.Nationality) AND EXISTS (SELECT 1 FROM member WHERE Age < 19 AND Nationality = m.Nationality);        SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19
0       SELECT AVG(m.Age) FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID       SELECT AVG(age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader)
1       SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'       SELECT club_name FROM club WHERE club_name LIKE '%state%'
1       SELECT Collection_Subset_Name FROM Collection_Subsets;  SELECT Collection_Subset_Name FROM Collection_Subsets;
1       SELECT Collection_Subset_Name FROM Collection_Subsets;  SELECT Collection_Subset_Name FROM Collection_Subsets;
0       SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'        SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
0       SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';       SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
1       SELECT Document_Subset_Name FROM Document_Subsets       SELECT Document_Subset_Name FROM Document_Subsets;
1       SELECT Document_Subset_Name FROM Document_Subsets       SELECT Document_Subset_Name FROM Document_Subsets;
1       SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'       SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1       SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'       SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1       SELECT Document_Object_ID FROM Document_Objects;        SELECT Document_Object_ID FROM Document_Objects;
1       SELECT Document_Object_ID FROM Document_Objects;        SELECT Document_Object_ID FROM Document_Objects;
0       SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')      SELECT document_object_id FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin')
1       SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'  SELECT document_object_id FROM document_objects WHERE owner = 'Marlin'
1       SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'     SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
1       SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'     SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
0       SELECT Document_Objects.Owner FROM Document_Objects JOIN Document_Objects AS ParentDocs ON Document_Objects.Parent_Document_Object_ID = ParentDocs.Document_Object_ID WHERE Document_Objects.Owner = 'Marlin'   SELECT parent.owner FROM document_objects AS parent WHERE parent.document_object_id IN (SELECT child.parent_document_object_id FROM document_objects AS child WHERE child.owner = 'Marlin')
0       SELECT parent.Owner FROM Document_Objects AS doc JOIN Document_Objects AS parent ON doc.Parent_Document_Object_ID = parent.Document_Object_ID WHERE doc.Owner = 'Marlin'SELECT parent.owner FROM document_objects AS parent WHERE parent.document_object_id IN (SELECT child.parent_document_object_id FROM document_objects AS child WHERE child.owner = 'Marlin')
0       SELECT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL    SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
0       SELECT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL        SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1       SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'    SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1       SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'    SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1       SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)    SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1       SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)    SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1       SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) AS child_documents_count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID       SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1       SELECT Parent_Document_Object_ID AS parent_document_id, COUNT(Document_Object_ID) AS child_documents_count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1       SELECT Collection_Name FROM Collections;        SELECT Collection_Name FROM Collections;
1       SELECT Collection_Name FROM Collections;        SELECT Collection_Name FROM Collections;
1       SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'   SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1       SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'   SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
0       SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')     SELECT c1.Collection_Name FROM Collections AS c1 WHERE c1.Collection_ID IN (SELECT c2.Parent_Collection_ID FROM Collections AS c2 WHERE c2.Collection_Name = "Nice");
0       SELECT parent.Collection_Name FROM Collections AS parent INNER JOIN Collections AS child ON parent.Collection_ID = child.Parent_Collection_ID WHERE child.Collection_Name = 'Nice'      SELECT c1.Collection_Name FROM Collections AS c1 WHERE c1.Collection_ID IN (SELECT c2.Parent_Collection_ID FROM Collections AS c2 WHERE c2.Collection_Name = "Nice");
1       SELECT c.Collection_Name FROM Collections c LEFT JOIN Collections pc ON c.Collection_ID = pc.Parent_Collection_ID WHERE pc.Parent_Collection_ID IS NULL SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)
1       SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)        SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)
1       SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1  SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
1       SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1  SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
0       SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')    SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0       SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')    SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0       SELECT Related_Document_Object_ID FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID WHERE do.Owner = 'Ransom'SELECT DISTINCT d.document_object_id FROM document_objects d JOIN document_subset_members dsm ON d.document_object_id = dsm.Document_Object_ID JOIN document_objects do ON do.document_object_id = dsm.Related_Document_Object_ID WHERE do.owner = 'Ransom';
0       SELECT Related_Document_Object_ID FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID WHERE do.Owner = 'Ransom'SELECT DISTINCT d.document_object_id FROM document_objects d JOIN document_subset_members dsm ON d.document_object_id = dsm.Document_Object_ID JOIN document_objects do ON do.document_object_id = dsm.Related_Document_Object_ID WHERE do.owner = 'Ransom';
0       SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS NumOfCollections FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name  SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS number_of_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name
0       SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Collection_Subset_Members.Collection_ID) AS number_of_collections FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name       SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS num_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name
0       SELECT Parent_Document_Object_ID, COUNT(*) AS child_count FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY child_count DESC LIMIT 1        SELECT Document_Object_ID, cnt FROM ( SELECT T2.Document_Object_ID, COUNT(*) as cnt, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ) AS subquery WHERE rk = 1
0       SELECT Parent_Document_Object_ID, COUNT(*) AS children_count FROM Document_Objects GROUP BY Parent_Document_Object_ID   SELECT parent.document_object_id, COUNT(child.document_object_id) AS child_count FROM document_objects AS parent LEFT JOIN document_objects AS child ON parent.document_object_id = child.parent_document_object_id GROUP BY parent.document_object_id
0       SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS count FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count ASC LIMIT 1       SELECT d.document_object_id, COUNT(r.related_document_object_id) AS CountRelated FROM document_objects d LEFT JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id ORDER BY CountRelated ASC LIMIT 1
0       SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(*) ASC LIMIT 1       SELECT d.document_object_id, COUNT(r.related_document_object_id) AS CountRelated FROM document_objects d LEFT JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id ORDER BY CountRelated ASC LIMIT 1
1       SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS num_related_documents FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4 select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;
1       SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4 SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;
0       SELECT DISTINCT do.Owner FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Related_Document_Object_ID JOIN Document_Objects do2 ON dsm.Document_Object_ID = do2.Document_Object_ID WHERE do2.Owner = 'Braeden'   SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
0       SELECT DISTINCT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))  SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
1       SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'       SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
1       SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'       SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
0       SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS number_of_documents FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name     SELECT doc_sub.document_subset_id, doc_sub.document_subset_name, (SELECT COUNT(DISTINCT doc_mem.document_object_id) FROM document_subset_members doc_mem WHERE doc_mem.document_subset_id = doc_sub.document_subset_id) AS doc_count FROM document_subsets doc_sub
0       SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS number_of_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name SELECT document_subsets.document_subset_id, document_subset_name, (SELECT COUNT(DISTINCT document_object_id) FROM document_subset_members WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id) FROM document_subsets
0       SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS number_of_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID ORDER BY number_of_documents DESC LIMIT 1      SELECT document_subset_id, document_subset_name, num_docs FROM (SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) as num_docs, rank() over (ORDER BY COUNT(DISTINCT dsm.document_object_id) DESC) as rk FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id, ds.document_subset_name) WHERE rk = 1;
0       SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS document_count FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY document_count DESC LIMIT 1        SELECT a.document_subset_id, a.document_subset_name, COUNT(DISTINCT b.document_object_id) AS document_count FROM document_subsets a INNER JOIN document_subset_members b ON a.document_subset_id = b.document_subset_id GROUP BY a.document_subset_id HAVING document_count = (SELECT MAX(c.countdoc) FROM (SELECT COUNT(DISTINCT document_object_id) AS countdoc FROM document_subset_members GROUP BY document_subset_id) c)
0       SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'   SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0       SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')        SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0       SELECT Document_Object_ID, Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID  SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID
0       SELECT Document_Objects.Document_Object_ID, Document_Subsets.Document_Subset_Name FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID      select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id
0       SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom'       SELECT c.collection_name FROM collections c WHERE c.collection_id IN ( SELECT dc.collection_id FROM documents_in_collections dc JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom' )
0       SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom'       SELECT c.collection_name FROM collections c WHERE c.collection_id IN ( SELECT dc.collection_id FROM documents_in_collections dc JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom' )
0       SELECT Document_Object_ID, COUNT(Collection_ID) AS NumberOfCollections FROM Documents_in_Collections GROUP BY Document_Object_ID        SELECT d.document_object_id, COUNT(c.collection_id) AS total_collections FROM document_objects d LEFT JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id LEFT JOIN collections c ON dc.collection_id = c.collection_id GROUP BY d.document_object_id
0       SELECT Document_Object_ID, COUNT(Collection_ID) AS Number_of_Collections FROM Documents_in_Collections GROUP BY Document_Object_ID      SELECT d.document_object_id, COUNT(c.collection_id) AS total_collections FROM document_objects d LEFT JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id LEFT JOIN collections c ON dc.collection_id = c.collection_id GROUP BY d.document_object_id
0       SELECT COUNT(*) FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'    SELECT COUNT(DISTINCT doc.document_object_id) FROM collections col INNER JOIN documents_in_collections doc_col ON col.collection_id = doc_col.collection_id INNER JOIN document_objects doc ON doc_col.document_object_id = doc.document_object_id WHERE col.collection_name = 'Best'
0       SELECT COUNT(*) FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')      SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections dic JOIN collections c ON dic.collection_id = c.collection_id JOIN document_objects doc ON dic.document_object_id = doc.document_object_id WHERE c.collection_name = 'Best'
0       SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'       SELECT DISTINCT document_objects.document_object_id FROM document_objects, documents_in_collections, collections WHERE document_objects.document_object_id = documents_in_collections.document_object_id AND documents_in_collections.collection_id = collections.collection_id AND collections.collection_name = 'Best'
0       SELECT COUNT(*) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';        SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections AS doc JOIN collections AS col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best'
0       SELECT Collection_Name, Collection_ID, COUNT(Document_Object_ID) AS number_of_documents FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID GROUP BY Collections.Collection_ID ORDER BY number_of_documents DESC LIMIT 1       SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total_docs FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING total_docs = (SELECT MAX(doc_counts) FROM (SELECT COUNT(document_object_id) AS doc_counts FROM documents_in_collections GROUP BY collection_id))
0       SELECT C.Collection_Name, C.Collection_ID, COUNT(DIC.Document_Object_ID) AS NumberOfDocuments FROM Collections C JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY NumberOfDocuments DESC LIMIT 1     SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total_docs FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING total_docs = (SELECT MAX(doc_counts) FROM (SELECT COUNT(document_object_id) AS doc_counts FROM documents_in_collections GROUP BY collection_id))
0       SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Collections.Collection_Name = 'Best'    SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
0       SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Collections.Collection_Name = 'Best'    SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
0       SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
0       SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN ( SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') )       SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
0       SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) OR Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))        SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0       SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')     SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0       SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID JOIN Collections c2 ON csm.Collection_ID = c2.Collection_ID WHERE c2.Collection_Name = 'Best'     SELECT T1.collection_name FROM collections AS T1 WHERE T1.collection_id IN (SELECT T2.collection_id FROM collection_subset_members AS T2 JOIN collections AS T3 ON T2.Related_Collection_ID = T3.collection_id WHERE T3.collection_name = 'Best')
0       SELECT c2.Collection_Name FROM Collections c1 INNER JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID INNER JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'      SELECT T1.collection_name FROM collections AS T1 WHERE T1.collection_id IN (SELECT T2.collection_id FROM collection_subset_members AS T2 JOIN collections AS T3 ON T2.Related_Collection_ID = T3.collection_id WHERE T3.collection_name = 'Best')
0       SELECT COUNT(*) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID JOIN Collections c2 ON csm.Collection_ID = c2.Collection_ID WHERE c2.Collection_Name = 'Best';     SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
1       SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best'  SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
0       SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members AS csm WHERE csm.collection_id IN (SELECT c.collection_id FROM collections AS c WHERE c.collection_name = 'Best'))
1       SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))  SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members AS csm WHERE csm.collection_id IN (SELECT c.collection_id FROM collections AS c WHERE c.collection_name = 'Best'))
1       SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'     SELECT count(*) FROM songs WHERE name LIKE "%Love%"
1       SELECT name FROM songs ORDER BY name ASC        SELECT name FROM songs ORDER BY name
1       SELECT name, language FROM songs        select name , language from songs
1       SELECT MAX(voice_sound_quality) AS MaxVoiceSoundQuality, MIN(voice_sound_quality) AS MinVoiceSoundQuality FROM performance_score;       SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
1       SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name = 'Freeway'   SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
1       SELECT id, language, original_artist FROM songs WHERE name != 'Love'    SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'
1       SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'   SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'
1       SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'     SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'
1       SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2)        SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2
0       SELECT participants.id, participants.name, participants.popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY COUNT(performance_score.songs_id) DESC      SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)
0       SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5  SELECT DISTINCT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)
0       SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English' SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'
0       SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id ORDER BY COUNT(*) DESC LIMIT 1 SELECT s.id, s.name FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(DISTINCT ps.participant_id) = (SELECT MAX(participant_count) FROM (SELECT COUNT(DISTINCT ps.participant_id) AS participant_count FROM performance_score ps GROUP BY ps.songs_id) t)
1       SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;  SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9
1       SELECT COUNT(DISTINCT s.id) FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );
1       SELECT s.language, AVG(p.rhythm_tempo) AS average_rhythm FROM songs s JOIN performance_score p ON s.id = p.songs_id GROUP BY s.language SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language
1       SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'       SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
0       SELECT DISTINCT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.id HAVING COUNT(DISTINCT s.language) = 2       SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) AND EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'English' AND ps.participant_id = p.id)
1       SELECT name FROM songs WHERE name LIKE '%Is%'   SELECT name FROM songs WHERE name LIKE "%Is%"
0       SELECT original_artist FROM songs s JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC  select original_artist from songs AS T1 join (select songs_id, max(voice_sound_quality) as voice_sound_quality from performance_score where rhythm_tempo > 5 group by songs_id) AS T2 where T1.id = T2.songs_id ORDER BY T2.voice_sound_quality
1       SELECT COUNT(*) FROM City;      SELECT count(*) FROM City
1       SELECT COUNT(*) FROM City;      SELECT count(*) FROM City
1       SELECT DISTINCT state FROM City;        select distinct state from city
1       SELECT DISTINCT state FROM City;        SELECT DISTINCT state FROM City
1       SELECT COUNT(DISTINCT country) FROM City;       SELECT count(DISTINCT country) FROM City
1       SELECT COUNT(DISTINCT country) FROM City;       SELECT count(DISTINCT country) FROM City
1       SELECT city_name, city_code, state, country FROM City;  SELECT city_name ,  city_code ,  state ,  country FROM City
1       SELECT city_name, city_code, state, country FROM City   SELECT city_name ,  city_code ,  state ,  country FROM City
1       SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'      SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1       SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';     SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1       SELECT city_name FROM City WHERE state = 'PA';  SELECT city_name FROM City WHERE state  =  "PA"
1       SELECT city_name FROM City WHERE state = 'PA'   SELECT city_name FROM City WHERE state  =  "PA"
0       SELECT COUNT(*) FROM City WHERE country = 'Canada'      SELECT count(*) FROM City WHERE country  =  "CANADA"
0       SELECT COUNT(*) FROM City WHERE country = 'Canada'      SELECT count(*) FROM City WHERE country  =  "CANADA"
1       SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude      SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1       SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude      SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1       SELECT state, COUNT(city_code) AS number_of_cities FROM City GROUP BY state     SELECT state ,  count(*) FROM City GROUP BY state
1       SELECT state, COUNT(city_code) AS city_count FROM City GROUP BY state   SELECT state ,  count(*) FROM City GROUP BY state
1       SELECT country, COUNT(city_code) AS number_of_cities FROM City GROUP BY country select country ,  count(*) from city group by country
1       SELECT country, COUNT(city_code) AS number_of_cities FROM City GROUP BY country SELECT country ,  count(*) FROM City GROUP BY country
1       SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2      SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
1       SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2      SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
0       SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1    SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM city GROUP BY state))
1       SELECT state FROM City GROUP BY state HAVING COUNT(city_code) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_code) AS city_count FROM City GROUP BY state))  SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM city GROUP BY state))
0       SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1 SELECT country FROM city GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(total) FROM (SELECT COUNT(city_code) AS total FROM city GROUP BY country))
0       SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1 WITH CityCount AS (SELECT country, COUNT(*) AS count FROM city GROUP BY country) SELECT country FROM CityCount WHERE count = (SELECT MIN(count) FROM CityCount)
1       SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';       SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0       SELECT Fname || ' ' || LName AS full_name FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'; SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0       SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'       SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
0       SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'China'       SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
1       SELECT S.Fname, S.Major FROM Student S JOIN City C ON S.city_code = C.city_code WHERE C.city_name = 'Baltimore' SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1       SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'     SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
0       SELECT country, COUNT(StuID) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country      SELECT T1.country ,  count(*) FROM City AS T1 LEFT JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0       SELECT country, COUNT(StuID) FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country      SELECT T1.country ,  count(*) FROM City AS T1 LEFT JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0       SELECT city_code, COUNT(StuID) AS num_students FROM Student GROUP BY city_code  SELECT CITY.CITY_NAME, (SELECT COUNT(STUID) FROM STUDENT WHERE CITY_CODE = CITY.CITY_CODE) AS STUDENT_COUNT FROM CITY
0       SELECT city_code, COUNT(StuID) AS number_of_students FROM Student GROUP BY city_code    SELECT CITY.CITY_NAME, (SELECT COUNT(STUID) FROM STUDENT WHERE CITY_CODE = CITY.CITY_CODE) AS STUDENT_COUNT FROM CITY
0       SELECT C.state FROM Student S JOIN City C ON S.city_code = C.city_code GROUP BY C.state ORDER BY COUNT(*) DESC LIMIT 1  SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.city_code) = (SELECT MAX(c) FROM (SELECT COUNT(student.city_code) AS c FROM city JOIN student ON city.city_code = student.city_code GROUP BY state))
0       SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code GROUP BY C.state ORDER BY COUNT(*) DESC LIMIT 1  SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.city_code) = (SELECT MAX(c) FROM (SELECT COUNT(student.city_code) AS c FROM city JOIN student ON city.city_code = student.city_code GROUP BY state))
0       SELECT country FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1      WITH StudentCount AS (SELECT country, COUNT(student.stuid) AS s_count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM StudentCount WHERE s_count = (SELECT min(s_count) FROM StudentCount)
0       SELECT country FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY country HAVING COUNT(s.StuID) = (SELECT MIN(student_count) FROM (SELECT COUNT(StuID) AS student_count FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country))   WITH StudentCount AS (SELECT country, COUNT(student.stuid) AS s_count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM StudentCount WHERE s_count = (SELECT min(s_count) FROM StudentCount)
0       SELECT city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3        SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1       SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3)   SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1       SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(StuID) > 5        SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1       SELECT C.state FROM Student S JOIN City C ON S.city_code = C.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5       SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country != 'USA'   SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE country != 'USA'        SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'      SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'      SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND Country != 'USA'  SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
1       SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND country != 'USA'  SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
1       SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'    SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
1       SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'    SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
0       SELECT distance FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city1_code = 'EWR' AND city2_code = 'BOS')   SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
0       SELECT distance FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR') OR (city1_code = 'EWR' AND city2_code = 'BOS')   SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
1       SELECT AVG(distance) AS AvgDistance, MIN(distance) AS MinDistance, MAX(distance) AS MaxDistance FROM Direct_distance    SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1       SELECT AVG(distance) AS Average_Distance, MIN(distance) AS Minimum_Distance, MAX(distance) AS Maximum_Distance FROM Direct_distance     SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1       SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance) SELECT city1_code, city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance)
1       SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance) SELECT city1_code, city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance)
1       SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
0       SELECT DISTINCT d.city1_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT DISTINCT d.city2_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance)     SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
1       SELECT dd.city1_code, dd.city2_code FROM Direct_distance dd WHERE dd.distance < 1000    SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0       SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000 SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0       SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'        SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0       SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'        SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0       SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS'        SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0       SELECT AVG(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')    SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0       SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1       SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Chicago' ) AS subquery WHERE rk = 1
0       SELECT C.city_name FROM City C WHERE C.city_code = (SELECT D.city2_code FROM Direct_distance D JOIN City C1 ON D.city1_code = C1.city_code WHERE C1.city_name = 'Chicago' ORDER BY D.distance ASC LIMIT 1)      SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Chicago' ) AS subquery WHERE rk = 1
0       SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1) SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance DESC) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Boston' ) AS subquery WHERE rk = 1
0       SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1) SELECT city_name FROM ( SELECT T3.city_name, rank() OVER (ORDER BY T1.distance DESC) as rk FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code = T2.city_code JOIN City AS T3 ON T1.city2_code = T3.city_code WHERE T2.city_name = 'Boston' ) AS subquery WHERE rk = 1
1       SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code     SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
1       SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code       SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0       SELECT City.city_name, AVG(Direct_distance.distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY City.city_name  SELECT city_name, (SELECT AVG(distance) FROM direct_distance WHERE city_code = city1_code) AS average_distance FROM city
0       SELECT City.city_name, AVG(Direct_distance.distance) AS average_distance FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code GROUP BY City.city_name  SELECT city_name, (SELECT AVG(distance) FROM direct_distance WHERE city_code = city1_code) AS average_distance FROM city
1       SELECT dd.distance FROM Student s1 JOIN City c1 ON s1.city_code = c1.city_code JOIN Student s2 ON s1.city_code != s2.city_code JOIN City c2 ON s2.city_code = c2.city_code JOIN Direct_distance dd ON (c1.city_code = dd.city1_code AND c2.city_code = dd.city2_code) OR (c1.city_code = dd.city2_code AND c2.city_code = dd.city1_code) WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim'    SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
1       SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city2_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy') OR city1_code = (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy') AND city2_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')   SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
0       SELECT s.fname, s.lname FROM Student s JOIN City c1 ON s.city_code = c1.city_code JOIN City c2 ON c2.city_name = 'Linda Smith' JOIN Direct_distance dd ON (dd.city1_code = c1.city_code AND dd.city2_code = c2.city_code) OR (dd.city1_code = c2.city_code AND dd.city2_code = c1.city_code) ORDER BY dd.distance DESC LIMIT 1  SELECT fn.fname, fn.lname FROM student fn, direct_distance dd, (SELECT st.city_code FROM student st WHERE st.fname = 'Linda' AND st.lname = 'Smith') linda WHERE fn.city_code = dd.city2_code AND dd.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = linda.city_code)
0       SELECT CONCAT(s.Fname, ' ', s.LName) AS FullName FROM Student s JOIN City c1 ON s.city_code = c1.city_code JOIN Student linda ON linda.Fname = 'Linda' AND linda.LName = 'Smith' JOIN City c2 ON linda.city_code = c2.city_code JOIN Direct_distance dd ON (dd.city1_code = c1.city_code AND dd.city2_code = c2.city_code) OR (dd.city1_code = c2.city_code AND dd.city2_code = c1.city_code) ORDER BY dd.distance DESC LIMIT 1 SELECT fn.fname, fn.lname FROM student fn, direct_distance dd, (SELECT st.city_code FROM student st WHERE st.fname = 'Linda' AND st.lname = 'Smith') linda WHERE fn.city_code = dd.city2_code AND dd.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = linda.city_code)
0       SELECT C.state FROM Student S JOIN City C ON S.city_code = C.city_code WHERE S.Fname = 'Linda'  SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')
0       SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda'    SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')
1       SELECT * FROM Sailors WHERE age > 30;   SELECT * FROM Sailors WHERE age  >  30
1       SELECT * FROM Sailors WHERE age > 30;   SELECT * FROM Sailors WHERE age  >  30
1       SELECT name, age FROM Sailors WHERE age < 30    SELECT name ,  age FROM Sailors WHERE age  <  30
1       SELECT name, age FROM Sailors WHERE age < 30    SELECT name ,  age FROM Sailors WHERE age  <  30
0       SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1   SELECT DISTINCT bid FROM Reserves WHERE sid = 1
1       SELECT DISTINCT bid FROM Reserves WHERE sid = 1 SELECT DISTINCT bid FROM Reserves WHERE sid = 1
0       SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102 SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)
1       SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)        SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)
1       SELECT DISTINCT bid FROM Reserves       SELECT DISTINCT bid FROM Reserves
1       SELECT DISTINCT bid FROM Reserves       SELECT DISTINCT bid FROM Reserves
1       SELECT name FROM Sailors WHERE name LIKE '%e%'  SELECT name FROM Sailors WHERE name LIKE '%e%'
1       SELECT name FROM Sailors WHERE name LIKE '%e%'  SELECT name FROM Sailors WHERE name LIKE '%e%'
0       SELECT sid FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)      SELECT S.sid FROM sailors S WHERE S.age > (SELECT MAX(S2.age) FROM sailors S2 WHERE S2.sid != S.sid)
1       SELECT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)      SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
0       SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7) SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age  >  (SELECT max(s2.age) FROM Sailors s2 WHERE s2.sid != s1.sid AND s2.rating  >  7);
1       SELECT DISTINCT s1.name FROM Sailors s1, Sailors s2 WHERE s1.age > s2.age AND s2.rating > 7;    SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1       SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid     SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1       SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid      SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1       SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY Sailors.sid HAVING COUNT(DISTINCT Reserves.bid) > 1  SELECT S.sid, S.name FROM sailors S INNER JOIN reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1
0       SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2)   SELECT DISTINCT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2
1       SELECT DISTINCT Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')       SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1       SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')    SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
0       SELECT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')  SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1       SELECT DISTINCT Sailors.name, Sailors.sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')  SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1       SELECT red_sailors.sid FROM Reserves AS red_reserves JOIN Boats AS red_boats ON red_reserves.bid = red_boats.bid JOIN Sailors AS red_sailors ON red_reserves.sid = red_sailors.sid WHERE red_boats.color = 'red' INTERSECT SELECT blue_sailors.sid FROM Reserves AS blue_reserves JOIN Boats AS blue_boats ON blue_reserves.bid = blue_boats.bid JOIN Sailors AS blue_sailors ON blue_reserves.sid = blue_sailors.sid WHERE blue_boats.color = 'blue'   SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
0       SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')    SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1       SELECT s.name, s.sid FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON r.bid = b.bid WHERE b.color = 'red' INTERSECT SELECT s.name, s.sid FROM Sailors AS s JOIN Reserves AS r ON s.sid = r.sid JOIN Boats AS b ON r.bid = b.bid WHERE b.color = 'blue'  SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
0       SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')    SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1       SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)     SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1       SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)     SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1       SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)       SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1       SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)       SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1       SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)     SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1       SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)     SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
0       SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103 SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)
0       SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103   SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)
0       SELECT DISTINCT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')   SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 WHERE S2.name = 'Luis' AND S2.rating >= S.rating)
0       SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')        SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 WHERE S2.name = 'Luis' AND S2.rating >= S.rating)
0       SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis')        SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors l WHERE l.name = 'Luis' AND l.rating >= s.rating)
0       SELECT s.name FROM Sailors s WHERE s.rating > ALL (SELECT s2.rating FROM Sailors s2 WHERE s2.name = 'Luis')     SELECT name FROM sailors s1 WHERE NOT EXISTS (SELECT s2.sid FROM sailors s2 WHERE s2.name = 'Luis' AND s1.rating <= s2.rating)
1       SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2        SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1       SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3       SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1       SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)        SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1       SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors)        SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1       SELECT COUNT(*) FROM Sailors;   SELECT COUNT(*) FROM Sailors
1       SELECT COUNT(*) FROM Sailors    SELECT COUNT(*) FROM Sailors
1       SELECT AVG(age) FROM Sailors WHERE rating = 7   SELECT AVG(age) FROM Sailors WHERE rating  =  7
1       SELECT AVG(age) FROM Sailors WHERE rating = 7;  SELECT AVG(age) FROM Sailors WHERE rating  =  7
1       SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'       select count(*) from sailors where name like 'd%'
1       SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'       select count(*) from sailors where name like 'd%'
1       SELECT AVG(rating) AS AverageRating, MAX(age) AS MaxAge FROM Sailors    SELECT AVG(rating) ,  MAX(age) FROM Sailors
1       SELECT AVG(rating) AS AverageRating, MAX(age) AS MaxAge FROM Sailors    SELECT AVG(rating) ,  MAX(age) FROM Sailors
0       SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid       SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid
0       SELECT bid, COUNT(*) AS number_of_reservations FROM Reserves GROUP BY bid       SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid
0       SELECT bid, COUNT(sid) AS number_of_reservations FROM Reserves WHERE bid > 50 GROUP BY bid      SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid  >  50 GROUP BY boats.bid
0       SELECT bid, COUNT(*) FROM Reserves WHERE bid > 50 GROUP BY bid  SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid  >  50 GROUP BY boats.bid
1       SELECT bid, COUNT(sid) AS reservation_count FROM Reserves GROUP BY bid HAVING COUNT(sid) > 1    SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
1       SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
0       SELECT Boats.name, COUNT(*) AS number_of_reservations FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Reserves.sid > 1 GROUP BY Boats.bid    SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid  >  1 GROUP BY boats.bid
0       SELECT Boats.name, COUNT(*) AS reservation_count FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Reserves.sid > 1 GROUP BY Boats.name        SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid  >  1 GROUP BY boats.bid
0       SELECT Sailors.rating, AVG(Sailors.age) AS avg_age FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating    SELECT rating, AVG(age) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY rating
0       SELECT Sailors.rating, AVG(Sailors.age) AS avg_age FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating    SELECT RATING, AVG(AGE) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY RATING
1       SELECT name, rating, age FROM Sailors ORDER BY rating, age      SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1       SELECT name, rating, age FROM Sailors ORDER BY rating, age      SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1       SELECT COUNT(*) FROM Boats      SELECT count(*) FROM Boats
1       SELECT COUNT(*) FROM Boats;     SELECT count(*) FROM Boats
1       SELECT COUNT(*) FROM Boats WHERE color = 'red'  SELECT count(*) FROM Boats WHERE color  =  'red'
1       SELECT COUNT(*) FROM Boats WHERE color = 'red'  SELECT count(*) FROM Boats WHERE color  =  'red'
0       SELECT DISTINCT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30      SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age >= 20 AND s.age <= 30)
0       SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30   SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age >= 20 AND s.age <= 30)
0       SELECT S.name FROM Sailors S WHERE S.rating > ALL (SELECT S2.rating FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red')      SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 JOIN reserves R ON S2.sid = R.sid JOIN boats B ON B.bid = R.bid WHERE B.color = 'red' AND S2.rating >= S.rating)
0       SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red') SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors s2 JOIN reserves r ON s2.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' AND s2.rating >= s.rating)
1       SELECT MAX(rating) FROM Sailors SELECT max(rating) FROM Sailors
1       SELECT MAX(rating) FROM Sailors SELECT max(rating) FROM Sailors
0       SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'  SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE name = 'Melon'))
0       SELECT Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon'  SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves, boats WHERE reserves.bid = boats.bid AND boats.name = 'Melon')
1       SELECT name, age FROM Sailors ORDER BY rating DESC      SELECT name ,  age FROM Sailors ORDER BY rating DESC
1       SELECT name, age FROM Sailors ORDER BY rating DESC      SELECT name ,  age FROM Sailors ORDER BY rating DESC
1       SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)    SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone)
1       SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone)    SELECT h1.model FROM headphone AS h1 WHERE NOT EXISTS (SELECT 1 FROM headphone AS h2 WHERE h2.price > h1.price)
0       SELECT Model FROM headphone ORDER BY Model ASC  SELECT DISTINCT model FROM headphone ORDER BY model
1       SELECT DISTINCT Model FROM headphone ORDER BY Model ASC;        SELECT DISTINCT model FROM headphone ORDER BY model
0       SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1       SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.class) = (SELECT MAX(freq) FROM (SELECT COUNT(*) freq FROM headphone GROUP BY class) sub)
1       SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Headphone_ID) AS count FROM headphone GROUP BY Class))   SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) = (SELECT MAX(count) FROM (SELECT class, COUNT(headphone_id) AS count FROM headphone GROUP BY class))
1       SELECT "Class" FROM headphone GROUP BY "Class" HAVING COUNT(Headphone_ID) > 2   SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
1       SELECT `Class` FROM headphone GROUP BY `Class` HAVING COUNT(Headphone_ID) <= 2  SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(DISTINCT h.headphone_id) <= 2
1       SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class  SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1       SELECT `Class`, COUNT(`Headphone_ID`) FROM `headphone` WHERE `Price` > 200 GROUP BY `Class`     SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1       SELECT COUNT(DISTINCT Earpads) FROM headphone   SELECT count(DISTINCT earpads) FROM headphone
1       SELECT COUNT(DISTINCT Earpads) FROM headphone   SELECT count(DISTINCT earpads) FROM headphone
0       SELECT Earpads, COUNT(*) AS count FROM headphone GROUP BY Earpads ORDER BY count DESC LIMIT 2   SELECT earpads FROM ( SELECT earpads, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM headphone GROUP BY earpads ) AS subquery WHERE rk <= 2
0       SELECT Earpads, COUNT(Headphone_ID) AS NumberOfHeadphones FROM headphone GROUP BY Earpads ORDER BY NumberOfHeadphones DESC LIMIT 2      SELECT earpads FROM ( SELECT earpads, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM headphone GROUP BY earpads ) AS subquery WHERE rk <= 2
1       SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)       SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)
1       SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)       SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)
1       SELECT Construction, AVG(Price) AS average_price FROM headphone GROUP BY Construction   SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1       SELECT Construction, AVG(Price) AS AveragePrice FROM headphone GROUP BY Construction    SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1       SELECT DISTINCT h.Class FROM headphone AS h WHERE h.Earpads = 'Bowls' INTERSECT SELECT DISTINCT h.Class FROM headphone AS h WHERE h.Earpads = 'Comfort Pads'    SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
1       SELECT DISTINCT h.Class FROM headphone h WHERE EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Bowls' AND Class = h.Class) AND EXISTS (SELECT 1 FROM headphone WHERE Earpads = 'Comfort Pads' AND Class = h.Class);    SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
0       SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'Plastic'  SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
0       SELECT Earpads FROM headphone WHERE Construction != 'Plastic'   SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
1       SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)    SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1       SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)    SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1       SELECT Name FROM store ORDER BY Date_Opened ASC SELECT name FROM store ORDER BY date_opened
1       SELECT Name FROM store ORDER BY Date_Opened ASC SELECT name FROM store ORDER BY date_opened
1       SELECT s.Name, s.Parking FROM store s WHERE s.Neighborhood = 'Tarzana'  SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1       SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'  SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1       SELECT COUNT(DISTINCT Neighborhood) FROM store  SELECT count(DISTINCT neighborhood) FROM store
1       SELECT COUNT(DISTINCT Neighborhood) FROM store  SELECT count(DISTINCT neighborhood) FROM store
1       SELECT Neighborhood, COUNT(Store_ID) AS num_stores FROM store GROUP BY Neighborhood     SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1       SELECT Neighborhood, COUNT(Store_ID) AS number_of_stores FROM store GROUP BY Neighborhood       SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
0       SELECT s.Name, SUM(st.Quantity) AS TotalHeadphones FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1    SELECT name, sum FROM ( SELECT t1.name, SUM(t2.quantity) as sum, RANK() OVER (ORDER BY SUM(t2.quantity) DESC) as rk FROM store AS t1 JOIN stock AS t2 ON t1.store_id = t2.store_id GROUP BY t2.store_id ) AS subquery WHERE rk = 1
0       SELECT s.Name, SUM(st.Quantity) AS Total_Quantity FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name        SELECT s.name, (SELECT SUM(st.quantity) FROM stock st WHERE st.store_id = s.store_id GROUP BY st.store_id) AS Quantity FROM store s
1       SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)       SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)
1       SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL SELECT name FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)
0       SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)  SELECT DISTINCT h.model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.headphone_id = h.headphone_id AND quantity > 0)
0       SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)  SELECT DISTINCT h.model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.headphone_id = h.headphone_id AND quantity > 0)
0       SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID HAVING SUM(Quantity) = (SELECT MAX(total) FROM (SELECT SUM(Quantity) AS total FROM stock GROUP BY Headphone_ID)))       SELECT model FROM (SELECT t1.model, rank() over (ORDER BY sum(t2.quantity) DESC ) as rk FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id = t2.headphone_id GROUP BY t1.model) WHERE rk = 1;
0       SELECT Model FROM headphone WHERE Headphone_ID = (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)     SELECT model FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM stock GROUP BY headphone_id HAVING SUM(quantity) = (SELECT MAX(total_quantity) FROM (SELECT SUM(quantity) AS total_quantity FROM stock GROUP BY headphone_id)))
1       SELECT SUM(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'        SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1       SELECT SUM(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'        SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
0       SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)    SELECT neighborhood FROM store EXCEPT SELECT neighborhood FROM store WHERE store_id IN (SELECT store_id FROM stock WHERE quantity > 0)
0       SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)       SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id GROUP BY s.neighborhood HAVING SUM(st.quantity) IS NULL OR SUM(st.quantity) = 0
1       SELECT COUNT(*) FROM Author;    SELECT count(*) FROM Author
1       SELECT COUNT(DISTINCT author_id) FROM Author    SELECT count(*) FROM Author
1       SELECT COUNT(*) FROM Paper;     SELECT count(*) FROM Paper
1       SELECT COUNT(*) FROM Paper      SELECT count(*) FROM Paper
1       SELECT COUNT(*) FROM Affiliation;       SELECT count(*) FROM Affiliation
1       SELECT COUNT(*) FROM Affiliation        SELECT count(*) FROM Affiliation
1       SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;       SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1       SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000        SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1       SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'; SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1       SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009  SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1       SELECT name, address FROM Affiliation   SELECT name, address FROM affiliation
1       SELECT name, address FROM Affiliation   SELECT name, address FROM affiliation;
1       SELECT venue, year FROM Paper ORDER BY year     SELECT venue, year FROM paper ORDER BY year
0       SELECT DISTINCT venue FROM Paper ORDER BY year  SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
0       SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'  SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
0       SELECT Paper.title, Paper.paper_id FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University'       SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
1       SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown';   SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = '%Mckeown%'))
1       SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'   SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = '%Mckeown%'))
1       SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al1 ON p.paper_id = al1.paper_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Affiliation a1 ON al1.affiliation_id = a1.affiliation_id JOIN Affiliation a2 ON al2.affiliation_id = a2.affiliation_id WHERE a1.name = 'Stanford University' AND a2.name = 'Columbia University' AND al1.author_id != al2.author_id    SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1       SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list AS al ON p.paper_id = al.paper_id JOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford' INTERSECT SELECT p.paper_id, p.title FROM Paper AS p JOIN Author_list AS al ON p.paper_id = al.paper_id JOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'        SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1       SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list AS AL1 ON Paper.paper_id = AL1.paper_id JOIN Author AS A1 ON AL1.author_id = A1.author_id JOIN Author_list AS AL2 ON Paper.paper_id = AL2.paper_id JOIN Author AS A2 ON AL2.author_id = A2.author_id WHERE A1.name = 'Mckeown, Kathleen' AND A2.name = 'Rambow, Owen'    SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
1       SELECT DISTINCT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id HAVING COUNT(DISTINCT a.name) = 2        SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
0       SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)    SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0       SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM Author_list al2 JOIN Author a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Rambow' AND al2.paper_id = al.paper_id)      SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0       SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen')      SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown,  Kathleen%" OR T3.name LIKE "%Rambow,  Owen%"
0       SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen')      SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown,  Kathleen%" OR T3.name LIKE "%Rambow,  Owen%"
0       SELECT Author.name, COUNT(Author_list.paper_id) AS number_of_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id ORDER BY number_of_papers DESC   SELECT aut.name, (SELECT COUNT(*) FROM paper WHERE paper.paper_id IN (SELECT author_list.paper_id FROM author_list WHERE author_list.author_id = aut.author_id)) AS paper_num FROM author aut GROUP BY aut.author_id ORDER BY paper_num DESC
0       SELECT Author.name, COUNT(Author_list.paper_id) AS number_of_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id ORDER BY number_of_papers DESC   SELECT aut.name, (SELECT COUNT(*) FROM paper WHERE paper.paper_id IN (SELECT author_list.paper_id FROM author_list WHERE author_list.author_id = aut.author_id)) AS paper_num FROM author aut GROUP BY aut.author_id ORDER BY paper_num DESC
0       SELECT a.affiliation_id, a.name, COUNT(DISTINCT al.paper_id) AS number_of_papers FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.affiliation_id, a.name ORDER BY number_of_papers ASC    SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
1       SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.affiliation_id ORDER BY COUNT(*) DESC  SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
1       SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) > 50   SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1       SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) > 50   SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1       SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)    SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
1       SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.author_id HAVING COUNT(Author_list.paper_id) = 1    SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
0       SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1       SELECT venue, year FROM paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) as count FROM paper GROUP BY venue, year))
0       SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1       SELECT p.venue, p.year FROM paper p GROUP BY p.venue, p.year HAVING COUNT(p.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM paper GROUP BY venue, year) t)
0       SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1    SELECT p.venue FROM paper p GROUP BY p.venue HAVING COUNT(p.paper_id) = (SELECT MIN(c.count) FROM (SELECT COUNT(paper_id) AS count FROM paper GROUP BY venue) c)
0       SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1    WITH VenueCount AS (SELECT venue, COUNT(paper_id) as cnt FROM paper GROUP BY venue) SELECT venue FROM VenueCount WHERE cnt = (SELECT MIN(cnt) FROM VenueCount)
1       SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002';        SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1       SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1       SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027';      SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
1       SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'       SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
0       SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1   SELECT cited_paper_id, COUNT(cited_paper_id) as total_citations FROM citation GROUP BY cited_paper_id HAVING total_citations = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id))
0       SELECT paper_id, COUNT(cited_paper_id) AS number_of_citations FROM Citation GROUP BY cited_paper_id ORDER BY number_of_citations DESC LIMIT 1   SELECT cited_paper_id, COUNT(cited_paper_id) as total_citations FROM citation GROUP BY cited_paper_id HAVING total_citations = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id))
0       SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(*) DESC LIMIT 1)   SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id) WHERE rk = 1
0       SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT C.paper_id FROM Citation C GROUP BY C.paper_id ORDER BY COUNT(*) DESC LIMIT 1)   SELECT title FROM (SELECT T2.title, rank() over (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id) WHERE rk = 1
0       SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 10       SELECT cited_paper_id, cnt FROM (SELECT cited_paper_id ,  count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation GROUP BY cited_paper_id) WHERE rk <= 10
0       SELECT p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 10       SELECT cited_paper_id, cnt FROM (SELECT cited_paper_id ,  count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation GROUP BY cited_paper_id) WHERE rk <= 10
1       SELECT COUNT(*) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))   select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'  select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'  select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT COUNT(*) FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'  select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0       SELECT a.name, COUNT(*) AS citation_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Citation c ON al.paper_id = c.cited_paper_id GROUP BY a.author_id ORDER BY citation_count DESC LIMIT 1   SELECT name, cnt FROM ( SELECT T3.name, count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id GROUP BY T2.author_id ) WHERE rk <= 1
0       SELECT A.name, COUNT(*) AS citation_count FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1       SELECT name, cnt FROM ( SELECT T3.name, count(*) as cnt, RANK() OVER (ORDER BY count(*) DESC) as rk FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id GROUP BY T2.author_id ) WHERE rk <= 1
1       SELECT Paper.venue, Paper.year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'     select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'     select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT DISTINCT venue, year FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))  SELECT DISTINCT p.venue, p.year FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'
1       SELECT DISTINCT Paper.venue, Paper.year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' SELECT DISTINCT P.venue, P.year FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id JOIN affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'
0       SELECT author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY COUNT(*) DESC LIMIT 1  SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T3.author_id = T2.author_id WHERE T1.year = 2009 GROUP BY T2.author_id ) AS subquery WHERE rk = 1
0       SELECT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.author_id ORDER BY COUNT(P.paper_id) DESC LIMIT 1     SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T3.author_id = T2.author_id WHERE T1.year = 2009 GROUP BY T2.author_id ) AS subquery WHERE rk = 1
0       SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = 2009 GROUP BY Affiliation.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3     SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 GROUP BY T2.affiliation_id ) AS subquery WHERE rk <= 3
0       SELECT A.affiliation_id, COUNT(*) AS paper_count FROM Author_list A JOIN Paper P ON A.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.affiliation_id ORDER BY paper_count DESC LIMIT 3     SELECT name FROM ( SELECT T3.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 GROUP BY T2.affiliation_id ) AS subquery WHERE rk <= 3
1       SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009;        SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009
1       SELECT COUNT(*) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009  SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009
1       SELECT COUNT(*) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND year BETWEEN 2000 AND 2009       SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
1       SELECT COUNT(paper_id) FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND year BETWEEN 2000 AND 2009        SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
0       SELECT P.title FROM Paper P WHERE P.paper_id = (SELECT AL.paper_id FROM Author_list AL GROUP BY AL.paper_id ORDER BY COUNT(*) DESC LIMIT 1)     SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT A.paper_id FROM author_list A GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(T.auth_count) FROM (SELECT COUNT(author_id) AS auth_count FROM author_list GROUP BY paper_id) T))
0       SELECT Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id ORDER BY COUNT(Author_list.author_id) DESC LIMIT 1     SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT A.paper_id FROM author_list A GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(T.auth_count) FROM (SELECT COUNT(author_id) AS auth_count FROM author_list GROUP BY paper_id) T))
1       SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id JOIN Author a ON al.author_id = a.author_id WHERE p.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND a.name != 'Mckeown, Kathleen' select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT COUNT(DISTINCT al2.author_id) FROM Author_list al1 JOIN Author a ON al1.author_id = a.author_id JOIN Author_list al2 ON al1.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen' AND al2.author_id != al1.author_id        select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1       SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Author.name = 'Mckeown, Kathleen' GROUP BY Author.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1        SELECT name FROM ( SELECT t4.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM author_list as t1 JOIN author_list as t2 ON t1.paper_id = t2.paper_id AND t1.author_id != t2.author_id JOIN author as t3 ON t1.author_id = t3.author_id JOIN author as t4 ON t2.author_id = t4.author_id WHERE t3.name = 'mckeown , kathleen' GROUP BY t2.author_id ) AS subquery WHERE rk = 1
1       SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Author_list.paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen') AND Author.name != 'Mckeown, Kathleen' GROUP BY Author.name ORDER BY COUNT(Author_list.paper_id) DESC LIMIT 1  SELECT name FROM ( SELECT t4.name, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM author_list as t1 JOIN author_list as t2 ON t1.paper_id = t2.paper_id AND t1.author_id != t2.author_id JOIN author as t3 ON t1.author_id = t3.author_id JOIN author as t4 ON t2.author_id = t4.author_id WHERE t3.name = 'mckeown , kathleen' GROUP BY t2.author_id ) AS subquery WHERE rk = 1
1       SELECT paper_id FROM Paper WHERE title LIKE '%translation%'     SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1       SELECT paper_id FROM Paper WHERE title LIKE '%translation%'     SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1       SELECT P.paper_id, P.title FROM Paper P WHERE P.paper_id NOT IN (SELECT C.cited_paper_id FROM Citation C)       SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
1       SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL    SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
0       SELECT name FROM Affiliation WHERE address LIKE '%China%' ORDER BY (SELECT COUNT(*) FROM Author_list WHERE Author_list.affiliation_id = Affiliation.affiliation_id) DESC LIMIT 1        SELECT a.name FROM affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id IN (SELECT al.affiliation_id FROM author_list al GROUP BY al.affiliation_id HAVING COUNT(DISTINCT al.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY affiliation_id)))
0       SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name ORDER BY COUNT(*) DESC LIMIT 1      SELECT a.name FROM affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id IN (SELECT al.affiliation_id FROM author_list al GROUP BY al.affiliation_id HAVING COUNT(DISTINCT al.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY affiliation_id)))
1       SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year     SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1       SELECT venue, year, COUNT(paper_id) AS num_papers FROM Paper GROUP BY venue, year       SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
0       SELECT a.name, COUNT(p.paper_id) FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name      SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
1       SELECT Affiliation.name, COUNT(DISTINCT Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id     SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
1       SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50)     SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1       SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50)     SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1       SELECT COUNT(DISTINCT a.author_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) c ON al.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
1       SELECT COUNT(DISTINCT a.author_id) FROM Author a WHERE a.author_id NOT IN (SELECT al.author_id FROM Author_list al JOIN (SELECT c.cited_paper_id FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50) cp ON al.paper_id = cp.cited_paper_id)        SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
1       SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009 GROUP BY a.author_id HAVING COUNT(DISTINCT p.venue) = 2     SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1       SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009 GROUP BY a.author_id HAVING COUNT(DISTINCT p.venue) = 2     SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1       SELECT a.name FROM Author a WHERE NOT EXISTS (SELECT 1 FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL' AND al.author_id = a.author_id)       SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1       SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL'))   SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1       SELECT COUNT(*) FROM conference;        SELECT count(*) FROM conference
1       SELECT COUNT(*) FROM conference SELECT count(*) FROM conference
1       SELECT DISTINCT "Conference_Name" FROM conference       SELECT DISTINCT conference_name FROM conference
1       SELECT DISTINCT "Conference_Name" FROM conference       SELECT DISTINCT conference_name FROM conference
1       SELECT Conference_Name, Year, Location FROM conference  SELECT conference_name ,  YEAR ,  LOCATION FROM conference
1       SELECT Conference_Name, Year, Location FROM conference  SELECT conference_name ,  YEAR ,  LOCATION FROM conference
0       SELECT c.Conference_Name, COUNT(cp.Conference_ID) AS number_of_times FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name        SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1       SELECT Conference_Name, COUNT(Conference_ID) AS occurrence_count FROM conference GROUP BY Conference_Name       SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1       SELECT Year, COUNT(Conference_ID) AS number_of_conferences FROM conference GROUP BY Year        SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1       SELECT Year, COUNT(Conference_ID) AS conferences_count FROM conference GROUP BY Year    SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
0       SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1 SELECT year FROM conference GROUP BY year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY year))
0       SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1 SELECT a.year FROM (SELECT year, COUNT(conference_id) transmission_count FROM conference GROUP BY year) a WHERE a.transmission_count = (SELECT MIN(transmission_count) FROM (SELECT COUNT(conference_id) transmission_count FROM conference GROUP BY year))
1       SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2      SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1       SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2      SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1       SELECT Institution_Name, Location, Founded FROM institution     SELECT institution_name ,  LOCATION ,  founded FROM institution
1       SELECT Institution_Name, Location, Founded FROM institution;    SELECT institution_name ,  LOCATION ,  founded FROM institution
1       SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;   SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1       SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;   SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1       SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)       SELECT i.institution_name, i.location FROM institution i WHERE i.founded = (SELECT MAX(founded) FROM institution)
0       SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1        SELECT i.institution_name, i.location FROM institution i WHERE i.founded = (SELECT MAX(founded) FROM institution)
0       SELECT institution.Institution_Name, COUNT(staff.staff_ID) AS staff_count FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_Name  SELECT institution_name, (SELECT COUNT(*) FROM staff WHERE staff.institution_id = institution.institution_id) AS staff_count FROM institution WHERE founded > 1800
0       SELECT i.Institution_ID, COUNT(s.staff_ID) AS staff_count FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID       SELECT institution_name, (SELECT COUNT(*) FROM staff WHERE staff.institution_id = institution.institution_id) AS staff_count FROM institution WHERE founded > 1800
1       SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff) SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1       SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff) SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1       SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff) SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1       SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff) SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1       SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff WHERE Nationality = 'United States'    SELECT MAX(age) AS maximum_age, MIN(age) AS minimum_age FROM staff WHERE nationality = 'United States';
1       SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff        SELECT max(age) ,  min(age) FROM staff
0       SELECT DISTINCT Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality = 'Canada'  SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))
0       SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada'      SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))
0       SELECT DISTINCT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp1.staff_ID FROM conference_participation cp1 WHERE cp1.role = 'speaker') AND s.staff_ID IN (SELECT cp2.staff_ID FROM conference_participation cp2 WHERE cp2.role = 'sponsor') SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')
0       SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')  SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') AND staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')
1       SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL')) AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl'))     SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'Naccl')
1       SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name IN ('ACL', 'NACCL') GROUP BY s.staff_ID HAVING COUNT(DISTINCT c.Conference_Name) = 2   SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'NACCL')
0       SELECT DISTINCT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year IN (2003, 2004);   SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.year IN (2003, 2004))
0       SELECT DISTINCT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year IN (2003, 2004)    SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = staff.staff_id AND (c.year BETWEEN 2003 AND 2004))
0       SELECT Conference_Name, Year, COUNT(staff_ID) AS number_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, Conference_Name, Year     SELECT c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_participation.conference_id = c.conference_id) AS participants FROM conference c
0       SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS number_of_participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year    SELECT c.conference_id, c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_id = c.conference_id) AS num_participants FROM conference AS c
0       SELECT c.Conference_Name FROM conference c WHERE c.Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp GROUP BY cp.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2) SELECT conference_name FROM (SELECT T1.conference_name, rank() over (ORDER BY count(*) DESC) as rk FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id = T2.conference_id GROUP BY T2.conference_id) WHERE rk <= 2
0       SELECT C.Conference_Name FROM conference C WHERE C.Conference_ID IN (SELECT CP.Conference_ID FROM conference_participation CP GROUP BY CP.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2) SELECT conference_name FROM (SELECT T1.conference_name, rank() over (ORDER BY count(*) DESC) as rk FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id = T2.conference_id GROUP BY T2.conference_id) WHERE rk <= 2
1       SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL') SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
1       SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))   SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
1       SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004)))     SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.year = 2004 AND s.institution_id = i.institution_id)
1       SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year = 2004)))     SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE s.institution_id = i.institution_id AND c.year = 2004)
1       SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)       SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)
1       SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)       SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)
1       SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age  SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1       SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC      SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1       SELECT * FROM PilotSkills WHERE age < 30        SELECT * FROM PilotSkills WHERE age  <  30
1       SELECT * FROM PilotSkills WHERE age < 30        select * from pilotskills where age  <  30
1       SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35  SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1       SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'  SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1       SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'   SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1       SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'   SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1       SELECT COUNT(DISTINCT location) FROM Hangar     SELECT count(DISTINCT LOCATION) FROM hangar
1       SELECT COUNT(DISTINCT location) FROM Hangar     SELECT count(DISTINCT LOCATION) FROM hangar
1       SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32      SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1       SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32      SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1       SELECT COUNT(*) FROM PilotSkills WHERE age > 40 SELECT count(*) FROM pilotskills WHERE age  >  40
1       SELECT COUNT(*) FROM PilotSkills WHERE age > 40 SELECT count(*) FROM pilotskills WHERE age  >  40
1       SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35  SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
1       SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35  SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
0       SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1      SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')
0       SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1      SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')
0       SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1   WITH RankedPlanes AS (SELECT plane_name, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM RankedPlanes WHERE rank = 1
0       SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1   SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM pilotskills GROUP BY plane_name) t)
0       SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1    SELECT plane_name FROM (SELECT h.plane_name, rank() over (ORDER BY COUNT(p.plane_name)) as rk FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name) WHERE rk = 1
0       SELECT h.plane_name FROM Hangar h LEFT JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY h.plane_name ORDER BY COUNT(ps.pilot_name) ASC LIMIT 1      SELECT plane_name FROM (SELECT h.plane_name, rank() over (ORDER BY COUNT(p.plane_name)) as rk FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name) WHERE rk = 1
1       SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'      SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1       SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'      SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1       SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41      SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1       SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41      SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1       SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;     SELECT count(DISTINCT plane_name) FROM pilotskills
1       SELECT COUNT(DISTINCT plane_name) FROM PilotSkills      SELECT count(DISTINCT plane_name) FROM pilotskills
1       SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'     SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
1       SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith'     SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
0       SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40       SELECT count(plane_name) FROM pilotskills WHERE age  >  40
0       SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40       SELECT count(plane_name) FROM pilotskills WHERE age  >  40
1       SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1       SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;        SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1       SELECT pilot_name FROM PilotSkills ORDER BY age DESC    SELECT pilot_name FROM pilotskills ORDER BY age DESC
1       SELECT pilot_name FROM PilotSkills ORDER BY age DESC    SELECT pilot_name FROM pilotskills ORDER BY age DESC
1       SELECT location FROM Hangar ORDER BY plane_name ASC     SELECT LOCATION FROM hangar ORDER BY plane_name
1       SELECT location FROM Hangar ORDER BY plane_name SELECT LOCATION FROM hangar ORDER BY plane_name
0       SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC; SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
1       SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name ASC  SELECT DISTINCT plane_name FROM hangar ORDER BY plane_name ASC
0       SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30     SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
0       SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30     SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
1       SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)     SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1       SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)     SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1       SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')   SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1       SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')   SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
0       SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber')     SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1       SELECT ps1.pilot_name FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.pilot_name = ps2.pilot_name WHERE ps1.plane_name = 'Piper Cub' AND ps2.plane_name = 'B-52 Bomber'SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1       SELECT AVG(age) AS Average_Age, MIN(age) AS Minimum_Age FROM PilotSkills        SELECT avg(age) ,  min(age) FROM pilotskills
1       SELECT AVG(age) AS AverageAge, MIN(age) AS MinimumAge FROM PilotSkills  SELECT avg(age) ,  min(age) FROM pilotskills
0       SELECT ps1.pilot_name FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.pilot_name = ps2.pilot_name JOIN Hangar h1 ON ps1.plane_name = h1.plane_name JOIN Hangar h2 ON ps2.plane_name = h2.plane_name WHERE h1.location = 'Austin' AND h2.location = 'Boston'    SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
0       SELECT DISTINCT pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston')   SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1       SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')    SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
0       SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')   SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
1       SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name     SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
1       SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
0       SELECT plane_name, COUNT(*) AS number_of_planes FROM Hangar GROUP BY plane_name SELECT h.plane_name, count(p.plane_name) FROM Hangar AS h LEFT JOIN PilotSkills as p on h.plane_name = p.plane_name group by h.plane_name
0       SELECT plane_name, COUNT(pilot_name) AS number_of_pilots FROM PilotSkills GROUP BY plane_name   SELECT h.plane_name, count(p.plane_name) FROM Hangar AS h LEFT JOIN PilotSkills as p on h.plane_name = p.plane_name group by h.plane_name
0       SELECT ps.plane_name, ps.pilot_name, MIN(ps.age) AS oldest_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name ASC;   SELECT ps.plane_name, ps.pilot_name FROM pilotskills ps WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = ps.plane_name) ORDER BY ps.plane_name
1       SELECT H.plane_name, PS.pilot_name FROM Hangar H INNER JOIN PilotSkills PS ON H.plane_name = PS.plane_name WHERE PS.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name) ORDER BY H.plane_name      SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = h.plane_name) ORDER BY h.plane_name
0       SELECT ps.plane_name, ps.pilot_name, MAX(ps.age) AS oldest_age FROM PilotSkills ps GROUP BY ps.plane_name       SELECT ps.pilot_name, ps.plane_name FROM pilotskills ps INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM pilotskills GROUP BY plane_name) max_ps ON ps.plane_name = max_ps.plane_name AND ps.age = max_ps.max_age
1       SELECT Hangar.plane_name, PilotSkills.pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE (Hangar.plane_name, PilotSkills.age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)    SELECT DISTINCT hangar.plane_name, pilotskills.pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name)
1       SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name        SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
1       SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name        SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
0       SELECT H.location, COUNT(P.pilot_name) AS num_pilots, AVG(P.age) AS avg_age FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.location SELECT h.location, COUNT(pilot_name) as num_pilots, AVG(ps.age) as av_age FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location
0       SELECT H.location, COUNT(DISTINCT PS.pilot_name) AS num_pilots, AVG(PS.age) AS average_age FROM Hangar H JOIN PilotSkills PS ON H.plane_name = PS.plane_name GROUP BY H.location        SELECT h.location, COUNT(pilot_name) as num_pilots, AVG(ps.age) as av_age FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location
1       SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35    SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
1       SELECT H.plane_name, COUNT(P.pilot_name) AS num_pilots FROM PilotSkills P JOIN Hangar H ON P.plane_name = H.plane_name GROUP BY H.plane_name HAVING AVG(P.age) < 35    SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
0       SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))      SELECT location FROM hangar WHERE plane_name in (SELECT plane_name FROM pilotskills WHERE age = (select min(age) from PilotSkills))
0       SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills))      SELECT location FROM hangar WHERE plane_name in (SELECT plane_name FROM pilotskills WHERE age = (select min(age) from PilotSkills))
1       SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin')   SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1       SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'      SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1       SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 WHERE p1.age > (SELECT MIN(p2.age) FROM PilotSkills p2 WHERE p2.plane_name = 'Piper Cub') ORDER BY p1.pilot_name     SELECT DISTINCT p1.pilot_name FROM pilotskills p1, pilotskills p2 WHERE p1.age > p2.age AND p2.plane_name = 'Piper Cub' ORDER BY p1.pilot_name
0       SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 WHERE p1.age > (SELECT MAX(p2.age) FROM PilotSkills p2 WHERE p2.plane_name = 'Piper Cub') ORDER BY p1.pilot_name;    SELECT ps1.pilot_name FROM pilotskills ps1 WHERE ps1.age > (SELECT MAX(ps2.age) FROM pilotskills ps2 WHERE ps2.plane_name = 'Piper Cub') ORDER BY ps1.pilot_name
0       SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')        SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
0       SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.age < (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'F-14 Fighter')        SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
1       SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'
1       SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'  SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'
1       SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')  SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
1       SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')  SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
1       SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district)   SELECT d.name FROM district d WHERE d.area_km = (SELECT MAX(area_km) FROM district)
1       SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district)      SELECT area_km ,  Government_website FROM district WHERE Population  = (SELECT min(Population) FROM district);
1       SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district)       SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)
1       SELECT MAX(Area_km) AS largest_area, AVG(Area_km) AS average_area FROM district SELECT max(area_km) ,  avg(area_km) FROM district
0       SELECT SUM(Population) FROM district WHERE District_ID IN (SELECT District_ID FROM district ORDER BY Area_km DESC LIMIT 3)      SELECT SUM(Population) FROM (SELECT Population, rank() over (ORDER BY Area_km DESC ) AS rk FROM district) WHERE rk <= 3
1       SELECT District_ID, Name, Government_website FROM district ORDER BY Population  SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population
1       SELECT Name FROM district WHERE Government_website LIKE '%.gov%'        SELECT name FROM district WHERE Government_website LIKE "%gov%"
1       SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000        SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000
1       SELECT Name, Speach_title FROM spokesman        SELECT name ,  speach_title FROM spokesman
1       SELECT AVG(Points) AS average_points, AVG(Age) AS average_age FROM spokesman WHERE Rank_position = 1    SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1
1       SELECT Name, Points FROM spokesman WHERE Age < 40;      SELECT name ,  points FROM spokesman WHERE age  <  40
1       SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman) SELECT name FROM spokesman WHERE Age = (SELECT max(Age) FROM spokesman)
1       SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)   SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)
0       SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID ORDER BY COUNT(sd.Spokesman_ID) DESC LIMIT 1  SELECT d.name FROM district AS d INNER JOIN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(spokesman_id) = (SELECT MAX(c) FROM (SELECT COUNT(spokesman_id) as c FROM spokesman_district GROUP BY district_id))) y ON d.district_id = y.district_id
1       SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004        SELECT name FROM spokesman WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman_district WHERE start_year < 2004)
0       SELECT d.Name, COUNT(sd.Spokesman_ID) AS num_spokesmen FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name        SELECT name, (SELECT COUNT(spokesman_id) FROM spokesman_district WHERE district_id = d.district_id) AS num_spokesmen FROM district AS d
0       SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 1 INTERSECT SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position = 2 SELECT d.name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 2);
0       SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1    SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1
1       SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)     SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)
1       SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)      SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
1       SELECT SUM(Population) AS Total_Population, AVG(Population) AS Average_Population FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district)      SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)
1       SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)    SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)
0       SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1 SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)
1       SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)    SELECT paintings.title, paintings.location FROM paintings WHERE paintings.year = (SELECT MIN(year) FROM paintings);
0       SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1 SELECT paintings.title, paintings.location FROM paintings WHERE paintings.year = (SELECT MIN(year) FROM paintings);
0       SELECT title FROM Sculptures WHERE location = 'gallery 226'     SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
0       SELECT title FROM Sculptures WHERE location = 'gallery 226'     SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1       SELECT title, location FROM Paintings   SELECT title ,  LOCATION FROM paintings
1       SELECT title, location FROM Paintings   SELECT title ,  LOCATION FROM paintings
1       SELECT title, location FROM Sculptures  SELECT title ,  LOCATION FROM sculptures
1       SELECT title, location FROM Sculptures  SELECT title ,  LOCATION FROM sculptures
1       SELECT medium FROM Paintings WHERE paintingID = 80      SELECT medium FROM paintings WHERE paintingID  =  80
1       SELECT medium FROM Paintings WHERE paintingID = 80      select medium from paintings where paintingid  =  80
1       SELECT fname, lname FROM Artists WHERE birthYear > 1850 SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
1       SELECT fname, lname FROM Artists WHERE birthYear > 1850;        SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
0       SELECT title, year FROM Sculptures WHERE location != 'gallery 226'      SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
0       SELECT title, year FROM Sculptures WHERE location != 'gallery 226'      SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
0       SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900      SELECT fname, lname FROM (SELECT DISTINCT artistid, fname, lname FROM artists) AS unique_artists WHERE unique_artists.artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900)
0       SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900      SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptorid = artistid AND year < 1900)
0       SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920   SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920)
0       SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920   SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920)
1       SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)       SELECT a.fname, a.lname FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(b.deathyear - b.birthyear) FROM artists b)
0       SELECT fname || ' ' || lname AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists) SELECT a.fname, a.lname FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(b.deathyear - b.birthyear) FROM artists b)
0       SELECT deathYear - birthYear AS age FROM Artists ORDER BY (deathYear - birthYear) ASC LIMIT 1   SELECT lifespan FROM (SELECT (deathyear - birthyear) AS lifespan FROM artists) WHERE lifespan = (SELECT MIN(deathyear - birthyear) FROM artists)
0       SELECT deathYear - birthYear AS age FROM Artists ORDER BY age ASC LIMIT 1       SELECT lifespan FROM (SELECT (deathyear - birthyear) AS lifespan FROM artists) WHERE lifespan = (SELECT MIN(deathyear - birthyear) FROM artists)
0       SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1 SELECT fname, deathyear - birthyear AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)
1       SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)  SELECT fname, deathyear - birthyear AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)
0       SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'   SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0       SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'   SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0       SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)   SELECT artistid, COUNT(*) FROM artists a LEFT JOIN paintings p ON p.painterid = a.artistid WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) GROUP BY a.artistid;
0       SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)   SELECT artistid, COUNT(*) FROM artists a LEFT JOIN paintings p ON p.painterid = a.artistid WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) GROUP BY a.artistid;
1       SELECT Paintings.title, Paintings.year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'       SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1       SELECT title, year FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Mary')        SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1       SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850  SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1       SELECT Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850  SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1       SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo')  SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
1       SELECT Paintings.location, Paintings.medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'   SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
0       SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID     SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)
0       SELECT DISTINCT CONCAT(Artists.fname, ' ', Artists.lname) AS FullName FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)
0       SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil') INTERSECT SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'lithographic')  SELECT a.fname, a.lname FROM artists a WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')
0       SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' INTERSECT SELECT painterID FROM Paintings WHERE medium = 'lithographic')       SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')
0       SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas'    SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884 AND mediumon = 'canvas')
1       SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)     SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884)
0       SELECT DISTINCT a.fname FROM Artists a INNER JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'gallery 241' SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0       SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241') SELECT fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')
1       SELECT medium, COUNT(*) AS number_of_works FROM ( SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures ) AS Combined GROUP BY medium    SELECT medium, COUNT(*) AS NumWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium;
1       SELECT medium, COUNT(*) AS number_of_works FROM ( SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures ) AS combined GROUP BY medium    SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium
1       SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium    SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1       SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium    SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1       SELECT location, COUNT(paintingID) AS paintings_count FROM Paintings WHERE year < 1900 GROUP BY location        SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
0       SELECT COUNT(DISTINCT location) FROM Paintings WHERE year < 1900        SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
1       SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'        SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1       SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910        SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
0       SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'      SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
0       SELECT DISTINCT Paintings.painterID FROM Paintings WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 240'        SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1       SELECT DISTINCT p1.title FROM Paintings p1 WHERE p1.height_mm > (SELECT MIN(p2.height_mm) FROM Paintings p2 WHERE p2.mediumOn = 'canvas')       SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0       SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE mediumOn = 'canvas')   SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0       SELECT DISTINCT p1.paintingID FROM Paintings p1 WHERE p1.year < (SELECT MIN(p2.year) FROM Paintings p2 WHERE p2.location = 'gallery 240')       SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0       SELECT DISTINCT p1.paintingID FROM Paintings p1 JOIN Paintings p2 ON p1.year < p2.year WHERE p2.location = 'gallery 240'        SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
1       SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings) SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)
0       SELECT MIN(paintingID) AS oldest_painting_id FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)      SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)
0       SELECT Artists.fname || ' ' || Artists.lname AS full_name FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'       SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%')
0       SELECT a.fname || ' ' || a.lname AS full_name FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.title LIKE '%female%'       SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%')
0       SELECT DISTINCT title FROM Paintings ORDER BY title ASC;        SELECT title FROM paintings ORDER BY title
0       SELECT DISTINCT title FROM Paintings ORDER BY title ASC SELECT title FROM paintings ORDER BY title
0       SELECT DISTINCT title FROM Paintings ORDER BY width_mm  SELECT title FROM paintings ORDER BY height_mm
0       SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC     SELECT title FROM paintings ORDER BY height_mm
0       SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;       SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950
0       SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;       SELECT title FROM (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) WHERE year BETWEEN 1900 AND 1950
0       SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222     SELECT p.title FROM paintings AS p WHERE p.painterid = 222 UNION ALL SELECT s.title FROM sculptures AS s WHERE s.sculptorid = 222
0       SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222     SELECT title FROM paintings WHERE painterid = 222 UNION ALL SELECT title FROM sculptures WHERE sculptorid = 222
0       SELECT Artists.artistID FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900 GROUP BY Artists.artistID ORDER BY COUNT(*) DESC LIMIT 1      SELECT a.artistid FROM artists a WHERE (SELECT COUNT(*) FROM paintings p WHERE p.painterid = a.artistid AND p.year < 1900) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) c);
0       SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1     SELECT a.artistid FROM artists a WHERE (SELECT COUNT(*) FROM paintings p WHERE p.painterid = a.artistid AND p.year < 1900) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) c);
1       SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(Counted) FROM (SELECT sculptorID, COUNT(sculptureID) AS Counted FROM Sculptures GROUP BY sculptorID) AS SculptureCounts))    SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT sculptorid, COUNT(*) as cnt FROM sculptures GROUP BY sculptorid)))
1       SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(Counted) FROM (SELECT sculptorID, COUNT(sculptureID) AS Counted FROM Sculptures GROUP BY sculptorID) AS SculptureCounts))    SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptorid) = (SELECT MAX(work_count) FROM (SELECT COUNT(*) AS work_count FROM sculptures GROUP BY sculptorid)))
1       SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;    SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1       SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800     SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1       SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930        SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
0       SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1       SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000     SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
1       SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000     SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
0       SELECT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas')      SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0       SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('panels', 'canvas')  SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0       SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930        SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
0       SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
0       SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'        SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
0       SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'        SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
0       SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900      SELECT height_mm, paintingID FROM paintings WHERE YEAR < 1900 AND height_mm = (SELECT MAX(height_mm) FROM paintings WHERE YEAR < 1900)
0       SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1   SELECT height_mm, paintingID FROM paintings WHERE YEAR < 1900 AND height_mm = (SELECT MAX(height_mm) FROM paintings WHERE YEAR < 1900)
1       SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year      SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
1       SELECT year, MAX(height_mm) AS Largest_Height, MAX(width_mm) AS Largest_Width FROM Paintings GROUP BY year      SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
0       SELECT Artists.fname, Artists.lname, AVG(Paintings.height_mm) AS Avg_Height, AVG(Paintings.width_mm) AS Avg_Width FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Paintings.painterID ORDER BY Artists.lname, Artists.fname      SELECT artists.artistID, AVG(paintings.height_mm) ASAverageHeight, AVG(paintings.width_mm) AS AverageWidth FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY artists.lname, artists.fname
0       SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname        SELECT artists.artistID, AVG(paintings.height_mm) ASAverageHeight, AVG(paintings.width_mm) AS AverageWidth FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY artists.lname, artists.fname
1       SELECT A.fname, COUNT(P.paintingID) FROM Artists A JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2     SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
1       SELECT a.fname, COUNT(p.paintingID) AS number_of_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID HAVING COUNT(p.paintingID) >= 2      SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
0       SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) <= 3)      SELECT A.deathyear FROM artists A WHERE 3 >= (SELECT COUNT(*) FROM paintings WHERE painterid = A.artistid)
0       SELECT Artists.deathYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(Paintings.paintingID) < 4 SELECT deathyear FROM artists WHERE (SELECT COUNT(*) FROM paintings WHERE painterid = artistid) < 4
0       SELECT Artists.deathYear FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID GROUP BY Artists.artistID ORDER BY COUNT(Sculptures.sculptureID) ASC LIMIT 1  WITH tmp as (SELECT A.deathYear, count(S.sculptureID) as cnt FROM Artists A LEFT JOIN Sculptures S on A.artistID = S.sculptorID GROUP BY A.artistID) SELECT tmp.deathYear FROM tmp WHERE cnt = (SELECT min(cnt) FROM tmp)
0       SELECT A.deathYear FROM Artists A WHERE A.artistID = (SELECT S.sculptorID FROM Sculptures S GROUP BY S.sculptorID ORDER BY COUNT(*) ASC LIMIT 1)        WITH tmp as (SELECT A.deathYear, count(S.sculptureID) as cnt FROM Artists A LEFT JOIN Sculptures S on A.artistID = S.sculptorID GROUP BY A.artistID) SELECT tmp.deathYear FROM tmp WHERE cnt = (SELECT min(cnt) FROM tmp)
0       SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1       SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240')
0       SELECT height_mm, paintingID FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1       SELECT paintingid, height_mm FROM paintings WHERE width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240') AND location = 'Gallery 240'
0       SELECT p.paintingID FROM Paintings p WHERE p.year < ALL (SELECT year FROM Paintings WHERE location = 'gallery 240')     SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
0       SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings p2 WHERE p2.location = 'gallery 240')   SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
0       SELECT p1.paintingID FROM Paintings p1 WHERE p1.height_mm > ALL (SELECT p2.height_mm FROM Paintings p2 WHERE p2.year > 1900)    SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
1       SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)       SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
0       SELECT Artists.fname, Artists.lname, COUNT(Paintings.paintingID) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.artistID ORDER BY num_paintings DESC LIMIT 3    SELECT fname, lname FROM (SELECT a.fname, a.lname, rank() over (ORDER BY COUNT(p.paintingid) DESC) as rk FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid) WHERE rk <= 3
0       SELECT fname, lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE medium = 'oil' GROUP BY Artists.artistID ORDER BY COUNT(*) DESC LIMIT 1SELECT fname, lname FROM (SELECT a.fname, a.lname, rank() over (ORDER BY COUNT(p.paintingid) DESC) as rk FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid) WHERE rk = 1
1       SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year    SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1       SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year    SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1       SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title       SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1       SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC   SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1       SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)    SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p) AND a.artistid NOT IN (SELECT s.sculptorid FROM sculptures s)
1       SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)    SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p) AND a.artistid NOT IN (SELECT s.sculptorid FROM sculptures s)
0       SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas' GROUP BY location     SELECT p.location FROM paintings p WHERE p.year < 1885 EXCEPT SELECT p.location FROM paintings p WHERE p.mediumon = 'canvas'
0       SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'       SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
1       SELECT COUNT(*) FROM race;      SELECT count(*) FROM race
1       SELECT COUNT(*) FROM race;      SELECT count(*) FROM race
1       SELECT winning_driver, winning_team FROM race ORDER BY winning_team ASC SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1       SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1       SELECT race.Winning_driver FROM race WHERE race.Pole_Position != 'Junior Strous'        SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1       SELECT r.Winning_driver FROM race r WHERE r.Pole_Position != 'Junior Strous'    SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1       SELECT Constructor FROM driver ORDER BY Age ASC SELECT CONSTRUCTOR FROM driver ORDER BY Age ASC
0       SELECT Constructor FROM driver ORDER BY Age ASC SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1       SELECT DISTINCT entrant FROM driver WHERE age >= 20;    SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1       SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;    SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1       SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM driver       SELECT max(Age) ,  min(Age) FROM driver
1       SELECT MAX(Age), MIN(Age) FROM driver   SELECT max(Age) ,  min(Age) FROM driver
1       SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20    SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1       SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20    SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1       SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC        SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1       SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC        SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1       SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID        SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
1       SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID        SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
0       SELECT driver.Driver_Name, COUNT(race.Driver_ID) AS Races_Participated FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name   SELECT D.driver_name, (SELECT COUNT(*) FROM race R WHERE R.driver_id = D.driver_id) AS races_participated FROM driver D
0       SELECT driver.Driver_Name, COUNT(race.Road) AS races_participated FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name        SELECT D.driver_name, (SELECT COUNT(*) FROM race R WHERE R.driver_id = D.driver_id) AS races_participated FROM driver D
0       SELECT D.Age FROM driver D JOIN race R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID ORDER BY COUNT(R.Road) DESC LIMIT 1    SELECT age FROM driver d WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(x.total) FROM (SELECT driver_id, COUNT(*) as total FROM race GROUP BY driver_id) x))
0       SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1) SELECT age FROM driver d WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(x.total) FROM (SELECT driver_id, COUNT(*) as total FROM race GROUP BY driver_id) x))
1       SELECT d.Driver_Name, d.Age FROM driver d WHERE d.Driver_ID IN (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID HAVING COUNT(r.Road) >= 2)  SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1       SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID HAVING COUNT(r.Road) >= 2       SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
0       SELECT DISTINCT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26    SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1       SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26     SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1       SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'   SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1       SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'   SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1       SELECT Constructor, COUNT(Driver_ID) AS number_of_drivers FROM driver GROUP BY Constructor      SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
1       SELECT Constructor, COUNT(DISTINCT Driver_ID) AS num_drivers FROM driver GROUP BY Constructor   SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
0       SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1        SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(counts) FROM (SELECT COUNT(engine) AS counts FROM driver GROUP BY engine))
0       SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1        SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(count) FROM (SELECT engine, COUNT(*) as count FROM driver GROUP BY engine))
1       SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2 SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
0       SELECT driver.Engine, COUNT(DISTINCT driver.Driver_ID) AS NumberOfDrivers FROM driver GROUP BY driver.Engine HAVING COUNT(DISTINCT driver.Driver_ID) >= 2;      SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1       SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)      SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1       SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)      SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1       SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30   SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1       SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30   SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1       SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Road) > 1      SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1       SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1 SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1       SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' INTERSECT SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')     SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' INTERSECT SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe');
0       SELECT d1.Driver_Name FROM driver d1 JOIN race r1 ON d1.Driver_ID = r1.Driver_ID JOIN race r2 ON d1.Driver_ID = r2.Driver_ID WHERE r1.Pole_Position = 'James Hinchcliffe' AND r2.Pole_Position = 'Carl Skerlong'        SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY driver_id HAVING COUNT(DISTINCT pole_position) = 2);
1       SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')    SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')
1       SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')    SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')
1       SELECT COUNT(*) FROM languages; SELECT count(*) FROM languages
1       SELECT COUNT(*) FROM languages; SELECT count(*) FROM languages
1       SELECT name FROM languages ORDER BY name ASC    SELECT name FROM languages ORDER BY name ASC
1       SELECT name FROM languages ORDER BY name ASC;   SELECT name FROM languages ORDER BY name ASC
1       SELECT name FROM languages WHERE name LIKE '%ish%'      SELECT name FROM languages WHERE name LIKE "%ish%"
1       SELECT name FROM languages WHERE name LIKE '%ish%'      SELECT name FROM languages WHERE name LIKE "%ish%"
1       SELECT name FROM countries ORDER BY overall_score DESC  SELECT name FROM countries ORDER BY overall_score DESC
1       SELECT name FROM countries ORDER BY overall_score DESC  SELECT name FROM countries ORDER BY overall_score DESC
1       SELECT AVG(justice_score) FROM countries        SELECT avg(justice_score) FROM countries
1       SELECT AVG(justice_score) FROM countries;       SELECT avg(justice_score) FROM countries
1       SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name != 'Norway'   SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1       SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name != 'Norway'       SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1       SELECT COUNT(DISTINCT language_id) FROM official_languages      SELECT count(DISTINCT language_id) FROM official_languages
1       SELECT COUNT(DISTINCT language_id) FROM official_languages      SELECT count(DISTINCT language_id) FROM official_languages
1       SELECT name FROM countries ORDER BY education_score DESC        SELECT name FROM countries ORDER BY education_score DESC
1       SELECT name FROM countries ORDER BY education_score DESC        SELECT name FROM countries ORDER BY education_score DESC
1       SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)   SELECT countries.name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)
1       SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)   SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)
1       SELECT c.name, l.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id     SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
1       SELECT c.name, l.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id     SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
0       SELECT languages.name, COUNT(official_languages.country_id) AS num_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name    SELECT language.name, (SELECT COUNT(*) FROM official_languages WHERE language_id = language.id) AS CountriesCount FROM languages AS language
0       SELECT languages.name, COUNT(official_languages.country_id) AS number_of_countries FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name      SELECT L.name, (SELECT COUNT(distinct O.country_id) FROM official_languages O WHERE L.id = O.language_id) AS num_countries FROM languages L
0       SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(*) DESC LIMIT 1   SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY language_id)))
0       SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)  SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY language_id)))
0       SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(official_languages.country_id) >= 2  SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
1       SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.id HAVING COUNT(ol.country_id) >= 2       SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
0       SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'     SELECT AVG(ov_score) FROM (SELECT overall_score AS ov_score FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English')))
0       SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'     SELECT AVG(ovsc) FROM (SELECT overall_score AS ovsc FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'))
0       SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3) WITH RankedLanguages AS (SELECT language_id, RANK() OVER (ORDER BY COUNT(DISTINCT country_id) DESC) as rank FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages WHERE rank <= 3)
0       SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(official_languages.country_id) DESC LIMIT 3        WITH RankedLanguages AS (SELECT language_id, RANK() OVER (ORDER BY COUNT(DISTINCT country_id) DESC) as rank FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages WHERE rank <= 3)
0       SELECT languages.name, AVG(countries.overall_score) AS average_overall_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY average_overall_score DESC SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
0       SELECT languages.name, AVG(countries.overall_score) AS average_overall_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY average_overall_score DESC SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
1       SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(count) FROM (SELECT COUNT(language_id) AS count FROM official_languages GROUP BY country_id)))    SELECT name FROM countries WHERE id IN (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))
0       SELECT C.name FROM countries AS C WHERE C.id = (SELECT O.country_id FROM official_languages AS O GROUP BY O.country_id ORDER BY COUNT(*) DESC LIMIT 1)  SELECT name FROM countries WHERE id IN (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))
1       SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1       SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages) SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1       SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)  SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
1       SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)  SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
0       SELECT l.name FROM languages AS l JOIN official_languages AS ol ON l.id = ol.language_id JOIN countries AS c ON ol.country_id = c.id WHERE c.overall_score > 95 INTERSECT SELECT l.name FROM languages AS l JOIN official_languages AS ol ON l.id = ol.language_id JOIN countries AS c ON ol.country_id = c.id WHERE c.overall_score < 90       SELECT name FROM languages WHERE id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95) AND id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90);
0       SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95 INTERSECT SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score < 90       SELECT languages.name FROM languages WHERE languages.id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id GROUP BY ol.language_id HAVING MAX(c.overall_score) > 95 AND MIN(c.overall_score) < 90)
1       SELECT DISTINCT country, town_city FROM Addresses;      SELECT DISTINCT country, town_city FROM addresses
1       SELECT country, town_city FROM Addresses        SELECT country ,  town_city FROM Addresses;
1       SELECT a.county_state_province FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id       SELECT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
0       SELECT a.address_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id SELECT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
1       SELECT feature_description FROM Features WHERE feature_name = 'rooftop' SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
1       SELECT feature_description FROM Features WHERE feature_name = 'rooftop' SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
0       SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY F.feature_id ORDER BY COUNT(*) DESC LIMIT 1     SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id HAVING COUNT(pf.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM property_features GROUP BY feature_id))
0       SELECT feature_name, feature_description FROM Features WHERE feature_id = (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id HAVING COUNT(pf.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM property_features GROUP BY feature_id))
1       SELECT MIN(room_count) FROM Properties  SELECT min(room_count) FROM Properties;
1       SELECT MIN(room_count) FROM Properties  SELECT min(room_count) FROM Properties;
1       SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'     SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
1       SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'     SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0       SELECT DISTINCT ac.age_category_description FROM Users u JOIN Ref_Age_Categories ac ON u.age_category_code = ac.age_category_code WHERE u.other_user_details LIKE '%Mother%'    SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0       SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'  SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0       SELECT U.first_name FROM Users U WHERE U.user_id = (SELECT P.owner_user_id FROM Properties P GROUP BY P.owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)   SELECT U.first_name FROM users U WHERE EXISTS (SELECT 1 FROM properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))
0       SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)       SELECT U.first_name FROM users U WHERE EXISTS (SELECT 1 FROM properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))
0       SELECT AVG(room_count) FROM Properties WHERE property_description LIKE '%garden%'       SELECT AVG(room_count) FROM properties WHERE EXISTS (SELECT 1 FROM property_features JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden' AND properties.property_id = property_features.property_id)
1       SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'garden'))     SELECT AVG(room_count) AS avg_rooms FROM properties WHERE property_id IN (SELECT properties.property_id FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden')
0       SELECT Addresses.town_city FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Features.feature_name = 'Swimming Pool'   SELECT DISTINCT t.town_city FROM addresses t JOIN properties p ON t.address_id = p.property_address_id JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'
0       SELECT town_city FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'Swimming Pool' GROUP BY town_city       SELECT DISTINCT t.town_city FROM addresses t JOIN properties p ON t.address_id = p.property_address_id JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'
0       SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1  SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)
0       SELECT property_id, MIN(vendor_requested_price) FROM Properties SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)
1       SELECT AVG(room_count) FROM Properties  SELECT avg(room_count) FROM Properties;
1       SELECT AVG(room_count) FROM Properties  SELECT avg(room_count) FROM Properties;
1       SELECT COUNT(DISTINCT room_size) FROM Rooms     SELECT count(DISTINCT room_size) FROM Rooms;
1       SELECT COUNT(DISTINCT room_size) FROM Rooms     SELECT count(DISTINCT room_size) FROM Rooms;
0       SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(*) >= 2   SELECT u.user_id, us.search_string FROM user_searches us INNER JOIN users u ON us.user_id = u.user_id WHERE u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)
0       SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2    SELECT DISTINCT us.user_id, us.search_seq FROM user_searches us INNER JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) t ON us.user_id = t.user_id
1       SELECT MAX(search_datetime) FROM User_Searches  SELECT max(search_datetime) FROM User_Searches;
1       SELECT MAX(search_datetime) FROM User_Searches  SELECT max(search_datetime) FROM User_Searches;
1       SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC    SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
1       SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC    SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0       SELECT a.zip_postcode FROM Addresses a WHERE a.address_id IN (SELECT p.property_address_id FROM Properties p WHERE p.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)) SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
1       SELECT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id WHERE p.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)      SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
1       SELECT u.user_id, u.user_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.user_category_code HAVING COUNT(us.search_seq) = 1    SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
1       SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) = 1)        SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
0       SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1))    SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_datetime = (SELECT min(search_datetime) FROM User_Searches))
0       SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)    SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches WHERE search_datetime = (SELECT min(search_datetime) FROM User_Searches))
0       SELECT Users.login_name FROM Users JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen' ORDER BY Users.first_name     SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
0       SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name     SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
1       SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')    SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1       SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = '1')    SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1       SELECT date_registered FROM Users WHERE login_name = 'ratione'  SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1       SELECT date_registered FROM Users WHERE login_name = 'ratione'  SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1       SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'  SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
1       SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'  SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
0       SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Addresses a INNER JOIN Users u ON a.address_id = u.user_address_id WHERE u.age_category_code = 'Senior'       SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0       SELECT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen'   SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0       SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2)     SELECT COUNT(DISTINCT properties.property_id) FROM properties JOIN property_features ON properties.property_id = property_features.property_id GROUP BY properties.property_id HAVING COUNT(property_features.feature_id) >= 2
0       SELECT COUNT(property_id) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2)   SELECT COUNT(DISTINCT pf.property_id) FROM property_features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2
0       SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id   SELECT p.property_id, IFNULL(COUNT(pp.photo_seq), 0) FROM properties p LEFT JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY p.property_id
0       SELECT property_id, COUNT(photo_seq) AS num_photos FROM Property_Photos GROUP BY property_id    SELECT properties.property_id, COUNT(property_photos.photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.property_id
0       SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id SELECT owner_user_id AS user_id, COUNT(photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY owner_user_id
0       SELECT owner_user_id, COUNT(DISTINCT photo_seq) AS number_of_photos FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
1       SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('Single Mother', 'Student')     SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
1       SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('Single Mother', 'Student')     SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
1       SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp;    SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
1       SELECT datestamp, property_name FROM User_Property_History UPH JOIN Properties P ON UPH.property_id = P.property_id ORDER BY datestamp; SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
0       SELECT property_type_description, property_type_code FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY Ref_Property_Types.property_type_code ORDER BY COUNT(*) DESC LIMIT 1     SELECT property_type_description, property_type_code FROM (SELECT T1.property_type_description, T1.property_type_code, rank() over (ORDER BY count(*) DESC) as rk FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code) WHERE rk = 1
0       SELECT RPT.property_type_description, COUNT(*) AS count FROM Properties P JOIN Ref_Property_Types RPT ON P.property_type_code = RPT.property_type_code GROUP BY RPT.property_type_description ORDER BY count DESC LIMIT 1       SELECT property_type_description, property_type_code FROM (SELECT T1.property_type_description, T1.property_type_code, rank() over (ORDER BY count(*) DESC) as rk FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code) WHERE rk = 1
1       SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'     SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1       SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'     SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1       SELECT room_size, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY room_size     SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1       SELECT room_size, COUNT(*) AS number_of_rooms FROM Rooms GROUP BY room_size     SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
0       SELECT country FROM Addresses WHERE address_id = (SELECT user_address_id FROM Users WHERE first_name = 'Robbie')        SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
1       SELECT a.country FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id WHERE u.first_name = 'Robbie'        SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
0       SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id   SELECT first_name, middle_name, last_name FROM users WHERE user_id IN (SELECT owner_user_id FROM properties WHERE property_address_id IN (SELECT address_id FROM addresses WHERE address_id = user_address_id))
0       SELECT CONCAT(u.first_name, ' ', u.middle_name, ' ', u.last_name) AS full_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Addresses a ON u.user_address_id = a.address_id WHERE p.property_address_id = a.address_id    SELECT first_name, middle_name, last_name FROM users WHERE EXISTS (SELECT 1 FROM properties WHERE property_address_id = user_address_id)
1       SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)     SELECT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT properties.owner_user_id FROM properties)
1       SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)     SELECT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT properties.owner_user_id FROM properties)
1       SELECT u.last_name, u.user_id FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.last_name HAVING COUNT(DISTINCT p.property_id) >= 2 AND COUNT(DISTINCT us.search_seq) <= 2       SELECT u.user_id, u.last_name FROM users u WHERE (SELECT COUNT(*) FROM properties p WHERE p.owner_user_id = u.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches s WHERE s.user_id = u.user_id) <= 2
0       SELECT U.last_name, U.user_id FROM Users U JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT US.search_seq) <= 2 AND U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2)   SELECT u.user_id, u.last_name FROM users u WHERE (SELECT COUNT(*) FROM properties p WHERE p.owner_user_id = u.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches s WHERE s.user_id = u.user_id) <= 2
1       SELECT COUNT(*) FROM bike WHERE weight > 780    SELECT count(*) FROM bike WHERE weight  >  780
1       SELECT product_name, weight FROM bike ORDER BY price ASC        SELECT product_name ,  weight FROM bike ORDER BY price ASC
1       SELECT heat, name, nation FROM cyclist  SELECT heat ,  name ,  nation FROM cyclist
1       SELECT MAX(weight) AS MaxWeight, MIN(weight) AS MinWeight FROM bike     SELECT max(weight) ,  min(weight) FROM bike
1       SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';       SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'
1       SELECT name, result FROM cyclist WHERE nation != 'Russia'       SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'
1       SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015     SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015
1       SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id, bike.product_name HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4       SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4
0       SELECT cyclist.id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.id, cyclist.name ORDER BY COUNT(*) DESC LIMIT 1     SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id HAVING COUNT(cb.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id));
1       SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation IN ('Russia', 'Great Britain')))    SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'
1       SELECT COUNT(DISTINCT heat) FROM cyclist        SELECT count(DISTINCT heat) FROM cyclist
1       SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)    SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )
0       SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'       SELECT T1.product_name FROM bike AS T1 WHERE T1.id IN (SELECT T3.bike_id FROM cyclist AS T2 JOIN cyclists_own_bikes AS T3 ON T2.id = T3.cyclist_id WHERE T2.result < '4:21.558')
0       SELECT DISTINCT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY b.id HAVING COUNT(DISTINCT c.name) = 2     SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike.id HAVING COUNT(DISTINCT cyclist.name) = 2
1       SELECT c.name, c.nation, c.result FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob)  SELECT name, nation, RESULT FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)
1       SELECT product_name FROM bike WHERE material LIKE '%fiber%'     SELECT product_name FROM bike WHERE material LIKE "%fiber%"
1       SELECT c.id, COUNT(cb.bike_id) AS bike_count FROM cyclist c LEFT JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id ORDER BY c.id SELECT cy.id, COUNT(distinct cb.bike_id) FROM cyclist cy LEFT JOIN cyclists_own_bikes cb ON cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY cy.id
0       SELECT Food, Flavor FROM goods WHERE Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake');        SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cake' AND goods.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')
0       SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'cake' ORDER BY goods.Price DESC LIMIT 1    SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cake' AND goods.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')
0       SELECT Flavor, Food, Price FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')    SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')
1       SELECT Id, Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')     SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')
1       SELECT Id FROM goods WHERE Flavor = 'apple'     SELECT id FROM goods WHERE flavor = 'apple'
0       SELECT Id FROM goods WHERE Flavor = 'Apple'     SELECT id FROM goods WHERE flavor = 'apple'
1       SELECT Id FROM goods WHERE Price < 3    SELECT id FROM goods WHERE price  <  3
1       SELECT Id FROM goods WHERE Price < 3    SELECT id FROM goods WHERE price  <  3
1       SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'    SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'cake' AND goods.flavor = 'lemon'
1       SELECT DISTINCT r.CustomerId FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'lemon' AND g.Food = 'cake'     SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'cake' AND goods.flavor = 'lemon'
1       SELECT goods.Food, COUNT(DISTINCT receipts.CustomerId) AS num_customers FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY goods.Food      SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
1       SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS customer_count FROM goods AS g JOIN items AS i ON g.Id = i.Item JOIN receipts AS r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food        SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
0       SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'bakery' GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) >= 15        SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1       SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id HAVING COUNT(receipts.ReceiptNumber) >= 15 SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1       SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10)       SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1       SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) > 10)   SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1       SELECT COUNT(*) FROM goods WHERE Food = 'Cake'  SELECT count(*) FROM goods WHERE food  =  "Cake"
1       SELECT COUNT(*) FROM goods WHERE Food = 'cake'  SELECT COUNT(DISTINCT id) FROM goods WHERE food = 'cake'
1       SELECT G.Flavor FROM goods G WHERE G.Food = 'Croissant' SELECT flavor FROM goods WHERE food  =  "Croissant"
0       SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant'      SELECT flavor FROM goods WHERE food  =  "croissant"
0       SELECT DISTINCT g.Food FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15        SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
0       SELECT DISTINCT goods.Id, goods.Flavor, goods.Food FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15        SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
1       SELECT Food, AVG(Price) AS AvgPrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food    SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1       SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food        SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
0       SELECT i.Receipt FROM items i WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Food = 'Cake') AND i.Receipt IN (SELECT i2.Receipt FROM items i2 WHERE i2.Item IN (SELECT g2.Id FROM goods g2 WHERE g2.Food = 'Cookie'))        SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
1       SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('cake', 'cookie') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) = 2  SELECT DISTINCT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cake' AND i.receipt = r.receiptnumber) AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.item = g2.id WHERE g2.food = 'cookie' AND i2.receipt = r.receiptnumber)
0       SELECT receipts.ReceiptNumber FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'LOGAN' AND goods.Food = 'Croissant'       SELECT DISTINCT receipts.receiptnumber FROM receipts, customers, items, goods WHERE receipts.customerid = customers.id AND items.receipt = receipts.receiptnumber AND items.item = goods.id AND customers.lastname = 'LOGAN' AND goods.food = 'Croissant'
0       SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'Logan' AND g.Food = 'croissant'    SELECT DISTINCT r.receiptnumber FROM receipts r JOIN customers c ON r.customerid = c.id JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE c.lastname = 'Logan' AND g.food = 'croissant'
0       SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item = (SELECT Id FROM goods WHERE Price = (SELECT MAX(Price) FROM goods))  SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods)))
0       SELECT r.ReceiptNumber, r.Date FROM receipts AS r JOIN items AS i ON r.ReceiptNumber = i.Receipt JOIN goods AS g ON i.Item = g.Id WHERE g.Price = (SELECT MAX(Price) FROM goods)        SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods)))
0       SELECT goods.Id, goods.Flavor, goods.Food FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id ORDER BY COUNT(*) ASC LIMIT 1        SELECT I.item FROM items I GROUP BY I.item HAVING COUNT(I.item) = (SELECT MIN(Count) FROM (SELECT COUNT(item) Count FROM items GROUP BY item))
0       SELECT items.Item FROM items GROUP BY items.Item ORDER BY COUNT(*) ASC LIMIT 1  SELECT I.item FROM items I GROUP BY I.item HAVING COUNT(I.item) = (SELECT MIN(Count) FROM (SELECT COUNT(item) Count FROM items GROUP BY item))
1       SELECT Food, COUNT(*) AS num_goods FROM goods GROUP BY Food     SELECT count(*) ,  food FROM goods GROUP BY food
1       SELECT Food, COUNT(*) AS number_of_goods FROM goods GROUP BY Food       SELECT count(*) ,  food FROM goods GROUP BY food
1       SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food       SELECT avg(price) ,  food FROM goods GROUP BY food
1       SELECT Food, AVG(Price) AS Average_Price FROM goods GROUP BY Food       SELECT avg(price) ,  food FROM goods GROUP BY food
1       SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5     SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
1       SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5     SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
1       SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10     SELECT flavor FROM goods WHERE food  =  "cake" AND price  >  10
0       SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10    SELECT flavor FROM goods WHERE food  =  "cake" AND price  >  10
1       SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)       SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
1       SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)       SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
0       SELECT DISTINCT g1.Id FROM goods g1 WHERE g1.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Food = 'Tart')        SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
1       SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Food = 'Tart')   SELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE food  =  "Tart")
1       SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13    SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1       SELECT DISTINCT r.ReceiptNumber FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 13        SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
0       SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15      SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
0       SELECT r.Date FROM receipts r INNER JOIN items i ON r.ReceiptNumber = i.Receipt INNER JOIN goods g ON i.Item = g.Id WHERE g.Price > 15  SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
1       SELECT Id FROM goods WHERE Id LIKE '%APP%'      SELECT id FROM goods WHERE id LIKE "%APP%"
1       SELECT Id FROM goods WHERE Id LIKE '%APP%'      SELECT id FROM goods WHERE id LIKE "%APP%"
0       SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'    SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1       SELECT Id, Price FROM goods WHERE Id LIKE '%70%'        SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1       SELECT LastName FROM customers ORDER BY LastName ASC;   SELECT LastName FROM customers ORDER BY LastName
1       SELECT LastName FROM customers ORDER BY LastName ASC    SELECT LastName FROM customers ORDER BY LastName
1       SELECT Id FROM goods ORDER BY Id ASC;   SELECT DISTINCT id FROM goods ORDER BY id
1       SELECT DISTINCT Id FROM goods ORDER BY Id ASC;  SELECT DISTINCT id FROM goods ORDER BY id
1       SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR ReceiptNumber IN (SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie')    SELECT DISTINCT r.receiptnumber FROM receipts r WHERE r.customerid = 12 OR r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie')
1       SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12    SELECT receipts.receiptnumber FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.receiptnumber AND goods.flavor = 'apple' AND goods.food = 'pie') OR receipts.customerid = 12
1       SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(Date) FROM receipts)  SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
0       SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1     SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
0       SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10  SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
1       SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)  SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
1       SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7 SELECT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7
0       SELECT Id FROM goods WHERE Food IN ('Cookies', 'Cakes') AND Price BETWEEN 3 AND 7       SELECT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7
0       SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.Date = (SELECT MIN(Date) FROM receipts)SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))
0       SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date LIMIT 1)    SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))
1       SELECT AVG(g.Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry')  SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')
1       SELECT AVG(g.Price) FROM goods g WHERE g.Flavor IN ('blackberry', 'blueberry')  SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')
1       SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'    SELECT MIN(price) FROM goods WHERE flavor = 'cheese'
0       SELECT Item FROM goods WHERE Flavor = 'cheese' ORDER BY Price LIMIT 1   SELECT id FROM goods WHERE flavor = 'cheese' AND price = (SELECT MIN(price) FROM goods WHERE flavor = 'cheese')
1       SELECT Flavor, MAX(Price) AS HighestPrice, MIN(Price) AS LowestPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor     SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1       SELECT Flavor, MAX(Price) AS Max_Price, MIN(Price) AS Min_Price, AVG(Price) AS Avg_Price FROM goods GROUP BY Flavor ORDER BY Flavor     SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1       SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food ASC   SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
1       SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods WHERE Food IS NOT NULL GROUP BY Food ORDER BY Food ASC   SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
0       SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3  WITH RankedDates AS (SELECT date, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM receipts GROUP BY date) SELECT date FROM RankedDates WHERE rnk <= 3
0       SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3  WITH RankedDates AS (SELECT date, RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk FROM receipts GROUP BY date) SELECT date FROM RankedDates WHERE rnk <= 3
0       SELECT customers.FirstName, customers.LastName, COUNT(receipts.ReceiptNumber) AS shopping_count FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY shopping_count DESC LIMIT 1   WITH cnt AS ( SELECT CustomerId, count(*) AS cnt FROM receipts GROUP BY CustomerId ) SELECT CustomerId, cnt FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
0       SELECT receipts.CustomerId, COUNT(receipts.ReceiptNumber) AS total_purchases FROM receipts GROUP BY receipts.CustomerId ORDER BY total_purchases DESC LIMIT 1   WITH cnt AS ( SELECT CustomerId, count(*) AS cnt FROM receipts GROUP BY CustomerId ) SELECT CustomerId, cnt FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
1       SELECT Date, COUNT(DISTINCT CustomerId) AS num_customers FROM receipts GROUP BY Date    SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
1       SELECT Date, COUNT(DISTINCT CustomerId) AS customers_count FROM receipts GROUP BY Date  SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
0       SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tart'   SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tart')))
0       SELECT C.FirstName || ' ' || C.LastName AS full_name FROM customers C JOIN receipts R ON C.Id = R.CustomerId JOIN items I ON R.ReceiptNumber = I.Receipt JOIN goods G ON I.Item = G.Id WHERE G.Flavor = 'apple' AND G.Food = 'Tarts'    SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tart')))
0       SELECT g.Id FROM goods g WHERE g.Food = 'Cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant') SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
0       SELECT g.Id FROM goods g WHERE g.Food = 'cookies' AND g.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant') SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
1       SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')        SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
1       SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')        SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
1       SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)   SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)
1       SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)   SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)
1       SELECT Id, Flavor, Food FROM goods ORDER BY Price ASC   SELECT id ,  flavor ,  food FROM goods ORDER BY price
1       SELECT Id, Flavor, Food FROM goods ORDER BY Price       SELECT id ,  flavor ,  food FROM goods ORDER BY price
1       SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'Cake' ORDER BY goods.Flavor        SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0       SELECT g.Id, g.Flavor FROM goods g WHERE g.Food = 'cake' ORDER BY g.Flavor      SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
1       SELECT G.Id FROM goods G WHERE G.Flavor = 'chocolate' AND (SELECT COUNT(*) FROM items I WHERE I.Item = G.Id) <= 10      SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10
0       SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Receipt) <= 10 SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10
0       SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')   SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0       SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')   SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0       SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3     WITH cnt AS ( SELECT item, COUNT(*) AS cnt FROM items GROUP BY item ) SELECT item FROM cnt WHERE EXISTS ( SELECT 1 FROM (SELECT cnt FROM cnt ORDER BY cnt DESC LIMIT 3) t WHERE cnt.cnt = t.cnt )
0       SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) DESC LIMIT 3     WITH cnt AS ( SELECT item, COUNT(*) AS cnt FROM items GROUP BY item ) SELECT item FROM cnt WHERE EXISTS ( SELECT 1 FROM (SELECT cnt FROM cnt ORDER BY cnt DESC LIMIT 3) t WHERE cnt.cnt = t.cnt )
1       SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING SUM(g.Price) > 150   SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1       SELECT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150     SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1       SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AVG(g.Price) > 5     SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1       SELECT CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY CustomerId HAVING AVG(g.Price) > 5 SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1       SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY Date HAVING SUM(Price) > 100        SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1       SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY Date HAVING SUM(Price) > 100        SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1       SELECT COUNT(*) FROM driver;    SELECT count(*) FROM driver
1       SELECT COUNT(*) FROM driver     SELECT count(*) FROM driver
1       SELECT make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY make      SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1       SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > 150 GROUP BY Make      SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1       SELECT Make, AVG(Age) AS average_age FROM driver GROUP BY Make  SELECT avg(age) ,  Make FROM driver GROUP BY make
1       SELECT d.Make, AVG(d.Age) AS average_age FROM driver d GROUP BY d.Make  SELECT avg(age) ,  Make FROM driver GROUP BY make
1       SELECT AVG(d.Laps) FROM driver d WHERE d.Age < 20       SELECT avg(Laps) FROM driver WHERE age  <  20
1       SELECT AVG(Laps) FROM driver WHERE Age < 20     SELECT avg(Laps) FROM driver WHERE age  <  20
1       SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC        SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1       SELECT manager, sponsor FROM team ORDER BY car_owner    SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1       SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1   SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1
1       SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1   SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1
1       SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'     SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1       SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'       SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1       SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver   SELECT max(Points) ,  min(Points) FROM driver
1       SELECT MAX(Points) AS HighestPoints, MIN(Points) AS LowestPoints FROM driver    SELECT max(Points) ,  min(Points) FROM driver
1       SELECT COUNT(*) FROM driver WHERE Points < 150  SELECT count(*) FROM driver WHERE Points  <  150
1       SELECT COUNT(*) FROM driver WHERE Points < 150; SELECT count(*) FROM driver WHERE Points  <  150
1       SELECT Driver FROM driver ORDER BY Age ASC      SELECT Driver FROM driver ORDER BY Age ASC
1       SELECT Driver FROM driver ORDER BY Age ASC      SELECT Driver FROM driver ORDER BY Age ASC
1       SELECT Driver FROM driver ORDER BY Points DESC  SELECT Driver FROM driver ORDER BY Points DESC
1       SELECT Driver FROM driver ORDER BY Points DESC  SELECT Driver FROM driver ORDER BY Points DESC
1       SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id   SELECT T2.Driver, T1.Country FROM country AS T1 RIGHT JOIN driver AS T2 ON T1.Country_ID = T2.Country
1       SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id   SELECT T2.Driver, T1.Country FROM country AS T1 RIGHT JOIN driver AS T2 ON T1.Country_ID = T2.Country
1       SELECT MAX(d.Points) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin'        SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1       SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'      SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1       SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English' SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
1       SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English' SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
0       SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points > 150 SELECT country.country FROM country WHERE country_id IN (SELECT country_id FROM country JOIN driver ON country.country_id = driver.country WHERE driver.points > 150)
0       SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points > 150 SELECT country.country FROM country WHERE country_id IN (SELECT country_id FROM country JOIN driver ON country.country_id = driver.country WHERE driver.points > 150)
0       SELECT C.Capital FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Driver_ID = (SELECT Driver_ID FROM driver ORDER BY Points DESC LIMIT 1)       SELECT (SELECT capital FROM country WHERE country = d.country) AS capital FROM driver d WHERE d.points = (SELECT MAX(points) FROM driver)
0       SELECT c.Capital FROM country AS c JOIN driver AS d ON c.Country_Id = d.Country WHERE d.Points = (SELECT MAX(Points) FROM driver)       SELECT (SELECT capital FROM country WHERE country = d.country) AS capital FROM driver d WHERE d.points = (SELECT MAX(points) FROM driver)
0       SELECT d.Make, COUNT(td.Driver_ID) AS num_drivers FROM driver d JOIN team_driver td ON d.Driver_ID = td.Driver_ID GROUP BY d.Make       SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
1       SELECT make, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY make        SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
0       SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1    WITH Ranked AS (SELECT make, RANK() OVER (ORDER BY COUNT(driver_id) DESC) AS rank FROM driver GROUP BY make) SELECT make FROM Ranked WHERE rank = 1
1       SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Driver_ID) as count FROM driver GROUP BY Make))   SELECT make FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp WHERE num_drivers = (SELECT MAX(num_drivers) FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp2)
1       SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3      SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1       SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3      SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1       SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID)  SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
1       SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)    SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
0       SELECT c.Country FROM country AS c JOIN driver AS d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' INTERSECT SELECT c.Country FROM country AS c JOIN driver AS d ON c.Country_Id = d.Country WHERE d.Make = 'Chevrolet'     SELECT Country FROM country WHERE Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Dodge' ) AND Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Chevrolet' )
0       SELECT DISTINCT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make = 'Dodge' AND EXISTS (SELECT 1 FROM driver d2 WHERE d2.Country = d.Country AND d2.Make = 'Chevrolet')   SELECT Country FROM country WHERE Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Dodge' ) AND Country_ID IN ( SELECT Country FROM driver WHERE Make = 'Chevrolet' )
1       SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver   SELECT sum(Points) ,  avg(Points) FROM driver
1       SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver   SELECT sum(Points) ,  avg(Points) FROM driver
1       SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)        SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
1       SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)        SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
0       SELECT T.Manager, T.Sponsor FROM team T WHERE T.Team_ID = (SELECT TD.Team_ID FROM team_driver TD GROUP BY TD.Team_ID ORDER BY COUNT(*) DESC LIMIT 1)    WITH DriverCounts AS ( SELECT t.team_id, COUNT(td.team_id) AS num_drivers FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ) SELECT t.manager, t.sponsor FROM team t INNER JOIN DriverCounts dc ON t.team_id = dc.team_id WHERE dc.num_drivers = ( SELECT MAX(num_drivers) FROM DriverCounts )
1       SELECT manager, sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(count) FROM (SELECT COUNT(Driver_ID) AS count FROM team_driver GROUP BY Team_ID)))   WITH DriverCounts AS ( SELECT t.team_id, COUNT(td.team_id) AS num_drivers FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ) SELECT t.manager, t.sponsor FROM team t INNER JOIN DriverCounts dc ON t.team_id = dc.team_id WHERE dc.num_drivers = ( SELECT MAX(num_drivers) FROM DriverCounts )
1       SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) >= 2)    SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1       SELECT t.Manager, t.Car_Owner FROM team t WHERE t.Team_ID IN (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(td.Driver_ID) >= 2)        SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1       SELECT COUNT(*) FROM institution;       SELECT count(*) FROM institution
1       SELECT COUNT(*) FROM institution        SELECT count(*) FROM institution
1       SELECT Name FROM institution ORDER BY Name ASC  SELECT Name FROM institution ORDER BY Name ASC
1       SELECT Name FROM institution ORDER BY Name ASC  SELECT Name FROM institution ORDER BY Name ASC
1       SELECT Name FROM institution ORDER BY Founded ASC;      SELECT Name FROM institution ORDER BY Founded ASC
1       SELECT Name FROM institution ORDER BY Founded ASC       SELECT Name FROM institution ORDER BY Founded ASC
1       SELECT city, province FROM institution; SELECT City ,  Province FROM institution
1       SELECT City, Province FROM institution  SELECT City ,  Province FROM institution
1       SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution      SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1       SELECT MAX(enrollment) AS MaxEnrollment, MIN(enrollment) AS MinEnrollment FROM institution      SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1       SELECT affiliation FROM institution WHERE city != 'Vancouver'   SELECT Affiliation FROM institution WHERE City != "Vancouver"
1       SELECT Affiliation FROM institution WHERE City != 'Vancouver'   SELECT Affiliation FROM institution WHERE City != "Vancouver"
1       SELECT i.Stadium FROM institution i ORDER BY i.Capacity DESC    SELECT Stadium FROM institution ORDER BY Capacity DESC
1       SELECT Stadium FROM institution ORDER BY Capacity DESC  SELECT Stadium FROM institution ORDER BY Capacity DESC
1       SELECT i.Stadium FROM institution i WHERE i.Enrollment = (SELECT MAX(Enrollment) FROM institution)      SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution)
1       SELECT Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution)    SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution)
0       SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;   SELECT i.Name, c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID
0       SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID SELECT i.Name, c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID
0       SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)       SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i WHERE enrollment = (SELECT MIN(enrollment) FROM institution)
0       SELECT Nickname FROM Championship WHERE Institution_ID = (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1)       SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i WHERE enrollment = (SELECT MIN(enrollment) FROM institution)
0       SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC;    SELECT i.Name FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC
0       SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC     SELECT i.Name FROM institution AS i LEFT JOIN Championship AS c ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC
0       SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name HAVING COUNT(Championship.Institution_ID) >= 1SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1       SELECT Name FROM institution WHERE Institution_ID IN (SELECT Institution_ID FROM Championship WHERE Number_of_Championships >= 1)       SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1       SELECT SUM(c.Number_of_Championships) FROM Championship AS c JOIN institution AS i ON c.Institution_ID = i.Institution_ID WHERE i.Affiliation = 'Public'        SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1       SELECT SUM(Championship.Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'        SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1       SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1       SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1       SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM institution GROUP BY Affiliation))       SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM institution GROUP BY affiliation))
1       SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1 SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) Cnt FROM institution GROUP BY affiliation))
1       SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1       SELECT founded FROM institution GROUP BY founded HAVING COUNT(*) > 1
1       SELECT Founded, COUNT(Institution_ID) AS Number_of_Institutions FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1      SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
0       SELECT Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC; SELECT c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC
0       SELECT Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC  SELECT c.Nickname FROM institution AS i LEFT JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC
1       SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')  SELECT SUM(enrollment) FROM institution WHERE city IN ('Vancouver', 'Calgary')
1       SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary')       SELECT enrollment FROM institution WHERE city IN ('Calgary', 'Vancouver')
1       SELECT DISTINCT i1.Province FROM institution i1 JOIN institution i2 ON i1.Province = i2.Province WHERE i1.Founded < 1920 AND i2.Founded > 1950  SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1       SELECT province FROM institution WHERE Founded < 1920 INTERSECT SELECT province FROM institution WHERE Founded > 1950   SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1       SELECT COUNT(DISTINCT Province) FROM institution        SELECT count(DISTINCT Province) FROM institution
1       SELECT COUNT(DISTINCT Province) FROM institution        SELECT count(DISTINCT Province) FROM institution
1       SELECT * FROM Warehouses        SELECT * FROM warehouses
1       SELECT * FROM Warehouses        SELECT * FROM warehouses
1       SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'New York';   SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1       SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'   SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1       SELECT Contents FROM Boxes WHERE Value > 150    SELECT CONTENTS FROM boxes WHERE Value  >  150
1       SELECT Contents FROM Boxes WHERE Value > 150    SELECT CONTENTS FROM boxes WHERE Value  >  150
0       SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse      SELECT w.Code, AVG(b.Value) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code
0       SELECT Warehouses.Location, AVG(Boxes.Value) AS avg_1 FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Location      SELECT w.Code, AVG(b.Value) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code
1       SELECT AVG(Value) AS Average_Value, SUM(Value) AS Total_Value FROM Boxes        SELECT avg(value) ,  sum(value) FROM boxes
1       SELECT AVG(Value) AS Average_Value, SUM(Value) AS Total_Value FROM Boxes        SELECT avg(value) ,  sum(value) FROM boxes
1       SELECT AVG(Capacity) AS Average_Capacity, SUM(Capacity) AS Total_Capacity FROM Warehouses       SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1       SELECT AVG(Capacity) AS Average_Capacity, SUM(Capacity) AS Total_Capacity FROM Warehouses       SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1       SELECT Contents, AVG(Value) AS AverageValue, MAX(Value) AS MaximumValue FROM Boxes GROUP BY Contents    SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1       SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Maximum_Value FROM Boxes GROUP BY Contents  SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
0       SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1   SELECT t.contents FROM (SELECT contents, SUM(value) AS total_value FROM boxes GROUP BY contents) t WHERE t.total_value = (SELECT MAX(t2.total_value) FROM (SELECT SUM(value) AS total_value FROM boxes GROUP BY contents) t2)
0       SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes) SELECT DISTINCT contents FROM boxes WHERE value = (SELECT MAX(value) FROM boxes)
1       SELECT AVG(Value) FROM Boxes    SELECT avg(value) FROM boxes
1       SELECT AVG(Value) FROM Boxes    SELECT avg(value) FROM boxes
1       SELECT DISTINCT Contents FROM Boxes     SELECT DISTINCT CONTENTS FROM boxes
1       SELECT DISTINCT Contents FROM Boxes;    SELECT DISTINCT CONTENTS FROM boxes
1       SELECT COUNT(DISTINCT Contents) FROM Boxes      SELECT count(DISTINCT CONTENTS) FROM boxes
1       SELECT COUNT(DISTINCT Contents) FROM Boxes      SELECT count(DISTINCT CONTENTS) FROM boxes
1       SELECT DISTINCT Location FROM Warehouses        SELECT DISTINCT location FROM warehouses;
1       SELECT DISTINCT Location FROM Warehouses;       SELECT DISTINCT location FROM warehouses;
0       SELECT Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')        SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
0       SELECT Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location IN ('Chicago', 'New York')   SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1       SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1       SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
0       SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))   SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1       SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago') INTERSECT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')        SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
0       SELECT DISTINCT b.Contents FROM Boxes b WHERE NOT EXISTS (SELECT 1 FROM Warehouses w WHERE w.Code = b.Warehouse AND w.Location = 'New York')    SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
0       SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')    SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1       SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')  SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')
1       SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')  SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')
0       SELECT DISTINCT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))    SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
0       SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors')     SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
0       SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))     SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT warehouse FROM boxes WHERE contents = 'Scissors')
0       SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors')     SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT warehouse FROM boxes WHERE contents = 'Scissors')
1       SELECT Code, Contents FROM Boxes ORDER BY Value ASC     SELECT code ,  CONTENTS FROM boxes ORDER BY value
1       SELECT Code, Contents FROM Boxes ORDER BY Value ASC     SELECT code ,  CONTENTS FROM boxes ORDER BY value
0       SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1     SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)
0       SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1     SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)
1       SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)        SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1       SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)        SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1       SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC       SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
1       SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC;      SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
0       SELECT DISTINCT b1.Code FROM Boxes b1 WHERE b1.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks') SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
0       SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')      SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
1       SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Scissors')      SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
0       SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > ALL (SELECT Value FROM Boxes WHERE Contents = 'Scissors')        SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
0       SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Code = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)    SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = w.code) FROM warehouses w WHERE capacity = (SELECT MAX(capacity) FROM warehouses)
0       SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity = (SELECT MAX(Capacity) FROM Warehouses)      SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = w.code) FROM warehouses w WHERE capacity = (SELECT MAX(capacity) FROM warehouses)
1       SELECT W.Code, AVG(B.Value) AS avg_1 FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150   SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
0       SELECT W.Location, AVG(B.Value) AS avg_1 FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Code HAVING AVG(B.Value) > 150       SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1       SELECT Contents, COUNT(Code) AS number_of_boxes, SUM(Value) AS total_1 FROM Boxes GROUP BY Contents     SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1       SELECT Contents, COUNT(Code) AS number_of_boxes, SUM(Value) AS total_1 FROM Boxes GROUP BY Contents     SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1       SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location       SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1       SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location   SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1       SELECT SUM(Capacity) FROM Warehouses    SELECT sum(capacity) FROM warehouses
1       SELECT SUM(Capacity) FROM Warehouses    SELECT sum(capacity) FROM warehouses
0       SELECT W.Location, MAX(B.Value) AS MaxValue FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location  SELECT w.location, MAX(b.value) max_val FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.location
0       SELECT W.Location, MAX(B.Value) AS HighestValue FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Location      SELECT w.location, MAX(b.value) max_val FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.location
0       SELECT Warehouse, COUNT(Code) AS number_of_boxes FROM Boxes GROUP BY Warehouse  SELECT warehouses.code, COUNT(boxes.code) FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code
0       SELECT W.Location, COUNT(B.Code) AS number_of_boxes FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Code      SELECT warehouses.code, COUNT(boxes.code) AS box_total FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code
1       SELECT COUNT(DISTINCT Warehouses.Location) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Boxes.Contents = 'Rocks'       SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
1       SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'    SELECT COUNT(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks';
1       SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code        SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1       SELECT B.Code, W.Location FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code        SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
0       SELECT Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location = 'Chicago'  SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
0       SELECT Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago'       SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
0       SELECT Location, COUNT(*) AS box_count FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location   SELECT w.code, COUNT(b.code) FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code
0       SELECT Warehouses.Location, COUNT(Boxes.Code) AS box_count FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code     SELECT w.code, COUNT(b.code) as box_count FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code
0       SELECT Warehouses.Location, COUNT(DISTINCT Boxes.Contents) AS number_of_contents_types FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location     SELECT w2.code, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w2.code) FROM warehouses w2
0       SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse        SELECT w2.code, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w2.code) FROM warehouses w2
1       SELECT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING COUNT(B.Code) > W.Capacity  SELECT w.code FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity
1       SELECT w.Code FROM Warehouses w WHERE (SELECT COUNT(*) FROM Boxes b WHERE b.Warehouse = w.Code) > w.Capacity    SELECT w.code FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity
1       SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location != 'Chicago'   SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1       SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location != 'Chicago'        SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1       SELECT University_Name, City, State FROM university ORDER BY University_Name ASC        SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1       SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;       SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1       SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')     SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1       SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')     SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1       SELECT MAX(Enrollment) AS MaximumEnrollment, AVG(Enrollment) AS AverageEnrollment, MIN(Enrollment) AS MinimumEnrollment FROM university SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1       SELECT MAX(Enrollment) AS MaxEnrollment, AVG(Enrollment) AS AvgEnrollment, MIN(Enrollment) AS MinEnrollment FROM university;    SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1       SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)    SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)
1       SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)    select team_name from university where enrollment  >  (select avg(enrollment) from university)
1       SELECT DISTINCT Home_Conference FROM university;        SELECT DISTINCT home_conference FROM University
1       SELECT DISTINCT Home_Conference FROM university SELECT DISTINCT home_conference FROM University
1       SELECT Home_Conference, COUNT(*) AS NumberOfUniversities FROM university GROUP BY Home_Conference       SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
1       SELECT Home_Conference, COUNT(University_ID) AS Universities_Attended FROM university GROUP BY Home_Conference  SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
0       SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1      SELECT state FROM university GROUP BY state HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM university GROUP BY state))
0       SELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1      SELECT state FROM university GROUP BY state HAVING COUNT(university_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(university_id) AS cnt FROM university GROUP BY state))
1       SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000   SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
1       SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000   SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
0       SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1    WITH Enrollment_Sums AS (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM Enrollment_Sums WHERE total_enrollment = (SELECT MIN(total_enrollment) FROM Enrollment_Sums)
1       SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(total_enrollment) FROM (SELECT SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) T)    WITH Enrollment_Sums AS (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM Enrollment_Sums WHERE total_enrollment = (SELECT MIN(total_enrollment) FROM Enrollment_Sums)
1       SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC        SELECT major_name ,  major_code FROM Major ORDER BY major_code
1       SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code ASC        SELECT major_name ,  major_code FROM Major ORDER BY major_code
1       SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'       SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1       SELECT mr.Rank, m.Major_Name FROM major_ranking mr INNER JOIN major m ON mr.Major_ID = m.Major_ID INNER JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'   SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
0       SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'      SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.rank = 1 AND major.major_name = 'Accounting')
0       SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'      SELECT U.university_name, U.city, U.state FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking R INNER JOIN major M ON M.major_id = R.major_id WHERE R.university_id = U.university_id AND M.major_name = 'Accounting' AND R.rank = 1)
0       SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)     SELECT U.university_name FROM university AS U JOIN (SELECT university_id, COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id HAVING c = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id))) AS R ON U.university_id = R.university_id
0       SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)     SELECT U.university_name FROM university AS U JOIN (SELECT university_id, COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id HAVING c = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id))) AS R ON U.university_id = R.university_id
1       SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)      SELECT u.university_name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking mr WHERE mr.rank = 1 AND mr.university_id = u.university_id)
1       SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.University_ID = u.University_ID AND mr.Rank = 1)   SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)
0       SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name IN ('Accounting', 'Urban Education') GROUP BY u.University_ID HAVING COUNT(DISTINCT m.Major_Name) = 2       SELECT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' INTERSECT SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Urban Education')
1       SELECT u.University_Name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.University_ID = u.University_ID) AND EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Urban Education' AND mr.University_ID = u.University_ID)   SELECT university_name FROM university WHERE university_id IN (SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Accounting' INTERSECT SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Urban Education')
0       SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin' SELECT T1.University_Name, T2.Rank FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
0       SELECT u.University_Name, or.Rank FROM university u JOIN overall_ranking or ON u.University_ID = or.University_ID WHERE u.State = 'Wisconsin'   SELECT T1.University_Name, T2.Rank FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
0       SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking WHERE Research_point = (SELECT MAX(Research_point) FROM overall_ranking))       SELECT U.university_name FROM university U INNER JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.research_point = (SELECT MAX(research_point) FROM overall_ranking)
0       SELECT University_Name FROM university WHERE University_ID = (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1)   SELECT U.university_name FROM university U INNER JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.research_point = (SELECT MAX(research_point) FROM overall_ranking)
0       SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC  SELECT T1.University_Name FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_Point
0       SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC  SELECT T1.University_Name FROM university AS T1 LEFT JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_Point
0       SELECT University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3        SELECT university_name FROM university WHERE EXISTS (SELECT 1 FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.university_id = university.university_id AND major_name = 'Accounting' AND rank <= 3)
0       SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3      SELECT university_name FROM university WHERE EXISTS (SELECT 1 FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.university_id = university.university_id AND major_name = 'Accounting' AND rank <= 3)
0       SELECT SUM(u.Enrollment) FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5        SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0       SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)       SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0       SELECT u.University_Name, o.Citation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Reputation_point >= 3  SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 WHERE EXISTS ( SELECT 1 FROM ( SELECT T2.Reputation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3 ) T WHERE T.Reputation_point = T2.Reputation_point )
0       SELECT University_Name, Citation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point DESC LIMIT 3  SELECT T1.University_Name, T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 WHERE EXISTS ( SELECT 1 FROM ( SELECT T2.Reputation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3 ) T WHERE T.Reputation_point = T2.Reputation_point )
1       SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2     SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1       SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2     SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1       SELECT Title FROM Movies WHERE Rating IS NULL OR Rating = ''    SELECT title FROM movies WHERE rating IS NULL
1       SELECT Title FROM Movies WHERE Rating IS NULL OR Rating = ''    SELECT title FROM movies WHERE rating IS NULL
1       SELECT Title FROM Movies WHERE Rating = 'G'     SELECT title FROM movies WHERE rating  =  'G'
1       SELECT Title FROM Movies WHERE Rating = 'G'     SELECT title FROM movies WHERE rating  =  'G'
0       SELECT Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name = 'Odeon'   SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
0       SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon' SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
0       SELECT M.Title, MT.Name FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie        SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.code, T2.name
0       SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie     SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.code, T2.name
1       SELECT COUNT(*) FROM Movies WHERE Rating = 'G'  SELECT count(*) FROM movies WHERE rating  =  'G'
1       SELECT COUNT(*) FROM Movies WHERE Rating = 'G'; SELECT count(*) FROM movies WHERE rating  =  'G'
1       SELECT COUNT(DISTINCT Movie) FROM MovieTheaters SELECT COUNT(DISTINCT movie) FROM movietheaters
1       SELECT COUNT(DISTINCT Movie) FROM MovieTheaters SELECT COUNT(DISTINCT movie) FROM movietheaters
1       SELECT COUNT(DISTINCT Movie) FROM MovieTheaters SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1       SELECT COUNT(DISTINCT Movie) FROM MovieTheaters SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0       SELECT COUNT(DISTINCT Code) FROM MovieTheaters  SELECT count(DISTINCT name) FROM movietheaters
0       SELECT COUNT(*) FROM MovieTheaters      SELECT count(DISTINCT name) FROM movietheaters
1       SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'  SELECT rating FROM movies WHERE title LIKE '%Citizen%'
1       SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'  SELECT rating FROM movies WHERE title LIKE '%Citizen%'
0       SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))     SELECT DISTINCT mt.name FROM movietheaters AS mt JOIN movies AS m ON mt.movie = m.code WHERE m.rating IN ('G', 'PG')
0       SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating IN ('G', 'PG'))     SELECT DISTINCT mt.name FROM movietheaters AS mt JOIN movies AS m ON mt.movie = m.code WHERE m.rating IN ('G', 'PG')
0       SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')      SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')
0       SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')      SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')
0       SELECT m.Title FROM Movies m JOIN MovieTheaters mt1 ON m.Code = mt1.Movie JOIN MovieTheaters mt2 ON m.Code = mt2.Movie WHERE mt1.Name = 'Odeon' AND mt2.Name = 'Imperial'       SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1       SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name IN ('Odeon', 'Imperial') GROUP BY M.Code HAVING COUNT(DISTINCT MT.Name) = 2      SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1       SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')       SELECT title FROM movies WHERE NOT EXISTS (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name = 'Odeon')
1       SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')       SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')
1       SELECT Title FROM Movies ORDER BY Title ASC     SELECT title FROM movies ORDER BY title
1       SELECT Title FROM Movies ORDER BY Title ASC     SELECT title FROM movies ORDER BY title
1       SELECT Title FROM Movies ORDER BY Rating        SELECT title FROM movies ORDER BY rating
1       SELECT Title FROM Movies ORDER BY Rating        SELECT title FROM movies ORDER BY rating
0       SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1 SELECT name FROM movietheaters GROUP BY name HAVING COUNT(DISTINCT movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(DISTINCT movie) AS movie_count FROM movietheaters GROUP BY name) T)
0       SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code GROUP BY MT.Name ORDER BY COUNT(M.Code) DESC LIMIT 1    SELECT name FROM movietheaters GROUP BY name HAVING COUNT(DISTINCT movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(DISTINCT movie) AS movie_count FROM movietheaters GROUP BY name) T)
0       SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(MT.Name) DESC LIMIT 1   WITH CNT AS ( SELECT m.Title, COUNT(mt.Code) AS cnt FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code ) SELECT Title FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
0       SELECT M.Title FROM Movies M JOIN MovieTheaters MT ON M.Code = MT.Movie GROUP BY M.Title ORDER BY COUNT(MT.Name) DESC LIMIT 1   WITH CNT AS ( SELECT m.Title, COUNT(mt.Code) AS cnt FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code ) SELECT Title FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
1       SELECT Rating, COUNT(Code) AS num_movies FROM Movies GROUP BY Rating    SELECT count(*) ,  rating FROM movies GROUP BY rating
1       SELECT Rating, COUNT(*) AS movie_count FROM Movies GROUP BY Rating      SELECT count(*) ,  rating FROM movies GROUP BY rating
1       SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL    SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL
1       SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL    SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL
0       SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL  SELECT name FROM movietheaters GROUP BY name HAVING count(movie)  >=  1
0       SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL  SELECT name FROM movietheaters GROUP BY name HAVING count(movie)  >=  1
1       SELECT Name FROM MovieTheaters WHERE Movie IS NULL      SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = 0
1       SELECT Name FROM MovieTheaters WHERE Movie IS NULL      SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = 0
1       SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'       SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1       SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')      SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1       SELECT Title FROM Movies;       SELECT title FROM movies
1       SELECT Title FROM Movies;       SELECT title FROM movies
1       SELECT DISTINCT Rating FROM Movies      SELECT DISTINCT rating FROM movies
1       SELECT DISTINCT Rating FROM Movies      SELECT DISTINCT rating FROM movies
1       SELECT * FROM Movies WHERE Rating IS NULL       SELECT * FROM movies WHERE rating IS NULL
1       SELECT * FROM Movies WHERE Rating IS NULL       SELECT * FROM movies WHERE rating IS NULL
1       SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie IS NOT NULL)    SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)
1       SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)    SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)
0       SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient ORDER BY p.Weight DESC LIMIT 1      SELECT name FROM client WHERE accountnumber IN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package))
0       SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient ORDER BY p.Weight DESC LIMIT 1      SELECT name FROM client WHERE accountnumber IN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package))
1       SELECT SUM(p.Weight) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'       SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1       SELECT SUM(p.Weight) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'       SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1       SELECT Position FROM Employee WHERE Name = 'Amy Wong';  SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1       SELECT Position FROM Employee WHERE Name = 'Amy Wong'   SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1       SELECT Position, Salary FROM Employee WHERE Name = 'Turanga Leela'      SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1       SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'      SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1       SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'      SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
1       SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'      SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
0       SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Position = 'Physician') SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1       SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'     SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1       SELECT PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Leo Wong'       SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0       SELECT COUNT(*) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'        SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1       SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'        SELECT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'
1       SELECT Package.PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'        SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong";
0       SELECT * FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'   SELECT p.PackageNumber FROM Package AS p JOIN Client AS c1 ON p.Sender = c1.AccountNumber JOIN Client AS c2 ON p.Recipient = c2.AccountNumber WHERE c1.Name = 'Leo Wong' OR c2.Name = 'Leo Wong'
1       SELECT DISTINCT Package.PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'      SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1       SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong';     SELECT COUNT(*) FROM package JOIN client AS sender ON package.sender = sender.accountnumber JOIN client AS recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'
1       SELECT COUNT(*) FROM Package JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'       SELECT COUNT(*) FROM package JOIN client AS sender ON package.sender = sender.accountnumber JOIN client AS recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'
1       SELECT Package.Contents FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'     SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
1       SELECT Package.Contents FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'     SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
0       SELECT p.PackageNumber, p.Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ORDER BY p.Weight DESC LIMIT 1   WITH Weights AS ( SELECT p.PackageNumber, p.Weight FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ) SELECT * FROM Weights WHERE Weight = (SELECT MAX(Weight) FROM Weights)
0       SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1      WITH Weights AS ( SELECT p.PackageNumber, p.Weight FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ) SELECT * FROM Weights WHERE Weight = (SELECT MAX(Weight) FROM Weights)
0       SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3   SELECT PackageNumber, Weight FROM ( SELECT PackageNumber, Weight, RANK() OVER (ORDER BY Weight) AS rnk FROM Package ) t WHERE rnk <= 3
0       SELECT P.PackageNumber, P.Weight FROM Package P ORDER BY P.Weight ASC LIMIT 3   SELECT PackageNumber, Weight FROM ( SELECT PackageNumber, Weight, RANK() OVER (ORDER BY Weight) AS rnk FROM Package ) t WHERE rnk <= 3
0       SELECT Client.Name, COUNT(*) AS NumberOfPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY NumberOfPackages DESC LIMIT 1 WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MAX(cnt) FROM PackageCount)
0       SELECT Client.Name, COUNT(*) AS PackageCount FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY PackageCount DESC LIMIT 1 WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MAX(cnt) FROM PackageCount)
0       SELECT Client.Name, COUNT(Package.Recipient) AS NumberOfPackagesReceived FROM Client JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber ORDER BY COUNT(Package.Recipient) ASC LIMIT 1       WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MIN(cnt) FROM PackageCount)
0       SELECT Recipient, COUNT(*) AS total_packages_received FROM Package GROUP BY Recipient ORDER BY total_packages_received ASC LIMIT 1      WITH PackageCount AS ( SELECT c.Name, COUNT(p.PackageNumber) AS cnt FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.AccountNumber ) SELECT Name, cnt FROM PackageCount WHERE cnt = (SELECT MIN(cnt) FROM PackageCount)
1       SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber HAVING COUNT(Package.PackageNumber) > 1      SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(packagenumber) > 1)
1       SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber HAVING COUNT(Package.PackageNumber) > 1      SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1)
1       SELECT Coordinates FROM Planet WHERE Name = 'Mars'      SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1       SELECT Coordinates FROM Planet WHERE Name = 'Mars'      SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1       SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1       SELECT Name, Coordinates FROM Planet ORDER BY Name ASC; SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1       SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'  SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
0       SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'  SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
1       SELECT Date FROM Shipment;      SELECT Date FROM Shipment;
1       SELECT Date FROM Shipment       SELECT Date FROM Shipment;
1       SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'     SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1       SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'     SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1       SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'        SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1       SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'        SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1       SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'  SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
1       SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'        SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'
0       SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS TotalShipments FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name    SELECT name, (SELECT COUNT(*) FROM shipment WHERE shipment.planet = planet.planetid) AS total_shipments FROM planet
0       SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS shipment_count FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name    SELECT name, (SELECT COUNT(shipmentid) FROM shipment WHERE planet = planetid) AS Shipments FROM planet
0       SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet GROUP BY P.PlanetID ORDER BY COUNT(*) DESC LIMIT 1 WITH CNT AS ( SELECT p.Name, COUNT(ShipmentID) AS cnt FROM Planet p LEFT JOIN Shipment s ON s.Planet = p.PlanetID GROUP BY p.PlanetID ) SELECT Name FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
0       SELECT P.Name FROM Planet P WHERE P.PlanetID = (SELECT S.Planet FROM Shipment S GROUP BY S.Planet ORDER BY COUNT(*) DESC LIMIT 1)       WITH CNT AS ( SELECT p.Name, COUNT(ShipmentID) AS cnt FROM Planet p LEFT JOIN Shipment s ON s.Planet = p.PlanetID GROUP BY p.PlanetID ) SELECT Name FROM CNT WHERE cnt = (SELECT MAX(cnt) FROM CNT)
1       SELECT e.Name, COUNT(s.ShipmentID) AS number_of_shipments FROM Employee e JOIN Shipment s ON e.EmployeeID = s.Manager GROUP BY e.EmployeeID, e.Name     SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1       SELECT e.Name, COUNT(s.ShipmentID) AS number_of_shipments FROM Employee e JOIN Shipment s ON e.EmployeeID = s.Manager GROUP BY e.EmployeeID, e.Name     SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1       SELECT SUM(p.Weight) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars'        SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
1       SELECT SUM(p.Weight) FROM Package AS p JOIN Shipment AS s ON p.Shipment = s.ShipmentID JOIN Planet AS pl ON s.Planet = pl.PlanetID WHERE pl.Name = 'Mars'       SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0       SELECT Planet.Name, SUM(Package.Weight) AS Total_Weight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name      SELECT P.NAME AS PLANET_NAME, TOTAL_WEIGHT FROM PLANET P LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) S ON P.PLANETID = S.PLANET ORDER BY P.NAME
0       SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name       SELECT P.NAME AS PLANET_NAME, TOTAL_WEIGHT FROM PLANET P LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) S ON P.PLANETID = S.PLANET ORDER BY P.NAME
1       SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package PK ON S.ShipmentID = PK.Shipment GROUP BY P.PlanetID HAVING SUM(PK.Weight) > 30      SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1       SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30       SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1       SELECT PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'; SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0       SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Sender = Client.AccountNumber JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'    SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
1       SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan';        SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
0       SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan';    SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
1       SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30        SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1       SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30        SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1       SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))        SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')
1       SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))        SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')
1       SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))       SELECT name FROM employee WHERE employeeid IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Omega III'))
1       SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omega III'))       SELECT e.name FROM employee e WHERE EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON p.planetid = h.planet WHERE h.employee = e.employeeid AND p.name = 'Omega III')
1       SELECT Planet.Name FROM Planet JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet GROUP BY Planet.PlanetID, Planet.Name HAVING COUNT(DISTINCT Has_Clearance.Employee) = 1     SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1       SELECT Name FROM Planet WHERE PlanetID IN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(DISTINCT Employee) = 1)        SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1       SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000   SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1       SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000   SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1       SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000    SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
1       SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000    SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
0       SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))     SELECT COUNT(DISTINCT e.employeeid) FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')
0       SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))     SELECT COUNT(employeeid) FROM employee WHERE NOT EXISTS (SELECT 1 FROM has_clearance JOIN planet ON has_clearance.planet = planet.planetid WHERE has_clearance.employee = employee.employeeid AND planet.name = 'Mars')
1       SELECT COUNT(*) FROM game;      SELECT count(*) FROM game
1       SELECT COUNT(*) FROM game;      SELECT count(*) FROM game
1       SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC    SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1       SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC    SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1       SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'        SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1       SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo';       SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1       SELECT Platform_name, Market_district FROM platform     SELECT Platform_name ,  Market_district FROM platform
1       SELECT Platform_name, Market_district FROM platform     SELECT Platform_name ,  Market_district FROM platform
1       SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1 SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1       SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1 SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1       SELECT MAX(Rank_of_the_year) AS MaxRank, MIN(Rank_of_the_year) AS MinRank FROM player   SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1       SELECT MAX(Rank_of_the_year) AS MaxRank, MIN(Rank_of_the_year) AS MinRank FROM player   SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1       SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3; SELECT COUNT(DISTINCT player_id) FROM player WHERE rank_of_the_year < 3
1       SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3 SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1       SELECT Player_name FROM player ORDER BY Player_name ASC;        SELECT Player_name FROM player ORDER BY Player_name ASC
1       SELECT Player_name FROM player ORDER BY Player_name ASC SELECT Player_name FROM player ORDER BY Player_name ASC
1       SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC  SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
1       SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC  SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
0       SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World'      SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT player_id FROM game_player WHERE game_id IN (SELECT game_id FROM game WHERE title = 'Super Mario World'))
0       SELECT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World';     SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT game_player.player_id FROM game_player JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World');
1       SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'   SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1       SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn'   SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
0       SELECT AVG(g.Units_sold_Millions) FROM game AS g JOIN game_player AS gp ON g.Game_ID = gp.Game_ID JOIN player AS p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'     SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))
0       SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'     SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1       SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID;   SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1       SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID    SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1       SELECT Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA')       SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
0       SELECT DISTINCT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA') SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1       SELECT Franchise, COUNT(Game_ID) AS num_games FROM game GROUP BY Franchise      SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
1       SELECT Franchise, COUNT(*) AS number_of_games FROM game GROUP BY Franchise      SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
0       SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1    SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) = (SELECT MAX(game_count) FROM (SELECT COUNT(game_id) as game_count FROM game GROUP BY franchise))
1       SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM game GROUP BY Franchise) sub)      SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) = (SELECT MAX(game_count) FROM (SELECT COUNT(game_id) as game_count FROM game GROUP BY franchise))
1       SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2        SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1       SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2        SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1       SELECT p.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Game_ID IS NULL      SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
1       SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)       SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
0       SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn') GROUP BY g.Game_ID HAVING COUNT(DISTINCT p.College) = 2 SELECT title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Auburn') AND EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Oklahoma')
0       SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn')SELECT title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Auburn') AND EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Oklahoma')
1       SELECT DISTINCT Franchise FROM game     SELECT DISTINCT Franchise FROM game
1       SELECT DISTINCT Franchise FROM game;    SELECT DISTINCT Franchise FROM game
1       SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))        SELECT title FROM game WHERE game_id NOT IN (SELECT g.game_id FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1       SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))        SELECT title FROM game WHERE game_id NOT IN (SELECT g.game_id FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')
1       SELECT Name FROM press ORDER BY Year_Profits_billion DESC       SELECT name FROM press ORDER BY Year_Profits_billion DESC
1       SELECT Name FROM press ORDER BY Year_Profits_billion DESC       SELECT name FROM press ORDER BY Year_Profits_billion DESC
0       SELECT DISTINCT press.Name FROM press WHERE Month_Profits_billion > 1 OR Year_Profits_billion > 15      SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1       SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;    SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1       SELECT AVG(Year_Profits_billion) AS AverageAnnualProfit, MAX(Year_Profits_billion) AS MaxAnnualProfit FROM press        SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0       SELECT Press_ID, AVG(Year_Profits_billion) AS AverageYearlyProfit, MAX(Year_Profits_billion) AS MaximumYearlyProfit FROM press GROUP BY Press_ID        SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
1       SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)     SELECT press.name FROM press WHERE press.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)
1       SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)     SELECT p.name FROM press p WHERE p.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)
1       SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR p.Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)   SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1       SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press)   SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1       SELECT COUNT(*) FROM author WHERE age < 30      SELECT count(*) FROM author WHERE age  <  30
1       SELECT COUNT(*) FROM author WHERE Age < 30      SELECT count(*) FROM author WHERE age  <  30
1       SELECT Gender, AVG(Age) AS average_age FROM author GROUP BY Gender      SELECT avg(age) ,  gender FROM author GROUP BY gender
1       SELECT Gender, AVG(Age) AS average_age FROM author GROUP BY Gender      SELECT avg(age) ,  gender FROM author GROUP BY gender
1       SELECT Gender, COUNT(Author_ID) AS num_authors FROM author WHERE Age > 30 GROUP BY Gender       SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1       SELECT Gender, COUNT(Author_ID) AS Number_of_Authors FROM author WHERE Age > 30 GROUP BY Gender SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1       SELECT Title FROM book ORDER BY Release_date DESC       SELECT title FROM book ORDER BY release_date DESC
1       SELECT Title FROM book ORDER BY Release_date DESC       SELECT title FROM book ORDER BY release_date DESC
1       SELECT Book_Series, COUNT(Book_ID) AS number_of_books FROM book GROUP BY Book_Series    SELECT count(*) ,  book_series FROM book GROUP BY book_series
1       SELECT Book_Series, COUNT(Book_ID) AS books_count FROM book GROUP BY Book_Series        SELECT count(*) ,  book_series FROM book GROUP BY book_series
0       SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5  SELECT b.Title, b.release_date FROM book b WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 5) top WHERE top.sale_amount = b.sale_amount )
0       SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5  SELECT b.Title, b.release_date FROM book b WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 5) top WHERE top.sale_amount = b.sale_amount )
1       SELECT DISTINCT b1.Book_Series FROM book b1 WHERE b1.Sale_Amount > 1000 AND EXISTS (SELECT 1 FROM book b2 WHERE b2.Book_Series = b1.Book_Series AND b2.Sale_Amount < 500)       SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
1       SELECT DISTINCT b1.Book_Series FROM book b1 WHERE b1.Sale_Amount > 1000 AND EXISTS (SELECT 1 FROM book b2 WHERE b2.Book_Series = b1.Book_Series AND b2.Sale_Amount < 500)       SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
0       SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' AND a.Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'LT')       SELECT name FROM author WHERE EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'MM') AND EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'LT')
0       SELECT DISTINCT a.Name FROM author a JOIN book b1 ON a.Author_ID = b1.Author_ID JOIN book b2 ON a.Author_ID = b2.Author_ID WHERE b1.Book_Series = 'MM' AND b2.Book_Series = 'LT'        SELECT author.name FROM author WHERE author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'LT') AND author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'MM')
1       SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)        SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)
1       SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)     select name from author where author_id not in (select author_id from book)
1       SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1   SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1       SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID HAVING COUNT(Book_ID) > 1)    SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
0       SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3       SELECT b.Title, a.Name, p.Name FROM book b JOIN press p ON b.Press_ID = p.Press_ID JOIN author a ON b.Author_ID = a.Author_ID WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 3) top WHERE top.sale_amount = b.sale_amount )
0       SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3       SELECT b.Title, a.Name, p.Name FROM book b JOIN press p ON b.Press_ID = p.Press_ID JOIN author a ON b.Author_ID = a.Author_ID WHERE EXISTS ( SELECT 1 FROM (SELECT sale_amount FROM book ORDER BY sale_amount DESC LIMIT 3) top WHERE top.sale_amount = b.sale_amount )
0       SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sales FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name    SELECT p.Name, IFNULL( (SELECT SUM(b.sale_amount) FROM book b WHERE b.Press_ID = p.Press_ID), 0) FROM press p
0       SELECT p.Name, SUM(b.Sale_Amount) AS total_sale_amount FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name      SELECT p.Name, IFNULL( (SELECT SUM(b.sale_amount) FROM book b WHERE b.Press_ID = p.Press_ID), 0) FROM press p
0       SELECT press.Name, COUNT(book.Book_ID) FROM press JOIN book ON press.Press_ID = book.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name SELECT press.name, (SELECT COUNT(*) FROM book WHERE book.press_id = press.press_id AND book.sale_amount > 1000) AS num_books FROM press
0       SELECT p.Name, COUNT(b.Book_ID) FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name  SELECT press.name, (SELECT COUNT(*) FROM book WHERE book.press_id = press.press_id AND book.sale_amount > 1000) AS num_books FROM press
0       SELECT Name FROM author WHERE Author_ID = (SELECT Author_ID FROM book ORDER BY Sale_Amount DESC LIMIT 1)        WITH BestSellingBook AS ( SELECT MAX(Sale_amount) AS MaxSale FROM book ) SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID, BestSellingBook WHERE b.Sale_amount = BestSellingBook.MaxSale GROUP BY a.Author_ID, a.Name
0       SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1        WITH BestSellingBook AS ( SELECT MAX(Sale_amount) AS MaxSale FROM book ) SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID, BestSellingBook WHERE b.Sale_amount = BestSellingBook.MaxSale GROUP BY a.Author_ID, a.Name
0       SELECT author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC LIMIT 1       WITH BookCount AS ( SELECT author.Author_ID, COUNT(book.Book_ID) AS cnt FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ) SELECT author.name, author.gender FROM author JOIN BookCount ON author.Author_ID = BookCount.Author_ID WHERE BookCount.cnt = (SELECT MAX(cnt) FROM BookCount)
0       SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID ORDER BY COUNT(b.Book_ID) DESC LIMIT 1      WITH BookCount AS ( SELECT author.Author_ID, COUNT(book.Book_ID) AS cnt FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ) SELECT author.name, author.gender FROM author JOIN BookCount ON author.Author_ID = BookCount.Author_ID WHERE BookCount.cnt = (SELECT MAX(cnt) FROM BookCount)
1       SELECT A.name FROM author A WHERE A.Author_ID NOT IN (SELECT B.Author_ID FROM book B JOIN press P ON B.Press_ID = P.Press_ID WHERE P.Name = 'Accor')    SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b INNER JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor')
1       SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')     SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE press_id IN (SELECT press_id FROM press WHERE name = 'Accor'))
1       SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2     SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1       SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2     SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1       SELECT COUNT(*) FROM Authors;   SELECT count(*) FROM Authors
1       SELECT author_name FROM Authors SELECT author_name FROM Authors
1       SELECT author_name, other_details FROM Authors; SELECT author_name ,  other_details FROM Authors
1       SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik' SELECT other_details FROM Authors WHERE author_name  =  "Addison Denesik"
1       SELECT COUNT(*) FROM Documents  SELECT count(*) FROM Documents
1       SELECT author_name FROM Documents WHERE document_id = 4 SELECT author_name FROM Documents WHERE document_id  =  4
1       SELECT Authors.author_name FROM Documents JOIN Authors ON Documents.author_name = Authors.author_name WHERE Documents.document_name = 'Travel to Brazil'        SELECT author_name FROM Documents WHERE document_name  =  "Travel to Brazil"
1       SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke';       SELECT count(*) FROM Documents WHERE author_name  =  "Era Kerluke"
1       SELECT document_name, document_description FROM Documents       SELECT document_name ,  document_description FROM Documents
1       SELECT Documents.document_id, Documents.document_name FROM Documents WHERE Documents.author_name = 'Bianka Cummings'    SELECT document_id ,  document_name FROM Documents WHERE author_name  =  "Bianka Cummings"
0       SELECT author_name, other_details FROM Authors WHERE author_name = (SELECT author_name FROM Documents WHERE document_name = 'Travel to China')  SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  "Travel to China"
0       SELECT author_name, COUNT(document_id) AS number_of_documents FROM Documents GROUP BY author_name       SELECT a.author_name, (SELECT COUNT(*) FROM Documents WHERE author_name = a.author_name) FROM Authors a GROUP BY a.author_name
0       SELECT author_name FROM Authors WHERE author_name = (SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1)     WITH DocCount AS ( SELECT a.author_name, (SELECT COUNT(*) FROM Documents WHERE author_name = a.author_name) AS cnt FROM Authors a GROUP BY a.author_name ) SELECT author_name FROM DocCount WHERE cnt = (SELECT MAX(cnt) FROM DocCount)
1       SELECT author_name FROM Authors WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) >= 2)    SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2
1       SELECT COUNT(*) FROM Business_Processes;        SELECT count(*) FROM Business_processes
1       SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9  SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9
1       SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)    SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)
1       SELECT COUNT(*) FROM Process_Outcomes   SELECT count(*) FROM Process_outcomes
1       SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes  SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes
1       SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working' SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  "working"
1       SELECT COUNT(DISTINCT process_status_code) FROM Process_Status  SELECT count(*) FROM Process_status
1       SELECT process_status_code, process_status_description FROM Process_Status;     SELECT process_status_code ,  process_status_description FROM Process_status
1       SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'  SELECT process_status_description FROM Process_status WHERE process_status_code  =  "ct"
1       SELECT COUNT(*) FROM Staff;     SELECT count(*) FROM Staff
1       SELECT staff_id, staff_details FROM Staff;      SELECT staff_id ,  staff_details FROM Staff
1       SELECT staff_details FROM Staff WHERE staff_id = 100;   SELECT staff_details FROM Staff WHERE staff_id  =  100
1       SELECT COUNT(DISTINCT staff_role_code) FROM Ref_Staff_Roles     SELECT count(*) FROM Ref_staff_roles
1       SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;    SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles
1       SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR' SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  "HR"
1       SELECT COUNT(DISTINCT document_id) FROM Documents_Processes     SELECT count(DISTINCT document_id) FROM Documents_processes
0       SELECT process_id FROM Documents_Processes      SELECT DISTINCT process_id FROM Documents_processes
1       SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)        SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes
1       SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)  SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes
1       SELECT process_outcome_description, process_status_description FROM Process_Outcomes JOIN Documents_Processes ON Process_Outcomes.process_outcome_code = Documents_Processes.process_outcome_code JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code WHERE document_id = 0     SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0
0       SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents WHERE document_name = 'Travel to Brazil')     SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  "Travel to Brazil"
1       SELECT process_id, COUNT(document_id) AS number_of_documents FROM Documents_Processes GROUP BY process_id       SELECT p.process_id, COUNT(d.document_id) FROM business_processes AS p LEFT JOIN documents_processes AS d ON p.process_id = d.process_id GROUP BY p.process_id
1       SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;       SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9
0       SELECT staff_id, COUNT(*) AS process_count FROM Staff_in_Processes GROUP BY staff_id    SELECT staff.staff_id, COUNT(documents_processes.process_id) AS document_processes_count FROM staff LEFT JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id LEFT JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY staff.staff_id
0       SELECT staff_role_code, COUNT(*) AS num_document_processes FROM Staff_in_Processes GROUP BY staff_role_code     SELECT staff_role_code, COUNT(*) FROM ( SELECT DISTINCT staff_role_code, document_id, process_id FROM Staff_in_Processes ) t GROUP BY staff_role_code
1       SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3;      SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3
1       SELECT COUNT(*) FROM Agencies;  SELECT count(*) FROM Agencies
1       SELECT COUNT(*) FROM Agencies;  SELECT count(*) FROM Agencies
1       SELECT agency_id, agency_details FROM Agencies  SELECT agency_id ,  agency_details FROM Agencies
1       SELECT agency_id, agency_details FROM Agencies; SELECT agency_id ,  agency_details FROM Agencies
1       SELECT COUNT(*) FROM Clients    SELECT count(*) FROM Clients
1       SELECT COUNT(*) FROM Clients;   SELECT count(*) FROM Clients
1       SELECT client_id, client_details FROM Clients   SELECT client_id ,  client_details FROM Clients
1       SELECT client_id, client_details FROM Clients;  SELECT client_id ,  client_details FROM Clients
1       SELECT Agencies.agency_id, COUNT(Clients.client_id) AS client_count FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id       SELECT agency_id, (SELECT COUNT(*) FROM clients WHERE clients.agency_id = agencies.agency_id) AS num_clients FROM agencies
0       SELECT agency_id, COUNT(client_id) AS num_clients FROM Clients GROUP BY agency_id       SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM agencies a LEFT JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id
0       SELECT agency_id, agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Clients.client_id) DESC LIMIT 1        WITH ClientCount AS ( SELECT a.agency_id, COUNT(c.agency_id) AS cnt FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ) SELECT a.agency_id, a.agency_details FROM Agencies a JOIN ClientCount c ON a.agency_id = c.agency_id WHERE c.cnt = (SELECT MAX(cnt) FROM ClientCount)
0       SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1)      WITH ClientCount AS ( SELECT a.agency_id, COUNT(c.agency_id) AS cnt FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ) SELECT a.agency_id, a.agency_details FROM Agencies a JOIN ClientCount c ON a.agency_id = c.agency_id WHERE c.cnt = (SELECT MAX(cnt) FROM ClientCount)
0       SELECT agency_id, agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id, Agencies.agency_details HAVING COUNT(Clients.client_id) >= 2 SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1       SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) >= 2        SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1       SELECT agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE client_details LIKE '%Mac%'    SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1       SELECT A.agency_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id WHERE C.client_details LIKE '%Mac%' SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1       SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id   SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1       SELECT client_details, agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id      SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1       SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code        SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1       SELECT sic_code, COUNT(client_id) AS num_clients FROM Clients GROUP BY sic_code SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1       SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'    SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1       SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad';   SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1       SELECT DISTINCT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id        SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id
1       SELECT DISTINCT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id;       SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id
1       SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)   SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1       SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)   SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1       SELECT COUNT(*) FROM Invoices;  SELECT count(*) FROM Invoices
1       SELECT COUNT(*) FROM Invoices;  SELECT count(*) FROM Invoices
1       SELECT invoice_id, invoice_status, invoice_details FROM Invoices        SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1       SELECT invoice_id, invoice_status, invoice_details FROM Invoices        SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1       SELECT Clients.client_id, COUNT(Invoices.invoice_id) AS number_of_invoices FROM Clients LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id SELECT c.client_id, IFNULL(COUNT(i.invoice_id), 0) as total_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id
0       SELECT client_id, COUNT(invoice_id) AS invoice_count FROM Invoices GROUP BY client_id   SELECT c.client_id, COUNT(i.invoice_id) as total_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id
0       SELECT client_id, client_details FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id ORDER BY COUNT(Invoices.invoice_id) DESC LIMIT 1       WITH InvoiceCount AS ( SELECT c.client_id, COUNT(i.client_id) AS cnt FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ) SELECT c.client_id, c.client_details FROM Clients c JOIN InvoiceCount i ON c.client_id = i.client_id WHERE i.cnt = (SELECT MAX(cnt) FROM InvoiceCount)
0       SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY COUNT(i.invoice_id) DESC LIMIT 1 WITH InvoiceCount AS ( SELECT c.client_id, COUNT(i.client_id) AS cnt FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ) SELECT c.client_id, c.client_details FROM Clients c JOIN InvoiceCount i ON c.client_id = i.client_id WHERE i.cnt = (SELECT MAX(cnt) FROM InvoiceCount)
1       SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2 SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1       SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2 SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1       SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status  SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1       SELECT invoice_status, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY invoice_status  SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1       SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_id) = (SELECT MAX(count) FROM (SELECT COUNT(invoice_id) AS count FROM Invoices GROUP BY invoice_status))       SELECT invoice_status FROM invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(Count) FROM (SELECT COUNT(invoice_status) Count FROM invoices GROUP BY invoice_status) Temp)
0       SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1      WITH cnt AS ( SELECT invoice_status, COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status ) SELECT invoice_status FROM cnt WHERE cnt = (SELECT MAX(cnt) FROM cnt)
1       SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id       SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1       SELECT i.invoice_status, i.invoice_details, i.client_id, c.client_details, c.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id       SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1       SELECT meeting_type, other_details FROM Meetings;       SELECT meeting_type ,  other_details FROM meetings
1       SELECT meeting_type, other_details FROM Meetings;       SELECT meeting_type ,  other_details FROM meetings
1       SELECT meeting_outcome, purpose_of_meeting FROM Meetings        SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1       SELECT meeting_outcome, purpose_of_meeting FROM Meetings;       SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1       SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE invoice_status = 'Working'    SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1       SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE invoice_status = 'Working'    SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1       SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL    SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1       SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)       SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1       SELECT COUNT(*) FROM Payments;  SELECT count(*) FROM Payments
1       SELECT COUNT(*) FROM Payments;  SELECT count(*) FROM Payments
1       SELECT payment_id, invoice_id, payment_details FROM Payments;   SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
1       SELECT payment_id, invoice_id, payment_details FROM Payments    SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
0       SELECT invoice_id, invoice_status FROM Invoices SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
0       SELECT DISTINCT invoice_id, invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id;    SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1       SELECT invoices.invoice_id, COUNT(payments.payment_id) AS number_of_payments FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id SELECT invoices.invoice_id, COUNT(payments.payment_id) AS payment_count FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id
0       SELECT invoice_id, COUNT(payment_id) AS number_of_payments FROM Payments GROUP BY invoice_id    SELECT i.invoice_id, COUNT(p.payment_id) AS payment_count FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id
0       SELECT invoice_id, invoice_status, invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ORDER BY COUNT(p.payment_id) DESC LIMIT 1       WITH invoice_payments AS ( SELECT i.invoice_id, COUNT(p.invoice_id) AS total_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN invoice_payments ON i.invoice_id = invoice_payments.invoice_id WHERE invoice_payments.total_payments = ( SELECT MAX(total_payments) FROM invoice_payments )
0       SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)WITH invoice_payments AS ( SELECT i.invoice_id, COUNT(p.invoice_id) AS total_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id ) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN invoice_payments ON i.invoice_id = invoice_payments.invoice_id WHERE invoice_payments.total_payments = ( SELECT MAX(total_payments) FROM invoice_payments )
1       SELECT COUNT(*) FROM Staff;     SELECT count(*) FROM Staff
1       SELECT COUNT(*) FROM Staff;     SELECT count(*) FROM Staff
0       SELECT agency_id, COUNT(staff_id) AS num_staff FROM Staff GROUP BY agency_id    SELECT a.agency_id, COUNT(s.staff_id) FROM agencies a LEFT JOIN staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id
0       SELECT agency_id, COUNT(staff_id) AS number_of_staff FROM Staff GROUP BY agency_id      SELECT a.agency_id, COUNT(s.staff_id) AS staff_count FROM agencies AS a LEFT JOIN staff AS s ON a.agency_id = s.agency_id GROUP BY a.agency_id
0       SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id ORDER BY COUNT(s.staff_id) DESC LIMIT 1     WITH StaffCount AS ( SELECT Agencies.agency_id, COUNT(Staff.agency_id) AS TotalStaff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ) SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN StaffCount ON Agencies.agency_id = StaffCount.agency_id WHERE StaffCount.TotalStaff = ( SELECT MAX(TotalStaff) FROM StaffCount )
0       SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1     WITH StaffCount AS ( SELECT Agencies.agency_id, COUNT(Staff.agency_id) AS TotalStaff FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id ) SELECT Agencies.agency_id, Agencies.agency_details FROM Agencies JOIN StaffCount ON Agencies.agency_id = StaffCount.agency_id WHERE StaffCount.TotalStaff = ( SELECT MAX(TotalStaff) FROM StaffCount )
1       SELECT meeting_outcome, COUNT(meeting_id) FROM Meetings GROUP BY meeting_outcome        SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1       SELECT meeting_outcome, COUNT(meeting_id) AS num_meetings FROM Meetings GROUP BY meeting_outcome        SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
0       SELECT client_id, COUNT(meeting_id) AS number_of_meetings FROM Meetings GROUP BY client_id      SELECT cl.client_id, (SELECT COUNT(*) FROM meetings mt WHERE mt.client_id = cl.client_id) AS meetings_sum FROM clients cl
0       SELECT client_id, COUNT(meeting_id) AS meeting_count FROM Meetings GROUP BY client_id   SELECT c.client_id, COUNT(m.meeting_id) FROM clients c LEFT JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id
1       SELECT meeting_type, client_id, COUNT(meeting_id) AS NumberOfMeetings FROM Meetings GROUP BY client_id, meeting_type    SELECT client_id, meeting_type, COUNT(meeting_id) AS meeting_count FROM meetings GROUP BY client_id, meeting_type
1       SELECT meeting_type, COUNT(meeting_id) AS number_of_meetings FROM Meetings GROUP BY meeting_type        SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1       SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id      SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1       SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id    SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1       SELECT m.meeting_id, COUNT(s.staff_id) AS staff_count FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id        SELECT m.meeting_id, COUNT(si.staff_id) AS TotalStaff FROM meetings m LEFT JOIN staff_in_meetings si ON m.meeting_id = si.meeting_id GROUP BY m.meeting_id
0       SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id      SELECT m.meeting_id, COUNT(si.staff_id) AS TotalStaff FROM meetings m LEFT JOIN staff_in_meetings si ON m.meeting_id = si.meeting_id GROUP BY m.meeting_id
1       SELECT S.staff_id, COUNT(*) AS meetings_attended FROM Staff_in_Meetings S GROUP BY S.staff_id HAVING COUNT(*) = ( SELECT MIN(meeting_count) FROM ( SELECT staff_id, COUNT(*) AS meeting_count FROM Staff_in_Meetings GROUP BY staff_id ) AS SubQuery )  SELECT s.staff_id, COUNT(*) AS num_meetings FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING num_meetings = (SELECT MIN(total_meetings) FROM (SELECT COUNT(*) AS total_meetings FROM staff_in_meetings GROUP BY staff_id))
1       SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(MeetingCount) FROM (SELECT COUNT(meeting_id) AS MeetingCount FROM Staff_in_Meetings GROUP BY staff_id) AS Temp) AND COUNT(meeting_id) > 0       SELECT s.staff_id FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING COUNT(*) = (SELECT MIN(total_meetings) FROM (SELECT COUNT(*) AS total_meetings FROM staff_in_meetings GROUP BY staff_id))
1       SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings  SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1       SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings  SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1       SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)       SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1       SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)       SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1       SELECT DISTINCT c.client_id, c.client_details FROM Clients c LEFT JOIN Meetings m ON c.client_id = m.client_id LEFT JOIN Invoices i ON c.client_id = i.client_id WHERE m.client_id IS NOT NULL OR i.client_id IS NOT NULL       SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1       SELECT DISTINCT c.client_id, c.client_details FROM Clients c LEFT JOIN Meetings m ON c.client_id = m.client_id LEFT JOIN Invoices i ON c.client_id = i.client_id WHERE m.client_id IS NOT NULL OR i.client_id IS NOT NULL       SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1       SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) >= 1     SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id JOIN meetings ON staff_in_meetings.meeting_id = meetings.meeting_id WHERE staff.staff_details LIKE '%s%';
1       SELECT s.staff_id, s.staff_details FROM Staff s INNER JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sim.meeting_id) >= 1   SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id JOIN meetings ON staff_in_meetings.meeting_id = meetings.meeting_id WHERE staff.staff_details LIKE '%s%';
1       SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Meetings m ON c.client_id = m.client_id JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(DISTINCT m.meeting_id) = 1       SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1       SELECT Clients.client_id, Clients.sic_code, Clients.agency_id FROM Clients JOIN Meetings ON Clients.client_id = Meetings.client_id JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.client_id HAVING COUNT(DISTINCT Meetings.meeting_id) = 1    SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1       SELECT start_date_time, end_date_time, Clients.client_details, Staff.staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id  SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
1       SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id        SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
Accuracy: 64.555
