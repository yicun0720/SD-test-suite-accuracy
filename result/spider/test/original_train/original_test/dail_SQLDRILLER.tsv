1	SELECT COUNT(Club_ID) FROM club	SELECT count(*) FROM club
1	SELECT COUNT(Club_ID) FROM club	SELECT count(*) FROM club
1	SELECT `Name` FROM `club` ORDER BY `Name` ASC	SELECT Name FROM club ORDER BY Name ASC
1	SELECT Name FROM club ORDER BY LOWER(Name) ASC	SELECT Name FROM club ORDER BY Name ASC
1	SELECT Manager AS Club_Manager, Captain AS Club_Captain FROM club	SELECT Manager ,  Captain FROM club
1	SELECT club.Manager AS Manager, club.Captain AS Captain FROM club	SELECT Manager ,  Captain FROM club
1	SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')	SELECT Name FROM club WHERE Manufacturer != "Nike"
1	SELECT Name FROM club WHERE Manufacturer NOT IN ('Nike')	SELECT Name FROM club WHERE Manufacturer != "Nike"
1	SELECT Name FROM player ORDER BY player.Wins_count ASC	SELECT Name FROM player ORDER BY Wins_count ASC
1	SELECT Name FROM player ORDER BY player.Wins_count ASC	SELECT Name FROM player ORDER BY Wins_count ASC
0	SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)	SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
0	SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player)	SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
1	SELECT DISTINCT p.Country FROM player AS p WHERE p.Earnings > 1200000	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
0	SELECT Country FROM player WHERE Earnings > 1200000	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
1	SELECT p.Country FROM player AS p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC LIMIT 1	SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1
1	SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1 OFFSET 0	SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1
1	SELECT pl.Name, cl.Name FROM player AS pl JOIN club AS cl ON pl.Club_ID = cl.Club_ID	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
1	SELECT player.Name AS Player, club.Name AS Club FROM player JOIN club ON player.Club_ID = club.Club_ID	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
0	SELECT Name FROM club WHERE EXISTS (SELECT 1 FROM player WHERE Club_ID = club.Club_ID AND Wins_count > 2)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2
1	SELECT p.Name FROM player p LEFT JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
1	SELECT player.Name FROM player LEFT JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
0	SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings) ORDER BY AVG(Earnings) DESC)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
1	SELECT c.Manufacturer, COUNT(*) FROM club AS c GROUP BY c.Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1	SELECT c.Manufacturer, COUNT(c.Club_ID) FROM club c GROUP BY c.Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
0	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM club GROUP BY Manufacturer) sub)	SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS SubQuery ORDER BY Count DESC LIMIT 1	SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	SELECT Manufacturer FROM (SELECT Manufacturer, COUNT(*) AS NumClubs FROM club GROUP BY Manufacturer) AS subquery WHERE NumClubs > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	SELECT p.Country FROM player AS p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT Country FROM player GROUP BY Country HAVING COUNT(DISTINCT Player_ID) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p WHERE p.Club_ID IS NOT NULL)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
1	SELECT Name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE player.Club_ID = club.Club_ID)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
1	SELECT p.Country FROM player p WHERE p.Earnings > 1400000 INTERSECT SELECT p.Country FROM player p WHERE p.Earnings < 1100000	SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1	SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1400000 INTERSECT SELECT DISTINCT p.Country FROM player p WHERE p.Earnings < 1100000	SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1	SELECT COUNT(DISTINCT player.Country) FROM player	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT C.customer_id, C.customer_first_name, C.customer_last_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id GROUP BY O.customer_id HAVING COUNT(*) > 2) AND EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id GROUP BY O.customer_id HAVING COUNT(OI.order_item_id) >= 3)	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 2 AND SUM((SELECT COUNT(*) FROM Order_Items WHERE order_id = o.order_id)) >= 3	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT a.order_id, a.order_status_code, COUNT(b.product_id) FROM Orders a, Order_Items b WHERE a.order_id = b.order_id GROUP BY a.order_id, a.order_status_code	SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
0	SELECT O.order_id, O.order_status_code, COUNT(OI.order_item_id) AS NumberOfProducts FROM Orders O LEFT JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY O.order_id, O.order_status_code	SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
1	SELECT O.date_order_placed FROM Orders O WHERE O.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION SELECT MIN(date_order_placed) FROM Orders	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
0	SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) > 1) UNION ALL SELECT MIN(date_order_placed) FROM Orders	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
0	SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o WHERE o.customer_id IS NOT NULL)	SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id
0	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders)	SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id
1	SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 1)	SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2
0	SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2) AS sub ON p.product_id = sub.product_id WHERE sub.product_id IS NOT NULL	select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2
1	SELECT o.order_id, o.date_order_placed FROM Orders o INNER JOIN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) >= 2) as sub ON o.order_id = sub.order_id	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0	SELECT o.order_id, o.date_order_placed FROM Orders o WHERE o.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0	SELECT p.product_id, p.product_name, p.product_price FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Order_Items GROUP BY product_id) as subquery))	SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1
0	SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price HAVING COUNT(oi.order_item_id) = (SELECT MAX(count) FROM (SELECT COUNT(order_item_id) as count FROM Order_Items GROUP BY product_id) as counts)	SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1
1	SELECT O.order_id, SUM(P.product_price) AS total_price FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY total_price ASC LIMIT 1	SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1
1	SELECT order_id, MIN(total_cost) FROM (SELECT Orders.order_id, SUM(Products.product_price) AS total_cost FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id) AS CostTable	select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1
0	SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS counts)	SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1
0	SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Customer_Payment_Methods GROUP BY payment_method_code))	SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1
0	SELECT Customers.gender_code, COUNT(Products.product_id) FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id LEFT JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code
0	SELECT C.gender_code, COUNT(DISTINCT P.product_id) FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id LEFT JOIN Order_Items OI ON O.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id GROUP BY C.gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code
1	SELECT gender_code, COUNT(*) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code
0	SELECT Customers.gender_code, COUNT(Orders.order_id) FROM Customers LEFT OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY Customers.gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code
1	SELECT Customers.customer_first_name AS FirstName, Customers.customer_middle_initial AS MiddleInitial, Customers.customer_last_name AS LastName, Customer_Payment_Methods.payment_method_code AS PaymentMethod FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id	SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
1	SELECT customer_first_name AS `First Name`, customer_middle_initial AS `Middle Initial`, customer_last_name AS `Last Name`, payment_method_code AS `Payment Method` FROM Customers JOIN Customer_Payment_Methods USING(customer_id)	SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
1	SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices JOIN Shipments USING (invoice_number)	SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number
1	SELECT Invoices.invoice_status_code, Invoices.invoice_date, Shipments.shipment_date FROM Invoices, Shipments WHERE Invoices.invoice_number = Shipments.invoice_number	SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number
0	SELECT product_name, shipment_date FROM Products, Order_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_id = Shipments.order_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT p.product_name, s.shipment_date FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id JOIN Shipments AS s ON oi.order_id = s.order_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT order_item_status_code, shipment_tracking_number FROM Shipments JOIN Order_Items ON Shipments.order_id = Order_Items.order_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0	SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipments s ON oi.order_id = s.order_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0	SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Shipments))	SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT product_name, product_color FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Shipments))	SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
1	SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
1	SELECT DISTINCT P.product_name, P.product_price, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.gender_code = 'Female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
1	SELECT I.invoice_status_code FROM Invoices I WHERE I.invoice_number NOT IN (SELECT invoice_number FROM Shipments)	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
1	SELECT i.invoice_status_code FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_id IS NULL	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
1	SELECT O.order_id, O.date_order_placed AS date, SUM(P.product_price) AS total_cost FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id, O.date_order_placed	select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id
1	SELECT order_id, date_order_placed, SUM(product_price) AS total_paid FROM Orders JOIN Order_Items USING(order_id) JOIN Products USING(product_id) GROUP BY order_id, date_order_placed	SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id
1	SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS unique_customers	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM Orders) AS unique_customers	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) AS unique_payment_methods	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods) AS unique_payment_methods	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT C.login_name, C.login_password FROM Customers C WHERE C.phone_number LIKE '+12%'	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%' AND product_size IS NOT NULL	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(p.product_price) FROM Products p)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT COUNT(product_id) FROM Products WHERE NOT EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Products p WHERE p.product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT COUNT(DISTINCT customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT o.order_status_code, o.date_order_placed FROM Orders o	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT o.order_status_code, o.date_order_placed FROM Orders o	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE c.country = 'USA'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
1	SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
1	SELECT C.customer_first_name, P.product_name FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id	SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
1	SELECT customer_first_name AS Buyer, product_name AS Product FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id	SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
0	SELECT COUNT(*) FROM (SELECT order_item_id FROM Shipment_Items GROUP BY order_item_id) AS ShippedItems	SELECT count(*) FROM Shipment_Items
0	SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi INNER JOIN Shipments s ON oi.order_id = s.order_id;	SELECT count(*) FROM Shipment_Items
1	SELECT AVG(product_price) FROM Products WHERE product_id IS NOT NULL	SELECT avg(product_price) FROM Products
1	SELECT AVG(product_price) AS AveragePrice FROM Products	SELECT avg(product_price) FROM Products
1	SELECT AVG(product_price) FROM Products INNER JOIN (SELECT product_id FROM Order_Items) AS OrderedProducts ON Products.product_id = OrderedProducts.product_id	SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
1	SELECT AVG(p.product_price) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id	SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
1	SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) as cnt FROM Customers GROUP BY gender_code ORDER BY cnt ASC) as sub LIMIT 1)	SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )
0	SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1)	SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )
1	SELECT O.date_order_placed FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1	SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1	SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0	SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1
0	SELECT MIN(order_status_code) FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC	SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1
1	SELECT DISTINCT p.product_id, p.product_description FROM Products p INNER JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 3	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.order_item_id) > 3	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT I.invoice_date, I.invoice_number FROM Invoices I WHERE EXISTS (SELECT 1 FROM Shipments S WHERE S.invoice_number = I.invoice_number GROUP BY S.invoice_number HAVING COUNT(S.shipment_id) >= 2)	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT invoice_number, invoice_date FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL AND shipment_date IS NOT NULL	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT P.product_color, P.product_description, P.product_size FROM Products P WHERE P.product_price < (SELECT MAX(product_price) FROM Products)	SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )
1	SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products WHERE product_price > 0)	select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )
1	SELECT Name FROM director WHERE Age > (SELECT AVG(d.Age) FROM director d)	SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)
0	SELECT Name FROM director WHERE Age IN (SELECT MAX(Age) FROM director)	SELECT name FROM director ORDER BY age DESC LIMIT 1
0	SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%' ESCAPE ''	SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"
1	SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel WHERE Digital_terrestrial_channel <> ''	SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
1	SELECT program.Title FROM program ORDER BY program.Start_Year DESC	SELECT title FROM program ORDER BY start_year DESC
0	SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID, d.Name ORDER BY COUNT(*) DESC LIMIT 1	SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1
0	SELECT d.Name, d.Age FROM director d INNER JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID HAVING COUNT(p.Program_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Program_ID) AS Cnt FROM program GROUP BY Director_ID))	SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1
1	SELECT program.Title FROM program ORDER BY program.Start_Year DESC LIMIT 1	SELECT title FROM program ORDER BY start_year DESC LIMIT 1
1	SELECT c.Name, c.Internet FROM channel c INNER JOIN (SELECT Channel_ID FROM program GROUP BY Channel_ID HAVING COUNT(Program_ID) > 1) p ON c.Channel_ID = p.Channel_ID	SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1
0	SELECT COUNT(p.Program_ID), c.Name FROM channel c LEFT OUTER JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID	SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id
1	SELECT count(*) FROM channel c WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID)	SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)
0	SELECT d.Name FROM director d WHERE EXISTS (SELECT 1 FROM program p WHERE p.Director_ID = d.Director_ID AND p.Title = 'Dracula')	SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'
0	SELECT c.Name, c.Internet FROM channel c, director_admin d WHERE c.Channel_ID = d.Channel_ID GROUP BY c.Channel_ID HAVING COUNT(d.Director_ID) = (SELECT MAX(COUNTED) FROM (SELECT COUNT(Director_ID) AS COUNTED FROM director_admin GROUP BY Channel_ID) AS subquery)	SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1
1	SELECT Name FROM director WHERE Age BETWEEN 30 AND 60	SELECT name FROM director WHERE age BETWEEN 30 AND 60
0	SELECT c.Name FROM channel c WHERE EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age < 40) AND EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.Director_ID = d.Director_ID WHERE da.Channel_ID = c.Channel_ID AND d.Age > 60)	SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60
0	SELECT channel.Channel_ID, channel.Name FROM channel WHERE NOT EXISTS (SELECT 1 FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE director.Name = 'Hank Baskett' AND program.Channel_ID = channel.Channel_ID)	SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != "Hank Baskett"
1	SELECT COUNT(1) FROM radio	SELECT count(*) FROM radio
1	SELECT r.Transmitter FROM radio r ORDER BY r.ERP_kW ASC	select transmitter from radio order by erp_kw asc
1	SELECT tv_show.tv_show_name, tv_show.Original_Airdate FROM tv_show	SELECT tv_show_name ,  Original_Airdate FROM tv_show
1	SELECT Station_name FROM city_channel WHERE Affiliation NOT IN ('ABC')	SELECT Station_name FROM city_channel WHERE Affiliation != "ABC"
1	SELECT Transmitter FROM radio WHERE (ERP_kW > 150) OR (ERP_kW < 30)	SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30
1	SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1	SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
1	SELECT AVG(r.ERP_kW) FROM radio r	SELECT avg(ERP_kW) FROM radio
1	SELECT Affiliation, COUNT(*) AS CountOfChannels FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 0	SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation
0	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM city_channel GROUP BY Affiliation) tmp)	SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) > 3	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3
0	SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC, City ASC	SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC
1	SELECT Transmitter, City FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID	SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID
0	SELECT r.Transmitter, cc.Station_name FROM radio r CROSS JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID CROSS JOIN city_channel cc ON ccr.City_channel_ID = cc.ID ORDER BY r.ERP_kW DESC	SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC
0	SELECT r.Transmitter, COUNT(ccr.City_channel_ID) FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter	SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter
0	SELECT DISTINCT r.Transmitter FROM radio r WHERE NOT EXISTS (SELECT * FROM city_channel_radio ccr WHERE ccr.Radio_ID = r.Radio_ID)	SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)
1	SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC LIMIT 1	SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1
0	SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC, Vehicle_ID ASC LIMIT 1	SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1
1	SELECT Name FROM driver WHERE Citizenship LIKE 'United States'	SELECT name FROM driver WHERE citizenship  =  'United States'
1	SELECT driver.Name FROM driver WHERE driver.Citizenship = 'United States'	SELECT name FROM driver WHERE citizenship  =  'United States'
0	SELECT Driver_ID, COUNT(Vehicle_ID) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Vehicle_ID) AS Count FROM vehicle_driver GROUP BY Driver_ID) AS Counts)	SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Driver_ID, COUNT(*) FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM vehicle_driver GROUP BY Driver_ID) tmp)	SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1
1	SELECT MAX(v.Power), AVG(v.Power) FROM vehicle v WHERE v.Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1	SELECT MAX(Power) MaxPower, AVG(Power) AvgPower FROM vehicle WHERE Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1	SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1	SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1
0	SELECT v.Vehicle_ID FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Vehicle_ID) ASC LIMIT 1	SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1
1	SELECT Top_Speed AS Speed, Power AS HP FROM vehicle WHERE Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT Top_Speed AS Speed, Power AS HP FROM vehicle WHERE Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT v.Build_Year, v.Model, v.Builder FROM vehicle AS v	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d INNER JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID INNER JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(DISTINCT d.Driver_ID) FROM driver AS d WHERE d.Racing_Series = 'NASCAR'	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT COUNT(*) FROM driver d WHERE d.Racing_Series LIKE 'NASCAR'	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT AVG(Top_Speed) AS AverageTopSpeed FROM vehicle	SELECT avg(top_speed) FROM vehicle
1	SELECT AVG(vehicle.Top_Speed) FROM vehicle	SELECT avg(top_speed) FROM vehicle
1	SELECT DISTINCT Name FROM driver, vehicle_driver, vehicle WHERE driver.Driver_ID = vehicle_driver.Driver_ID AND vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Power > 5000	select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000
0	SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000))	SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000
1	SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150	SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1	SELECT v.Model FROM vehicle v WHERE v.Total_Production > 100 OR v.Top_Speed > 150	SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1	SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
1	SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
0	SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Driver_ID IS NULL	SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
0	SELECT Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver vd)	SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
1	SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'
1	SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) = 2 OR v.Builder = 'Ziyang'	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'
1	SELECT DISTINCT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID LEFT JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' OR (SELECT COUNT(*) FROM vehicle_driver vd2 WHERE vd2.Vehicle_ID = v.Vehicle_ID) > 2	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(vd.Driver_ID) > 2 OR MAX(vd.Driver_ID IN (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon')) = 1	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT Top_Speed FROM vehicle ORDER BY Top_Speed DESC LIMIT 1)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT count(*) FROM vehicle v WHERE v.Top_Speed = (SELECT max(Top_Speed) FROM vehicle v2)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT driver.Name FROM driver ORDER BY driver.Name ASC	SELECT name FROM driver ORDER BY name
1	SELECT driver.Name FROM driver ORDER BY driver.Name ASC	SELECT name FROM driver ORDER BY name
1	SELECT Racing_Series, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1	SELECT count(DISTINCT D.Driver_ID) AS DriverCount, D.Racing_Series AS Series FROM driver D GROUP BY D.Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1	SELECT driver.Name, driver.Citizenship FROM driver INNER JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID INNER JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1'	SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'
0	SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Model = 'DJ1')	SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'
1	SELECT COUNT(*) FROM driver d WHERE d.Driver_ID NOT IN (SELECT DISTINCT vd.Driver_ID FROM vehicle_driver vd)	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT count(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT count(*) FROM Exams	SELECT count(*) FROM Exams
1	SELECT count(*) FROM Exams	SELECT count(*) FROM Exams
1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;	select distinct subject_code from exams order by subject_code asc
1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC, Exam_ID ASC	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
1	SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code NOT IN ('Database')	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code <> 'Database'	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
0	SELECT Exam_Date FROM Exams WHERE INSTR(Subject_Code, 'data') > 0 ORDER BY Exam_Date DESC	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1	SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT Type_of_Question_Code, COUNT(1) FROM Questions GROUP BY Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT COUNT(*) FROM (SELECT DISTINCT Comments FROM Student_Answers) AS unique_comments	SELECT count(DISTINCT Comments) FROM Student_Answers
1	SELECT COUNT(DISTINCT Comments) FROM Student_Answers WHERE Comments <> ''	SELECT count(DISTINCT Comments) FROM Student_Answers
0	SELECT Student_Answer_Text, COUNT(1) FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(1) DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
1	SELECT SA.Student_Answer_Text FROM Student_Answers AS SA GROUP BY SA.Student_Answer_Text ORDER BY COUNT(SA.Student_Answer_Text) DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
1	SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers USING (Student_ID) ORDER BY Date_of_Answer DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1	SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1	SELECT Assessment FROM (SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery ORDER BY Count ASC LIMIT 1	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
1	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
1	SELECT S.First_Name FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Answers SA WHERE S.Student_ID = SA.Student_ID GROUP BY SA.Student_ID HAVING COUNT(*) >= 2)	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1	SELECT S.First_Name FROM Students S INNER JOIN Student_Answers SA ON S.Student_ID = SA.Student_ID GROUP BY S.Student_ID HAVING COUNT(DISTINCT SA.Student_Answer_ID) >= 2	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
0	WITH Ranked_Answers AS (SELECT Valid_Answer_Text, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Valid_Answers GROUP BY Valid_Answer_Text) SELECT Valid_Answer_Text FROM Ranked_Answers WHERE Rank = 1	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Valid_Answers GROUP BY Valid_Answer_Text) AS SubQuery)	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Last_Name FROM Students WHERE Gender_MFU NOT LIKE 'M'	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1	SELECT Last_Name FROM Students WHERE Gender_MFU NOT LIKE 'M'	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1	SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1	SELECT Gender_MFU, COUNT(Student_ID) AS Total FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1	SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1	SELECT Last_Name FROM Students WHERE (Gender_MFU = 'F' OR Gender_MFU = 'M')	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1	SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1	SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT Student_Answer_Text FROM (SELECT Student_Answer_Text, COUNT(DISTINCT Comments) AS NumComments FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text) AS Filtered WHERE NumComments > 1	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT q.Type_of_Question_Code FROM Questions AS q GROUP BY q.Type_of_Question_Code HAVING COUNT(*) > 2	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT ALL Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students	SELECT * FROM Students
1	SELECT ALL Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students	SELECT * FROM Students
1	SELECT COUNT(1) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT COUNT(1) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT `address_id`, `address_details` FROM `Addresses`	SELECT address_id ,  address_details FROM Addresses
1	SELECT address_id, address_details FROM Addresses	SELECT address_id ,  address_details FROM Addresses
1	SELECT COUNT(1) FROM Products	SELECT count(*) FROM Products
1	SELECT COUNT(DISTINCT product_id) FROM Products	SELECT count(*) FROM Products
1	SELECT product_id AS ProductID, product_type_code AS ProductTypeCode, product_name AS ProductName FROM Products	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT product_id AS ID, product_type_code AS Type_Code, product_name AS Name FROM Products	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT product_price FROM Products WHERE product_name = 'Monitor' AND product_price IS NOT NULL	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT min(product_price), avg(product_price), max(product_price) FROM Products	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT MIN(product_price) AS Minimum, AVG(product_price) AS Average, MAX(product_price) AS Maximum FROM Products	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT AVG(p.product_price) FROM Products p WHERE p.product_type_code = 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1	SELECT COUNT(product_id) FROM Products WHERE product_type_code LIKE 'Hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
0	SELECT product_name FROM Products GROUP BY product_name HAVING product_price > AVG(product_price)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
1	SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
0	SELECT P.product_name FROM Products P WHERE P.product_type_code = 'hardware' AND P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
1	SELECT P.product_name FROM Products P WHERE P.product_type_code = 'Hardware' AND P.product_price > (SELECT AVG(P2.product_price) FROM Products P2 WHERE P2.product_type_code = 'Hardware')	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
0	SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) AS rank FROM Products WHERE product_type_code = 'Clothes') WHERE rank = 1	SELECT product_name FROM Products WHERE product_type_code  =  "Clothes" ORDER BY product_price DESC LIMIT 1
0	SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')	SELECT product_name FROM Products WHERE product_type_code  =  "Clothes" ORDER BY product_price DESC LIMIT 1
1	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_id LIMIT 1	SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC LIMIT 1
1	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC, product_id ASC LIMIT 1	SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC LIMIT 1
1	SELECT product_name FROM Products ORDER BY product_price DESC, product_id ASC	SELECT product_name FROM Products ORDER BY product_price DESC
1	SELECT product_name FROM Products ORDER BY product_price DESC, product_id ASC	SELECT product_name FROM Products ORDER BY product_price DESC
1	SELECT product_name FROM Products WHERE product_type_code LIKE 'hardware' ORDER BY product_price ASC	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT product_type_code, COUNT(DISTINCT product_id) FROM Products GROUP BY product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) AS AveragePrice FROM Products GROUP BY product_type_code	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
1	SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
0	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Products GROUP BY product_type_code) AS counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT product_type_code FROM Products JOIN Order_Items USING (product_id) GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(customer_id) FROM Customers	SELECT count(*) FROM Customers
1	SELECT COUNT(DISTINCT customer_id) AS TotalUniqueCustomers FROM Customers	SELECT count(*) FROM Customers
1	SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name	SELECT customer_id ,  customer_name FROM Customers
1	SELECT customer_id, customer_name FROM Customers GROUP BY customer_id, customer_name	SELECT customer_id ,  customer_name FROM Customers
1	SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT customer_address AS Address, customer_phone AS Phone, customer_email AS Email FROM Customers WHERE customer_name = 'Jeromy'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
1	SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
0	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customers GROUP BY payment_method_code) AS counts)	SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
0	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Customers GROUP BY payment_method_code) sub)	SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
1	SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)	SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)
0	SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customers GROUP BY payment_method_code) AS subquery))	SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)
1	SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT DISTINCT payment_method_code FROM Customers	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT DISTINCT payment_method_code FROM Customers	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
0	SELECT product_id, product_type_code FROM Products ORDER BY UPPER(product_name)	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
1	SELECT P.product_type_code FROM Products AS P GROUP BY P.product_type_code ORDER BY COUNT(P.product_id) ASC LIMIT 1	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
0	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Products GROUP BY product_type_code) as counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
1	SELECT COUNT(*) AS TotalOrders FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT count(*) FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT Customer_Orders.order_id, Customer_Orders.order_date, Customer_Orders.order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy'	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1	SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name LIKE '%Jeromy%')	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
0	SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS OrderCount FROM Customers C LEFT JOIN Customer_Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id	SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
0	SELECT C.customer_name, C.customer_id, COUNT(O.order_id) AS OrderTotal FROM Customers AS C LEFT JOIN Customer_Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id	SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
0	SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id HAVING COUNT(Customer_Orders.order_id) = (SELECT MAX(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM Customer_Orders GROUP BY customer_id) AS counts)	SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
0	SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(order_id) AS cnt FROM Customer_Orders GROUP BY customer_id) t)	SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
1	SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1	SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
0	SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS subquery)	SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
0	SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customer_Orders GROUP BY order_status_code) tmp)	SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM Customers AS c WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders AS co WHERE co.customer_id = c.customer_id)	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1	SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
0	SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)	SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
0	SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)	SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
0	SELECT TOTAL(Order_Items.order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'	SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  "Monitor"
0	SELECT TOTAL(Order_Items.order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor'	SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(*) FROM (SELECT DISTINCT Customers.customer_id FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id WHERE Products.product_name = 'Monitor') AS unique_customers	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT CO.customer_id) FROM Customer_Orders CO LEFT JOIN Order_Items OI ON CO.order_id = OI.order_id LEFT JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Monitor'	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IS NOT NULL	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT COUNT(DISTINCT customer_id) FROM (SELECT customer_id FROM Customer_Orders) AS orders	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT C.customer_id FROM Customers C WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders CO WHERE C.customer_id = CO.customer_id)	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1	SELECT customer_id FROM Customers WHERE NOT EXISTS (SELECT customer_id FROM Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id)	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1	SELECT DISTINCT CO.order_date, CO.order_id FROM Customer_Orders CO, Order_Items OI WHERE CO.order_id = OI.order_id AND (OI.order_quantity > 6 OR (SELECT COUNT(*) FROM Order_Items OI2 WHERE OI2.order_id = CO.order_id) > 3)	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
0	SELECT CO.order_id, CO.order_date FROM Customer_Orders AS CO INNER JOIN Order_Items AS OI ON CO.order_id = OI.order_id GROUP BY CO.order_id, CO.order_date HAVING SUM(OI.order_quantity) > 6 OR COUNT(DISTINCT OI.order_item_id) > 3	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
1	SELECT COUNT(Building_ID) AS BuildingCount FROM building	SELECT count(*) FROM building
1	SELECT COUNT(Building_ID) AS TotalBuildings FROM building	SELECT count(*) FROM building
0	SELECT Name FROM building ORDER BY Number_of_Stories ASC, Region_ID ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
1	SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
0	SELECT Address FROM building ORDER BY Completed_Year DESC, Building_ID ASC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT b.Address FROM building b ORDER BY b.Completed_Year DESC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT MAX(Number_of_Stories) FROM building WHERE NOT (Completed_Year = 1980)	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year NOT LIKE 1980	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT AVG(r.Population) FROM region r	SELECT avg(Population) FROM region
1	SELECT AVG(region.Population) FROM region	SELECT avg(Population) FROM region
1	SELECT Name FROM region ORDER BY Name ASC	SELECT Name FROM region ORDER BY Name ASC
1	SELECT Name AS RegionName FROM region ORDER BY RegionName	SELECT Name FROM region ORDER BY Name ASC
1	SELECT r.Capital FROM region AS r WHERE r.Area > 10000	SELECT Capital FROM region WHERE Area  >  10000
1	SELECT r.Capital FROM region AS r WHERE r.Area > 10000	SELECT Capital FROM region WHERE Area  >  10000
0	SELECT r.Capital FROM region r WHERE r.Population IN (SELECT MAX(Population) FROM region r2)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0	SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region LIMIT 1)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
1	SELECT `Name` FROM `region` ORDER BY `Area` DESC LIMIT 5	SELECT Name FROM region ORDER BY Area DESC LIMIT 5
1	SELECT `Name` FROM `region` ORDER BY `Area` DESC LIMIT 5	SELECT Name FROM region ORDER BY Area DESC LIMIT 5
1	SELECT b.Name, r.Name FROM building AS b JOIN region AS r ON b.Region_ID = r.Region_ID	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT b.Name, r.Name FROM building AS b, region AS r WHERE b.Region_ID = r.Region_ID	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
1	SELECT region.Name FROM region INNER JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) > 1	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
0	SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM building GROUP BY Region_ID) AS SubQuery)	SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT r.Capital FROM region r, building b WHERE r.Region_ID = b.Region_ID GROUP BY r.Region_ID, r.Capital ORDER BY COUNT(b.Building_ID) DESC LIMIT 1	SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Address, Capital FROM building, region WHERE building.Region_ID = region.Region_ID	SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
0	SELECT building.Address, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID	SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID AND r.Name = 'Abruzzo'	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1	SELECT b.Number_of_Stories FROM building b INNER JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1	SELECT `Completed_Year`, COUNT(*) AS `Count` FROM `building` GROUP BY `Completed_Year`	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
1	SELECT Completed_Year AS Year, COUNT(*) AS Count FROM building GROUP BY Year	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
0	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS Counts)	SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS TempTable)	SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.Region_ID = region.Region_ID)	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT * FROM building b WHERE b.Region_ID = r.Region_ID)	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT DISTINCT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 INTERSECT SELECT DISTINCT b.Completed_Year FROM building b WHERE b.Number_of_Stories < 15	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT DISTINCT b1.Completed_Year FROM building b1 JOIN building b2 ON b1.Completed_Year = b2.Completed_Year WHERE b1.Number_of_Stories > 20 AND b2.Number_of_Stories < 15	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT DISTINCT building.Address FROM building	SELECT DISTINCT Address FROM building
1	SELECT DISTINCT Address FROM building WHERE Address <> ''	SELECT DISTINCT Address FROM building
1	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1	SELECT b.Completed_Year FROM building AS b ORDER BY b.Number_of_Stories DESC	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1	SELECT Channel_Details FROM Channels ORDER BY 1	select channel_details from channels order by channel_details
1	SELECT Channel_Details FROM Channels ORDER BY LENGTH(Channel_Details), Channel_Details	select channel_details from channels order by channel_details
1	SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL	SELECT count(*) FROM services
1	SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL	SELECT count(*) FROM services
0	SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) t)	SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1	SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch')	SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  "Hardy Kutch"
0	SELECT DISTINCT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch'	SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  "Hardy Kutch"
0	SELECT S.Service_Details FROM Services S, Customers_and_Services CS WHERE S.Service_ID = CS.Service_ID GROUP BY S.Service_ID HAVING COUNT(CS.Customer_ID) > 3	select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3
0	SELECT Service_Details FROM Services WHERE EXISTS (SELECT NULL FROM Customers_and_Services WHERE Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Service_ID HAVING COUNT(Customer_ID) > 3)	SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3
0	SELECT C.Customer_Details FROM Customers C, Customers_and_Services CS WHERE C.Customer_ID = CS.Customer_ID GROUP BY C.Customer_ID HAVING COUNT(CS.Service_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Service_ID) AS Count FROM Customers_and_Services GROUP BY Customer_ID))	SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1
0	SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(*) DESC LIMIT 1)	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
0	SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
0	SELECT Customer_Details FROM Customers WHERE Customer_ID = (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1)	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
1	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID NOT IN (SELECT CS.Customer_ID FROM Customers_and_Services CS)	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
1	SELECT Customer_Details FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID)	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
0	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID = (SELECT Service_ID FROM (SELECT Service_ID, COUNT(*) AS cnt FROM Customers_and_Services GROUP BY Service_ID ORDER BY cnt ASC LIMIT 1) AS LeastUsed))	select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)
0	SELECT DISTINCT Customer_Details FROM Customers WHERE EXISTS (SELECT * FROM Customers_and_Services WHERE Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1)	select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)
1	SELECT COUNT(*) FROM (SELECT DISTINCT Customers_and_Services_Details FROM Customers_and_Services)	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
0	SELECT COUNT(DISTINCT Customers_and_Services_ID) FROM Customers_and_Services	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
1	SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
1	SELECT Customer_Details FROM Customers WHERE INSTR(Customer_Details, 'Kutch') > 0	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0	SELECT DISTINCT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT S.Service_Details FROM Services S JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID WHERE CI.Status_Code = 'good'	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" OR t4.services_and_channels_details  =  "good"
0	SELECT DISTINCT S.Service_Details FROM Services S WHERE S.Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS, Customers C WHERE CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch') OR S.Service_ID IN (SELECT CI.Service_ID FROM Customer_Interactions CI WHERE CI.Status_Code = 'good')	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" OR t4.services_and_channels_details  =  "good"
0	SELECT DISTINCT S.Service_Details FROM Services S WHERE EXISTS (SELECT * FROM Customers_and_Services CS JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CS.Service_ID = S.Service_ID) AND EXISTS (SELECT * FROM Customer_Interactions CI WHERE CI.Status_Code = 'bad' AND CI.Service_ID = S.Service_ID)	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" AND t4.services_and_channels_details  =  "bad"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'bad' AND Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch'))	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" AND t4.services_and_channels_details  =  "bad"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))	select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  "15 ij"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))	SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  "15 ij"
0	SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI WHERE C.Customer_ID = CI.Customer_ID AND CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'	select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  "stuck" and services_and_channels_details  =  "bad"
0	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Status_Code = 'Stuck' AND Services_and_Channels_Details = 'bad')	SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  "Stuck" AND services_and_channels_details  =  "bad"
0	SELECT COUNT(*) FROM Integration_Platform WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Status_Code = 'Success')	SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1	SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'	SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1	SELECT C.Customer_Details FROM Customers C, Customer_Interactions CI, Integration_Platform IP WHERE C.Customer_ID = CI.Customer_ID AND CI.Customer_Interaction_ID = IP.Customer_Interaction_ID AND IP.Integration_Platform_Details LIKE '%failed%'	select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  "fail"
0	SELECT Customer_Details FROM Customers WHERE EXISTS (SELECT 1 FROM Customer_Interactions JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Customers.Customer_ID = Customer_Interactions.Customer_ID AND Integration_Platform_Details = 'Fail')	SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  "Fail"
0	SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT DISTINCT Service_ID FROM Customers_and_Services)	select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id
0	SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)	select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id
1	SELECT COUNT(Analytical_ID) AS Count, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
1	SELECT Analytical_Layer_Type_Code, COUNT(*) AS TotalUses FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
0	SELECT S.Service_Details FROM Services AS S, Customers_and_Services AS CS WHERE S.Service_ID = CS.Service_ID AND CS.Customers_and_Services_Details LIKE 'unsatisfied'	select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  "unsatisfied"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customers_and_Services_Details LIKE 'unsatisfied')	SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  "Unsatisfied"
1	SELECT COUNT(*) FROM Vehicles WHERE 'id' IS NOT NULL	SELECT count(*) FROM vehicles
1	SELECT COUNT(Vehicles.id) AS VehicleCount FROM Vehicles	SELECT count(*) FROM vehicles
1	SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT Vehicles.name FROM Vehicles ORDER BY Vehicles.Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT DISTINCT Type_of_powertrain FROM Vehicles AS v	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT DISTINCT t.Type_of_powertrain FROM Vehicles AS t	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 UNION ALL SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2014	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	SELECT V.name, V.Type_of_powertrain, V.Annual_fuel_cost FROM Vehicles AS V WHERE V.Model_year IN (2013, 2014)	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	WITH Year2014 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014), Year2013 AS (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013) SELECT Type_of_powertrain FROM Year2014 INTERSECT SELECT Type_of_powertrain FROM Year2013	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
1	SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
0	SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Vehicles GROUP BY Type_of_powertrain))	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1
0	SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Vehicles GROUP BY Type_of_powertrain) as counts)	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1
1	SELECT MIN(Annual_fuel_cost) AS "Minimum Annual Fuel Cost", MAX(Annual_fuel_cost) AS "Maximum Annual Fuel Cost", AVG(Annual_fuel_cost) AS "Average Annual Fuel Cost" FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT V.name, V.Model_year FROM Vehicles V WHERE V.City_fuel_economy_rate <= V.Highway_fuel_economy_rate	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS AverageAnnualFuelCost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Avg_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Vehicles.id) >= 2	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT `name`, `age`, `membership_credit` FROM `Customers`	SELECT name ,  age ,  membership_credit FROM customers
1	SELECT `name`, `age`, `membership_credit` FROM `Customers`	SELECT name ,  age ,  membership_credit FROM customers
0	SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) AS rnk FROM Customers) WHERE rnk = 1	SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1
0	SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) AS rnk FROM Customers) WHERE rnk = 1	SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1
1	SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers WHERE membership_credit IS NOT NULL)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers c)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount	SELECT * FROM discount
1	SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM Discount	SELECT * FROM discount
1	SELECT v.name, total_hours_sum FROM Vehicles v JOIN (SELECT vehicles_id, SUM(total_hours) AS total_hours_sum FROM Renting_history GROUP BY vehicles_id) r ON v.id = r.vehicles_id	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
0	SELECT Vehicles.name, TOTAL(Renting_history.total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
1	SELECT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT name FROM Vehicles V WHERE V.id NOT IN (SELECT R.vehicles_id FROM Renting_history R)	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
1	SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(customer_id) >= 2)	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
0	SELECT V.name, V.Model_year FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY R.vehicles_id HAVING COUNT(R.vehicles_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(vehicles_id) AS COUNT FROM Renting_history GROUP BY vehicles_id) AS SubQuery)	SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(vehicles_id) AS cnt FROM Renting_history GROUP BY vehicles_id)))	SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT name FROM Vehicles JOIN (SELECT vehicles_id, SUM(total_hours) AS total FROM Renting_history GROUP BY vehicles_id) AS SubQuery ON Vehicles.id = SubQuery.vehicles_id ORDER BY SubQuery.total DESC	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT D.name FROM Discount D JOIN Renting_history R ON D.id = R.discount_id GROUP BY D.name ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name, Type_of_powertrain FROM Vehicles WHERE EXISTS (SELECT 1 FROM Renting_history WHERE vehicles_id = Vehicles.id AND total_hours > 30)	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT Type_of_powertrain, AVG(Vehicles.City_fuel_economy_rate), AVG(Vehicles.Highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS CityFuelEconomyAverage, AVG(Highway_fuel_economy_rate) AS HighwayFuelEconomyAverage FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT AVG(amount_of_loan) FROM Student_Loans	SELECT avg(amount_of_loan) FROM Student_Loans
1	SELECT AVG(amount_of_loan) FROM Student_Loans	SELECT avg(amount_of_loan) FROM Student_Loans
0	SELECT S.bio_data, S.student_id FROM Students S WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.student_id = S.student_id GROUP BY C.student_id HAVING COUNT(C.class_id) >= 2) AND NOT EXISTS (SELECT 1 FROM Detention D WHERE D.student_id = S.student_id GROUP BY D.student_id HAVING COUNT(D.detention_id) >= 2)	SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2
0	SELECT DISTINCT S.bio_data, S.student_id FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id LEFT JOIN Detention D ON S.student_id = D.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT C.class_id) >= 2 OR COUNT(DISTINCT D.detention_id) < 2	SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2
0	SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'
0	SELECT DISTINCT T1.teacher_details FROM Teachers T1 WHERE EXISTS (SELECT * FROM Classes T2 WHERE T2.teacher_id = T1.teacher_id AND T2.class_details LIKE '%data%') AND NOT EXISTS (SELECT * FROM Classes T3 WHERE T3.teacher_id = T1.teacher_id AND T3.class_details LIKE 'net%')	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(*) AS cnt FROM Achievements GROUP BY student_id) AS sub WHERE sub.cnt >= 2)	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
0	SELECT SL.student_id, SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL INNER JOIN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2) AS A ON SL.student_id = A.student_id	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
0	SELECT T.teacher_id, T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id HAVING COUNT(C.class_id) = (SELECT MAX(class_count) FROM (SELECT teacher_id, COUNT(class_id) AS class_count FROM Classes GROUP BY teacher_id) AS subquery)	SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
1	SELECT T.teacher_id, T.teacher_details FROM Teachers AS T INNER JOIN Classes AS C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1	SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
0	SELECT DISTINCT D.detention_summary FROM Detention D	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0	SELECT detention_summary FROM Detention GROUP BY detention_summary	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0	SELECT Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
0	SELECT bio_data AS Personal_Details, student_details AS Student_Details, address_type_description AS Address_Type FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
1	SELECT address_details, bio_data FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0	SELECT Students.bio_data, Addresses.address_details FROM Students LEFT JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id LEFT JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT bio_data, date_of_transcript FROM Students s INNER JOIN Transcripts t ON s.student_id = t.student_id	SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id
1	SELECT bio_data, date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id	SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id
0	SELECT behaviour_monitoring_details, COUNT(student_id) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(student_id) = (SELECT MAX(count) FROM (SELECT COUNT(student_id) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS subquery)	SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
0	SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS counts)	SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
0	SELECT S.bio_data, S.student_details FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details HAVING COUNT(*) = 3 ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )
0	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(DISTINCT student_id) = 3)	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )
0	SELECT S.bio_data FROM Students S JOIN Behaviour_Monitoring B ON S.student_id = B.student_id GROUP BY S.student_id HAVING COUNT(DISTINCT B.behaviour_monitoring_details) = 1 AND B.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )
0	SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Behaviour_Monitoring B WHERE S.student_id = B.student_id GROUP BY B.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)	select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )
1	SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
1	SELECT bio_data, event_date FROM Students, Student_Events WHERE Students.student_id = Student_Events.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
0	SELECT A.event_type_code, B.event_type_description, COUNT(DISTINCT A.student_id) AS StudentCount FROM Student_Events A LEFT JOIN Ref_Event_Types B ON A.event_type_code = B.event_type_code GROUP BY A.event_type_code, B.event_type_description ORDER BY StudentCount DESC LIMIT 1	SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT COUNT(DISTINCT SE.student_id) AS num_students, SE.event_type_code, RET.event_type_description FROM Student_Events SE INNER JOIN Ref_Event_Types RET ON SE.event_type_code = RET.event_type_code GROUP BY SE.event_type_code ORDER BY num_students DESC LIMIT 1	SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT A.achievement_details, R.achievement_type_description FROM Achievements A INNER JOIN Ref_Achievement_Type R ON A.achievement_type_code = R.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT ACH.achievement_details, ACH_TYPE.achievement_type_description FROM Achievements ACH JOIN Ref_Achievement_Type ACH_TYPE ON ACH.achievement_type_code = ACH_TYPE.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT COUNT(DISTINCT T.teacher_id) FROM Teachers T WHERE T.teacher_id IN (SELECT C.teacher_id FROM Classes C LEFT JOIN Achievements A ON C.student_id = A.student_id WHERE A.achievement_id IS NULL)	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Achievements)	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT t.date_of_transcript, t.transcript_details FROM Transcripts AS t	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT date_of_transcript, transcript_details FROM Transcripts	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT start_time, end_time FROM (SELECT datetime_detention_start AS start_time, datetime_detention_end AS end_time FROM Detention) AS Detention_Times	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT bio_data FROM Students WHERE INSTR(student_details, 'Suite') > 0	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1	SELECT A.teacher_details, B.student_details FROM Teachers A, Classes C, Students B WHERE A.teacher_id = C.teacher_id AND C.student_id = B.student_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT T1.teacher_details AS TeacherDetails, T2.student_details AS StudentDetails FROM Teachers T1 INNER JOIN Classes C ON T1.teacher_id = C.teacher_id INNER JOIN Students T2 ON C.student_id = T2.student_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0	SELECT teacher_id, COUNT(class_id) AS total_classes FROM Classes GROUP BY teacher_id HAVING total_classes = (SELECT MAX(total_classes) FROM (SELECT COUNT(class_id) AS total_classes FROM Classes GROUP BY teacher_id) AS subquery)	SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
1	SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1	SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
0	SELECT student_id, COUNT(*) FROM Classes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(courses) FROM (SELECT COUNT(*) AS courses FROM Classes GROUP BY student_id) AS course_counts)	SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1
0	SELECT student_id, COUNT(*) FROM Classes GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(*) AS course_count FROM Classes GROUP BY student_id) AS subquery)	SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT student_id, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2)	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	SELECT S.student_id, S.bio_data, S.student_details FROM Students S JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id HAVING COUNT(C.class_id) = 2	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	SELECT r.detention_type_code, r.detention_type_description FROM Ref_Detention_Type r LEFT OUTER JOIN Detention d ON r.detention_type_code = d.detention_type_code GROUP BY r.detention_type_code, r.detention_type_description ORDER BY COUNT(d.detention_id) ASC LIMIT 1	SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
1	SELECT a.detention_type_code, b.detention_type_description FROM (SELECT detention_type_code FROM Detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) a JOIN Ref_Detention_Type b ON a.detention_type_code = b.detention_type_code	SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
0	SELECT bio_data, other_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )
0	SELECT S.bio_data, S.student_details FROM Students S WHERE S.student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )
1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
0	SELECT S.bio_data FROM Students S WHERE EXISTS (SELECT 1 FROM Student_Loans SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
0	SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC, date_of_loan DESC LIMIT 1)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
0	SELECT t.date_of_transcript FROM Transcripts t WHERE EXISTS (SELECT 1 FROM Student_Loans s WHERE s.student_id = t.student_id AND s.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))	SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
0	SELECT t.date_of_transcript FROM Transcripts t JOIN (SELECT student_id, MAX(total_loans) FROM (SELECT student_id, SUM(amount_of_loan) AS total_loans FROM Student_Loans GROUP BY student_id) y GROUP BY student_id ORDER BY total_loans DESC LIMIT 1) sl ON t.student_id = sl.student_id	SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
0	SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT C.teacher_id FROM Classes C INNER JOIN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1) AS S ON C.student_id = S.student_id)	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1
0	SELECT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C JOIN Transcripts TR ON C.student_id = TR.student_id WHERE C.teacher_id = T.teacher_id AND TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1
1	SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id	select student_id ,  sum(amount_of_loan) from student_loans group by student_id
1	SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id	SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id
0	SELECT S.student_id, S.bio_data, (SELECT COUNT(class_id) FROM Classes WHERE Classes.student_id = S.student_id) AS CourseCount FROM Students S	SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
0	SELECT Students.student_id, Students.bio_data, COUNT(Classes.class_id) FROM Students LEFT JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id	SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
1	SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention)	SELECT count(DISTINCT student_id) FROM Detention
1	SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM Detention d WHERE d.student_id IS NOT NULL)	SELECT count(DISTINCT student_id) FROM Detention
1	SELECT address_type_code, address_type_description FROM Ref_Address_Types NATURAL JOIN (SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon	SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT RAT.address_type_code, RAT.address_type_description FROM Ref_Address_Types RAT, Students_Addresses SA WHERE RAT.address_type_code = SA.address_type_code GROUP BY RAT.address_type_code, RAT.address_type_description HAVING COUNT(SA.address_type_code) = (SELECT MAX(COUNT) FROM (SELECT COUNT(address_type_code) AS COUNT FROM Students_Addresses GROUP BY address_type_code) AS Counts)	SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT bio_data FROM Students WHERE EXISTS (SELECT * FROM Student_Events WHERE Students.student_id = Student_Events.student_id) AND NOT EXISTS (SELECT * FROM Student_Loans WHERE Students.student_id = Student_Loans.student_id)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id
1	SELECT SA.date_from, SA.date_to FROM Students_Addresses SA JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS FilteredStudents ON SA.student_id = FilteredStudents.student_id	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT SA.date_from, SA.date_to FROM Students_Addresses AS SA WHERE EXISTS (SELECT 1 FROM Transcripts AS T WHERE T.student_id = SA.student_id GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT datetime_detention_start FROM Detention	SELECT datetime_detention_start FROM Detention
1	SELECT datetime_detention_start FROM Detention WHERE datetime_detention_start IS NOT NULL	SELECT datetime_detention_start FROM Detention
1	SELECT author.Name FROM Author author	SELECT name FROM Author
1	SELECT Name AS AuthorName FROM Author	SELECT name FROM Author
1	SELECT Client.Name, Client.Address FROM Client	SELECT name ,  address FROM Client
1	SELECT Client.Name, Client.Address FROM Client	SELECT name ,  address FROM Client
1	SELECT Title, ISBN, SalePrice FROM Book WHERE SalePrice IS NOT NULL	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT B.Title, B.ISBN, B.SalePrice FROM Book B	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT COUNT(DISTINCT ISBN) FROM Book	SELECT count(*) FROM Book
1	SELECT COUNT(DISTINCT ISBN) FROM Book	SELECT count(*) FROM Book
1	SELECT count(*) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(1) FROM Author	SELECT count(*) FROM Author
1	SELECT count(*) FROM Client	SELECT count(*) FROM Client
1	SELECT count(*) FROM Client	SELECT count(*) FROM Client
0	SELECT Name, Address FROM Client ORDER BY Name, Address	SELECT name ,  address FROM Client ORDER BY name
0	SELECT Name, Address FROM Client ORDER BY Name ASC, Address ASC	SELECT name ,  address FROM Client ORDER BY name
1	SELECT b.Title AS BookTitle, a.Name AS AuthorName FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT b.Title AS 'Book Title', a.Name AS 'Author Name' FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT IdOrder, Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
1	SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
0	SELECT A.Name, COUNT(B.ISBN) AS BooksWritten FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author LEFT JOIN Book B ON AB.ISBN = B.ISBN GROUP BY A.idAuthor	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor
0	SELECT A.Name, COUNT(AB.ISBN) FROM Author A LEFT JOIN Author_Book AB ON A.idAuthor = AB.Author GROUP BY A.idAuthor	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor
1	SELECT b.ISBN, COUNT(DISTINCT b.IdOrder) FROM Books_Order b GROUP BY b.ISBN	SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn
0	SELECT b.ISBN, (SELECT COUNT(*) FROM Books_Order WHERE ISBN = b.ISBN) AS OrderCount FROM Book b	SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn
0	SELECT b.ISBN, SUM(bo.amount) AS TotalAmount FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN	SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn
1	SELECT bo.ISBN, SUM(bo.amount) total_ordered FROM Books_Order bo GROUP BY bo.ISBN	SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn
0	SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO WHERE B.ISBN = BO.ISBN GROUP BY BO.ISBN ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1
1	SELECT Title FROM (SELECT ISBN, COUNT(*) AS OrdersCount FROM Books_Order GROUP BY ISBN) AS OrderCounts JOIN Book ON Book.ISBN = OrderCounts.ISBN ORDER BY OrdersCount DESC LIMIT 1	SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1
0	SELECT Book.Title, Book.PurchasePrice FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Books_Order.ISBN HAVING SUM(Books_Order.amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN) AS SubQuery)	SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1
0	SELECT b.Title, b.PurchasePrice FROM Book b, Books_Order bo WHERE b.ISBN = bo.ISBN GROUP BY b.ISBN HAVING SUM(bo.amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM Books_Order GROUP BY ISBN) tmp)	SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1
0	SELECT B.Title FROM Book AS B INNER JOIN Books_Order AS BO ON B.ISBN = BO.ISBN	SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
1	SELECT DISTINCT B.Title FROM Book AS B, Books_Order AS BO WHERE B.ISBN = BO.ISBN	SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)	SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
1	SELECT DISTINCT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)	SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0	SELECT Name, COUNT(Orders.IdOrder) FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient	SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient
0	SELECT Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient	SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient
0	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(Cnt) FROM (SELECT COUNT(IdOrder) AS Cnt FROM Orders GROUP BY IdClient)))	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1
0	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(Cnt) FROM (SELECT COUNT(IdOrder) AS Cnt FROM Orders GROUP BY IdClient) AS Sub))	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1
1	SELECT Client.Name, TotalBooksOrdered FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalBooksOrdered FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS OrderTotals ON Client.IdClient = OrderTotals.IdClient	SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient
0	SELECT C.Name, SUM(B.amount) FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order B ON O.IdOrder = B.IdOrder GROUP BY C.Name	SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient
1	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient ORDER BY SUM(amount) DESC LIMIT 1)	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1
0	SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient HAVING SUM(Books_Order.amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(Books_Order.amount) AS TotalAmount FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Orders.IdClient) AS SubQuery)	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1
0	SELECT B.Title FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL	SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT B.Title FROM Book B LEFT JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NULL	SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o)	SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0	SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o)	SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
1	SELECT max(SalePrice), min(SalePrice) FROM Book	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT (SELECT MAX(SalePrice) FROM Book) AS MaxPrice, (SELECT MIN(SalePrice) FROM Book) AS MinPrice	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT AVG(Book.PurchasePrice) AS AveragePurchasePrice, AVG(Book.SalePrice) AS AverageSalePrice FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT AVG(PurchasePrice) AS AvgPurchase, AVG(SalePrice) AS AvgSale FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT MAX(SalePrice - PurchasePrice) FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT MAX(SalePrice - PurchasePrice) FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book WHERE SalePrice IS NOT NULL AND SalePrice > 0)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
1	SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(Book.SalePrice) FROM Book)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
0	SELECT b.Title FROM Book b WHERE b.SalePrice = (SELECT MIN(b2.SalePrice) FROM Book b2)	select title from book order by saleprice asc limit 1
0	SELECT Title FROM Book WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book)	select title from book order by saleprice asc limit 1
0	SELECT B.Title FROM Book B WHERE B.PurchasePrice IN (SELECT MAX(B2.PurchasePrice) FROM Book B2)	select title from book order by purchaseprice  desc limit 1
0	SELECT Title FROM (SELECT Title, PurchasePrice, RANK() OVER (ORDER BY PurchasePrice DESC) AS rank FROM Book) AS RankedBooks WHERE rank = 1	select title from book order by purchaseprice  desc limit 1
0	SELECT AVG(b.SalePrice) FROM Book b WHERE b.ISBN IN (SELECT ab.ISBN FROM Author_Book ab JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell')	SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell"
0	SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')	SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell"
0	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))	SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato"
0	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))	SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato"
1	SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell" ORDER BY T1.saleprice LIMIT 1
1	SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell" ORDER BY T1.saleprice LIMIT 1
1	SELECT B.Title FROM Book AS B INNER JOIN Author_Book AS AB ON B.ISBN = AB.ISBN INNER JOIN Author AS A ON AB.Author = A.idAuthor WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)
1	SELECT B.Title FROM Book B INNER JOIN Author_Book AB ON B.ISBN = AB.ISBN INNER JOIN Author A ON A.idAuthor = AB.Author WHERE A.Name = 'Plato' AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)
0	SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))	SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  "Pride and Prejudice"
0	SELECT Name FROM Author WHERE idAuthor IN (SELECT Author FROM Author_Book WHERE ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))	SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  "Pride and Prejudice"
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE "%Plato%"
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE "%Plato%"
0	SELECT COUNT(DISTINCT IdOrder) FROM Books_Order, Book WHERE Books_Order.ISBN = Book.ISBN AND Book.Title = 'Pride and Prejudice'	SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice"
0	SELECT COUNT(DISTINCT IdOrder) FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')	SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice"
1	SELECT IdOrder FROM Orders o WHERE EXISTS (SELECT * FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE o.IdOrder = bo.IdOrder AND b.Title = 'Pride and Prejudice') AND EXISTS (SELECT * FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE o.IdOrder = bo.IdOrder AND b.Title = 'The Little Prince')	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT o.IdOrder FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice' INTERSECT SELECT o.IdOrder FROM Orders o INNER JOIN Books_Order bo ON o.IdOrder = bo.IdOrder INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince'	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' INTERSECT SELECT b.ISBN FROM Books_Order b JOIN Orders o ON b.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'James Smith'	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
1	SELECT DISTINCT b.ISBN FROM Books_Order b INNER JOIN Orders o ON b.IdOrder = o.IdOrder INNER JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' OR c.Name = 'James Smith' GROUP BY b.ISBN HAVING COUNT(DISTINCT c.Name) = 2	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
0	SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' AND B.ISBN = BO.ISBN) AND NOT EXISTS (SELECT 1 FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith' AND B.ISBN = BO.ISBN)	SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "Peter Doe" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "James Smith"
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND ISBN NOT IN (SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith')	SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "Peter Doe" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "James Smith"
0	SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Client.IdClient = Orders.IdClient AND Book.Title = 'Pride and Prejudice')	SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  "Pride and Prejudice"
0	SELECT Name FROM Client WHERE IdClient IN (SELECT o.IdClient FROM Orders o, Books_Order bo, Book b WHERE o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice')	SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  "Pride and Prejudice"
1	SELECT COUNT(DISTINCT Book_ID) FROM book	SELECT count(*) FROM book
1	SELECT Title FROM book ORDER BY Title COLLATE NOCASE	SELECT Title FROM book ORDER BY Title ASC
1	SELECT `Title` FROM `book` ORDER BY `Pages` DESC	SELECT Title FROM book ORDER BY Pages DESC
1	SELECT book.Type AS Book_Type, book.Release AS Release_Date FROM book	SELECT TYPE ,  Release FROM book
0	SELECT `Type`, MAX(`Chapters`) Maximum_Chapters, MIN(`Chapters`) Minimum_Chapters FROM `book` GROUP BY `Type`	SELECT max(Chapters) ,  min(Chapters) FROM book
1	SELECT Title FROM book WHERE Type <> 'Poet'	SELECT Title FROM book WHERE TYPE != "Poet"
1	SELECT AVG(review.Rating) FROM review	SELECT avg(Rating) FROM review
0	SELECT Title, Rating FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID	SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID
0	SELECT r.Rating FROM review r WHERE EXISTS (SELECT 1 FROM book b WHERE b.Book_ID = r.Book_ID ORDER BY b.Chapters DESC LIMIT 1)	SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1
1	SELECT Rank FROM review INNER JOIN book ON review.Book_ID = book.Book_ID ORDER BY Pages ASC LIMIT 1	SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1
0	SELECT Title FROM book WHERE Book_ID = (SELECT Book_ID FROM review ORDER BY Rank DESC LIMIT 1)	SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1
1	SELECT AVG(Readers_in_Million) FROM review INNER JOIN book ON review.Book_ID = book.Book_ID AND book.Type = 'Novel'	SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  "Novel"
1	SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type	SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE
0	SELECT Type FROM book GROUP BY Type HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM book GROUP BY Type) tmp)	SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT DISTINCT Type FROM book WHERE Type IN (SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3)	SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3
1	SELECT book.Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC	SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC
0	SELECT book.Title, book.Audio FROM book JOIN review ON book.Book_ID = review.Book_ID GROUP BY book.Book_ID ORDER BY SUM(review.Readers_in_Million) DESC	SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC
1	SELECT COUNT(*) FROM book b WHERE b.Book_ID NOT IN (SELECT r.Book_ID FROM review r)	SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
1	SELECT Type FROM book WHERE Chapters > 75 OR Chapters < 50 GROUP BY Type HAVING COUNT(DISTINCT CASE WHEN Chapters > 75 THEN 'high' WHEN Chapters < 50 THEN 'low' END) = 2	SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50
1	SELECT COUNT(DISTINCT Type) FROM book	SELECT count(DISTINCT TYPE) FROM book
0	SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)	SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;
1	SELECT COUNT(*) FROM `customer`	SELECT count(*) FROM customer
1	SELECT COUNT(*) FROM `customer`	SELECT count(*) FROM customer
0	SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name ASC	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT `Name` FROM `customer` ORDER BY `Level_of_Membership` ASC	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT c.Nationality, c.Card_Credit FROM customer AS c	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT Nationality, Card_Credit FROM customer WHERE Customer_ID IS NOT NULL	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT customer.Name FROM customer WHERE customer.Nationality = 'England' OR customer.Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT AVG(c.Card_Credit) FROM customer AS c WHERE c.Level_of_Membership > 1	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
1	SELECT AVG(c.Card_Credit) FROM customer AS c WHERE c.Level_of_Membership > 1	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
1	SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer) LIMIT 1	SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
0	SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer)	SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
1	SELECT Nationality, COUNT(DISTINCT Customer_ID) FROM customer GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
1	SELECT Nationality, COUNT(DISTINCT Customer_ID) FROM customer GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
0	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM customer GROUP BY Nationality) t)	SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM customer GROUP BY Nationality) AS Counts)	SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT DISTINCT c.Nationality FROM customer c WHERE EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit < 50) AND EXISTS (SELECT 1 FROM customer WHERE Nationality = c.Nationality AND Card_Credit > 75)	SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
0	SELECT DISTINCT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT DISTINCT Nationality FROM customer WHERE Card_Credit < 75	SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
1	SELECT Name, Dish_Name FROM customer, customer_order WHERE customer.Customer_ID = customer_order.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1	SELECT customer.Name, customer_order.Dish_Name FROM customer_order INNER JOIN customer ON customer_order.Customer_ID = customer.Customer_ID ORDER BY customer_order.Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
0	SELECT Name, TOTAL(Quantity) FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID	SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name
1	SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name	select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name
0	SELECT c.Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Customer_ID HAVING TOTAL(co.Quantity) > 1	SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1
0	SELECT c.Name FROM customer c WHERE EXISTS (SELECT 1 FROM customer_order co WHERE co.Customer_ID = c.Customer_ID GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1)	SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1
1	SELECT DISTINCT Manager AS DistinctManagers FROM branch	SELECT DISTINCT Manager FROM branch
1	SELECT b.Manager FROM branch b GROUP BY b.Manager	SELECT DISTINCT Manager FROM branch
1	SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order WHERE Customer_ID IS NOT NULL)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT COUNT(*) AS TotalMembers FROM member	SELECT count(*) FROM member
1	SELECT member.Name FROM member ORDER BY member.Age ASC	SELECT Name FROM member ORDER BY Age ASC
1	SELECT member.Name AS MemberName, member.Nationality AS MemberNationality FROM member	SELECT Name ,  Nationality FROM member
0	SELECT m.Name FROM member AS m WHERE m.Nationality != 'England'	select name from member where nationality != "england"
1	SELECT Name FROM member WHERE Age IN (19, 20)	SELECT Name FROM member WHERE Age  =  19 OR Age  =  20
0	SELECT Name FROM member WHERE Age IN (SELECT MAX(Age) FROM member)	SELECT Name FROM member ORDER BY Age DESC LIMIT 1
1	SELECT Nationality, COUNT(1) FROM member GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality
0	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality) AS TempTable)	SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2
1	SELECT Name, Club_Name FROM member JOIN club_leader USING(Member_ID) JOIN club USING(Club_ID)	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID
0	SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Overall_Ranking > 100	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100
0	SELECT Name FROM member JOIN club_leader USING(Member_ID) WHERE Year_Join < 2018	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018
1	SELECT member.Name FROM member, club_leader, club WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Club_ID = club.Club_ID AND club.Club_Name = 'Houston'	SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  "Houston"
1	SELECT Name FROM member m WHERE NOT EXISTS (SELECT NULL FROM club_leader cl WHERE cl.Member_ID = m.Member_ID)	SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
1	SELECT DISTINCT Nationality FROM member WHERE Age > 22 INTERSECT SELECT DISTINCT Nationality FROM member WHERE Age < 19	SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19
0	SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader)	SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id
1	SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'	SELECT club_name FROM club WHERE club_name LIKE '%state%'
1	SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs	SELECT Collection_Subset_Name FROM Collection_Subsets;
1	SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IS NOT NULL	SELECT Collection_Subset_Name FROM Collection_Subsets;
1	SELECT cs.Collecrtion_Subset_Details FROM Collection_Subsets cs WHERE cs.Collection_Subset_Name = 'Top collection'	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
0	SELECT DISTINCT C.Collection_Description FROM Collections C INNER JOIN Collection_Subsets CS ON C.Collection_ID = CS.Collection_Subset_ID WHERE CS.Collection_Subset_Name = 'Top collection'	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
1	SELECT Document_Subset_Name FROM Document_Subsets	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT Document_Subset_Name FROM Document_Subsets	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT ds.Document_Subset_Details FROM Document_Subsets AS ds WHERE ds.Document_Subset_Name = 'Best for 2000'	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE ds.Document_Subset_Name = 'Best for 2000'	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT DISTINCT Document_Object_ID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
1	SELECT Document_Object_ID AS Object_ID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
0	SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')	SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'
0	SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'	SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'
1	SELECT Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description LIKE 'Braeden Collection'	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
1	SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
0	SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')	SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'
1	SELECT D2.Owner FROM Document_Objects D1 JOIN Document_Objects D2 ON D1.Parent_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Marlin'	SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'
0	SELECT DISTINCT d.Description FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1	SELECT DISTINCT D.Description FROM Document_Objects D INNER JOIN Document_Objects P ON D.Document_Object_ID = P.Parent_Document_Object_ID	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1	SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin' AND Description IS NOT NULL	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT COUNT(*) FROM Document_Objects WHERE Owner LIKE 'Marlin'	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
0	SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1	SELECT d.Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT Parent_Document_Object_ID AS ParentID, COUNT(Document_Object_ID) AS ChildCount FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT collection_name FROM collections	SELECT Collection_Name FROM Collections;
1	SELECT Collection_Name FROM Collections WHERE Collection_Name IS NOT NULL	SELECT Collection_Name FROM Collections;
1	SELECT Collection_Description FROM Collections WHERE Collection_Name LIKE 'Best'	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1	SELECT Collection_Description FROM Collections WHERE UPPER(Collection_Name) = UPPER('Best')	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1	SELECT C2.Collection_Name FROM Collections C1, Collections C2 WHERE C1.Parent_Collection_ID = C2.Collection_ID AND C1.Collection_Name = 'Nice'	SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice";
1	SELECT C.Collection_Name FROM Collections AS C JOIN Collections AS P ON C.Collection_ID = P.Parent_Collection_ID WHERE P.Collection_Name = 'Nice'	SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice";
0	SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL AND Parent_Collection_ID != Collection_ID)	SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;
0	SELECT C.Collection_Name FROM Collections AS C WHERE C.Collection_ID NOT IN (SELECT P.Parent_Collection_ID FROM Collections AS P WHERE P.Parent_Collection_ID IS NOT NULL)	SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;
1	SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
1	SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1)	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
0	SELECT count(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID != Parent_Collection_ID	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Collection_ID != Parent_Collection_ID	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'	select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'
0	SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO INNER JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'	select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'
0	SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) AS TotalCollections FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID	SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;
0	SELECT CS.Collection_Subset_ID, CS.Collection_Subset_Name, COUNT(CSM.Collection_ID) AS Collections_Count FROM Collection_Subsets CS LEFT JOIN Collection_Subset_Members CSM ON CS.Collection_Subset_ID = CSM.Collection_Subset_ID GROUP BY CS.Collection_Subset_ID, CS.Collection_Subset_Name	SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;
1	SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;
0	SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;
1	SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(Related_Document_Object_ID) ASC LIMIT 1	SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;
0	SELECT d.Document_Object_ID FROM Document_Objects AS d LEFT JOIN Documents_in_Collections AS dc ON d.Document_Object_ID = dc.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY COUNT(dc.Document_Object_ID) ASC LIMIT 1	select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;
1	SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count BETWEEN 2 AND 4	select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;
1	SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count BETWEEN 2 AND 4	SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;
0	SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT m.Related_Document_Object_ID FROM Document_Subset_Members m JOIN Document_Objects o ON m.Document_Object_ID = o.Document_Object_ID WHERE o.Owner = 'Braeden')	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
0	SELECT DISTINCT related.Owner FROM Document_Objects AS related WHERE EXISTS (SELECT 1 FROM Document_Subset_Members AS DSM JOIN Document_Objects AS D ON DSM.Document_Object_ID = D.Document_Object_ID WHERE D.Owner = 'Braeden' AND DSM.Related_Document_Object_ID = related.Document_Object_ID)	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
1	SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
1	SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'))	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
0	SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS Document_Count FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID	SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Num_Documents FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID LEFT JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID GROUP BY DS.Document_Subset_ID	SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT OUTER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY DocumentCount DESC LIMIT 1	select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS Document_Count FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name ORDER BY Document_Count DESC LIMIT 1	select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;
1	SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0	SELECT dmo.Document_Object_ID FROM Document_Objects dmo, Document_Subset_Members dsm, Document_Subsets ds WHERE dmo.Document_Object_ID = dsm.Document_Object_ID AND dsm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0	SELECT Document_Subset_Name, Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members USING(Document_Subset_ID)	SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID
0	SELECT a.Document_Object_ID, b.Document_Subset_Name FROM Document_Objects a, Document_Subset_Members c, Document_Subsets b WHERE a.Document_Object_ID = c.Document_Object_ID AND c.Document_Subset_ID = b.Document_Subset_ID	select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id
0	SELECT Collection_Name FROM Collections, Documents_in_Collections, Document_Objects WHERE Collections.Collection_ID = Documents_in_Collections.Collection_ID AND Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID AND Document_Objects.Owner = 'Ransom'	select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'
1	SELECT c.Collection_Name FROM Collections c JOIN Documents_in_Collections dc ON c.Collection_ID = dc.Collection_ID JOIN Document_Objects do ON dc.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Ransom'	SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'
1	SELECT d.Document_Object_ID, COUNT(c.Collection_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID	SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID
1	SELECT d.Document_Object_ID, COUNT(c.Collection_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID	SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID
0	SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
1	SELECT Document_Object_ID FROM Documents_in_Collections, Collections WHERE Documents_in_Collections.Collection_ID = Collections.Collection_ID AND Collections.Collection_Name = 'Best'	SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'	SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) FROM Collections C, Documents_in_Collections D WHERE C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(D.Document_Object_ID) DESC LIMIT 1	SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;
0	SELECT C.Collection_ID, C.Collection_Name, COUNT(DIC.Document_Object_ID) AS Document_Count FROM Collections C LEFT JOIN Documents_in_Collections DIC ON C.Collection_ID = DIC.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID ORDER BY Document_Count DESC LIMIT 1	SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;
1	SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT dm.Document_Object_ID FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000') AND d.Document_Object_ID IN (SELECT dc.Document_Object_ID FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best')	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
1	SELECT DISTINCT do.Document_Object_ID FROM Document_Objects do WHERE EXISTS (SELECT 1 FROM Documents_in_Collections dic JOIN Collections col ON dic.Collection_ID = col.Collection_ID WHERE do.Document_Object_ID = dic.Document_Object_ID AND col.Collection_Name = 'Best') AND EXISTS (SELECT 1 FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Document_Object_ID = dsm.Document_Object_ID AND ds.Document_Subset_Name = 'Best for 2000')	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
0	SELECT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members ds, Document_Subsets dss WHERE ds.Document_Subset_ID = dss.Document_Subset_ID AND dss.Document_Subset_Name = 'Best for 2000')	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
1	SELECT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' EXCEPT SELECT ds.Document_Object_ID FROM Document_Subset_Members ds INNER JOIN Document_Subsets dss ON ds.Document_Subset_ID = dss.Document_Subset_ID WHERE dss.Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
0	SELECT d.Document_Object_ID FROM Document_Objects d WHERE EXISTS (SELECT 1 FROM Document_Subset_Members dm JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND dm.Document_Object_ID = d.Document_Object_ID) OR EXISTS (SELECT 1 FROM Documents_in_Collections dc JOIN Collections c ON dc.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND dc.Document_Object_ID = d.Document_Object_ID)	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Subsets DS ON DSM.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000' UNION ALL SELECT Document_Object_ID FROM Documents_in_Collections DIC JOIN Collections C ON DIC.Collection_ID = C.Collection_ID WHERE C.Collection_Name = 'Best')	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	SELECT C.Collection_Name FROM Collections C, Collection_Subset_Members CSM, Collections C1 WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = C1.Collection_ID AND C1.Collection_Name = 'Best'	SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = "Best";
0	SELECT C.Collection_Name FROM Collections C, Collection_Subset_Members CSM, Collections C2 WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = C2.Collection_ID AND C2.Collection_Name = 'Best'	SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = "Best";
1	SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
1	SELECT COUNT(*) FROM (SELECT DISTINCT Related_Collection_ID FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID WHERE Collection_Name = 'Best') AS Unique_Related_Collections	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))	SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = "Best";
0	SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))	SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = "Best";
1	SELECT COUNT(*) FROM songs WHERE INSTR(name, 'Love') > 0	SELECT count(*) FROM songs WHERE name LIKE "%Love%"
1	SELECT name FROM songs ORDER BY name COLLATE NOCASE ASC	SELECT name FROM songs ORDER BY name
1	SELECT name AS 'Song Name', language AS 'Language' FROM songs	select name , language from songs
1	SELECT max(voice_sound_quality), min(voice_sound_quality) FROM performance_score	SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
1	SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id AND participants.name = 'Freeway'	SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
1	SELECT id, language, original_artist FROM songs WHERE name IS NOT 'Love'	SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'
1	SELECT `name`, `original_artist` FROM `songs` WHERE `english_translation` = 'All the streets of love'	SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'
1	SELECT DISTINCT p.stage_presence FROM performance_score p, songs s WHERE p.songs_id = s.id AND s.language = 'English'	SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'
1	SELECT DISTINCT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2	SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2
0	SELECT p.id, p.name, p.popularity FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC	SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)
0	SELECT DISTINCT participants.id, participants.name FROM participants, performance_score WHERE participants.id = performance_score.participant_id AND (performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5)	SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5
0	SELECT voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'	SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'
0	SELECT s.id, s.name FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(ps.participant_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(participant_id) AS COUNT FROM performance_score GROUP BY songs_id) t)	SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM performance_score WHERE stage_presence NOT BETWEEN 7 AND 9	SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9
1	SELECT count(*) FROM songs WHERE NOT EXISTS (SELECT 1 FROM performance_score WHERE songs.id = performance_score.songs_id)	SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );
1	SELECT language, AVG(rhythm_tempo) AS average_rhythm FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language	SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language
0	SELECT DISTINCT name FROM participants WHERE id IN (SELECT original_artist FROM songs WHERE language = 'English')	SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
0	SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) AND EXISTS (SELECT 1 FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English' AND ps.participant_id = p.id)	SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
0	SELECT name FROM songs WHERE INSTR(name, 'Is') > 0	SELECT name FROM songs WHERE name LIKE "%Is%"
1	SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC	select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc
1	SELECT COUNT(DISTINCT city_code) FROM City	SELECT count(*) FROM City
1	SELECT COUNT(DISTINCT city_code) FROM City	SELECT count(*) FROM City
1	SELECT DISTINCT state FROM City	select distinct state from city
1	SELECT DISTINCT state FROM City	SELECT DISTINCT state FROM City
1	SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City c)	SELECT count(DISTINCT country) FROM City
1	SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City c)	SELECT count(DISTINCT country) FROM City
1	SELECT city_name, city_code, state, country FROM City	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT city_name, city_code, state, country FROM City	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT city_name FROM City WHERE City.state = 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT city_name FROM City WHERE state LIKE 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
0	SELECT COUNT(*) FROM City WHERE country = 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
1	SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT state, COUNT(city_name) FROM City GROUP BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT state, COUNT(*) AS number_of_cities FROM City GROUP BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT country, COUNT(*) FROM City WHERE country IS NOT NULL GROUP BY country	select country ,  count(*) from city group by country
1	SELECT country, COUNT(*) FROM City GROUP BY country	SELECT country ,  count(*) FROM City GROUP BY country
1	SELECT state FROM (SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state) AS StateCount WHERE num_cities >= 2	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
1	SELECT C.state FROM City C GROUP BY C.state HAVING COUNT(C.city_code) >= 2	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
0	SELECT state FROM City GROUP BY state HAVING COUNT(*) = (SELECT MAX(city_count) FROM (SELECT COUNT(*) AS city_count FROM City GROUP BY state) AS Counts)	SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT state FROM City GROUP BY state HAVING COUNT(city_code) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_code) AS city_count FROM City GROUP BY state) AS Counts)	SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT country FROM City GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_code) AS city_count FROM City GROUP BY country) AS counts)	SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
1	SELECT country FROM (SELECT country, COUNT(city_code) AS city_count FROM City GROUP BY country ORDER BY city_count ASC LIMIT 1) AS result	SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
1	SELECT Fname, LName FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
1	SELECT Fname, LName FROM Student INNER JOIN City ON Student.city_code = City.city_code AND City.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0	SELECT COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
0	SELECT COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code AND City.country = 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
1	SELECT Fname, Major FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1	SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1	SELECT country, COUNT(*) AS NumberOfStudents FROM City INNER JOIN Student ON City.city_code = Student.city_code GROUP BY country	SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
1	SELECT country, COUNT(*) AS StudentCount FROM Student, City WHERE Student.city_code = City.city_code GROUP BY country	SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0	SELECT city_code, COUNT(*) FROM Student GROUP BY city_code	SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code
0	SELECT S.city_code, COUNT(S.StuID) FROM Student S GROUP BY S.city_code	SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code
1	SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
0	SELECT state FROM City c, Student s WHERE c.city_code = s.city_code GROUP BY state HAVING COUNT(s.StuID) = (SELECT MAX(count) FROM (SELECT COUNT(s.StuID) AS count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY state) AS MaxCount)	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
0	SELECT country FROM City C LEFT JOIN Student S ON C.city_code = S.city_code GROUP BY country ORDER BY COUNT(S.StuID) ASC LIMIT 1	SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1
0	SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1	SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1
1	SELECT C.city_name FROM City AS C INNER JOIN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) >= 3) AS S ON C.city_code = S.city_code	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT city_name FROM City c WHERE EXISTS (SELECT NULL FROM Student s WHERE s.city_code = c.city_code GROUP BY s.city_code HAVING COUNT(s.StuID) >= 3)	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT c.state FROM City c LEFT JOIN Student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.StuID) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT StuID FROM Student S, City C WHERE S.city_code = C.city_code AND C.country <> 'USA'	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT StuID FROM Student WHERE EXISTS (SELECT 1 FROM City WHERE Student.city_code = City.city_code AND City.country <> 'USA')	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
1	SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
1	SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'M' AND City.country <> 'USA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
1	SELECT StuID FROM Student, City WHERE Student.city_code = City.city_code AND Sex = 'M' AND City.country <> 'USA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
0	SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
0	SELECT d.distance FROM Direct_distance AS d WHERE (d.city1_code = 'BAL' AND d.city2_code = 'CHI') OR (d.city1_code = 'CHI' AND d.city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
1	SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM City WHERE city_name = 'Newark')	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
0	SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'EWR' AND d.city2_code = 'BOS'	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
1	SELECT MIN(distance), MAX(distance), AVG(distance) FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1	SELECT avg(distance) AS AverageDistance, min(distance) AS MinimumDistance, max(distance) AS MaximumDistance FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
0	SELECT D.city1_code, D.city2_code FROM Direct_distance D WHERE D.distance = (SELECT MAX(distance) FROM Direct_distance)	SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
1	SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 1	SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(D.distance) FROM Direct_distance D)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
0	SELECT city1_code AS city_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
1	SELECT D.city1_code, D.city2_code FROM Direct_distance AS D WHERE D.distance < 1000	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT city1_code AS city_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code <> 'BAL'	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0	SELECT SUM(distance) FROM Direct_distance WHERE 'BAL' IN (city1_code, city2_code)	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0	SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')	SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0	SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')	SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0	SELECT city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Chicago" ORDER BY distance LIMIT 1
0	SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Chicago" ORDER BY distance LIMIT 1
0	SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" ORDER BY distance DESC LIMIT 1
0	SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = 'BOS' ORDER BY D.distance DESC LIMIT 1	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" ORDER BY distance DESC LIMIT 1
0	SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code UNION SELECT city2_code, SUM(distance) FROM Direct_distance GROUP BY city2_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
1	SELECT city1_code AS city_code, SUM(distance) FROM Direct_distance GROUP BY city1_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0	SELECT city_name, AVG(distance) FROM City LEFT JOIN Direct_distance ON city_code = city1_code GROUP BY city_name	SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code
0	SELECT C.city_name, AVG(D.distance) FROM City C LEFT JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name	SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code
1	SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
1	SELECT d.distance FROM Direct_distance d WHERE (d.city1_code, d.city2_code) IN (SELECT s1.city_code, s2.city_code FROM Student s1, Student s2 WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' AND s2.Fname = 'Tracy' AND s2.LName = 'Kim')	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
0	SELECT Fname, Lname FROM Student JOIN City ON Student.city_code = City.city_code WHERE NOT City.city_name = 'Linda Smith' ORDER BY SQRT(POWER(City.latitude - (SELECT latitude FROM City WHERE city_name = 'Linda Smith'), 2) + POWER(City.longitude - (SELECT longitude FROM City WHERE city_name = 'Linda Smith'), 2)) DESC LIMIT 1	SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" ORDER BY distance DESC LIMIT 1
0	SELECT Fname + ' ' + LName AS FullName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') ORDER BY distance DESC LIMIT 1)	SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" ORDER BY distance DESC LIMIT 1
1	SELECT C.state FROM City C JOIN Student S ON C.city_code = S.city_code WHERE S.Fname = 'Linda'	SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  "Linda"
0	SELECT state FROM City WHERE EXISTS (SELECT 1 FROM Student WHERE Student.city_code = City.city_code AND Fname = 'Linda')	SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  "Linda"
1	SELECT * FROM Sailors WHERE age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT * FROM Sailors WHERE age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT name, age FROM Sailors WHERE age < (30)	SELECT name ,  age FROM Sailors WHERE age  <  30
1	SELECT name AS SailorName, age AS SailorAge FROM Sailors WHERE age < 30	SELECT name ,  age FROM Sailors WHERE age  <  30
0	SELECT bid, name FROM Boats WHERE EXISTS (SELECT 1 FROM Reserves WHERE Boats.bid = Reserves.bid AND sid = 1)	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
1	SELECT DISTINCT R.bid FROM Reserves AS R WHERE R.sid = 1	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
0	SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102)	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102
1	SELECT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid WHERE R.bid = 102	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102
1	SELECT DISTINCT bid FROM Reserves	SELECT DISTINCT bid FROM Reserves
1	SELECT DISTINCT bid FROM Reserves	SELECT DISTINCT bid FROM Reserves
1	SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0	SELECT name FROM Sailors WHERE name LIKE '%e%'
1	SELECT name FROM Sailors WHERE INSTR(name, 'e') > 0	SELECT name FROM Sailors WHERE name LIKE '%e%'
0	SELECT s.sid FROM Sailors AS s WHERE s.age = (SELECT MAX(s.age) FROM Sailors AS s)	SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
1	SELECT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)	SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
0	SELECT DISTINCT name FROM Sailors WHERE age > (SELECT max(S.age) FROM Sailors S WHERE S.rating > 7)	SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1	SELECT DISTINCT S1.name FROM Sailors S1, Sailors S2 WHERE S1.age > S2.age AND S2.rating > 7	SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1	SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
0	SELECT sid, name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1
0	SELECT DISTINCT S.name FROM Sailors S JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2	select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2
1	SELECT DISTINCT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT DISTINCT r.sid FROM Reserves r INNER JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('blue', 'red')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT DISTINCT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT name, sid FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Sailors.sid = Reserves.sid AND Boats.color IN ('red', 'blue'))	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'red' INTERSECT SELECT sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'blue'	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
0	SELECT DISTINCT R.sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1	SELECT s.sid, s.name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND b.color = 'red' GROUP BY r.sid HAVING COUNT(DISTINCT b.color) = 1) AND s.sid IN (SELECT r.sid FROM Reserves r, Boats b WHERE r.bid = b.bid AND b.color = 'blue' GROUP BY r.sid HAVING COUNT(DISTINCT b.color) = 1)	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1	SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')) INTERSECT SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue'))	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1	SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT s.sid, s.name FROM Sailors s WHERE s.sid NOT IN (SELECT DISTINCT r.sid FROM Reserves r)	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT name, sid FROM Sailors AS S WHERE NOT EXISTS (SELECT * FROM Reserves AS R WHERE R.sid = S.sid)	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r)	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
0	SELECT S.name FROM Sailors AS S INNER JOIN Reserves AS R ON S.sid = R.sid WHERE R.bid = 103	SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103
0	SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103	SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103
0	SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')	SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')
0	SELECT s.name FROM Sailors s WHERE s.rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')	SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')
1	SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name IN ('Luis'))	SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')
0	SELECT S.name FROM Sailors S WHERE S.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') GROUP BY S.name	SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')
1	SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves) AND rating > 2	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT DISTINCT S.name, S.sid FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid AND S.rating >= 3	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT name, age FROM Sailors WHERE age IN (SELECT MAX(age) FROM Sailors)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT count(*) FROM Sailors;	SELECT COUNT(*) FROM Sailors
1	SELECT COUNT(DISTINCT sid) FROM Sailors	SELECT COUNT(*) FROM Sailors
1	SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT AVG(Sailors.age) AS AverageAge FROM Sailors WHERE Sailors.rating = 7	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT COUNT(*) FROM Sailors WHERE name GLOB 'D*'	select count(*) from sailors where name like 'd%'
1	SELECT COUNT(*) FROM Sailors WHERE name GLOB 'D*'	select count(*) from sailors where name like 'd%'
1	SELECT AVG(rating) AS avgRating, MAX(age) AS maxAge FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
1	SELECT AVG(rating) as 'Average Rating', MAX(age) as 'Largest Age' FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
1	SELECT bid, COUNT(*) AS NumberOfReservations FROM Reserves GROUP BY bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid
1	SELECT Boats.bid, COUNT(Reserves.bid) AS reservation_count FROM Boats LEFT JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY Boats.bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid
1	SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50
1	SELECT count(*), bid FROM Reserves WHERE bid > 50 GROUP BY bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50
0	SELECT B.name, COUNT(*) FROM Boats B LEFT OUTER JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING COUNT(*) > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
1	SELECT B.bid, COUNT(R.bid) AS reservation_count FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid GROUP BY B.bid HAVING reservation_count > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
0	SELECT COUNT(*), B.name FROM Boats B LEFT JOIN Reserves R ON B.bid = R.bid WHERE R.sid > 1 GROUP BY B.name	SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid
0	SELECT name, COUNT(*) FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid > 1 GROUP BY bid) GROUP BY name	SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid
1	SELECT Sailors.rating, AVG(age) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Boats.bid = Reserves.bid WHERE Boats.color = 'red' GROUP BY Sailors.rating	SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating
1	SELECT S.rating, AVG(S.age) FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating	SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating
1	SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating ASC, s.age ASC	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT name, rating, age FROM Sailors ORDER BY rating ASC, age	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT COUNT(*) AS TotalNumberOfBoats FROM Boats	SELECT count(*) FROM Boats
1	SELECT COUNT(ALL bid) FROM Boats	SELECT count(*) FROM Boats
1	SELECT COUNT(*) FROM Boats WHERE LOWER(color) = 'red'	SELECT count(*) FROM Boats WHERE color  =  'red'
1	SELECT COUNT(1) FROM Boats WHERE color = 'red'	SELECT count(*) FROM Boats WHERE color  =  'red'
0	SELECT name FROM Boats WHERE bid IN (SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30))	SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30
0	SELECT name FROM Boats WHERE bid IN (SELECT Reserves.bid FROM Reserves, Sailors WHERE Reserves.sid = Sailors.sid AND Sailors.age BETWEEN 20 AND 30)	SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30
1	SELECT DISTINCT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red')	SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')
0	SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT * FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)	SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')
1	SELECT MAX(s.rating) FROM Sailors s	SELECT max(rating) FROM Sailors
1	SELECT max(rating) FROM Sailors	SELECT max(rating) FROM Sailors
0	SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
0	SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE name = 'Melon'))	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
1	SELECT name AS SailorName, age AS SailorAge FROM Sailors ORDER BY rating DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
1	SELECT name AS SailorName, age AS SailorAge FROM Sailors ORDER BY rating DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
1	SELECT Model FROM (SELECT Model, Price FROM headphone ORDER BY Price DESC) AS subquery LIMIT 1	SELECT model FROM headphone ORDER BY price DESC LIMIT 1
0	SELECT Model FROM headphone WHERE Price = (SELECT MAX(Price) FROM headphone LIMIT 1)	SELECT model FROM headphone ORDER BY price DESC LIMIT 1
1	SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	SELECT DISTINCT model FROM headphone ORDER BY model
0	SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE	SELECT DISTINCT model FROM headphone ORDER BY model
0	SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM headphone GROUP BY Class) AS Counts)	SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1
0	SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM headphone GROUP BY Class) AS Counts)	SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1
1	SELECT `Class` FROM headphone GROUP BY `Class` HAVING COUNT(Headphone_ID) > 2	SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
0	SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2	SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
1	SELECT headphone.Class, COUNT(headphone.Headphone_ID) FROM headphone WHERE headphone.Price > 200 GROUP BY headphone.Class	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT Class, COUNT(Headphone_ID) AS HeadphoneCount FROM headphone WHERE Price > 200 GROUP BY Class	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT COUNT(*) FROM (SELECT DISTINCT Earpads FROM headphone)	SELECT count(DISTINCT earpads) FROM headphone
1	SELECT COUNT(DISTINCT headphone.Earpads) FROM headphone	SELECT count(DISTINCT earpads) FROM headphone
1	SELECT `Earpads` FROM `headphone` GROUP BY `Earpads` ORDER BY COUNT(`Headphone_ID`) DESC LIMIT 2	SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2
0	SELECT `Earpads`, COUNT(`Headphone_ID`) FROM `headphone` GROUP BY `Earpads` ORDER BY COUNT(`Headphone_ID`) DESC LIMIT 2	SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2
0	SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)	SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1
0	SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone)	SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1
1	SELECT headphone.Construction, AVG(headphone.Price) AS AvgPrice FROM headphone GROUP BY headphone.Construction	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1	SELECT `Construction`, AVG(`Price`) AS `AvgPrice` FROM `headphone` GROUP BY `Construction`	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1	SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
1	SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads'	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
1	SELECT DISTINCT h.Earpads FROM headphone h LEFT JOIN headphone p ON h.Earpads = p.Earpads AND p.Construction = 'Plastic' WHERE p.Earpads IS NULL	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
0	SELECT Earpads FROM headphone WHERE Construction IS NOT 'Plastic'	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
1	SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone AS hp)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1	SELECT Model FROM headphone WHERE Price < (SELECT AVG(h.Price) FROM headphone h)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
0	SELECT Name FROM store ORDER BY Date_Opened, Name	SELECT name FROM store ORDER BY date_opened
0	SELECT Name FROM store ORDER BY Date_Opened ASC, Store_ID ASC	SELECT name FROM store ORDER BY date_opened
1	SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana' AND Parking IS NOT NULL	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT COUNT(DISTINCT store.Neighborhood) FROM store	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT COUNT(DISTINCT store.Neighborhood) FROM store	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT Neighborhood, COUNT(DISTINCT Store_ID) AS StoresInNeighborhood FROM store GROUP BY Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1	SELECT COUNT(*), store.Neighborhood FROM store GROUP BY store.Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1	SELECT S.Name, SUM(ST.Quantity) AS TotalHeadphones FROM store S JOIN stock ST ON S.Store_ID = ST.Store_ID GROUP BY S.Store_ID ORDER BY TotalHeadphones DESC LIMIT 1	SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1
0	SELECT Name, SUM(Quantity) FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name	SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1
1	SELECT Name FROM store s WHERE NOT EXISTS (SELECT NULL FROM stock st WHERE st.Store_ID = s.Store_ID AND st.Quantity > 0)	SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
1	SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Store_ID IS NULL	SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
1	SELECT h.Model FROM headphone h WHERE h.Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)	SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)
1	SELECT Model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE headphone.Headphone_ID = stock.Headphone_ID)	SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)
0	SELECT (SELECT Model FROM headphone WHERE Headphone_ID = S.Headphone_ID) AS Model FROM stock S GROUP BY S.Headphone_ID ORDER BY SUM(S.Quantity) DESC LIMIT 1	SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1
0	SELECT h.Model FROM headphone h, stock s WHERE h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID HAVING SUM(s.Quantity) = (SELECT MAX(total) FROM (SELECT SUM(Quantity) AS total FROM stock GROUP BY Headphone_ID))	SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1
0	SELECT total(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1	SELECT sum(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1	SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID	SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id
0	SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)	SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id
1	SELECT count(*) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(*) FROM (SELECT author_id FROM Author) AS total	SELECT count(*) FROM Author
1	SELECT COUNT(*) FROM Paper WHERE paper_id IS NOT NULL	SELECT count(*) FROM Paper
1	SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE paper_id IS NOT NULL	SELECT count(*) FROM Paper
1	SELECT count(*) FROM Affiliation	SELECT count(*) FROM Affiliation
1	SELECT COUNT(1) FROM `Affiliation`	SELECT count(*) FROM Affiliation
1	SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(*) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND p.year = 2009 AND a.name = 'Columbia University'	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1	SELECT COUNT(P.paper_id) FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' AND P.year = 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
0	SELECT Affiliation.name, Affiliation.address FROM Affiliation	SELECT DISTINCT name ,  address FROM Affiliation
0	SELECT Affiliation.name, Affiliation.address FROM Affiliation	SELECT DISTINCT name ,  address FROM Affiliation
0	SELECT venue, year FROM Paper ORDER BY year	SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
0	SELECT DISTINCT venue FROM Paper ORDER BY year ASC	SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
1	SELECT DISTINCT Paper.title, Paper.paper_id FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Harvard University'	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
0	SELECT p.title, p.paper_id FROM Paper AS p JOIN Author_list AS al ON p.paper_id = al.paper_id JOIN Affiliation AS a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
0	SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE "%Mckeown%"
0	SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown'))	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE "%Mckeown%"
1	SELECT DISTINCT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.name) = 2	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) INTERSECT SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING SUM(CASE WHEN a.name IN ('Mckeown, Kathleen', 'Rambow, Owen') THEN 1 ELSE 0 END) = 2	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
1	SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Mckeown, Kathleen' INTERSECT SELECT P.title, P.paper_id FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON A.author_id = AL.author_id WHERE A.name = 'Rambow, Owen'	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
0	SELECT P.title, P.paper_id FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT AL.paper_id FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT * FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown ,  Kathleen%" OR T3.name LIKE "%Rambow ,  Owen%"
0	SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT 1 FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen' OR Author.name = 'Rambow, Owen' AND Author_list.paper_id = Paper.paper_id)	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown ,  Kathleen%" OR T3.name LIKE "%Rambow ,  Owen%"
0	SELECT A.name, COUNT(P.paper_id) AS paper_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY paper_count DESC	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC
0	SELECT author_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY author_id ORDER BY paper_count DESC	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC
0	SELECT name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(DISTINCT Paper.paper_id) ASC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
0	SELECT Affiliation.name FROM Affiliation LEFT JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id LEFT JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.affiliation_id ORDER BY COUNT(DISTINCT Paper.paper_id) DESC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
1	SELECT A.name FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT A.name FROM Author A, Author_list AL WHERE A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) > 50	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) = 1)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
0	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Paper GROUP BY venue, year) AS counts)	SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1
0	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Paper GROUP BY venue, year) AS sub_counts)	SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1
1	SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1	SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1
1	SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1	SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1
1	SELECT COUNT(paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1	SELECT COUNT(paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1	SELECT COUNT(DISTINCT cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
1	SELECT COUNT(*) AS ReferenceCount FROM Citation WHERE paper_id = 'D12-1027'	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
0	SELECT paper_id, COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id ORDER BY citations DESC LIMIT 1	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT paper_id, COUNT(cited_paper_id) FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(cited_paper_id) AS count FROM Citation GROUP BY paper_id) AS Counts)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citations) FROM (SELECT COUNT(cited_paper_id) AS citations FROM Citation GROUP BY paper_id) AS Counts)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
0	sql placeholder	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10
0	sql placeholder	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10
1	SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT cited_paper_id) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(cited_paper_id) FROM Citation, Author_list, Author WHERE Citation.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0	SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1	SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.name, COUNT(*) AS citation_count FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1	SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
1	SELECT venue, year FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown, Kathleen'	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' GROUP BY p.venue, p.year	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0	SELECT DISTINCT venue, year FROM Paper P WHERE EXISTS (SELECT * FROM Author_list AL JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND AL.paper_id = P.paper_id)	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = "columbia university"
0	SELECT DISTINCT P.venue, P.year FROM Paper P LEFT JOIN Author_list AL ON P.paper_id = AL.paper_id LEFT JOIN Affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = "columbia university"
0	SELECT A.name FROM Author A, Author_list AL, Paper P WHERE A.author_id = AL.author_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.author_id HAVING COUNT(P.paper_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE year = 2009 GROUP BY author_id) AS SubQuery)	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.name FROM Author A WHERE EXISTS (SELECT NULL FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 AND AL.author_id = A.author_id GROUP BY AL.author_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
1	SELECT a.name FROM Affiliation a INNER JOIN (SELECT al.affiliation_id FROM Author_list al INNER JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) AS TopAffiliations ON a.affiliation_id = TopAffiliations.affiliation_id	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3
0	SELECT Affiliation.name FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id AND Paper.year = 2009 GROUP BY Affiliation.name ORDER BY COUNT(Paper.paper_id) DESC LIMIT 3	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3
0	SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009	select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = "columbia university"
0	SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009	select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = "columbia university"
1	SELECT COUNT(*) FROM Paper WHERE EXISTS (SELECT * FROM Author_list WHERE Author_list.paper_id = Paper.paper_id AND Author_list.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University')) AND Paper.year BETWEEN 2000 AND 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
1	SELECT COUNT(*) FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') AND Paper.year BETWEEN 2000 AND 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
0	SELECT P.title FROM Paper AS P JOIN Author_list AS A ON P.paper_id = A.paper_id GROUP BY P.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(author_id) AS Cnt FROM Author_list GROUP BY paper_id) AS Sub)	SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Paper.title FROM Paper, Author_list WHERE Paper.paper_id = Author_list.paper_id GROUP BY Paper.paper_id HAVING COUNT(Author_list.author_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(author_id) AS Cnt FROM Author_list GROUP BY paper_id) AS SubQuery)	SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(DISTINCT AL.author_id) FROM Author_list AL INNER JOIN Author A ON AL.author_id = A.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen'	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id NOT IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT A.name, COUNT(*) FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen' GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1	select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = "mckeown ,  kathleen" group by t2.author_id order by count(*) desc limit 1
1	SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(AL.paper_id) DESC LIMIT 1	select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = "mckeown ,  kathleen" group by t2.author_id order by count(*) desc limit 1
1	SELECT paper_id FROM Paper WHERE title LIKE '%translation%' ESCAPE '!'	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT paper_id FROM Paper WHERE LOWER(title) LIKE LOWER('%translation%')	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT Paper.paper_id, Paper.title FROM Paper LEFT JOIN Citation ON Paper.paper_id = Citation.cited_paper_id WHERE Citation.cited_paper_id IS NULL	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
0	SELECT P.paper_id, P.title FROM Paper P WHERE NOT EXISTS (SELECT NULL FROM Citation C WHERE C.paper_id = P.paper_id)	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
0	SELECT name FROM Affiliation WHERE address LIKE '%China%' ORDER BY (SELECT COUNT(*) FROM Author_list WHERE Author_list.affiliation_id = Affiliation.affiliation_id) DESC LIMIT 1	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE "%China%" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Affiliation.name FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name HAVING COUNT(Paper.paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Affiliation.address LIKE '%China%' GROUP BY Affiliation.name) AS sub)	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE "%China%" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1
1	SELECT P.year, P.venue, COUNT(P.paper_id) FROM Paper P GROUP BY P.venue, P.year	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1	SELECT venue, year, COUNT(paper_id) AS PaperCount FROM Paper WHERE venue IS NOT NULL AND year IS NOT NULL GROUP BY venue, year	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
0	SELECT A.affiliation_id, COUNT(DISTINCT P.paper_id) AS PaperCount FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
0	SELECT affiliation.name, COUNT(paper.paper_id) FROM Affiliation affiliation INNER JOIN Author_list author_list ON affiliation.affiliation_id = author_list.affiliation_id INNER JOIN Paper paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
1	SELECT P.title FROM Paper P INNER JOIN Citation C ON P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT P.title FROM Paper P, Citation C WHERE P.paper_id = C.paper_id GROUP BY P.paper_id HAVING COUNT(C.cited_paper_id) > 50	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL, (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) C WHERE AL.paper_id = C.paper_id)	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
1	SELECT COUNT(*) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL INNER JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50) PopPapers ON AL.paper_id = PopPapers.paper_id)	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
0	SELECT name FROM Author WHERE author_id IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue IN ('NAACL', 'ACL') AND Paper.year = 2009)	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	SELECT DISTINCT a.name FROM Author a, Author_list al, Paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id AND p.year = 2009 AND p.venue = 'NAACL' AND EXISTS (SELECT 1 FROM Author_list al2 JOIN Paper p2 ON al2.paper_id = p2.paper_id WHERE al2.author_id = al.author_id AND p2.venue = 'ACL' AND p2.year = 2009)	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1	SELECT A.name FROM Author A WHERE NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND AL.author_id = A.author_id)	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1	SELECT COUNT(*) AS TotalConferences FROM conference	SELECT count(*) FROM conference
1	SELECT COUNT(*) AS TotalConferences FROM conference	SELECT count(*) FROM conference
1	SELECT DISTINCT Conference_Name FROM conference	SELECT DISTINCT conference_name FROM conference
1	SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name IS NOT NULL AND Conference_Name <> ''	SELECT DISTINCT conference_name FROM conference
1	SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
1	SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
0	SELECT Conference_Name, COUNT(staff_ID) FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Conference_Name, COUNT(*) AS Number_of_Occurrences FROM conference GROUP BY Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Year, COUNT(*) FROM conference GROUP BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1	SELECT Year, COUNT(*) FROM conference GROUP BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1	SELECT Year FROM (SELECT Year, COUNT(*) as NumConferences FROM conference GROUP BY Year) AS YearCounts ORDER BY NumConferences ASC LIMIT 1	SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1
1	SELECT c.Year FROM conference c GROUP BY c.Year ORDER BY COUNT(*) ASC LIMIT 1	SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1
1	SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_Name) > 1	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT Location FROM conference GROUP BY Location HAVING COUNT(DISTINCT Conference_ID) > 1	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT `Institution_Name`, `Location`, `Founded` FROM `institution`	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT Institution_Name, Location, Founded FROM institution WHERE Institution_ID IS NOT NULL	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1	SELECT COUNT(*) FROM institution WHERE Founded > 1849 AND Founded < 1901	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
0	SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)	SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1
0	SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution)	SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1
0	SELECT i.Institution_Name, COUNT(s.staff_ID) FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name	SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id
0	SELECT i.Institution_ID, COUNT(s.staff_ID) FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID	select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT Institution_ID FROM staff)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT s.name FROM staff AS s WHERE s.Age > (SELECT AVG(Age) FROM staff AS s)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1	SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
0	SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'	SELECT max(age) ,  min(age) FROM staff
1	SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM staff	SELECT max(age) ,  min(age) FROM staff
0	SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE cp.Conference_ID = c.Conference_ID AND s.Nationality = 'Canada')	SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  "Canada"
0	SELECT DISTINCT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID JOIN institution i ON s.Institution_ID = i.Institution_ID WHERE s.Nationality = 'Canada'	SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  "Canada"
0	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'speaker') AND EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.role = 'sponsor')	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'
0	SELECT s.name FROM staff s WHERE (SELECT COUNT(DISTINCT role) FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND role IN ('Speaker', 'Sponsor')) = 2	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'
0	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID) AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'Naccl' AND cp.staff_ID = s.staff_ID)	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'
0	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'ACL' AND cp.staff_ID = s.staff_ID) AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Conference_Name = 'NACCL' AND cp.staff_ID = s.staff_ID)	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'
0	SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference_participation.staff_ID = staff.staff_ID AND (conference.Year = 2003 OR conference.Year = 2004))	SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004
0	SELECT s.name FROM staff s WHERE EXISTS (SELECT * FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE cp.staff_ID = s.staff_ID AND (c.Year = 2003 OR c.Year = 2004))	SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004
0	SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS Num_Participants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID	SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id
0	SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference AS c LEFT JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID	SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id
0	SELECT Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(staff_ID) DESC LIMIT 2)	SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2
1	SELECT c.Conference_Name FROM conference c JOIN (SELECT Conference_ID, COUNT(staff_ID) AS total_participants FROM conference_participation GROUP BY Conference_ID ORDER BY total_participants DESC LIMIT 2) cp ON c.Conference_ID = cp.Conference_ID	SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2
1	SELECT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
0	SELECT DISTINCT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
0	SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT DISTINCT s.Institution_ID FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004)	SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)
0	SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s, conference_participation cp, conference c WHERE s.Institution_ID = i.Institution_ID AND s.staff_ID = cp.staff_ID AND cp.Conference_ID = c.Conference_ID AND c.Year = 2004)	SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)
0	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)	SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
0	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)	SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
1	SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT PS.pilot_name, PS.plane_name, PS.age FROM PilotSkills PS WHERE PS.age < 30	SELECT * FROM PilotSkills WHERE age  <  30
1	SELECT DISTINCT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30	select * from pilotskills where age  <  30
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age >= 35	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT pilot_name FROM PilotSkills WHERE (plane_name = 'Piper Cub') AND (age < 35)	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' ORDER BY location ASC LIMIT 1	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT location FROM Hangar WHERE plane_name LIKE 'F-14 Fighter'	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT COUNT(*) FROM (SELECT DISTINCT location FROM Hangar)	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT COUNT(DISTINCT location) AS location_count FROM Hangar	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1	SELECT DISTINCT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
0	SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > 40) AS subquery	SELECT count(*) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > 40) AS UniquePilots	SELECT count(*) FROM pilotskills WHERE age  >  40
1	SELECT COUNT(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
1	SELECT count(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
0	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age IN (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1
0	SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM PilotSkills GROUP BY plane_name) tmp)	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
0	SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM PilotSkills GROUP BY plane_name) AS counts)	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
1	SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1
0	SELECT MIN(plane_name) FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1
1	SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills ps WHERE EXISTS (SELECT 1 FROM Hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago')	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT DISTINCT PS.plane_name FROM PilotSkills PS WHERE PS.pilot_name = 'Smith' AND PS.age = 41	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT ps.plane_name FROM PilotSkills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT COUNT(DISTINCT plane_name) FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills)	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT COUNT(DISTINCT plane_name) FROM PilotSkills	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT count(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
1	SELECT COUNT(*) FROM PilotSkills WHERE pilot_name = 'Smith' AND plane_name IS NOT NULL	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
0	SELECT count(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
0	SELECT count(plane_name) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) subquery	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
1	SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT pilot_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT pilot_name FROM PilotSkills WHERE age IS NOT NULL ORDER BY age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT h.location FROM Hangar AS h ORDER BY h.plane_name ASC	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT Hangar.location FROM Hangar ORDER BY Hangar.plane_name	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT DISTINCT p.plane_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name ORDER BY p.plane_name	SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
0	SELECT plane_name FROM Hangar ORDER BY plane_name ASC	SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE (age < 30) OR (age > 40)	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
0	SELECT COUNT(*) FROM (SELECT pilot_name FROM PilotSkills WHERE age > 40 UNION ALL SELECT pilot_name FROM PilotSkills WHERE age < 30) AS subquery	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
1	SELECT pilot_name AS Pilot, age AS Age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) UNION SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'F-14 Fighter' AND age < 30)	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT p.pilot_name FROM PilotSkills p WHERE p.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills q WHERE q.plane_name = 'B-52 Bomber' AND q.pilot_name = p.pilot_name)	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT DISTINCT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT AVG(age) average_age, MIN(age) minimum_age FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	SELECT AVG(age) AS AverageAge, MIN(age) AS MinimumAge FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	SELECT DISTINCT p1.pilot_name FROM PilotSkills p1 JOIN Hangar h1 ON p1.plane_name = h1.plane_name WHERE h1.location = 'Austin' INTERSECT SELECT DISTINCT p2.pilot_name FROM PilotSkills p2 JOIN Hangar h2 ON p2.plane_name = h2.plane_name WHERE h2.location = 'Boston'	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1	SELECT ps.pilot_name FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND (h.location = 'Austin' OR h.location = 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) >= 2	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
0	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
1	SELECT AVG(PilotSkills.age), PilotSkills.plane_name FROM PilotSkills GROUP BY PilotSkills.plane_name	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
1	SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) IS NOT NULL	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
0	sql placeholder	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name
1	SELECT plane_name, COUNT(*) AS count_of_entries FROM PilotSkills GROUP BY plane_name	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name
0	SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MIN(age) FROM PilotSkills GROUP BY plane_name) ORDER BY plane_name	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name
0	SELECT H.plane_name, P.pilot_name FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name WHERE P.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = H.plane_name) ORDER BY H.plane_name	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name
0	SELECT pilot_name, plane_name FROM PilotSkills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name)	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name
0	SELECT h.plane_name, ps.pilot_name FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = ps.plane_name)	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name
1	SELECT pilot_name, MAX(age) max_age FROM PilotSkills GROUP BY pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
1	SELECT pilot_name, MAX(age) AS MaximumAge FROM PilotSkills GROUP BY pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
1	SELECT location, count(*), avg(age) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY Hangar.location	SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location
0	SELECT location, COUNT(pilot_name) AS total_pilots, AVG(age) AS avg_age FROM Hangar LEFT JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location	SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location
1	SELECT plane_name, COUNT(pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
1	SELECT H.plane_name, COUNT(P.pilot_name) AS pilot_count FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name HAVING AVG(P.age) < 35	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
0	SELECT h.location FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name ORDER BY p.age LIMIT 1	SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)
0	SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age LIMIT 1)	SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)
1	SELECT pilot_name, age FROM PilotSkills PS JOIN Hangar H ON PS.plane_name = H.plane_name AND H.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1	SELECT pilot_name, age FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
0	SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN PilotSkills pc ON p.age > pc.age WHERE pc.plane_name = 'Piper Cub' ORDER BY p.pilot_name	SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name
0	SELECT DISTINCT p.pilot_name FROM PilotSkills p WHERE p.age > (SELECT MAX(ps.age) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub') ORDER BY p.pilot_name ASC	SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name
0	SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT min(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter') GROUP BY pilot_name	SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
1	SELECT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name	SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'
0	SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name	SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'
0	SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
1	SELECT COUNT(*) FROM PilotSkills ps1 WHERE ps1.age > (SELECT MIN(ps2.age) FROM PilotSkills ps2 WHERE ps2.plane_name = 'Piper Cub')	SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
0	SELECT Name FROM district WHERE Area_km IN (SELECT MAX(Area_km) FROM district)	SELECT name FROM district ORDER BY Area_km DESC LIMIT 1
0	SELECT d.Area_km, d.Government_website FROM district AS d WHERE d.Population = (SELECT MIN(Population) FROM district AS d2)	SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1
1	SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district WHERE Area_km IS NOT NULL)	SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)
1	SELECT MAX(Area_km), AVG(Area_km) FROM district	SELECT max(area_km) ,  avg(area_km) FROM district
1	SELECT SUM(Population) AS TotalPopulation FROM district ORDER BY Area_km DESC LIMIT 3	SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3
1	SELECT Name, District_ID, Government_website FROM district ORDER BY Population	SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population
1	SELECT d.Name FROM district d WHERE d.Government_website LIKE '%gov%'	SELECT name FROM district WHERE Government_website LIKE "%gov%"
1	SELECT Name AS DistrictName, District_ID AS DistrictID FROM district WHERE Population > 4000 OR Area_km > 3000	SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000
1	SELECT Name, Speach_title FROM spokesman	SELECT name ,  speach_title FROM spokesman
1	SELECT AVG(Points) as 'Average Points', AVG(Age) as 'Average Age' FROM spokesman WHERE Rank_position = 1	SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1
1	SELECT `Name`, `Points` FROM `spokesman` WHERE `Age` < 40	SELECT name ,  points FROM spokesman WHERE age  <  40
0	SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman)	SELECT name FROM spokesman ORDER BY age DESC LIMIT 1
1	SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(sp.Points) FROM spokesman sp)	SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)
0	SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING COUNT(Spokesman_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Spokesman_ID) AS Cnt FROM spokesman_district GROUP BY District_ID)))	SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1
1	SELECT s.Name FROM spokesman AS s JOIN spokesman_district AS sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004	SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004
0	SELECT d.Name, COUNT(s.Spokesman_ID) AS TotalSpokesmen FROM district AS d LEFT JOIN spokesman_district AS sd ON d.District_ID = sd.District_ID LEFT JOIN spokesman AS s ON s.Spokesman_ID = sd.Spokesman_ID GROUP BY d.District_ID	SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID
0	SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 2)	SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2
1	SELECT Name FROM (SELECT district.Name, COUNT(spokesman_district.Spokesman_ID) AS NumSpokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID) AS SubQuery WHERE NumSpokesmen > 1	SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1
1	SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)	SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)
1	SELECT Name FROM spokesman AS s WHERE NOT EXISTS (SELECT NULL FROM spokesman_district AS sd WHERE s.Spokesman_ID = sd.Spokesman_ID)	SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
1	SELECT sum(Population) Total, avg(Population) Average FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.District_ID = d.District_ID)	SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)
0	SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)	select title from sculptures order by year desc limit 1
0	SELECT title FROM Sculptures WHERE year IN (SELECT MAX(year) FROM Sculptures)	select title from sculptures order by year desc limit 1
0	SELECT Paintings.title, Paintings.location FROM Paintings WHERE Paintings.year = (SELECT MIN(year) FROM Paintings)	select title ,  location from paintings order by year limit 1
0	SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)	SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1
1	SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title FROM Sculptures WHERE location LIKE 'gallery 226'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title, location FROM Paintings WHERE title IS NOT NULL	SELECT title ,  LOCATION FROM paintings
1	SELECT title, location FROM Paintings	SELECT title ,  LOCATION FROM paintings
1	SELECT title, location FROM Sculptures WHERE location IS NOT NULL	SELECT title ,  LOCATION FROM sculptures
1	SELECT title, location FROM Sculptures WHERE location IS NOT NULL	SELECT title ,  LOCATION FROM sculptures
1	SELECT Paintings.medium FROM Paintings WHERE paintingID = '80'	SELECT medium FROM paintings WHERE paintingID  =  80
1	SELECT medium FROM Paintings WHERE paintingID = '80'	select medium from paintings where paintingid  =  80
1	SELECT fname, lname FROM Artists WHERE birthYear > 1850 AND deathYear IS NOT NULL	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
0	SELECT fname || ' ' || lname AS FullName FROM Artists WHERE birthYear > 1850	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
1	SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
1	SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
1	SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)	SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
1	SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)	SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
1	SELECT DISTINCT birthYear FROM Artists JOIN Sculptures ON artistID = sculptorID WHERE year > 1920	SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920
1	SELECT DISTINCT A.birthYear FROM Artists A LEFT JOIN Sculptures S ON A.artistID = S.sculptorID WHERE S.year > 1920	SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920
0	SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
0	SELECT fname || ' ' || lname AS full_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists LIMIT 1)	SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
1	SELECT (deathYear - birthYear) AS age FROM Artists ORDER BY age ASC LIMIT 1	SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1
1	SELECT MIN(Age) FROM (SELECT (deathYear - birthYear) AS Age FROM Artists) AS Lifespan	SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1
1	SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1	SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
0	SELECT A.fname, (A.deathYear - A.birthYear) AS age FROM Artists A WHERE (A.deathYear - A.birthYear) = (SELECT MAX(B.deathYear - B.birthYear) FROM Artists B)	SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
1	SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
1	SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0	SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))	select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1
0	SELECT COUNT(*) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists))	select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1
1	SELECT Paintings.title, Paintings.year FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT Paintings.title, Paintings.year FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT P.width_mm FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.birthYear < 1850	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT P.width_mm FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.birthYear < 1850	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT Paintings.location, Paintings.medium FROM Paintings, Artists WHERE Paintings.painterID = Artists.artistID AND Artists.fname = 'Pablo'	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
1	SELECT Paintings.location AS Location, Paintings.medium AS Medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
0	SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID
0	SELECT DISTINCT A.fname || ' ' || A.lname AS full_name FROM Artists A INNER JOIN Paintings P ON A.artistID = P.painterID INNER JOIN Sculptures S ON A.artistID = S.sculptorID	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID
0	SELECT DISTINCT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' INTERSECT SELECT painterID FROM Paintings WHERE medium = 'lithographic')	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  "lithograph"
0	SELECT DISTINCT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium IN ('oil', 'lithographic') GROUP BY A.artistID HAVING COUNT(DISTINCT P.medium) = 2	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  "lithograph"
0	SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas')	SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  "canvas"
0	SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)	SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  "canvas"
1	SELECT DISTINCT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241')	SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241')	SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT medium, COUNT(medium) FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium	SELECT count(*) ,  medium FROM paintings GROUP BY medium
0	SELECT medium, COUNT(*) AS NumberOfWorks FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium	SELECT count(*) ,  medium FROM paintings GROUP BY medium
1	SELECT medium, AVG(height_mm) AS AverageHeight FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT medium, AVG(height_mm) average_height FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
0	SELECT COUNT(*) FROM Paintings WHERE Paintings.year < 1900	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
1	SELECT title FROM Paintings WHERE (year > 1910) AND (medium = 'oil')	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT P.title FROM Paintings P WHERE P.medium = 'oil' AND P.year > 1910	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT DISTINCT painterID FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1	SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1	SELECT DISTINCT title FROM Paintings p1 WHERE p1.height_mm > (SELECT MIN(p2.height_mm) FROM Paintings p2 WHERE p2.mediumOn = 'canvas')	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT title FROM Paintings p1 WHERE p1.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.medium = 'canvas')	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0	SELECT DISTINCT p.paintingID FROM Paintings p INNER JOIN Paintings q ON p.year < q.year WHERE q.location = 'gallery 240'	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0	SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)	SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1
0	SELECT paintingID FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings)	SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1
0	SELECT fname, lname FROM Artists WHERE EXISTS (SELECT 1 FROM Sculptures WHERE sculptorID = Artists.artistID AND title LIKE '%female%')	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE "%female%"
0	SELECT fname || ' ' || lname AS full_name FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE "%female%"
1	SELECT title FROM Paintings GROUP BY title ORDER BY title	SELECT DISTINCT title FROM paintings ORDER BY title
1	SELECT title FROM Paintings GROUP BY title ORDER BY title	SELECT DISTINCT title FROM paintings ORDER BY title
0	SELECT title FROM Paintings GROUP BY title ORDER BY title ASC	SELECT DISTINCT title FROM paintings ORDER BY height_mm
0	SELECT title FROM Paintings GROUP BY title ORDER BY MIN(height_mm) ASC	SELECT DISTINCT title FROM paintings ORDER BY height_mm
0	SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Combined WHERE year BETWEEN 1900 AND 1950	SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950
0	SELECT title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Combined WHERE year BETWEEN 1900 AND 1950	SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950
0	SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222	SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222
0	SELECT P.title FROM Paintings P WHERE P.painterID = 222 UNION ALL SELECT S.title FROM Sculptures S WHERE S.sculptorID = 222	SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222
0	SELECT painterID FROM (SELECT painterID, COUNT(*) AS Total FROM Paintings WHERE year < 1900 GROUP BY painterID) AS SubQuery ORDER BY Total DESC LIMIT 1	SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
0	SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Paintings WHERE year < 1900 GROUP BY painterID) tmp)	SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
1	SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(sculptureID) DESC LIMIT 1)	SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1
0	SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID HAVING COUNT(S.sculptureID) = (SELECT MAX(WorkCount) FROM (SELECT COUNT(*) AS WorkCount FROM Sculptures GROUP BY sculptorID) AS Counts)	SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1
1	SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1	SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
0	SELECT p.location FROM Paintings p WHERE p.year NOT BETWEEN 1885 AND 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
0	SELECT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1	SELECT paintingID FROM Paintings WHERE height_mm > '500' AND height_mm < '2000'	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
1	SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
0	SELECT DISTINCT location FROM Paintings WHERE mediumOn LIKE 'on panel' OR mediumOn LIKE 'on canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0	SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'panels' OR mediumOn = 'canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
1	SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
1	SELECT DISTINCT location FROM Paintings WHERE year < 1885 INTERSECT SELECT DISTINCT location FROM Paintings WHERE year > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
1	SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
1	SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location LIKE 'gallery 241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
1	SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900	SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900
0	SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1	SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900
1	SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR
1	SELECT year, MAX(height_mm) AS 'Maximum Height', MAX(width_mm) AS 'Maximum Width' FROM Paintings GROUP BY year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR
0	SELECT AVG(P.height_mm) AS Average_Height, AVG(P.width_mm) AS Average_Width, A.fname, A.lname FROM Paintings P INNER JOIN Artists A ON P.painterID = A.artistID GROUP BY P.painterID ORDER BY A.lname, A.fname	SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title
0	SELECT A.lname, A.fname, AVG(P.height_mm) AS HeightAvg, AVG(P.width_mm) AS WidthAvg FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY P.painterID ORDER BY A.lname, A.fname	SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title
1	SELECT Artists.fname, COUNT(Paintings.paintingID) AS NumberOfPaintings FROM Artists, Paintings WHERE Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(Paintings.paintingID) >= 2	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
1	SELECT fname, COUNT(P.paintingID) AS paintings_count FROM Artists AS A JOIN Paintings AS P ON A.artistID = P.painterID GROUP BY A.artistID HAVING paintings_count > 1	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
0	SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID) <= 3	SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3
0	SELECT A.deathYear FROM Artists A WHERE 4 > (SELECT COUNT(*) FROM Paintings P WHERE P.painterID = A.artistID)	select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4
1	SELECT A.deathYear FROM Artists A WHERE A.artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)	SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1
1	SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)	SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1
0	SELECT P.paintingID, P.height_mm FROM Paintings P WHERE P.location = 'gallery 240' ORDER BY P.width_mm DESC LIMIT 1	SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1
0	SELECT P.height_mm, P.paintingID FROM Paintings P WHERE P.location = 'gallery 240' AND P.width_mm = (SELECT MAX(width_mm) FROM Paintings WHERE location = 'gallery 240')	SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1
0	SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
1	SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location LIKE 'gallery 240')	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
1	SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
1	SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
0	SELECT fname, lname, COUNT(*) AS TotalOilWorks FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.artistID ORDER BY TotalOilWorks DESC LIMIT 3	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3
0	SELECT fname, lname FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3
1	SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1	SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID
0	SELECT fname, lname FROM Artists AS A WHERE EXISTS (SELECT * FROM Paintings AS P WHERE P.painterID = A.artistID) AND NOT EXISTS (SELECT * FROM Sculptures AS S WHERE S.sculptorID = A.artistID)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID
0	SELECT location FROM Paintings GROUP BY location HAVING MIN(year) < 1885 AND SUM(CASE WHEN mediumOn = 'canvas' THEN 1 ELSE 0 END) = 0	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
0	SELECT location FROM Paintings WHERE (year < 1885) AND (mediumOn != 'canvas')	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
1	SELECT COUNT(*) FROM (SELECT * FROM race) AS AllRaces	SELECT count(*) FROM race
1	SELECT COUNT(*) FROM (SELECT * FROM race) AS AllRaces	SELECT count(*) FROM race
1	SELECT race.Winning_driver, race.Winning_team FROM race ORDER BY race.Winning_team ASC	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver FROM race WHERE Pole_Position NOT LIKE 'Junior Strous'	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1	SELECT Winning_driver FROM race WHERE Pole_Position NOT IN ('Junior Strous')	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
0	SELECT Constructor AS Constructors FROM driver ORDER BY Age ASC	SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT DISTINCT Constructor FROM driver d ORDER BY d.Age ASC	SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant != ''	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT DISTINCT `Entrant` FROM `driver` WHERE `Age` >= 20	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT MAX(Age) highest_age, MIN(Age) lowest_age FROM driver	SELECT max(Age) ,  min(Age) FROM driver
1	SELECT MAX(driver.Age), MIN(driver.Age) FROM driver	SELECT max(Age) ,  min(Age) FROM driver
0	SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Engine	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1	SELECT COUNT(DISTINCT Engine) FROM driver WHERE (Age > 30) OR (Age < 20)	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1	SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT Driver_Name FROM driver ORDER BY UPPER(Driver_Name) DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT Driver_Name, Race_Name FROM driver JOIN race USING (Driver_ID)	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
1	SELECT Driver_Name, Race_Name FROM driver JOIN race USING (Driver_ID)	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
0	SELECT Driver_Name, COUNT(r.Road) FROM driver LEFT OUTER JOIN race r ON driver.Driver_ID = r.Driver_ID GROUP BY Driver_Name	SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID
1	SELECT d.Driver_Name, COUNT(r.Road) FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID	SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID
0	SELECT d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT d.Driver_Name, d.Age FROM driver d WHERE EXISTS (SELECT 1 FROM race WHERE Driver_ID = d.Driver_ID GROUP BY Driver_ID HAVING COUNT(Road) > 1)	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT D.Driver_Name, D.Age FROM driver AS D INNER JOIN race AS R ON D.Driver_ID = R.Driver_ID GROUP BY D.Driver_ID HAVING COUNT(*) >= 2	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT R.Race_Name FROM race R CROSS JOIN driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT R.Race_Name FROM race R CROSS JOIN driver D WHERE R.Driver_ID = D.Driver_ID AND D.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT Driver_Name FROM driver WHERE Constructor NOT IN ('Bugatti')	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT Driver_Name FROM driver WHERE Constructor IS NOT 'Bugatti'	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT d.Constructor, COUNT(DISTINCT d.Driver_ID) FROM driver AS d GROUP BY d.Constructor	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
1	SELECT Constructor, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Constructor	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
0	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM driver GROUP BY Engine) AS Counts)	SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM driver GROUP BY Engine) tmp)	SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(DISTINCT d.Driver_ID) >= 2	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) > 1	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT Driver_Name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.Driver_ID = d.Driver_ID)	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT d.Constructor FROM driver d WHERE d.Age > 30 GROUP BY d.Constructor	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	SELECT d.Constructor FROM driver d WHERE d.Age < 20 INTERSECT SELECT d.Constructor FROM driver d WHERE d.Age > 30 GROUP BY d.Constructor	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1	SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1	SELECT DISTINCT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) > 1	SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "Carl Skerlong" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
0	SELECT d.Driver_Name FROM driver d JOIN race r1 ON d.Driver_ID = r1.Driver_ID AND r1.Pole_Position = 'James Hinchcliffe' JOIN race r2 ON d.Driver_ID = r2.Driver_ID AND r2.Pole_Position = 'Carl Skerlong'	SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "Carl Skerlong" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
0	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')	SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
0	SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE r.Pole_Position = 'James Hinchcliffe')	SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
1	SELECT COUNT(languages.id) FROM languages	SELECT count(*) FROM languages
1	SELECT COUNT(languages.id) FROM languages	SELECT count(*) FROM languages
1	SELECT Name FROM languages ORDER BY Name ASC	SELECT name FROM languages ORDER BY name ASC
1	SELECT name FROM languages ORDER BY name COLLATE NOCASE ASC	SELECT name FROM languages ORDER BY name ASC
1	SELECT name FROM languages WHERE name LIKE '%ish%' AND id IS NOT NULL	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT name FROM languages WHERE name LIKE '%ish%' COLLATE NOCASE	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT `name` FROM `countries` ORDER BY `overall_score` DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT `name` FROM `countries` ORDER BY `overall_score` DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT AVG(c.justice_score) FROM countries AS c	SELECT avg(justice_score) FROM countries
1	SELECT AVG(justice_score) FROM countries	SELECT avg(justice_score) FROM countries
1	SELECT MAX(health_score), MIN(health_score) FROM countries WHERE NOT name = 'Norway'	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT MAX(health_score) maxHealth, MIN(health_score) minHealth FROM countries WHERE name != 'Norway'	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT COUNT(DISTINCT language_id) AS total_languages FROM official_languages	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT COUNT(*) FROM (SELECT language_id FROM official_languages GROUP BY language_id) AS distinct_languages	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT name FROM countries ORDER BY education_score DESC, id ASC	SELECT name FROM countries ORDER BY education_score DESC
1	SELECT name FROM countries ORDER BY education_score DESC, id ASC	SELECT name FROM countries ORDER BY education_score DESC
0	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
0	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
1	SELECT `countries`.`name` AS `Country`, `languages`.`name` AS `Language` FROM `countries` JOIN `official_languages` ON `countries`.`id` = `official_languages`.`country_id` JOIN `languages` ON `official_languages`.`language_id` = `languages`.`id`	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
1	SELECT c.name, l.name FROM countries c, languages l WHERE EXISTS (SELECT 1 FROM official_languages ol WHERE ol.country_id = c.id AND ol.language_id = l.id)	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
0	SELECT name, COUNT(country_id) AS Countries FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name	SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name
0	SELECT lang.name AS Language, COUNT(distinct ol.country_id) AS Countries FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id GROUP BY lang.name	SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 1)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 1)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) >= 2)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(*) > 1)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
0	SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages, languages WHERE official_languages.language_id = languages.id AND languages.name = 'English')	SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  "English"
0	SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages, languages WHERE official_languages.language_id = languages.id AND languages.name = 'English')	SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  "English"
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 3)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
0	SELECT (SELECT name FROM languages WHERE id = ol.language_id) AS Language FROM official_languages ol JOIN countries ON ol.country_id = countries.id GROUP BY ol.language_id ORDER BY AVG(countries.overall_score) DESC	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
0	SELECT countries.name FROM countries, official_languages WHERE countries.id = official_languages.country_id GROUP BY countries.id HAVING COUNT(official_languages.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id) AS language_counts)	SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT c.name FROM countries c, official_languages ol WHERE c.id = ol.country_id GROUP BY c.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1	SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages GROUP BY country_id)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
1	SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE country_id = countries.id)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
0	SELECT L.name FROM languages L WHERE L.id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE C.overall_score > 95) AND L.id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE C.overall_score < 90)	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score > 95) INTERSECT SELECT language_id FROM official_languages WHERE country_id IN (SELECT id FROM countries WHERE overall_score < 90))	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90
1	SELECT country AS Country, town_city AS City FROM Addresses	SELECT country ,  town_city FROM Addresses;
1	SELECT country AS Country, town_city AS City FROM Addresses	SELECT country ,  town_city FROM Addresses;
0	SELECT county_state_province FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id	SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
0	SELECT county_state_province FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id	SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
1	SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
1	SELECT feature_description FROM Features WHERE feature_name LIKE 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
0	SELECT F.feature_name, F.feature_description FROM Features F, Property_Features PF WHERE F.feature_id = PF.feature_id GROUP BY PF.feature_id HAVING COUNT(PF.feature_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM Property_Features GROUP BY feature_id) T)	SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;
0	SELECT F.feature_name, F.feature_description FROM Features F JOIN Property_Features PF ON F.feature_id = PF.feature_id GROUP BY PF.feature_id HAVING COUNT(PF.feature_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Property_Features GROUP BY feature_id) AS subquery)	SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;
1	SELECT MIN(room_count) FROM Properties WHERE room_count >= 0	SELECT min(room_count) FROM Properties;
1	SELECT room_count FROM Properties ORDER BY room_count ASC LIMIT 1	SELECT min(room_count) FROM Properties;
1	SELECT COUNT(*) FROM Properties p WHERE p.parking_lots = '1' OR p.garage_yn = '1'	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
1	SELECT COUNT(*) FROM Properties WHERE (garage_yn = '1') OR (parking_lots = '1')	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0	SELECT age_category_description FROM Ref_Age_Categories AS ac JOIN Users AS u ON ac.age_category_code = u.age_category_code WHERE u.other_user_details LIKE '%Mother%'	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_description GLOB '*Mother*'	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0	SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;
0	SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Properties GROUP BY owner_user_id) AS Sub))	SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;
0	SELECT AVG(p.room_count) FROM Properties p WHERE p.property_description LIKE '%garden%'	SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';
0	SELECT AVG(room_count) FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name LIKE '%garden%'))	SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';
0	SELECT DISTINCT town_city FROM Addresses a, Properties p, Property_Features pf, Features f WHERE a.address_id = p.property_address_id AND p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'swimming pool'	SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';
0	SELECT DISTINCT A.town_city FROM Addresses A WHERE A.address_id IN (SELECT P.property_address_id FROM Properties P, Property_Features PF, Features F WHERE P.property_id = PF.property_id AND PF.feature_id = F.feature_id AND F.feature_name = 'swimming pool')	SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';
0	SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;
0	SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;
1	SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT property_id FROM Properties WHERE property_id = p.property_id)	SELECT avg(room_count) FROM Properties;
1	SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT property_id FROM Properties WHERE property_id = p.property_id)	SELECT avg(room_count) FROM Properties;
1	SELECT COUNT(DISTINCT room_size) AS distinct_room_sizes FROM Rooms	SELECT count(DISTINCT room_size) FROM Rooms;
1	SELECT COUNT(DISTINCT room_size) AS distinct_room_sizes FROM Rooms	SELECT count(DISTINCT room_size) FROM Rooms;
0	SELECT DISTINCT U.user_id, U.search_string FROM User_Searches U WHERE (SELECT COUNT(*) FROM User_Searches WHERE user_id = U.user_id AND search_string = U.search_string) >= 2	SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;
0	SELECT DISTINCT user_id, search_seq FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)	SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;
1	SELECT MAX(search_datetime) AS LatestSearchTime FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
1	SELECT MAX(search_datetime) AS MostRecentSearch FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
1	SELECT US.search_datetime, US.search_string FROM User_Searches AS US ORDER BY US.search_string DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0	SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC, search_datetime DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0	SELECT DISTINCT A.zip_postcode FROM Addresses A INNER JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2)	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
0	SELECT DISTINCT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
1	SELECT U.user_id, U.user_category_code FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) = 1	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
1	SELECT user_id, user_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
0	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT MIN(user_id) FROM User_Searches WHERE search_datetime = (SELECT MIN(search_datetime) FROM User_Searches)))	SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;
0	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime LIMIT 1))	SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;
0	SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE R.age_category_code = U.age_category_code AND R.age_category_description LIKE 'Senior%') ORDER BY U.first_name	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
0	SELECT U.login_name FROM Users U WHERE EXISTS (SELECT 1 FROM Ref_Age_Categories R WHERE U.age_category_code = R.age_category_code AND R.age_category_description = 'Senior Citizen') ORDER BY U.first_name	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
1	SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = '1')	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT COUNT(*) FROM User_Searches WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_id = User_Searches.user_id AND Users.is_buyer = '1')	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT U.date_registered FROM Users U WHERE U.login_name = 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = '1'	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
1	SELECT U.first_name, U.middle_name, U.last_name, U.login_name FROM Users U WHERE U.is_seller = '1'	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
0	SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE address_id IN (SELECT user_address_id FROM Users WHERE user_category_code = (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Senior%'))	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0	SELECT line_1_number_building AS Building, line_2_number_street AS Street, town_city AS City FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.age_category_code = 'senior'	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0	SELECT COUNT(unique_properties.property_id) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS unique_properties	SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;
0	SELECT COUNT(*) FROM (SELECT property_id FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2) AS subquery	SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;
1	SELECT property_id, COUNT(photo_seq) AS photo_count FROM Property_Photos GROUP BY property_id	SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;
1	SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id	SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;
1	SELECT owner_user_id, COUNT(*) AS photo_count FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id	SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
1	SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p INNER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id	SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
0	SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Single Mother%' OR user_category_description LIKE '%Student%')	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
0	SELECT SUM(Properties.price_max) FROM Properties INNER JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN (SELECT user_category_code FROM Ref_User_Categories WHERE user_category_description = 'Single Mother' OR user_category_description = 'Student')	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
1	SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
1	SELECT User_Property_History.datestamp AS EventDate, Properties.property_name AS PropertyName FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
0	SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R, Properties P WHERE R.property_type_code = P.property_type_code GROUP BY R.property_type_code, R.property_type_description HAVING COUNT(P.property_type_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_type_code) AS Cnt FROM Properties GROUP BY property_type_code) AS SubQuery)	SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;
1	SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code = (SELECT property_type_code FROM Properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code LIKE 'Over 60'	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT COUNT(*), room_size FROM Rooms GROUP BY room_size	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1	SELECT room_size, COUNT(room_number) AS TotalRooms FROM Rooms GROUP BY room_size HAVING COUNT(room_number) > 0	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1	SELECT country FROM Addresses a, Users u WHERE a.address_id = u.user_address_id AND u.first_name = 'Robbie'	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
1	SELECT A.country FROM Addresses A JOIN Users U ON A.address_id = U.user_address_id WHERE U.first_name = 'Robbie'	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
0	SELECT DISTINCT U.first_name, U.middle_name, U.last_name FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id	SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;
0	SELECT U.first_name || ' ' || U.middle_name || ' ' || U.last_name FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id WHERE U.user_address_id = P.property_address_id	SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;
0	SELECT search_string FROM User_Searches AS US WHERE US.user_id NOT IN (SELECT owner_user_id FROM Properties)	SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;
0	SELECT search_string FROM User_Searches WHERE user_id IN (SELECT U.user_id FROM Users U LEFT JOIN Properties P ON U.user_id = P.owner_user_id WHERE P.property_id IS NULL)	SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;
0	SELECT U.last_name, U.user_id FROM Users U JOIN Properties P ON U.user_id = P.owner_user_id LEFT JOIN User_Searches US ON U.user_id = US.user_id GROUP BY U.user_id HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT US.search_seq) <= 2	SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;
1	SELECT U.last_name, U.user_id FROM Users U WHERE EXISTS (SELECT 1 FROM User_Searches US WHERE US.user_id = U.user_id GROUP BY US.user_id HAVING COUNT(US.search_seq) <= 2) AND EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) >= 2)	SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;
1	SELECT COUNT(*) AS NumberOfBikes FROM bike WHERE weight > 780	SELECT count(*) FROM bike WHERE weight  >  780
1	SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC	SELECT product_name ,  weight FROM bike ORDER BY price ASC
1	SELECT heat, name, nation FROM cyclist WHERE heat IS NOT NULL	SELECT heat ,  name ,  nation FROM cyclist
1	SELECT max(weight), min(weight) FROM bike	SELECT max(weight) ,  min(weight) FROM bike
1	SELECT AVG(b.price) FROM bike b WHERE b.material = 'Carbon CC'	SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'
1	SELECT name, result FROM cyclist WHERE nation != 'Russia'	SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'
1	SELECT DISTINCT b.id, b.product_name FROM bike b CROSS JOIN cyclists_own_bikes cob WHERE b.id = cob.bike_id AND cob.purchase_year > 2015	SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015
1	SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id, bike.product_name HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4	SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4
0	SELECT c.id, c.name FROM cyclist AS c JOIN cyclists_own_bikes AS cob ON c.id = cob.cyclist_id GROUP BY c.id HAVING COUNT(cob.bike_id) = (SELECT MAX(count) FROM (SELECT COUNT(bike_id) AS count FROM cyclists_own_bikes GROUP BY cyclist_id) AS subquery)	SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation = 'Russia' UNION SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation = 'Great Britain'	SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'
1	SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist)	SELECT count(DISTINCT heat) FROM cyclist
1	SELECT count(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)	SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )
1	SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'	SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'
0	SELECT b.product_name, b.price FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' AND cob.bike_id = b.id) AND EXISTS (SELECT 1 FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Antonio Tauler' AND cob.bike_id = b.id)	SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'
1	SELECT name, nation, result FROM cyclist c WHERE c.id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)	SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id
1	SELECT product_name FROM bike WHERE material LIKE '%fiber%' AND material IS NOT NULL	SELECT product_name FROM bike WHERE material LIKE "%fiber%"
0	SELECT c.id, COUNT(b.bike_id) AS bike_count FROM cyclist AS c LEFT JOIN cyclists_own_bikes AS b ON c.id = b.cyclist_id GROUP BY c.id ORDER BY c.id	SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id
0	SELECT Flavor, Food FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1 OFFSET 0	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY price DESC LIMIT 1
1	SELECT Id, Flavor FROM goods WHERE Food LIKE 'cake' ORDER BY Price DESC LIMIT 1	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY price DESC LIMIT 1
0	SELECT Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1	SELECT id ,  flavor FROM goods WHERE food  =  "Cookie" ORDER BY price LIMIT 1
0	SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1	SELECT id ,  flavor FROM goods WHERE food  =  "Cookie" ORDER BY price LIMIT 1
0	SELECT Id FROM goods WHERE Flavor = 'apple'	SELECT id FROM goods WHERE flavor  =  "Apple"
0	SELECT Id FROM goods WHERE Flavor = 'apple'	SELECT id FROM goods WHERE flavor  =  "Apple"
1	SELECT Id FROM goods WHERE Price < 3.00	SELECT id FROM goods WHERE price  <  3
1	SELECT goods.Id FROM goods WHERE Price < 3.00	SELECT id FROM goods WHERE price  <  3
0	SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake' AND g.Flavor = 'lemon'	SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  "Lemon" AND T1.Food  =  "Cake"
0	SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'	SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  "Lemon" AND T1.Food  =  "Cake"
0	SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item LEFT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food	SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food
0	SELECT g.Food, COUNT(DISTINCT r.CustomerId) FROM goods g LEFT JOIN items i ON g.Id = i.Item LEFT JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food	SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food
0	SELECT CustomerId AS Id FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY CustomerId HAVING COUNT(DISTINCT ReceiptNumber) >= 15	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(*) >= 15	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT c.LastName FROM customers c, receipts r WHERE c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) > 10	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1	SELECT c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id GROUP BY r.CustomerId HAVING COUNT(*) > 10)	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1	SELECT COUNT(DISTINCT g.Id) FROM goods g WHERE g.Food = 'Cake'	SELECT count(*) FROM goods WHERE food  =  "Cake"
0	SELECT COUNT(*) FROM (SELECT Id FROM goods WHERE Food = 'cake' GROUP BY Id)	SELECT count(*) FROM goods WHERE food  =  "Cake"
1	SELECT Flavor FROM goods WHERE Food LIKE 'Croissant'	SELECT flavor FROM goods WHERE food  =  "Croissant"
1	SELECT Flavor FROM goods WHERE Food LIKE 'croissant'	SELECT flavor FROM goods WHERE food  =  "Croissant"
1	SELECT DISTINCT g.Id FROM goods g INNER JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15)	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
1	SELECT DISTINCT G.Id FROM goods AS G JOIN items AS I ON G.Id = I.Item JOIN receipts AS R ON I.Receipt = R.ReceiptNumber WHERE R.CustomerId = 15	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
1	SELECT Food, AVG(Price) Average, MAX(Price) Maximum, MIN(Price) Minimum FROM goods GROUP BY Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT g.Food, AVG(g.Price) AS AveragePrice, MIN(g.Price) AS MinimumPrice, MAX(g.Price) AS MaximumPrice FROM goods g GROUP BY g.Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT DISTINCT i.Receipt FROM items i, goods g WHERE i.Item = g.Id AND g.Food = 'Cake' AND EXISTS (SELECT 1 FROM items i2, goods g2 WHERE i2.Item = g2.Id AND g2.Food = 'Cookie' AND i2.Receipt = i.Receipt)	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
0	SELECT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cake') AND r.ReceiptNumber IN (SELECT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food = 'cookies')	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
0	SELECT DISTINCT R.ReceiptNumber FROM receipts AS R, customers AS C, items AS I, goods AS G WHERE R.CustomerId = C.Id AND I.Receipt = R.ReceiptNumber AND I.Item = G.Id AND C.LastName = 'LOGAN' AND G.Food = 'Croissant'	SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  "Croissant" AND T4.LastName  =  'LOGAN'
0	SELECT DISTINCT r.ReceiptNumber FROM receipts r, customers c, items i, goods g WHERE r.CustomerId = c.Id AND i.Receipt = r.ReceiptNumber AND i.Item = g.Id AND c.LastName = 'Logan' AND g.Food = 'croissant'	SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  "Croissant" AND T4.LastName  =  'LOGAN'
1	SELECT R.ReceiptNumber, R.Date FROM receipts AS R JOIN items AS I ON R.ReceiptNumber = I.Receipt JOIN goods AS G ON I.Item = G.Id ORDER BY G.Price DESC LIMIT 1	SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1
0	SELECT ReceiptNumber, Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods ORDER BY Price DESC LIMIT 1)) LIMIT 1	SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1
1	SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY COUNT(*) ASC LIMIT 1	SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1
0	SELECT g.Id, g.Food FROM goods g JOIN items i ON g.Id = i.Item GROUP BY i.Item ORDER BY COUNT(i.Item) ASC LIMIT 1 OFFSET 0	SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1
1	SELECT Food, COUNT(DISTINCT Id) FROM goods GROUP BY Food	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT Food, COUNT(*) FROM goods GROUP BY Food HAVING COUNT(*) > 0	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT g.Food, AVG(g.Price) AS AveragePrice FROM goods g GROUP BY g.Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT Food, AVG(Price) AS Average_Price FROM goods WHERE Price IS NOT NULL GROUP BY Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
1	SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5.000	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
0	SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10	SELECT flavor FROM goods WHERE food  =  "Cake" AND price  >  10
0	SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10	SELECT flavor FROM goods WHERE food  =  "Cake" AND price  >  10
1	SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE Price < (SELECT AVG(g.Price) FROM goods g)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
1	SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
0	SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT min(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart')	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
0	SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods t WHERE t.Food = 'Tart' AND t.Price IS NOT NULL)	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
1	SELECT DISTINCT Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1	SELECT DISTINCT ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1	SELECT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 GROUP BY receipts.Date	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
1	SELECT DISTINCT receipts.Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
1	SELECT Id FROM goods WHERE UPPER(Id) LIKE UPPER('%APP%')	SELECT id FROM goods WHERE id LIKE "%APP%"
1	SELECT Id FROM goods WHERE UPPER(Id) LIKE UPPER('%APP%')	SELECT id FROM goods WHERE id LIKE "%APP%"
0	SELECT g.Flavor, g.Price FROM goods AS g WHERE g.Id LIKE '%70%'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1	SELECT Id, Price FROM goods WHERE Id LIKE '%70%'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
0	SELECT customers.LastName FROM customers ORDER BY customers.LastName ASC	SELECT DISTINCT LastName FROM customers ORDER BY LastName
0	SELECT customers.LastName FROM customers ORDER BY customers.LastName ASC	SELECT DISTINCT LastName FROM customers ORDER BY LastName
1	SELECT Id FROM goods ORDER BY Id	SELECT DISTINCT id FROM goods ORDER BY id
1	SELECT DISTINCT g.Id AS GoodID FROM goods g ORDER BY GoodID	SELECT DISTINCT id FROM goods ORDER BY id
0	SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Apple" AND T2.food  =  "Pie" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12
0	SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' OR r.CustomerId = 12	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Apple" AND T2.food  =  "Pie" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12
1	SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts ORDER BY Date DESC LIMIT 1)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
1	SELECT r.ReceiptNumber, r.Date FROM receipts AS r WHERE r.Date = (SELECT MAX(Date) FROM receipts AS r2)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
0	SELECT DISTINCT R.ReceiptNumber FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND (R.Date = (SELECT MIN(Date) FROM receipts) OR G.Price > 10)	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
0	SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
0	SELECT g.Id FROM goods g WHERE g.Food IN ('Cookie', 'Cake') AND g.Price >= 3 AND g.Price <= 7	SELECT id FROM goods WHERE food  =  "Cookie" OR food  =  "Cake" AND price BETWEEN 3 AND 7
0	SELECT Id FROM goods WHERE Food = 'Cookies' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cakes' AND Price BETWEEN 3 AND 7	SELECT id FROM goods WHERE food  =  "Cookie" OR food  =  "Cake" AND price BETWEEN 3 AND 7
1	SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC, ReceiptNumber ASC LIMIT 1)	SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1
0	SELECT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1	SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1
0	SELECT AVG(Price) FROM goods WHERE Flavor IN (SELECT DISTINCT Flavor FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry')	SELECT avg(price) FROM goods WHERE flavor  =  "Blackberry" OR flavor  =  "Blueberry"
0	SELECT AVG(Price) AS AvgPrice FROM goods WHERE Flavor IN ('blackberry', 'blueberry')	SELECT avg(price) FROM goods WHERE flavor  =  "Blackberry" OR flavor  =  "Blueberry"
0	SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1	SELECT min(price) FROM goods WHERE flavor  =  "Cheese"
0	SELECT Id FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1	SELECT min(price) FROM goods WHERE flavor  =  "Cheese"
1	SELECT Flavor, MAX(Price) AS HighestPrice, MIN(Price) AS LowestPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Flavor, MAX(Price) as Maximum_Price, MIN(Price) as Minimum_Price, AVG(Price) as Average_Price FROM goods GROUP BY Flavor ORDER BY Flavor ASC	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Food, MIN(Price) as MinimumPrice, MAX(Price) as MaximumPrice FROM goods GROUP BY Food ORDER BY Food ASC	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
1	SELECT Food, MIN(Price), MAX(Price) FROM goods WHERE Food IS NOT NULL GROUP BY Food ORDER BY Food ASC	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
0	SELECT Date FROM (SELECT Date, COUNT(*) AS NumReceipts FROM receipts GROUP BY Date) AS DateCounts ORDER BY NumReceipts DESC LIMIT 3	SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3
1	SELECT r.Date FROM receipts r GROUP BY r.Date ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 3	SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3
0	SELECT FirstName, LastName, COUNT(ReceiptNumber) AS CountOfVisits FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY customers.Id ORDER BY CountOfVisits DESC LIMIT 1	SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1
1	SELECT CustomerId, COUNT(*) AS Total FROM receipts GROUP BY CustomerId ORDER BY Total DESC LIMIT 1	SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1
1	SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date HAVING COUNT(DISTINCT CustomerId) > 0	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
1	SELECT Date, COUNT(DISTINCT CustomerId) AS Visitors FROM receipts GROUP BY Date	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
0	SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts INNER JOIN items ON ReceiptNumber = Receipt WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'apple' AND Food = 'Tart'))	SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  "Apple" AND T1.food  =  "Tart"
0	SELECT DISTINCT FirstName || ' ' || LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'Tarts'	SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  "Apple" AND T1.food  =  "Tart"
0	SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
0	SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods g WHERE g.Food = 'croissant')	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
1	SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Food = 'Tart')	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
0	SELECT Id FROM goods WHERE Food = 'cake' AND Price >= (SELECT AVG(Price) FROM goods WHERE Flavor = 'Tart' AND Food = 'Tart')	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
0	SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)	SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)
0	SELECT Id FROM goods WHERE Price > 2 * (SELECT AVG(Price) FROM goods)	SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)
1	SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
1	SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
1	SELECT Id AS ItemID, Flavor AS CakeFlavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0	SELECT Id AS CakeId, Flavor AS CakeFlavor FROM goods WHERE Food = 'cake' ORDER BY Flavor	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0	SELECT g.Id FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10	SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Chocolate" GROUP BY item HAVING count(*)  <=  10
0	SELECT g.Id FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY g.Id HAVING COUNT(i.Item) <= 10	SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Chocolate" GROUP BY item HAVING count(*)  <=  10
1	SELECT DISTINCT Flavor FROM goods WHERE Flavor IN (SELECT Flavor FROM goods WHERE Food = 'Cake') AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
1	SELECT DISTINCT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Flavor NOT IN (SELECT t.Flavor FROM goods t WHERE t.Food = 'Tart')	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0	SELECT Item FROM (SELECT Item, COUNT(*) AS Count FROM items GROUP BY Item) AS Popularity ORDER BY Count DESC LIMIT 3	SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3
0	SELECT g.Food, g.Flavor, COUNT(*) AS Total FROM items i LEFT JOIN goods g ON i.Item = g.Id GROUP BY i.Item ORDER BY Total DESC LIMIT 3	SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3
1	SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT DISTINCT customers.Id FROM customers, receipts, items, goods WHERE customers.Id = receipts.CustomerId AND receipts.ReceiptNumber = items.Receipt AND items.Item = goods.Id GROUP BY customers.Id HAVING SUM(goods.Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY customers.Id HAVING AVG(goods.Price) > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT DISTINCT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT DISTINCT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.Date HAVING SUM(g.Price) > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT COUNT(DISTINCT Driver_ID) FROM driver	SELECT count(*) FROM driver
1	SELECT COUNT(*) FROM `driver`	SELECT count(*) FROM driver
1	SELECT d.Make, COUNT(*) FROM driver AS d WHERE d.Points > 150 GROUP BY d.Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT d.Make, COUNT(d.Driver_ID) FROM driver d WHERE d.Points > 150 GROUP BY d.Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT `Make`, AVG(`Age`) FROM `driver` GROUP BY `Make`	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT `Make`, AVG(`Age`) FROM `driver` GROUP BY `Make`	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT AVG(d.Laps) AS AvgLaps FROM driver AS d WHERE d.Age < 20	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT AVG(Laps) AS AverageLaps FROM driver WHERE Age < 20	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT t.Manager, t.Sponsor FROM team t ORDER BY t.Car_Owner ASC	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1	SELECT Manager, Sponsor FROM team ORDER BY Car_Owner ASC	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
0	SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	SELECT make FROM team GROUP BY team HAVING count(*)  >  1
0	SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1	SELECT make FROM team GROUP BY team HAVING count(*)  >  1
1	SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT team.Make FROM team WHERE team.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT MAX(Points) as Max_Points, MIN(Points) as Min_Points FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT MAX(Points) 'Maximum Points', MIN(Points) 'Minimum Points' FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Points < 150	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT COUNT(*) FROM driver WHERE Points < 150.0	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT Driver FROM driver ORDER BY Age	SELECT Driver FROM driver ORDER BY Age ASC
1	SELECT driver.Driver FROM driver ORDER BY Age	SELECT Driver FROM driver ORDER BY Age ASC
1	SELECT driver.Driver FROM driver ORDER BY driver.Points DESC	SELECT Driver FROM driver ORDER BY Points DESC
1	SELECT driver.Driver FROM driver ORDER BY driver.Points DESC	SELECT Driver FROM driver ORDER BY Points DESC
1	SELECT driver.Driver, country.Country FROM driver INNER JOIN country ON driver.Country = country.Country_Id	SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country
1	SELECT driver.Driver, country.Country FROM driver INNER JOIN country ON driver.Country = country.Country_Id	SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country
1	SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT MAX(Points) FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Capital = 'Dublin')	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
1	SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
1	SELECT C.Country FROM country AS C, driver AS D WHERE C.Country_Id = D.Country AND D.Points > 150	SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150
0	SELECT C.Country FROM country C WHERE EXISTS (SELECT 1 FROM driver D WHERE D.Country = C.Country_Id AND D.Points > 150)	SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150
1	SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1	SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
1	SELECT c.Capital FROM country c JOIN driver d ON c.Country_Id = d.Country ORDER BY d.Points DESC LIMIT 1	SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
1	SELECT driver.Make, COUNT(*) AS DriverCount FROM driver GROUP BY driver.Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
1	SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
0	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) = (SELECT MAX(DriverCount) FROM (SELECT COUNT(*) AS DriverCount FROM driver GROUP BY Make) AS Counts)	SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM driver GROUP BY Make) tmp)	SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT d.Make FROM driver AS d GROUP BY d.Make HAVING COUNT(*) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1	SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1	SELECT Team FROM team WHERE NOT EXISTS (SELECT 1 FROM team_driver WHERE team.Team_ID = team_driver.Team_ID)	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
1	SELECT Team FROM team T WHERE NOT EXISTS (SELECT NULL FROM team_driver TD WHERE TD.Team_ID = T.Team_ID)	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
0	SELECT c.Country FROM country c WHERE c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Dodge') AND c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Chevrolet')	SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Dodge" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Chevrolet"
0	SELECT c.Country FROM country c WHERE c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Dodge') AND c.Country_Id IN (SELECT d.Country FROM driver d WHERE d.Make = 'Chevrolet')	SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Dodge" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Chevrolet"
1	SELECT SUM(Points) as TotalPoints, AVG(Points) as AvgPoints FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
1	SELECT AVG(Points) average_points, SUM(Points) total_points FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
1	SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver GROUP BY Country)	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
1	SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver GROUP BY Country)	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
1	SELECT manager, sponsor FROM team JOIN (SELECT Team_ID, COUNT(Driver_ID) AS DriverCount FROM team_driver GROUP BY Team_ID ORDER BY DriverCount DESC LIMIT 1) AS MostDrivers ON team.Team_ID = MostDrivers.Team_ID	SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Manager, Sponsor FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Driver_ID) AS Cnt FROM team_driver GROUP BY Team_ID) tmp)	SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1
1	SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT t.Manager, t.Car_Owner FROM team AS t JOIN team_driver AS td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID HAVING COUNT(td.Driver_ID) >= 2	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT COUNT(1) FROM institution	SELECT count(*) FROM institution
1	SELECT COUNT(1) FROM institution	SELECT count(*) FROM institution
1	SELECT Name FROM institution ORDER BY institution.Name ASC	SELECT Name FROM institution ORDER BY Name ASC
1	SELECT Name FROM institution ORDER BY LOWER(Name) ASC	SELECT Name FROM institution ORDER BY Name ASC
0	SELECT Name FROM institution ORDER BY Founded ASC, Name ASC	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT `Name` FROM `institution` ORDER BY `Founded` ASC	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT institution.City, institution.Province FROM institution	SELECT City ,  Province FROM institution
1	SELECT institution.City, institution.Province FROM institution	SELECT City ,  Province FROM institution
1	SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT MAX(Enrollment) Maximum, MIN(Enrollment) Minimum FROM institution	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT Affiliation FROM institution WHERE City != 'Vancouver'	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT Affiliation FROM institution WHERE City != 'Vancouver'	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
1	SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
1	SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1	SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
0	SELECT institution.Stadium FROM institution WHERE institution.Enrollment = (SELECT MAX(Enrollment) FROM institution)	SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
1	SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID	SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID
1	SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID	SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID
1	SELECT Nickname FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1
1	SELECT Nickname FROM Championship INNER JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY institution.Enrollment ASC LIMIT 1	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1
0	SELECT Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC, i.Name ASC	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
0	SELECT Name FROM institution AS i JOIN Championship AS c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
1	SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1	SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1	SELECT SUM(Championship.Number_of_Championships) FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE institution.Affiliation LIKE 'public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT SUM(Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'Public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT DISTINCT Affiliation, COUNT(*) OVER (PARTITION BY Affiliation) FROM institution	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM institution GROUP BY Affiliation))	SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM institution GROUP BY Affiliation) AS SubQuery)	SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1	SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
1	SELECT Founded, COUNT(*) FROM institution WHERE Founded IS NOT NULL GROUP BY Founded HAVING COUNT(*) > 1	SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
0	SELECT Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
1	SELECT Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
0	SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')	select sum(enrollment) from institution where city  =  "vancouver" or city  =  "calgary"
0	SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'	select sum(enrollment) from institution where city  =  "vancouver" or city  =  "calgary"
1	SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)	SELECT count(DISTINCT Province) FROM institution
1	SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution)	SELECT count(DISTINCT Province) FROM institution
1	SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses	SELECT * FROM warehouses
1	SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses	SELECT * FROM warehouses
1	SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT DISTINCT b.Contents FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT Contents FROM Boxes WHERE Value > 150	SELECT CONTENTS FROM boxes WHERE Value  >  150
1	SELECT Contents FROM Boxes WHERE Value > 150	SELECT CONTENTS FROM boxes WHERE Value  >  150
1	SELECT b.Warehouse, AVG(b.Value) AS AverageValue FROM Boxes b GROUP BY b.Warehouse	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse
1	SELECT AVG(B.Value), B.Warehouse FROM Boxes AS B GROUP BY B.Warehouse	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse
1	SELECT AVG(Value) AS AvgValue, SUM(Value) AS SumValue FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Value) Average, SUM(Value) Total FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Warehouses.Capacity) AS AverageCapacity, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT AVG(Capacity) AS Average, SUM(Capacity) AS Total FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
0	SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(TotalValue) FROM (SELECT SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents) AS SubQuery)	SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1
0	SELECT B.Contents FROM Boxes AS B WHERE B.Value = (SELECT MAX(Value) FROM Boxes)	SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1
1	SELECT AVG(Value) AS AverageValue FROM Boxes	SELECT avg(value) FROM boxes
1	SELECT AVG(Value) AS AverageValue FROM Boxes	SELECT avg(value) FROM boxes
1	SELECT DISTINCT Contents FROM Boxes	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT DISTINCT b.Contents FROM Boxes AS b	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) AS UniqueContents	SELECT count(DISTINCT CONTENTS) FROM boxes
1	SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) AS UniqueContents	SELECT count(DISTINCT CONTENTS) FROM boxes
0	SELECT DISTINCT W.Location FROM Warehouses W	SELECT count(DISTINCT LOCATION) FROM warehouses
0	SELECT DISTINCT WarehouseLocations.Location FROM Warehouses AS WarehouseLocations	SELECT count(DISTINCT LOCATION) FROM warehouses
1	SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(B.Value) FROM Boxes B INNER JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Location IN ('Chicago', 'New York')	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(b.Value) FROM Boxes b INNER JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
0	SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT B.Contents FROM Boxes B, Warehouses W1, Warehouses W2 WHERE B.Warehouse = W1.Code AND W1.Location = 'Chicago' AND B.Contents IN (SELECT Contents FROM Boxes WHERE Warehouse = W2.Code AND W2.Location = 'New York')	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes EXCEPT SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York')	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
0	SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND NOT EXISTS (SELECT * FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
0	SELECT w.Location FROM Warehouses w WHERE w.Code IN (SELECT b.Warehouse FROM Boxes b WHERE b.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes b2 WHERE b2.Warehouse = w.Code AND b2.Contents = 'Scissors')	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
0	SELECT DISTINCT W.Location FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents IN ('Rocks', 'Scissors')	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
1	SELECT DISTINCT W.Code FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND (B.Contents = 'Rocks' OR B.Contents = 'Scissors')	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
0	SELECT Location FROM Warehouses WHERE Code IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks' INTERSECT SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Scissors')	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
0	SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors'))	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
1	SELECT Code AS BoxCode, Contents AS BoxContents FROM Boxes ORDER BY Value	SELECT code ,  CONTENTS FROM boxes ORDER BY value
1	SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value	SELECT code ,  CONTENTS FROM boxes ORDER BY value
0	SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)	SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1
0	SELECT Code, Contents FROM Boxes WHERE Value IN (SELECT MIN(Value) FROM Boxes)	SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1
1	SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes AS B)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT Contents FROM Boxes GROUP BY Contents ORDER BY Contents	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
1	SELECT DISTINCT B.Contents FROM Boxes B ORDER BY B.Contents ASC	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
0	SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Rocks')	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
0	SELECT B.Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
1	SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents LIKE 'Scissors')	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
1	SELECT B.Code, B.Contents FROM Boxes B WHERE B.Value > (SELECT MAX(B2.Value) FROM Boxes B2 WHERE B2.Contents = 'Scissors')	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
0	SELECT SUM(b.Value) FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Capacity = (SELECT MAX(Capacity) FROM Warehouses)	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1
0	SELECT SUM(B.Value) FROM Boxes B, Warehouses W WHERE B.Warehouse = W.Code AND W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1
1	SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150.0	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT B.Warehouse, AVG(B.Value) AS AvgValue FROM Boxes B GROUP BY B.Warehouse HAVING AVG(B.Value) > 150	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT Contents, COUNT(Boxes.Code), SUM(Boxes.Value) FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Location, SUM(Capacity) Total_Capacity, AVG(Capacity) Average_Capacity, MAX(Capacity) Maximum_Capacity FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT sum(Capacity) FROM Warehouses	SELECT sum(capacity) FROM warehouses
1	SELECT sum(Capacity) FROM Warehouses	SELECT sum(capacity) FROM warehouses
1	SELECT Warehouses.Location, MAX(Boxes.Value) AS MaxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location	SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
1	SELECT Warehouses.Location, MAX(Boxes.Value) AS MaxValue FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Location	SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
0	SELECT W.Code, COUNT(B.Code) FROM Warehouses AS W LEFT OUTER JOIN Boxes AS B ON W.Code = B.Warehouse GROUP BY W.Code	SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse
1	SELECT Warehouse, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Warehouse	select warehouse ,  count(*) from boxes group by warehouse
1	SELECT COUNT(DISTINCT Location) FROM Warehouses WHERE Code IN (SELECT DISTINCT Warehouse FROM Boxes WHERE Contents = 'Rocks')	SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
0	SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents LIKE '%Rocks%'	SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
1	SELECT Boxes.Code AS BoxCode, Warehouses.Location AS WarehouseLocation FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT Boxes.Code AS BoxCode, Warehouses.Location AS WarehouseLocation FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT b.Code FROM Boxes AS b INNER JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
1	SELECT B.Code FROM Boxes AS B, Warehouses AS W WHERE B.Warehouse = W.Code AND W.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
1	SELECT b.Warehouse, COUNT(b.Code) FROM Boxes b GROUP BY b.Warehouse	SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse
1	SELECT Warehouse, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Warehouse	SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse
1	SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS TypesOfContents FROM Boxes b GROUP BY b.Warehouse	SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse
1	SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS TypesOfContents FROM Boxes b GROUP BY b.Warehouse	SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse
1	SELECT W.Code FROM Warehouses W WHERE (SELECT COUNT(B.Code) FROM Boxes B WHERE B.Warehouse = W.Code) > W.Capacity	SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity
1	SELECT wh.Code FROM Warehouses AS wh JOIN Boxes AS bx ON wh.Code = bx.Warehouse GROUP BY wh.Code HAVING COUNT(bx.Code) > wh.Capacity	SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity
1	SELECT SUM(b.Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location != 'Chicago'	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT SUM(Value) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location NOT IN ('Chicago')	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT University_Name, City, State FROM university ORDER BY University_Name	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1	SELECT University_Name, City, State FROM university ORDER BY University_Name	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1	SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT MAX(Enrollment) Maximum, AVG(Enrollment) Average, MIN(Enrollment) Minimum FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT MAX(Enrollment) Maximum, AVG(Enrollment) Average, MIN(Enrollment) Minimum FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(U.Enrollment) FROM university U)	SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)
1	SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(uni.Enrollment) FROM university uni)	select team_name from university where enrollment  >  (select avg(enrollment) from university)
1	SELECT Home_Conference FROM university GROUP BY Home_Conference	SELECT DISTINCT home_conference FROM University
1	SELECT Home_Conference FROM university GROUP BY Home_Conference	SELECT DISTINCT home_conference FROM University
1	SELECT Home_Conference, COUNT(University_ID) AS NumberOfUniversities FROM university GROUP BY Home_Conference	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
1	SELECT Home_Conference, COUNT(*) AS Count_of_Universities FROM university GROUP BY Home_Conference	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
0	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM university GROUP BY State) AS Counts)	SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM university GROUP BY State) AS subquery)	SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1
1	SELECT u.Home_Conference FROM university u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
1	SELECT u.Home_Conference FROM university AS u GROUP BY u.Home_Conference HAVING AVG(u.Enrollment) > 2000	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
0	SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(Total_Enrollment) FROM (SELECT SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference) AS SubQuery)	SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1
1	SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1	SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1
1	SELECT Major_Name AS Name, Major_Code AS Code FROM major ORDER BY Major_Code	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT major.Major_Name, major.Major_Code FROM major ORDER BY Major_Code	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT Major_Name, Rank FROM major CROSS JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID CROSS JOIN university ON major_ranking.University_ID = university.University_ID WHERE University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1	SELECT mr.Rank, m.Major_Name FROM university u, major_ranking mr, major m WHERE u.University_ID = mr.University_ID AND mr.Major_ID = m.Major_ID AND u.University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1	SELECT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'	SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'
0	SELECT u.University_Name, u.City, u.State FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1 AND mr.University_ID = u.University_ID)	SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'
0	SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1
0	SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Rank = 1 GROUP BY mr.University_ID HAVING COUNT(mr.Major_ID) = (SELECT MAX(c) FROM (SELECT COUNT(Major_ID) AS c FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS max_count))	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1
0	SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)	SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1
0	SELECT University_Name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)	SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1
0	SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') INTERSECT SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education')) AS mr ON u.University_ID = mr.University_ID	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'
0	SELECT U.University_Name FROM university U JOIN (SELECT MR.University_ID FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name IN ('Accounting', 'Urban Education') GROUP BY MR.University_ID HAVING COUNT(DISTINCT M.Major_Name) = 2) AS J ON U.University_ID = J.University_ID	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'
1	SELECT U.University_Name, O.Rank FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'	SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'
1	SELECT U.University_Name, O.Rank FROM university U INNER JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE U.State = 'Wisconsin'	SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'
0	SELECT University_Name FROM university u WHERE EXISTS (SELECT 1 FROM overall_ranking r WHERE r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1)	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1
0	SELECT u.University_Name FROM university u INNER JOIN (SELECT University_ID FROM overall_ranking ORDER BY Research_point DESC LIMIT 1) r ON u.University_ID = r.University_ID	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1
1	SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point
1	SELECT university.University_Name FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point
0	SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  "Accounting"
0	SELECT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  "Accounting"
0	SELECT SUM(Enrollment) FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT SUM(Enrollment) FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT U.University_Name, O.Citation_point FROM university AS U, overall_ranking AS O WHERE U.University_ID = O.University_ID AND O.Reputation_point >= (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 1 OFFSET 2)	SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3
0	SELECT u.University_Name, o.Citation_point FROM university u LEFT JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point DESC LIMIT 3	SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3
1	SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(DISTINCT University_ID) > 2;	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT State FROM (SELECT State, Enrollment FROM university) AS sub WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT Title FROM Movies WHERE Rating = ''	SELECT title FROM movies WHERE rating  =  'null'
1	SELECT Title FROM Movies WHERE Rating = ''	SELECT title FROM movies WHERE rating  =  'null'
1	SELECT Title FROM Movies WHERE Rating LIKE 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT Title FROM Movies WHERE Rating LIKE 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie) AS MovieTitle FROM MovieTheaters WHERE Name = 'Odeon'	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
1	SELECT (SELECT Title FROM Movies WHERE Code = MovieTheaters.Movie) AS MovieTitle FROM MovieTheaters WHERE Name = 'Odeon'	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
1	SELECT M.Title, T.Name FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT M.Title, T.Name FROM Movies AS M, MovieTheaters AS T WHERE M.Code = T.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT COUNT(*) FROM Movies WHERE TRIM(Rating) = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
1	SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
0	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT COUNT(DISTINCT Movie) FROM MovieTheaters	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(MovieTheaters.Code) FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
0	SELECT COUNT(DISTINCT MovieTheaters.Code) FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
1	SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
1	SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
0	SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')	SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'
0	SELECT MT.Name FROM MovieTheaters MT JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating IN ('G', 'PG')	SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'
1	SELECT M.Title FROM Movies AS M, MovieTheaters AS MT WHERE M.Code = MT.Movie AND (MT.Name = 'Odeon' OR MT.Name = 'Imperial')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'
1	SELECT Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie AND MovieTheaters.Name IN ('Odeon', 'Imperial')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'
1	SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon') INTERSECT SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
0	SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT1, MovieTheaters MT2 WHERE M.Code = MT1.Movie AND M.Code = MT2.Movie AND MT1.Name = 'Odeon' AND MT2.Name = 'Imperial'	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
0	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')	SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
0	SELECT Title FROM Movies M WHERE NOT EXISTS (SELECT NULL FROM MovieTheaters MT WHERE MT.Movie = M.Code AND MT.Name = 'Odeon')	SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
1	SELECT Title FROM Movies ORDER BY Title ASC, Code ASC	SELECT title FROM movies ORDER BY title
1	SELECT m.Title FROM Movies AS m ORDER BY m.Title ASC	SELECT title FROM movies ORDER BY title
1	SELECT Title FROM Movies ORDER BY Rating ASC	SELECT title FROM movies ORDER BY rating
0	SELECT Title FROM Movies ORDER BY Rating, Title	SELECT title FROM movies ORDER BY rating
1	SELECT Name FROM (SELECT Name, COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name ORDER BY MovieCount DESC) AS RankedTheaters LIMIT 1	SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1
0	SELECT Name FROM MovieTheaters GROUP BY Movie HAVING COUNT(Movie) > 0 ORDER BY COUNT(Movie) DESC LIMIT 1	SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1
1	SELECT M.Title FROM Movies M JOIN MovieTheaters T ON M.Code = T.Movie GROUP BY M.Title ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
0	SELECT M.Title FROM Movies M, MovieTheaters T WHERE M.Code = T.Movie GROUP BY M.Title HAVING COUNT(T.Name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM MovieTheaters GROUP BY Movie) AS SubQuery)	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) AS MovieCount, Rating FROM Movies GROUP BY Rating	SELECT count(*) ,  rating FROM movies GROUP BY rating
1	SELECT m.Rating, COUNT(m.Code) FROM Movies m GROUP BY m.Rating	SELECT count(*) ,  rating FROM movies GROUP BY rating
0	SELECT count(Code) FROM Movies WHERE Rating IS NOT NULL	SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating
0	SELECT COUNT(*) AS NumberOfMoviesWithRating FROM Movies WHERE Rating IS NOT NULL	SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating
0	SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE M.Code = MT.Movie)	SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1
0	SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT Code FROM Movies WHERE Movies.Code = MovieTheaters.Movie)	SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1
1	SELECT MovieTheaters.Name FROM MovieTheaters LEFT OUTER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Code IS NULL	SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'
1	SELECT Name FROM MovieTheaters WHERE NOT EXISTS (SELECT Code FROM Movies WHERE Movies.Code = MovieTheaters.Movie)	SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'
1	SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G')	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT Title FROM Movies WHERE Title IS NOT NULL	SELECT title FROM movies
1	SELECT Title FROM Movies WHERE Title IS NOT NULL	SELECT title FROM movies
1	SELECT DISTINCT m.Rating FROM Movies m	SELECT DISTINCT rating FROM movies
1	SELECT Rating FROM Movies WHERE Rating IS NOT NULL GROUP BY Rating	SELECT DISTINCT rating FROM movies
1	SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating IS NULL	SELECT * FROM movies WHERE rating  =  'null'
1	SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Rating IS NULL	SELECT * FROM movies WHERE rating  =  'null'
1	SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Movie IS NULL	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')
1	SELECT Title FROM Movies M WHERE M.Code NOT IN (SELECT MT.Movie FROM MovieTheaters MT)	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')
0	SELECT Name FROM Client WHERE AccountNumber IN (SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package))	SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
1	SELECT Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient ORDER BY Package.Weight DESC LIMIT 1	SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
1	SELECT SUM(Weight) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1	SELECT SUM(P.Weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT e.Salary, e.Position FROM Employee e WHERE e.Name = 'Turanga Leela'	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT emp.Position, emp.Salary FROM Employee emp WHERE emp.Name = 'Turanga Leela'	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT AVG(Salary) FROM Employee WHERE Position LIKE 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
1	SELECT AVG(Salary) FROM Employee WHERE Position LIKE 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
1	SELECT clearance.Level FROM Has_Clearance AS clearance INNER JOIN Employee AS emp ON clearance.Employee = emp.EmployeeID WHERE emp.Position = 'Physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT Level FROM Has_Clearance h INNER JOIN Employee e ON h.Employee = e.EmployeeID WHERE e.Position LIKE 'physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT COUNT(*) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT PackageNumber FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = "leo wong";
1	SELECT Package.PackageNumber FROM Package, Client WHERE Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong";
0	SELECT * FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') UNION SELECT * FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1	SELECT DISTINCT P.PackageNumber FROM Package P JOIN Client C ON P.Sender = C.AccountNumber OR P.Recipient = C.AccountNumber WHERE C.Name = 'Leo Wong'	SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
0	SELECT COUNT(*) FROM Package p JOIN Client s ON p.Sender = s.AccountNumber JOIN Client r ON p.Recipient = r.AccountNumber WHERE s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = "Ogden Wernstrom" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
0	SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name LIKE 'Leo Wong')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = "Ogden Wernstrom" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1	SELECT Contents FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
1	SELECT Contents FROM Package AS p JOIN Client AS c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
0	SELECT Package.PackageNumber, MAX(Package.Weight) AS MaxWeight FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name LIKE '%John%' GROUP BY Package.PackageNumber ORDER BY MaxWeight DESC LIMIT 1	SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE "John";
0	SELECT PackageNumber, Weight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1	SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE "John";
1	SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3	SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;
1	SELECT `PackageNumber`, `Weight` FROM `Package` ORDER BY `Weight` ASC LIMIT 3	SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;
1	SELECT C.Name, COUNT(P.PackageNumber) AS TotalPackages FROM Client C INNER JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber ORDER BY TotalPackages DESC LIMIT 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;
1	SELECT Client.Name, COUNT(*) FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;
0	SELECT Name, MIN(NumPackages) FROM (SELECT Client.Name AS Name, COUNT(Package.PackageNumber) AS NumPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.AccountNumber) AS SubQuery	select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;
0	SELECT Recipient, COUNT(*) AS PackageCount FROM Package GROUP BY Recipient ORDER BY PackageCount ASC LIMIT 1	select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;
0	SELECT C.Name FROM Client C, Package P WHERE C.AccountNumber = P.Sender GROUP BY C.AccountNumber HAVING COUNT(P.Sender) > 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;
0	SELECT Name FROM (SELECT C.Name, COUNT(*) AS PackageCount FROM Client C JOIN Package P ON C.AccountNumber = P.Sender GROUP BY C.AccountNumber) AS SubQuery WHERE PackageCount > 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY Name ASC	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT Name, Coordinates FROM Planet ORDER BY Name ASC	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT * FROM Employee WHERE Employee.EmployeeID = Shipment.Manager AND Employee.Name = 'Phillip J. Fry')	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
0	SELECT ShipmentID FROM Shipment WHERE EXISTS (SELECT 1 FROM Employee WHERE Employee.EmployeeID = Shipment.Manager AND Employee.Name = 'Phillip J Fry')	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
1	SELECT shipment.Date FROM Shipment shipment	SELECT Date FROM Shipment;
1	SELECT s.Date FROM Shipment s	SELECT Date FROM Shipment;
1	SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars';	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT s.ShipmentID FROM Shipment s, Planet p WHERE s.Planet = p.PlanetID AND p.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT Shipment.ShipmentID FROM Shipment, Employee, Planet WHERE Shipment.Manager = Employee.EmployeeID AND Shipment.Planet = Planet.PlanetID AND Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT DISTINCT s.ShipmentID FROM Shipment s, Employee e, Planet p WHERE s.Manager = e.EmployeeID AND s.Planet = p.PlanetID AND e.Name = 'Turanga Leela' AND p.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
0	SELECT DISTINCT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
1	SELECT Planet.Name, COUNT(*) AS ShipmentsCount FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.PlanetID	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;
0	SELECT Name, COUNT(ShipmentID) AS Shipments FROM Planet LEFT OUTER JOIN Shipment ON PlanetID = Planet GROUP BY PlanetID	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;
0	SELECT Name FROM Planet ORDER BY (SELECT COUNT(*) FROM Shipment WHERE Shipment.Planet = Planet.PlanetID) DESC LIMIT 1	SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;
0	SELECT P.Name FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name ORDER BY COUNT(S.ShipmentID) DESC LIMIT 1	SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;
1	SELECT E.Name, COUNT(S.Manager) FROM Shipment S LEFT JOIN Employee E ON S.Manager = E.EmployeeID GROUP BY E.EmployeeID	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1	SELECT E.Name, COUNT(*) AS ShipmentsCount FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID, E.Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1	SELECT sum(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
1	SELECT SUM(Weight) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
1	SELECT Planet.Name, TotalWeight FROM Planet JOIN (SELECT Shipment.Planet, SUM(Package.Weight) AS TotalWeight FROM Shipment JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Shipment.Planet) AS WeightData ON Planet.PlanetID = WeightData.Planet	select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;
0	SELECT Name, TotalWeight FROM (SELECT Planet.Name AS Name, SUM(Package.Weight) AS TotalWeight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name) AS WeightSummary	select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;
1	SELECT Planet.Name FROM Planet INNER JOIN Shipment ON Planet.PlanetID = Shipment.Planet INNER JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT p.Name FROM Planet p WHERE EXISTS (SELECT 1 FROM Shipment s JOIN Package pk ON s.ShipmentID = pk.Shipment WHERE s.Planet = p.PlanetID GROUP BY s.Planet HAVING SUM(pk.Weight) > 30)	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' AND c.Name = 'Zapp Brannigan'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0	SELECT COUNT(Package.PackageNumber) FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Client ON Package.Sender = Client.AccountNumber INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
1	SELECT p.PackageNumber FROM Package p INNER JOIN Shipment s ON p.Shipment = s.ShipmentID INNER JOIN Planet pl ON s.Planet = pl.PlanetID INNER JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
0	SELECT COUNT(Package.PackageNumber) FROM Package, Shipment, Planet, Client WHERE Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Package.Sender = Client.AccountNumber AND (Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
1	SELECT PackageNumber, Weight FROM Package WHERE Weight > 9 AND Weight < 31	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1	SELECT PackageNumber, Weight FROM Package WHERE Weight > 9.99 AND Weight < 30.01	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
0	SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III')	SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  "Omega III";
0	SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Omega III')	SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  "Omega III";
1	SELECT p.Name FROM Planet p INNER JOIN (SELECT Planet FROM Has_Clearance GROUP BY Planet HAVING COUNT(*) = 1) AS h ON p.PlanetID = h.Planet	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT P.Name FROM Planet P JOIN (SELECT Planet, COUNT(DISTINCT Employee) AS EmpCount FROM Has_Clearance GROUP BY Planet) AS H ON P.PlanetID = H.Planet WHERE H.EmpCount = 1	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT Name FROM Employee WHERE Salary > 4999.99 AND Salary < 10000.01	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
1	SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
0	SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = "mars" );
0	SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))	select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = "mars" );
1	SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL	SELECT count(*) FROM game
1	SELECT COUNT(*) FROM game WHERE Game_ID IS NOT NULL	SELECT count(*) FROM game
1	SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1	SELECT Title AS GameTitle, Developers AS GameDevelopers FROM game ORDER BY Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
0	SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1	SELECT AVG(Units_sold_Millions) FROM game WHERE Developers <> 'Nintendo'	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1	SELECT `Platform_name`, `Market_district` FROM `platform`	SELECT Platform_name ,  Market_district FROM platform
1	SELECT `Platform_name`, `Market_district` FROM `platform`	SELECT Platform_name ,  Market_district FROM platform
1	SELECT DISTINCT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT MAX(Rank_of_the_year) AS HighestRank, MIN(Rank_of_the_year) AS LowestRank FROM player	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT (SELECT MAX(Rank_of_the_year) FROM player) AS Max_Rank, (SELECT MIN(Rank_of_the_year) FROM player) AS Min_Rank	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT COUNT(*) FROM player p WHERE p.Rank_of_the_year < 3	SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1	SELECT COUNT(1) FROM player WHERE Rank_of_the_year <= 3	SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1	SELECT p.Player_name FROM player p ORDER BY p.Player_name ASC	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT p.Player_name FROM player AS p ORDER BY p.Player_name ASC	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
1	SELECT p.Player_name, p.College FROM player p ORDER BY p.Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
0	SELECT Player_name, Rank_of_the_year FROM player WHERE Player_ID IN (SELECT Player_ID FROM game_player WHERE Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World'))	SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  "Super Mario World"
0	SELECT DISTINCT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'	SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  "Super Mario World"
1	SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT DISTINCT Developers FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn'))	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT AVG(g.Units_sold_Millions) FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.Position = 'Guard'	SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT AVG(Units_sold_Millions) FROM game INNER JOIN game_player ON game.Game_ID = game_player.Game_ID INNER JOIN player ON game_player.Player_ID = player.Player_ID WHERE Position = 'Guard'	SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT g.Title, p.Platform_name FROM game AS g INNER JOIN platform AS p ON g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT g.Title, p.Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID AND p.Market_district IN ('Asia', 'USA')	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT g.Title FROM game g INNER JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district = 'Asia' OR p.Market_district = 'USA'	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT Franchise AS GameFranchise, COUNT(*) AS TotalGames FROM game GROUP BY Franchise	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
1	SELECT Franchise, COUNT(Game_ID) FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
0	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) AS Counts)	SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Game_ID) AS Count FROM game GROUP BY Franchise) tmp)	SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Franchise FROM (SELECT Franchise, COUNT(*) AS NumGames FROM game GROUP BY Franchise) AS FranchiseCount WHERE NumGames >= 2	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1	SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(DISTINCT g.Game_ID) > 1	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
0	SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT Player_ID FROM game_player WHERE If_active)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
1	SELECT Player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.Player_ID = p.Player_ID)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
0	SELECT Title FROM game WHERE Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' INTERSECT SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn')	SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Oklahoma" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
0	SELECT Title FROM game WHERE Game_ID IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' OR p.College = 'Auburn')	SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Oklahoma" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT Franchise FROM game GROUP BY Franchise	SELECT DISTINCT Franchise FROM game
1	SELECT Franchise FROM game GROUP BY Franchise	SELECT DISTINCT Franchise FROM game
0	SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))	SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
0	SELECT Title FROM game WHERE Game_ID NOT IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))	SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT Name FROM press ORDER BY Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT Name FROM press ORDER BY Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT AVG(Year_Profits_billion) avg_yearly_profit, MAX(Year_Profits_billion) max_yearly_profit FROM press	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0	SELECT p.Press_ID, AVG(p.Year_Profits_billion) AS AvgYearlyProfit, MAX(p.Year_Profits_billion) AS MaxYearlyProfit FROM press p GROUP BY p.Press_ID	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)	SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
0	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)	SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
1	SELECT Name FROM press p WHERE p.Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press UNION ALL SELECT MIN(Month_Profits_billion) FROM press)	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT COUNT(*) FROM author WHERE `Age` < 30	SELECT count(*) FROM author WHERE age  <  30
1	SELECT count(*) FROM author WHERE `Age` < 30	SELECT count(*) FROM author WHERE age  <  30
1	SELECT Gender, AVG(Age) FROM author GROUP BY Gender	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT Gender, AVG(Age) AS Avg_Age FROM author GROUP BY Gender	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT COUNT(Author_ID), Gender FROM author WHERE Age > 30 GROUP BY Gender	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT `Gender`, COUNT(*) AS `Count` FROM `author` WHERE `Age` > 30 GROUP BY `Gender`	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT `Title` FROM `book` ORDER BY `Release_date` DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT `Title` FROM `book` ORDER BY `Release_date` DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
1	SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
1	SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;	SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5
1	SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;	SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5
1	SELECT b.Book_Series FROM book b WHERE b.Sale_Amount > 1000 INTERSECT SELECT b.Book_Series FROM book b WHERE b.Sale_Amount < 500 GROUP BY b.Book_Series	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
1	SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
0	SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' INTERSECT SELECT Author_ID FROM book WHERE Book_Series = 'LT')	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'
0	SELECT Name FROM author WHERE Author_ID IN (SELECT Author_ID FROM book WHERE Book_Series = 'MM' INTERSECT SELECT Author_ID FROM book WHERE Book_Series = 'LT')	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'
1	SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT DISTINCT Author_ID FROM book)	SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)
1	SELECT Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)	select name from author where author_id not in (select author_id from book)
1	SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(DISTINCT book.Book_ID) > 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1	SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1	SELECT Title, Author.Name, Press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3	SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3
1	SELECT b.Title AS Book_Title, a.Name AS Author_Name, p.Name AS Press_Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3	SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3
1	SELECT p.Name, SUM(b.Sale_Amount) FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID	SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id
0	SELECT p.Name, SUM(b.Sale_Amount) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name	SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id
0	SELECT p.Name AS PublisherName, COUNT(b.Book_ID) AS TotalBooks FROM press p, book b WHERE p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID	SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name
0	SELECT p.Name, COUNT(b.Book_ID) FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID	SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name
1	SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1
1	SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1
1	SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(Book_ID) DESC LIMIT 1)	SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) = (SELECT MAX(Counted) FROM (SELECT COUNT(Book_ID) AS Counted FROM book GROUP BY Author_ID) AS Counts)	SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)	SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'
0	SELECT a.Name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor' AND b.Author_ID = a.Author_ID)	SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'
1	SELECT press.Name, press.Year_Profits_billion FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name, press.Year_Profits_billion HAVING COUNT(DISTINCT book.Book_ID) > 2	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT press.Name, press.Year_Profits_billion FROM press INNER JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 2	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT COUNT(author_name) FROM Authors	SELECT count(*) FROM Authors
1	SELECT author_name FROM Authors WHERE author_name IS NOT NULL	SELECT author_name FROM Authors
1	SELECT a.author_name, a.other_details FROM Authors a	SELECT author_name ,  other_details FROM Authors
1	SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'	SELECT other_details FROM Authors WHERE author_name  =  "Addison Denesik"
1	SELECT COUNT(*) FROM Documents WHERE document_id IS NOT NULL	SELECT count(*) FROM Documents
1	SELECT author_name FROM Documents WHERE document_id = 4 LIMIT 1	SELECT author_name FROM Documents WHERE document_id  =  4
1	SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil' AND document_description IS NOT NULL	SELECT author_name FROM Documents WHERE document_name  =  "Travel to Brazil"
1	SELECT count(*) FROM Documents WHERE author_name = 'Era Kerluke'	SELECT count(*) FROM Documents WHERE author_name  =  "Era Kerluke"
1	SELECT Documents.document_name, Documents.document_description FROM Documents	SELECT document_name ,  document_description FROM Documents
1	SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' AND document_id IS NOT NULL	SELECT document_id ,  document_name FROM Documents WHERE author_name  =  "Bianka Cummings"
0	SELECT author_name, other_details FROM Authors WHERE EXISTS (SELECT 1 FROM Documents WHERE Documents.author_name = Authors.author_name AND document_name = 'Travel to China')	SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  "Travel to China"
1	SELECT Documents.author_name, COUNT(Documents.document_id) FROM Documents GROUP BY Documents.author_name	SELECT author_name ,  count(*) FROM Documents GROUP BY author_name
0	SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) = (SELECT MAX(doc_count) FROM (SELECT COUNT(document_id) AS doc_count FROM Documents GROUP BY author_name) AS counts)	SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT a.author_name FROM Authors a, Documents d WHERE a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2	SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2
1	SELECT COUNT(*) AS total_processes FROM Business_Processes	SELECT count(*) FROM Business_processes
1	SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = '9'	SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9
1	SELECT BP.process_name FROM Business_Processes BP JOIN Business_Processes BP2 ON BP.process_id = BP2.next_process_id WHERE BP2.process_id = 9	SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)
1	SELECT COUNT(process_outcome_description) FROM Process_Outcomes	SELECT count(*) FROM Process_outcomes
1	SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes	SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes
1	SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code IN ('working')	SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  "working"
1	SELECT COUNT(*) FROM (SELECT * FROM Process_Status) AS all_statuses	SELECT count(*) FROM Process_status
1	SELECT p.process_status_code, p.process_status_description FROM Process_Status p	SELECT process_status_code ,  process_status_description FROM Process_status
1	SELECT process_status_description FROM Process_Status WHERE LOWER(process_status_code) = 'ct'	SELECT process_status_description FROM Process_status WHERE process_status_code  =  "ct"
1	SELECT COUNT(1) FROM Staff	SELECT count(*) FROM Staff
1	SELECT DISTINCT staff_id, staff_details FROM Staff	SELECT staff_id ,  staff_details FROM Staff
1	SELECT S.staff_details FROM Staff S WHERE S.staff_id = 100	SELECT staff_details FROM Staff WHERE staff_id  =  100
1	SELECT COUNT(staff_role_code) AS TotalStaffRoles FROM Ref_Staff_Roles	SELECT count(*) FROM Ref_staff_roles
1	SELECT staff_role_code AS 'Role Code', staff_role_description AS 'Role Description' FROM Ref_Staff_Roles	SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles
1	SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'	SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  "HR"
1	SELECT COUNT(*) FROM (SELECT document_id FROM Documents_Processes GROUP BY document_id)	SELECT count(DISTINCT document_id) FROM Documents_processes
1	SELECT DISTINCT process_id FROM Documents_Processes	SELECT DISTINCT process_id FROM Documents_processes
1	SELECT D.document_id FROM Documents D WHERE NOT EXISTS (SELECT 1 FROM Documents_Processes DP WHERE D.document_id = DP.document_id)	SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes
1	SELECT process_id FROM Business_Processes EXCEPT SELECT process_id FROM Documents_Processes	SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes
1	SELECT process_outcome_description, process_status_description FROM Process_Outcomes, Process_Status, Documents_Processes WHERE Documents_Processes.document_id = 0 AND Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code AND Documents_Processes.process_status_code = Process_Status.process_status_code	SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0
0	SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))	SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  "Travel to Brazil"
1	SELECT process_id, COUNT(*) FROM Documents_Processes GROUP BY process_id HAVING COUNT(*) > 0	SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id
1	SELECT COUNT(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9 AND staff_id IS NOT NULL	SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9
1	SELECT S.staff_id, COUNT(*) AS process_count FROM Staff_in_Processes AS S GROUP BY S.staff_id	SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id
1	SELECT S.staff_role_code, COUNT(*) FROM Staff_in_Processes AS S GROUP BY S.staff_role_code	SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code
1	SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3 AND staff_role_code IS NOT NULL	SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3
1	SELECT count(*) FROM Agencies	SELECT count(*) FROM Agencies
1	SELECT COUNT(ALL agency_id) FROM Agencies	SELECT count(*) FROM Agencies
1	SELECT `agency_id`, `agency_details` FROM `Agencies`	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT DISTINCT agency_id, agency_details FROM Agencies	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT count(*) FROM Clients	SELECT count(*) FROM Clients
1	SELECT count(*) FROM Clients	SELECT count(*) FROM Clients
1	SELECT `client_id`, `client_details` FROM `Clients`	SELECT client_id ,  client_details FROM Clients
1	SELECT `client_id`, `client_details` FROM `Clients`	SELECT client_id ,  client_details FROM Clients
0	SELECT Agencies.agency_id, COUNT(Clients.client_id) AS NumberOfClients FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id	SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id
0	SELECT Agencies.agency_id, COUNT(Clients.client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id	SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id
0	SELECT A.agency_id, A.agency_details FROM Agencies A, Clients C WHERE A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(client_id) AS cnt FROM Clients GROUP BY agency_id) AS subquery)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
0	SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details = 'Mac')	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1	SELECT agency_details FROM Agencies, Clients WHERE Agencies.agency_id = Clients.agency_id AND Clients.client_details LIKE '%Mac%'	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
1	SELECT C.client_details, A.agency_details FROM Clients C JOIN Agencies A ON C.agency_id = A.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT A.agency_details, C.client_details FROM Agencies A JOIN Clients C ON A.agency_id = C.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT c.sic_code, COUNT(c.client_id) FROM Clients c GROUP BY c.sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1	SELECT client_id, client_details FROM Clients WHERE sic_code LIKE 'Bad'	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
0	SELECT agency_id, agency_details FROM Agencies WHERE EXISTS (SELECT 1 FROM Clients WHERE Clients.agency_id = Agencies.agency_id)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id
0	SELECT DISTINCT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT Agencies.agency_id FROM Agencies LEFT OUTER JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE Clients.agency_id IS NULL	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT COUNT(*) FROM Invoices WHERE invoice_status IS NOT NULL	SELECT count(*) FROM Invoices
1	SELECT COUNT(*) FROM Invoices WHERE invoice_status IS NOT NULL	SELECT count(*) FROM Invoices
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_details <> ''	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_status IS NOT NULL	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1	SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id HAVING COUNT(*) > 0	SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id
1	SELECT client_id, COUNT(*) AS TotalInvoices FROM Invoices GROUP BY client_id	SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id
1	SELECT C.client_id, C.client_details FROM Clients C INNER JOIN Invoices I ON C.client_id = I.client_id GROUP BY C.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1	SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
1	SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY COUNT(i.invoice_id) DESC LIMIT 1	SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
1	SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1	SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
0	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS SubCounts)	SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
0	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status) AS subquery)	SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
1	SELECT Invoices.invoice_status AS Status, Invoices.invoice_details AS Details, Clients.client_id AS ClientID, Clients.client_details AS ClientDetails, Agencies.agency_id AS AgencyID, Agencies.agency_details AS AgencyDetails FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT i.invoice_status AS Status, i.invoice_details AS Details, c.client_id AS ClientID, c.client_details AS ClientDetails, a.agency_id AS AgencyID, a.agency_details AS AgencyDetails FROM Invoices i, Clients c, Agencies a WHERE i.client_id = c.client_id AND c.agency_id = a.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT meeting_type, other_details FROM Meetings WHERE meeting_type IS NOT NULL	SELECT meeting_type ,  other_details FROM meetings
1	SELECT meeting_type AS Type, other_details AS Details FROM Meetings	SELECT meeting_type ,  other_details FROM meetings
1	SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT Payments.payment_id, Payments.payment_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.payment_id IS NULL	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments	SELECT count(*) FROM Payments
1	SELECT COUNT(payment_id) AS NumberOfPayments FROM Payments	SELECT count(*) FROM Payments
1	SELECT payment_id, invoice_id, payment_details FROM Payments WHERE payment_id IS NOT NULL	SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
1	SELECT payment_id, invoice_id, payment_details FROM Payments WHERE payment_id IS NOT NULL	SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
0	SELECT DISTINCT `invoice_id`, `invoice_status` FROM `Invoices`	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id IN (SELECT invoice_id FROM Payments)	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT invoice_id, COUNT(*) FROM Payments GROUP BY invoice_id	SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id
1	SELECT invoice_id, COUNT(*) FROM Payments GROUP BY invoice_id	SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (SELECT invoice_id FROM Payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1)	SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
0	SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I, Payments P WHERE I.invoice_id = P.invoice_id GROUP BY I.invoice_id, I.invoice_status, I.invoice_details HAVING COUNT(P.payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery)	SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM Staff WHERE 1=1	SELECT count(*) FROM Staff
1	SELECT COUNT(staff_id) AS StaffCount FROM Staff	SELECT count(*) FROM Staff
0	SELECT a.agency_id, COUNT(s.staff_id) AS staff_count FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id	SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
0	SELECT a.agency_id, COUNT(s.staff_id) FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id	SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
0	SELECT A.agency_id, A.agency_details FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id HAVING COUNT(S.staff_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(staff_id) AS COUNT FROM Staff GROUP BY agency_id) AS Counts)	SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT A.agency_id, A.agency_details FROM Agencies A JOIN Staff S ON A.agency_id = S.agency_id GROUP BY A.agency_id ORDER BY COUNT(S.staff_id) DESC LIMIT 1	SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT meeting_outcome AS OutcomeCode, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY OutcomeCode	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1	SELECT meeting_outcome, COUNT(*) AS TotalMeetings FROM Meetings GROUP BY meeting_outcome	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1	SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id	SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id
1	SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id	SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id
0	SELECT client_id, meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type, client_id	SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1	SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type	SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1	SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1	SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m, Clients c WHERE m.client_id = c.client_id	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
0	SELECT M.meeting_id, IFNULL(COUNT(SIM.staff_id), 0) AS staff_count FROM Meetings M LEFT JOIN Staff_in_Meetings SIM ON M.meeting_id = SIM.meeting_id GROUP BY M.meeting_id	SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id
0	SELECT m.meeting_id, COUNT(s.staff_id) FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id	SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id
1	SELECT s.staff_id, COUNT(m.meeting_id) AS meetings_count FROM Staff_in_Meetings s JOIN Meetings m ON s.meeting_id = m.meeting_id GROUP BY s.staff_id ORDER BY meetings_count ASC LIMIT 1	SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;
0	SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT COUNT(meeting_id) FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC LIMIT 1)	SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings)	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM Staff_in_Meetings)	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT COUNT(*) FROM Staff s WHERE NOT EXISTS (SELECT 1 FROM Staff_in_Meetings sim WHERE sim.staff_id = s.staff_id)	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Meetings ON Clients.client_id = Meetings.client_id UNION SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients INNER JOIN Invoices ON Clients.client_id = Invoices.client_id	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT DISTINCT client_id, client_details FROM Clients WHERE EXISTS (SELECT 1 FROM Meetings WHERE Meetings.client_id = Clients.client_id) OR EXISTS (SELECT 1 FROM Invoices WHERE Invoices.client_id = Clients.client_id)	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
0	SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM Staff_in_Meetings sim) AND s.staff_details LIKE '%s%'	SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE "%s%" GROUP BY staff_id HAVING count(*)  >=  1
0	SELECT s.staff_id, s.staff_details FROM Staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM Staff_in_Meetings sim) AND s.staff_details LIKE '%s%'	SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE "%s%" GROUP BY staff_id HAVING count(*)  >=  1
1	SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE EXISTS (SELECT 1 FROM Meetings M WHERE M.client_id = C.client_id GROUP BY M.client_id HAVING COUNT(M.meeting_id) = 1) AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT start_date_time, end_date_time, client_details, staff_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
0	SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id LEFT JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id LEFT JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
                     easy                 medium               hard                 extra                all                 
count                0                    0                    0                    0                    2147                
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.660               
