1	SELECT COUNT(*) AS ClubCount FROM club	SELECT count(*) FROM club
1	SELECT COUNT(DISTINCT Club_ID) FROM club	SELECT count(*) FROM club
1	SELECT club.Name FROM club ORDER BY club.Name	SELECT Name FROM club ORDER BY Name ASC
1	SELECT club.Name FROM club ORDER BY club.Name	SELECT Name FROM club ORDER BY Name ASC
1	SELECT club.Manager AS Manager, club.Captain AS Captain FROM club	SELECT Manager ,  Captain FROM club
1	SELECT club.Manager AS Manager, club.Captain AS Captain FROM club	SELECT Manager ,  Captain FROM club
1	SELECT Name FROM club WHERE Manufacturer != 'Nike'	SELECT Name FROM club WHERE Manufacturer != "Nike"
1	SELECT Name FROM club WHERE Manufacturer != 'Nike'	SELECT Name FROM club WHERE Manufacturer != "Nike"
0	SELECT Name FROM player ORDER BY Wins_count ASC, Name	SELECT Name FROM player ORDER BY Wins_count ASC
1	SELECT Name FROM player AS p ORDER BY p.Wins_count ASC	SELECT Name FROM player ORDER BY Wins_count ASC
0	SELECT Name FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player)	SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
0	SELECT Name FROM player WHERE Earnings IN (SELECT MAX(Earnings) FROM player)	SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
1	SELECT DISTINCT Country FROM player WHERE Earnings > 1.2e6	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
1	SELECT Country FROM player GROUP BY Country HAVING MAX(Earnings) > 1200000	SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000
0	SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC, p.Country ASC LIMIT 1	SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1
0	SELECT Country FROM player WHERE Wins_count > 2 AND Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2)	SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1
1	SELECT Name AS PlayerName, (SELECT Name FROM club WHERE Club_ID = player.Club_ID) AS ClubName FROM player	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
1	SELECT player.Name, club.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID WHERE player.Club_ID IS NOT NULL	SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING MAX(Wins_count) > 2)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2 GROUP BY Club_ID)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2
1	SELECT player.Name FROM player INNER JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
1	SELECT p.Name FROM player p INNER JOIN club c ON p.Club_ID = c.Club_ID WHERE c.Manager = 'Sam Allardyce'	SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  "Sam Allardyce"
0	SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY AVG(p.Earnings) DESC	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
0	SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING AVG(Earnings) ORDER BY AVG(Earnings) DESC)	SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC
1	SELECT c.Manufacturer, COUNT(*) AS NumberOfClubs FROM club c GROUP BY c.Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
1	SELECT Manufacturer, COUNT(DISTINCT Club_ID) AS ClubsCount FROM club GROUP BY Manufacturer	SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
0	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS Counts)	SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM club GROUP BY Manufacturer) AS SubQuery)	SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT DISTINCT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	WITH ClubCounts AS (SELECT Manufacturer, COUNT(*) AS TotalClubs FROM club GROUP BY Manufacturer) SELECT Manufacturer FROM ClubCounts WHERE TotalClubs > 1	SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1
1	SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT p.Country FROM player p GROUP BY p.Country HAVING COUNT(p.Player_ID) > 1	SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1
1	SELECT Name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.Club_ID = c.Club_ID)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
1	SELECT Name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE club.Club_ID = player.Club_ID)	SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
0	SELECT p.Country FROM player p WHERE p.Earnings > 1400000 OR p.Earnings < 1100000	SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1	SELECT DISTINCT p1.Country FROM player p1 JOIN player p2 ON p1.Country = p2.Country WHERE p1.Earnings > 1400000 AND p2.Earnings < 1100000	SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000
1	SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT COUNT(DISTINCT Country) FROM player WHERE Country IS NOT NULL	SELECT COUNT (DISTINCT Country) FROM player
1	SELECT Earnings FROM player WHERE Country LIKE 'Australia' OR Country LIKE 'Zimbabwe'	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe') GROUP BY Player_ID	SELECT Earnings FROM player WHERE Country  =  "Australia" OR Country  =  "Zimbabwe"
1	SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c WHERE (SELECT COUNT(*) FROM Orders o WHERE o.customer_id = c.customer_id) > 2 AND (SELECT COUNT(*) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id) >= 3	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND customer_id IN (SELECT customer_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3)	SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3
1	SELECT O.order_id, O.order_status_code, COUNT(I.product_id) AS product_count FROM Orders O JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.order_id, O.order_status_code	SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
0	SELECT Orders.order_id, Orders.order_status_code, COUNT(Order_Items.product_id) AS NumberOfProducts FROM Orders LEFT JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.order_status_code	SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id
0	SELECT date_order_placed FROM Orders O WHERE O.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) OR EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.order_id = O.order_id GROUP BY OI.order_id HAVING COUNT(*) > 1)	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
1	SELECT date_order_placed FROM Orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM Orders) UNION SELECT date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING COUNT(Order_Items.order_id) > 1	SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1
1	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers EXCEPT SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id	SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id
0	SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE order_status_code IS NOT NULL)	SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id
1	SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items O WHERE P.product_id = O.product_id GROUP BY O.product_id HAVING COUNT(O.product_id) >= 2)	SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2
0	SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE (SELECT COUNT(*) FROM Order_Items oi WHERE oi.product_id = p.product_id) < 2	select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2
1	SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(*) >= 2	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
1	SELECT Orders.order_id, Orders.date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id, Orders.date_order_placed HAVING COUNT(*) >= 2	SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2
0	SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items o ON p.product_id = o.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(o.product_id) DESC LIMIT 1	SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1
0	SELECT product_id, product_name, product_price FROM Products JOIN Order_Items USING(product_id) GROUP BY product_id, product_name, product_price ORDER BY COUNT(product_id) DESC	SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1
1	SELECT O.order_id, SUM(P.product_price) AS TotalPrice FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id ORDER BY TotalPrice ASC LIMIT 1	SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1
0	SELECT order_id, SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id HAVING total_cost = (SELECT MIN(total_cost) FROM (SELECT SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_id) AS Sub)	select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1
0	WITH PaymentCounts AS (SELECT payment_method_code, COUNT(*) AS Count FROM Customer_Payment_Methods GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE Count = (SELECT MAX(Count) FROM PaymentCounts)	SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1
0	SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(count) FROM (SELECT COUNT(customer_id) AS count FROM Customer_Payment_Methods GROUP BY payment_method_code) AS subquery)	SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1
1	SELECT Customers.gender_code, COUNT(Order_Items.product_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code
0	SELECT gender_code, COUNT(DISTINCT Products.product_id) AS total_products FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code
0	SELECT gender_code, COUNT(Orders.order_id) AS order_count FROM Customers LEFT OUTER JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code
0	SELECT C.gender_code, COUNT(O.order_id) AS orders_count FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.gender_code	SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code
1	SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id	SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
0	SELECT A.customer_first_name, A.customer_middle_initial, A.customer_last_name, B.payment_method_code FROM Customers A LEFT JOIN Customer_Payment_Methods B ON A.customer_id = B.customer_id	SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
1	SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i INNER JOIN Shipments s ON i.invoice_number = s.invoice_number	SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number
0	SELECT I1.invoice_status_code, I1.invoice_date, S1.shipment_date FROM Invoices I1 LEFT JOIN Shipments S1 ON I1.invoice_number = S1.invoice_number	SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number
1	SELECT Products.product_name AS ProductName, Shipments.shipment_date AS ShipmentDate FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT DISTINCT Products.product_name, Shipments.shipment_date FROM Products, Order_Items, Shipment_Items, Shipments WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id AND Shipment_Items.shipment_id = Shipments.shipment_id	SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
1	SELECT OI.order_item_status_code, SH.shipment_tracking_number FROM Order_Items OI CROSS JOIN Shipment_Items SI ON OI.order_item_id = SI.order_item_id CROSS JOIN Shipments SH ON SI.shipment_id = SH.shipment_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
1	SELECT order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id	SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
0	SELECT DISTINCT Products.product_name, Products.product_color FROM Products, Order_Items, Shipment_Items WHERE Products.product_id = Order_Items.product_id AND Order_Items.order_item_id = Shipment_Items.order_item_id	SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT product_name, product_color FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items JOIN Shipment_Items ON Order_Items.order_item_id = Shipment_Items.order_item_id WHERE Order_Items.product_id = Products.product_id)	SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id
0	SELECT DISTINCT P.product_name AS Name, P.product_price AS Price, P.product_description AS Description FROM Products P, Order_Items OI, Orders O, Customers C WHERE P.product_id = OI.product_id AND OI.order_id = O.order_id AND O.customer_id = C.customer_id AND C.gender_code = 'female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
0	SELECT DISTINCT P.product_name AS Name, P.product_price AS Price, P.product_description AS Description FROM Products P, Order_Items OI, Orders O, Customers C WHERE P.product_id = OI.product_id AND OI.order_id = O.order_id AND O.customer_id = C.customer_id AND C.gender_code = 'female'	SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'
0	sql placeholder	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
0	SELECT DISTINCT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Orders EXCEPT SELECT invoice_number FROM Shipments)	SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )
0	sql placeholder	select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id
1	SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount FROM Orders o INNER JOIN Order_Items oi ON o.order_id = oi.order_id INNER JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed	SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id
1	SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id	SELECT count(DISTINCT customer_id) FROM Orders
1	SELECT COUNT(order_item_status_code) FROM (SELECT DISTINCT order_item_status_code FROM Order_Items)	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items	SELECT count(DISTINCT order_item_status_code) FROM Order_items
1	SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM Customer_Payment_Methods)	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT DISTINCT COUNT(*) OVER () FROM Customer_Payment_Methods GROUP BY payment_method_code	SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods
1	SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND LENGTH(phone_number) > 3	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%' AND LENGTH(phone_number) > 2	SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'
1	SELECT product_size FROM Products WHERE INSTR(product_name, 'Dell') > 0	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT product_size FROM Products WHERE INSTR(product_name, 'Dell') > 0	SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
1	SELECT P.product_price, P.product_size FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_id IS NOT NULL)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT P.product_price, P.product_size FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products WHERE product_id IS NOT NULL)	SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )
1	SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items WHERE product_id IS NOT NULL)	SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )
1	SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)	SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
1	SELECT order_status_code, date_order_placed FROM Orders WHERE order_status_code IS NOT NULL AND date_order_placed IS NOT NULL	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT order_status_code AS Status, date_order_placed AS Date FROM Orders	SELECT order_status_code ,  date_order_placed FROM Orders
1	SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'USA'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
0	SELECT address_line_1, town_city, county FROM Customers WHERE country LIKE 'United States'	SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'
1	SELECT C.customer_first_name AS Buyer, P.product_name AS Product FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id	SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
1	SELECT C.customer_first_name AS FirstName, P.product_name AS Product FROM Customers C, Orders O, Order_Items OI, Products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id	SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
1	SELECT COUNT(shipment_id) FROM Shipment_Items	SELECT count(*) FROM Shipment_Items
0	SELECT COUNT(DISTINCT si.order_item_id) AS total_shipped FROM Shipment_Items si	SELECT count(*) FROM Shipment_Items
1	SELECT AVG(product_price) FROM Products	SELECT avg(product_price) FROM Products
1	SELECT AVG(p.product_price) FROM Products p	SELECT avg(product_price) FROM Products
1	SELECT AVG(product_price) FROM Products JOIN Order_Items USING (product_id)	SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
0	SELECT AVG(product_price) AS AvgPrice FROM Products WHERE EXISTS (SELECT 1 FROM Order_Items WHERE Order_Items.product_id = Products.product_id)	SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
1	WITH GenderCount AS (SELECT gender_code, COUNT(*) as cnt FROM Customers GROUP BY gender_code) SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM GenderCount ORDER BY cnt ASC LIMIT 1)	SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )
0	SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id GROUP BY gender_code ORDER BY COUNT(Orders.order_id) ASC LIMIT 1)	SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )
1	SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
1	SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)	SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )
0	SELECT order_status_code FROM Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(order_status_code) AS count FROM Orders GROUP BY order_status_code) AS counts)	SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1
0	SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) AS count FROM Orders GROUP BY order_status_code) AS order_counts WHERE count = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Orders GROUP BY order_status_code) AS counts)	SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1
1	SELECT p.product_id, p.product_description FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi WHERE oi.product_id = p.product_id GROUP BY oi.product_id HAVING COUNT(oi.product_id) > 3)	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT P.product_id, P.product_description FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.product_id) > 3	SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3
1	SELECT I.invoice_date, I.invoice_number FROM Invoices I INNER JOIN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2) AS S ON I.invoice_number = S.invoice_number	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT I.invoice_number, I.invoice_date FROM Invoices I JOIN Shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number, I.invoice_date HAVING COUNT(*) >= 2	SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
1	SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT shipment_tracking_number, shipment_date FROM Shipments WHERE shipment_tracking_number IS NOT NULL	SELECT shipment_tracking_number ,  shipment_date FROM Shipments
1	SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(P.product_price) FROM Products P)	SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )
1	SELECT product_color, product_description, product_size FROM Products WHERE NOT product_price = (SELECT MAX(product_price) FROM Products)	select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )
1	SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director)	SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)
0	SELECT Name FROM director WHERE Age = (SELECT MAX(Age) FROM director)	SELECT name FROM director ORDER BY age DESC LIMIT 1
1	SELECT COUNT(DISTINCT Channel_ID) FROM channel WHERE Internet LIKE '%bbc%'	SELECT count(*) FROM channel WHERE internet LIKE "%bbc%"
1	SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel	SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel
1	SELECT p.Title FROM program AS p ORDER BY p.Start_Year DESC	SELECT title FROM program ORDER BY start_year DESC
0	SELECT director.Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID HAVING COUNT(program.Program_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Program_ID) AS Cnt FROM program GROUP BY Director_ID) T)	SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1
0	SELECT d.Name, d.Age FROM director d WHERE EXISTS (SELECT 1 FROM program p WHERE p.Director_ID = d.Director_ID GROUP BY p.Director_ID HAVING COUNT(p.Program_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Program_ID) AS cnt FROM program GROUP BY Director_ID) tmp))	SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Title FROM program WHERE Start_Year = (SELECT MAX(Start_Year) FROM program)	SELECT title FROM program ORDER BY start_year DESC LIMIT 1
1	SELECT ch.Name, ch.Internet FROM channel ch, program pr WHERE ch.Channel_ID = pr.Channel_ID GROUP BY ch.Channel_ID, ch.Name, ch.Internet HAVING COUNT(pr.Program_ID) > 1	SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1
0	SELECT channel.Name, COUNT(program.Program_ID) FROM channel LEFT JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID, channel.Name	SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id
1	SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT DISTINCT Channel_ID FROM program)	SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)
1	SELECT Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID AND p.Title = 'Dracula'	SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'
0	SELECT c.Name, c.Internet FROM channel c WHERE c.Channel_ID IN (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID HAVING COUNT(Director_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Director_ID) as cnt FROM director_admin GROUP BY Channel_ID) t))	SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1
1	SELECT Name FROM director WHERE Age > 29 AND Age < 61	SELECT name FROM director WHERE age BETWEEN 30 AND 60
0	SELECT Name FROM channel WHERE Channel_ID IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age < 40) AND Channel_ID IN (SELECT Channel_ID FROM director_admin JOIN director ON director_admin.Director_ID = director.Director_ID WHERE Age > 60)	SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60
0	SELECT c.Channel_ID, c.Name FROM channel c WHERE c.Channel_ID NOT IN (SELECT da.Channel_ID FROM director_admin da, director d WHERE da.director_id = d.director_id AND d.name = 'Hank Baskett')	SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != "Hank Baskett"
1	SELECT COUNT(DISTINCT Radio_ID) AS UniqueRadioCount FROM radio	SELECT count(*) FROM radio
0	SELECT Transmitter FROM radio ORDER BY ERP_kW ASC, Transmitter	select transmitter from radio order by erp_kw asc
1	SELECT tv_show_name, Original_Airdate FROM tv_show WHERE Original_Airdate IS NOT NULL	SELECT tv_show_name ,  Original_Airdate FROM tv_show
1	SELECT Station_name FROM city_channel WHERE Affiliation IS NOT 'ABC'	SELECT Station_name FROM city_channel WHERE Affiliation != "ABC"
1	SELECT Transmitter FROM radio WHERE (ERP_kW > 150) OR (ERP_kW < 30)	SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30
0	SELECT Transmitter FROM radio WHERE ERP_kW IN (SELECT MAX(ERP_kW) FROM radio)	SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
1	SELECT AVG(ERP_kW) AS AvgERP FROM radio	SELECT avg(ERP_kW) FROM radio
1	SELECT Affiliation, COUNT(ID) AS NumberOfChannels FROM city_channel GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation
0	WITH AffiliationCounts AS (SELECT Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation) SELECT Affiliation FROM AffiliationCounts WHERE Count = (SELECT MAX(Count) FROM AffiliationCounts)	SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(Affiliation) > 3	SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3
1	SELECT City, Station_name FROM city_channel ORDER BY Station_name	SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC
1	SELECT r.Transmitter, cc.City FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel cc ON ccr.City_channel_ID = cc.ID	SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID
1	SELECT radio.Transmitter AS Transmitter, city_channel.Station_name AS Station FROM radio, city_channel_radio, city_channel WHERE radio.Radio_ID = city_channel_radio.Radio_ID AND city_channel_radio.City_channel_ID = city_channel.ID ORDER BY radio.ERP_kW DESC	SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC
0	SELECT r.Transmitter, COUNT(DISTINCT ccr.City_channel_ID) AS CountOfCityChannels FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter	SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter
0	SELECT DISTINCT r.Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)	SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)
1	SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0	SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1
1	SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1 OFFSET 0	SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1
1	SELECT Name FROM driver WHERE Citizenship IN ('United States')	SELECT name FROM driver WHERE citizenship  =  'United States'
1	SELECT Name FROM driver WHERE Citizenship IN ('United States')	SELECT name FROM driver WHERE citizenship  =  'United States'
0	SELECT Driver_ID, COUNT(Vehicle_ID) AS num_vehicles FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(Vehicle_ID) AS num_vehicles FROM vehicle_driver GROUP BY Driver_ID) sub)	SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Vehicle_ID) = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID) AS sub)	SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1
1	SELECT MAX(Power) MaximumPower, AVG(Power) AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
1	SELECT MAX(Power) MaximumPower, AVG(Power) AveragePower FROM vehicle WHERE Builder = 'Zhuzhou'	SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'
0	SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(counts) FROM (SELECT COUNT(*) AS counts FROM vehicle_driver GROUP BY Vehicle_ID) AS subquery)	SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1
0	WITH VehicleCounts AS (SELECT Vehicle_ID, COUNT(*) AS NumTimesDriven FROM vehicle_driver GROUP BY Vehicle_ID) SELECT Vehicle_ID FROM VehicleCounts WHERE NumTimesDriven = (SELECT MIN(NumTimesDriven) FROM VehicleCounts)	SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1
1	SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = 1996	SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996
1	SELECT vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT Build_Year AS YearBuilt, Model AS VehicleModel, Builder AS Manufacturer FROM vehicle	SELECT build_year ,  model ,  builder FROM vehicle
1	SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID LEFT JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012	SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012
1	SELECT COUNT(1) FROM driver WHERE Racing_Series = 'NASCAR'	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT COUNT(1) FROM driver WHERE Racing_Series = 'NASCAR'	SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'
1	SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed IS NOT NULL	SELECT avg(top_speed) FROM vehicle
1	SELECT AVG(Top_Speed) FROM vehicle WHERE Top_Speed IS NOT NULL	SELECT avg(top_speed) FROM vehicle
1	SELECT DISTINCT d.Name FROM driver d, vehicle v, vehicle_driver vd WHERE d.Driver_ID = vd.Driver_ID AND vd.Vehicle_ID = v.Vehicle_ID AND v.Power > 5000	select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000
0	SELECT Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000)	SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000
1	SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1	SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150	SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150
1	SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' AND Build_Year IS NOT NULL	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
1	SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%' AND Model IS NOT NULL	SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'
0	SELECT v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE vd.Vehicle_ID IS NULL	SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
0	SELECT Model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID)	SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id
0	SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) = 2) OR Builder = 'Ziyang'	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'
0	SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang' UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) = 2)	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'
1	SELECT V.Vehicle_ID, V.Model FROM vehicle V WHERE EXISTS (SELECT 1 FROM vehicle_driver D JOIN driver DR ON D.Driver_ID = DR.Driver_ID WHERE DR.Name = 'Jeff Gordon' AND D.Vehicle_ID = V.Vehicle_ID) OR V.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(DISTINCT Driver_ID) > 2)	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT v.Vehicle_ID, v.Model FROM vehicle v WHERE v.Vehicle_ID IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' UNION SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) > 2)	SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2
1	SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT COUNT(*) FROM vehicle v WHERE v.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)	SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)
1	SELECT Name FROM driver ORDER BY Name COLLATE NOCASE ASC	SELECT name FROM driver ORDER BY name
1	SELECT Name FROM driver ORDER BY Name COLLATE NOCASE ASC	SELECT name FROM driver ORDER BY name
1	SELECT Racing_Series, COUNT(*) AS NumberOfDrivers FROM driver GROUP BY Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
1	SELECT COUNT(Driver_ID), Racing_Series FROM driver GROUP BY Racing_Series	SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series
0	SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1')	SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'
0	SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver, vehicle WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID AND vehicle.Model = 'DJ1')	SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'
1	SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT COUNT(Driver_ID) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Driver_ID = d.Driver_ID)	SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )
1	SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams	SELECT count(*) FROM Exams
1	SELECT COUNT(Exam_ID) AS NumberOfExams FROM Exams	SELECT count(*) FROM Exams
1	SELECT DISTINCT Subject_Code FROM Exams ORDER BY 1	select distinct subject_code from exams order by subject_code asc
1	SELECT Subject_Code FROM Exams GROUP BY Subject_Code ORDER BY Subject_Code	SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
1	SELECT Exam_Name, Exam_Date FROM Exams WHERE NOT Subject_Code = 'Database'	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code NOT IN ('Database')	SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'
1	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1	SELECT Exam_Date FROM Exams WHERE LOWER(Subject_Code) LIKE '%data%' ORDER BY Exam_Date DESC	SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
1	SELECT Type_of_Question_Code, COUNT(*) AS count FROM Questions GROUP BY Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT Q.Type_of_Question_Code, COUNT(Q.Type_of_Question_Code) AS Total FROM Questions Q GROUP BY Q.Type_of_Question_Code	SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
1	SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments = 'Normal'	SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal"
1	SELECT COUNT(DISTINCT Comments) FROM Student_Answers	SELECT count(DISTINCT Comments) FROM Student_Answers
1	SELECT COUNT(DISTINCT Comments) FROM Student_Answers	SELECT count(DISTINCT Comments) FROM Student_Answers
0	SELECT Student_Answer_Text, COUNT(*) AS Answer_Count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Answer_Count DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
0	SELECT Student_Answer_Text, COUNT(*) AS NumOccurrences FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY NumOccurrences DESC	SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
1	SELECT first_name, date_of_answer FROM Students INNER JOIN Student_Answers ON Students.student_id = Student_Answers.student_id	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT first_name, date_of_answer FROM Students, Student_Answers WHERE Students.Student_ID = Student_Answers.Student_ID	SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID
1	SELECT Email_Adress, Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
1	SELECT Email_Adress AS Email, Date_of_Answer AS Date FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC	SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC
0	SELECT Assessment FROM Student_Assessments GROUP BY Assessment HAVING COUNT(*) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment) AS SubQuery)	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
1	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC, Assessment ASC LIMIT 1	SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
1	SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(Student_ID) >= 2)	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
1	SELECT S.First_Name FROM Students S JOIN Student_Answers A ON S.Student_ID = A.Student_ID GROUP BY S.Student_ID HAVING COUNT(A.Student_ID) >= 2	SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2
0	WITH RankedAnswers AS (SELECT Valid_Answer_Text, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Valid_Answers GROUP BY Valid_Answer_Text) SELECT Valid_Answer_Text FROM RankedAnswers WHERE Rank = 1	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
0	WITH Ranked_Answers AS (SELECT Valid_Answer_Text, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM Valid_Answers JOIN Student_Assessments ON Valid_Answers.Valid_Answer_ID = Student_Assessments.Valid_Answer_ID GROUP BY Valid_Answer_Text) SELECT Valid_Answer_Text FROM Ranked_Answers WHERE rank = 1	SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1
0	sql placeholder	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
0	sql placeholder	SELECT Last_Name FROM Students WHERE Gender_MFU != "M"
1	SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
1	SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU	SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU
0	sql placeholder	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
0	sql placeholder	SELECT Last_Name FROM Students WHERE Gender_MFU  =  "F" OR Gender_MFU  =  "M"
1	SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1	SELECT s.First_Name FROM Students s LEFT JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID WHERE sa.Student_ID IS NULL	SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
1	SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Normal') INTERSECT SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers WHERE Comments = 'Absent')	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text HAVING COUNT(DISTINCT Comments) = 2	SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Normal" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  "Absent"
1	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) > 2	SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3
1	SELECT * FROM Students WHERE Student_ID IS NOT NULL	SELECT * FROM Students
1	SELECT ALL * FROM Students	SELECT * FROM Students
1	SELECT COUNT(DISTINCT address_id) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT COUNT(DISTINCT address_id) FROM Addresses	SELECT count(*) FROM Addresses
1	SELECT Addresses.address_id, Addresses.address_details FROM Addresses	SELECT address_id ,  address_details FROM Addresses
1	SELECT Addresses.address_id, Addresses.address_details FROM Addresses	SELECT address_id ,  address_details FROM Addresses
1	SELECT COUNT(*) FROM Products	SELECT count(*) FROM Products
1	SELECT COUNT(*) FROM Products	SELECT count(*) FROM Products
1	SELECT p.product_id, p.product_type_code, p.product_name FROM Products p	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT p.product_id, p.product_type_code, p.product_name FROM Products p	SELECT product_id ,  product_type_code ,  product_name FROM Products
1	SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT p.product_price FROM Products p WHERE p.product_name = 'Monitor'	SELECT product_price FROM Products WHERE product_name  =  "Monitor"
1	SELECT MIN(p.product_price) AS Min_Price, AVG(p.product_price) AS Avg_Price, MAX(p.product_price) AS Max_Price FROM Products p	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products	SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products
1	SELECT AVG(product_price) AS Average_Price FROM Products WHERE product_type_code = 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT AVG(product_price) AS Average_Clothes_Price FROM Products WHERE product_type_code = 'Clothes'	SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Clothes"
1	SELECT COUNT(*) FROM Products WHERE product_type_code LIKE 'hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1	SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'	SELECT count(*) FROM Products WHERE product_type_code  =  "Hardware"
1	SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code IS NOT NULL)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
1	SELECT P.product_name FROM Products P WHERE P.product_price > (SELECT AVG(product_price) FROM Products)	SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)
0	SELECT DISTINCT product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware')	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
1	SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' GROUP BY product_type_code)	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  "Hardware")
0	SELECT product_name FROM Products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM Products WHERE product_type_code = 'Clothes')	SELECT product_name FROM Products WHERE product_type_code  =  "Clothes" ORDER BY product_price DESC LIMIT 1
1	SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1	SELECT product_name FROM Products WHERE product_type_code  =  "Clothes" ORDER BY product_price DESC LIMIT 1
0	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')	SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC LIMIT 1
0	SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware')	SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC LIMIT 1
1	SELECT p.product_name FROM Products p ORDER BY p.product_price DESC	SELECT product_name FROM Products ORDER BY product_price DESC
1	SELECT p.product_name FROM Products p ORDER BY p.product_price DESC	SELECT product_name FROM Products ORDER BY product_price DESC
0	SELECT product_name, product_price FROM Products WHERE product_type_code LIKE 'hardware' ORDER BY product_price ASC	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC	SELECT product_name FROM Products WHERE product_type_code  =  "Hardware" ORDER BY product_price ASC
1	SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code	SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code	SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code
1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
1	SELECT P.product_type_code FROM Products P GROUP BY P.product_type_code HAVING COUNT(P.product_id) > 1	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2
0	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(product_count) FROM (SELECT COUNT(product_id) AS product_count FROM Products GROUP BY product_type_code) AS counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT product_type_code FROM Products, Order_Items WHERE Products.product_id = Order_Items.product_id GROUP BY product_type_code HAVING COUNT(product_type_code) = (SELECT MAX(count) FROM (SELECT COUNT(product_type_code) AS count FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_type_code) AS counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(customer_id) FROM Customers WHERE customer_id IS NOT NULL	SELECT count(*) FROM Customers
1	SELECT COUNT(customer_id) FROM Customers WHERE customer_id IS NOT NULL	SELECT count(*) FROM Customers
1	SELECT customer_id, customer_name FROM Customers	SELECT customer_id ,  customer_name FROM Customers
1	SELECT customer_id, customer_name FROM Customers	SELECT customer_id ,  customer_name FROM Customers
1	SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name = 'Jeromy'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy' AND customer_email LIKE '%@%'	SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code, COUNT(*) AS NumberOfCustomers FROM Customers GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
1	SELECT payment_method_code, COUNT(*) AS NumberOfCustomers FROM Customers GROUP BY payment_method_code	SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code
0	SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC, payment_method_code ASC LIMIT 1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
0	WITH PaymentCounts AS (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCounts WHERE count = (SELECT MAX(count) FROM PaymentCounts)	SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
1	SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Customers GROUP BY payment_method_code) as counts))	SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)
1	SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 0)	SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)
1	SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT Customers.payment_method_code, Customers.customer_number FROM Customers WHERE Customers.customer_name = 'Jeromy'	SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  "Jeromy"
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) > 0	SELECT DISTINCT payment_method_code FROM Customers
1	SELECT p.product_id, p.product_type_code FROM Products AS p ORDER BY p.product_name ASC	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
0	SELECT product_id, product_type_code FROM Products ORDER BY LOWER(product_name) ASC	SELECT product_id ,  product_type_code FROM Products ORDER BY product_name
0	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(count) FROM (SELECT COUNT(product_id) AS count FROM Products GROUP BY product_type_code) AS counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
0	SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM Products GROUP BY product_type_code) as counts)	SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1
1	SELECT COUNT(DISTINCT order_id) AS UniqueOrderCount FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT COUNT(*) AS TotalOrders FROM Customer_Orders	SELECT count(*) FROM Customer_orders
1	SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO, Customers C WHERE CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
1	SELECT CO.order_id, CO.order_date, CO.order_status_code FROM Customer_Orders CO, Customers C WHERE CO.customer_id = C.customer_id AND C.customer_name = 'Jeromy'	SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  "Jeromy"
0	SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS num_orders FROM Customers C	SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
0	SELECT C.customer_name, C.customer_id, (SELECT COUNT(*) FROM Customer_Orders WHERE customer_id = C.customer_id) AS order_count FROM Customers C	SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id
0	SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C WHERE EXISTS (SELECT 1 FROM Customer_Orders O WHERE O.customer_id = C.customer_id GROUP BY O.customer_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
0	SELECT C.customer_id, C.customer_name, C.customer_phone, C.customer_email FROM Customers C INNER JOIN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Customer_Orders GROUP BY customer_id) T)) CO ON C.customer_id = CO.customer_id	SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
1	SELECT order_status_code, COUNT(order_id) AS total_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
1	SELECT order_status_code, COUNT(order_id) AS count_of_orders FROM Customer_Orders GROUP BY order_status_code ORDER BY count_of_orders	SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code
0	SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(count) FROM (SELECT order_status_code, COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS counts)	SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
0	SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Customer_Orders GROUP BY order_status_code) AS counts)	SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM Customers C LEFT OUTER JOIN Customer_Orders O ON C.customer_id = O.customer_id WHERE O.customer_id IS NULL	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
1	SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers LEFT JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL	SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)
0	SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT NULL FROM Order_Items OI WHERE OI.product_id = P.product_id)	SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
0	SELECT P.product_name FROM Products P LEFT JOIN Order_Items O ON P.product_id = O.product_id WHERE O.product_id IS NULL	SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id
0	SELECT COUNT(*) FROM Order_Items oi, Products p WHERE oi.product_id = p.product_id AND p.product_name = 'Monitor'	SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  "Monitor"
0	SELECT TOTAL(Order_Items.order_quantity) FROM Order_Items, Products WHERE Order_Items.product_id = Products.product_id AND Products.product_name = 'Monitor'	SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders co WHERE EXISTS (SELECT 1 FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_id = co.order_id AND p.product_name = 'Monitor')	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT C.customer_id) FROM Customers C, Customer_Orders CO, Order_Items OI, Products P WHERE C.customer_id = CO.customer_id AND CO.order_id = OI.order_id AND OI.product_id = P.product_id AND P.product_name = 'Monitor'	SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  "Monitor"
1	SELECT COUNT(DISTINCT Customers.customer_id) FROM Customers, Customer_Orders WHERE Customers.customer_id = Customer_Orders.customer_id	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers)	SELECT count(DISTINCT customer_id) FROM Customer_orders
1	SELECT Customers.customer_id FROM Customers LEFT OUTER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id WHERE Customer_Orders.customer_id IS NULL	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
1	SELECT c.customer_id FROM Customers c WHERE NOT EXISTS (SELECT NULL FROM Customer_Orders o WHERE o.customer_id = c.customer_id)	SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders
0	SELECT o.order_date, o.order_id FROM Customer_Orders o JOIN Order_Items i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_date HAVING MAX(i.order_quantity) > 6 OR COUNT(DISTINCT i.product_id) > 3	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
1	SELECT CO.order_id, CO.order_date FROM Customer_Orders CO JOIN (SELECT order_id FROM Order_Items WHERE order_quantity > 6 UNION SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) > 3) AS OI ON CO.order_id = OI.order_id	SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;
1	SELECT COUNT(DISTINCT Building_ID) FROM building	SELECT count(*) FROM building
1	SELECT COUNT(*) FROM building WHERE Building_ID IS NOT NULL	SELECT count(*) FROM building
1	SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
1	SELECT building.Name FROM building ORDER BY building.Number_of_Stories ASC	SELECT Name FROM building ORDER BY Number_of_Stories ASC
1	SELECT building.Address FROM building ORDER BY building.Completed_Year DESC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT building.Address FROM building ORDER BY building.Completed_Year DESC	SELECT Address FROM building ORDER BY Completed_Year DESC
1	SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year IS NOT 1980	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year IS NOT 1980	SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != "1980"
1	SELECT AVG(Population) FROM region	SELECT avg(Population) FROM region
1	SELECT AVG(Population) FROM region	SELECT avg(Population) FROM region
1	SELECT Name FROM region ORDER BY Name ASC, Region_ID ASC	SELECT Name FROM region ORDER BY Name ASC
1	SELECT Name FROM region ORDER BY UPPER(Name) ASC	SELECT Name FROM region ORDER BY Name ASC
1	SELECT r.Capital FROM region r WHERE r.Area > 10000	SELECT Capital FROM region WHERE Area  >  10000
1	SELECT r.Capital FROM region r WHERE r.Area > 10000	SELECT Capital FROM region WHERE Area  >  10000
0	SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
0	SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region)	SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
1	SELECT Name FROM region ORDER BY Area DESC LIMIT 5	SELECT Name FROM region ORDER BY Area DESC LIMIT 5
0	SELECT Name FROM region ORDER BY Area DESC, Name ASC LIMIT 5	SELECT Name FROM region ORDER BY Area DESC LIMIT 5
1	SELECT building.Name AS Building, region.Name AS Region FROM building, region WHERE building.Region_ID = region.Region_ID	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT building.Name, region.Name FROM building, region WHERE building.Region_ID = region.Region_ID	SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
1	SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1)	SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1
0	SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM building GROUP BY Region_ID) sub))	SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT region.Capital FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY region.Region_ID HAVING COUNT(building.Building_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM building GROUP BY Region_ID) AS SubQuery)	SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT bld.Address, reg.Capital FROM building AS bld JOIN region AS reg ON bld.Region_ID = reg.Region_ID	SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
0	SELECT A.Address, R.Name FROM building A JOIN region R ON A.Region_ID = R.Region_ID	SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
1	SELECT Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo'	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
0	SELECT b.Name, b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo'	SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  "Abruzzo"
1	SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
1	SELECT Completed_Year AS Year, COUNT(Building_ID) AS BuildingsCompleted FROM building GROUP BY Year	SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
0	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM building GROUP BY Completed_Year) AS counts)	SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Completed_Year FROM building GROUP BY Completed_Year HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM building GROUP BY Completed_Year) AS Counts)	SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Region_ID IS NULL	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Region_ID IS NULL	SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
1	SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories > 20) INTERSECT SELECT Completed_Year FROM building WHERE Completed_Year IN (SELECT Completed_Year FROM building WHERE Number_of_Stories < 15)	SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
1	SELECT DISTINCT b.Address FROM building b	SELECT DISTINCT Address FROM building
1	SELECT DISTINCT b.Address FROM building b	SELECT DISTINCT Address FROM building
0	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year DESC	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
0	SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC, Completed_Year	SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
1	SELECT Channel_Details FROM Channels ORDER BY Channel_Details	select channel_details from channels order by channel_details
1	SELECT Channel_Details FROM Channels ORDER BY 1	select channel_details from channels order by channel_details
1	SELECT COUNT(*) AS TotalServices FROM Services	SELECT count(*) FROM services
1	SELECT COUNT(*) FROM Services WHERE Service_ID IS NOT NULL	SELECT count(*) FROM services
0	SELECT Analytical_Layer_Type_Code FROM (SELECT Analytical_Layer_Type_Code, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS Ranked WHERE Rank = 1	SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code) AS SubQuery)	SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT DISTINCT Services.Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch'	SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  "Hardy Kutch"
1	SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch'	SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  "Hardy Kutch"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(Service_ID) > 3)	select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(Service_ID) > 3)	SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3
0	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions GROUP BY Customer_ID HAVING COUNT(Customer_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Customer_ID) AS cnt FROM Customer_Interactions GROUP BY Customer_ID) tmp))	SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1
0	SELECT Customers.* FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(Service_ID) DESC LIMIT 1)	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
0	SELECT C.Customer_Details FROM Customers C WHERE C.Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID HAVING COUNT(DISTINCT Service_ID) = (SELECT MAX(service_count) FROM (SELECT Customer_ID, COUNT(DISTINCT Service_ID) AS service_count FROM Customers_and_Services GROUP BY Customer_ID) AS Temp))	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
0	SELECT C.Customer_Details FROM Customers C INNER JOIN (SELECT Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY COUNT(DISTINCT Service_ID) DESC LIMIT 1) AS S ON C.Customer_ID = S.Customer_ID	select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1
1	SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT DISTINCT Customer_ID FROM Customers_and_Services)	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
1	SELECT C.Customer_Details FROM Customers C LEFT OUTER JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID WHERE CS.Customer_ID IS NULL	select customer_details from customers where customer_id not in (select customer_id from customers_and_services)
0	WITH LeastUsedService AS (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customers_and_Services WHERE Service_ID IN (SELECT Service_ID FROM LeastUsedService))	select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)
0	SELECT DISTINCT C.Customer_Details FROM Customers C JOIN Customers_and_Services CS ON C.Customer_ID = CS.Customer_ID JOIN (SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID ORDER BY COUNT(*) ASC LIMIT 1) AS LeastUsed ON CS.Service_ID = LeastUsed.Service_ID	select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)
1	SELECT COUNT(*) FROM (SELECT Customers_and_Services_Details FROM Customers_and_Services GROUP BY Customers_and_Services_Details)	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
0	SELECT (SELECT COUNT(DISTINCT Customer_Details) FROM Customers) + (SELECT COUNT(DISTINCT Service_Details) FROM Services) AS Total_Details	SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services
1	SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%' ORDER BY Customer_Details	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0	SELECT * FROM Customers WHERE LOWER(Customer_Details) LIKE LOWER('%Kutch%')	SELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT CS.Service_ID FROM Customers_and_Services CS LEFT JOIN Customers C ON CS.Customer_ID = C.Customer_ID WHERE C.Customer_Details = 'Hardy Kutch' OR EXISTS (SELECT 1 FROM Customer_Interactions CI WHERE CI.Status_Code = 'good' AND CI.Service_ID = CS.Service_ID))	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" OR t4.services_and_channels_details  =  "good"
0	SELECT DISTINCT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') UNION SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" OR t4.services_and_channels_details  =  "good"
0	SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID JOIN Customers C ON CS.Customer_ID = C.Customer_ID JOIN Customer_Interactions CI ON CI.Service_ID = S.Service_ID WHERE C.Customer_Details = 'Hardy Kutch' AND CI.Status_Code = 'bad'	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" AND t4.services_and_channels_details  =  "bad"
0	SELECT S.Service_Details FROM Services S, Customers_and_Services CS, Customers C, Customer_Interactions CI WHERE S.Service_ID = CS.Service_ID AND CS.Customer_ID = C.Customer_ID AND C.Customer_Details = 'Hardy Kutch' AND CI.Service_ID = S.Service_ID AND CI.Status_Code = 'bad'	SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  "Hardy Kutch" AND t4.services_and_channels_details  =  "bad"
0	SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij'))	select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  "15 ij"
1	SELECT DISTINCT S.Service_Details FROM Services S INNER JOIN Customer_Interactions CI ON S.Service_ID = CI.Service_ID INNER JOIN Channels C ON CI.Channel_ID = C.Channel_ID WHERE C.Channel_Details = '15 ij'	SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  "15 ij"
0	SELECT Customers.* FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code LIKE 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE 'bad'	select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  "stuck" and services_and_channels_details  =  "bad"
0	SELECT C.Customer_Details FROM Customers C INNER JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad' GROUP BY C.Customer_ID	SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  "Stuck" AND services_and_channels_details  =  "bad"
0	SELECT COUNT(*) AS Total_Successful FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%successful%'	SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1	SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'	SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  "Success"
1	SELECT Customer_Details FROM Customers WHERE Customer_ID IN (SELECT Customer_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Integration_Platform WHERE Status_Code = 'failed'))	select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  "fail"
0	SELECT C.Customer_Details FROM Customers C WHERE EXISTS (SELECT NULL FROM Customer_Interactions CI JOIN Integration_Platform IP ON CI.Customer_Interaction_ID = IP.Customer_Interaction_ID WHERE CI.Customer_ID = C.Customer_ID AND IP.Integration_Platform_Details = 'Fail')	SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  "Fail"
0	SELECT * FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services UNION SELECT Service_ID FROM Customer_Interactions)	select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id
0	SELECT S.Service_Details FROM Services S LEFT OUTER JOIN Customers_and_Services C ON S.Service_ID = C.Service_ID WHERE C.Service_ID IS NULL	select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id
1	SELECT Analytical_Layer_Type_Code, COUNT(Analytical_Layer_Type_Code) AS usage_count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
1	SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) AS NumberOfUses FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code	SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code
0	SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'	select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  "unsatisfied"
0	SELECT S.Service_Details FROM Services S JOIN Customers_and_Services CS ON S.Service_ID = CS.Service_ID WHERE CS.Customers_and_Services_Details LIKE '%unsatisfied%'	SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  "Unsatisfied"
1	SELECT COUNT(id) FROM Vehicles	SELECT count(*) FROM vehicles
1	SELECT COUNT(id) FROM Vehicles	SELECT count(*) FROM vehicles
1	SELECT name AS VehicleName FROM Vehicles ORDER BY Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT name AS VehicleName FROM Vehicles ORDER BY Model_year DESC	SELECT name FROM vehicles ORDER BY model_year DESC
1	SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IS NOT NULL	SELECT DISTINCT type_of_powertrain FROM vehicles
1	SELECT Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	SELECT name AS Vehicle_Name, Type_of_powertrain AS Powertrain_Type, Annual_fuel_cost AS Yearly_Fuel_Cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014	SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014
1	SELECT Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain IN (SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014) INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014	SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013
1	SELECT Type_of_powertrain, COUNT(Vehicles.id) AS VehicleCount FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
1	SELECT Type_of_powertrain, COUNT(id) AS NumberOfVehicles FROM Vehicles GROUP BY Type_of_powertrain	SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain
0	SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) = (SELECT MAX(Count) FROM (SELECT COUNT(id) AS Count FROM Vehicles GROUP BY Type_of_powertrain) AS Counts)	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1
0	SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(Type_of_powertrain) = (SELECT MAX(C) FROM (SELECT COUNT(Type_of_powertrain) AS C FROM Vehicles GROUP BY Type_of_powertrain) AS sub)	SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1
1	SELECT MIN(Vehicles.Annual_fuel_cost) AS MinCost, MAX(Vehicles.Annual_fuel_cost) AS MaxCost, AVG(Vehicles.Annual_fuel_cost) AS AvgCost FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT MIN(Annual_fuel_cost) AS MinCost, MAX(Annual_fuel_cost) AS MaxCost, AVG(Annual_fuel_cost) AS AvgCost FROM Vehicles	SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles
1	SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year IS NOT NULL	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate AND Model_year IS NOT NULL	SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) > 1	SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2
1	SELECT c.name, c.age, c.membership_credit FROM Customers c	SELECT name ,  age ,  membership_credit FROM customers
1	SELECT Customers.name, Customers.age, Customers.membership_credit FROM Customers WHERE name IS NOT NULL	SELECT name ,  age ,  membership_credit FROM customers
0	SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)	SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1
0	SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers)	SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1
1	SELECT AVG(Customers.age) AS AverageAge FROM Customers WHERE Customers.membership_credit > (SELECT AVG(membership_credit) FROM Customers)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT AVG(C.age) FROM Customers C WHERE C.membership_credit > (SELECT AVG(membership_credit) FROM Customers)	SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
1	SELECT * FROM Discount WHERE id IS NOT NULL	SELECT * FROM discount
1	SELECT * FROM Discount WHERE id IS NOT NULL	SELECT * FROM discount
0	SELECT Vehicles.name, SUM(Renting_history.total_hours) FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Vehicles.name HAVING SUM(Renting_history.total_hours) > 0	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
0	SELECT V.name, SUM(RH.total_hours) AS TotalHours FROM Vehicles V JOIN Renting_history RH ON V.id = RH.vehicles_id GROUP BY V.name	SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id
1	SELECT V.name FROM Vehicles V WHERE V.id NOT IN (SELECT vehicles_id FROM Renting_history WHERE vehicles_id IS NOT NULL)	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT name FROM Vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM Renting_history)	SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)
1	SELECT C.name FROM Customers C, Renting_history R WHERE C.id = R.customer_id GROUP BY C.id HAVING COUNT(R.customer_id) >= 2	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
1	SELECT name FROM Customers WHERE EXISTS (SELECT 1 FROM Renting_history WHERE Customers.id = Renting_history.customer_id GROUP BY customer_id HAVING COUNT(*) >= 2)	SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2
0	SELECT name, Model_year FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY vehicles_id) AS Counts))	SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT V.name, V.Model_year FROM Vehicles V, Renting_history R WHERE V.id = R.vehicles_id GROUP BY V.id HAVING COUNT(R.id) = (SELECT MAX(cnt) FROM (SELECT COUNT(id) AS cnt FROM Renting_history GROUP BY vehicles_id) AS subquery)	SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY name ORDER BY SUM(R.total_hours) DESC	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT name FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history ORDER BY total_hours DESC)	SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC
0	SELECT D.name FROM Discount D, Renting_history R WHERE D.id = R.discount_id GROUP BY D.name HAVING COUNT(R.id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(*) AS COUNT FROM Renting_history GROUP BY discount_id))	SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name FROM Discount WHERE id IN (SELECT discount_id FROM Renting_history GROUP BY discount_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Renting_history GROUP BY discount_id) AS subquery))	SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30)	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT V.name, V.Type_of_powertrain FROM Vehicles V JOIN Renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30	SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30
1	SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS City_Fuel_Avg, AVG(Highway_fuel_economy_rate) AS Highway_Fuel_Avg FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT Type_of_powertrain, AVG(Vehicles.City_fuel_economy_rate) AS City_Fuel_Avg, AVG(Vehicles.Highway_fuel_economy_rate) AS Highway_Fuel_Avg FROM Vehicles GROUP BY Type_of_powertrain	SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain
1	SELECT AVG(amount_of_loan) AS AverageLoanAmount FROM Student_Loans	SELECT avg(amount_of_loan) FROM Student_Loans
1	SELECT AVG(amount_of_loan) FROM Student_Loans WHERE amount_of_loan IS NOT NULL	SELECT avg(amount_of_loan) FROM Student_Loans
1	SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2 UNION SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2) AS SubQuery)	SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2
0	SELECT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id NOT IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) >= 2)	SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2
0	SELECT T.* FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id WHERE C.class_details LIKE '%data%' AND T.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'
0	SELECT T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id AND C.class_details LIKE 'net%')	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)	select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)
1	SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
1	SELECT SL.amount_of_loan, SL.date_of_loan FROM Student_Loans SL WHERE SL.student_id IN (SELECT A.student_id FROM Achievements A GROUP BY A.student_id HAVING COUNT(A.achievement_id) >= 2)	SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )
0	SELECT teacher_id, teacher_details FROM Teachers WHERE teacher_id = (SELECT teacher_id FROM (SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id) AS CourseCount ORDER BY num_courses DESC LIMIT 1)	SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
0	SELECT T.teacher_id, T.teacher_details FROM Teachers T WHERE EXISTS (SELECT 1 FROM Classes C WHERE C.teacher_id = T.teacher_id GROUP BY C.teacher_id HAVING COUNT(C.class_id) = (SELECT MAX(count) FROM (SELECT COUNT(class_id) AS count FROM Classes GROUP BY teacher_id) AS subquery))	SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
0	SELECT detention_summary FROM Detention GROUP BY detention_summary	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
0	SELECT detention_summary FROM Detention GROUP BY detention_summary	SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
1	SELECT DISTINCT student_details, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
0	SELECT student_details, address_type_description FROM Students, Students_Addresses, Ref_Address_Types WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_type_code = Ref_Address_Types.address_type_code	SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
0	SELECT DISTINCT bio_data, address_details FROM Students CROSS JOIN Addresses JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id AND Addresses.address_id = Students_Addresses.address_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT Students.bio_data AS Biography, Addresses.address_details AS Address FROM Students, Students_Addresses, Addresses WHERE Students.student_id = Students_Addresses.student_id AND Students_Addresses.address_id = Addresses.address_id	SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students, Transcripts WHERE Students.student_id = Transcripts.student_id	SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id
1	SELECT Students.bio_data AS Biography, Transcripts.date_of_transcript AS TranscriptDate FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id	SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id
0	SELECT B.behaviour_monitoring_details, COUNT(B.student_id) AS num_students FROM Behaviour_Monitoring B WHERE B.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY B.behaviour_monitoring_details	SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
0	SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_details) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details) AS SubQuery)	SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
0	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT B.student_id FROM Behaviour_Monitoring B JOIN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) AS ThreeResults ON B.behaviour_monitoring_details = ThreeResults.behaviour_monitoring_details JOIN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON B.behaviour_monitoring_details = MostCommon.behaviour_monitoring_details)	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )
0	SELECT bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3) INTERSECT SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )
0	SELECT bio_data FROM Students S WHERE (SELECT COUNT(DISTINCT behaviour_monitoring_details) FROM Behaviour_Monitoring B WHERE B.student_id = S.student_id) = 1 AND (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring B WHERE B.student_id = S.student_id LIMIT 1) = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))	select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )
1	SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
1	SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id	SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
0	SELECT event_type_code, (SELECT event_type_description FROM Ref_Event_Types WHERE event_type_code = SE.event_type_code) AS description, COUNT(DISTINCT student_id) AS count FROM Student_Events SE GROUP BY event_type_code ORDER BY count DESC LIMIT 1	SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1
0	WITH EventCounts AS (SELECT event_type_code, COUNT(DISTINCT student_id) AS num_students FROM Student_Events GROUP BY event_type_code) SELECT EventCounts.event_type_code, EventCounts.num_students, Ref_Event_Types.event_type_description FROM EventCounts JOIN Ref_Event_Types ON EventCounts.event_type_code = Ref_Event_Types.event_type_code WHERE num_students = (SELECT MAX(num_students) FROM EventCounts)	SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT A.achievement_details, R.achievement_type_description FROM Achievements AS A, Ref_Achievement_Type AS R WHERE A.achievement_type_code = R.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code	SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
1	SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE NOT EXISTS (SELECT student_id FROM Achievements WHERE Students.student_id = student_id))	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t INNER JOIN Classes c ON t.teacher_id = c.teacher_id LEFT JOIN Achievements a ON c.student_id = a.student_id WHERE a.achievement_id IS NULL	SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )
1	SELECT date_of_transcript, transcript_details FROM Transcripts WHERE date_of_transcript IS NOT NULL	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT date_of_transcript, transcript_details FROM Transcripts	SELECT date_of_transcript ,  transcript_details FROM Transcripts
1	SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT Achievements.achievement_type_code, Achievements.achievement_details, Achievements.date_achievement FROM Achievements	SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements
1	SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT `datetime_detention_start`, `datetime_detention_end` FROM `Detention`	SELECT datetime_detention_start ,  datetime_detention_end FROM Detention
1	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%' ESCAPE '\'	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%' ESCAPE '\'	SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
1	SELECT teacher_details, student_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
1	SELECT student_details, teacher_details FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id INNER JOIN Teachers ON Teachers.teacher_id = Classes.teacher_id	SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
0	SELECT A.teacher_id, A.num_courses FROM (SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id) A WHERE A.num_courses = (SELECT MAX(num_courses) FROM (SELECT COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id) B)	SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
0	SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id HAVING COUNT(class_id) = (SELECT MAX(course_count) FROM (SELECT COUNT(class_id) AS course_count FROM Classes GROUP BY teacher_id) AS subquery)	SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
0	sql placeholder	SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT Students.student_id, COUNT(Classes.class_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id ORDER BY num_courses DESC LIMIT 1	SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1
0	sql placeholder	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	sql placeholder	SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
1	SELECT detention_type_code, detention_type_description FROM (SELECT D.detention_type_code, R.detention_type_description, COUNT(*) AS cnt FROM Detention D JOIN Ref_Detention_Type R ON D.detention_type_code = R.detention_type_code GROUP BY D.detention_type_code, R.detention_type_description) AS SubQuery ORDER BY cnt ASC LIMIT 1	SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
0	SELECT RDT.detention_type_code, RDT.detention_type_description FROM Ref_Detention_Type RDT WHERE RDT.detention_type_code IN (SELECT detention_type_code FROM Detention GROUP BY detention_type_code HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) AS count FROM Detention GROUP BY detention_type_code) AS subquery))	SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1
0	SELECT bio_data, other_details FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans) GROUP BY Students.student_id	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )
0	SELECT bio_data, student_details FROM Students WHERE EXISTS (SELECT 1 FROM Student_Loans WHERE Students.student_id = Student_Loans.student_id AND amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans))	SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )
1	SELECT MIN(date_of_loan) FROM Student_Loans	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
1	SELECT MIN(date_of_loan) FROM Student_Loans	SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans))	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
0	SELECT bio_data FROM Students, Student_Loans WHERE Students.student_id = Student_Loans.student_id AND Student_Loans.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
0	SELECT T.date_of_transcript FROM Transcripts T WHERE EXISTS (SELECT 1 FROM Student_Loans S WHERE S.student_id = T.student_id AND S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))	SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
0	SELECT T.date_of_transcript FROM Transcripts T WHERE EXISTS (SELECT 1 FROM Student_Loans S WHERE S.student_id = T.student_id AND S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans))	SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
0	SELECT T1.teacher_details FROM Teachers T1 WHERE EXISTS (SELECT T2.student_id FROM Classes T2 JOIN Transcripts T3 ON T2.student_id = T3.student_id WHERE T1.teacher_id = T2.teacher_id AND T3.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts))	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1
0	SELECT T.teacher_details FROM Teachers T JOIN Classes C ON T.teacher_id = C.teacher_id JOIN Transcripts TR ON C.student_id = TR.student_id WHERE TR.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)	SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1
1	SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id	select student_id ,  sum(amount_of_loan) from student_loans group by student_id
0	SELECT s.student_id, IFNULL(SUM(sl.amount_of_loan), 0) AS total_loan FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id	SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id
0	SELECT DISTINCT s.student_id, s.bio_data, (SELECT COUNT(class_id) FROM Classes WHERE student_id = s.student_id) AS course_count FROM Students s	SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
0	SELECT S.student_id, S.bio_data, COUNT(C.class_id) AS num_courses FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id, S.bio_data	SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
1	SELECT COUNT(student_id) FROM (SELECT DISTINCT student_id FROM Detention)	SELECT count(DISTINCT student_id) FROM Detention
1	SELECT COUNT(DISTINCT Students.student_id) FROM Students, Detention WHERE Students.student_id = Detention.student_id	SELECT count(DISTINCT student_id) FROM Detention
0	SELECT R.address_type_code, R.address_type_description FROM Ref_Address_Types R, Students_Addresses S WHERE R.address_type_code = S.address_type_code GROUP BY R.address_type_code, R.address_type_description HAVING COUNT(S.address_type_code) = (SELECT MAX(Cnt) FROM (SELECT COUNT(address_type_code) AS Cnt FROM Students_Addresses GROUP BY address_type_code) T)	SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT SA.address_type_code, RAT.address_type_description FROM Students_Addresses SA, Ref_Address_Types RAT WHERE SA.address_type_code = RAT.address_type_code GROUP BY SA.address_type_code, RAT.address_type_description HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM Students_Addresses GROUP BY address_type_code) as counts)	SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id
0	SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events EXCEPT SELECT student_id FROM Student_Loans)	SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id
1	SELECT Students_Addresses.date_from, Students_Addresses.date_to FROM Students_Addresses JOIN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2) Temp ON Students_Addresses.student_id = Temp.student_id	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT SA.date_from, SA.date_to FROM Students_Addresses SA, (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS T WHERE SA.student_id = T.student_id	SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )
1	SELECT datetime_detention_start FROM Detention	SELECT datetime_detention_start FROM Detention
1	SELECT datetime_detention_start AS StartDate FROM Detention	SELECT datetime_detention_start FROM Detention
1	SELECT Author.Name AS AuthorName FROM Author	SELECT name FROM Author
1	SELECT Name FROM Author WHERE Name IS NOT NULL	SELECT name FROM Author
1	SELECT c.Name, c.Address FROM Client c	SELECT name ,  address FROM Client
1	SELECT Name, Address FROM Client WHERE Name IS NOT NULL AND Address IS NOT NULL	SELECT name ,  address FROM Client
1	SELECT Title, ISBN, SalePrice FROM Book	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT Book.Title, Book.ISBN, Book.SalePrice FROM Book	SELECT title ,  isbn ,  SalePrice FROM Book
1	SELECT COUNT(Book.ISBN) FROM Book	SELECT count(*) FROM Book
1	SELECT COUNT(Book.ISBN) FROM Book	SELECT count(*) FROM Book
1	SELECT COUNT(*) FROM (SELECT DISTINCT idAuthor FROM Author) temp	SELECT count(*) FROM Author
1	SELECT COUNT(idAuthor) AS NumberOfAuthors FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(IdClient) FROM Client	SELECT count(*) FROM Client
1	SELECT COUNT(DISTINCT IdClient) AS UniqueClients FROM Client	SELECT count(*) FROM Client
1	SELECT Name, Address FROM Client ORDER BY Name ASC	SELECT name ,  address FROM Client ORDER BY name
1	SELECT Name, Address FROM Client ORDER BY Name ASC	SELECT name ,  address FROM Client ORDER BY name
1	SELECT Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT b.Title, a.Name FROM Book b, Author a, Author_Book ab WHERE b.ISBN = ab.ISBN AND ab.Author = a.idAuthor	SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn
1	SELECT Orders.IdOrder, Client.Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
1	SELECT Orders.IdOrder, Client.Name FROM Orders, Client WHERE Orders.IdClient = Client.IdClient	SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient
0	SELECT DISTINCT A.Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = A.idAuthor) AS BookCount FROM Author A	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor
0	SELECT DISTINCT A.Name, (SELECT COUNT(*) FROM Author_Book WHERE Author = A.idAuthor) AS BookCount FROM Author A	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor
0	SELECT Book.ISBN, COUNT(Books_Order.ISBN) FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN	SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn
0	SELECT Book.ISBN, IFNULL(COUNT(Books_Order.ISBN), 0) AS order_count FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN	SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn
1	SELECT b.ISBN, SUM(o.amount) AS TotalAmount FROM Book b, Books_Order o WHERE b.ISBN = o.ISBN GROUP BY b.ISBN	SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn
1	SELECT b.ISBN, SUM(o.amount) AS TotalAmount FROM Book b, Books_Order o WHERE b.ISBN = o.ISBN GROUP BY b.ISBN	SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn
0	SELECT Title FROM Book WHERE ISBN = (SELECT ISBN FROM Books_Order GROUP BY ISBN ORDER BY SUM(amount) DESC LIMIT 1)	SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1
1	SELECT B.Title FROM Book B INNER JOIN (SELECT ISBN, COUNT(ISBN) AS order_count FROM Books_Order GROUP BY ISBN ORDER BY order_count DESC LIMIT 1) AS MostOrdered ON B.ISBN = MostOrdered.ISBN	SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1
0	SELECT book.Title, book.PurchasePrice FROM Book book JOIN (SELECT ISBN, MAX(amount) AS max_amount FROM Books_Order GROUP BY ISBN) max_orders ON book.ISBN = max_orders.ISBN WHERE max_orders.max_amount = (SELECT MAX(amount) FROM Books_Order)	SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1
1	SELECT B.Title, B.PurchasePrice FROM Book B INNER JOIN (SELECT ISBN, SUM(amount) AS TotalAmount FROM Books_Order GROUP BY ISBN ORDER BY TotalAmount DESC LIMIT 1) AS Sub ON B.ISBN = Sub.ISBN	SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1
0	SELECT B.Title FROM Book B INNER JOIN Books_Order BO ON B.ISBN = BO.ISBN WHERE BO.ISBN IS NOT NULL	SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
1	SELECT DISTINCT B.Title FROM Book B JOIN Books_Order BO ON B.ISBN = BO.ISBN	SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT C.Name FROM Client C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.IdClient = C.IdClient)	SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0	SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.IdClient = Client.IdClient)	SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0	SELECT Name, COUNT(IdOrder) AS NumberOfOrders FROM Client LEFT OUTER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Name	SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient
0	SELECT Name, COUNT(Orders.IdOrder) AS TotalOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name	SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient
0	SELECT C.Name FROM Client C WHERE C.IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(*) = (SELECT MAX(OrderCount) FROM (SELECT IdClient, COUNT(*) AS OrderCount FROM Orders GROUP BY IdClient) AS SubQuery))	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1
0	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders GROUP BY IdClient HAVING COUNT(IdOrder) = (SELECT MAX(order_count) FROM (SELECT COUNT(IdOrder) AS order_count FROM Orders GROUP BY IdClient) AS subquery))	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1
1	SELECT Client.Name AS ClientName, AggregateTotal.TotalAmount FROM Client JOIN (SELECT IdClient, SUM(amount) AS TotalAmount FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY IdClient) AS AggregateTotal ON Client.IdClient = AggregateTotal.IdClient	SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient
0	SELECT DISTINCT C.Name, SUM(BO.amount) OVER (PARTITION BY C.Name) AS TotalBooks FROM Client C LEFT JOIN Orders O ON C.IdClient = O.IdClient LEFT JOIN Books_Order BO ON O.IdOrder = BO.IdOrder	SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient
1	SELECT C.Name FROM (SELECT IdClient, SUM(amount) AS TotalAmount FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder GROUP BY IdClient ORDER BY TotalAmount DESC LIMIT 1) AS SubQuery JOIN Client C ON SubQuery.IdClient = C.IdClient	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1
0	SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order GROUP BY IdOrder HAVING SUM(amount) = (SELECT MAX(TotalAmount) FROM (SELECT SUM(amount) AS TotalAmount FROM Books_Order GROUP BY IdOrder) AS SubQuery)))	SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1
0	SELECT B.Title FROM Book B WHERE B.ISBN NOT IN (SELECT O.ISBN FROM Books_Order O)	SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT Title FROM Book AS B WHERE NOT EXISTS (SELECT NULL FROM Books_Order AS BO WHERE B.ISBN = BO.ISBN)	SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn
0	SELECT Client.Name FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdClient IS NULL	SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
0	SELECT C.Name FROM Client C WHERE C.IdClient NOT IN (SELECT O.IdClient FROM Orders O)	SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient
1	SELECT MAX(SalePrice) AS MaximumSalePrice, MIN(SalePrice) AS MinimumSalePrice FROM Book	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT MAX(SalePrice) AS MaximumSalePrice, MIN(SalePrice) AS MinimumSalePrice FROM Book	SELECT max(saleprice) ,  min(saleprice) FROM Book
1	SELECT AVG(Book.PurchasePrice) AS 'Purchase Price Average', AVG(Book.SalePrice) AS 'Sale Price Average' FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT AVG(PurchasePrice) AS Purchase_Price_Avg, AVG(SalePrice) AS Sale_Price_Avg FROM Book	SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book
1	SELECT MAX(SalePrice - PurchasePrice) AS MaximumPriceDifference FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT MAX(SalePrice - PurchasePrice) AS LargestDifference FROM Book	SELECT max(saleprice - purchaseprice) FROM Book
1	SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
1	SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book AS B)	SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
0	SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book GROUP BY SalePrice)	select title from book order by saleprice asc limit 1
0	SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book GROUP BY SalePrice)	select title from book order by saleprice asc limit 1
0	SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)	select title from book order by purchaseprice  desc limit 1
0	SELECT B.Title FROM Book B WHERE B.PurchasePrice = (SELECT MAX(B2.PurchasePrice) FROM Book B2)	select title from book order by purchaseprice  desc limit 1
0	SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')	SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell"
0	SELECT AVG(SalePrice) FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell')	SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell"
0	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))	SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato"
0	SELECT SalePrice FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato'))	SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato"
1	SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell" ORDER BY T1.saleprice LIMIT 1
1	SELECT B.Title FROM Book B JOIN Author_Book AB ON B.ISBN = AB.ISBN JOIN Author A ON AB.Author = A.idAuthor WHERE A.Name = 'George Orwell' ORDER BY B.SalePrice ASC LIMIT 1	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "George Orwell" ORDER BY T1.saleprice LIMIT 1
0	SELECT B.Title FROM Book B WHERE EXISTS (SELECT 1 FROM Author_Book AB JOIN Author A ON AB.Author = A.idAuthor WHERE AB.ISBN = B.ISBN AND A.Name = 'Plato') AND B.SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author = idAuthor WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  "Plato" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)
0	SELECT A.Name FROM Author A WHERE A.idAuthor IN (SELECT AB.Author FROM Author_Book AB JOIN Book B ON AB.ISBN = B.ISBN WHERE B.Title = 'Pride and Prejudice')	SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  "Pride and Prejudice"
1	SELECT Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'	SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  "Pride and Prejudice"
1	SELECT Book.Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE "%Plato%"
0	SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Author_Book JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%')	SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE "%Plato%"
0	SELECT COUNT(*) FROM (SELECT DISTINCT O.IdOrder FROM Orders O, Books_Order BO, Book B WHERE O.IdOrder = BO.IdOrder AND BO.ISBN = B.ISBN AND B.Title = 'Pride and Prejudice') AS TempTable	SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice"
1	SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice'	SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice"
1	SELECT DISTINCT o1.IdOrder FROM Orders o1, Orders o2 JOIN Books_Order bo1 ON o1.IdOrder = bo1.IdOrder JOIN Book b1 ON bo1.ISBN = b1.ISBN JOIN Books_Order bo2 ON o2.IdOrder = bo2.IdOrder JOIN Book b2 ON bo2.ISBN = b2.ISBN WHERE b1.Title = 'Pride and Prejudice' AND b2.Title = 'The Little Prince' AND o1.IdOrder = o2.IdOrder	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order bo INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice') INTERSECT SELECT IdOrder FROM Orders WHERE IdOrder IN (SELECT IdOrder FROM Books_Order bo INNER JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'The Little Prince')	SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "Pride and Prejudice" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  "The Little Prince"
1	SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe' INTERSECT SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith'	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
1	SELECT B.ISBN FROM Books_Order B JOIN Orders O ON B.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name IN ('Peter Doe', 'James Smith') GROUP BY B.ISBN HAVING COUNT(DISTINCT C.Name) = 2	SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "Peter Doe" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  "James Smith"
0	SELECT B.Title FROM Book B WHERE B.ISBN IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'Peter Doe') AND B.ISBN NOT IN (SELECT BO.ISBN FROM Books_Order BO JOIN Orders O ON BO.IdOrder = O.IdOrder JOIN Client C ON O.IdClient = C.IdClient WHERE C.Name = 'James Smith')	SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "Peter Doe" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "James Smith"
0	SELECT Title FROM Book WHERE ISBN IN (SELECT Books_Order.ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe') AND Title NOT IN (SELECT Title FROM Book WHERE ISBN IN (SELECT Books_Order.ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'James Smith'))	SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "Peter Doe" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  "James Smith"
0	SELECT DISTINCT c.Name FROM Client c, Orders o, Books_Order bo, Book b WHERE c.IdClient = o.IdClient AND o.IdOrder = bo.IdOrder AND bo.ISBN = b.ISBN AND b.Title = 'Pride and Prejudice'	SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  "Pride and Prejudice"
0	SELECT Name FROM Client WHERE EXISTS (SELECT 1 FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Client.IdClient = Orders.IdClient AND Book.Title = 'Pride and Prejudice')	SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  "Pride and Prejudice"
1	SELECT COUNT(Book_ID) FROM book	SELECT count(*) FROM book
1	SELECT Title FROM book ORDER BY UPPER(Title) ASC	SELECT Title FROM book ORDER BY Title ASC
1	SELECT Title FROM book AS b ORDER BY b.Pages DESC	SELECT Title FROM book ORDER BY Pages DESC
1	SELECT book.Type, book.Release FROM book	SELECT TYPE ,  Release FROM book
0	SELECT Book_ID, Title, MAX(Chapters) as Maximum_Chapters, MIN(Chapters) as Minimum_Chapters FROM book GROUP BY Book_ID, Title	SELECT max(Chapters) ,  min(Chapters) FROM book
1	SELECT Title FROM book WHERE Type NOT IN ('Poet')	SELECT Title FROM book WHERE TYPE != "Poet"
1	SELECT AVG(Rating) AS AverageRating FROM review	SELECT avg(Rating) FROM review
1	SELECT Title, Rating FROM book, review WHERE book.Book_ID = review.Book_ID	SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID
0	SELECT R.Rating FROM review R INNER JOIN book B ON R.Book_ID = B.Book_ID WHERE B.Chapters = (SELECT MAX(Chapters) FROM book)	SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1
1	SELECT review.Rank FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Pages ASC LIMIT 1	SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1
0	SELECT Title FROM book WHERE EXISTS (SELECT 1 FROM review WHERE book.Book_ID = review.Book_ID ORDER BY Rank DESC LIMIT 1)	SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1
1	SELECT AVG(Readers_in_Million) AS avg_readers FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE Type = 'Novel'	SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  "Novel"
1	SELECT b.Type, COUNT(b.Book_ID) AS TotalBooks FROM book b GROUP BY b.Type	SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE
0	SELECT Type FROM book GROUP BY Type HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM book GROUP BY Type) AS Counts)	SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT book.Type FROM book GROUP BY book.Type HAVING COUNT(book.Book_ID) >= 3	SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3
0	SELECT b.Title FROM book b INNER JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating, b.Title ASC	SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC
0	SELECT DISTINCT b.Title, b.Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC	SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC
1	SELECT COUNT(*) FROM (SELECT Book_ID FROM book EXCEPT SELECT Book_ID FROM review) AS subquery	SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
1	SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50	SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50
1	SELECT DISTINCT COUNT(*) FROM (SELECT Type FROM book GROUP BY Type) AS types	SELECT count(DISTINCT TYPE) FROM book
0	SELECT Type, Title FROM book WHERE Book_ID NOT IN (SELECT DISTINCT Book_ID FROM review)	SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;
1	SELECT COUNT(1) FROM customer	SELECT count(*) FROM customer
1	SELECT COUNT(1) FROM customer	SELECT count(*) FROM customer
0	SELECT Name FROM customer ORDER BY Level_of_Membership ASC, Name ASC	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT customer.Name FROM customer ORDER BY Level_of_Membership	SELECT Name FROM customer ORDER BY Level_of_Membership ASC
1	SELECT customer.Nationality, customer.Card_Credit FROM customer	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT customer.Nationality, customer.Card_Credit FROM customer	SELECT Nationality ,  Card_Credit FROM customer
1	SELECT c.Name FROM customer AS c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT c.Name FROM customer AS c WHERE c.Nationality = 'England' OR c.Nationality = 'Australia'	SELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
1	SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
1	SELECT AVG(c.Card_Credit) FROM customer c WHERE c.Level_of_Membership > 1	SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1
0	SELECT Card_Credit FROM customer AS c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer AS sub)	SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
0	SELECT Card_Credit FROM customer AS c WHERE c.Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer AS sub)	SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
1	SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality ORDER BY COUNT(*)	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
1	SELECT Nationality, COUNT(DISTINCT Customer_ID) FROM customer GROUP BY Nationality	SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
0	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM customer GROUP BY Nationality) AS counts)	SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Nationality FROM customer GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM customer GROUP BY Nationality) AS counts)	SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Nationality FROM (SELECT Nationality, MIN(Card_Credit) AS MinCredit, MAX(Card_Credit) AS MaxCredit FROM customer GROUP BY Nationality) WHERE MinCredit < 50 AND MaxCredit > 75	SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
0	SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 50) AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 75) GROUP BY Nationality	SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
1	SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT c.Name, o.Dish_Name FROM customer AS c INNER JOIN customer_order AS o ON c.Customer_ID = o.Customer_ID	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
1	SELECT c.Name AS CustomerName, co.Dish_Name AS DishName FROM customer AS c JOIN customer_order AS co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1	SELECT customer.Name, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC	SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
1	SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name	SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name
0	SELECT Name, Total_Quantity FROM customer c JOIN (SELECT Customer_ID, SUM(Quantity) AS Total_Quantity FROM customer_order GROUP BY Customer_ID) co ON c.Customer_ID = co.Customer_ID	select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name
0	SELECT c.* FROM customer c WHERE EXISTS (SELECT 1 FROM customer_order co WHERE c.Customer_ID = co.Customer_ID GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1)	SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1
0	SELECT Name FROM customer WHERE Customer_ID IN (SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1)	SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1
1	SELECT Manager FROM branch WHERE Manager IS NOT NULL GROUP BY Manager	SELECT DISTINCT Manager FROM branch
1	SELECT Manager FROM branch WHERE Manager IS NOT NULL GROUP BY Manager	SELECT DISTINCT Manager FROM branch
1	SELECT Name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order o WHERE o.Customer_ID = c.Customer_ID)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT Name FROM customer WHERE NOT EXISTS (SELECT 1 FROM customer_order WHERE customer_order.Customer_ID = customer.Customer_ID)	SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
1	SELECT COUNT(member.Member_ID) FROM member	SELECT count(*) FROM member
0	SELECT Name FROM member ORDER BY Age ASC, Name ASC	SELECT Name FROM member ORDER BY Age ASC
1	SELECT m.Name, m.Nationality FROM member m	SELECT Name ,  Nationality FROM member
0	SELECT m.Name FROM member m WHERE m.Nationality NOT IN ('England')	select name from member where nationality != "england"
1	SELECT Name FROM member WHERE Age IN (SELECT Age FROM member WHERE Age = 19 OR Age = 20)	SELECT Name FROM member WHERE Age  =  19 OR Age  =  20
0	SELECT Name FROM member WHERE Age = (SELECT MAX(Age) FROM member)	SELECT Name FROM member ORDER BY Age DESC LIMIT 1
1	SELECT m.Nationality, COUNT(m.Member_ID) AS TotalMembers FROM member m GROUP BY m.Nationality	SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality
0	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM member GROUP BY Nationality) AS counts)	SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2	SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2
1	SELECT m.Name AS Leader, c.Club_Name AS Club FROM member m, club_leader cl, club c WHERE m.Member_ID = cl.Member_ID AND cl.Club_ID = c.Club_ID	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID
0	SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID AND club.Overall_Ranking > 100	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100
0	SELECT Name FROM member, club_leader WHERE member.Member_ID = club_leader.Member_ID AND club_leader.Year_Join < 2018	SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018
1	SELECT member.Name FROM member INNER JOIN club_leader ON member.Member_ID = club_leader.Member_ID INNER JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Club_Name = 'Houston'	SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  "Houston"
1	SELECT m.Name FROM member m LEFT JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Member_ID IS NULL	SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
1	SELECT Nationality FROM member GROUP BY Nationality HAVING SUM(CASE WHEN Age > 22 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Age < 19 THEN 1 ELSE 0 END) > 0	SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19
0	SELECT AVG(Age) FROM member WHERE Member_ID IN (SELECT Member_ID FROM club_leader)	SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id
1	SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%' COLLATE NOCASE	SELECT club_name FROM club WHERE club_name LIKE '%state%'
1	SELECT Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subset_ID IS NOT NULL	SELECT Collection_Subset_Name FROM Collection_Subsets;
1	SELECT cs.Collection_Subset_Name FROM Collection_Subsets AS cs	SELECT Collection_Subset_Name FROM Collection_Subsets;
0	sql placeholder	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
0	SELECT Collections.Collection_Description FROM Collections INNER JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID INNER JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection'	SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = "Top collection";
1	SELECT Document_Subset_Name AS SubsetName FROM Document_Subsets	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_Name IS NOT NULL	SELECT Document_Subset_Name FROM Document_Subsets;
1	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_Details IS NOT NULL	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' AND Document_Subset_ID IS NOT NULL	SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = "Best for 2000";
1	SELECT DISTINCT Document_Object_ID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
1	SELECT Document_Object_ID AS ObjectID FROM Document_Objects	SELECT Document_Object_ID FROM Document_Objects;
0	SELECT DISTINCT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'	SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'
0	SELECT Document_Object_ID FROM Document_Objects WHERE Owner COLLATE NOCASE = 'Marlin'	SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'
1	SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
0	SELECT DISTINCT d.Owner FROM Document_Objects d, Documents_in_Collections dc, Collections c WHERE d.Document_Object_ID = dc.Document_Object_ID AND dc.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Braeden Collection'	SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'
1	SELECT d2.Owner FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Parent_Document_Object_ID = d2.Document_Object_ID WHERE d1.Owner = 'Marlin'	SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'
0	SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')	SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'
1	SELECT DISTINCT d1.Description FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1	SELECT DISTINCT Description FROM Document_Objects AS D WHERE EXISTS (SELECT 1 FROM Document_Objects WHERE Parent_Document_Object_ID = D.Document_Object_ID)	SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID
1	SELECT COUNT(1) FROM Document_Objects WHERE Owner = 'Marlin'	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT COUNT(*) AS Document_Count FROM Document_Objects WHERE Owner = 'Marlin'	SELECT count(*) FROM Document_Objects WHERE OWNER = "Marlin";
1	SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1	SELECT Document_Object_ID FROM Document_Objects d WHERE NOT EXISTS (SELECT NULL FROM Document_Objects WHERE Parent_Document_Object_ID = d.Document_Object_ID AND Parent_Document_Object_ID IS NOT NULL)	SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects
1	SELECT Parent_Document_Object_ID AS ParentID, COUNT(Document_Object_ID) AS ChildDocumentsCount FROM Document_Objects GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT COUNT(Document_Object_ID) AS ChildCount, Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;
1	SELECT Collection_Name AS 'Collection Names' FROM Collections	SELECT Collection_Name FROM Collections;
1	SELECT Collections.Collection_Name FROM Collections	SELECT Collection_Name FROM Collections;
1	SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1	SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'	SELECT Collection_Description FROM Collections WHERE Collection_Name = "Best";
1	SELECT parent.Collection_Name FROM Collections AS child JOIN Collections AS parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'	SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice";
1	SELECT parent.Collection_Name FROM Collections child JOIN Collections parent ON child.Parent_Collection_ID = parent.Collection_ID WHERE child.Collection_Name = 'Nice'	SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Nice";
0	SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL)	SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;
0	SELECT Collection_Name FROM Collections WHERE NOT EXISTS (SELECT * FROM Collections AS C WHERE Collections.Collection_ID = C.Parent_Collection_ID)	SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;
1	SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
1	SELECT d.Parent_Document_Object_ID FROM Document_Objects d GROUP BY d.Parent_Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1	SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;
1	SELECT COUNT(*) FROM Collections c1 JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c2.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
1	SELECT COUNT(DISTINCT Child.Collection_ID) FROM Collections AS Parent JOIN Collections AS Child ON Parent.Collection_ID = Child.Parent_Collection_ID WHERE Parent.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT Related_Document_Object_ID FROM Document_Subset_Members DSM JOIN Document_Objects DO ON DSM.Document_Object_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom' GROUP BY Related_Document_Object_ID	select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'
0	SELECT DSM.Related_Document_Object_ID FROM Document_Objects DO JOIN Document_Subset_Members DSM ON DO.Document_Object_ID = DSM.Document_Object_ID WHERE DO.Owner = 'Ransom'	select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'
0	SELECT Collection_Subset_ID, Collection_Subset_Name, (SELECT COUNT(*) FROM Collection_Subset_Members WHERE Collection_Subset_ID = cs.Collection_Subset_ID) AS Num_Collections FROM Collection_Subsets cs	SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;
0	SELECT a.Collection_Subset_ID, a.Collection_Subset_Name, COUNT(b.Collection_ID) FROM Collection_Subsets a LEFT JOIN Collection_Subset_Members b ON a.Collection_Subset_ID = b.Collection_Subset_ID GROUP BY a.Collection_Subset_ID, a.Collection_Subset_Name	SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;
0	SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) = (SELECT MAX(ChildCount) FROM (SELECT COUNT(*) AS ChildCount FROM Document_Objects GROUP BY Parent_Document_Object_ID) AS SubQuery)	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;
0	SELECT Parent_Document_Object_ID, COUNT(*) AS NumberOfChildren FROM Document_Objects GROUP BY Parent_Document_Object_ID	SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;
0	SELECT a.Document_Object_ID, a.related_count FROM (SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS related_count FROM Document_Subset_Members GROUP BY Document_Object_ID) a WHERE a.related_count = (SELECT MIN(b.related_count) FROM (SELECT COUNT(Related_Document_Object_ID) AS related_count FROM Document_Subset_Members GROUP BY Document_Object_ID) b)	SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;
0	SELECT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY COUNT(dc.Document_Object_ID) ASC LIMIT 1	select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;
1	SELECT Document_Object_ID, COUNT(*) AS Related_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Related_Count >= 2 AND Related_Count <= 4	select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;
1	SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Total_Related FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING Total_Related IN (2, 3, 4)	SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;
0	SELECT DISTINCT D.Owner FROM Document_Objects D, Document_Subset_Members DSM WHERE D.Document_Object_ID = DSM.Related_Document_Object_ID AND DSM.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
0	SELECT DISTINCT D2.Owner FROM Document_Objects D1 INNER JOIN Document_Subset_Members DSM ON D1.Document_Object_ID = DSM.Document_Object_ID INNER JOIN Document_Objects D2 ON DSM.Related_Document_Object_ID = D2.Document_Object_ID WHERE D1.Owner = 'Braeden' AND D1.Document_Object_ID != D2.Document_Object_ID	SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';
1	SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
1	SELECT DISTINCT Document_Subset_Name FROM Document_Subsets WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Braeden')	SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'
0	SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) FROM Document_Subsets LEFT JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name	SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;
0	SELECT DISTINCT cs.Collection_Subset_ID, cs.Collection_Subset_Name, (SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_ID = cs.Collection_Subset_ID)) FROM Collection_Subsets cs	SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS DocumentCount FROM Document_Subsets DS LEFT JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(DISTINCT DSM.Document_Object_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(DISTINCT Document_Object_ID) AS Count FROM Document_Subset_Members GROUP BY Document_Subset_ID) TempTable)	select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;
0	SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets DS JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID, DS.Document_Subset_Name HAVING COUNT(DISTINCT DSM.Document_Object_ID) = (SELECT MAX(C) FROM (SELECT COUNT(DISTINCT Document_Object_ID) AS C FROM Document_Subset_Members GROUP BY Document_Subset_ID) AS Temp)	select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;
0	SELECT DSM.Document_Object_ID FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID WHERE DS.Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0	SELECT document_object_id FROM Document_Subset_Members, Document_Subsets WHERE Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID AND Document_Subsets.Document_Subset_Name = 'Best for 2000'	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = "Best for 2000";
0	SELECT dsub.Document_Subset_Name AS Subset_Name, dmem.Document_Object_ID AS Doc_ID FROM Document_Subsets dsub JOIN Document_Subset_Members dmem ON dsub.Document_Subset_ID = dmem.Document_Subset_ID	SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID
0	SELECT dsub.Document_Subset_Name AS Subset_Name, dobj.Document_Object_ID AS Document_ID FROM Document_Subsets dsub JOIN Document_Subset_Members dsm ON dsub.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dobj ON dsm.Document_Object_ID = dobj.Document_Object_ID	select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id
0	SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom'))	select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'
0	SELECT C.Collection_Name FROM Collections C WHERE C.Collection_ID IN (SELECT DC.Collection_ID FROM Documents_in_Collections DC, Document_Objects D WHERE DC.Document_Object_ID = D.Document_Object_ID AND D.Owner = 'Ransom')	SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'
1	SELECT Document_Object_ID, COUNT(Collection_ID) AS Collection_Count FROM Documents_in_Collections GROUP BY Document_Object_ID HAVING COUNT(Collection_ID) > 0	SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID
1	SELECT COUNT(DISTINCT Collection_ID), Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID	SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID
0	SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections doc JOIN Collections col ON doc.Collection_ID = col.Collection_ID WHERE col.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections AS d INNER JOIN Collections AS c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT COUNT(DISTINCT doc_obj.Document_Object_ID) FROM Documents_in_Collections AS doc_obj INNER JOIN Collections AS coll ON doc_obj.Collection_ID = coll.Collection_ID WHERE coll.Collection_Name = 'Best'	SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best";
0	SELECT C.Collection_Name, C.Collection_ID, COUNT(D.Document_Object_ID) AS NumberOfDocuments FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID GROUP BY C.Collection_ID ORDER BY NumberOfDocuments DESC LIMIT 1	SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;
0	SELECT C.Collection_ID, C.Collection_Name, COUNT(D.Document_Object_ID) AS Document_Count FROM Collections C JOIN Documents_in_Collections D ON C.Collection_ID = D.Collection_ID WHERE C.Collection_Name = 'Best' GROUP BY C.Collection_ID, C.Collection_Name HAVING COUNT(D.Document_Object_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(Document_Object_ID) AS Count FROM Documents_in_Collections GROUP BY Collection_ID) AS SubQuery)	SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;
1	SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
1	SELECT DISTINCT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')) AND Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'))	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" AND T4.Collection_Name = "Best";
0	SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d INNER JOIN Collections c ON d.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members dm ON d.Document_Object_ID = dm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' WHERE c.Collection_Name = 'Best' AND ds.Document_Subset_ID IS NULL	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
1	SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections d, Collections c WHERE d.Collection_ID = c.Collection_ID AND c.Collection_Name = 'Best' AND NOT EXISTS (SELECT 1 FROM Document_Subset_Members dm, Document_Subsets ds WHERE dm.Document_Subset_ID = ds.Document_Subset_ID AND ds.Document_Subset_Name = 'Best for 2000' AND dm.Document_Object_ID = d.Document_Object_ID)	SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = "Best" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = "Best for 2000"
0	SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	WITH Best2000 AS (SELECT Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'), BestCollection AS (SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best') SELECT DISTINCT Document_Object_ID FROM Best2000 UNION SELECT DISTINCT Document_Object_ID FROM BestCollection	SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = "Best for 2000" OR T4.Collection_Name = "Best";
0	SELECT C.Collection_Name FROM Collections AS C, Collection_Subset_Members AS CSM WHERE C.Collection_ID = CSM.Related_Collection_ID AND CSM.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = "Best";
0	SELECT c.Collection_Name FROM Collections c INNER JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Related_Collection_ID WHERE csm.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')	SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = "Best";
1	SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
1	SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best'	SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = "Best";
0	SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'	SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = "Best";
0	SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs WHERE EXISTS (SELECT 1 FROM Collection_Subset_Members csm JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE csm.Collection_Subset_ID = cs.Collection_Subset_ID AND c.Collection_Name = 'Best')	SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = "Best";
1	SELECT COUNT(id) FROM songs WHERE name LIKE '%Love%'	SELECT count(*) FROM songs WHERE name LIKE "%Love%"
1	SELECT songs.name FROM songs ORDER BY songs.name ASC	SELECT name FROM songs ORDER BY name
1	SELECT `name`, `language` FROM `songs`	select name , language from songs
1	SELECT MAX(voice_sound_quality) maxVoiceQuality, MIN(voice_sound_quality) minVoiceQuality FROM performance_score	SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
1	SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id AND participants.name = 'Freeway'	SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
1	SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name <> 'Love'	SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'
1	SELECT DISTINCT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'	SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'
1	SELECT DISTINCT stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'	SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'
1	SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) >= 2	SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2
0	SELECT p.id, p.name, p.popularity, song_count FROM participants p JOIN (SELECT participant_id, COUNT(songs_id) AS song_count FROM performance_score GROUP BY participant_id) ps ON p.id = ps.participant_id ORDER BY ps.song_count DESC	SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)
0	SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 UNION SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.rhythm_tempo = 5	SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5
0	SELECT voice_sound_quality FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'	SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'
0	SELECT songs.id, songs.name FROM songs INNER JOIN (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING COUNT(participant_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(participant_id) AS cnt FROM performance_score GROUP BY songs_id) AS subquery)) AS most_sung ON songs.id = most_sung.songs_id	SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9	SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9
1	SELECT COUNT(DISTINCT songs.id) FROM songs LEFT OUTER JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.songs_id IS NULL	SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );
0	SELECT language, AVG(rhythm_tempo) AS AvgRhythmTempo FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language	SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language
1	SELECT DISTINCT name FROM participants WHERE EXISTS (SELECT 1 FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE participants.id = performance_score.participant_id AND songs.language = 'English')	SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
0	SELECT name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian' INTERSECT SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')	SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'
1	SELECT name FROM songs WHERE name LIKE '%Is%' ESCAPE '\'	SELECT name FROM songs WHERE name LIKE "%Is%"
1	SELECT s.original_artist FROM songs s JOIN performance_score p ON s.id = p.songs_id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC	select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc
1	SELECT COUNT(city_code) FROM City	SELECT count(*) FROM City
1	SELECT COUNT(city_code) FROM City	SELECT count(*) FROM City
1	SELECT DISTINCT City.state FROM City	select distinct state from city
1	SELECT DISTINCT state FROM City	SELECT DISTINCT state FROM City
1	SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City) AS unique_countries	SELECT count(DISTINCT country) FROM City
1	SELECT COUNT(*) FROM (SELECT DISTINCT country FROM City) AS unique_countries	SELECT count(DISTINCT country) FROM City
1	SELECT DISTINCT city_name, city_code, state, country FROM City	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT DISTINCT city_name, city_code, state, country FROM City	SELECT city_name ,  city_code ,  state ,  country FROM City
1	SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT latitude, longitude FROM City WHERE city_name LIKE 'Baltimore'	SELECT latitude ,  longitude FROM City WHERE city_name  =  "Baltimore"
1	SELECT City.city_name FROM City WHERE City.state = 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT city_name FROM City c WHERE c.state = 'PA'	SELECT city_name FROM City WHERE state  =  "PA"
1	SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
1	SELECT COUNT(*) FROM City WHERE country LIKE 'Canada'	SELECT count(*) FROM City WHERE country  =  "CANADA"
1	SELECT City.city_name FROM City WHERE City.country = 'USA' ORDER BY City.latitude ASC	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT City.city_name FROM City WHERE City.country = 'USA' ORDER BY City.latitude ASC	SELECT city_name FROM City WHERE country  =  "USA" ORDER BY latitude
1	SELECT state, COUNT(city_name) AS num_cities FROM City GROUP BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state ORDER BY state	SELECT state ,  count(*) FROM City GROUP BY state
1	SELECT country, COUNT(city_name) AS TotalCities FROM City GROUP BY country	select country ,  count(*) from city group by country
1	SELECT country, COUNT(city_code) FROM City GROUP BY country	SELECT country ,  count(*) FROM City GROUP BY country
1	SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
1	SELECT state FROM City GROUP BY state HAVING COUNT(*) >= 2	SELECT state FROM City GROUP BY state HAVING count(*)  >=  2
0	SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY state) AS counts)	SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT state FROM City GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT state, COUNT(city_name) AS city_count FROM City GROUP BY state) AS counts)	SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY country) AS subquery)	SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
0	SELECT country FROM City GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM City GROUP BY country) AS counts)	SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1
1	SELECT first_name, last_name FROM (SELECT Fname AS first_name, LName AS last_name, city_code FROM Student) AS students JOIN City ON students.city_code = City.city_code WHERE City.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0	SELECT Student.Fname || ' ' || Student.LName AS FullName FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD'	SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "MD"
0	SELECT COUNT(*) AS TotalStudents FROM Student INNER JOIN City ON Student.city_code = City.city_code WHERE City.country = 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
1	SELECT COUNT(*) FROM Student s INNER JOIN City c ON s.city_code = c.city_code WHERE c.country LIKE 'China'	SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  "CHINA"
1	SELECT Fname AS FirstName, Major FROM Student JOIN City USING(city_code) WHERE City.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1	SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'	SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  "Baltimore"
1	SELECT country, COUNT(StuID) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country	SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
1	SELECT country, COUNT(StuID) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY country	SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country
0	SELECT city_name, COUNT(StuID) FROM Student, City WHERE Student.city_code = City.city_code GROUP BY city_name	SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code
0	SELECT city_name, COUNT(*) AS student_count FROM Student INNER JOIN City ON Student.city_code = City.city_code GROUP BY city_name	SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code
1	SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
0	SELECT state FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) = (SELECT MAX(student_count) FROM (SELECT COUNT(Student.StuID) AS student_count FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state) AS counts)	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
0	SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1	SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1
0	SELECT country FROM City LEFT JOIN Student ON City.city_code = Student.city_code GROUP BY country ORDER BY COUNT(Student.StuID) ASC LIMIT 1	SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1
1	SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT city_name FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(StuID) >= 3)	SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3
1	SELECT state FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY state HAVING COUNT(Student.StuID) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT C.state FROM City C, Student S WHERE C.city_code = S.city_code GROUP BY C.state HAVING COUNT(S.StuID) > 5	SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
1	SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA')	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country <> 'USA')	SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  "USA"
1	SELECT DISTINCT StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
0	SELECT s.StuID FROM Student s, City c WHERE s.city_code = c.city_code AND s.Sex = 'female' AND c.state = 'PA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  "PA"  AND T2.sex  =  'F'
0	SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'Male' AND Country <> 'USA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
0	SELECT StuID FROM Student AS s JOIN City AS c ON s.city_code = c.city_code WHERE s.Sex = 'male' AND c.country <> 'USA'	SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != "USA"
0	SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
0	SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')	SELECT distance FROM Direct_distance WHERE city1_code  =  "BAL" AND city2_code  =  "CHI"
1	SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM City WHERE city_name = 'Newark')	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
0	SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')	SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" AND T3.city_name  =  "Newark"
1	SELECT MIN(Direct_distance.distance), AVG(Direct_distance.distance), MAX(Direct_distance.distance) FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
1	SELECT AVG(Direct_distance.distance) AS Average, MIN(Direct_distance.distance) AS Minimum, MAX(Direct_distance.distance) AS Maximum FROM Direct_distance	SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance
0	SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance LIMIT 1)	SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
0	SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance) UNION ALL SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance))	SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(DIST.distance) FROM Direct_distance DIST)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
0	SELECT DISTINCT city_code FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code WHERE Direct_distance.distance > (SELECT AVG(distance) FROM Direct_distance)	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
1	SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000 GROUP BY city1_code, city2_code	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT DISTINCT C.city_code FROM City C, Direct_distance D WHERE (C.city_code = D.city1_code OR C.city_code = D.city2_code) AND D.distance < 1000	SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000
0	SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0	SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL' ORDER BY SUM(distance) DESC LIMIT 1	SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  "BAL"
0	SELECT AVG(distance) FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code IN (SELECT city_code FROM City WHERE city_name = 'Boston')	SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
1	SELECT AVG(distance) FROM Direct_distance, City WHERE Direct_distance.city1_code = City.city_code AND City.city_name = 'Boston'	SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  "Boston"
0	SELECT C.city_name FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code WHERE D.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Chicago" ORDER BY distance LIMIT 1
0	SELECT T2.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city2_code = T2.city_code WHERE T1.city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') ORDER BY T1.distance ASC LIMIT 1	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Chicago" ORDER BY distance LIMIT 1
0	SELECT C.city_name FROM City C INNER JOIN (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1) D ON C.city_code = D.city2_code	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" ORDER BY distance DESC LIMIT 1
0	SELECT T2.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city2_code = T2.city_code WHERE T1.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND T1.distance = (SELECT max(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))	SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  "Boston" ORDER BY distance DESC LIMIT 1
1	SELECT city_code, SUM(distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0	SELECT C.city_code, SUM(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_code UNION SELECT C.city_code, SUM(D.distance) FROM City C JOIN Direct_distance D ON C.city_code = D.city2_code GROUP BY C.city_code	SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code
0	SELECT C.city_name, AVG(D.distance) AS avg_distance FROM City C JOIN Direct_distance D ON C.city_code = D.city1_code GROUP BY C.city_name	SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code
0	SELECT city_name, AVG(distance) AS avg_distance FROM City INNER JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code GROUP BY city_name	SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code
1	SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
1	SELECT D.distance FROM Direct_distance D CROSS JOIN Student S1 CROSS JOIN Student S2 WHERE S1.city_code = D.city1_code AND S2.city_code = D.city2_code AND S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'	SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" AND T3.Fname  =  "Tracy" AND T3.Lname  =  "Kim"
0	SELECT S.Fname, S.LName FROM Student S WHERE EXISTS (SELECT 1 FROM City C1 JOIN Direct_distance D ON C1.city_code = D.city1_code JOIN City C2 ON C2.city_code = D.city2_code WHERE C2.city_name = 'Linda Smith' AND S.city_code = C1.city_code ORDER BY D.distance DESC LIMIT 1)	SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" ORDER BY distance DESC LIMIT 1
0	SELECT Fname || ' ' || LName AS FullName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))	SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  "Linda" AND T2.Lname  =  "Smith" ORDER BY distance DESC LIMIT 1
0	SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda')	SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  "Linda"
0	SELECT DISTINCT state FROM City JOIN Student ON City.city_code = Student.city_code WHERE Student.Fname = 'Linda'	SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  "Linda"
1	SELECT Sailors.sid, Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT Sailors.sid, Sailors.name, Sailors.rating, Sailors.age FROM Sailors WHERE Sailors.age > 30	SELECT * FROM Sailors WHERE age  >  30
1	SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30	SELECT name ,  age FROM Sailors WHERE age  <  30
1	SELECT Sailors.name, Sailors.age FROM Sailors WHERE Sailors.age < 30	SELECT name ,  age FROM Sailors WHERE age  <  30
0	SELECT DISTINCT Boats.* FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
1	SELECT DISTINCT R.bid FROM Reserves R WHERE R.sid = 1	SELECT DISTINCT bid FROM Reserves WHERE sid = 1
0	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid AND bid = 102)	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102
0	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Sailors.sid = Reserves.sid AND bid = 102)	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102
1	SELECT DISTINCT bid FROM Reserves	SELECT DISTINCT bid FROM Reserves
1	SELECT DISTINCT Boats.bid FROM Boats, Reserves WHERE Boats.bid = Reserves.bid	SELECT DISTINCT bid FROM Reserves
1	SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'	SELECT name FROM Sailors WHERE name LIKE '%e%'
1	SELECT Sailors.name FROM Sailors WHERE Sailors.name LIKE '%e%'	SELECT name FROM Sailors WHERE name LIKE '%e%'
0	SELECT sid FROM Sailors WHERE age = (SELECT max(age) FROM Sailors)	SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
1	SELECT DISTINCT S.sid FROM Sailors S WHERE S.age > (SELECT MIN(age) FROM Sailors)	SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);
1	SELECT DISTINCT S.name FROM Sailors S LEFT JOIN Sailors S2 ON S.age > S2.age WHERE S2.rating > 7	SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1	SELECT DISTINCT s1.name FROM Sailors s1, Sailors s2 WHERE s1.age > s2.age AND s2.rating > 7	SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);
1	SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT DISTINCT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
0	SELECT S.sid, S.name FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1
0	SELECT S.name FROM Sailors S INNER JOIN Reserves R ON S.sid = R.sid GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) >= 2	select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2
1	SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT DISTINCT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red' OR Boats.color = 'blue')	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT DISTINCT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT DISTINCT s.sid, s.name FROM Sailors s, Reserves r, Boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  "blue"
1	SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves R INNER JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue') GROUP BY sid HAVING COUNT(DISTINCT B.color) = 2)	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1	SELECT DISTINCT R.sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'red' INTERSECT SELECT DISTINCT R.sid FROM Reserves R, Boats B WHERE R.bid = B.bid AND B.color = 'blue'	SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  "blue"
1	SELECT DISTINCT S.sid, S.name FROM Sailors S, Reserves R, Boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.color IN ('red', 'blue') GROUP BY S.sid, S.name HAVING COUNT(DISTINCT B.color) = 2	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1	SELECT S.name, S.sid FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color IN ('red', 'blue') GROUP BY S.sid HAVING COUNT(DISTINCT B.color) = 2	SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  "blue"
1	SELECT DISTINCT S.sid FROM Sailors S WHERE S.sid NOT IN (SELECT R.sid FROM Reserves R)	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL	SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves
1	SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT Sailors.name, Sailors.sid FROM Sailors LEFT JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL	SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
1	SELECT S.sid FROM Sailors S LEFT JOIN Reserves R ON S.sid = R.sid WHERE R.sid IS NULL	SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid
0	SELECT Sailors.name FROM Sailors INNER JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103	SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103
0	SELECT name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves WHERE Reserves.sid = Sailors.sid AND bid = 103)	SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103
0	SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' AND rating IS NOT NULL)	SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')
0	SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')	SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')
1	SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' AND rating IS NOT NULL)	SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')
1	SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')	SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')
1	SELECT s.name, s.sid FROM Sailors s INNER JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2 GROUP BY s.sid, s.name	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT S.sid, S.name FROM Sailors S, Reserves R WHERE S.sid = R.sid AND S.rating >= 3 GROUP BY S.sid, S.name HAVING COUNT(R.sid) > 0	SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2
1	SELECT S.name, S.age FROM Sailors S WHERE S.age = (SELECT MAX(age) FROM Sailors)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT S.name, S.age FROM Sailors S WHERE S.age = (SELECT MAX(age) FROM Sailors)	SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )
1	SELECT COUNT(sid) AS TotalSailors FROM Sailors	SELECT COUNT(*) FROM Sailors
1	SELECT COUNT(DISTINCT S.sid) FROM Sailors S	SELECT COUNT(*) FROM Sailors
1	SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT AVG(Sailors.age) FROM Sailors WHERE Sailors.rating = 7	SELECT AVG(age) FROM Sailors WHERE rating  =  7
1	SELECT COUNT(sid) FROM Sailors WHERE SUBSTR(name, 1, 1) = 'D'	select count(*) from sailors where name like 'd%'
1	SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'	select count(*) from sailors where name like 'd%'
1	SELECT AVG(Sailors.rating), MAX(Sailors.age) FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
1	SELECT AVG(Sailors.rating) AS 'Average Rating', MAX(Sailors.age) AS 'Largest Age' FROM Sailors	SELECT AVG(rating) ,  MAX(age) FROM Sailors
0	SELECT name, COUNT(Reserves.bid) AS total_reservations FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY name	SELECT bid ,  count(*) FROM Reserves GROUP BY bid
0	SELECT name, COUNT(Reserves.bid) FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY name	SELECT bid ,  count(*) FROM Reserves GROUP BY bid
1	SELECT B.bid, COUNT(R.sid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50
1	SELECT B.bid, COUNT(R.sid) AS reservation_count FROM Boats B JOIN Reserves R ON B.bid = R.bid WHERE B.bid > 50 GROUP BY B.bid	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50
0	SELECT name, COUNT(*) FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid GROUP BY name HAVING COUNT(*) > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
0	SELECT name, COUNT(Reserves.bid) FROM Boats, Reserves WHERE Boats.bid = Reserves.bid GROUP BY name HAVING COUNT(Reserves.bid) > 1	SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1
1	SELECT Boats.bid, COUNT(*) AS reservation_count FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Sailors.sid > 1 GROUP BY Boats.bid	SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid
0	SELECT B.name, COUNT(*) FROM Boats B, Reserves R, Sailors S WHERE B.bid = R.bid AND R.sid = S.sid AND S.sid > 1 GROUP BY B.bid	SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid
1	SELECT rating, AVG(Sailors.age) AS AverageAge FROM Sailors, Reserves, Boats WHERE Sailors.sid = Reserves.sid AND Reserves.bid = Boats.bid AND Boats.color = 'red' GROUP BY Sailors.rating	SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating
1	SELECT S.rating, AVG(S.age) AS avg_age FROM Sailors S JOIN Reserves R ON S.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' GROUP BY S.rating	SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating
1	SELECT S.name, S.rating, S.age FROM Sailors AS S ORDER BY S.rating, S.age	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT Sailors.name, Sailors.rating, Sailors.age FROM Sailors ORDER BY Sailors.rating ASC, Sailors.age ASC	SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
1	SELECT COUNT(*) AS NumberOfBoats FROM Boats	SELECT count(*) FROM Boats
1	SELECT COUNT(*) AS BoatCount FROM Boats	SELECT count(*) FROM Boats
1	SELECT COUNT(bid) FROM Boats WHERE UPPER(color) = 'RED'	SELECT count(*) FROM Boats WHERE color  =  'red'
1	SELECT COUNT(bid) FROM Boats WHERE color LIKE 'red'	SELECT count(*) FROM Boats WHERE color  =  'red'
1	SELECT boat_name FROM (SELECT B.name AS boat_name, S.age AS sailor_age FROM Boats B INNER JOIN Reserves R ON B.bid = R.bid INNER JOIN Sailors S ON R.sid = S.sid) AS SubQuery WHERE sailor_age BETWEEN 20 AND 30	SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30
0	SELECT B.name FROM Boats B WHERE EXISTS (SELECT 1 FROM Reserves R JOIN Sailors S ON R.sid = S.sid WHERE R.bid = B.bid AND S.age BETWEEN 20 AND 30)	SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30
0	SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT * FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)	SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')
0	SELECT S.name FROM Sailors S WHERE NOT EXISTS (SELECT 1 FROM Sailors S2 JOIN Reserves R ON S2.sid = R.sid JOIN Boats B ON R.bid = B.bid WHERE B.color = 'red' AND S2.rating >= S.rating)	SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')
1	SELECT rating AS HighestRating FROM Sailors ORDER BY rating DESC LIMIT 1	SELECT max(rating) FROM Sailors
1	SELECT rating FROM Sailors ORDER BY rating DESC LIMIT 1 OFFSET 0	SELECT max(rating) FROM Sailors
0	SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.name = 'Melon')	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
0	SELECT s.name FROM Sailors s WHERE EXISTS (SELECT * FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.name = 'Melon')	SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
1	SELECT `name`, `age` FROM `Sailors` ORDER BY `rating` DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
1	SELECT `name`, `age` FROM `Sailors` ORDER BY `rating` DESC	SELECT name ,  age FROM Sailors ORDER BY rating DESC
0	SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)	SELECT model FROM headphone ORDER BY price DESC LIMIT 1
0	SELECT Model FROM headphone WHERE Price IN (SELECT MAX(Price) FROM headphone)	SELECT model FROM headphone ORDER BY price DESC LIMIT 1
1	SELECT DISTINCT Model FROM headphone ORDER BY Model ASC	SELECT DISTINCT model FROM headphone ORDER BY model
0	SELECT DISTINCT Model FROM headphone ORDER BY Model COLLATE NOCASE	SELECT DISTINCT model FROM headphone ORDER BY model
0	SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM headphone GROUP BY Class) AS Counts)	SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1
0	SELECT Class FROM headphone, stock WHERE headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class HAVING SUM(Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Class) AS SubQuery)	SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1
0	SELECT Class FROM headphone h INNER JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Class HAVING COUNT(DISTINCT s.Headphone_ID) > 2	SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
0	SELECT h.Class FROM headphone h GROUP BY h.Class HAVING COUNT(h.Headphone_ID) <= 2	SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
1	SELECT Class, COUNT(Headphone_ID) FROM headphone WHERE Price > 200 GROUP BY Class	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class ORDER BY COUNT(*) DESC	SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
1	SELECT COUNT(*) FROM (SELECT Earpads FROM headphone GROUP BY Earpads) AS distinct_earpads	SELECT count(DISTINCT earpads) FROM headphone
1	SELECT COUNT(DISTINCT Earpads) AS Earpad_Count FROM headphone	SELECT count(DISTINCT earpads) FROM headphone
0	SELECT Earpads, TotalQuantity FROM (SELECT Earpads, SUM(Quantity) AS TotalQuantity FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY Earpads) AS SubQuery ORDER BY TotalQuantity DESC LIMIT 2	SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2
0	SELECT Earpads, COUNT(Headphone_ID) FROM headphone GROUP BY Earpads ORDER BY COUNT(Headphone_ID) DESC LIMIT 2	SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2
0	SELECT h.Model, h.Class, h.Construction FROM headphone h WHERE h.Price = (SELECT MIN(Price) FROM headphone)	SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1
0	SELECT h.Model, h.Class, h.Construction FROM headphone h WHERE h.Price = (SELECT MIN(Price) FROM headphone)	SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1
1	SELECT AVG(Price) AS AveragePrice, Construction FROM headphone GROUP BY Construction	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1	SELECT headphone.Construction, AVG(headphone.Price) FROM headphone GROUP BY headphone.Construction	SELECT construction ,  avg(price) FROM headphone GROUP BY construction
1	SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
1	SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2	SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'
0	SELECT DISTINCT h.Earpads FROM headphone h WHERE h.Construction NOT LIKE '%plastic%'	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
0	SELECT Earpads FROM headphone WHERE UPPER(Construction) != 'PLASTIC'	SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'
1	SELECT H.Model FROM headphone H WHERE H.Price < (SELECT AVG(Price) FROM headphone)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1	SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone WHERE Price IS NOT NULL)	SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
1	SELECT Name FROM store ORDER BY Date_Opened ASC	SELECT name FROM store ORDER BY date_opened
1	SELECT Name FROM store ORDER BY Date_Opened ASC	SELECT name FROM store ORDER BY date_opened
1	SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'	SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
1	SELECT COUNT(*) FROM (SELECT DISTINCT Neighborhood FROM store) AS neighborhoods	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT COUNT(DISTINCT Neighborhood) AS NumberOfDistinctNeighborhoods FROM store	SELECT count(DISTINCT neighborhood) FROM store
1	SELECT COUNT(Store_ID) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood ORDER BY Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
1	SELECT Neighborhood, COUNT(*) AS TotalNumberOfStores FROM store GROUP BY Neighborhood	SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
0	SELECT Name, Total_Headphones FROM (SELECT store.Name AS Name, SUM(stock.Quantity) AS Total_Headphones FROM store JOIN stock ON store.Store_ID = stock.Store_ID GROUP BY store.Name ORDER BY SUM(stock.Quantity) DESC) AS RankedStores LIMIT 1	SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1
0	SELECT store.Name, AggregateQuantity FROM store JOIN (SELECT Store_ID, SUM(Quantity) AS AggregateQuantity FROM stock GROUP BY Store_ID) AS StockSummary ON store.Store_ID = StockSummary.Store_ID	SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1
1	SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)	SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
1	SELECT s.Name FROM store s WHERE s.Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)	SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
0	SELECT Model FROM headphone EXCEPT SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Quantity > 0	SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)
1	SELECT Model FROM headphone h LEFT OUTER JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE s.Headphone_ID IS NULL	SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)
0	SELECT H.Model FROM headphone H WHERE EXISTS (SELECT 1 FROM stock S WHERE S.Headphone_ID = H.Headphone_ID GROUP BY S.Headphone_ID HAVING SUM(S.Quantity) = (SELECT MAX(Total) FROM (SELECT SUM(Quantity) AS Total FROM stock GROUP BY Headphone_ID) AS Sub))	SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1
0	SELECT Model FROM headphone WHERE Headphone_ID IN (SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1)	SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1
1	SELECT SUM(Quantity) FROM stock, store WHERE stock.Store_ID = store.Store_ID AND store.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1	SELECT SUM(Quantity) FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman'	SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'
1	SELECT Neighborhood FROM store EXCEPT SELECT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0	SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id
1	SELECT DISTINCT Neighborhood FROM store EXCEPT SELECT DISTINCT Neighborhood FROM store JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Quantity > 0	SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id
1	SELECT COUNT(DISTINCT author_id) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(DISTINCT author_id) FROM Author	SELECT count(*) FROM Author
1	SELECT COUNT(1) FROM Paper	SELECT count(*) FROM Paper
1	SELECT COUNT(1) FROM Paper	SELECT count(*) FROM Paper
1	SELECT COUNT(DISTINCT affiliation_id) AS total_unique_affiliations FROM Affiliation	SELECT count(*) FROM Affiliation
1	SELECT COUNT(affiliation_id) FROM Affiliation WHERE affiliation_id IS NOT NULL	SELECT count(*) FROM Affiliation
1	SELECT COUNT(*) FROM Paper p WHERE p.venue = 'NAACL' AND p.year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(paper_id) AS PaperCount FROM Paper WHERE venue = 'NAACL' AND year = 2000	SELECT count(*) FROM Paper WHERE venue  =  "NAACL" AND YEAR  =  2000
1	SELECT COUNT(*) FROM (SELECT DISTINCT Paper.paper_id FROM Paper INNER JOIN Author_list ON Paper.paper_id = Author_list.paper_id INNER JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 AND Affiliation.name = 'Columbia University') AS Result	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
1	SELECT COUNT(Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year = 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University" AND T1.year  =  2009
0	SELECT name, address FROM Affiliation	SELECT DISTINCT name ,  address FROM Affiliation
0	SELECT name, address FROM Affiliation WHERE name IS NOT NULL AND address IS NOT NULL	SELECT DISTINCT name ,  address FROM Affiliation
0	SELECT p.venue, p.year FROM Paper AS p ORDER BY p.year	SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
0	SELECT DISTINCT venue FROM Paper ORDER BY year	SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
0	SELECT P.title, P.paper_id FROM Paper AS P JOIN Author_list AS A ON P.paper_id = A.paper_id JOIN Affiliation AS AF ON A.affiliation_id = AF.affiliation_id WHERE AF.name LIKE 'Harvard University'	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
0	SELECT p.title, p.paper_id FROM Paper p, Author_list al, Affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Harvard University'	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  "Harvard University"
0	SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' GROUP BY p.paper_id, p.title	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE "%Mckeown%"
0	SELECT title, paper_id FROM Paper p WHERE p.paper_id IN (SELECT al.paper_id FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown')	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE "%Mckeown%"
1	SELECT title, paper_id FROM Paper WHERE EXISTS (SELECT * FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Author_list.paper_id = Paper.paper_id) AND EXISTS (SELECT * FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Author_list.paper_id = Paper.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford')) AND paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'))	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Stanford University" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE "Columbia University"
1	SELECT P.paper_id, P.title FROM Paper P JOIN Author_list AL ON P.paper_id = AL.paper_id JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen' GROUP BY P.paper_id, P.title HAVING COUNT(DISTINCT A.name) = 2	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
1	SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT AL.paper_id FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY AL.paper_id HAVING COUNT(DISTINCT A.name) = 2)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown ,  Kathleen%" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow ,  Owen%"
0	SELECT title, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE name = 'Rambow')	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT P.title, P.paper_id FROM Paper P WHERE EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM Author_list AL JOIN Author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)	SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Mckeown%" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE "%Rambow%"
0	SELECT P.title, P.paper_id FROM Paper AS P INNER JOIN Author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN Author AS A ON AL.author_id = A.author_id WHERE A.name IN ('Mckeown, Kathleen', 'Rambow, Owen')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown ,  Kathleen%" OR T3.name LIKE "%Rambow ,  Owen%"
0	SELECT P.title, P.paper_id FROM Paper P, Author_list AL, Author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'Mckeown, Kathleen' OR A.name = 'Rambow, Owen')	SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE "%Mckeown ,  Kathleen%" OR T3.name LIKE "%Rambow ,  Owen%"
0	SELECT A.name, COUNT(AL.paper_id) AS paper_total FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id ORDER BY paper_total DESC	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC
1	SELECT A.name, COUNT(P.paper_id) AS num_of_papers FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY num_of_papers DESC	SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC
0	SELECT A.name, COUNT(AL.paper_id) AS num_papers FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY A.affiliation_id ORDER BY num_papers ASC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
0	SELECT name FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id GROUP BY name ORDER BY COUNT(AL.paper_id) DESC	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC
1	SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) > 50)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT A.name FROM Author A WHERE A.author_id IN (SELECT AL.author_id FROM Author_list AL GROUP BY AL.author_id HAVING COUNT(AL.paper_id) > 50)	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50
1	SELECT A.name FROM Author A INNER JOIN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) AS UniquePapers ON A.author_id = UniquePapers.author_id	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
1	SELECT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(AL.paper_id) = 1	SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1
0	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue, year) AS counts)	SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1
0	SELECT venue, year FROM Paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) as count FROM Paper GROUP BY venue, year) AS counts)	SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1
0	SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue) AS counts)	SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1
0	SELECT venue FROM Paper GROUP BY venue HAVING COUNT(paper_id) = (SELECT MIN(count) FROM (SELECT COUNT(paper_id) AS count FROM Paper GROUP BY venue) AS counts)	SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1
1	SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
1	SELECT COUNT(DISTINCT c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002'	SELECT count(*) FROM Citation WHERE cited_paper_id  =  "A00-1002"
0	SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
0	SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'D12-1027'	SELECT count(*) FROM Citation WHERE paper_id  =  "D12-1027"
0	SELECT P.paper_id, COUNT(C.cited_paper_id) AS num_citations FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY num_citations DESC LIMIT 1	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT cited_paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY cited_paper_id) AS subquery)	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1
1	SELECT P.title FROM Paper P JOIN (SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id) AS C ON P.paper_id = C.paper_id ORDER BY C.citation_count DESC LIMIT 1	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id) AS counts))	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1
0	sql placeholder	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10
0	sql placeholder	SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10
1	SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen')	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(*) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(cited_paper_id) FROM Citation INNER JOIN Author_list ON Citation.paper_id = Author_list.paper_id INNER JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT C.cited_paper_id) FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id JOIN Citation C ON P.paper_id = C.paper_id WHERE A.name = 'Mckeown, Kathleen'	select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0	SELECT A.name, COUNT(C.cited_paper_id) FROM Author A LEFT JOIN Author_list AL ON A.author_id = AL.author_id LEFT JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY A.author_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY AL.author_id))	SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.name, COUNT(C.cited_paper_id) AS citation_count FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY A.author_id HAVING COUNT(C.cited_paper_id) = (SELECT MAX(citation_count) FROM (SELECT COUNT(C.cited_paper_id) AS citation_count FROM Author_list AL JOIN Citation C ON AL.paper_id = C.paper_id GROUP BY AL.author_id) AS MaxCitations)	SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT venue, year FROM Paper p WHERE EXISTS (SELECT * FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' AND al.paper_id = p.paper_id)	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT venue, year FROM Paper, Author_list, Author WHERE Paper.paper_id = Author_list.paper_id AND Author_list.author_id = Author.author_id AND Author.name = 'Mckeown, Kathleen'	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
0	SELECT venue, year FROM Paper P, Author_list AL, Affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = "columbia university"
0	SELECT venue, year FROM Paper WHERE paper_id IN (SELECT Author_list.paper_id FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University')	select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = "columbia university"
0	SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(P.paper_id) AS Cnt FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) T)	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.name FROM Author A INNER JOIN Author_list AL ON A.author_id = AL.author_id INNER JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name HAVING COUNT(P.paper_id) = (SELECT MAX(paper_count) FROM (SELECT COUNT(*) AS paper_count FROM Paper P INNER JOIN Author_list AL ON P.paper_id = AL.paper_id WHERE P.year = 2009 GROUP BY AL.author_id) AS SubQuery)	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.name FROM Affiliation A, Author_list AL, Paper P WHERE A.affiliation_id = AL.affiliation_id AND AL.paper_id = P.paper_id AND P.year = 2009 GROUP BY A.name ORDER BY COUNT(P.paper_id) DESC LIMIT 3	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3
0	SELECT Affiliation.name, COUNT(Paper.paper_id) AS PaperCount FROM Affiliation, Author_list, Paper WHERE Affiliation.affiliation_id = Author_list.affiliation_id AND Author_list.paper_id = Paper.paper_id AND Paper.year = 2009 GROUP BY Affiliation.name ORDER BY PaperCount DESC LIMIT 3	SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3
0	SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year <= 2009	select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = "columbia university"
0	SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper, Author_list, Affiliation WHERE Paper.paper_id = Author_list.paper_id AND Author_list.affiliation_id = Affiliation.affiliation_id AND Affiliation.name = 'Columbia University' AND Paper.year <= 2009	select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = "columbia university"
1	SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Stanford University' AND p.year >= 2000 AND p.year <= 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
1	SELECT COUNT(DISTINCT p.paper_id) FROM Paper p, Author_list al, Affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Stanford University' AND p.year >= 2000 AND p.year <= 2009	SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE "Stanford University"
0	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(author_id) AS cnt FROM Author_list GROUP BY paper_id) T))	SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1
0	SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(author_id) AS cnt FROM Author_list GROUP BY paper_id) T))	SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1
1	WITH Collaborators AS (SELECT DISTINCT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) SELECT COUNT(author_id) FROM Collaborators	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT COUNT(DISTINCT AL2.author_id) FROM Author A1 JOIN Author_list AL1 ON A1.author_id = AL1.author_id JOIN Author_list AL2 ON AL1.paper_id = AL2.paper_id WHERE A1.name = 'Mckeown, Kathleen' AND AL2.author_id != A1.author_id	select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = "mckeown ,  kathleen"
1	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) AS count FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) GROUP BY author_id) AS counts))	select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = "mckeown ,  kathleen" group by t2.author_id order by count(*) desc limit 1
1	SELECT name FROM Author WHERE author_id = (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen')) AND author_id != (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY author_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Author_list GROUP BY author_id) AS counts))	select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = "mckeown ,  kathleen" group by t2.author_id order by count(*) desc limit 1
1	SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT paper_id FROM Paper WHERE LOWER(title) LIKE '%translation%'	SELECT paper_id FROM Paper WHERE title LIKE "%translation%"
1	SELECT paper_id, title FROM Paper WHERE NOT EXISTS (SELECT 1 FROM Citation WHERE cited_paper_id = Paper.paper_id)	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
1	SELECT P.paper_id, P.title FROM Paper P LEFT JOIN Citation C ON P.paper_id = C.cited_paper_id WHERE C.cited_paper_id IS NULL	SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
1	SELECT A.name FROM Affiliation A WHERE A.affiliation_id = (SELECT AL.affiliation_id FROM Author_list AL JOIN Affiliation AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.address LIKE '%China%' GROUP BY AL.affiliation_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE "%China%" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Affiliation.name FROM Affiliation JOIN (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM Author_list GROUP BY affiliation_id) AS PaperCounts ON Affiliation.affiliation_id = PaperCounts.affiliation_id WHERE Affiliation.address LIKE '%China%' ORDER BY PaperCounts.paper_count DESC LIMIT 1	SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE "%China%" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1
1	SELECT venue, COUNT(paper_id) AS count_of_papers, year FROM Paper GROUP BY venue, year ORDER BY year	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1	SELECT year, venue, COUNT(*) AS paper_count FROM Paper GROUP BY year, venue ORDER BY paper_count DESC	SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR
1	SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS num_papers FROM affiliation INNER JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id INNER JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
0	SELECT A.name, COUNT(P.paper_id) FROM Affiliation A LEFT JOIN Author_list AL ON A.affiliation_id = AL.affiliation_id LEFT JOIN Paper P ON AL.paper_id = P.paper_id GROUP BY A.affiliation_id, A.name	SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id
1	SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)	SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50
1	SELECT COUNT(*) FROM Author A WHERE NOT EXISTS (SELECT NULL FROM Author_list AL JOIN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) CP ON AL.paper_id = CP.cited_paper_id WHERE AL.author_id = A.author_id)	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
1	SELECT COUNT(DISTINCT author_id) FROM Author WHERE author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(*) > 50) AS HighCite ON AL.paper_id = HighCite.paper_id)	SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)
0	SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list WHERE paper_id IN (SELECT paper_id FROM Paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009))	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	WITH NAACL_Authors AS (SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'NAACL' AND P.year = 2009), ACL_Authors AS (SELECT A.name FROM Author A JOIN Author_list AL ON A.author_id = AL.author_id JOIN Paper P ON AL.paper_id = P.paper_id WHERE P.venue = 'ACL' AND P.year = 2009) SELECT NAACL_Authors.name FROM NAACL_Authors JOIN ACL_Authors ON NAACL_Authors.name = ACL_Authors.name	SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "NAACL" AND T2.year  =  2009)
1	SELECT A.name FROM Author A WHERE A.author_id NOT IN (SELECT AL.author_id FROM Author_list AL JOIN Paper P ON AL.paper_id = P.paper_id AND P.venue = 'ACL')	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1	SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id AND Paper.venue = 'ACL')	SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  "ACL")
1	SELECT COUNT(*) FROM conference WHERE Conference_Name != ''	SELECT count(*) FROM conference
1	SELECT COUNT(DISTINCT Conference_ID) AS TotalDistinctConferences FROM conference	SELECT count(*) FROM conference
1	SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name <> ''	SELECT DISTINCT conference_name FROM conference
1	SELECT DISTINCT Conference_Name FROM conference WHERE Conference_Name <> ''	SELECT DISTINCT conference_name FROM conference
1	SELECT c.Conference_Name, c.Year, c.Location FROM conference AS c	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
1	SELECT conf.Conference_Name, conf.Year, conf.Location FROM conference conf	SELECT conference_name ,  YEAR ,  LOCATION FROM conference
0	SELECT c.Conference_Name, COUNT(cp.staff_ID) AS Total_Participations FROM conference AS c LEFT JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Conference_Name, COUNT(*) AS occurrences FROM conference GROUP BY Conference_Name	SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name
1	SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year ORDER BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
1	SELECT COUNT(*), Year FROM conference GROUP BY Year	SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR
0	SELECT Year FROM conference GROUP BY Year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY Year) AS subquery)	SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1
0	SELECT Year FROM conference GROUP BY Year HAVING COUNT(Conference_ID) = (SELECT MIN(Cnt) FROM (SELECT COUNT(Conference_ID) AS Cnt FROM conference GROUP BY Year) AS SubQuery)	SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1
1	SELECT Location FROM (SELECT Location, COUNT(*) as ConferenceCount FROM conference GROUP BY Location) AS TempTable WHERE ConferenceCount >= 2	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2 AND Location IS NOT NULL	SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2
1	SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT institution.Institution_Name, institution.Location, institution.Founded FROM institution	SELECT institution_name ,  LOCATION ,  founded FROM institution
1	SELECT COUNT(*) AS CountOfInstitutions FROM institution WHERE Founded BETWEEN 1850 AND 1900	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
1	SELECT COUNT(DISTINCT Institution_ID) FROM institution WHERE Founded >= 1850 AND Founded <= 1900	SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
0	SELECT Institution_Name, Location FROM (SELECT Institution_Name, Location, RANK() OVER (ORDER BY Founded DESC) AS rank FROM institution) WHERE rank = 1	SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1
0	SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution LIMIT 1)	SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1
0	SELECT Institution_Name, COUNT(staff_ID) FROM institution i LEFT OUTER JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name	SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id
0	SELECT i.Institution_ID, COUNT(s.staff_ID), s.name FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID, s.name	select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff WHERE Institution_ID IS NOT NULL)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)	SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
1	SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
1	SELECT name FROM staff WHERE Age > (SELECT AVG(staff.Age) FROM staff)	SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
0	SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM staff WHERE Nationality LIKE 'United States'	SELECT max(age) ,  min(age) FROM staff
1	SELECT MAX(staff.Age) AS MaximumAge, MIN(staff.Age) AS MinimumAge FROM staff	SELECT max(age) ,  min(age) FROM staff
0	SELECT c.Conference_Name FROM conference c WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE cp.Conference_ID = c.Conference_ID AND s.Nationality = 'Canada')	SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  "Canada"
0	SELECT DISTINCT c.Conference_Name FROM conference c WHERE c.Conference_ID IN (SELECT cp.Conference_ID FROM conference_participation cp JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada')	SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  "Canada"
0	SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp1 JOIN conference_participation cp2 ON cp1.staff_ID = cp2.staff_ID AND cp1.role = 'speaker' AND cp2.role = 'sponsor' WHERE cp1.staff_ID = s.staff_ID)	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'
0	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role = 'sponsor')	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'
0	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')))	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'
0	SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation CP1 WHERE CP1.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation CP2 WHERE CP2.staff_ID = CP1.staff_ID AND CP2.Conference_ID = (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')))	SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'
0	SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004))	SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004
0	SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004))	SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004
0	SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year	SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id
0	SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.Conference_ID) AS Total_Participants FROM conference AS c LEFT JOIN conference_participation AS cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID	SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id
0	SELECT conference.Conference_Name FROM conference INNER JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_Name ORDER BY COUNT(conference_participation.staff_ID) DESC LIMIT 2	SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2
1	SELECT Conference_Name FROM (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2) AS TopConferences JOIN conference ON TopConferences.Conference_ID = conference.Conference_ID	SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2
0	SELECT DISTINCT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE Conference_Name = 'ACL')	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
0	SELECT DISTINCT s.name, s.Nationality FROM staff s WHERE s.staff_ID NOT IN (SELECT cp.staff_ID FROM conference_participation cp, conference c WHERE cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL')	SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  "ACL")
0	SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)	SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)
0	SELECT i.Institution_Name, i.Location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004 AND s.Institution_ID = i.Institution_ID)	SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)
0	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)	SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
0	SELECT pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills)	SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
1	SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills AS PS) ORDER BY age ASC	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT PS.pilot_name FROM PilotSkills AS PS WHERE PS.age < (SELECT AVG(age) FROM PilotSkills) ORDER BY PS.age	SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
1	SELECT * FROM PilotSkills WHERE age BETWEEN 0 AND 29	SELECT * FROM PilotSkills WHERE age  <  30
1	SELECT PilotSkills.* FROM PilotSkills WHERE age < 30	select * from pilotskills where age  <  30
1	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35 GROUP BY pilot_name	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT DISTINCT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'	SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
1	SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter' AND location IS NOT NULL	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT H.location FROM Hangar H WHERE H.plane_name = 'F-14 Fighter'	SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'
1	SELECT COUNT(DISTINCT location) FROM Hangar WHERE plane_name IS NOT NULL	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT COUNT(DISTINCT location) FROM Hangar WHERE location IS NOT NULL	SELECT count(DISTINCT LOCATION) FROM hangar
1	SELECT plane_name FROM PilotSkills WHERE pilot_name LIKE 'Jones' AND age = 32	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1	SELECT plane_name FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32 AND plane_name = Hangar.plane_name)	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32
1	SELECT COUNT(*) FROM PilotSkills WHERE age > 40	SELECT count(*) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(DISTINCT pilot_name) AS UniquePilots FROM PilotSkills WHERE age > 40	SELECT count(*) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(*) FROM Hangar WHERE plane_name = 'B-52 Bomber' AND plane_name IN (SELECT plane_name FROM PilotSkills WHERE age < 35)	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
0	SELECT COUNT(Hangar.plane_name) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name WHERE PilotSkills.age < 35 AND Hangar.plane_name = 'B-52 Bombers'	SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
0	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1
0	SELECT pilot_name FROM (SELECT pilot_name, age, RANK() OVER (ORDER BY age ASC) AS rank FROM PilotSkills WHERE plane_name = 'Piper Cub') AS RankedPilots WHERE rank = 1	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1
0	SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM PilotSkills GROUP BY plane_name) AS SubCounts)	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
0	WITH PlaneFrequency AS (SELECT plane_name, COUNT(*) AS Frequency FROM PilotSkills GROUP BY plane_name) SELECT plane_name FROM PlaneFrequency WHERE Frequency = (SELECT MAX(Frequency) FROM PlaneFrequency)	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
0	SELECT plane_name FROM Hangar ORDER BY (SELECT COUNT(*) FROM PilotSkills WHERE PilotSkills.plane_name = Hangar.plane_name) ASC LIMIT 1	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1
0	SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) = (SELECT MIN(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM PilotSkills GROUP BY plane_name) AS SubQuery)	SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1
1	SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills INNER JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name AND Hangar.location = 'Chicago'	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago'	SELECT count(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
1	SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT plane_name FROM Hangar h WHERE h.plane_name IN (SELECT p.plane_name FROM PilotSkills p WHERE p.pilot_name = 'Smith' AND p.age = 41)	SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41
1	SELECT COUNT(DISTINCT PilotSkills.plane_name) FROM PilotSkills	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT COUNT(DISTINCT p.plane_name) FROM PilotSkills p	SELECT count(DISTINCT plane_name) FROM pilotskills
1	SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
0	SELECT COUNT(*) FROM Hangar WHERE location LIKE 'Smith'	SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'
0	SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40 AND pilot_name IS NOT NULL	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
0	SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM PilotSkills WHERE age > 40) AS unique_planes	SELECT count(plane_name) FROM pilotskills WHERE age  >  40
1	SELECT pilot_name FROM PilotSkills WHERE age > 29 AND age < 41 ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT pilot_name FROM PilotSkills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age ASC	SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age
1	SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT PilotSkills.pilot_name FROM PilotSkills ORDER BY PilotSkills.age DESC	SELECT pilot_name FROM pilotskills ORDER BY age DESC
1	SELECT Hangar.location FROM Hangar ORDER BY Hangar.plane_name ASC	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT location FROM Hangar WHERE plane_name IS NOT NULL ORDER BY plane_name	SELECT LOCATION FROM hangar ORDER BY plane_name
1	SELECT DISTINCT p.plane_name FROM PilotSkills p INNER JOIN Hangar h ON p.plane_name = h.plane_name ORDER BY p.plane_name ASC	SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
0	SELECT plane_name FROM (SELECT DISTINCT plane_name FROM Hangar) AS unique_planes ORDER BY plane_name ASC	SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30	SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30
1	SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	SELECT P.pilot_name, P.age FROM PilotSkills P WHERE (P.plane_name = 'Piper Cub' AND P.age > 35) OR (P.plane_name = 'F-14 Fighter' AND P.age < 30)	SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
1	SELECT P.pilot_name FROM PilotSkills P WHERE P.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills P2 WHERE P2.plane_name = 'B-52 Bomber' AND P2.pilot_name = P.pilot_name)	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT P.pilot_name FROM PilotSkills P LEFT JOIN PilotSkills Q ON P.pilot_name = Q.pilot_name AND Q.plane_name = 'B-52 Bomber' WHERE P.plane_name = 'Piper Cub' AND Q.pilot_name IS NULL	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING SUM(CASE WHEN plane_name = 'Piper Cub' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN plane_name = 'B-52 Bomber' THEN 1 ELSE 0 END) > 0	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub') INTERSECT SELECT pilot_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'
1	SELECT AVG(age) AS AvgAge, MIN(age) AS MinAge FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM PilotSkills	SELECT avg(age) ,  min(age) FROM pilotskills
1	SELECT pilot_name FROM PilotSkills PS1 WHERE EXISTS (SELECT 1 FROM Hangar H1 WHERE H1.plane_name = PS1.plane_name AND H1.location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills PS2 WHERE EXISTS (SELECT 1 FROM Hangar H2 WHERE H2.plane_name = PS2.plane_name AND H2.location = 'Boston')	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
1	WITH AustinPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'), BostonPilots AS (SELECT pilot_name FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Boston') SELECT pilot_name FROM AustinPilots INTERSECT SELECT pilot_name FROM BostonPilots	SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  "Boston"
0	SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' UNION SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter'	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
0	SELECT DISTINCT ps.pilot_name FROM PilotSkills ps, Hangar h WHERE ps.plane_name = h.plane_name AND (h.plane_name = 'Piper Cub' OR h.plane_name = 'F-14 Fighter')	SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
1	SELECT H.plane_name, AVG(P.age) AS average_age FROM Hangar H JOIN PilotSkills P ON H.plane_name = P.plane_name GROUP BY H.plane_name	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
1	SELECT plane_name, AVG(age) AS AverageAge FROM PilotSkills GROUP BY plane_name	SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name
0	SELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name
0	SELECT COUNT(*) AS total, plane_name FROM Hangar GROUP BY plane_name	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name
0	SELECT P.pilot_name, P.plane_name FROM PilotSkills P INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) AS MaxAges ON P.plane_name = MaxAges.plane_name AND P.age = MaxAges.max_age ORDER BY P.plane_name	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name
0	SELECT H.plane_name, PS.pilot_name FROM Hangar H INNER JOIN PilotSkills PS ON H.plane_name = PS.plane_name WHERE PS.age = (SELECT MAX(age) FROM PilotSkills PS2 WHERE PS2.plane_name = H.plane_name) ORDER BY H.plane_name	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name
0	SELECT A.pilot_name, A.plane_name FROM PilotSkills A INNER JOIN (SELECT plane_name, MAX(age) AS MaxAge FROM PilotSkills GROUP BY plane_name) B ON A.plane_name = B.plane_name AND A.age = B.MaxAge	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name
0	SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rnk FROM PilotSkills) WHERE rnk = 1	SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name
1	SELECT pilot_name, MAX(age) AS 'Max Age' FROM PilotSkills GROUP BY pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
1	SELECT pilot_name, MAX(age) AS maximum_age FROM PilotSkills GROUP BY pilot_name ORDER BY pilot_name	SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name
0	SELECT location, COUNT(DISTINCT PilotSkills.pilot_name), AVG(PilotSkills.age) FROM Hangar INNER JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location	SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location
0	SELECT location, COUNT(DISTINCT pilot_name) AS pilot_count, AVG(age) AS average_age FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY location	SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location
1	SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
1	SELECT plane_name, COUNT(DISTINCT pilot_name) AS pilot_count FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35	SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35
0	SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1)	SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)
0	SELECT location FROM Hangar WHERE EXISTS (SELECT 1 FROM PilotSkills WHERE PilotSkills.plane_name = Hangar.plane_name AND age = (SELECT MIN(age) FROM PilotSkills))	SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)
1	SELECT p.pilot_name, p.age FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1	SELECT p.pilot_name AS Name, p.age AS Age FROM PilotSkills p, Hangar h WHERE p.plane_name = h.plane_name AND h.location = 'Austin'	SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  "Austin"
1	SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1) ORDER BY pilot_name ASC	SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name
0	SELECT DISTINCT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(P.age) FROM PilotSkills P WHERE P.plane_name = 'Piper Cub') ORDER BY pilot_name ASC	SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name
0	SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter') GROUP BY pilot_name	SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age < (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter')	SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')
0	SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name DESC	SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'
0	SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%' ORDER BY plane_name ASC	SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'
0	SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
0	SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')	SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
0	SELECT Name FROM district WHERE Area_km = (SELECT MAX(Area_km) FROM district)	SELECT name FROM district ORDER BY Area_km DESC LIMIT 1
0	SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district)	SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1
1	SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district)	SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)
1	SELECT MAX(district.Area_km) AS 'Max Area', AVG(district.Area_km) AS 'Avg Area' FROM district	SELECT max(area_km) ,  avg(area_km) FROM district
1	SELECT SUM(Population) FROM district WHERE EXISTS (SELECT 1 FROM district AS sub WHERE sub.District_ID = district.District_ID ORDER BY sub.Area_km DESC LIMIT 3)	SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3
1	SELECT d.District_ID AS ID, d.Name AS DistrictName, d.Government_website AS Website FROM district d ORDER BY d.Population	SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population
1	SELECT Name FROM district WHERE Government_website LIKE '%.gov'	SELECT name FROM district WHERE Government_website LIKE "%gov%"
1	SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000	SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000
1	SELECT Name AS SpeakerName, Speach_title AS TitleOfSpeech FROM spokesman	SELECT name ,  speach_title FROM spokesman
1	SELECT AVG(spokesman.Points), AVG(spokesman.Age) FROM spokesman WHERE spokesman.Rank_position = 1	SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1
1	SELECT Name, Points FROM spokesman WHERE Age BETWEEN 0 AND 39	SELECT name ,  points FROM spokesman WHERE age  <  40
0	SELECT Name FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman)	SELECT name FROM spokesman ORDER BY age DESC LIMIT 1
1	SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman WHERE Points IS NOT NULL)	SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)
0	SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name HAVING COUNT(sd.Spokesman_ID) = (SELECT MAX(Cnt) FROM (SELECT COUNT(sd1.Spokesman_ID) AS Cnt FROM spokesman_district sd1 GROUP BY sd1.District_ID) AS Sub)	SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1
1	SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID AND sd.Start_year < 2004	SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004
0	SELECT d.Name, COUNT(sd.Spokesman_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name	SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID
0	SELECT d.Name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE sd.District_ID = d.District_ID AND s.Rank_position = 2)	SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2
1	SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID, d.Name HAVING COUNT(DISTINCT sd.Spokesman_ID) > 1	SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1
1	SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)	SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)
1	SELECT s.Name FROM spokesman s LEFT JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Spokesman_ID IS NULL	SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
1	SELECT SUM(Population) TotalPopulation, AVG(Population) AveragePopulation FROM district WHERE District_ID IN (SELECT DISTINCT District_ID FROM spokesman_district)	SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)
0	SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)	select title from sculptures order by year desc limit 1
0	SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures)	select title from sculptures order by year desc limit 1
0	SELECT title, location FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	select title ,  location from paintings order by year limit 1
0	SELECT title, location FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1
1	SELECT title FROM Sculptures WHERE location LIKE '%226%'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title FROM Sculptures WHERE location LIKE '%gallery 226%'	SELECT title FROM sculptures WHERE LOCATION  =  "Gallery 226"
1	SELECT title, location FROM Paintings	SELECT title ,  LOCATION FROM paintings
1	SELECT title, location FROM Paintings	SELECT title ,  LOCATION FROM paintings
1	SELECT title, location FROM Sculptures WHERE location IS NOT NULL	SELECT title ,  LOCATION FROM sculptures
1	SELECT title, location FROM Sculptures WHERE title IS NOT NULL AND location IS NOT NULL	SELECT title ,  LOCATION FROM sculptures
1	SELECT medium FROM Paintings p WHERE p.paintingID = 80	SELECT medium FROM paintings WHERE paintingID  =  80
1	SELECT medium FROM Paintings p WHERE p.paintingID = 80	select medium from paintings where paintingid  =  80
1	SELECT `fname`, `lname` FROM `Artists` WHERE `birthYear` > 1850	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
0	SELECT fname || ' ' || lname AS full_name FROM Artists WHERE birthYear > 1850	SELECT lname ,  fname FROM artists WHERE birthYear  >  1850
0	SELECT title, year FROM Sculptures WHERE location <> '226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
1	SELECT title, year FROM Sculptures WHERE location NOT LIKE 'gallery 226'	SELECT title ,  YEAR FROM sculptures WHERE LOCATION != "Gallery 226"
1	SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900 GROUP BY sculptorID)	SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
1	SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)	SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
1	SELECT DISTINCT A.birthYear FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID AND S.year > 1920	SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920
1	SELECT DISTINCT A.birthYear FROM Artists A INNER JOIN Sculptures S ON A.artistID = S.sculptorID AND S.year > 1920	SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920
0	SELECT fname AS first_name, lname AS last_name FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
0	SELECT fname || ' ' || lname AS full_name FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1	SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
1	SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL	SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1
1	SELECT MIN(deathYear - birthYear) FROM Artists WHERE deathYear IS NOT NULL	SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1
0	SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
0	SELECT fname, deathYear - birthYear AS age FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1
1	SELECT COUNT(*) FROM Paintings WHERE location LIKE 'gallery 240'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0	SELECT COUNT(*) AS TotalPaintings FROM Paintings WHERE location = '240'	SELECT count(*) FROM paintings WHERE LOCATION  =  "Gallery 240"
0	SELECT COUNT(*) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE (a.deathYear - a.birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)	select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1
0	SELECT COUNT(P.paintingID) FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.artistID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)	select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1
1	SELECT p.title, p.year FROM Paintings p, Artists a WHERE p.painterID = a.artistID AND a.fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT title AS 'Name of Painting', year AS 'Year of Creation' FROM Paintings JOIN Artists ON painterID = artistID WHERE fname = 'Mary'	SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Mary"
1	SELECT width_mm FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT width_mm FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850	SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850
1	SELECT location, medium FROM Paintings INNER JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
1	SELECT P.location, P.medium FROM Paintings P, Artists A WHERE P.painterID = A.artistID AND A.fname = 'Pablo'	SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  "Pablo"
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID
0	SELECT A.fname, A.lname FROM Artists A WHERE A.artistID IN (SELECT P.painterID FROM Paintings P) AND A.artistID IN (SELECT S.sculptorID FROM Sculptures S)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID
0	SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  "lithograph"
0	SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'oil' INTERSECT SELECT A.fname, A.lname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium = 'lithographic'	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  "lithograph"
0	SELECT birthYear FROM Artists WHERE artistID = (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas' LIMIT 1)	SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  "canvas"
0	SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884)	SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  "canvas"
1	SELECT DISTINCT fname FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium LIKE 'oil' AND P.location LIKE 'gallery 241'	SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT A.fname FROM Artists A, Paintings P WHERE A.artistID = P.painterID AND P.medium LIKE 'oil' AND P.location LIKE 'gallery 241'	SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT medium, COUNT(medium) AS total FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium	SELECT count(*) ,  medium FROM paintings GROUP BY medium
0	SELECT medium, COUNT(medium) AS count FROM (SELECT medium FROM Paintings UNION ALL SELECT medium FROM Sculptures) GROUP BY medium	SELECT count(*) ,  medium FROM paintings GROUP BY medium
1	SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium	SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
1	SELECT location, COUNT(paintingID) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY location	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
1	SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY location	SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
1	SELECT title FROM Paintings WHERE medium LIKE 'oil' AND year > 1910	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT title FROM Paintings WHERE medium LIKE 'oil' AND year > 1910	SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  "oil"
1	SELECT DISTINCT artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium LIKE 'oil' AND p.location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1	SELECT DISTINCT artistID FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location LIKE 'gallery 240'	SELECT DISTINCT painterID FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 240"
1	SELECT DISTINCT title FROM Paintings P1 WHERE EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.mediumOn = 'canvas' AND P1.height_mm > P2.height_mm)	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT P.title FROM Paintings P JOIN Paintings Q ON P.height_mm > Q.height_mm WHERE Q.medium = 'canvas'	SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  "canvas")
0	SELECT DISTINCT paintingID FROM Paintings P1 WHERE P1.year < (SELECT MIN(P2.year) FROM Paintings P2 WHERE P2.location = 'gallery 240')	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0	SELECT DISTINCT paintingID FROM Paintings P1 WHERE EXISTS (SELECT 1 FROM Paintings P2 WHERE P2.location = 'gallery 240' AND P1.year < P2.year)	SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  "Gallery 240")
0	SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1
0	SELECT paintingID FROM Paintings WHERE year IN (SELECT MIN(year) FROM Paintings)	SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE LOWER(title) LIKE '%female%')	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE "%female%"
0	SELECT Artists.fname || ' ' || Artists.lname AS FullName FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%'	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE "%female%"
1	SELECT DISTINCT title FROM Paintings ORDER BY title COLLATE NOCASE	SELECT DISTINCT title FROM paintings ORDER BY title
1	SELECT title FROM Paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title ASC	SELECT DISTINCT title FROM paintings ORDER BY title
0	SELECT DISTINCT title FROM Paintings ORDER BY width_mm	SELECT DISTINCT title FROM paintings ORDER BY height_mm
0	SELECT title FROM Paintings WHERE height_mm IS NOT NULL ORDER BY height_mm ASC	SELECT DISTINCT title FROM paintings ORDER BY height_mm
0	WITH CombinedArt AS (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) SELECT title FROM CombinedArt WHERE year BETWEEN 1900 AND 1950	SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950
0	SELECT Artwork.title FROM (SELECT title, year FROM Paintings UNION ALL SELECT title, year FROM Sculptures) AS Artwork WHERE Artwork.year BETWEEN 1900 AND 1950	SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950
0	SELECT title FROM (SELECT title, painterID AS artistID FROM Paintings UNION ALL SELECT title, sculptorID FROM Sculptures) AS Works WHERE artistID = 222	SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222
0	SELECT title FROM (SELECT title, 'Painting' AS Type FROM Paintings WHERE painterID = 222 UNION ALL SELECT title, 'Sculpture' FROM Sculptures WHERE sculptorID = 222) AS Artworks	SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222
0	SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Paintings WHERE year < 1900 GROUP BY painterID) AS subquery)	SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
0	WITH PaintingCounts AS (SELECT painterID, COUNT(*) AS NumberOfPaintings FROM Paintings WHERE year < 1900 GROUP BY painterID) SELECT painterID FROM PaintingCounts ORDER BY NumberOfPaintings DESC LIMIT 1	SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
0	SELECT A.fname FROM Artists A, Sculptures S WHERE A.artistID = S.sculptorID GROUP BY A.artistID HAVING COUNT(S.sculptureID) = (SELECT MAX(COUNT) FROM (SELECT COUNT(S.sculptureID) AS COUNT FROM Sculptures S GROUP BY S.sculptorID) T)	SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1
0	SELECT fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures GROUP BY sculptorID HAVING COUNT(sculptureID) = (SELECT MAX(cnt) FROM (SELECT COUNT(sculptureID) AS cnt FROM Sculptures GROUP BY sculptorID) tmp))	SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1
1	SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1	SELECT title FROM Paintings WHERE (width_mm < 600) OR (height_mm > 800)	SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
1	SELECT location FROM Paintings WHERE year < 1885 OR year > 1930 GROUP BY location	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1	SELECT location FROM Paintings WHERE year NOT BETWEEN 1885 AND 1930 GROUP BY location	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930
1	SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000 GROUP BY paintingID	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
1	SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 501 AND 1999 GROUP BY paintingID HAVING COUNT(*) = 1	SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
0	SELECT location FROM Paintings WHERE medium LIKE 'on panel' OR medium LIKE 'on canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0	SELECT DISTINCT location FROM Paintings WHERE medium IN ('on panels', 'on canvas')	SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "panel" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  "canvas"
0	SELECT location FROM Paintings WHERE year < 1885 UNION ALL SELECT location FROM Paintings WHERE year > 1930	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
1	SELECT DISTINCT location FROM Paintings WHERE location IN (SELECT location FROM Paintings WHERE year < 1885) INTERSECT SELECT location FROM Paintings WHERE location IN (SELECT location FROM Paintings WHERE year > 1930)	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930
1	SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium LIKE 'oil' AND location LIKE 'gallery 241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT AVG(height_mm) as Height_Avg, AVG(width_mm) as Width_Avg FROM Paintings WHERE medium = 'oil' AND location = '241'	SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  "oil" AND LOCATION  =  "Gallery 241"
0	SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 AND height_mm = (SELECT MAX(height_mm) FROM Paintings WHERE year < 1900)	SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900
0	SELECT MAX(height_mm) AS height, paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID ORDER BY height DESC LIMIT 1	SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900
1	SELECT year, MAX(height_mm) AS maxHeight, MAX(width_mm) AS maxWidth FROM Paintings GROUP BY year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR
1	SELECT year, MAX(height_mm) AS maxHeight, MAX(width_mm) AS maxWidth FROM Paintings GROUP BY year	SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR
0	SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID ORDER BY A.lname, A.fname	SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title
0	SELECT A.fname, A.lname, AVG(P.height_mm) AS avg_height, AVG(P.width_mm) AS avg_width FROM Paintings P JOIN Artists A ON P.painterID = A.artistID GROUP BY P.painterID ORDER BY A.lname, A.fname	SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title
1	SELECT A.fname, COUNT(P.paintingID) FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) >= 2	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
1	SELECT fname, COUNT(paintingID) FROM Artists JOIN Paintings ON artistID = painterID GROUP BY artistID, fname HAVING COUNT(paintingID) >= 2	SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2
0	SELECT A.deathYear FROM Artists A WHERE (SELECT COUNT(P.paintingID) FROM Paintings P WHERE P.painterID = A.artistID) <= 3	SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3
0	SELECT A.deathYear FROM Artists A LEFT JOIN Paintings P ON A.artistID = P.painterID GROUP BY A.artistID HAVING COUNT(P.paintingID) < 4	select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4
1	SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM (SELECT sculptorID, COUNT(*) AS num_sculptures FROM Sculptures GROUP BY sculptorID ORDER BY num_sculptures ASC) AS temp LIMIT 1)	SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1
1	SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)	SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1
0	SELECT paintingID, height_mm FROM Paintings WHERE location = 'gallery 240' ORDER BY width_mm DESC LIMIT 1	SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1
0	SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1 OFFSET 0	SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1
0	SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240') GROUP BY paintingID HAVING COUNT(*) = 1	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
0	SELECT P.paintingID FROM Paintings P WHERE P.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' GROUP BY location)	SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')
1	SELECT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(P.height_mm) FROM Paintings P WHERE P.year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
1	SELECT DISTINCT paintingID FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900)	SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
0	SELECT A.fname, A.lname, COUNT(P.paintingID) AS TotalOilPaintings FROM Artists A JOIN Paintings P ON A.artistID = P.painterID WHERE P.medium LIKE 'oil' GROUP BY A.artistID ORDER BY TotalOilPaintings DESC LIMIT 3	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  "oil" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3
1	SELECT paintingID, location, title FROM Paintings WHERE medium LIKE 'oil' ORDER BY year ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY Paintings.year ASC	SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  "oil" ORDER BY YEAR
1	SELECT year, location, title FROM Paintings WHERE height_mm > '1000' ORDER BY title	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
1	SELECT Paintings.year, Paintings.location, Paintings.title FROM Paintings WHERE Paintings.height_mm > 1000 ORDER BY Paintings.title ASC	SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
0	SELECT a.fname, a.lname FROM Artists a WHERE a.artistID IN (SELECT painterID FROM Paintings) AND a.artistID NOT IN (SELECT sculptorID FROM Sculptures)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID
0	SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings EXCEPT SELECT sculptorID FROM Sculptures)	SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID
0	SELECT location FROM Paintings WHERE year < 1885 EXCEPT SELECT location FROM Paintings WHERE mediumOn = 'canvas'	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
0	SELECT location FROM Paintings WHERE year < 1885 AND mediumOn NOT IN ('canvas')	SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != "canvas"
1	SELECT COUNT(Race_Name) FROM race	SELECT count(*) FROM race
1	SELECT COUNT(Race_Name) FROM race	SELECT count(*) FROM race
1	SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team	SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
1	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
1	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous' AND Pole_Position IS NOT NULL	SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
0	SELECT Constructor FROM driver ORDER BY Age ASC	SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT DISTINCT Constructor FROM driver WHERE Age IS NOT NULL ORDER BY Age ASC	SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC
1	SELECT Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT DISTINCT Entrant FROM driver WHERE Age >= 20 AND Entrant <> ''	SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20
1	SELECT MAX(driver.Age), MIN(driver.Age) FROM driver	SELECT max(Age) ,  min(Age) FROM driver
1	SELECT MAX(Age) AS MaximumAge, MIN(Age) AS MinimumAge FROM driver	SELECT max(Age) ,  min(Age) FROM driver
0	SELECT DISTINCT COUNT(Engine) FROM driver GROUP BY Age HAVING Age > 30 OR Age < 20	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
0	SELECT COUNT(DISTINCT Engine) FROM driver GROUP BY Engine HAVING Age > 30 OR Age < 20	SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20
1	SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT Driver_Name FROM driver ORDER BY LOWER(Driver_Name) DESC	SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
1	SELECT driver.Driver_Name, race.Race_Name FROM driver INNER JOIN race ON driver.Driver_ID = race.Driver_ID	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
1	SELECT driver.Driver_Name, race.Race_Name FROM driver JOIN race USING(Driver_ID)	SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
0	SELECT d.Driver_Name AS Name, COUNT(r.Driver_ID) AS Races FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY Name	SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID
0	SELECT Driver_Name, COUNT(r.Race_Name) AS Races_Participated FROM driver JOIN race r USING (Driver_ID) GROUP BY Driver_Name	SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID
0	SELECT Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM race GROUP BY Driver_ID) T))	SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT d.Age FROM driver d WHERE d.Driver_ID = (SELECT r.Driver_ID FROM race r GROUP BY r.Driver_ID HAVING COUNT(r.Driver_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) as Count FROM race GROUP BY Driver_ID) as RaceCounts))	SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT driver.Driver_Name, driver.Age FROM driver, race WHERE driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Driver_ID) >= 2	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT D.Driver_Name, D.Age FROM driver D WHERE (SELECT COUNT(*) FROM race R WHERE R.Driver_ID = D.Driver_ID) >= 2	SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2
1	SELECT Race_Name FROM race, driver WHERE race.Driver_ID = driver.Driver_ID AND driver.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT r.Race_Name FROM race AS r INNER JOIN driver AS d ON r.Driver_ID = d.Driver_ID AND d.Age >= 26	SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26
1	SELECT Driver_Name FROM driver WHERE Constructor NOT LIKE 'Bugatti'	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT Driver_Name FROM driver WHERE 'Bugatti' <> Constructor	SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != "Bugatti"
1	SELECT Constructor, COUNT(Driver_ID) AS CountOfDrivers FROM driver GROUP BY Constructor HAVING COUNT(Driver_ID) > 0	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
1	SELECT Constructor, COUNT(Driver_Name) FROM driver GROUP BY Constructor	SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR
0	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM driver GROUP BY Engine) AS counts)	SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM driver GROUP BY Engine) AS Counts)	SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT DISTINCT Engine FROM driver GROUP BY Engine HAVING COUNT(*) > 1	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*) > 1	SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2
1	SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT d.Driver_Name FROM driver d LEFT JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Driver_ID IS NULL	SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
1	SELECT DISTINCT d1.Constructor FROM driver d1 JOIN driver d2 ON d1.Constructor = d2.Constructor WHERE d1.Age < 20 AND d2.Age > 30	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	SELECT DISTINCT Constructor FROM driver WHERE Constructor IN (SELECT Constructor FROM driver WHERE Age < 20) AND Constructor IN (SELECT Constructor FROM driver WHERE Age > 30) GROUP BY Constructor HAVING COUNT(DISTINCT Age) > 1	SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30
1	SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
1	SELECT r.Winning_team FROM race r GROUP BY r.Winning_team HAVING COUNT(r.Winning_team) > 1	SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1
0	SELECT Driver_Name FROM driver d WHERE (SELECT COUNT(*) FROM race WHERE Driver_ID = d.Driver_ID AND Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')) = 2	SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "Carl Skerlong" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
1	SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT d.Driver_Name FROM driver d, race r WHERE d.Driver_ID = r.Driver_ID AND r.Pole_Position = 'Carl Skerlong'	SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "Carl Skerlong" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
0	SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')	SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
0	SELECT d.Driver_Name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.Driver_ID = d.Driver_ID AND r.Pole_Position = 'James Hinchcliffe')	SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  "James Hinchcliffe"
1	SELECT COUNT(*) AS language_count FROM languages	SELECT count(*) FROM languages
1	SELECT COUNT(*) AS language_count FROM languages	SELECT count(*) FROM languages
1	SELECT name FROM languages ORDER BY name	SELECT name FROM languages ORDER BY name ASC
1	SELECT name FROM languages ORDER BY name	SELECT name FROM languages ORDER BY name ASC
1	SELECT name FROM languages WHERE name LIKE '%ish%'	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT name FROM languages WHERE name LIKE '%ish%'	SELECT name FROM languages WHERE name LIKE "%ish%"
1	SELECT name AS CountryName FROM countries ORDER BY overall_score DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT name AS CountryName FROM countries ORDER BY overall_score DESC	SELECT name FROM countries ORDER BY overall_score DESC
1	SELECT AVG(justice_score) AS avgJustice FROM countries	SELECT avg(justice_score) FROM countries
1	SELECT AVG(justice_score) FROM countries WHERE justice_score > 0	SELECT avg(justice_score) FROM countries
1	SELECT MAX(c.health_score), MIN(c.health_score) FROM countries c WHERE c.name <> 'Norway'	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT MAX(health_score) AS MaxHealth, MIN(health_score) AS MinHealth FROM countries WHERE NOT name = 'Norway'	SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != "Norway"
1	SELECT COUNT(language_id) FROM (SELECT DISTINCT language_id FROM official_languages) AS distinct_languages	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT COUNT(DISTINCT language_id) AS total_official_languages FROM official_languages	SELECT count(DISTINCT language_id) FROM official_languages
1	SELECT name FROM countries ORDER BY education_score DESC	SELECT name FROM countries ORDER BY education_score DESC
1	SELECT name FROM countries ORDER BY education_score DESC	SELECT name FROM countries ORDER BY education_score DESC
0	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
0	SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)	SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
1	SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
1	SELECT c.name AS Country, l.name AS Language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id	SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
0	SELECT L.name, COUNT(DISTINCT O.country_id) AS num_countries FROM languages AS L LEFT JOIN official_languages AS O ON L.id = O.language_id GROUP BY L.name	SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name
0	SELECT name, COUNT(DISTINCT country_id) FROM languages LEFT OUTER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name	SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) = (SELECT MAX(count) FROM (SELECT COUNT(country_id) AS count FROM official_languages GROUP BY language_id) AS counts))	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1 ORDER BY language_id)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
1	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) >= 2)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2
0	SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' AND countries.id = official_languages.country_id)	SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  "English"
0	SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE ol.country_id = countries.id AND l.name = 'English')	SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  "English"
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 3)	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3
1	SELECT name FROM languages AS L JOIN (SELECT language_id, COUNT(*) AS num_countries FROM official_languages GROUP BY language_id ORDER BY num_countries DESC LIMIT 3) AS OL ON L.id = OL.language_id	SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3
0	SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
0	SELECT languages.name AS LanguageName FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC
0	SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(language_id) = (SELECT MAX(count) FROM (SELECT COUNT(language_id) AS count FROM official_languages GROUP BY country_id) AS counts))	SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT c.name FROM countries c WHERE EXISTS (SELECT NULL FROM official_languages ol WHERE ol.country_id = c.id GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY country_id) sub))	SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT L.name FROM languages L WHERE NOT EXISTS (SELECT 1 FROM official_languages O WHERE O.language_id = L.id)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT L.name FROM languages L WHERE L.id NOT IN (SELECT O.language_id FROM official_languages O)	SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
1	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
1	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)	SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
0	SELECT DISTINCT L.name FROM languages L WHERE L.id IN (SELECT OL.language_id FROM official_languages OL JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id HAVING MAX(C.overall_score) > 95 AND MIN(C.overall_score) < 90)	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90
0	SELECT language.name FROM languages language JOIN official_languages ol ON language.id = ol.language_id JOIN countries country ON ol.country_id = country.id GROUP BY language.id HAVING MAX(country.overall_score) > 95 AND MIN(country.overall_score) < 90	SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90
0	SELECT DISTINCT Addresses.country, Addresses.town_city FROM Addresses	SELECT country ,  town_city FROM Addresses;
1	SELECT country, town_city FROM Addresses	SELECT country ,  town_city FROM Addresses;
0	SELECT DISTINCT Properties.property_id, Addresses.county_state_province FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id	SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
0	SELECT DISTINCT P.property_id, A.county_state_province FROM Properties P INNER JOIN Addresses A ON P.property_address_id = A.address_id	SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;
1	SELECT feature_description FROM Features WHERE feature_name = 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
1	SELECT feature_description FROM Features WHERE feature_name = 'rooftop'	SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';
0	SELECT F.feature_name, F.feature_description FROM Features F, (SELECT feature_id FROM Property_Features GROUP BY feature_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Property_Features GROUP BY feature_id) AS counts)) AS MostCommon WHERE F.feature_id = MostCommon.feature_id	SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;
0	SELECT F.feature_name, F.feature_description FROM Features F INNER JOIN (SELECT feature_id FROM Property_Features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostCommon ON F.feature_id = MostCommon.feature_id	SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;
0	sql placeholder	SELECT min(room_count) FROM Properties;
1	SELECT room_count FROM Properties ORDER BY room_count LIMIT 1	SELECT min(room_count) FROM Properties;
0	SELECT COUNT(*) AS NumberOfProperties FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y'	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0	SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 'Y' GROUP BY parking_lots, garage_yn	SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;
0	SELECT DISTINCT R.age_category_description FROM Users U INNER JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE U.other_user_details LIKE '%Mother%'	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0	SELECT DISTINCT RAC.age_category_description FROM Users U LEFT JOIN Ref_Age_Categories RAC ON U.age_category_code = RAC.age_category_code WHERE U.other_user_details LIKE '%Mother%'	SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE "%Mother";
0	SELECT U.first_name FROM Users U WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;
0	SELECT U.first_name FROM Users U WHERE U.user_id IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) = (SELECT MAX(property_count) FROM (SELECT COUNT(*) AS property_count FROM Properties GROUP BY owner_user_id) AS Temp))	SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;
0	SELECT AVG(room_count) FROM Properties p WHERE EXISTS (SELECT 1 FROM Property_Features pf JOIN Features f ON pf.feature_id = f.feature_id WHERE pf.property_id = p.property_id AND f.feature_name = 'garden')	SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';
0	SELECT AVG(room_count) FROM Rooms r JOIN Properties p ON r.property_id = p.property_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden' AND pf.feature_1 = 'Yes'	SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';
0	SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name LIKE 'swimming pool'	SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';
0	SELECT DISTINCT town_city FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool' GROUP BY a.town_city	SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';
0	SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;
0	SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM Properties)	SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;
0	SELECT AVG(room_count) FROM (SELECT COUNT(*) AS room_count FROM Rooms GROUP BY property_id) AS RoomSummary	SELECT avg(room_count) FROM Properties;
0	SELECT AVG(room_count) FROM Properties p JOIN Rooms r ON p.property_id = r.property_id	SELECT avg(room_count) FROM Properties;
1	SELECT COUNT(DISTINCT room_size) AS NumberOfUniqueRoomSizes FROM Rooms	SELECT count(DISTINCT room_size) FROM Rooms;
1	SELECT COUNT(DISTINCT Rooms.room_size) FROM Rooms	SELECT count(DISTINCT room_size) FROM Rooms;
0	SELECT DISTINCT user_id, search_string FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)	SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;
0	SELECT U.user_id, US.search_seq FROM Users U, User_Searches US WHERE U.user_id = US.user_id AND U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) GROUP BY U.user_id, US.search_seq	SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;
1	SELECT MAX(search_datetime) FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
1	SELECT MAX(search_datetime) FROM User_Searches	SELECT max(search_datetime) FROM User_Searches;
0	SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC, search_datetime DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0	SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC, search_datetime DESC	SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;
0	SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties P LEFT JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2) AS X ON P.owner_user_id = X.owner_user_id WHERE X.owner_user_id IS NULL)	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
0	SELECT A.zip_postcode FROM Addresses A WHERE EXISTS (SELECT 1 FROM Properties P WHERE P.property_address_id = A.address_id AND P.owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))	SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );
1	SELECT U.user_id, U.user_category_code FROM Users U WHERE (SELECT COUNT(*) FROM User_Searches US WHERE US.user_id = U.user_id) = 1	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
1	SELECT U.user_id, U.user_category_code FROM Users U WHERE U.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1)	SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;
0	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = (SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC) AS FirstSearch))	SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;
0	SELECT age_category_code FROM Users WHERE user_id IN (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)	SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;
0	SELECT U.login_name FROM Users U JOIN Ref_Age_Categories R ON U.age_category_code = R.age_category_code WHERE R.age_category_description = 'Senior Citizen' ORDER BY U.first_name	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
0	SELECT U.login_name FROM Users AS U JOIN Ref_Age_Categories AS R ON U.age_category_code = R.age_category_code AND R.age_category_description = 'Senior' ORDER BY U.first_name	SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name
0	SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 'yes')	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT COUNT(User_Searches.search_seq) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = '1'	SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;
1	SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT date_registered FROM Users WHERE login_name LIKE 'ratione'	SELECT date_registered FROM Users WHERE login_name  =  'ratione';
1	SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = true	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
1	SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1	SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;
0	SELECT line_1_number_building, line_2_number_street, town_city FROM Addresses WHERE EXISTS (SELECT 1 FROM Users WHERE Users.user_address_id = Addresses.address_id AND age_category_code = (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior Citizens'))	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0	SELECT DISTINCT Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.town_city FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'senior citizen'	SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';
0	SELECT COUNT(DISTINCT P.property_id) FROM Properties P JOIN Property_Features PF ON P.property_id = PF.property_id GROUP BY P.property_id HAVING COUNT(PF.feature_id) >= 2	SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;
0	SELECT COUNT(DISTINCT P.property_id) FROM Properties P JOIN Property_Features PF ON P.property_id = PF.property_id GROUP BY P.property_id HAVING COUNT(PF.feature_id) >= 2	SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;
1	SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id	SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;
0	SELECT p.property_id, COUNT(pp.photo_seq) FROM Properties p LEFT OUTER JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id	SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;
0	SELECT U.user_id, COUNT(P.photo_seq) AS TotalPhotos FROM Users U CROSS JOIN Properties PR ON U.user_id = PR.owner_user_id CROSS JOIN Property_Photos P ON PR.property_id = P.property_id GROUP BY U.user_id	SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
1	SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id	SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;
0	SELECT SUM(p.price_max) FROM Properties p, Users u, Ref_User_Categories r WHERE p.owner_user_id = u.user_id AND u.user_category_code = r.user_category_code AND (r.user_category_description = 'single mother' OR r.user_category_description = 'student')	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
0	SELECT SUM(price_max) FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id JOIN Ref_User_Categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description IN ('single mothers', 'students') GROUP BY u.user_id	SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';
1	SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
1	SELECT User_Property_History.datestamp, Properties.property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp	SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;
1	SELECT R.property_type_description, R.property_type_code FROM Ref_Property_Types R WHERE R.property_type_code = (SELECT P.property_type_code FROM Properties P GROUP BY P.property_type_code ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;
0	SELECT R.property_type_description FROM Ref_Property_Types R, (SELECT property_type_code FROM Properties GROUP BY property_type_code HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM Properties GROUP BY property_type_code) as Counts)) as MostCommon WHERE R.property_type_code = MostCommon.property_type_code	SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60' ORDER BY age_category_description ASC LIMIT 1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'	SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';
1	SELECT room_size, COUNT(*) AS count FROM Rooms GROUP BY room_size	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1	SELECT room_size, COUNT(room_number) AS total_rooms FROM Rooms GROUP BY room_size ORDER BY total_rooms DESC	SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size
1	SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie'	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
1	SELECT A.country FROM Addresses A, Users U WHERE A.address_id = U.user_address_id AND U.first_name = 'Robbie'	SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';
0	SELECT first_name, middle_name, last_name FROM Users WHERE EXISTS (SELECT 1 FROM Properties WHERE owner_user_id = Users.user_id AND property_address_id = Users.user_address_id)	SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;
0	SELECT U.first_name || ' ' || COALESCE(U.middle_name, '') || ' ' || U.last_name AS FullName FROM Users U, Properties P WHERE U.user_id = P.owner_user_id	SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;
0	SELECT search_string FROM User_Searches AS US WHERE NOT EXISTS (SELECT NULL FROM Properties AS P WHERE P.owner_user_id = US.user_id)	SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;
0	SELECT search_string FROM User_Searches AS US WHERE NOT EXISTS (SELECT NULL FROM Properties AS P WHERE P.owner_user_id = US.user_id)	SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;
0	SELECT U.last_name, U.user_id FROM Users U INNER JOIN Properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id, U.last_name HAVING COUNT(DISTINCT P.property_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches S WHERE S.user_id = U.user_id) <= 2	SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;
1	SELECT U.user_id, U.last_name FROM Users U JOIN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) <= 2) US ON U.user_id = US.user_id JOIN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) >= 2) P ON U.user_id = P.owner_user_id	SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;
1	SELECT COUNT(*) FROM bike WHERE weight > 780.0	SELECT count(*) FROM bike WHERE weight  >  780
1	SELECT product_name, weight FROM bike ORDER BY price	SELECT product_name ,  weight FROM bike ORDER BY price ASC
1	SELECT name, nation, heat FROM cyclist	SELECT heat ,  name ,  nation FROM cyclist
1	SELECT (SELECT MAX(weight) FROM bike) AS MaxWeight, (SELECT MIN(weight) FROM bike) AS MinWeight	SELECT max(weight) ,  min(weight) FROM bike
1	SELECT AVG(price) FROM bike WHERE material = 'Carbon CC' AND price > 0	SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'
1	SELECT name, result FROM cyclist WHERE nation NOT LIKE 'Russia'	SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'
1	SELECT DISTINCT b.id AS BikeID, b.product_name AS BikeName FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015	SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015
1	SELECT id, product_name FROM bike WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes WHERE bike.id = cyclists_own_bikes.bike_id GROUP BY bike_id HAVING COUNT(DISTINCT cyclist_id) >= 4)	SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4
0	SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes b ON c.id = b.cyclist_id GROUP BY c.id, c.name HAVING COUNT(b.bike_id) = (SELECT MAX(count) FROM (SELECT COUNT(bike_id) AS count FROM cyclists_own_bikes GROUP BY cyclist_id) as counts)	SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain')	SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'
1	SELECT COUNT(DISTINCT heat) AS NumberOfHeats FROM cyclist	SELECT count(DISTINCT heat) FROM cyclist
1	SELECT COUNT(*) FROM (SELECT id FROM cyclist EXCEPT SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015) AS NonPurchasers	SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )
1	SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.result < '4:21.558'	SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'
0	WITH BradleyBikes AS (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Bradley Wiggins'), AntonioBikes AS (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Antonio Tauler') SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM BradleyBikes INTERSECT SELECT bike_id FROM AntonioBikes)	SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'
0	SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id LEFT JOIN bike b ON cob.bike_id = b.id WHERE b.product_name LIKE '%racing%' AND cob.cyclist_id IS NULL	SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id
1	SELECT product_name FROM bike WHERE material LIKE '%fiber%'	SELECT product_name FROM bike WHERE material LIKE "%fiber%"
1	SELECT cyclist_id, COUNT(bike_id) AS count_of_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id	SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id
0	SELECT Flavor FROM goods WHERE Food = 'cake' AND Price = (SELECT MAX(Price) FROM goods WHERE Food = 'cake')	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY price DESC LIMIT 1
0	SELECT Id, Flavor FROM (SELECT Id, Flavor, RANK() OVER (ORDER BY Price DESC) as rank FROM goods WHERE Food = 'cake') WHERE rank = 1	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY price DESC LIMIT 1
0	SELECT Flavor, MIN(Price) FROM goods WHERE Food = 'cookie' GROUP BY Flavor HAVING Price = MIN(Price) ORDER BY Price ASC LIMIT 1	SELECT id ,  flavor FROM goods WHERE food  =  "Cookie" ORDER BY price LIMIT 1
0	SELECT Id, Flavor FROM goods WHERE Food = 'cookie' AND Price = (SELECT MIN(Price) FROM goods WHERE Food = 'cookie')	SELECT id ,  flavor FROM goods WHERE food  =  "Cookie" ORDER BY price LIMIT 1
0	SELECT DISTINCT Id FROM goods WHERE Flavor = 'apple'	SELECT id FROM goods WHERE flavor  =  "Apple"
1	SELECT Id FROM goods WHERE Flavor LIKE 'apple'	SELECT id FROM goods WHERE flavor  =  "Apple"
1	SELECT goods.Id FROM goods WHERE Price < 3.00	SELECT id FROM goods WHERE price  <  3
1	SELECT goods.Id FROM goods WHERE Price < '3.0'	SELECT id FROM goods WHERE price  <  3
0	SELECT DISTINCT customers.Id FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' AND goods.Flavor = 'lemon'	SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  "Lemon" AND T1.Food  =  "Cake"
0	SELECT DISTINCT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id AND g.Flavor = 'lemon' AND g.Food = 'cake'	SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  "Lemon" AND T1.Food  =  "Cake"
0	SELECT Food, COUNT(DISTINCT CustomerId) AS Customers FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food	SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food
0	SELECT Food, COUNT(DISTINCT CustomerId) AS Customers FROM goods LEFT JOIN items ON goods.Id = items.Item LEFT JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY Food	SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food
1	SELECT c.Id FROM customers c INNER JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT Id FROM customers WHERE EXISTS (SELECT NULL FROM receipts WHERE CustomerId = customers.Id GROUP BY CustomerId HAVING COUNT(ReceiptNumber) >= 15)	SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15
1	SELECT c.LastName FROM customers c JOIN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(ReceiptNumber) > 10) AS sub ON c.Id = sub.CustomerId	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
1	SELECT c.LastName FROM customers c WHERE c.Id IN (SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) > 10)	SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10
0	SELECT COUNT(Flavor) FROM (SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake')	SELECT count(*) FROM goods WHERE food  =  "Cake"
0	SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'cake'	SELECT count(*) FROM goods WHERE food  =  "Cake"
1	SELECT Flavor FROM goods WHERE Food = 'Croissant' AND Flavor IS NOT NULL	SELECT flavor FROM goods WHERE food  =  "Croissant"
0	SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant'	SELECT flavor FROM goods WHERE food  =  "Croissant"
0	SELECT DISTINCT Flavor, Food FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE r.CustomerId = 15	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
0	SELECT DISTINCT goods.Flavor FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15	SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15
1	SELECT Food, AVG(Price) as AvgPrice, MAX(Price) as MaximumPrice, MIN(Price) as MinimumPrice FROM goods GROUP BY Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT g.Food, AVG(g.Price) as AvgPrice, MIN(g.Price) as MinPrice, MAX(g.Price) as MaxPrice FROM goods g GROUP BY g.Food	SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food
1	SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake') INTERSECT SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie')	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
0	SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cakes' INTERSECT SELECT Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cookies'	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cake" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  "Cookie"
0	SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'LOGAN' AND goods.Food = 'Croissant' GROUP BY receipts.ReceiptNumber	SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  "Croissant" AND T4.LastName  =  'LOGAN'
0	SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'croissant'))	SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  "Croissant" AND T4.LastName  =  'LOGAN'
0	SELECT R.ReceiptNumber, R.Date FROM receipts R WHERE R.ReceiptNumber IN (SELECT I.Receipt FROM items I JOIN goods G ON I.Item = G.Id WHERE G.Price = (SELECT MAX(Price) FROM goods))	SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1
0	SELECT ReceiptNumber, Date FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE receipts.ReceiptNumber = items.Receipt AND goods.Price = (SELECT MAX(Price) FROM goods))	SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1
0	SELECT T1.Food, T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T2.Item ORDER BY COUNT(*) ASC LIMIT 1	SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1
0	SELECT G.Food FROM goods G INNER JOIN items I ON G.Id = I.Item GROUP BY G.Id HAVING COUNT(I.Item) = (SELECT MIN(ItemCount) FROM (SELECT COUNT(Item) AS ItemCount FROM items GROUP BY Item) AS SubQuery)	SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1
1	SELECT Food, COUNT(Id) FROM goods GROUP BY Food	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT Food, COUNT(Id) FROM goods GROUP BY Food	SELECT count(*) ,  food FROM goods GROUP BY food
1	SELECT Food, AVG(Price) average_price FROM goods GROUP BY Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT Food, AVG(Price) FROM goods GROUP BY Food	SELECT avg(price) ,  food FROM goods GROUP BY food
1	SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
1	SELECT Id FROM goods WHERE Flavor LIKE 'Apricot' AND Price < 5	SELECT id FROM goods WHERE flavor  =  "Apricot" AND price  <  5
0	SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10	SELECT flavor FROM goods WHERE food  =  "Cake" AND price  >  10
0	SELECT g.Flavor FROM goods g WHERE g.Food = 'cake' AND g.Price > 10	SELECT flavor FROM goods WHERE food  =  "Cake" AND price  >  10
1	SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
1	SELECT DISTINCT g.Id, g.Price FROM goods g WHERE g.Price < (SELECT AVG(Price) FROM goods)	SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
0	SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(Price) FROM goods WHERE Flavor = 'Tart' GROUP BY Flavor)	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
0	SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart') AND g.Flavor <> 'Tart'	SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  "Tart")
1	SELECT DISTINCT R.ReceiptNumber FROM receipts R, items I, goods G WHERE R.ReceiptNumber = I.Receipt AND I.Item = G.Id AND G.Price > 13	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1	SELECT DISTINCT r.ReceiptNumber FROM receipts r WHERE r.ReceiptNumber IN (SELECT i.Receipt FROM items i WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Price > 13))	SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13
1	SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 GROUP BY r.Date HAVING COUNT(*) > 0	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
0	SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 15))	SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15
1	SELECT goods.Id FROM goods WHERE goods.Id LIKE '%%APP%%'	SELECT id FROM goods WHERE id LIKE "%APP%"
1	SELECT Id FROM goods WHERE UPPER(Id) LIKE UPPER('%APP%')	SELECT id FROM goods WHERE id LIKE "%APP%"
0	SELECT Flavor, Price FROM goods WHERE Id LIKE '%70_'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
1	SELECT goods.Id, goods.Price FROM goods WHERE goods.Id LIKE '%70%'	SELECT id ,  price FROM goods WHERE id LIKE "%70%"
0	SELECT c.LastName FROM customers c ORDER BY c.LastName ASC	SELECT DISTINCT LastName FROM customers ORDER BY LastName
0	SELECT c.LastName FROM customers c ORDER BY c.LastName ASC	SELECT DISTINCT LastName FROM customers ORDER BY LastName
1	SELECT goods.Id AS GoodID FROM goods ORDER BY GoodID ASC	SELECT DISTINCT id FROM goods ORDER BY id
1	SELECT DISTINCT g.Id FROM goods g ORDER BY g.Id	SELECT DISTINCT id FROM goods ORDER BY id
0	SELECT DISTINCT R.ReceiptNumber FROM receipts R LEFT JOIN items I ON R.ReceiptNumber = I.Receipt LEFT JOIN goods G ON I.Item = G.Id WHERE G.Flavor = 'apple' AND G.Food = 'pie' OR R.CustomerId = 12	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Apple" AND T2.food  =  "Pie" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12
0	SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'pie' UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12	SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Apple" AND T2.food  =  "Pie" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12
1	SELECT r.ReceiptNumber, r.Date FROM receipts r WHERE r.Date = (SELECT MAX(r2.Date) FROM receipts r2)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
1	SELECT ReceiptNumber, Date FROM receipts WHERE Date IN (SELECT MAX(Date) FROM receipts)	SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)
1	SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
1	SELECT ReceiptNumber FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 10)) OR Date = (SELECT MIN(Date) FROM receipts)	SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)
0	SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price > 2.99 AND Price < 7.01	SELECT id FROM goods WHERE food  =  "Cookie" OR food  =  "Cake" AND price BETWEEN 3 AND 7
0	SELECT Id FROM goods WHERE Food = 'Cookies' AND Price BETWEEN 3 AND 7 UNION SELECT Id FROM goods WHERE Food = 'Cakes' AND Price BETWEEN 3 AND 7	SELECT id FROM goods WHERE food  =  "Cookie" OR food  =  "Cake" AND price BETWEEN 3 AND 7
0	SELECT c.FirstName, c.LastName FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.CustomerId = c.Id AND r.Date = (SELECT MIN(Date) FROM receipts))	SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1
1	SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC LIMIT 1)	SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1
0	SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')	SELECT avg(price) FROM goods WHERE flavor  =  "Blackberry" OR flavor  =  "Blueberry"
0	SELECT AVG(Price) AS AveragePrice FROM goods WHERE Flavor IN ('blackberry', 'blueberry')	SELECT avg(price) FROM goods WHERE flavor  =  "Blackberry" OR flavor  =  "Blueberry"
0	SELECT * FROM (SELECT Price FROM goods WHERE Flavor = 'cheese' ORDER BY Price) AS Cheapest LIMIT 1	SELECT min(price) FROM goods WHERE flavor  =  "Cheese"
0	SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1	SELECT min(price) FROM goods WHERE flavor  =  "Cheese"
1	SELECT Flavor, MAX(Price) AS MaximumPrice, MIN(Price) AS MinimumPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Flavor, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor ASC	SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
1	SELECT Food, MIN(Price) AS LowPrice, MAX(Price) AS HighPrice FROM goods GROUP BY Food ORDER BY Food ASC	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
1	SELECT Food, MIN(Price) AS Minimum, MAX(Price) AS Maximum FROM goods GROUP BY Food ORDER BY Food ASC	SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food
0	SELECT Date FROM (SELECT Date, COUNT(ReceiptNumber) AS ReceiptCount FROM receipts GROUP BY Date) AS ReceiptSummary ORDER BY ReceiptCount DESC LIMIT 3	SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3
1	SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(ReceiptNumber) DESC LIMIT 3	SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3
0	SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) FROM customers c LEFT JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id ORDER BY COUNT(r.ReceiptNumber) DESC LIMIT 1	SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1
0	SELECT CustomerId, COUNT(*) FROM receipts GROUP BY CustomerId HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM receipts GROUP BY CustomerId) AS SubQuery)	SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1
1	SELECT receipts.Date, COUNT(DISTINCT customers.Id) AS NumberOfDistinctCustomers FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id GROUP BY receipts.Date	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
1	SELECT r.Date, COUNT(DISTINCT CustomerId) AS TotalCustomers FROM receipts r GROUP BY r.Date ORDER BY r.Date	SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date
0	SELECT c.FirstName, c.LastName FROM customers c WHERE EXISTS (SELECT * FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = c.Id AND g.Flavor = 'apple' AND g.Food = 'Tart')	SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  "Apple" AND T1.food  =  "Tart"
0	SELECT c.FirstName, c.LastName FROM customers AS c INNER JOIN receipts AS r ON c.Id = r.CustomerId INNER JOIN items AS i ON r.ReceiptNumber = i.Receipt INNER JOIN goods AS g ON i.Item = g.Id WHERE g.Flavor = 'apple' AND g.Food = 'Tarts'	SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  "Apple" AND T1.food  =  "Tart"
0	SELECT g1.Id FROM goods g1 CROSS JOIN (SELECT MIN(Price) AS MinPrice FROM goods WHERE Food = 'Croissant') g2 WHERE g1.Food = 'Cookies' AND g1.Price < g2.MinPrice	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
0	SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(g.Price) FROM goods g WHERE g.Food = 'croissant')	SELECT id FROM goods WHERE food  =  "Cookie" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')
1	SELECT g.Id FROM goods g JOIN (SELECT AVG(Price) AS AvgPrice FROM goods WHERE Food = 'Tart') t ON g.Price >= t.AvgPrice WHERE g.Food = 'Cake'	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
1	SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT AVG(Price) FROM goods g WHERE g.Food = 'Tart')	SELECT id FROM goods WHERE food  =  "Cake" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  "Tart")
0	SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods)	SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)
0	SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods)	SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)
1	SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
1	SELECT g.Id, g.Flavor, g.Food FROM goods g ORDER BY g.Price ASC	SELECT id ,  flavor ,  food FROM goods ORDER BY price
0	SELECT g.Id, g.Flavor FROM goods AS g WHERE g.Food = 'Cakes' ORDER BY g.Flavor	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0	SELECT DISTINCT goods.Id, goods.Flavor FROM goods, items WHERE goods.Id = items.Item AND goods.Food = 'cake' ORDER BY goods.Flavor	SELECT id ,  flavor FROM goods WHERE food  =  "Cake" ORDER BY flavor
0	SELECT g.Id FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'chocolate' GROUP BY i.Item HAVING COUNT(i.Item) <= 10	SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Chocolate" GROUP BY item HAVING count(*)  <=  10
0	SELECT goods.Id FROM goods JOIN items ON goods.Id = items.Item AND goods.Flavor = 'chocolate' GROUP BY goods.Id HAVING COUNT(items.Item) <= 10	SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  "Chocolate" GROUP BY item HAVING count(*)  <=  10
1	SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0	SELECT Flavor FROM goods g1 WHERE g1.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g1.Flavor)	SELECT DISTINCT flavor FROM goods WHERE food  =  "Cake" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  "Tart"
0	SELECT G.Flavor, G.Food FROM goods G, items I WHERE G.Id = I.Item GROUP BY G.Flavor, G.Food ORDER BY COUNT(I.Item) DESC LIMIT 3	SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3
0	SELECT G.Flavor, COUNT(*) AS TotalPurchases FROM items I JOIN goods G ON I.Item = G.Id GROUP BY I.Item ORDER BY TotalPurchases DESC LIMIT 3	SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3
1	SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING SUM(Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT c.Id FROM customers c, receipts r, items i, goods g WHERE c.Id = r.CustomerId AND r.ReceiptNumber = i.Receipt AND i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150
1	SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY CustomerId HAVING AVG(Price) > 5	SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5
1	SELECT Date FROM (SELECT receipts.Date, SUM(goods.Price) AS Total FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date) AS DailySales WHERE Total > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT Date FROM (SELECT receipts.Date, SUM(goods.Price) AS Total FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY receipts.Date) AS Sales WHERE Total > 100	SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100
1	SELECT COUNT(Driver_ID) AS NumberOfDrivers FROM driver	SELECT count(*) FROM driver
1	SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Driver_ID IS NOT NULL	SELECT count(*) FROM driver
1	SELECT Make, COUNT(Driver_ID) AS TotalDrivers FROM driver WHERE Points > 150 GROUP BY Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT d.Make, COUNT(*) AS DriverCount FROM driver d WHERE d.Points > 150 GROUP BY d.Make	SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make
1	SELECT Make, AVG(Age) AS Average_Age FROM driver WHERE Age IS NOT NULL GROUP BY Make	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT Make, AVG(Age) AS AverageAge FROM driver GROUP BY Make ORDER BY Make	SELECT avg(age) ,  Make FROM driver GROUP BY make
1	SELECT AVG(Laps) AS Average_Laps FROM driver WHERE Age < 20	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT AVG(Laps) AS Average_Laps FROM driver WHERE Age < 20	SELECT avg(Laps) FROM driver WHERE age  <  20
1	SELECT Manager AS Team_Manager, Sponsor AS Team_Sponsor FROM team ORDER BY Car_Owner ASC	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
1	SELECT Manager AS Team_Manager, Sponsor AS Team_Sponsor FROM team ORDER BY Car_Owner ASC	SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner
0	SELECT Make FROM team GROUP BY Make HAVING COUNT(Make) > 1	SELECT make FROM team GROUP BY team HAVING count(*)  >  1
0	SELECT t.Make FROM team t GROUP BY t.Make HAVING COUNT(t.Team_ID) > 1	SELECT make FROM team GROUP BY team HAVING count(*)  >  1
1	SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT t.Make FROM team t WHERE t.Car_Owner = 'Buddy Arrington'	SELECT Make FROM team WHERE Car_Owner  =  "Buddy Arrington"
1	SELECT MAX(Points) Maximum, MIN(Points) Minimum FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver	SELECT max(Points) ,  min(Points) FROM driver
1	SELECT COUNT(*) AS NumberOfDrivers FROM driver WHERE Points < 150	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT COUNT(*) AS NumberOfDrivers FROM driver WHERE Points < 150	SELECT count(*) FROM driver WHERE Points  <  150
1	SELECT Driver FROM driver WHERE Age IS NOT NULL ORDER BY Age	SELECT Driver FROM driver ORDER BY Age ASC
1	SELECT Driver AS Name FROM driver ORDER BY Age ASC	SELECT Driver FROM driver ORDER BY Age ASC
0	SELECT Driver FROM driver ORDER BY Points DESC, Driver ASC	SELECT Driver FROM driver ORDER BY Points DESC
1	SELECT Driver FROM driver ORDER BY Points DESC	SELECT Driver FROM driver ORDER BY Points DESC
0	SELECT `Driver`, `Country` FROM `driver`	SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country
0	SELECT d.Driver, d.Country FROM driver AS d	SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country
1	SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'	SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  "Dublin"
1	SELECT AVG(Age) AS AverageAge FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
1	SELECT AVG(driver.Age) AS AverageAge FROM driver INNER JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'	SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  "English"
0	SELECT DISTINCT Country FROM driver d WHERE d.Points > 150	SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150
0	SELECT DISTINCT Country FROM driver d WHERE d.Points > 150	SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150
0	SELECT c.Capital FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country_Id AND d.Points = (SELECT MAX(Points) FROM driver))	SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
0	SELECT Capital FROM (SELECT country.Capital, driver.Points FROM country JOIN driver ON country.Country = driver.Country ORDER BY driver.Points DESC) AS ranked LIMIT 1	SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
1	SELECT driver.Make, COUNT(driver.Driver_ID) FROM driver GROUP BY driver.Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
1	SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Make	SELECT Make ,  COUNT(*) FROM driver GROUP BY Make
0	SELECT Make FROM (SELECT Make, RANK() OVER (ORDER BY COUNT(Driver_ID) DESC) as rank FROM driver GROUP BY Make) ranked WHERE rank = 1	SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM driver GROUP BY Make) AS SubQuery)	SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT d.Make FROM driver d GROUP BY d.Make HAVING COUNT(d.Driver_ID) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
0	SELECT D.Make FROM driver D JOIN team_driver TD ON D.Driver_ID = TD.Driver_ID GROUP BY D.Make HAVING COUNT(DISTINCT D.Driver_ID) >= 3	SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
1	SELECT Team FROM team AS t WHERE NOT EXISTS (SELECT * FROM team_driver AS td WHERE td.Team_ID = t.Team_ID)	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
1	SELECT T.Team FROM team T LEFT JOIN team_driver TD ON T.Team_ID = TD.Team_ID WHERE TD.Driver_ID IS NULL	SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
0	SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet'	SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Dodge" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Chevrolet"
0	SELECT Country FROM driver WHERE Make = 'Dodge' INTERSECT SELECT Country FROM driver WHERE Make = 'Chevrolet'	SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Dodge" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  "Chevrolet"
1	SELECT SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
1	SELECT SUM(driver.Points) AS TotalPoints, AVG(driver.Points) AS AveragePoints FROM driver	SELECT sum(Points) ,  avg(Points) FROM driver
0	SELECT Country FROM country EXCEPT SELECT DISTINCT Country FROM driver	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
0	SELECT Country FROM country EXCEPT SELECT DISTINCT Country FROM driver	SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
0	SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) sub))	SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1
0	SELECT Manager, Sponsor FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(Driver_ID) = (SELECT MAX(cnt) FROM (SELECT COUNT(Driver_ID) AS cnt FROM team_driver GROUP BY Team_ID) tmp))	SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1
1	SELECT t.Manager, t.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID, t.Manager, t.Car_Owner HAVING COUNT(td.Driver_ID) >= 2	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(*) > 1)	SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2
1	SELECT COUNT(*) AS total_institutions FROM institution	SELECT count(*) FROM institution
1	SELECT COUNT(Institution_ID) AS InstitutionCount FROM institution	SELECT count(*) FROM institution
1	SELECT institution.Name FROM institution ORDER BY Name	SELECT Name FROM institution ORDER BY Name ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Name ASC	SELECT Name FROM institution ORDER BY Name ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Founded ASC	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT institution.Name FROM institution ORDER BY institution.Founded ASC	SELECT Name FROM institution ORDER BY Founded ASC
1	SELECT institution.City AS City, institution.Province AS Province FROM institution	SELECT City ,  Province FROM institution
1	SELECT City AS CityName, Province AS ProvinceName FROM institution	SELECT City ,  Province FROM institution
1	SELECT MAX(Enrollment), MIN(Enrollment) FROM institution	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT * FROM (SELECT MAX(Enrollment) AS MaxEnroll, MIN(Enrollment) AS MinEnroll FROM institution) AS SubQuery	SELECT max(Enrollment) ,  min(Enrollment) FROM institution
1	SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT Affiliation FROM institution WHERE City NOT IN ('Vancouver')	SELECT Affiliation FROM institution WHERE City != "Vancouver"
1	SELECT Stadium AS StadiumName FROM institution ORDER BY Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
1	SELECT institution.Stadium FROM institution ORDER BY institution.Capacity DESC	SELECT Stadium FROM institution ORDER BY Capacity DESC
0	SELECT T1.Stadium FROM institution T1 WHERE T1.Enrollment = (SELECT MAX(Enrollment) FROM institution)	SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
0	SELECT Stadium FROM institution WHERE Enrollment IN (SELECT MAX(Enrollment) FROM institution)	SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
1	SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID	SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID
1	SELECT Name, Nickname FROM institution, Championship WHERE institution.Institution_ID = Championship.Institution_ID	SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID
0	SELECT C.Nickname FROM Championship C, institution I WHERE C.Institution_ID = I.Institution_ID AND I.Enrollment = (SELECT MIN(Enrollment) FROM institution)	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1
0	SELECT C.Nickname FROM Championship C LEFT JOIN institution I ON C.Institution_ID = I.Institution_ID WHERE I.Enrollment = (SELECT MIN(Enrollment) FROM institution)	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1
0	SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name ORDER BY COUNT(Championship.Number_of_Championships) DESC	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
0	SELECT Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Name ORDER BY COUNT(Championship.Number_of_Championships) DESC, Name ASC	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
0	SELECT Name FROM institution WHERE Institution_ID IN (SELECT DISTINCT Institution_ID FROM Championship)	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
1	SELECT Name FROM institution WHERE EXISTS (SELECT 1 FROM Championship WHERE Championship.Institution_ID = institution.Institution_ID AND Number_of_Championships >= 1)	SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1
0	SELECT TOTAL(Championship.Number_of_Championships) FROM Championship, institution WHERE Championship.Institution_ID = institution.Institution_ID AND institution.Affiliation = 'public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT TOTAL(Championship.Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE institution.Affiliation = 'Public'	SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  "Public"
1	SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT Affiliation, COUNT(Institution_ID) AS NumberOfInstitutions FROM institution GROUP BY Affiliation	SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation
1	SELECT Affiliation FROM institution GROUP BY Affiliation HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM institution GROUP BY Affiliation) AS Sub)	SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
1	WITH AffiliationCounts AS (SELECT Affiliation, COUNT(*) AS Count FROM institution GROUP BY Affiliation) SELECT Affiliation FROM AffiliationCounts WHERE Count = (SELECT MAX(Count) FROM AffiliationCounts)	SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1	SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
1	SELECT Founded, COUNT(Institution_ID) FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1	SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1
1	SELECT C.Nickname AS InstitutionNickname FROM Championship C JOIN institution I ON C.Institution_ID = I.Institution_ID ORDER BY I.Capacity DESC	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
1	SELECT c.Nickname FROM Championship c INNER JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC	SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
0	SELECT TOTAL(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'	select sum(enrollment) from institution where city  =  "vancouver" or city  =  "calgary"
0	SELECT i.Enrollment FROM institution i WHERE i.City = 'Vancouver' OR i.City = 'Calgary'	select sum(enrollment) from institution where city  =  "vancouver" or city  =  "calgary"
1	SELECT DISTINCT i1.Province FROM institution i1 JOIN institution i2 ON i1.Province = i2.Province WHERE i1.Founded < 1920 AND i2.Founded > 1950	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT DISTINCT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950)	SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
1	SELECT COUNT(*) FROM (SELECT DISTINCT Province FROM institution WHERE Province IS NOT NULL)	SELECT count(DISTINCT Province) FROM institution
1	SELECT COUNT(Province) FROM (SELECT DISTINCT Province FROM institution WHERE Province IS NOT NULL) AS provinces	SELECT count(DISTINCT Province) FROM institution
1	SELECT ALL * FROM Warehouses	SELECT * FROM warehouses
1	SELECT Warehouses.Code, Location, Capacity FROM Warehouses	SELECT * FROM warehouses
1	SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York'	SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'
1	SELECT Contents FROM Boxes WHERE Value > 150.00	SELECT CONTENTS FROM boxes WHERE Value  >  150
1	SELECT Contents FROM Boxes WHERE Value > 150 AND Contents IS NOT NULL	SELECT CONTENTS FROM boxes WHERE Value  >  150
0	SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse
0	SELECT w.Code, AVG(b.Value) AS AvgBoxValue FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse
1	SELECT AVG(Boxes.Value) Average_Value, SUM(Boxes.Value) Total_Value FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Value) as Average_Value, SUM(Value) as Total_Value FROM Boxes	SELECT avg(value) ,  sum(value) FROM boxes
1	SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses	SELECT avg(capacity) ,  sum(capacity) FROM warehouses
1	SELECT Contents, AVG(Value) average_1, MAX(Value) maximum_1 FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, AVG(Value) as Average_Value, MAX(Value) as Maximum_Value FROM Boxes GROUP BY Contents	SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS
0	SELECT Contents FROM Boxes GROUP BY Contents HAVING SUM(Value) = (SELECT MAX(total_sum) FROM (SELECT SUM(Value) AS total_sum FROM Boxes GROUP BY Contents) AS sub_totals)	SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1
0	SELECT B.Contents FROM Boxes B WHERE B.Value = (SELECT MAX(Value) FROM Boxes)	SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1
1	SELECT AVG(Boxes.Value) AS AvgValue FROM Boxes	SELECT avg(value) FROM boxes
1	SELECT AVG(Boxes.Value) AS AvgValue FROM Boxes	SELECT avg(value) FROM boxes
1	SELECT DISTINCT Contents FROM Boxes WHERE Contents != ''	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT Contents FROM Boxes GROUP BY Contents	SELECT DISTINCT CONTENTS FROM boxes
1	SELECT DISTINCT COUNT(*) FROM (SELECT Contents FROM Boxes GROUP BY Contents)	SELECT count(DISTINCT CONTENTS) FROM boxes
1	SELECT COUNT(*) FROM (SELECT DISTINCT Contents FROM Boxes) unique_contents	SELECT count(DISTINCT CONTENTS) FROM boxes
0	SELECT DISTINCT Location FROM Warehouses WHERE Location <> ''	SELECT count(DISTINCT LOCATION) FROM warehouses
0	SELECT DISTINCT Location FROM Warehouses WHERE Location <> ''	SELECT count(DISTINCT LOCATION) FROM warehouses
1	SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York')	SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(Value) FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
1	SELECT SUM(Boxes.Value) FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York')	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
0	SELECT DISTINCT Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('New York', 'Chicago')	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Location IN ('Chicago', 'New York') GROUP BY Contents HAVING COUNT(DISTINCT Location) = 2	SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT DISTINCT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York')	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
1	SELECT DISTINCT B.Contents FROM Boxes B WHERE NOT EXISTS (SELECT 1 FROM Boxes B2 JOIN Warehouses W ON B2.Warehouse = W.Code WHERE W.Location = 'New York' AND B2.Contents = B.Contents)	SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
0	SELECT W.Location FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents = 'Scissors')	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
0	SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' EXCEPT SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
1	SELECT Code FROM Warehouses W WHERE EXISTS (SELECT 1 FROM Boxes B WHERE B.Warehouse = W.Code AND B.Contents IN ('Rocks', 'Scissors'))	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
1	SELECT DISTINCT W.Code FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors')	SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'
0	WITH Rocks AS (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks'), Scissors AS (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors') SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Rocks INTERSECT SELECT Warehouse FROM Scissors)	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
1	SELECT W.Location FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse WHERE B.Contents IN ('Rocks', 'Scissors') GROUP BY W.Location HAVING COUNT(DISTINCT B.Contents) = 2	SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'
1	SELECT Code, Contents FROM Boxes ORDER BY Boxes.Value ASC	SELECT code ,  CONTENTS FROM boxes ORDER BY value
1	SELECT B.Code, B.Contents FROM Boxes B ORDER BY B.Value	SELECT code ,  CONTENTS FROM boxes ORDER BY value
0	SELECT Code, Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(B2.Value) FROM Boxes B2)	SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1
0	SELECT Code, Contents FROM Boxes AS B WHERE B.Value = (SELECT MIN(B2.Value) FROM Boxes B2)	SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1
1	SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT B.Contents FROM Boxes AS B WHERE B.Value > (SELECT AVG(B2.Value) FROM Boxes AS B2)	SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)
1	SELECT DISTINCT Contents AS BoxContents FROM Boxes ORDER BY BoxContents	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
1	SELECT DISTINCT Contents FROM Boxes ORDER BY Contents COLLATE NOCASE	SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS
0	SELECT Code FROM Boxes B WHERE B.Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks') AND B.Contents <> 'Rocks'	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
0	SELECT Code FROM Boxes WHERE Value > (SELECT MAX(B.Value) FROM Boxes B WHERE B.Contents = 'Rocks')	SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')
1	SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' AND Value IS NOT NULL)	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
1	SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' GROUP BY Contents)	SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')
0	SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1
0	SELECT SUM(B.Value) FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code WHERE W.Capacity = (SELECT MAX(Capacity) FROM Warehouses)	SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1
1	SELECT W.Code, AVG(B.Value) AS AvgValue FROM Warehouses W JOIN Boxes B ON W.Code = B.Warehouse GROUP BY W.Code HAVING AVG(B.Value) > 150	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150	SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150
1	SELECT Contents, COUNT(Code) AS NumberOfBoxes, SUM(Value) AS TotalValue FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Contents, SUM(Value) as Total_Value, COUNT(Code) as Number_Of_Boxes FROM Boxes GROUP BY Contents	SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS
1	SELECT Location, TOTAL(Capacity) as TotalCapacity, AVG(Capacity) as AvgCapacity, MAX(Capacity) as MaxCapacity FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT Location, SUM(Capacity) AS Total_Capacity, AVG(Capacity) AS Avg_Capacity, MAX(Capacity) AS Maximum_Capacity FROM Warehouses GROUP BY Location	SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
1	SELECT SUM(W.Capacity) AS TotalCapacity FROM Warehouses W	SELECT sum(capacity) FROM warehouses
1	SELECT TOTAL(Warehouses.Capacity) AS TotalCapacity FROM Warehouses	SELECT sum(capacity) FROM warehouses
1	SELECT W.Location, MAX(B.Value) AS MaxValue FROM Boxes B JOIN Warehouses W ON B.Warehouse = W.Code GROUP BY W.Location	SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
0	SELECT Location, MAX(Value) FROM Warehouses W LEFT JOIN Boxes B ON W.Code = B.Warehouse GROUP BY Location	SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
0	SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS BoxCount FROM Warehouses	SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse
0	SELECT w.Code, IFNULL(COUNT(b.Code), 0) AS BoxCount FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code	select warehouse ,  count(*) from boxes group by warehouse
1	SELECT COUNT(DISTINCT W.Location) FROM Warehouses W, Boxes B WHERE W.Code = B.Warehouse AND B.Contents = 'Rocks'	SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
0	SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks' GROUP BY Warehouse	SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'
1	SELECT b.code AS BoxCode, w.location AS WarehouseLocation FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT Boxes.Code, Warehouses.Location FROM Boxes, Warehouses WHERE Boxes.Warehouse = Warehouses.Code	SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code
1	SELECT b.Code FROM Boxes b, Warehouses w WHERE b.Warehouse = w.Code AND w.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
1	SELECT b.Code FROM Boxes AS b JOIN Warehouses AS w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago'	SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
0	SELECT w.Code, COUNT(b.Code) FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY w.Code	SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse
0	SELECT Code, (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code) AS BoxCount FROM Warehouses	SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse
0	SELECT w.Code AS WarehouseID, COUNT(DISTINCT b.Contents) AS CountOfContents FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code	SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse
1	SELECT Warehouse, COUNT(DISTINCT Contents) FROM Boxes GROUP BY Warehouse	SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse
0	SELECT Code FROM Warehouses WHERE EXISTS (SELECT 1 FROM Boxes WHERE Warehouse = Code GROUP BY Warehouse HAVING SUM(Value) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))	SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity
1	SELECT Code FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes GROUP BY Warehouse HAVING COUNT(Warehouse) > (SELECT Capacity FROM Warehouses WHERE Code = Warehouse))	SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity
1	SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location LIKE 'Chicago')	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT SUM(Boxes.Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location NOT LIKE 'Chicago'	SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
1	SELECT University_Name, City, State FROM university ORDER BY University_Name	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
0	SELECT University_Name, City, State FROM university ORDER BY University_Name, City, State	SELECT university_name ,  city ,  state FROM University ORDER BY university_name
1	SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT SUM(CASE WHEN State IN ('Illinois', 'Ohio') THEN 1 ELSE 0 END) FROM university	SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'
1	SELECT MAX(Enrollment) AS Maximum, AVG(Enrollment) AS Average, MIN(Enrollment) AS Minimum FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT MAX(Enrollment) 'Max Enrollment', AVG(Enrollment) 'Avg Enrollment', MIN(Enrollment) 'Min Enrollment' FROM university	SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University
1	SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(U.Enrollment) FROM university U)	SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)
1	SELECT university.Team_Name FROM university WHERE university.Enrollment > (SELECT AVG(university.Enrollment) FROM university)	select team_name from university where enrollment  >  (select avg(enrollment) from university)
0	SELECT Home_Conference FROM university WHERE Home_Conference IS NOT NULL	SELECT DISTINCT home_conference FROM University
1	SELECT Home_Conference FROM university WHERE Home_Conference IS NOT NULL GROUP BY Home_Conference	SELECT DISTINCT home_conference FROM University
1	SELECT u.Home_Conference, COUNT(*) FROM university u GROUP BY u.Home_Conference	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
1	SELECT COUNT(University_ID), Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(University_ID) > 0	SELECT home_conference ,  count(*) FROM University GROUP BY home_conference
0	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)	SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1
0	SELECT State FROM university GROUP BY State HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM university GROUP BY State) AS counts)	SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT Home_Conference FROM university WHERE EXISTS (SELECT 1 FROM university AS u2 WHERE university.Home_Conference = u2.Home_Conference GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000)	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
1	SELECT DISTINCT u.Home_Conference FROM university u WHERE (SELECT AVG(Enrollment) FROM university WHERE Home_Conference = u.Home_Conference) > 2000	SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000
0	SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(total_enrollment) FROM (SELECT SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) AS subquery)	SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1
0	SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING SUM(Enrollment) = (SELECT MIN(total_enrollment) FROM (SELECT SUM(Enrollment) AS total_enrollment FROM university GROUP BY Home_Conference) sub)	SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1
1	SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT m.Major_Name, m.Major_Code FROM major AS m ORDER BY m.Major_Code ASC	SELECT major_name ,  major_code FROM Major ORDER BY major_code
1	SELECT major.Major_Name AS Major, major_ranking.Rank AS Rank FROM major, major_ranking, university WHERE major.Major_ID = major_ranking.Major_ID AND major_ranking.University_ID = university.University_ID AND university.University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1	SELECT m.Major_Name AS 'Major Name', mr.Rank AS 'Rank' FROM major AS m JOIN major_ranking AS mr ON m.Major_ID = mr.Major_ID JOIN university AS u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College'	SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'
1	SELECT U.University_Name, U.City, U.State FROM university U, major_ranking MR, major M WHERE U.University_ID = MR.University_ID AND MR.Major_ID = M.Major_ID AND MR.Rank = 1 AND M.Major_Name = 'Accounting'	SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'
0	SELECT DISTINCT U.University_Name, U.City, U.State FROM university U JOIN major_ranking MR ON U.University_ID = MR.University_ID JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.Rank = 1 AND M.Major_Name = 'Accounting'	SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'
0	SELECT U.University_Name FROM university U JOIN major_ranking M ON U.University_ID = M.University_ID WHERE M.Rank = 1 GROUP BY U.University_ID, U.University_Name HAVING COUNT(M.Major_ID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS SubQuery)	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1
0	SELECT U.University_Name FROM university U WHERE U.University_ID IN (SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) AS Cnt FROM major_ranking WHERE Rank = 1 GROUP BY University_ID) AS Sub))	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1
0	SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT NULL FROM major_ranking m WHERE m.University_ID = u.University_ID AND m.Rank = 1)	SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1
0	SELECT u.University_Name FROM university u WHERE u.University_ID NOT IN (SELECT m.University_ID FROM major_ranking m WHERE m.Rank = 1)	SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1
0	SELECT U.University_Name FROM university U WHERE (SELECT COUNT(DISTINCT M.Major_Name) FROM major_ranking MR JOIN major M ON MR.Major_ID = M.Major_ID WHERE MR.University_ID = U.University_ID AND M.Major_Name IN ('Accounting', 'Urban Education')) = 2	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'
0	SELECT u.University_Name FROM university u WHERE u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Accounting')) AND u.University_ID IN (SELECT mr.University_ID FROM major_ranking mr WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE m.Major_Name = 'Urban Education'))	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'
1	SELECT university.University_Name, overall_ranking.Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND university.State = 'Wisconsin'	SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'
1	SELECT university.University_Name, overall_ranking.Rank FROM university, overall_ranking WHERE university.University_ID = overall_ranking.University_ID AND university.State = 'Wisconsin'	SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'
0	SELECT U.University_Name FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Research_point = (SELECT MAX(Research_point) FROM overall_ranking)	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1
0	SELECT University_Name FROM (SELECT U.University_Name, RANK() OVER (ORDER BY O.Research_point DESC) AS rk FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID) WHERE rk = 1	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1
1	SELECT u.University_Name FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point ASC	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point
1	SELECT University_Name FROM university JOIN overall_ranking USING (University_ID) ORDER BY Reputation_point ASC	SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point
0	SELECT DISTINCT University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Rank <= 3)	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  "Accounting"
1	SELECT U.University_Name FROM university U LEFT JOIN major_ranking MR ON U.University_ID = MR.University_ID LEFT JOIN major M ON MR.Major_ID = M.Major_ID WHERE M.Major_Name = 'Accounting' AND MR.Rank <= 3	SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  "Accounting"
0	SELECT SUM(Enrollment) FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank <= 5)	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT SUM(Enrollment) AS TotalEnrollment FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID AND overall_ranking.Rank <= 5	SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5
0	SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID WHERE O.Reputation_point >= (SELECT MIN(Reputation_point) FROM (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3) AS SubQuery)	SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3
1	SELECT U.University_Name, O.Citation_point FROM university U JOIN overall_ranking O ON U.University_ID = O.University_ID ORDER BY O.Reputation_point DESC LIMIT 3	SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3
1	SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2	SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
1	SELECT Title FROM Movies WHERE Rating NOT IN (SELECT Rating FROM Movies WHERE Rating IS NOT NULL)	SELECT title FROM movies WHERE rating  =  'null'
1	SELECT DISTINCT M.Title FROM Movies M WHERE M.Rating = ''	SELECT title FROM movies WHERE rating  =  'null'
1	SELECT Movies.Title FROM Movies WHERE Movies.Rating = 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT Movies.Title FROM Movies WHERE Movies.Rating = 'G'	SELECT title FROM movies WHERE rating  =  'G'
1	SELECT M.Title FROM Movies M LEFT JOIN MovieTheaters MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
0	SELECT Title FROM Movies WHERE EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
1	SELECT a.Title, b.Name FROM Movies a CROSS JOIN MovieTheaters b ON a.Code = b.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT movie_title, theater_name FROM (SELECT Title AS movie_title, Code FROM Movies) AS M JOIN (SELECT Name AS theater_name, Movie FROM MovieTheaters) AS MT ON M.Code = MT.Movie	SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
1	SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
1	SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'	SELECT count(*) FROM movies WHERE rating  =  'G'
0	SELECT COUNT(*) FROM (SELECT DISTINCT Movie AS UniqueMovie FROM MovieTheaters) temp	SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(DISTINCT MT.Movie) FROM MovieTheaters MT WHERE MT.Movie IS NOT NULL	SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(DISTINCT Movies.Title) FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT DISTINCT COUNT(Title) FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie GROUP BY Title	SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie
0	SELECT COUNT(DISTINCT Code) AS NumberOfTheaters FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
0	SELECT COUNT(DISTINCT Code) AS NumberOfTheaters FROM MovieTheaters	SELECT count(DISTINCT name) FROM movietheaters
1	SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
1	SELECT M.Rating FROM Movies M WHERE M.Title LIKE '%Citizen%'	SELECT rating FROM movies WHERE title LIKE '%Citizen%'
0	SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code AND Movies.Rating IN ('G', 'PG')	SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'
0	SELECT Name FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G' OR Movies.Rating = 'PG'	SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'
1	SELECT Title FROM Movies, MovieTheaters WHERE Movies.Code = MovieTheaters.Movie AND (MovieTheaters.Name = 'Odeon' OR MovieTheaters.Name = 'Imperial')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'
0	SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name IN ('Odeon', 'Imperial'))	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'
0	SELECT DISTINCT M.Title FROM Movies M, MovieTheaters MT1, MovieTheaters MT2 WHERE M.Code = MT1.Movie AND M.Code = MT2.Movie AND MT1.Name = 'Odeon' AND MT2.Name = 'Imperial'	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
0	SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE Name = 'Imperial')	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
0	SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')	SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
0	SELECT Title FROM Movies WHERE NOT EXISTS (SELECT 1 FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code AND MovieTheaters.Name = 'Odeon')	SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'
1	SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC	SELECT title FROM movies ORDER BY title
1	SELECT Movies.Title FROM Movies ORDER BY Movies.Title ASC	SELECT title FROM movies ORDER BY title
1	SELECT Title FROM Movies ORDER BY Rating	SELECT title FROM movies ORDER BY rating
0	SELECT Title FROM Movies ORDER BY Rating, Title	SELECT title FROM movies ORDER BY rating
0	SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(DISTINCT Movie) = (SELECT MAX(MovieCount) FROM (SELECT COUNT(DISTINCT Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery)	SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1
0	SELECT Name FROM MovieTheaters GROUP BY Name HAVING COUNT(Movie) = (SELECT MAX(MovieCount) FROM (SELECT COUNT(Movie) AS MovieCount FROM MovieTheaters GROUP BY Name) AS SubQuery)	SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1
0	SELECT Title FROM Movies WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM MovieTheaters GROUP BY Movie) AS subquery))	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
0	SELECT M.Title FROM Movies M, MovieTheaters T WHERE M.Code = T.Movie GROUP BY M.Title HAVING COUNT(T.Movie) = (SELECT MAX(C) FROM (SELECT COUNT(*) AS C FROM MovieTheaters GROUP BY Movie) AS MaxCount)	SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
1	SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating	SELECT count(*) ,  rating FROM movies GROUP BY rating
1	SELECT Rating, COUNT(Code) AS NumberOfMovies FROM Movies GROUP BY Rating	SELECT count(*) ,  rating FROM movies GROUP BY rating
0	SELECT COUNT(Movies.Code) FROM Movies WHERE Movies.Rating IS NOT NULL	SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating
0	SELECT COUNT(*) AS MovieCount FROM Movies WHERE Rating IS NOT NULL	SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating
0	SELECT Name FROM MovieTheaters WHERE EXISTS (SELECT 1 FROM Movies WHERE Movies.Code = MovieTheaters.Movie)	SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1
0	SELECT MT.Name FROM MovieTheaters MT WHERE EXISTS (SELECT 1 FROM Movies M WHERE MT.Movie = M.Code)	SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1
1	SELECT Name FROM MovieTheaters WHERE IFNULL(Movie, '') = ''	SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'
1	SELECT Name FROM MovieTheaters WHERE Movie IS NULL OR Movie = 'not available'	SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'
1	SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code AND m.Rating = 'G'	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT MT.Name FROM MovieTheaters MT INNER JOIN Movies M ON MT.Movie = M.Code WHERE M.Rating = 'G'	SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'
1	SELECT [Title] FROM [Movies]	SELECT title FROM movies
1	SELECT Title AS MovieNames FROM Movies	SELECT title FROM movies
1	SELECT DISTINCT Rating FROM Movies WHERE Rating IS NOT NULL	SELECT DISTINCT rating FROM movies
1	SELECT DISTINCT Rating AS MovieRatings FROM Movies	SELECT DISTINCT rating FROM movies
1	SELECT * FROM Movies WHERE Rating = 'unrated' OR Rating IS NULL	SELECT * FROM movies WHERE rating  =  'null'
1	SELECT * FROM Movies WHERE Rating = 'unrated' OR Rating IS NULL	SELECT * FROM movies WHERE rating  =  'null'
1	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')
1	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)	SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')
0	SELECT Client.Name FROM Client, Package WHERE Client.AccountNumber = Package.Recipient AND Package.Weight = (SELECT MAX(Weight) FROM Package)	SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
0	SELECT Client.Name FROM Client, Package WHERE Client.AccountNumber = Package.Recipient AND Package.Weight = (SELECT MAX(Weight) FROM Package)	SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
1	SELECT SUM(weight) FROM Package P, Client C WHERE P.Sender = C.AccountNumber AND C.Name = 'Leo Wong'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT TOTAL(Package.Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT Position FROM Employee WHERE Name = 'Amy Wong'	SELECT POSITION FROM Employee WHERE Name  =  "Amy Wong";
1	SELECT Position AS JobTitle, Salary AS Income FROM Employee WHERE Name = 'Turanga Leela'	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela' AND Position IS NOT NULL	SELECT Salary ,  POSITION FROM Employee WHERE Name  =  "Turanga Leela";
1	SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position LIKE 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
1	SELECT AVG(Salary) AS AverageSalary FROM Employee WHERE Position LIKE 'intern'	SELECT avg(Salary) FROM Employee WHERE POSITION  =  "Intern";
0	SELECT DISTINCT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position LIKE 'physician'	SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  "Physician";
1	SELECT P.PackageNumber FROM Package P JOIN Client C ON P.Sender = C.AccountNumber WHERE C.Name LIKE 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT COUNT(*) FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "Leo Wong";
0	SELECT DISTINCT PackageNumber FROM Package JOIN Client ON Recipient = AccountNumber WHERE Name = 'Leo Wong'	select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = "leo wong";
1	SELECT Package.PackageNumber FROM Package INNER JOIN Client ON Package.Recipient = Client.AccountNumber AND Client.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong";
0	SELECT * FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')	SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1	SELECT DISTINCT Package.PackageNumber FROM Package, Client WHERE (Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber) AND Client.Name = 'Leo Wong'	SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
0	SELECT COUNT(1) FROM Package p, Client s, Client r WHERE p.Sender = s.AccountNumber AND p.Recipient = r.AccountNumber AND s.Name = 'Ogden Wernstrom' AND r.Name = 'Leo Wong'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = "Ogden Wernstrom" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
0	SELECT COUNT(*) FROM Package p WHERE EXISTS (SELECT 1 FROM Client c WHERE c.AccountNumber = p.Sender AND c.Name = 'Ogden Wernstrom') AND EXISTS (SELECT 1 FROM Client c WHERE c.AccountNumber = p.Recipient AND c.Name = 'Leo Wong')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = "Ogden Wernstrom" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = "Leo Wong"
1	SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
1	SELECT Contents FROM Package, Client WHERE Package.Sender = Client.AccountNumber AND Client.Name = 'John Zoidfarb'	SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb";
0	SELECT PackageNumber, MAX(Weight) AS Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' GROUP BY PackageNumber ORDER BY Weight DESC LIMIT 1	SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE "John";
0	SELECT PackageNumber, Weight FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1	SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE "John";
1	SELECT PackageNumber, Weight FROM Package AS p ORDER BY p.Weight ASC LIMIT 3	SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;
1	SELECT PackageNumber, Weight FROM (SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC) AS SubQuery LIMIT 3	SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;
1	SELECT Client.Name, COUNT(*) AS TotalPackages FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY TotalPackages DESC LIMIT 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;
0	SELECT Name, COUNT(PackageNumber) FROM Client, Package WHERE Client.AccountNumber = Package.Sender GROUP BY Name HAVING COUNT(PackageNumber) = (SELECT MAX(Count) FROM (SELECT COUNT(PackageNumber) AS Count FROM Package GROUP BY Sender))	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;
0	SELECT Client.Name, COUNT(Package.Recipient) AS TotalPackages FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY TotalPackages ASC LIMIT 1	select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;
1	SELECT MIN(package_count), Name FROM (SELECT COUNT(*) AS package_count, Recipient FROM Package GROUP BY Recipient) AS package_counts JOIN Client ON package_counts.Recipient = Client.AccountNumber	select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;
0	SELECT Name FROM Client WHERE AccountNumber IN (SELECT Sender FROM Package GROUP BY Sender HAVING COUNT(*) > 1)	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;
0	SELECT C.Name FROM Client C WHERE (SELECT COUNT(*) FROM Package P WHERE P.Sender = C.AccountNumber) > 1	SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Coordinates FROM Planet WHERE Name = 'Mars'	SELECT Coordinates FROM Planet WHERE Name  =  "Mars";
1	SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY PlanetName	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT Name AS PlanetName, Coordinates AS PlanetCoordinates FROM Planet ORDER BY PlanetName	SELECT Name ,  Coordinates FROM Planet ORDER BY Name
1	SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J. Fry'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
0	SELECT s.ShipmentID FROM Shipment s INNER JOIN Employee e ON s.Manager = e.EmployeeID WHERE e.Name = 'Phillip J Fry'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = "Phillip J. Fry";
1	SELECT Date AS ShipmentDate FROM Shipment	SELECT Date FROM Shipment;
1	SELECT Date AS ShipmentDate FROM Shipment	SELECT Date FROM Shipment;
1	SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT s.ShipmentID FROM Shipment s INNER JOIN Planet p ON s.Planet = p.PlanetID WHERE p.Name = 'Mars'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  "Mars";
1	SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela')	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT Shipment.ShipmentID FROM Shipment, Planet, Employee WHERE Shipment.Planet = Planet.PlanetID AND Shipment.Manager = Employee.EmployeeID AND Planet.Name LIKE 'Mars' AND Employee.Name LIKE 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" AND T3.Name = "Turanga Leela";
1	SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
0	SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' AND e.Name = 'Turanga Leela'	SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = "Mars" OR T3.Name = "Turanga Leela";
0	SELECT Planet.Name, COUNT(Shipment.ShipmentID) FROM Planet LEFT JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;
0	SELECT Name, COUNT(*) FROM Planet JOIN Shipment ON PlanetID = Planet GROUP BY Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;
0	SELECT P.Name FROM Planet P, Shipment S WHERE P.PlanetID = S.Planet GROUP BY P.Name HAVING COUNT(S.ShipmentID) = (SELECT MAX(Count) FROM (SELECT COUNT(*) AS Count FROM Shipment GROUP BY Planet) AS SubQuery)	SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;
0	SELECT P.Name FROM Planet P JOIN (SELECT Planet, COUNT(*) AS ShipCount FROM Shipment GROUP BY Planet) AS S ON P.PlanetID = S.Planet ORDER BY S.ShipCount DESC LIMIT 1	SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;
0	SELECT Name, COUNT(*) AS ShipmentsCount FROM Employee JOIN Shipment ON EmployeeID = Manager GROUP BY Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1	SELECT E.Name, COUNT(S.ShipmentID) AS NumberOfShipments FROM Employee E JOIN Shipment S ON E.EmployeeID = S.Manager GROUP BY E.EmployeeID, E.Name	SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;
1	SELECT SUM(P.Weight) TotalWeight FROM Package P INNER JOIN Shipment S ON P.Shipment = S.ShipmentID INNER JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars'	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT SUM(P.Weight) FROM Package P JOIN Shipment S ON P.Shipment = S.ShipmentID JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE Pl.Name = 'Mars' GROUP BY Pl.Name	SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Planet.Name, TOTAL(Package.Weight) FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name	select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;
0	SELECT DISTINCT p.Name, SUM(pk.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pk ON s.ShipmentID = pk.Shipment GROUP BY p.Name	select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;
1	SELECT P.Name FROM Planet P JOIN Shipment S ON P.PlanetID = S.Planet JOIN Package Pa ON S.ShipmentID = Pa.Shipment GROUP BY P.PlanetID HAVING SUM(Pa.Weight) > 30	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT Name FROM Planet WHERE PlanetID IN (SELECT Shipment.Planet FROM Package, Shipment WHERE Package.Shipment = Shipment.ShipmentID GROUP BY Shipment.Planet HAVING SUM(Package.Weight) > 30)	SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;
1	SELECT PackageNumber FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8')) AND Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0	SELECT COUNT(Package.PackageNumber) AS NumberOfPackages FROM Package, Client, Shipment, Planet WHERE Package.Sender = Client.AccountNumber AND Package.Shipment = Shipment.ShipmentID AND Shipment.Planet = Planet.PlanetID AND Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = "Zapp Brannigan" AND T4.Name = "Omicron Persei 8";
0	SELECT P.PackageNumber FROM Package P WHERE EXISTS (SELECT 1 FROM Shipment S JOIN Planet Pl ON S.Planet = Pl.PlanetID WHERE S.ShipmentID = P.Shipment AND Pl.Name = 'Omicron Persei 8') OR EXISTS (SELECT 1 FROM Client C JOIN Employee E ON C.AccountNumber = E.EmployeeID WHERE C.AccountNumber = P.Sender AND E.Name = 'Zapp Brannigan')	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
0	SELECT COUNT(*) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'	SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  "Zapp Brannigan" OR T4.Name  =  "Omicron Persei 8";
1	SELECT p.PackageNumber, p.Weight FROM Package AS p WHERE p.Weight BETWEEN 10 AND 30	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
1	SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight >= 10 AND Package.Weight <= 30	SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;
0	SELECT E.Name FROM Employee E WHERE NOT EXISTS (SELECT * FROM Has_Clearance H JOIN Planet P ON H.Planet = P.PlanetID WHERE P.Name = 'Mars' AND H.Employee = E.EmployeeID)	SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance, Planet WHERE Has_Clearance.Planet = Planet.PlanetID AND Planet.Name = 'Mars')	SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = "Mars";
0	SELECT Name FROM Employee WHERE EmployeeID IN (SELECT HC.Employee FROM Has_Clearance HC INNER JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')	SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  "Omega III";
0	SELECT Name FROM Employee WHERE EmployeeID IN (SELECT Employee FROM Has_Clearance HC JOIN Planet P ON HC.Planet = P.PlanetID WHERE P.Name = 'Omega III')	SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  "Omega III";
1	SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY P.PlanetID, P.Name HAVING COUNT(DISTINCT H.Employee) = 1	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT P.Name FROM Planet P JOIN Has_Clearance H ON P.PlanetID = H.Planet GROUP BY P.PlanetID HAVING COUNT(DISTINCT H.Employee) = 1	SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;
1	SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT Name FROM Employee WHERE Salary > 4999 AND Salary < 10001	SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
1	SELECT E.Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
1	SELECT E.Name FROM Employee E WHERE E.Salary > 5000 OR E.Salary > (SELECT AVG(Salary) FROM Employee)	SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)
0	SELECT COUNT(*) FROM Employee WHERE NOT EXISTS (SELECT 1 FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Has_Clearance.Employee = Employee.EmployeeID)	select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = "mars" );
0	SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')	select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = "mars" );
1	SELECT COUNT(Game_ID) FROM game	SELECT count(*) FROM game
1	SELECT COUNT(Game_ID) FROM game	SELECT count(*) FROM game
1	SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
1	SELECT g.Title, g.Developers FROM game g ORDER BY g.Units_sold_Millions DESC	SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
0	SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
0	SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'	SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'
1	SELECT p.Platform_name, p.Market_district FROM platform AS p	SELECT Platform_name ,  Market_district FROM platform
1	SELECT platform.Platform_name AS Name, platform.Market_district AS District FROM platform	SELECT Platform_name ,  Market_district FROM platform
1	SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT DISTINCT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1	SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
1	SELECT MAX(Rank_of_the_year) max_rank, MIN(Rank_of_the_year) min_rank FROM player	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT MAX(Rank_of_the_year) AS 'Maximum Rank', MIN(Rank_of_the_year) AS 'Minimum Rank' FROM player	SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
1	SELECT COUNT(*) FROM player p WHERE p.Rank_of_the_year < 3	SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1	SELECT COUNT(DISTINCT Player_ID) FROM player WHERE Rank_of_the_year <= 3	SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
1	SELECT player.Player_name FROM player ORDER BY player.Player_name ASC	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT Player_name FROM player ORDER BY UPPER(Player_name) ASC	SELECT Player_name FROM player ORDER BY Player_name ASC
1	SELECT p.Player_name, p.College FROM player AS p ORDER BY p.Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
1	SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC	SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
0	SELECT DISTINCT player.Player_name, player.Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'	SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  "Super Mario World"
1	SELECT Player_name, Rank_of_the_year FROM player, game_player, game WHERE player.Player_ID = game_player.Player_ID AND game_player.Game_ID = game.Game_ID AND game.Title = 'Super Mario World'	SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  "Super Mario World"
1	SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT DISTINCT g.Developers FROM game g, game_player gp, player p WHERE g.Game_ID = gp.Game_ID AND gp.Player_ID = p.Player_ID AND p.College = 'Auburn'	SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
0	SELECT AVG(Units_sold_Millions) FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player WHERE Player_ID IN (SELECT Player_ID FROM player WHERE Position = 'Guard'))	SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT AVG(g.Units_sold_Millions) AS AvgUnitsSold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'	SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT Title, Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT Title, Platform_name FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID	SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
1	SELECT g.Title FROM game g, platform p WHERE g.Platform_ID = p.Platform_ID AND (p.Market_district = 'Asia' OR p.Market_district = 'USA')	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT Title FROM game JOIN platform USING(Platform_ID) WHERE Market_district IN ('Asia', 'USA')	SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  "Asia" OR T2.Market_district  =  "USA"
1	SELECT g.Franchise, COUNT(g.Game_ID) AS TotalGames FROM game g GROUP BY g.Franchise	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
1	SELECT COUNT(*), Franchise FROM game GROUP BY Franchise	SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
0	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) = (SELECT MAX(CountGames) FROM (SELECT COUNT(Game_ID) AS CountGames FROM game GROUP BY Franchise) AS SubQuery)	SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) = (SELECT MAX(GameCount) FROM (SELECT COUNT(*) AS GameCount FROM game GROUP BY Franchise) AS SubQuery)	SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT Franchise FROM (SELECT Franchise, COUNT(Game_ID) AS GameCount FROM game GROUP BY Franchise) AS subquery WHERE GameCount >= 2	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) > 1	SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
1	SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT DISTINCT gp.Player_ID FROM game_player gp)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
1	SELECT p.Player_name FROM player p WHERE p.Player_ID NOT IN (SELECT gp.Player_ID FROM game_player gp)	SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
0	SELECT DISTINCT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Oklahoma' AND g.Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn')	SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Oklahoma" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
0	SELECT Title FROM game WHERE Game_ID IN (SELECT Game_ID FROM game_player JOIN player ON game_player.Player_ID = player.Player_ID WHERE College IN ('Oklahoma', 'Auburn'))	SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Oklahoma" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  "Auburn"
1	SELECT Franchise FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise	SELECT DISTINCT Franchise FROM game
1	SELECT Franchise FROM game WHERE Franchise IS NOT NULL GROUP BY Franchise	SELECT DISTINCT Franchise FROM game
0	SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')	SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
0	SELECT g.Title FROM game g WHERE g.Game_ID NOT IN (SELECT gp.Game_ID FROM game_player gp INNER JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard')	SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
1	SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC	SELECT name FROM press ORDER BY Year_Profits_billion DESC
1	SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT press.Name FROM press WHERE press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1	SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1
1	SELECT AVG(Year_Profits_billion) AS AverageProfit, MAX(Year_Profits_billion) AS MaximumProfit FROM press	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0	SELECT Name, AVG(Year_Profits_billion) as AverageProfit, MAX(Year_Profits_billion) as MaxProfit FROM press GROUP BY Press_ID, Name	SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press
0	SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MAX(Month_Profits_billion) FROM press)	SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
0	SELECT Name FROM press AS p WHERE p.Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)	SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
1	WITH ProfitExtremes AS (SELECT MAX(Month_Profits_billion) AS MaxProfit, MIN(Month_Profits_billion) AS MinProfit FROM press) SELECT Name FROM press WHERE Month_Profits_billion IN (SELECT MaxProfit FROM ProfitExtremes UNION SELECT MinProfit FROM ProfitExtremes)	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT Name FROM press WHERE Month_Profits_billion = (SELECT max(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT min(Month_Profits_billion) FROM press)	SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)
1	SELECT COUNT(*) FROM author WHERE Age < 30 AND Age > 0	SELECT count(*) FROM author WHERE age  <  30
1	SELECT COUNT(1) FROM author WHERE Age < 30	SELECT count(*) FROM author WHERE age  <  30
1	SELECT Gender, AVG(Age) FROM author GROUP BY Gender	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT Gender, AVG(Age) FROM author GROUP BY Gender	SELECT avg(age) ,  gender FROM author GROUP BY gender
1	SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT Gender, COUNT(*) AS NumberOfAuthors FROM author WHERE Age > 30 GROUP BY Gender	SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender
1	SELECT book.Title FROM book ORDER BY book.Release_date DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT book.Title FROM book ORDER BY book.Release_date DESC	SELECT title FROM book ORDER BY release_date DESC
1	SELECT Book_Series, COUNT(Book_ID) AS Total FROM book GROUP BY Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
1	SELECT COUNT(Book_ID), Book_Series FROM book GROUP BY Book_Series	SELECT count(*) ,  book_series FROM book GROUP BY book_series
1	SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5	SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5
1	SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5	SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5
1	SELECT DISTINCT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AND Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
1	SELECT Book_Series FROM book GROUP BY Book_Series HAVING SUM(CASE WHEN Sale_Amount > 1000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Sale_Amount < 500 THEN 1 ELSE 0 END) > 0	SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500
0	SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'
0	SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'MM') AND EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID AND b.Book_Series = 'LT')	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'
1	SELECT author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Author_ID IS NULL	SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)
1	SELECT author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Author_ID IS NULL	select name from author where author_id not in (select author_id from book)
1	SELECT a.Name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.Author_ID = a.Author_ID GROUP BY b.Author_ID HAVING COUNT(*) > 1)	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1	SELECT Name FROM author AS a JOIN book AS b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1
1	SELECT b.Title, a.Name, p.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3	SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3
1	SELECT b.Title, a.Name, p.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3	SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3
1	SELECT press.Name, Total_Sales FROM press JOIN (SELECT Press_ID, SUM(Sale_Amount) AS Total_Sales FROM book GROUP BY Press_ID) b ON press.Press_ID = b.Press_ID	SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id
1	SELECT p.Name, Aggregate_Sales FROM press p JOIN (SELECT Press_ID, SUM(Sale_Amount) AS Aggregate_Sales FROM book GROUP BY Press_ID) b ON p.Press_ID = b.Press_ID	SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id
0	SELECT p.Name, COUNT(b.Book_ID) FROM book b, press p WHERE b.Press_ID = p.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Press_ID	SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name
0	SELECT p.Name, COUNT(b.Book_ID) AS TotalBooks FROM press p LEFT JOIN book b ON p.Press_ID = b.Press_ID AND b.Sale_Amount > 1000 GROUP BY p.Name	SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name
0	SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID AND book.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1
0	SELECT author.Name FROM author, book WHERE author.Author_ID = book.Author_ID AND book.Sale_Amount = (SELECT MAX(Sale_Amount) FROM book)	SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1
0	SELECT Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM (SELECT Author_ID, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM book GROUP BY Author_ID) WHERE rank = 1)	SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT author.Name, author.Gender FROM author, book WHERE author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) = (SELECT MAX(book_count) FROM (SELECT COUNT(book.Book_ID) AS book_count FROM book GROUP BY book.Author_ID))	SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1
0	SELECT author.Name FROM author WHERE author.Author_ID NOT IN (SELECT book.Author_ID FROM book, press WHERE book.Press_ID = press.Press_ID AND press.Name = 'Accor')	SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'
0	SELECT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b INNER JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name = 'Accor')	SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'
1	SELECT p.Name, p.Year_Profits_billion FROM press p WHERE (SELECT COUNT(*) FROM book b WHERE b.Press_ID = p.Press_ID) > 2	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT p.Name, p.Year_Profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.Press_ID = p.Press_ID GROUP BY b.Press_ID HAVING COUNT(b.Book_ID) > 2)	SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
1	SELECT COUNT(DISTINCT author_name) FROM Authors	SELECT count(*) FROM Authors
1	SELECT a.author_name FROM Authors a	SELECT author_name FROM Authors
1	SELECT DISTINCT author_name, other_details FROM Authors	SELECT author_name ,  other_details FROM Authors
1	SELECT other_details FROM Authors WHERE author_name LIKE 'Addison Denesik'	SELECT other_details FROM Authors WHERE author_name  =  "Addison Denesik"
1	SELECT COUNT(document_id) FROM Documents	SELECT count(*) FROM Documents
1	SELECT author_name FROM Documents WHERE document_id = (SELECT document_id FROM Documents WHERE document_id = 4)	SELECT author_name FROM Documents WHERE document_id  =  4
1	SELECT d.author_name FROM Documents d WHERE d.document_name = 'Travel to Brazil'	SELECT author_name FROM Documents WHERE document_name  =  "Travel to Brazil"
1	SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'	SELECT count(*) FROM Documents WHERE author_name  =  "Era Kerluke"
1	SELECT document_name, document_description FROM Documents	SELECT document_name ,  document_description FROM Documents
1	SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings' AND document_id IS NOT NULL	SELECT document_id ,  document_name FROM Documents WHERE author_name  =  "Bianka Cummings"
0	SELECT DISTINCT a.author_name, a.other_details FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'	SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  "Travel to China"
0	SELECT a.author_name, COUNT(d.document_id) FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name	SELECT author_name ,  count(*) FROM Documents GROUP BY author_name
0	SELECT author_name FROM (SELECT author_name, RANK() OVER (ORDER BY COUNT(document_id) DESC) AS rank FROM Documents GROUP BY author_name) AS ranked_docs WHERE rank = 1	SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1
1	SELECT A.author_name FROM Authors A INNER JOIN Documents D ON A.author_name = D.author_name GROUP BY A.author_name HAVING COUNT(*) >= 2	SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2
1	SELECT COUNT(process_id) AS NumberOfProcesses FROM Business_Processes	SELECT count(*) FROM Business_processes
1	SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = (SELECT process_id FROM Business_Processes WHERE process_id = 9)	SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9
1	SELECT B.process_name FROM Business_Processes A, Business_Processes B WHERE A.next_process_id = B.process_id AND A.process_id = 9	SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)
1	SELECT COUNT(*) FROM Process_Outcomes WHERE process_outcome_code IS NOT NULL	SELECT count(*) FROM Process_outcomes
1	SELECT * FROM Process_Outcomes	SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes
1	SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code LIKE 'working'	SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  "working"
1	SELECT COUNT(*) FROM (SELECT process_status_code FROM Process_Status GROUP BY process_status_code) AS status_count	SELECT count(*) FROM Process_status
1	SELECT process_status_code, process_status_description FROM Process_Status	SELECT process_status_code ,  process_status_description FROM Process_status
1	SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'	SELECT process_status_description FROM Process_status WHERE process_status_code  =  "ct"
1	SELECT COUNT(*) FROM Staff	SELECT count(*) FROM Staff
1	SELECT Staff.staff_id, Staff.staff_details FROM Staff	SELECT staff_id ,  staff_details FROM Staff
1	SELECT staff_details FROM Staff WHERE staff_id = 100	SELECT staff_details FROM Staff WHERE staff_id  =  100
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Ref_Staff_Roles) AS unique_roles	SELECT count(*) FROM Ref_staff_roles
1	SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles	SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles
1	SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR' LIMIT 1	SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  "HR"
1	SELECT COUNT(DISTINCT document_id) FROM Documents WHERE document_id IN (SELECT DISTINCT document_id FROM Documents_Processes)	SELECT count(DISTINCT document_id) FROM Documents_processes
1	SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IS NOT NULL	SELECT DISTINCT process_id FROM Documents_processes
1	SELECT D.document_id FROM Documents D LEFT JOIN Documents_Processes DP ON D.document_id = DP.document_id WHERE DP.process_id IS NULL	SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes
1	SELECT DISTINCT process_id FROM Business_Processes EXCEPT SELECT DISTINCT process_id FROM Documents_Processes	SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes
1	SELECT outcome_desc.process_outcome_description, status_desc.process_status_description FROM Documents_Processes dp LEFT JOIN Process_Outcomes outcome_desc ON dp.process_outcome_code = outcome_desc.process_outcome_code LEFT JOIN Process_Status status_desc ON dp.process_status_code = status_desc.process_status_code WHERE dp.document_id = 0	SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0
0	SELECT process_name FROM Business_Processes WHERE process_id = (SELECT process_id FROM Documents_Processes WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'))	SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  "Travel to Brazil"
1	SELECT p.process_id, COUNT(DISTINCT d.document_id) AS total_documents FROM Business_Processes p LEFT JOIN Documents_Processes d ON p.process_id = d.process_id GROUP BY p.process_id	SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id
1	SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Processes s WHERE s.document_id = 0 AND s.process_id = 9	SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9
0	SELECT staff_id, (SELECT COUNT(DISTINCT document_id) FROM Staff_in_Processes WHERE staff_id = Staff.staff_id) AS num_processes FROM Staff	SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id
0	SELECT R.staff_role_code, COUNT(S.document_id) AS num_processes FROM Ref_Staff_Roles R LEFT JOIN Staff_in_Processes S ON R.staff_role_code = S.staff_role_code GROUP BY R.staff_role_code	SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code
1	SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3) AS distinct_roles	SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3
1	SELECT COUNT(agency_id) FROM (SELECT DISTINCT agency_id FROM Agencies) AS distinct_agencies	SELECT count(*) FROM Agencies
1	SELECT COUNT(1) FROM Agencies	SELECT count(*) FROM Agencies
1	SELECT agency_id, agency_details FROM Agencies	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT agency_id, agency_details FROM Agencies	SELECT agency_id ,  agency_details FROM Agencies
1	SELECT COUNT(*) AS ClientCount FROM Clients	SELECT count(*) FROM Clients
1	SELECT COUNT(DISTINCT client_id) FROM Clients	SELECT count(*) FROM Clients
1	SELECT DISTINCT client_id, client_details FROM Clients	SELECT client_id ,  client_details FROM Clients
1	SELECT DISTINCT client_id, client_details FROM Clients	SELECT client_id ,  client_details FROM Clients
0	SELECT A.agency_id, COUNT(C.client_id) AS num_clients FROM Agencies A LEFT JOIN Clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id	SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id
0	SELECT Agencies.agency_id, COUNT(Clients.client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id	SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(*) = (SELECT MAX(client_count) FROM (SELECT COUNT(*) AS client_count FROM Clients GROUP BY agency_id) AS subquery))	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id HAVING COUNT(*) = (SELECT MAX(client_count) FROM (SELECT COUNT(*) AS client_count FROM Clients GROUP BY agency_id) AS subquery))	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
1	SELECT A.agency_details FROM Agencies A INNER JOIN Clients C ON A.agency_id = C.agency_id AND C.client_details = 'Mac'	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
0	SELECT agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients WHERE client_details LIKE '%Mac%')	SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'
0	SELECT Clients.client_id AS ClientID, Clients.client_details AS ClientDetails, Agencies.agency_id AS AgencyID, Agencies.agency_details AS AgencyDetails FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id	SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT COUNT(client_id) AS NumberOfClients, sic_code FROM Clients GROUP BY sic_code	SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
1	SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
1	SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'	SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad";
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Clients)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id
0	SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients GROUP BY agency_id)	SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id
1	SELECT A.agency_id FROM Agencies A LEFT OUTER JOIN Clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients	SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
1	SELECT COUNT(1) FROM Invoices	SELECT count(*) FROM Invoices
1	SELECT COUNT(invoice_id) AS InvoiceCount FROM Invoices	SELECT count(*) FROM Invoices
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
1	SELECT invoice_id, invoice_status, invoice_details FROM Invoices	SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
0	SELECT c.client_id, COUNT(i.invoice_id) AS invoice_count FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id	SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id
1	SELECT i.client_id, COUNT(*) FROM Invoices i GROUP BY i.client_id	SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id
0	SELECT C.client_id, C.client_details FROM Clients C WHERE EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id GROUP BY I.client_id ORDER BY COUNT(*) DESC LIMIT 1)	SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
0	SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) = (SELECT MAX(invoice_count) FROM (SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id) AS Sub))	SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
1	SELECT I.client_id FROM Invoices I GROUP BY I.client_id HAVING COUNT(*) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT c.client_id FROM Clients c INNER JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2	SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2
1	SELECT invoice_status, COUNT(*) AS count FROM Invoices GROUP BY invoice_status ORDER BY count DESC	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
1	SELECT invoice_status, COUNT(invoice_id) AS NumberOfInvoices FROM Invoices GROUP BY invoice_status	SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
0	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(invoice_id) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM Invoices GROUP BY invoice_status) AS subquery)	SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
0	SELECT invoice_status FROM Invoices GROUP BY invoice_status HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Invoices GROUP BY invoice_status) AS subquery)	SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
1	SELECT Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices, Clients, Agencies WHERE Invoices.client_id = Clients.client_id AND Clients.agency_id = Agencies.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Invoices, Clients, Agencies WHERE Invoices.client_id = Clients.client_id AND Clients.agency_id = Agencies.agency_id	SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
1	SELECT Meetings.meeting_type, Meetings.other_details FROM Meetings	SELECT meeting_type ,  other_details FROM meetings
1	SELECT Meetings.meeting_type, Meetings.other_details FROM Meetings	SELECT meeting_type ,  other_details FROM meetings
1	SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT meeting_outcome, purpose_of_meeting FROM Meetings WHERE meeting_outcome IS NOT NULL AND purpose_of_meeting IS NOT NULL	SELECT meeting_outcome ,  purpose_of_meeting FROM meetings
1	SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status LIKE 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT DISTINCT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'	SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'
1	SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE NOT EXISTS (SELECT 1 FROM Payments p WHERE p.invoice_id = i.invoice_id)	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT OUTER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL	SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT COUNT(*) AS NumberOfPayments FROM Payments	SELECT count(*) FROM Payments
1	SELECT COUNT(*) FROM Payments AS p	SELECT count(*) FROM Payments
0	SELECT Payments.payment_id, Payments.invoice_id, Invoices.invoice_details FROM Payments, Invoices WHERE Payments.invoice_id = Invoices.invoice_id	SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
1	SELECT Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments	SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
1	SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i INNER JOIN Payments p ON i.invoice_id = p.invoice_id	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
1	SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i INNER JOIN Payments p ON i.invoice_id = p.invoice_id	SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
0	SELECT Invoices.invoice_id, COUNT(Payments.payment_id) AS payment_count FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id	SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id
0	SELECT Invoices.invoice_id, COUNT(Payments.payment_id) AS payment_count FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id	SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id
0	SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE I.invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM Payments GROUP BY invoice_id) AS sub))	SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
0	SELECT I.invoice_id, I.invoice_status, I.invoice_details FROM Invoices I WHERE EXISTS (SELECT 1 FROM Payments P WHERE P.invoice_id = I.invoice_id GROUP BY P.invoice_id HAVING COUNT(P.payment_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(payment_id) AS cnt FROM Payments GROUP BY invoice_id) AS subquery))	SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
1	SELECT COUNT(*) FROM Staff	SELECT count(*) FROM Staff
1	SELECT COUNT(*) FROM Staff	SELECT count(*) FROM Staff
1	SELECT A.agency_id, COUNT(S.staff_id) AS staff_number FROM Agencies A, Staff S WHERE A.agency_id = S.agency_id GROUP BY A.agency_id	SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
0	SELECT a.agency_id, COUNT(s.staff_id) FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id	SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE EXISTS (SELECT 1 FROM Staff S WHERE S.agency_id = A.agency_id GROUP BY S.agency_id HAVING COUNT(*) = (SELECT MAX(staff_count) FROM (SELECT COUNT(*) AS staff_count FROM Staff GROUP BY agency_id) AS StaffCounts))	SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
0	SELECT A.agency_id, A.agency_details FROM Agencies A WHERE A.agency_id IN (SELECT agency_id FROM Staff GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(staff_count) FROM (SELECT agency_id, COUNT(*) AS staff_count FROM Staff GROUP BY agency_id) AS Temp))	SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
1	SELECT DISTINCT meeting_outcome, COUNT(*) OVER (PARTITION BY meeting_outcome) AS num_meetings FROM Meetings	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
1	SELECT meeting_outcome, COUNT(*) AS NumberOfMeetings FROM Meetings GROUP BY meeting_outcome	SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome
0	SELECT Clients.client_id AS ClientID, COUNT(Meetings.meeting_id) AS MeetingsCount FROM Clients LEFT OUTER JOIN Meetings ON Clients.client_id = Meetings.client_id GROUP BY Clients.client_id	SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id
1	SELECT client_id AS ClientID, COUNT(*) AS TotalMeetings FROM Meetings GROUP BY ClientID	SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id
0	SELECT M.client_id, M.meeting_type, COUNT(*) AS MeetingCount FROM Meetings M GROUP BY M.client_id, M.meeting_type HAVING COUNT(*) > 1	SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1	SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type HAVING COUNT(*) > 0	SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
1	SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id WHERE m.meeting_id IS NOT NULL	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
1	SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m, Clients c WHERE m.client_id = c.client_id	SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id
0	SELECT m.meeting_id, COUNT(s.staff_id) AS number_of_staff FROM Meetings m LEFT JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id	SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id
1	SELECT meeting_id, COUNT(*) AS number_of_staff FROM Staff_in_Meetings GROUP BY meeting_id	SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id
0	WITH StaffMeetingCounts AS (SELECT staff_id, COUNT(meeting_id) AS meeting_count FROM Staff_in_Meetings GROUP BY staff_id) SELECT staff_id, meeting_count FROM StaffMeetingCounts WHERE meeting_count = (SELECT MIN(meeting_count) FROM StaffMeetingCounts)	SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;
0	SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) ASC LIMIT 1	SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;
1	SELECT COUNT(*) FROM (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id) AS counted_staff	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(DISTINCT Staff.staff_id) AS NumberOfDistinctStaff FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id	SELECT count(DISTINCT staff_id) FROM Staff_in_meetings
1	SELECT COUNT(DISTINCT Staff.staff_id) FROM Staff LEFT JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.staff_id IS NULL	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT COUNT(*) FROM (SELECT staff_id FROM Staff EXCEPT SELECT staff_id FROM Staff_in_Meetings) AS MissingStaff	SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )
1	SELECT DISTINCT c.client_id, c.client_details FROM Clients c LEFT JOIN Meetings m ON c.client_id = m.client_id LEFT JOIN Invoices i ON c.client_id = i.client_id WHERE m.client_id IS NOT NULL OR i.client_id IS NOT NULL	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)	SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
0	SELECT s.staff_id, s.staff_details FROM Staff s WHERE EXISTS (SELECT 1 FROM Staff_in_Meetings sm WHERE sm.staff_id = s.staff_id) AND s.staff_details LIKE '%s%'	SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE "%s%" GROUP BY staff_id HAVING count(*)  >=  1
0	SELECT Staff.staff_id, Staff.staff_details FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff.staff_details LIKE '%s%' GROUP BY Staff.staff_id HAVING COUNT(Staff_in_Meetings.meeting_id) >= 1	SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE "%s%" GROUP BY staff_id HAVING count(*)  >=  1
1	SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(*) = 1) AND client_id IN (SELECT client_id FROM Invoices GROUP BY client_id)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
1	SELECT C.client_id, C.sic_code, C.agency_id FROM Clients C WHERE (SELECT COUNT(*) FROM Meetings M WHERE M.client_id = C.client_id) = 1 AND EXISTS (SELECT 1 FROM Invoices I WHERE I.client_id = C.client_id)	SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id
0	SELECT M.start_date_time, M.end_date_time, C.client_details, S.staff_details FROM Meetings M LEFT OUTER JOIN Clients C ON M.client_id = C.client_id LEFT OUTER JOIN Staff_in_Meetings SM ON M.meeting_id = SM.meeting_id LEFT OUTER JOIN Staff S ON SM.staff_id = S.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
0	SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings LEFT JOIN Clients ON Meetings.client_id = Clients.client_id LEFT JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id LEFT JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id	SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id
                     easy                 medium               hard                 extra                all                 
count                0                    0                    0                    0                    2147                
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.606               
