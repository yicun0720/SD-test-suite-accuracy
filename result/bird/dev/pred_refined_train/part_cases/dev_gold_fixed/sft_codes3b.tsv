0	SELECT max(frpm.`percent (%) eligible free (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda'	SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0;
0	SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` ASC LIMIT 3	WITH rt AS ( SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS rate FROM frpm WHERE `Educational Option Type` = 'Continuation School' ) SELECT rate FROM rt AS rt2 WHERE EXISTS ( SELECT 1 FROM (SELECT rate FROM rt ORDER BY rate ASC LIMIT 3) top WHERE top.rate = rt2.rate )
0	SELECT zip FROM schools WHERE charter = 1 AND county = 'Fresno'	SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1
0	SELECT schools.mailstreet FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1	SELECT T3.MailStreet FROM schools AS T3 WHERE T3.CDSCode IN (SELECT T1.CDSCode FROM frpm AS T1 WHERE T1.`FRPM Count (K-12)` = (SELECT max(T2.`FRPM Count (K-12)`) FROM frpm AS T2))
0	SELECT phone FROM schools WHERE charter = 1 AND opendate > '2000-01-01' AND fundingtype = 'Directly funded';	SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'
0	SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1	SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500
0	SELECT phone FROM schools WHERE cdscode IN (SELECT cdscode FROM satscores WHERE numtsttakr = (SELECT max(numtsttakr) FROM satscores WHERE numtsttakr > 1500));	SELECT T1.Phone FROM schools AS T1 WHERE T1.CDSCode IN (SELECT T2.cds FROM satscores AS T2 WHERE T2.NumGE1500 = (SELECT max(T3.NumGE1500) FROM satscores AS T3))
0	SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath > 560 AND schools.charter = 1	SELECT COUNT(*) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'
0	SELECT frpm."FRPM count (ages 5-17)" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1	SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);
0	SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500	SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500
0	SELECT max(frpm.`free meal count (ages 5-17)`) FROM satscores satscores JOIN frpm frpm ON satscores.cds = frpm.cdscode WHERE satscores.numge1500 > 0 AND satscores.numtsttakr > 0 AND satscores.avgscrread > 0 AND satscores.avgscrmath > 0 AND frpm.`free meal count (ages 5-17)` > 0 AND frpm.`enrollment (ages 5-17)` > 0 AND satscores.numge1500 / satscores.numtsttakr > 0.3;	SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
0	SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3	WITH rt AS ( SELECT T1.Phone, CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr AS rate FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) SELECT Phone FROM rt AS rt2 WHERE EXISTS (SELECT 1 FROM (SELECT rate FROM rt ORDER BY rate DESC LIMIT 3) top WHERE top.rate = rt2.rate )
1	SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5	SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5
0	SELECT dname FROM satscores WHERE avgscrread IS NOT NULL GROUP BY dname ORDER BY avg(avgscrread) DESC LIMIT 1;	SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T2.AvgScrRead = (SELECT max(T4.AvgScrRead) FROM schools AS T3 INNER JOIN satscores AS T4 ON T3.CDSCode = T4.cds WHERE T3.StatusType = 'Active')
0	SELECT count(schools.school) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.city = 'Fresno' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250	SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250
1	SELECT phone FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));	SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath = (SELECT max(T3.AvgScrMath) FROM satscores AS T3)
1	SELECT count(frpm.`school name`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Amador'	SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12
0	SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY numtsttakr DESC LIMIT 1	SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL AND NumTstTakr = (SELECT max(T1.NumTstTakr) FROM satscores as T1)
0	SELECT DISTINCT schools.`school name`, schools.street FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE (frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) > 30	SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30
0	SELECT DISTINCT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500	SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0
0	SELECT satscores.avgscrwrite, satscores.sname, schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-12-31' OR schools.closeddate < '2000-01-01'	SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
0	SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(`enrollment (k-12)` - `enrollment (ages 5-17)`) FROM frpm )	SELECT School, DOCType FROM schools WHERE CDSCode IN (SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm JOIN schools ON schools.CDSCode = frpm.CDSCode WHERE FundingType = 'Locally funded')) AND FundingType = 'Locally funded'
0	SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsoffered = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1	SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
0	SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5	SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City HAVING SUM(T1.`Enrollment (K-12)`) <= (SELECT min(S) FROM (SELECT SUM(T3.`Enrollment (K-12)`) AS S FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode GROUP BY T4.City ORDER BY SUM(T3.`Enrollment (K-12)`) ASC LIMIT 5))
0	SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY schools.ncesschool LIMIT 1, 2	SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
0	SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5	WITH stats AS ( SELECT T1.`FRPM Count (K-12)` AS cnt, CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` AS rate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ) SELECT rate FROM stats AS s2 WHERE EXISTS (SELECT 1 FROM (SELECT cnt FROM stats ORDER BY cnt DESC LIMIT 5) top WHERE top.cnt = s2.cnt )
0	SELECT DISTINCT schools.website, schools.school FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000	SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL
0	SELECT DISTINCT schools.admfname1, schools.admfname2, schools.admfname3, schools.admlname3 FROM satscores satscores JOIN schools schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT max(numge1500) FROM satscores)	SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
0	SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr LIMIT 1	SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr = (SELECT min(CAST(T3.NumGE1500 AS REAL) / T3.NumTstTakr) FROM satscores AS T3)
0	SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31'	SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'
0	SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5	SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5
1	SELECT edopsname FROM schools WHERE cdscode IN (SELECT cds FROM satscores WHERE avgscrmath = (SELECT max(avgscrmath) FROM satscores WHERE avgscrmath IS NOT NULL));	SELECT T2.EdOpsName FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL)
0	SELECT satscores.avgscrmath, schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.avgscrmath ASC LIMIT 1	WITH RankedScores AS (SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalScore FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL) SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) = (SELECT min(TotalScore) FROM RankedScores ORDER BY TotalScore ASC LIMIT 1)
0	SELECT satscores.avgscrwrite, schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )	SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
0	SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '31' AND schools.gsserved = 'K-12' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1	SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 AND T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
0	SELECT cast(count(schools.doc) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = '52' AND strftime('%Y', schools.opendate) = '1980'	SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'
0	SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'	SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'
0	SELECT DISTINCT schools.county, schools.school, schools.closeddate FROM schools schools WHERE schools.statustype = 'Closed';	SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL
0	SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1, 1	SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1
0	SELECT schools.mailstreet, schools.ncesschool FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1	WITH scr AS ( SELECT T2.MailStreet, T2.School, T1.AvgScrRead FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ) SELECT MailStreet, School FROM scr WHERE AvgScrRead = (SELECT MIN(AvgScrRead) FROM scr)
0	SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'	SELECT TOTAL(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';
1	SELECT (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT count(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;	SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'
1	SELECT phone, ext, school FROM schools WHERE zip = '95203-3704'	SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1	SELECT account_id FROM account WHERE account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND amount = ( SELECT MIN(amount) FROM loan WHERE STRFTIME('%Y', date) = '1997' ) ) AND account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND frequency = 'POPLATEK TYDNE' )
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date LIKE '1993%' AND loan.duration > 12 ORDER BY loan.amount DESC LIMIT 1	SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993')) GROUP BY T1.account_id HAVING MAX(T1.amount)
0	SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account WHERE strftime('%Y', date) = '1995' )	SELECT DISTINCT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE strftime('%Y', date) = '1995')
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.date < '1997-01-01' AND loan.amount > 3000	SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.balance > 3000
0	SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1	WITH BondCounts AS (SELECT bond_type, COUNT(*) AS count FROM bond GROUP BY bond_type) SELECT bond_type FROM BondCounts WHERE count = (SELECT MAX(count) FROM BondCounts);
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c'	SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
0	SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9'	SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id WHERE C.bond_id = 'TR004_8_9' UNION SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR004_8_9';
0	SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '='	SELECT DISTINCT T3.element FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '=';
0	SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn') OR label IS NULL;	SELECT DISTINCT label FROM molecule EXCEPT SELECT DISTINCT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'sn';
0	SELECT count(DISTINCT connected.atom_id) FROM atom atom JOIN connected connected ON atom.atom_id = connected.atom_id JOIN bond bond ON connected.bond_id = bond.bond_id WHERE atom.element IN ('i', 's') AND bond.bond_type = '-';	WITH atoms1 AS ( SELECT T1.atom_id AS a, T1.element AS e FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' ), atoms2 AS ( SELECT T1.atom_id AS a, T1.element AS e FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-' ) SELECT COUNT(DISTINCT a) FROM ( SELECT * FROM atoms1 UNION SELECT * FROM atoms2 WHERE e = 'i' OR e = 's' ) T
1	SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;	SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
0	SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1	SELECT T1.name FROM cards AS T1 Where T1.uuid IN (SELECT T2.uuid FROM foreign_data AS T2 WHERE T2.language = 'Japanese')
0	SELECT count(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';	SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' GROUP BY artist;
0	SELECT foreign_data.language FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE cards.name = 'Angel of Mercy'	SELECT DISTINCT T2.language FROM cards T1 JOIN set_translations T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';
0	SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE LANGUAGE = 'Phyrexian');	SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian';
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1	SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';
0	SELECT CASE WHEN reputation > ( SELECT reputation FROM users WHERE displayname = 'Jarrod Dixon' ) THEN 'Harlan' ELSE 'Jarrod Dixon' END FROM users WHERE displayname IN ( 'Harlan', 'Jarrod Dixon' )	SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )
1	SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2011'	SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'
0	SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01'	SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'
1	SELECT displayname FROM users WHERE views = ( SELECT max(views) FROM users )	SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
0	SELECT count(DISTINCT users.id) FROM users users JOIN votes votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1;	SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1
1	SELECT count(id) FROM users WHERE substr(cast(creationdate AS TEXT), 1, 4) > '2013' AND views > 10	SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )	SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Eliciting priors from experts'	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
0	SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1	SELECT Title FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))
0	SELECT ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts))
1	SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1	SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
1	SELECT count(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' ) AND parentid IS NULL	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
0	SELECT DISTINCT posts.ownerdisplayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20	SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20
1	SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts'	SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
1	SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian'	SELECT T2.Body FROM tags AS T1 LEFT JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'
0	SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1	SELECT posts.Body FROM tags LEFT JOIN posts ON tags.ExcerptPostId = posts.Id WHERE tags.Count = (SELECT MAX(Count) FROM tags)
1	SELECT count(id) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie');	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'	SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT count(DISTINCT badges.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1	WITH cnt AS ( SELECT T2.DisplayName, COUNT(*) AS cnt FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.Id ) SELECT DisplayName FROM cnt WHERE cnt = ( SELECT MAX(cnt) FROM cnt )
1	SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200	SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)
1	SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 5	SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5
1	SELECT count(*) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19';	SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
0	SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1	WITH VoteCounts AS ( SELECT CreationDate, COUNT(Id) AS VoteCount FROM votes GROUP BY CreationDate ) SELECT CreationDate FROM VoteCounts WHERE VoteCount = ( SELECT MAX(VoteCount) FROM VoteCounts )
0	SELECT count(id) FROM badges WHERE name = 'Revival'	SELECT Id FROM badges WHERE Name = 'Revival'
1	SELECT title FROM posts WHERE id IN (SELECT postid FROM comments WHERE score = (SELECT max(score) FROM comments));	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments))
0	SELECT commentcount FROM posts WHERE viewcount = 1910	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910
0	SELECT posts.favoritecount FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2014-04-23 20:29:39' AND comments.userid = 3025	SELECT FavoriteCount FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0')
1	SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1	SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1
1	SELECT CASE WHEN posts.closeddate IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2013-07-12 09:08:18.0' AND comments.userid = 23853	SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
1	SELECT reputation FROM users WHERE id = (SELECT owneruserid FROM posts WHERE id = 65041);	SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'
1	SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347	SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347
1	SELECT sum(CASE WHEN posts.title LIKE '%data visualization%' THEN 1 ELSE 0 END) FROM posts INNER JOIN votes ON posts.id = votes.postid	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms')
1	SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'	SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
1	SELECT text FROM comments WHERE score = 17	SELECT Text FROM comments WHERE Score = 17
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'SilentGhost')
1	SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'thank you user93!')
1	SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'	SELECT Text FROM comments WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'A Lion')
0	SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?'	SELECT Reputation FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Understanding what Dassault iSight is doing?')
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer') LIMIT 10
0	SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'	SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.Id
1	SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'	SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'
1	SELECT count(id) FROM comments WHERE userid = 13	SELECT COUNT(Id) FROM comments WHERE UserId = 13
0	SELECT id FROM users ORDER BY reputation DESC LIMIT 1	SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT id FROM users ORDER BY views ASC LIMIT 1	SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )
1	SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE strftime('%Y', badges.date) = '2011' AND badges.name = 'Supporter';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
0	SELECT count(DISTINCT userid) FROM badges WHERE userid IN (SELECT id FROM users) GROUP BY userid HAVING count(name) > 5;	SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(*) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5
1	SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1	SELECT T2.Id, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
0	SELECT users.id, badges.name FROM users INNER JOIN badges ON users.id = badges.userid INNER JOIN posts ON users.id = posts.owneruserid GROUP BY users.id ORDER BY count(posts.id) DESC LIMIT 1	SELECT b.Name FROM badges b WHERE b.UserId IN (SELECT UserId FROM comments GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(CommentCount) FROM (SELECT COUNT(Id) AS CommentCount FROM comments GROUP BY UserId)))
1	SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.location = 'India' AND badges.name = 'Teacher';	SELECT COUNT(DISTINCT T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'
0	SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;	SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720
1	SELECT count(DISTINCT userid) FROM badges WHERE name = 'Announcer';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'
1	SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0'	SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'
1	SELECT count(id) FROM comments WHERE score > 60	SELECT COUNT(id) FROM comments WHERE score > 60
0	SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0'	SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
1	SELECT count(id) FROM posts WHERE score = 10	SELECT COUNT(id) FROM posts WHERE Score = 10
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))
0	SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'	SELECT Reputation FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'
1	SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'	SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'
0	SELECT cast(sum(CASE WHEN badges.name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid	SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher'
1	SELECT cast(sum(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'	SELECT CAST( SUM( IIF( T.Age BETWEEN 13 AND 18, 1, 0 ) ) AS REAL ) * 100 / COUNT(T.Id) FROM ( SELECT Id, Age FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer') ) T
0	SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0'	SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
0	SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE creaiondate = '2010-07-19 19:37:33' )	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'
0	SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'	SELECT Age FROM users WHERE Id IN (SELECT UserId FROM badges) AND Location = 'Vienna, Austria'
0	SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65	SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65
0	SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'	SELECT Views FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'
1	SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';	SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'
1	SELECT displayname FROM users WHERE id = 30	SELECT DisplayName FROM users WHERE Id = 30
1	SELECT count(id) FROM users WHERE LOCATION = 'New York'	SELECT COUNT(Id) FROM users WHERE Location = 'New York'
1	SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010'	SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
1	SELECT count(id) FROM users WHERE age >= 19 AND age <= 65	SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65
1	SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes	SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes
0	SELECT count(posts.id) FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id WHERE users.displayname = 'Matt Parker' AND votes.postid > 4	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4
1	SELECT count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60	SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer')
1	SELECT count(DISTINCT users.id) FROM users users JOIN badges badges ON users.id = badges.userid WHERE strftime('%Y', badges.date) = '2014' AND badges.name = 'Commentator';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'
1	SELECT displayname, age FROM users WHERE views = ( SELECT max(views) FROM users )	SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
1	SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'	SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
1	SELECT count(id) FROM comments WHERE userid = 13 AND score < 60	SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'
0	SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers'	SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers')
0	SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ViewCount = ( SELECT MAX(ViewCount) FROM posts ) )
0	SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'	SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'
0	SELECT ownerdisplayname FROM posts WHERE parentid IS NOT NULL AND score = ( SELECT max(score) FROM posts )	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)))
0	SELECT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1	SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8))
0	SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5	WITH top AS ( SELECT ViewCount FROM posts ORDER BY ViewCount DESC LIMIT 5 ) SELECT Title FROM posts WHERE ViewCount IN top
0	SELECT count(id) FROM tags WHERE wikipostid IN ( SELECT id FROM posts WHERE commentcount BETWEEN 5000 AND 7000 )	SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000
0	SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1	SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )
1	SELECT age FROM users WHERE reputation = ( SELECT max(reputation) FROM users )	SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50	SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'
0	SELECT id FROM users ORDER BY age LIMIT 1	SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )
1	SELECT sum(score) FROM posts WHERE lasactivitydate LIKE '2010-07-19%'	SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'
0	SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / 12 FROM postlinks WHERE postid IN (SELECT id FROM posts WHERE answercount <= 2);	SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'
0	SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1	WITH T AS ( SELECT Id, FavoriteCount FROM posts WHERE Id IN ( SELECT PostId FROM votes WHERE UserId = 1465 ) ) SELECT Id FROM T WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM T)
1	SELECT title FROM posts WHERE id IN (SELECT postid FROM postlinks WHERE creationdate = (SELECT min(creationdate) FROM postlinks));	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks))
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.name) DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(*) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(*) AS BadgeCount FROM badges GROUP BY UserId) as SubQuery))
1	SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1	SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl' GROUP BY u.Id
0	SELECT min(posts.creaiondate) FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY users.age LIMIT 1	SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users) )
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))
1	SELECT count(DISTINCT users.id) FROM users users JOIN posts posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;	SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4
0	SELECT avg(v.postid) FROM votes v JOIN users u ON v.userid = u.id WHERE u.age = (SELECT max(age) FROM users);	SELECT AVG(post_count) FROM ( SELECT COUNT(DISTINCT T2.PostId) AS post_count FROM users T1 LEFT JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = ( SELECT MAX(Age) FROM users ) GROUP BY T2.UserId )
0	SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1	SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
1	SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000	SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000
1	SELECT displayname FROM users WHERE age >= 19 AND age <= 65	SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'
0	SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1	SELECT P.Id, P.Title FROM posts P WHERE P.OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) AND P.ViewCount = ( SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) )
1	SELECT id, title FROM posts WHERE score = ( SELECT max(score) FROM posts )	SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)
1	SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'	SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'
1	SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND strftime('%Y', posts.creaiondate) = '2011'	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreaionDate) = '2011')
0	SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1	SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreaionDate) = '2010' ) AND strftime('%Y', P.CreaionDate) = '2010'
0	SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2011'	SELECT CAST( SUM( IIF( STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0 ) ) AS REAL ) * 100 / COUNT(T2.Id) FROM posts AS T2 LEFT JOIN users AS T1 ON T1.Id = T2.OwnerUserId
1	SELECT cast(sum(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users	SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users
1	SELECT count(id) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )	SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);
1	SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts )	SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts p))
1	SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0	SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1	WITH T AS ( SELECT T1.Name, T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ) SELECT Name FROM T WHERE Date = (SELECT MAX(Date) FROM T)
1	SELECT count(id) FROM users WHERE age >= 19 AND age <= 65 AND upvotes > 5000	SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000
1	SELECT badges.date - users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'	SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
0	SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1	SELECT COUNT(DISTINCT P.Id) AS NumberOfPosts, COUNT(DISTINCT C.Id) AS NumberOfComments FROM users U JOIN posts P ON U.Id = P.OwnerUserId JOIN comments C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)
1	SELECT count(DISTINCT badges.userid) FROM badges badges JOIN users users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'
0	SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'	SELECT COUNT(DISTINCT ExcerptPostId) FROM tags WHERE TagName = 'careers'
1	SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'	SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
0	SELECT sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 1 ELSE 0 END), sum(CASE WHEN posts.title = 'Clustering 1D data' THEN 0 ELSE 1 END) FROM posts INNER JOIN comments ON posts.id = comments.postid	SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'
1	SELECT creationdate FROM users WHERE displayname = 'IrishStat'	SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
0	SELECT count(id) FROM votes WHERE bountyamount >= 30	SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30
1	SELECT count(id) FROM posts WHERE score < 20	SELECT COUNT(id) FROM posts WHERE Score < 20
0	SELECT count(tags.tagname) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.id < 15 AND tags.count <= 20	SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15
1	SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'	SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
1	SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'	SELECT Reputation, UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'fine, you win :)')
1	SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title LIKE '%linear regression%'	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'
0	SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1	WITH scores AS ( SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount >= 100 AND ViewCount <= 150 ) ) SELECT Text FROM scores WHERE Score = (SELECT MAX(Score) FROM scores)
0	SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE '%http://%'	SELECT U.CreationDate, U.Age FROM users U WHERE U.Id IN (SELECT UserId FROM comments WHERE Text LIKE '%http://%')
1	SELECT count(DISTINCT comments.postid) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5	SELECT COUNT(DISTINCT T2.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T1.Score = 0
0	SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0	SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0
1	SELECT count(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';	SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength';
1	SELECT count(DISTINCT superhero.id) FROM superhero superhero JOIN hero_power hero_power ON superhero.id = hero_power.hero_id JOIN superpower superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > 200 AND superpower.power_name = 'Super Strength';	SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
0	SELECT full_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING count(DISTINCT power_id) > 15);	SELECT s.full_name FROM superhero s JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp ON s.id = hp.hero_id;
1	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
0	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility'	SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';
0	SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond' AND superpower.power_name = 'Agility'	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
0	SELECT superhero.superhero_name, superhero.height_cm FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC	SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' ORDER BY height_cm DESC;
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'	SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)
0	SELECT circuits.country FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.raceid = 24 ORDER BY results.points DESC LIMIT 1	SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1
1	SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354	SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'
0	SELECT nationality FROM drivers WHERE driverid IN (SELECT driverid FROM qualifying WHERE raceid = 355 AND q2 = '0:01:40');	SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'
0	SELECT driverid FROM qualifying WHERE raceid = 903 AND q3 LIKE '1:01:54%'	SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'
0	SELECT count(DISTINCT results.driverid) FROM races races JOIN results results ON races.raceid = results.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NOT NULL;	SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL
1	SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901	SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901
0	SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.date = '2015-11-29'	SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL
0	SELECT dob FROM drivers WHERE driverid IN (SELECT driverid FROM results WHERE raceid = 592 AND TIME IS NOT NULL) ORDER BY dob LIMIT 1	SELECT forename, surname FROM (SELECT T1.forename, T1.surname, rank() over (ORDER BY T1.dob ASC) as rk FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC) WHERE rk = 1
0	SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 161 AND laptimes.time = '0:01:27'	SELECT forename, surname, url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes AS T1 WHERE raceId = 161 AND time LIKE '1:27%')
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1	SELECT T1.nationality FROM drivers AS T1 WHERE driverId IN (SELECT T2.driverId FROM results AS T2 WHERE T2.raceId = 933 AND T2.fastestLapSpeed = (SELECT max(T3.fastestLapSpeed) FROM results AS T3 WHERE T3.raceId = 933));
1	SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'	SELECT T2.lat, T2.lng FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix';
1	SELECT code FROM drivers WHERE nationality = 'American'	SELECT code FROM drivers WHERE Nationality = 'American'
0	SELECT driverid FROM results ORDER BY fastestlaptime LIMIT 5	SELECT driverId FROM lapTimes WHERE time in (SELECT min(time) AS t FROM lapTimes WHERE lap = 1 group by driverId ORDER BY t limit 5) GROUP BY driverId ORDER BY min(time)
1	SELECT LOCATION, country, lat, lng FROM circuits WHERE name = 'Hungaroring'	SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
1	SELECT nationality FROM drivers GROUP BY nationality HAVING count(*) = (SELECT max(COUNT) FROM (SELECT count(*) AS COUNT FROM drivers GROUP BY nationality));	SELECT nationality FROM drivers GROUP BY nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM drivers GROUP BY nationality) T2);
0	SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime LIMIT 1	SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results));
0	SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'	SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE raceId IN (SELECT raceId FROM lapTimes WHERE time = '1:29.488'));
0	SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1	SELECT distinct player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT max(overall_rating) FROM Player_Attributes);
0	SELECT height, player_name FROM player WHERE height = ( SELECT max(height) FROM player )	SELECT player_name FROM Player WHERE height = (SELECT max(height) FROM Player)
0	SELECT preferred_foot FROM player_attributes WHERE potential = ( SELECT min(potential) FROM player_attributes )	SELECT preferred_foot FROM (SELECT DISTINCT player_api_id, preferred_foot FROM Player_Attributes WHERE potential = (SELECT min(potential) FROM Player_Attributes))
0	SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate LIKE 'low'	SELECT COUNT(distinct player_api_id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'
0	SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN MATCH ON player_attributes.player_api_id = MATCH.home_player_1 OR player_attributes.player_api_id = MATCH.home_player_2 OR player_attributes.player_api_id = MATCH.home_player_3 OR player_attributes.player_api_id = MATCH.home_player_4 OR player_attributes.player_api_id = MATCH.home_player_5 OR player_attributes.player_api_id = MATCH.home_player_6 OR player_attributes.player_api_id = MATCH.home_player_7 OR player_attributes.player_api_id = MATCH.home_player_8 OR player_attributes.player_api_id = MATCH.home_player_9 OR player_attributes.player_api_id = MATCH.home_player_10 OR player_attributes.player_api_id = MATCH.home_player_11 ORDER BY player_attributes.crossing DESC LIMIT 5	SELECT T3.id FROM (SELECT T1.player_api_id, rank() over (ORDER BY max(T1.crossing) DESC ) as rk FROM Player_Attributes T1 GROUP BY T1.player_api_id) AS T2 join Player AS T3 ON T2.player_api_id = T3.player_api_id WHERE rk <= 5
0	SELECT league.name FROM MATCH INNER JOIN league ON league.id = MATCH.league_id WHERE MATCH.season = '2016/2017' GROUP BY league.name ORDER BY sum(MATCH.home_team_goal) - sum(MATCH.away_team_goal) DESC LIMIT 1	SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT MAX(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id)));
0	SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' AND MATCH.home_team_goal - MATCH.away_team_goal < 0 GROUP BY team.team_long_name ORDER BY count(team.team_long_name) ASC LIMIT 1	SELECT team_long_name FROM (SELECT teamDetails.team_long_name, rank() over (ORDER BY COUNT(*) ASC) as rk FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id) WHERE rk = 1;
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10	SELECT T2.player_name FROM (SELECT player_api_id, rank() over (ORDER BY max(penalties) DESC ) as rk FROM Player_Attributes GROUP BY player_api_id) AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE rk <= 10
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high');
0	SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3	SELECT player_name FROM Player WHERE player_name IN (SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3) and height > 180 ORDER BY player_name
0	SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'	SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'
1	SELECT player_attributes.finishing, player_attributes.curve FROM player player JOIN player_attributes player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight = (SELECT max(weight) FROM player);	SELECT T2.finishing, T2.curve FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)
1	SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes));	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));
0	SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M'	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'
1	SELECT cast(sum(CASE WHEN strftime('%Y', birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'F'	SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'
1	SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'
0	SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'	SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
0	SELECT laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'	SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
1	SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109'	SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
0	SELECT patient.id, strftime('%Y', 'now') - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.rvvt = '+'	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
0	SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` > 250	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250
0	SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
1	SELECT CASE WHEN `t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END AS RESULT FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04';	SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'
1	SELECT description, diagnosis FROM patient WHERE id = 48473	SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;
1	SELECT count(DISTINCT patient.id) FROM patient patient JOIN laboratory laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.plt > 100 AND patient.plt < 400 AND examination.diagnosis IS NOT NULL	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14	SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
1	SELECT count(DISTINCT member.member_id) FROM member member JOIN major major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'
1	SELECT count(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'	SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer';
0	SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'	SELECT phone FROM member WHERE member_id IN (SELECT T2.link_to_member FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer')
0	SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'	SELECT COUNT(DISTINCT T3.member_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium';
0	SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1	SELECT link_to_event FROM (SELECT link_to_event, rank() over (ORDER BY COUNT(link_to_member) DESC ) AS rk FROM attendance GROUP BY link_to_event) WHERE rk = 1
0	SELECT DISTINCT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'	SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'
1	SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'	SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T2.link_to_event = T3.event_id);
0	SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.type = 'Student_Club'	SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'
0	SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.type = 'Meeting' GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 10	SELECT COUNT(*) FROM (SELECT T1.event_id FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10 AND T1.type = 'Meeting');
0	SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE attendance.link_to_member NOT IN ( SELECT income.link_to_member FROM income ) GROUP BY attendance.link_to_event HAVING count(attendance.link_to_member) > 20	SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'Fundraiser' GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20;
0	SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'	SELECT AVG(total_attendance) FROM (SELECT COUNT(T1.link_to_event) AS total_attendance FROM event T2 LEFT JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)
1	SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense )	SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);
1	SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
0	SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'	SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.member_id IN (SELECT T2.link_to_member FROM attendance AS T2 INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud');
1	SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'	SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
1	SELECT zip_code.county FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'	SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
1	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'	SELECT T1.college FROM major AS T1 WHERE T1.major_id IN (SELECT T2.link_to_major FROM member AS T2 WHERE T2.first_name = 'Tyler' AND T2.last_name = 'Hewitt')
0	SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'	SELECT SUM(T2.amount) FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';
0	SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Meeting'	SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
0	SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member ORDER BY expense.cost DESC LIMIT 5	WITH Total AS ( SELECT link_to_member, SUM(cost) AS total_spending FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ) SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN ( SELECT * FROM Total WHERE total_spending IN ( SELECT total_spending FROM Total ORDER BY total_spending DESC LIMIT 5 ) ) AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.total_spending DESC
0	SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(cost) FROM expense )	SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT DISTINCT link_to_member FROM expense group by link_to_member HAVING MIN(cost) > (SELECT AVG(cost) FROM expense))
1	SELECT cast((sum(CASE WHEN zip_code.state = 'New Jersey' THEN 1 ELSE 0 END) - sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'	SELECT CAST( ( SUM( CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END ) - SUM( CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END ) ) AS REAL ) * 100 / COUNT(T1.member_id) AS diff FROM (SELECT * FROM member WHERE position = 'Member') AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip
1	SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies'	SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'
0	SELECT budget.category, budget.amount FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'January Speaker'	SELECT category, SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'January Speaker' ) GROUP BY category
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');
1	SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'	SELECT T1.first_name, T1.last_name, T2.amount FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09';
0	SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'	SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');
1	SELECT customers.customerid, sum(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(YEARMONTH.consumption) DESC LIMIT 1	WITH Total AS (SELECT T2.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID) SELECT CustomerID, TotalConsumption FROM Total WHERE TotalConsumption = (SELECT MAX(TotalConsumption) FROM Total)
1	SELECT DISTINCT country FROM gasstations WHERE gasstationid IN (SELECT gasstationid FROM transactions_1k WHERE date LIKE '201306%');	SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y', T1.Date) = '2013' AND strftime('%m', T1.Date) = '06'
1	SELECT avg(transactions_1k.price) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'	SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
0	SELECT avg(price) FROM transactions_1k WHERE customerid IN (SELECT customerid FROM customers WHERE currency = 'EUR');	SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'
0	SELECT customers.customerid, sum(transactions_1k.price) / sum(transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price) / sum(transactions_1k.amount) DESC LIMIT 1	WITH Total AS (SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY CustomerID) SELECT T2.CustomerID, SUM(T2.Price * T2.Amount) / SUM(T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID IN (SELECT CustomerID FROM Total WHERE TotalConsumption = (SELECT MAX(TotalConsumption) FROM Total)) GROUP BY T2.CustomerID, T1.Currency
                     easy                 medium               hard                 extra                all                 
count                0                    0                    0                    0                    297                 
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.424               
