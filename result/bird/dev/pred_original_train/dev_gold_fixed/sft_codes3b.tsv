1	SELECT max(`free meal count (k-12)` / `enrollment (k-12)`) FROM frpm WHERE `county name` = 'Alameda'	SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0;
1	SELECT `free meal count (ages 5-17)` / `enrollment (ages 5-17)` FROM frpm WHERE `educational option type` = 'Continuation School' ORDER BY `free meal count (ages 5-17)` / `enrollment (ages 5-17)` LIMIT 3	SELECT rate FROM (SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS rate, rank() over (ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC) as rk FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL) WHERE rk <= 3
0	SELECT schools.zip FROM schools INNER JOIN fprm ON schools.cdscode = fprm.cdscode WHERE fprm.`charter school (y/n)` = 1 AND schools.county = 'Fresno'	SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1
0	SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1	SELECT MailStreet FROM ( SELECT T2.MailStreet, RANK() OVER (ORDER BY T1.`FRPM Count (K-12)` DESC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ) AS ranked WHERE rk = 1
0	SELECT schools.phone FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 AND schools.opendate > '2000-01-01'	SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'
0	SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F'	SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 400 AND T1.Virtual = 'F';
0	SELECT DISTINCT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1	SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )	SELECT Phone FROM ( SELECT T2.Phone, RANK() OVER (ORDER BY T1.NumGE1500 DESC) as rk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ) AS ranked WHERE rk = 1
0	SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1	SELECT T2.NumTstTakr FROM frpm T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm WHERE `FRPM Count (K-12)` IS NOT NULL);
1	SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.fundingtype = 'Directly funded'	SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';
0	SELECT frpm.`frpm count (ages 5-17)`, frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 1	SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);
0	SELECT `school code` FROM frpm WHERE `enrollment (k-12)` + `enrollment (ages 5-17)` > 500	SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500
0	SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrread > 300 AND frpm.`percent (%) eligible free (ages 5-17)` > 0 ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 1	SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3	SELECT Phone FROM ( SELECT T1.Phone, RANK() OVER (ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) AS ranked WHERE rk <= 3
0	SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5	SELECT NCESSchool FROM ( SELECT T1.NCESSchool, RANK() OVER (ORDER BY T2.`Enrollment (Ages 5-17)` DESC) as rk FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ) AS ranked WHERE rk <= 5
0	SELECT satscores.dname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.charter = 1 ORDER BY satscores.avgscrread DESC LIMIT 1	SELECT District FROM ( SELECT T1.District, RANK() OVER (ORDER BY T2.AvgScrRead DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ) AS ranked WHERE rk = 1
0	SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100	SELECT COUNT(DISTINCT T1.CDSCode) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T1.County = 'Alameda' AND T2.NumTstTakr < 100;
0	SELECT schools.charternum FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrwrite = 499	SELECT T2.CharterNum FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL ORDER BY T1.AvgScrWrite DESC;
0	SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' AND schools.fundingtype = 'Directly funded' AND satscores.numtsttakr < 250	SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1	SELECT Phone FROM ( SELECT T1.Phone, RANK() OVER (ORDER BY T2.AvgScrMath DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) AS ranked WHERE rk = 1
0	SELECT count(*) FROM frpm WHERE `low grade` = 9 AND `high grade` = 12 AND `county name` = 'Amador'	SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12
0	SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Los Angeles' AND frpm.`free meal count (k-12)` BETWEEN 500 AND 700	SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700
0	SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1	SELECT sname FROM ( SELECT sname, RANK() OVER (ORDER BY NumTstTakr DESC) as rk FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ) AS ranked WHERE rk = 1
1	SELECT schools.school, schools.street FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > 30	SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30
0	SELECT frpm.`school name` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500	SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0
0	SELECT schools.school, schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.city = 'Riverside' AND satscores.avgscrmath > 400	SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`County Name` = 'Riverside' GROUP BY T1.cds HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400;
0	SELECT frpm.`school name`, schools.zip, schools.street, schools.city, schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Monterey' AND frpm.`free meal count (ages 5-17)` > 800	SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'
0	SELECT avg(satscores.avgscrwrite), schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate > '1991-01-01' AND schools.closeddate < '2000-01-01' GROUP BY schools.school, schools.phone	SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
0	SELECT frpm.`school name`, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > ( SELECT avg(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' )	SELECT T1.School, T1.DOCType FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded' AND (T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM schools T4 JOIN frpm T3 ON T4.CDSCode = T3.CDSCode WHERE T4.FundingType = 'Locally funded')
0	SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-12 Schools (Public)' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1	SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
0	SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (k-12)` LIMIT 5	SELECT City FROM (SELECT T2.City, rank() over (ORDER BY SUM(T1.`Enrollment (K-12)`) ASC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City) WHERE rk <= 5;
1	SELECT cast(frpm.`free meal count (k-12)` AS REAL) / frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 9, 2	SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
0	SELECT frpm.`percent (%) eligible free (k-12)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 66 ORDER BY frpm.`free meal count (k-12)` DESC LIMIT 5	SELECT rate FROM (SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` as rate, rank() over (ORDER BY T1.`FRPM Count (K-12)` DESC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66) WHERE rk <= 5;
1	SELECT DISTINCT schools.website, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000	SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL
1	SELECT cast(frpm.`free meal count (ages 5-17)` AS REAL) / frpm.`enrollment (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson'	SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'
0	SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school (y/n)` = 1 ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 1	SELECT AdmEmail1 FROM (SELECT T2.AdmEmail1, rank() over (ORDER BY T1.`Enrollment (K-12)` ASC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1) WHERE rk = 1
0	SELECT schools.admlname1, schools.admlname2, schools.admlname3 FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores )	SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
0	SELECT schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.numge1500 / satscores.numtsttakr LIMIT 1	SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode
1	SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.numtsttakr BETWEEN 2000 AND 3000	SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'
0	SELECT avg(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND satscores.cname = 'Fresno'	SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread ASC LIMIT 1	SELECT Phone from (SELECT T2.Phone, rank() over (ORDER BY T1.AvgScrRead ASC) as rk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL) WHERE rk = 1;
0	SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'F' ORDER BY satscores.avgscrread DESC LIMIT 5	SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5
0	SELECT schools.`edopsname` FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1	SELECT T2.EdOpsName FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL)
0	SELECT avgscrmath, cname FROM satscores ORDER BY avgscrmath ASC LIMIT 1	WITH RankedScores AS (SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalScore FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL) SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) = (SELECT min(TotalScore) FROM RankedScores ORDER BY TotalScore ASC LIMIT 1)
0	SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr = ( SELECT max(numtsttakr) FROM satscores )	SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
1	SELECT satscores.avgscrwrite, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich'	SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'
0	SELECT schools.state FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = 31 GROUP BY schools.state ORDER BY count(schools.state) DESC LIMIT 1	SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 AND T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
1	SELECT cast(count(schools.school) AS REAL) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alameda' AND schools.doc = 52 AND strftime('%Y', schools.opendate) = '1980'	SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'
0	SELECT cast(sum(CASE WHEN schools.doc = 54 THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.doc = 52 THEN 1 ELSE 0 END) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Orange'	SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'
0	SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county, school, closeddate ORDER BY count(school) DESC LIMIT 1	SELECT County, School, ClosedDate FROM schools WHERE County IN (SELECT County FROM (SELECT County, rank() over (ORDER BY COUNT(*) DESC ) as rk FROM schools WHERE StatusType = 'Closed' GROUP BY County) WHERE rk = 1) AND StatusType = 'Closed' AND school IS NOT NULL
0	SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 5, 1	SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1
0	SELECT schools.mailstreet, schools.mailstrabr FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1	WITH scr AS ( SELECT T2.MailStreet, T2.School, T1.AvgScrRead FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ) SELECT MailStreet, School FROM scr WHERE AvgScrRead = (SELECT MIN(AvgScrRead) FROM scr)
1	SELECT count(schools.school) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite >= 1500	SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500
0	SELECT count(schools.mailcity) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno'	SELECT TOTAL(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';
1	SELECT schools.school, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Atoian'	SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
0	SELECT cast(sum(CASE WHEN schools.county = 'Colusa' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN schools.county = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE schools.mailstate = 'CA'	SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'
0	SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND schools.county = 'San Joaquin' AND schools.statustype = 'Active'	SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'California' AND StatusType = 'Active'
1	SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 329, 1	SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = (SELECT T3.AvgScrWrite FROM satscores AS T3 ORDER BY T3.AvgScrWrite DESC LIMIT 332, 1)
1	SELECT phone, ext, school FROM schools WHERE zip = '95203-3704'	SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'
1	SELECT website FROM schools WHERE admfname1 = 'Mike' AND admlname1 = 'Larson' AND admfname2 = 'Dante' AND admlname2 = 'Alvarez'	SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')
1	SELECT website FROM schools WHERE charter = 1 AND virtual = 'P' AND county = 'San Joaquin'	SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1
1	SELECT count(school) FROM schools WHERE charter = 1 AND city = 'Hickman' AND doc = 52	SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'
0	SELECT sum(schools.charter) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND frpm.`percent (%) eligible free (k-12)` < 0.18	SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18
0	SELECT schools.admfname1, schools.admlname1, schools.admfname2, schools.admlname2, schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '00D2'	SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
1	SELECT count(*) FROM schools WHERE charternum = '00D4' AND mailcity = 'Hickman'	SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'
0	SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Santa Clara'	SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(1) FROM schools WHERE County = 'Santa Clara' AND Charter = 1;
0	SELECT count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Stanislaus' AND schools.fundingtype = 'Directly funded' AND schools.opendate BETWEEN '2000-01-01' AND '2005-12-31'	SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'
0	SELECT sum(schools.closeddate - schools.opendate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco' AND strftime('%Y', schools.closeddate) = '1989'	SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'
0	SELECT county FROM schools WHERE strftime('%Y', closeddate) BETWEEN '1980' AND '1989' AND soc = 11 GROUP BY county ORDER BY count(school) DESC LIMIT 1	SELECT County FROM (SELECT County, COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County) WHERE SchoolCount = (SELECT MAX(SchoolCount) FROM (SELECT COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County))
1	SELECT ncesdist FROM schools WHERE soc = 31	SELECT NCESDist FROM schools WHERE SOC = 31
0	SELECT count(schools.district) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Alpine' AND schools.edopsname = 'District Community Day School' AND schools.virtual = 'N'	SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'
1	SELECT frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'Fresno' AND schools.magnet = 0	SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0
0	SELECT sum(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015'	SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015
0	SELECT frpm.`free meal count (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstreet = 'PO Box 1040' AND schools.edopsname = 'Youth Authority School'	SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'
0	SELECT frpm.`low grade` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '613360' ORDER BY frpm.`low grade` ASC LIMIT 1	SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'
0	SELECT schools.eilname, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county code` = 37 AND frpm.`nslp provision status` = 'Breakfast Provision 2'	SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37
1	SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = 9 AND frpm.`high grade` = 12 AND schools.county = 'Merced'	SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'
0	SELECT schools.`school`, frpm.`percent (%) eligible free (ages 5-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade'	SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'
0	SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY count(gsserved) DESC LIMIT 1	SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved) temp);
0	SELECT county, count(cdscode) FROM schools WHERE county IN ('San Diego', 'Santa Barbara') AND virtual = 'F' GROUP BY county	SELECT County, cnt FROM (SELECT County, COUNT(Virtual) as cnt, rank() over ( ORDER BY COUNT(Virtual) DESC ) as rk FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County) WHERE rk = 1
0	SELECT frpm.`school type`, frpm.`school name`, schools.latitude FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY schools.latitude DESC LIMIT 1	SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Latitude = (SELECT MAX(Latitude) FROM schools)
0	SELECT schools.city, frpm.`low grade`, frpm.`school name` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' ORDER BY schools.latitude LIMIT 1	SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' AND T2.Latitude IS NOT NULL AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA' AND Latitude IS NOT NULL)
0	SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1	SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)
0	SELECT schools.city, count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'K-8' AND frpm.`nslp provision status` = 'Multiple Provision Types' AND schools.magnet = 1 GROUP BY schools.city	SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City
0	SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(admfname1) DESC LIMIT 2	SELECT DISTINCT AdmFName1, District FROM schools WHERE AdmFName1 IN (SELECT AdmFName1 FROM (SELECT AdmFName1, rank() over (ORDER BY COUNT(admfname1) DESC) as rk FROM schools GROUP BY AdmFName1) WHERE rk <= 2)
0	SELECT frpm.`percent (%) eligible free (k-12)`, frpm.`district code` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'	SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
0	SELECT schools.admlname2, schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = 40	SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'
1	SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 62 AND schools.doc = 54 AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31' AND frpm.`school type` IN ('Public Intermediate/Middle Schools', 'Unified Schools')	SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62
0	SELECT schools.admemail1, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1	SELECT School, AdmEmail1 FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL))
0	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.frequency = 'POPLATEK PO OBRATU'	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'
0	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague'	SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id JOIN loan T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague';
0	SELECT avg(a12), avg(a13) FROM district	SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district
0	SELECT account.account_id, district.a11 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY client.birth_date LIMIT 1	SELECT account_id, (SELECT MAX(A11) FROM district) - MIN(district.A11) AS salary_gap FROM client JOIN disp USING (client_id) JOIN account USING (account_id) JOIN district USING (district_id) WHERE gender = 'F' AND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') GROUP BY account_id;
0	SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date < client.birth_date ORDER BY district.a11 DESC LIMIT 1	SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T3.birth_date = (SELECT max(birth_date) FROM client) AND T4.A11 = (SELECT max(A11) FROM district)
0	SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'	SELECT COUNT(distinct T2.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'
0	SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'	SELECT DISTINCT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND strftime('%Y', loan.date) = '1997' ORDER BY loan.amount LIMIT 1	SELECT account_id FROM account WHERE account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND amount = ( SELECT MIN(amount) FROM loan WHERE STRFTIME('%Y', date) = '1997' ) ) AND account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND frequency = 'POPLATEK TYDNE' )
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1	SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993')) GROUP BY T1.account_id HAVING MAX(T1.amount)
0	SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date < 1950 AND district.a2 = 'Slokolov'	SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'
0	SELECT account_id FROM account WHERE date = ( SELECT min(date) FROM account )	SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31')
0	SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000	SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.balance > 3000
0	SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON client.client_id = disp.client_id WHERE card.issued = '1994-03-03'	SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE issued = '1994-03-03');
0	SELECT date FROM account WHERE account_id = 840	SELECT date FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14');
0	SELECT district_id FROM account WHERE date = '1994-08-25'	SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE date = '1994-08-25');
0	SELECT max(trans.amount) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE card.issued = '1996-10-21'	SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1
0	SELECT client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1	SELECT gender FROM (SELECT client.gender, rank() over (ORDER BY client.birth_date ASC ) as rk FROM district JOIN account ON district.district_id = account.district_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id GROUP BY client.client_id HAVING max(A11) = (SELECT max(A11) FROM district)) WHERE rk = 1
0	SELECT trans.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1	SELECT amount FROM (SELECT amount, rank() over (ORDER BY date ASC) as rk FROM trans WHERE account_id IN (SELECT account_id FROM loan WHERE amount = (SELECT max(amount) FROM loan)) GROUP BY account_id) WHERE rk = 1
0	SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F'	SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 JOIN disp T2 on T1.client_id = T2.client_id JOIN account T3 on T2.account_id = T3.account_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A2 = 'Jesenik';
1	SELECT disp.disp_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE trans.date = '1998-09-02' AND trans.amount = 5100	SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T3.date = '1998-09-02' AND T3.amount = 5100
1	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Litomerice' AND strftime('%Y', account.date) = '1996'	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'
0	SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'	SELECT A2 FROM district T4 WHERE T4.district_id IN (SELECT T3.district_id FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29')
0	SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE loan.date = '1996-01-03' AND loan.amount = 98832	SELECT birth_date FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM loan WHERE amount = 98832 AND date = '1996-01-03'));
0	SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE district.a3 = 'Prague'	SELECT account_id FROM (SELECT T1.account_id, rank() over (ORDER BY T1.date ASC) as rk FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague') WHERE rk = 1
0	SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia'	SELECT p from (SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) as p, rank() over (ORDER BY T2.A4 DESC ) as rk FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.district_id) WHERE rk = 1;
0	SELECT cast((sum(CASE WHEN account.date = '1998-12-27' THEN trans.balance ELSE 0 END) - sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date = '1993-03-22' THEN trans.balance ELSE 0 END) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE account.date = '1993-07-05'	SELECT CAST((SUM(IIF(trans.date = '1998-12-27', trans.balance, 0)) - SUM(IIF(trans.date = '1993-03-22', trans.balance, 0))) AS REAL) * 100 / SUM(IIF(trans.date = '1993-03-22', trans.balance, 0)) FROM (SELECT client_id FROM loan JOIN disp ON loan.account_id = disp.account_id GROUP BY client_id HAVING min(loan.date) = '1993-07-05') AS T JOIN disp ON disp.client_id = T.client_id JOIN trans ON disp.account_id = trans.account_id GROUP BY T.client_id
0	SELECT cast(sum(CASE WHEN status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM loan	SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan
1	SELECT cast(sum(CASE WHEN loan.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount < 100000	SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000
1	SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND strftime('%Y', account.date) = '1993'	SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'
1	SELECT account.account_id, account.frequency FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.date BETWEEN '1995-01-01' AND '2000-12-31' AND district.a3 = 'east Bohemia'	SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'
1	SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice'	SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
1	SELECT district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = 4990	SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990
1	SELECT account.account_id, district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000	SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000
0	SELECT loan.loan_id, district.a3, district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60	SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60
0	SELECT district.a12, district.a13 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'D'	SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
1	SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'	SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'
1	SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'	SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'
0	SELECT district.a2, sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id GROUP BY district.a2 ORDER BY sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) DESC LIMIT 10	SELECT district.A2 FROM district JOIN (SELECT account.district_id, rank() over (ORDER BY COUNT(*) DESC) as rk FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' GROUP BY account.district_id) AS subquery ON district.district_id = subquery.district_id WHERE rk <= 9
0	SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'	SELECT COUNT(*) FROM client WHERE client_id NOT IN (SELECT client_id FROM disp WHERE type = 'OWNER') AND district_id IN (SELECT district_id FROM district WHERE A3 = 'south Bohemia')
0	SELECT district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'C' GROUP BY district.a3 ORDER BY count(district.a3) DESC LIMIT 1	SELECT A3 FROM (SELECT T2.A3, rank() over (ORDER BY SUM(T3.amount) DESC) as rk FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.district_id) WHERE rk = 1
0	SELECT avg(loan.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M'	SELECT avg(loans) FROM (SELECT sum(T4.amount) as loans FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' GROUP BY T1.client_id);
0	SELECT district_id, a2 FROM district ORDER BY a13 DESC LIMIT 1	SELECT district_id, A2 FROM (SELECT district_id, A2, rank() over (ORDER BY A13 DESC) as rk FROM district) WHERE rk = 1
0	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a16 = ( SELECT max(a16) FROM district )	SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A16 = (SELECT max(A16) FROM district)) GROUP BY district_id
1	SELECT count(account.account_id) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0 AND trans.operation = 'VYBER KARTOU'	SELECT COUNT(DISTINCT T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'
0	SELECT count(loan.loan_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND loan.amount >= 250000	SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000
0	SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 1 AND loan.status = 'C'	SELECT COUNT(DISTINCT T1.account_id) FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 1 AND T1.status IN ('C', 'D');
0	SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = ( SELECT max(a15) FROM district ) AND client.gender = 'M'	SELECT cnt FROM (SELECT COUNT(T1.client_id) as cnt, rank() over (ORDER BY T2.A15 DESC ) as rk FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' GROUP BY T1.district_id) WHERE rk = 2;
0	SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.type = 'DISPONENT' AND card.type = 'gold'	SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'
1	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Pisek'	SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'
0	SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.`date`) = '1997' AND trans.amount > 10000	SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000
0	SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek' AND order.k_symbol = 'SIPO'	SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'
0	SELECT card.card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type IN ('gold', 'junior')	SELECT DISTINCT T2.account_id FROM card T1 JOIN disp T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold';
0	SELECT avg(trans.amount) FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', trans.date) = '2021' AND trans.operation = 'VYBER KARTOU'	SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'
0	SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE strftime('%Y', account.date) = '1998' AND trans.operation = 'VYBER KARTOU' GROUP BY account.account_id HAVING sum(trans.amount) < ( SELECT avg(amount) FROM trans )	SELECT DISTINCT T2.client_id FROM trans T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y' , T1.date) = '1998' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y' , date) = '1998')
0	SELECT client.gender FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F'	SELECT DISTINCT T1.client_id FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN card T3 ON T2.disp_id = T3.disp_id JOIN loan T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F' AND T2.type = 'OWNER';
0	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F'	SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A3 = 'south Bohemia';
0	SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Tabor' AND disp.type = 'OWNER'	SELECT DISTINCT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
0	SELECT account.type, district.a11 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.type = 'OWNER' AND district.a11 BETWEEN 8000 AND 9000	SELECT DISTINCT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000
1	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.a3 = 'North Bohemia' AND trans.bank = 'AB'	SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'North Bohemia'
0	SELECT district.a2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'	SELECT T1.A2 FROM district AS T1 WHERE district_id IN (SELECT T2.district_id FROM account AS T2 INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ')
0	SELECT avg(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND account.date >= '1997-01-01'	SELECT AVG(T1.A15) FROM district AS T1 WHERE district_id IN (SELECT district_id FROM account AS T2 WHERE STRFTIME('%Y', T2.date) >= '1997') AND T1.A15 > 4000
1	SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'classic' AND disp.type = 'OWNER'	SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
1	SELECT count(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M'	SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
1	SELECT cast(count(CASE WHEN TYPE = 'gold' AND issued < '1998-01-01' THEN card_id ELSE NULL END) AS REAL) * 100 / count(card_id) FROM card	SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card
0	SELECT client.client_id FROM loan INNER JOIN client ON loan.account_id = client.client_id ORDER BY loan.amount DESC LIMIT 1	SELECT DISTINCT client_id FROM (SELECT T1.client_id, rank() over (ORDER BY T2.amount DESC) as rk FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER') WHERE rk = 1;
1	SELECT district.a15 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532	SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532
0	SELECT account.district_id FROM order INNER JOIN account ON order.account_id = account.account_id WHERE order.order_id = 33333	SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333
0	SELECT trans.operation FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'	SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'
0	SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000	SELECT COUNT(DISTINCT T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000
0	SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539	SELECT DISTINCT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539
1	SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541	SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541
0	SELECT district.a2 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'A' GROUP BY district.a2 ORDER BY count(district.a2) DESC LIMIT 1	SELECT T3.A2 FROM district T3 INNER JOIN account T2 ON T3.district_id = T2.district_id INNER JOIN loan T1 ON T2.account_id = T1.account_id WHERE T1.status = 'A' GROUP BY T3.district_id HAVING COUNT(DISTINCT T1.account_id) = (SELECT MAX(count) FROM (SELECT COUNT(DISTINCT T1.account_id) AS count FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A' GROUP BY T2.district_id));
0	SELECT client.first_name, client.last_name FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423	SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423
1	SELECT trans.trans_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE account.district_id = 5	SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5
1	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a2 = 'Jesenik'	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'
0	SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued > '1996-01-01' AND card.type = 'junior'	SELECT DISTINCT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01';
0	SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.district_id) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a11 > 10000	SELECT CAST(COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END) AS REAL) * 100 / COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000;
0	SELECT cast((sum(CASE WHEN account.date LIKE '1997%' THEN loan.amount ELSE 0 END) - sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN account.date LIKE '1996%' THEN loan.amount ELSE 0 END) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN account ON loan.account_id = account.account_id WHERE client.gender = 'M'	SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 WHERE T1.account_id IN (SELECT T2.account_id FROM account AS T2 INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER')
0	SELECT count(DISTINCT card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE strftime('%Y', trans.date) > '1995' AND trans.operation = 'VYBER KARTOU'	SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'
0	SELECT sum(CASE WHEN a3 = 'east Bohemia' THEN a16 ELSE 0 END) - sum(CASE WHEN a3 = 'north Bohemia' THEN a16 ELSE 0 END) FROM district	SELECT SUM(IIF(A3 = 'East Bohemia', A16, 0)) - SUM(IIF(A3 = 'North Bohemia', A16, 0)) FROM district
0	SELECT count(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10 AND TYPE = 'OWNER' OR TYPE = 'DISPONENT'	SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10
0	SELECT account.frequency, sum(order.amount) FROM account INNER JOIN order ON account.account_id = order.account_id WHERE account.account_id = 3539 GROUP BY account.frequency	SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539
0	SELECT birth_date FROM client WHERE client_id = 130	SELECT strftime('%Y', birth_date) FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id = 130);
0	SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'OWNER'	SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'OWNER';
0	SELECT sum(order.amount), loan.status FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.account_id = order.account_id WHERE client.client_id = 992	SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992
0	SELECT sum(trans.amount), client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 4 AND trans.trans_id = 851	SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851
0	SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 9	SELECT DISTINCT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9
1	SELECT sum(trans.amount) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 617 AND strftime('%Y', trans.date) = '1998'	SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617
0	SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia'	SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'East Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'
0	SELECT client.client_id FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'F' GROUP BY client.client_id ORDER BY sum(loan.amount) DESC LIMIT 3	SELECT client_id FROM (SELECT T1.client_id, rank() over (ORDER BY MAX(T3.amount) DESC) as rk FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' GROUP BY T1.client_id) WHERE rk <= 3
0	SELECT count(client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000	SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN trans T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000;
0	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01'	SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'
0	SELECT count(client.client_id) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'	SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN card T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior';
0	SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.district_id = 1	SELECT (COUNT(DISTINCT CASE WHEN T3.gender = 'F' THEN T3.client_id END) * 100.0 / COUNT(DISTINCT T3.client_id)) AS percentage_female FROM district T1 JOIN account T2 ON T1.district_id = T2.district_id JOIN disp T4 ON T2.account_id = T4.account_id JOIN client T3 ON T4.client_id = T3.client_id WHERE T1.A3 = 'Prague';
0	SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'	SELECT (COUNT(DISTINCT T1.client_id) * 100.0 / (SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE')) AS percentage FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.frequency = 'POPLATEK TYDNE';
0	SELECT count(client.client_id) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK TYDNE'	SELECT COUNT(DISTINCT T2.client_id) FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER';
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount LIMIT 1	SELECT DISTINCT L.account_id FROM loan L, account A WHERE L.account_id = A.account_id AND L.duration > 24 AND A.date < '1997-01-01' AND L.amount = (SELECT MIN(L2.amount) FROM loan L2 WHERE L2.duration > 24)
0	SELECT account.account_id FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' ORDER BY district.a11 LIMIT 1	SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T3.birth_date = (SELECT max(birth_date) FROM client WHERE gender = 'F') AND T4.A11 = (SELECT max(A11) FROM district JOIN client on district.district_id = client.district_id WHERE gender = 'F')
1	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND strftime('%Y', client.birth_date) = '1920'	SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'
0	SELECT count(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.duration = 24	SELECT COUNT(DISTINCT T1.account_id) FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE';
0	SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND loan.status = 'C'	SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'
0	SELECT client.client_id, district.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'OWNER'	SELECT client_id, district_id FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE type = 'OWNER');
0	SELECT client.client_id, client.birth_date FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.type = 'gold'	SELECT DISTINCT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'
0	SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1	WITH BondCounts AS (SELECT bond_type, COUNT(*) AS count FROM bond GROUP BY bond_type) SELECT bond_type FROM BondCounts WHERE count = (SELECT MAX(count) FROM BondCounts);
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'cl'	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'
0	SELECT avg(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'	SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id) AS oxygen_counts
0	SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'na'	SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
0	SELECT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'	SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'
0	SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '='	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
1	SELECT count(bond_id) FROM bond WHERE bond_type = '#'	SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'
1	SELECT count(atom_id) FROM atom WHERE element != 'br'	SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'
1	SELECT count(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'
0	SELECT molecule_id FROM atom WHERE element = 'si'	SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
0	SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR004_8_9'	SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id WHERE C.bond_id = 'TR004_8_9' UNION SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR004_8_9';
0	SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = '	SELECT DISTINCT T3.element FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '=';
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY count(molecule.label) DESC LIMIT 1	SELECT label FROM (SELECT T2.label, rank() over (ORDER BY COUNT(T2.molecule_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label) WHERE rk = 1
0	SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'te'	SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'
0	SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
0	SELECT connected.atom_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.label = '-'	SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-'
0	SELECT min(element) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-'	SELECT element FROM (SELECT element, COUNT(*) AS num FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element) WHERE num = (SELECT MIN(num) FROM (SELECT COUNT(*) AS num FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element))
1	SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20'	SELECT b.bond_type FROM bond b WHERE b.bond_id IN (SELECT c.bond_id FROM connected c WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8'));
0	SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn'	SELECT DISTINCT label FROM molecule EXCEPT SELECT DISTINCT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'sn';
0	SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND atom.element IN ('i', 's')	SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
1	SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'
0	SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'	SELECT DISTINCT atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181') UNION SELECT DISTINCT atom_id FROM connected WHERE atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181')
0	SELECT cast(sum(CASE WHEN atom.element = 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'	SELECT (COUNT(DISTINCT T1.molecule_id) - COUNT(DISTINCT T2.molecule_id)) * 100.0 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM molecule T1 LEFT JOIN atom T2 ON T1.molecule_id = T2.molecule_id AND T2.element = 'f' WHERE T1.label = '+';
0	SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'
1	SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element LIMIT 3	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3
1	SELECT atom.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6'	SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'
1	SELECT sum(iif(label = '+', 1, 0)) - sum(iif(label = '-', 1, 0)) FROM molecule	SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t
0	SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'	SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5' UNION SELECT T.atom_id2 FROM connected AS T WHERE T.bond_id = 'TR000_2_5'
1	SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'	SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'
0	SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' ORDER BY molecule.label LIMIT 5	SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5
0	SELECT cast(sum(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond WHERE molecule_id = 'TR008'	SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'
0	SELECT cast(sum(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule_id) FROM molecule	SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t
0	SELECT cast(sum(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom_id) FROM atom WHERE molecule_id = 'TR206'	SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'
0	SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000'	SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'
1	SELECT DISTINCT atom.element, molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR060'	SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
0	SELECT bond.bond_type, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR018' GROUP BY bond.bond_type, molecule.label ORDER BY count(bond.bond_type) DESC LIMIT 1	SELECT T.bond_type FROM (SELECT T1.bond_type, rank() over (ORDER BY COUNT(T1.molecule_id) DESC) as rk FROM bond AS T1 WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type) AS T WHERE T.rk = 1
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 3	SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3
0	SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' ORDER BY bond.bond_id LIMIT 2	SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2
1	SELECT count(bond.bond_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE molecule.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12')	SELECT COUNT(DISTINCT bond.bond_id) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE (atom_id = 'TR009_12' or atom_id2 = 'TR009_12') AND molecule_id = 'TR009'
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'br'	SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'
1	SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR001_6_9'	SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_10'	SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
0	SELECT count(molecule_id) FROM bond WHERE bond_type = '#'	SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'
0	SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_19'	SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';
1	SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR004'	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'
1	SELECT count(label) FROM molecule WHERE label = '-'	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'
0	SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE substr(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND molecule.label = '+'	SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'
0	SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element IN ('p', 'n')	SELECT C.bond_id FROM connected C JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE A1.element = 'p' AND A2.element = 'n' UNION SELECT C.bond_id FROM connected C JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE A2.element = 'p' AND A1.element = 'n'
0	SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1	SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) AS bond_count FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT molecule_id, COUNT(bond_type) AS bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery) ORDER BY bond_count DESC) AS T2 ON T1.molecule_id = T2.molecule_id
0	SELECT cast(count(connected.bond_id) AS REAL) / count(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'i'	SELECT CAST(COUNT(DISTINCT T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T1.element = 'i';
0	SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_45'	SELECT DISTINCT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45' OR SUBSTR(T2.atom_id2, 7, 2) = '45';
0	SELECT DISTINCT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )	SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected);
0	SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR447' AND bond.bond_type = '#'	SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'
0	SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19'	SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19' UNION SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR144_8_19';
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1	SELECT T.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id) AS subquery) ORDER BY bond_count DESC) AS T
0	SELECT min(atom.element) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'	SELECT T.element FROM (SELECT T2.element, rank() over (ORDER BY COUNT(DISTINCT T2.molecule_id)) as rk FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id)) T WHERE T.rk = 1
0	SELECT connected.atom_id2 FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'pb'	SELECT DISTINCT CASE WHEN T2.atom_id = T1.atom_id THEN T2.atom_id2 ELSE T2.atom_id END AS bonded_atom_id FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T1.element = 'pb';
0	SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')	SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '#'
0	SELECT cast(sum(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id	SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
1	SELECT count(atom_id) FROM atom WHERE element IN ('c', 'h')	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'
1	SELECT connected.atom_id2 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 's'	SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's';
0	SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn'	SELECT DISTINCT T3.bond_type FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id2 OR T1.atom_id = T2.atom_id JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn';
1	SELECT count(DISTINCT atom.element) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '-'	SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T
0	SELECT count(atom.atom_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')	SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element IN ('p', 'br')) AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#')
1	SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'	SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'	SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
0	SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(connected.atom_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'	SELECT CAST(COUNT(DISTINCT CASE WHEN T.element = 'cl' THEN T.atom_id END) AS REAL) * 100 / COUNT(DISTINCT T.atom_id) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T
0	SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')	SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')
1	SELECT molecule_id FROM molecule WHERE label = '-'	SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'
1	SELECT count(DISTINCT molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'
0	SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'	SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
0	SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_10_11'	SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_10_11');
0	SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i'	SELECT COUNT(*) FROM (SELECT bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id AND atom.element = 'i' UNION SELECT bond_id FROM connected JOIN atom ON connected.atom_id2 = atom.atom_id AND atom.element = 'i')
0	SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca' GROUP BY label ORDER BY count(label) DESC LIMIT 1	SELECT label FROM (SELECT T2.label, rank() over (ORDER BY COUNT(DISTINCT T2.molecule_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label) WHERE rk = 1
0	SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_1_8' AND (atom.element = 'cl' OR atom.element = 'c')	SELECT CASE WHEN COUNT(DISTINCT T2.element) = 2 THEN 'YES' ELSE 'NO' END FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id OR T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR001_1_8' AND T2.element IN ('cl', 'c');
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND atom.element = 'c' AND molecule.label = '-' LIMIT 2	SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'
1	SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'	SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
1	SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR001'	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'
0	SELECT molecule_id FROM bond WHERE bond_type = ' = '	SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='
1	SELECT connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '#'	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'
0	SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR005_16_26'	SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_1_2' UNION SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR000_1_2';
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'	SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
1	SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'	SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
0	SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'	SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id IN (SELECT T3.molecule_id FROM bond AS T3 WHERE T3.bond_type = '#')
0	SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND substr(atom.atom_id, 7, 1) = 4	SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7
0	SELECT cast(sum(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(atom.element), molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR006'	WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label
0	SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca'	SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca')
0	SELECT bond_type FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'te' )	SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'
0	SELECT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_id = 'TR001_10_11'	SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
1	SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id	SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T
1	SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047'	SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR001_1'	SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
1	SELECT label FROM molecule WHERE molecule_id = 'TR151'	SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'
0	SELECT DISTINCT atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id = 'TR151' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'
1	SELECT count(molecule_id) FROM molecule WHERE label = '+'	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'
1	SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'	SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'
1	SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'	SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT bond_id FROM bond WHERE bond_type = '='	SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='
1	SELECT count(atom.atom_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'h'	SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'
1	SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1' AND bond.bond_id = 'TR000_1_2'	SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'
1	SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '-' AND atom.element = 'c'	SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
0	SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
1	SELECT label FROM molecule WHERE molecule_id = 'TR124'	SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'
1	SELECT atom_id FROM atom WHERE molecule_id = 'TR186'	SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'
1	SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'	SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'
0	SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_2_4'	SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_2_4');
0	SELECT count(bond.bond_id), molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR006' AND bond.bond_type = '='	SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label
0	SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')	SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
1	SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-'	SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
0	SELECT molecule.label, atom.element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND atom.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')	SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
0	SELECT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_2_3'	SELECT DISTINCT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'
0	SELECT count(bond.bond_id) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl'	SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl') OR atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'cl');
1	SELECT connected.atom_id, count(bond.bond_type) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR346' GROUP BY connected.atom_id	SELECT A.atom_id, COUNT(DISTINCT B.bond_type) AS bond_types FROM atom A JOIN bond B ON A.molecule_id = B.molecule_id WHERE A.molecule_id = 'TR346' GROUP BY A.atom_id;
0	SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+'	SELECT COUNT(DISTINCT T2.molecule_id), COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
0	SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type != '='	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 WHERE T1.molecule_id NOT IN (SELECT T2.molecule_id FROM atom T2 WHERE T2.element = 's') AND T1.molecule_id NOT IN (SELECT T3.molecule_id FROM bond T3 WHERE T3.bond_type = '=')
0	SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4'	SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'
0	SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR005'	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'
1	SELECT count(bond_id) FROM bond WHERE bond_type = '-'	SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'	SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-'	SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
0	SELECT cast(sum(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+'	SELECT COUNT(DISTINCT CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id END) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
1	SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'	SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
0	SELECT count(DISTINCT atom.element) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_3_4'	SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_3_4'
1	SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2'	SELECT T1.bond_type FROM bond AS T1 WHERE T1.bond_id IN (SELECT T2.bond_id FROM connected AS T2 WHERE (T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2') OR (T2.atom_id2 = 'TR000_1' AND T2.atom_id = 'TR000_2'))
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_2' AND connected.atom_id2 = 'TR000_4'	SELECT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4');
1	SELECT element FROM atom WHERE atom_id = 'TR000_1'	SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'
1	SELECT label FROM molecule WHERE molecule_id = 'TR000'	SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'
1	SELECT cast(sum(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(bond_id) FROM bond	SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n' AND molecule.label = '+'	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = '='	SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '=' UNION SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '='
0	SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING count(molecule_id) > 5	SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t
0	SELECT DISTINCT atom.element FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR024' AND bond.bond_type = '='	SELECT DISTINCT T4.element FROM molecule T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.bond_id = T3.bond_id JOIN atom T4 ON T3.atom_id = T4.atom_id OR T3.atom_id2 = T4.atom_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '=';
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.label ORDER BY count(atom.molecule_id) DESC LIMIT 1	SELECT T.molecule_id FROM (SELECT T2.molecule_id, rank() over (ORDER BY COUNT(T1.atom_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id) T WHERE T.rk = 1
0	SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#'	SELECT (CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) / (SELECT COUNT(*) FROM molecule WHERE label = '+')) * 100.0 AS percentage FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.atom_id = T3.atom_id OR T2.atom_id = T3.atom_id2 JOIN bond T4 ON T3.bond_id = T4.bond_id WHERE T1.label = '+' AND T2.element = 'h' AND T4.bond_type = '#';
1	SELECT count(molecule_id) FROM molecule WHERE label = '+'	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'
1	SELECT count(DISTINCT bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.molecule_id BETWEEN 'TR004' AND 'TR010'	SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'
1	SELECT count(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'
0	SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR004_7'	SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.bond_type = ' = ' AND atom.element = 'o'	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.atom_id = T3.atom_id OR T2.atom_id = T3.atom_id2 JOIN bond T4 ON T3.bond_id = T4.bond_id WHERE T2.element = 'o' AND T4.bond_type = '=';
0	SELECT count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-'	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'
0	SELECT DISTINCT atom.element, bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR016'	SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'
0	SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '=' AND atom.element = 'c' AND bond.molecule_id = 'TR012'	SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id OR T1.atom_id = T3.atom_id2 INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T2.molecule_id = 'TR012' AND T4.bond_type = '=' AND T1.element = 'c';
1	SELECT atom.atom_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'	SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'
0	SELECT name FROM cards WHERE cardkingdomid = cardkingdomfoilid AND cardkingdomid IS NOT NULL	SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
1	SELECT name FROM cards WHERE bordercolor = 'borderless' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NULL	SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)
0	SELECT name FROM cards ORDER BY faceconvertedmanacost DESC LIMIT 1	SELECT name FROM cards WHERE faceConvertedManaCost IS NOT NULL AND faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards WHERE faceConvertedManaCost IS NOT NULL)
1	SELECT name FROM cards WHERE frameversion = 2015 AND edhrecrank < 100	SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
0	SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'	SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'
1	SELECT DISTINCT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.side IS NULL AND cards.types = 'Artifact' AND legalities.format = 'vintage'	SELECT status FROM legalities WHERE uuid IN (SELECT uuid FROM cards WHERE type = 'Artifact' AND side IS NULL) AND format = 'vintage'
0	SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE power = '*' OR power IS NULL AND legalities.status = 'Legal' AND legalities.format = 'commander'	SELECT id, artist FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal') AND (power = '*' OR power IS NULL)
0	SELECT rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele'	SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s'	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
0	SELECT cards.name, cards.artist, cards.ispromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.ispromo ORDER BY count(rulings.uuid) DESC LIMIT 1	SELECT T1.name, T1.artist, T1.isPromo FROM cards T1 JOIN (SELECT uuid, COUNT(uuid) AS ruling_count FROM rulings GROUP BY uuid) T2 ON T1.uuid = T2.uuid WHERE T2.ruling_count = (SELECT MAX(ruling_count) FROM (SELECT COUNT(uuid) AS ruling_count FROM rulings GROUP BY uuid))
1	SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Annul' AND cards.number = '29'	SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'annul' AND T1.number = 29
0	SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese'	SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese');
0	SELECT cast(sum(CASE WHEN foreign_data.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.id) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'Chinese Simplified' THEN T1.id END) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
0	SELECT sets.name, sets.totalsetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian'	SELECT T1.name, T1.totalSetSize FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Italian');
0	SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd'	SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' GROUP BY artist;
1	SELECT keywords FROM cards WHERE name = 'Angel of Mercy'	SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
1	SELECT count(id) FROM cards WHERE power = '*'	SELECT COUNT(*) FROM cards WHERE power = '*'
1	SELECT promotypes FROM cards WHERE name = 'Duress'	SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL
1	SELECT colors FROM cards WHERE name = 'Ancestor''s Chosen'	SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'
1	SELECT originaltype FROM cards WHERE name = 'Ancestor''s Chosen'	SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL
1	SELECT foreign_data.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'	SELECT DISTINCT T2.language FROM cards T1 JOIN set_translations T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';
0	SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 0	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Ancestor''s Chosen'	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'
0	SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1
0	SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'	SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
0	SELECT TYPE FROM cards WHERE name = 'Benalish Knight'	SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
1	SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight'	SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
0	SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian'	SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian';
1	SELECT cast(sum(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards	SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1	SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless'	SELECT COUNT(DISTINCT T1.id) FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian';
0	SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.isstoryspotlight = 1	SELECT (COUNT(DISTINCT cards.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isStorySpotlight = 1 AND foreign_data.language = 'French';
1	SELECT count(id) FROM cards WHERE toughness = 99	SELECT COUNT(id) FROM cards WHERE toughness = 99
1	SELECT name FROM cards WHERE artist = 'Aaron Boyd'	SELECT name FROM cards WHERE artist = 'Aaron Boyd'
1	SELECT count(id) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'	SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'
1	SELECT id FROM cards WHERE convertedmanacost = 0	SELECT id FROM cards WHERE convertedManaCost = 0
0	SELECT DISTINCT layout FROM cards WHERE keywords = 'Flying'	SELECT layout FROM cards WHERE keywords = 'flying'
1	SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel'	SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
0	SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE hasfoil = 1 AND hasnonfoil = 1	SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL
1	SELECT id FROM cards WHERE dueldeck = 'a'	SELECT id FROM cards WHERE duelDeck = 'a'
1	SELECT edhrecrank FROM cards WHERE frameversion = 2015	SELECT edhrecRank FROM cards WHERE frameVersion = 2015
0	SELECT DISTINCT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Chinese Simplified'	SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Chinese Simplified');
0	SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper'	SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese') AND availability = 'paper';
0	SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white'	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'
0	SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'	SELECT T1.uuid, T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.uuid IN (SELECT T3.uuid FROM legalities AS T3 WHERE T3.format = 'legacy');
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Beacon of Immortality'	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
0	SELECT count(cards.id), legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = 'future' AND legalities.status = 'Legal'	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'
0	SELECT name, colors FROM cards WHERE setcode = 'OGW'	SELECT colors FROM cards WHERE setCode = 'OGW';
1	SELECT cards.name, set_translations.translation, set_translations.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.convertedmanacost = 5 AND cards.setcode = '10E'	SELECT cards.id, set_translations.language FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE convertedManaCost = 5 AND cards.setCode = '10E'
1	SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf'	SELECT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf';
0	SELECT DISTINCT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20	SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20
0	SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'	SELECT T1.name FROM cards AS T1 WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T1.uuid IN (SELECT T2.uuid FROM foreign_data AS T2)
0	SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3	SELECT name FROM (SELECT T1.name, rank() over (ORDER BY min(T2.date) ASC) as rk FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' GROUP BY T1.uuid) WHERE rk <= 3;
1	SELECT count(id) FROM cards WHERE artist = 'John Avon' AND cardkingdomid IS NULL AND cardkingdomfoilid IS NOT NULL	SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'
0	SELECT count(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid = cardkingdomid	SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL
1	SELECT count(id) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1	SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'
1	SELECT count(id) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1	SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1
0	SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = 2003 AND bordercolor = 'black' AND (availability = 'paper' OR availability = 'mtgo')	SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'
0	SELECT sum(manacost) FROM cards WHERE artist = 'Rob Alexander'	SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'
0	SELECT DISTINCT types FROM cards WHERE availability = 'arena'	SELECT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL
1	SELECT setcode FROM set_translations WHERE LANGUAGE = 'Spanish'	SELECT setCode FROM set_translations WHERE language = 'Spanish'
0	SELECT cast(sum(CASE WHEN hand = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE frameeffects = 'legendary'	SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'
0	SELECT cast(sum(CASE WHEN isstoryspotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards	SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1
0	SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid	SELECT (SELECT CAST(COUNT(DISTINCT CASE WHEN language = 'Spanish' THEN uuid END) AS REAL) * 100 / (SELECT COUNT(*) FROM cards) FROM foreign_data), name FROM foreign_data WHERE language = 'Spanish';
0	SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309	SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
0	SELECT count(set_translations.setcode) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)' AND sets.block = 'Commander'	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'
0	SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'Legal'	SELECT id FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status = 'Legal') AND types = 'Creature';
0	SELECT DISTINCT cards.types FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND (cards.subtypes IS NOT NULL OR cards.supertypes IS NOT NULL)	SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
0	SELECT count(id) FROM cards WHERE power IS NULL OR power = '*'	SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'
1	SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL
0	SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper'	SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'
1	SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation'	SELECT artist FROM cards WHERE id IN (SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%')
1	SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.artist = 'Matthew D. Wilson' AND cards.bordercolor = 'black' AND cards.layout = 'normal' AND cards.types = 'Creature' AND foreign_data.language = 'French'	SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'
0	SELECT count(rulings.text) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2009-01-10' AND cards.rarity = 'rare'	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'
0	SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica' AND sets.basesetsize = 180	SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180
0	SELECT cast(sum(CASE WHEN cards.hascontentwarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND legalities.format = 'commander'	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.hasContentWarning = 0 THEN T1.id END) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'
0	SELECT cast(sum(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / count(foreign_data.language) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE (cards.power IS NULL OR cards.power = '*')	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'French' THEN T1.id END ) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*';
0	SELECT cast(sum(iif(set_translations.language = 'Japanese', 1, 0)) AS REAL) * 100 / count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.type = 'expansion'	SELECT (COUNT(DISTINCT T2.id) * 100.0 / (SELECT COUNT(DISTINCT T2.id) FROM set_translations T1 INNER JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese')) AS percentage FROM set_translations T1 INNER JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese' AND T2.type = 'expansion';
1	SELECT availability FROM cards WHERE artist = 'Daren Bader'	SELECT availability FROM cards WHERE artist = 'Daren Bader'
1	SELECT count(id) FROM cards WHERE edhrecrank > 12000 AND bordercolor = 'borderless'	SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'
1	SELECT count(id) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1	SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1
0	SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promotypes = 'arenaleague' ORDER BY name ASC LIMIT 3	SELECT name FROM (SELECT name, rank() over (ORDER BY name) as rk FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague') WHERE rk <= 3
1	SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.multiverseid = 149934	SELECT language FROM foreign_data WHERE multiverseid = 149934
0	SELECT cardkingdomid, cardkingdomfoilid FROM cards ORDER BY cardkingdomfoilid LIMIT 3	SELECT cardKingdomFoilId, cardKingdomId FROM (SELECT cardKingdomFoilId, cardKingdomId, rank() over (ORDER BY cardKingdomFoilId) as rk FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL) WHERE rk <= 3
0	SELECT cast(sum(CASE WHEN layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM cards WHERE istextless = 1	SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
1	SELECT DISTINCT number FROM cards WHERE side = 'a' AND (subtypes = 'Angel' OR subtypes = 'Wizard') AND facename IS NULL	SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL
1	SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name LIMIT 3	SELECT name FROM (SELECT name, rank() over (ORDER BY name) as rk FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '') WHERE rk <= 3
1	SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC'	SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'
1	SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5	SELECT T1.name, T2.translation FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.id = 5;
1	SELECT set_translations.language, sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 206	SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206
0	SELECT sets.name, sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.uuid WHERE sets.block = 'Shadowmoor' AND set_translations.language = 'Italian' ORDER BY sets.name LIMIT 2	SELECT name, id FROM (SELECT T1.name, T1.id, rank() over (ORDER BY T1.name) as rk FROM sets AS T1 WHERE T1.block = 'Shadowmoor' AND T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Italian')) WHERE rk <= 2
0	SELECT sets.id FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN foreign_data ON set_translations.language = foreign_data.language WHERE sets.isforeignonly = 1 AND sets.isfoilonly = 1 AND foreign_data.language = 'Japanese'	SELECT T1.name, T1.id FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Japanese') AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0
0	SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1	SELECT T1.id FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Russian') AND T1.baseSetSize = (SELECT max(T1.baseSetSize) FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Russian'))
0	SELECT cast(sum(CASE WHEN sets.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.isonlineonly) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified'	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN T1.id END) AS REAL) * 100 / (SELECT COUNT(*) FROM sets) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode;
1	SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese' AND (sets.mtgocode IS NULL OR sets.mtgocode = '')	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
0	SELECT count(id) FROM cards WHERE bordercolor = 'black'	SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id
0	SELECT count(id) FROM cards WHERE frameeffects = 'extendedart'	SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id
0	SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1	SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1
0	SELECT language FROM set_translations WHERE setcode = '174'	SELECT language FROM set_translations JOIN sets on set_translations.setCode = sets.code WHERE sets.id = 174
1	SELECT name FROM sets WHERE code = 'ALL'	SELECT name FROM sets WHERE code = 'ALL'
1	SELECT LANGUAGE FROM foreign_data WHERE name = 'A Pedra Fellwar'	SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
1	SELECT code FROM sets WHERE releasedate = '2007-07-13'	SELECT code FROM sets WHERE releaseDate = '2007-07-13';
1	SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage')	SELECT baseSetSize, code FROM sets WHERE block = 'Masques' OR block = 'Mirage';
1	SELECT code FROM sets WHERE TYPE = 'expansion'	SELECT code FROM sets WHERE type = 'expansion';
1	SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros'	SELECT T2.name, T2.type FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';
0	SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'	SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'
1	SELECT cast(sum(CASE WHEN cards.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.convertedmanacost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Abyssal Horror'	SELECT CAST(COUNT(CASE WHEN T1.convertedManaCost = 10 THEN T1.id END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Abyssal Horror'
0	SELECT code FROM sets WHERE TYPE = 'expansion' AND TYPE = 'commander'	SELECT code FROM sets WHERE type = 'commander';
1	SELECT foreign_data.name, foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'	SELECT T2.name, T2.type FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan';
1	SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'	SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'
0	SELECT count(id) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid = cardkingdomid	SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards
0	SELECT count(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'	SELECT SUM(CASE WHEN availability like '%paper%' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards
1	SELECT name FROM cards WHERE istextless = 0	SELECT name FROM cards WHERE isTextless = 0;
1	SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen'	SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'
0	SELECT count(id) FROM cards WHERE power = '*' OR power IS NULL AND bordercolor = 'white'	SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'
1	SELECT name FROM cards WHERE side IS NOT NULL AND ispromo = 1	SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
0	SELECT types, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'	SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
0	SELECT purchaseurls FROM cards WHERE promotypes = 'bundle'	SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
0	SELECT count(DISTINCT cards.artist) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.availability LIKE '%arena,mtgo%' AND cards.bordercolor = 'black'	SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards
1	SELECT name FROM cards WHERE name = 'Serra Angel' OR name = 'Shrine Keeper' ORDER BY convertedmanacost DESC LIMIT 1	SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
1	SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'	SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
0	SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3	SELECT name FROM (SELECT name, rank() over (ORDER BY convertedManaCost DESC) as rk FROM cards WHERE frameVersion = 2003) WHERE rk <= 3
1	SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Italian'	SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'
1	SELECT count(set_translations.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Angel of Mercy'	SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL
0	SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition'	SELECT T1.name FROM cards AS T1 WHERE T1.setCode IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.translation = 'Hauptset Zehnte Edition')
0	SELECT CASE WHEN count(set_translations.id) > 0 THEN 'Yes' ELSE 'No' END FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean'	SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'
1	SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.artist = 'Adam Rex' AND set_translations.translation = 'Hauptset Zehnte Edition'	SELECT DISTINCT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
0	SELECT basesetsize FROM sets WHERE code = ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )	SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');
1	SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified'	SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'
0	SELECT sets.mtgocode FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Angel of Mercy'	SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'
1	SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Ancestor''s Chosen'	SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen')
1	SELECT TYPE FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition'	SELECT type FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');
0	SELECT count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian'	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL
0	SELECT sets.isforeignonly FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Adarkar Valkyrie'	SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Adarkar Valkyrie')
0	SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10	SELECT COUNT(DISTINCT T1.id) FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100;
0	SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.id WHERE sets.name = 'Coldsnap' AND cards.bordercolor = 'black'	SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
0	SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1	SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap')
1	SELECT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND name = 'Coldsnap'	SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist
1	SELECT cards.number FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.number = 4	SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4
0	SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND (cards.power = '*' OR cards.power IS NULL)	SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5
1	SELECT foreign_data.flavortext FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian'	SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'
1	SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language IS NOT NULL	SELECT DISTINCT T2.language FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL;
1	SELECT foreign_data.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'German'	SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
0	SELECT rulings.text FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN rulings ON rulings.uuid = sets.code WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian'	SELECT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'
0	SELECT cards.name FROM cards INNER JOIN set_translations ON cards.name = set_translations.setcode INNER JOIN sets ON sets.code = set_translations.setcode WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1	SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian')
1	SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'	SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'
0	SELECT cast(sum(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'	SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
0	SELECT cast(sum(CASE WHEN cards.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.name) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap'	SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
1	SELECT code FROM sets WHERE releasedate = '2017-07-14'	SELECT code FROM sets WHERE releaseDate = '2017-07-14'
1	SELECT keyrunecode FROM sets WHERE code = 'PKHC'	SELECT keyruneCode FROM sets WHERE code = 'PKHC'
1	SELECT mcmid FROM sets WHERE code = 'SS2'	SELECT mcmId FROM sets WHERE code = 'SS2'
1	SELECT mcmname FROM sets WHERE releasedate = '2017-06-09'	SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
1	SELECT TYPE FROM sets WHERE name LIKE '%From the Vault: Lore%'	SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'
1	SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'	SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
0	SELECT rulings.text, cards.hascontentwarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Jim Pavelec'	SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'
1	SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.name = 'Evacuation'	SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Evacuation')
0	SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara'	SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara');
0	SELECT DISTINCT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Huitième édition'	SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' )
1	SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE cards.name = 'Tendo Ice Bridge' AND set_translations.language = 'French'	SELECT translation FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Tendo Ice Bridge') AND language = 'French' AND translation IS NOT NULL
0	SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Salvat 2011' AND set_translations.translation IS NOT NULL	SELECT COUNT(translation) AS translation_count FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE name = 'Tenth Edition');
1	SELECT set_translations.translation FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE cards.name = 'Fellwar Stone' AND set_translations.language = 'Japanese'	SELECT translation FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese' AND translation IS NOT NULL
0	SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1	SELECT name FROM (SELECT T1.name, rank() over (ORDER BY T1.convertedManaCost DESC) as rk FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path') WHERE rk = 1
1	SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de frío'	SELECT T1.releaseDate FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.translation = 'Ola de frío')
1	SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim'	SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )
1	SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = 3	SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3
1	SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified'	SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'
0	SELECT cast(sum(CASE WHEN sets.isnonfoilonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Japanese'	SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )
0	SELECT cast(sum(CASE WHEN isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Portuguese (Brazil)'	SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )
1	SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1	SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1
0	SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1	SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
1	SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1	SELECT artist FROM (SELECT artist, rank() over (ORDER BY convertedManaCost DESC) as rk FROM cards WHERE side IS NULL) WHERE rk = 1
0	SELECT frameeffects FROM cards GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1	SELECT frameEffects FROM (SELECT frameEffects, rank() over (ORDER BY COUNT(frameEffects) DESC) as rk FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects) WHERE rk = 1
0	SELECT count(id) FROM cards WHERE dueldeck = 'a' AND power IS NULL AND hasfoil = 0	SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'
0	SELECT id FROM sets WHERE TYPE = 'commander' ORDER BY totalsetsize DESC LIMIT 1	SELECT id FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander');
0	SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.manacost DESC LIMIT 10	SELECT name FROM (SELECT name, rank() over (ORDER BY manaCost DESC) as rk FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'duel')) WHERE rk <= 10
0	SELECT cards.originalreleasedate, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' ORDER BY cards.originalreleasedate ASC LIMIT 1	SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal')
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baga'	SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3
1	SELECT count(cards.name) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance' AND legalities.status = 'Legal'	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
0	SELECT legalities.format, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.status) DESC LIMIT 1	WITH CountedFormats AS (SELECT format, COUNT(*) AS Cnt FROM legalities WHERE status = 'Banned' GROUP BY format), MaxFormat AS (SELECT format FROM CountedFormats WHERE Cnt = (SELECT MAX(Cnt) FROM CountedFormats)) SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format IN (SELECT format FROM MaxFormat) AND legalities.status = 'Banned'
1	SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Battlebond'	SELECT T2.language FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond';
0	SELECT cards.artist, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.artist LIMIT 1	SELECT T.artist, legalities.format FROM (SELECT artist, uuid FROM cards WHERE artist IN (SELECT artist FROM cards GROUP BY artist HAVING COUNT(uuid) = (SELECT MIN(count) FROM (SELECT COUNT(uuid) AS count FROM cards GROUP BY artist)))) AS T JOIN legalities ON T.uuid = legalities.uuid
1	SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = 1	SELECT status FROM legalities AS T2 WHERE T2.uuid IN (SELECT T1.uuid FROM cards AS T1 WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory') AND T2.format = 'legacy'
1	SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.edhrecrank = 1	SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'
0	SELECT cast(count(sets.id) AS REAL) / 365, max(set_translations.language) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.releasedate BETWEEN '2012-01-01' AND '2015-12-31'	SELECT * FROM (SELECT AVG(yearly_count) AS average_sets_per_year FROM (SELECT COUNT(*) AS yearly_count FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY strftime('%Y', releaseDate))) NATURAL JOIN (SELECT language FROM (SELECT language, rank() over (ORDER BY COUNT(*) DESC) as rk FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') GROUP BY language) WHERE rk = 1)
0	SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena'	SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'
0	SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')	SELECT DISTINCT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')
1	SELECT count(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'	SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC
1	SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.code = cards.setcode WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'	SELECT C.name, L.format FROM sets S JOIN cards C ON S.code = C.setCode JOIN legalities L ON C.uuid = L.uuid WHERE S.name = 'Hour of Devastation' AND L.status = 'Legal';
0	SELECT DISTINCT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language != 'Japanese' AND set_translations.language = 'Korean'	SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')
0	SELECT DISTINCT cards.frameversion, cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned'	SELECT DISTINCT T1.frameVersion, T1.name, IIF(T1.uuid IN (SELECT T2.uuid FROM legalities AS T2 WHERE status == 'Banned'), 'Banned', 'NO') FROM cards AS T1 WHERE T1.artist = 'Allen Williams'
1	SELECT displayname FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1	SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )
0	SELECT displayname FROM users WHERE strftime('%Y', creationdate) = '2014'	SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'
0	SELECT count(id) FROM users WHERE lastaccessdate > '2014-09-01 00:00:00'	SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'
0	SELECT displayname FROM users ORDER BY views DESC LIMIT 1	SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
0	SELECT count(users.id) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.upvotes > 100 AND users.downvotes > 1	SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1
1	SELECT count(id) FROM users WHERE strftime('%Y', creationdate) > '2013' AND views > 10	SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT ownerdisplayname FROM posts WHERE title = 'Eliciting priors from experts'	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
1	SELECT title FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY viewcount DESC LIMIT 1	SELECT Title FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))
0	SELECT ownerdisplayname FROM posts ORDER BY favoritecount DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts))
1	SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT answercount FROM posts WHERE ownerdisplayname = 'csgillespie' ORDER BY answercount DESC LIMIT 1	SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT lasteditordisplayname FROM posts WHERE title = 'Examples for teaching: Correlation does not mean causation'	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
0	SELECT ownerdisplayname FROM posts WHERE closeddate IS NOT NULL	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.age > 65 AND posts.score >= 20	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65
1	SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts'	SELECT Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');
0	SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'bayesian'	SELECT T2.Body FROM tags AS T1 LEFT JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'
0	SELECT posts.body FROM tags INNER JOIN posts ON tags.wikipostid = posts.id ORDER BY tags.count DESC LIMIT 1	SELECT Body FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags WHERE Count IS NOT NULL));
1	SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'	SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT count(DISTINCT badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011'	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.id ORDER BY count(badges.id) DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Id) AS BadgeCount FROM badges GROUP BY UserId)));
1	SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie'	SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT cast(count(badges.id) AS REAL) / count(DISTINCT users.displayname) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.views > 200	SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)
0	SELECT cast(sum(CASE WHEN users.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.score > 20	SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5
1	SELECT count(id) FROM votes WHERE creationdate = '2010-07-19' AND userid = 58	SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
0	SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1	SELECT CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(VoteCount) FROM (SELECT COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) T2);
0	SELECT count(id) FROM badges WHERE name = 'Revival'	SELECT Id FROM badges WHERE Name = 'Revival'
0	SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments));
0	SELECT commentcount FROM posts WHERE viewcount = 1910	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910
1	SELECT posts.favoritecount FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.creationdate = '2014-04-23 20:29:39' AND posthistory.userid = 3025	SELECT FavoriteCount FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0')
1	SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.parentid = 107829 AND posts.commentcount = 1	SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1
1	SELECT CASE WHEN posts.closeddate IS NULL THEN 'YES' ELSE 'NO' END FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = 23853 AND comments.creationdate = '2013-07-12 09:08:18.0'	SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
1	SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041	SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini'	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'
1	SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = 6347	SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347
0	SELECT votes.postid FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data visualization%'	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms')
0	SELECT cast(count(posts.id) AS REAL) / count(votes.postid) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 24	SELECT (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) * 1.0 / (SELECT COUNT(Id) FROM votes WHERE UserId = 24) AS ratio;
1	SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'	SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
1	SELECT text FROM comments WHERE score = 17	SELECT Text FROM comments WHERE Score = 17
1	SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com'	SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost'	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'SilentGhost')
1	SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'thank you user93!')
1	SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'A Lion'	SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
1	SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?'	SELECT Reputation FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Understanding what Dassault iSight is doing?')
1	SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?'	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer') LIMIT 10
1	SELECT posts.ownerdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?'	SELECT DisplayName FROM users WHERE Id IN (SELECT T2.UserId FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?')
1	SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Vebjorn Ljosa'	SELECT T4.Title FROM posts AS T4 WHERE T4.id IN (SELECT T1.Id FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.PostId Join users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa')
0	SELECT sum(posts.score), users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'	SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.Id
1	SELECT posthistory.comment FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute 1 in standard deviation?'	SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
1	SELECT sum(votes.bountyamount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data%'	SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'
0	SELECT posthistory.userdisplayname FROM votes INNER JOIN posthistory ON votes.postid = posthistory.postid WHERE posthistory.comment LIKE '%variance%' AND votes.bountyamount = 50	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%variance%') AND BountyAmount = 50)
0	SELECT avg(posts.viewcount), posts.title, comments.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN comments ON posts.id = comments.postid WHERE tags.tagname = 'humor'	SELECT vc, posts.Title, comments.Text FROM (SELECT Tags, AVG(distinct ViewCount) as vc FROM posts WHERE Tags = '<humor>') AS T JOIN posts on T.Tags = posts.Tags JOIN comments on posts.Id = comments.PostId
1	SELECT count(id) FROM comments WHERE userid = 13	SELECT COUNT(Id) FROM comments WHERE UserId = 13
0	SELECT id FROM users ORDER BY reputation DESC LIMIT 1	SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT id FROM users ORDER BY views ASC LIMIT 1	SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )
1	SELECT count(userid) FROM badges WHERE strftime('%Y', `date`) = '2011' AND name = 'Supporter'	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
0	SELECT count(userid) FROM badges GROUP BY userid HAVING count(name) > 5	SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5
1	SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Teacher', 'Supporter')	SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teachers') AND T2.Location = 'New York';
1	SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1	SELECT T2.Id, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
0	SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid WHERE users.views >= 1000 GROUP BY users.id HAVING count(posthistory.postid) = 1	SELECT DISTINCT U.Id FROM users U INNER JOIN postHistory PH ON U.Id = PH.UserId WHERE U.Views >= 1000 GROUP BY PH.UserId, PH.PostId HAVING COUNT(*) = 1;
0	SELECT badges.userid, badges.name FROM posts INNER JOIN badges ON posts.owneruserid = badges.userid GROUP BY badges.userid ORDER BY count(posts.id) DESC LIMIT 1	SELECT T2.Name FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId) AS T1 JOIN badges T2 ON T1.UserId = T2.UserId WHERE T1.CommentCount = (SELECT MAX(CommentCount) FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))
1	SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND users.location = 'India'	SELECT COUNT(DISTINCT T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'
0	SELECT cast(sum(CASE WHEN name = 'Student' THEN 1 ELSE 0 END) AS REAL) * 100 / count(name) FROM badges WHERE strftime('%Y', date) IN (2010, 2011)	SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'
0	SELECT DISTINCT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720	SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720
1	SELECT posts.title, posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = 61217	SELECT T1.ViewCount, T2.RelatedPostId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217;
1	SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.postid = 395	SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395
1	SELECT id, owneruserid FROM posts WHERE score > 60	SELECT Id, OwnerUserId FROM posts WHERE Score > 60
1	SELECT sum(posts.favoritecount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE strftime('%Y', posthistory.creationdate) = '2011' AND posthistory.userid = 686	SELECT SUM(FavoriteCount) FROM posts WHERE Id IN (SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011')
0	SELECT avg(users.upvotes), avg(users.age) FROM users INNER JOIN votes ON users.id = votes.userid GROUP BY users.id HAVING count(users.id) > 10	SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId
0	SELECT count(userid) FROM badges WHERE name = 'Announcer'	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';
0	SELECT name FROM badges WHERE date = '2010-07-19 19:39:08'	SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'
1	SELECT count(id) FROM comments WHERE score > 60	SELECT COUNT(id) FROM comments WHERE score > 60
1	SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47.0'	SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
1	SELECT count(id) FROM posts WHERE score = 10	SELECT COUNT(id) FROM posts WHERE Score = 10
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users )	SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users)
1	SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'	SELECT Reputation FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'
1	SELECT badges.date FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Rochester, NY'	SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'
0	SELECT cast(count(CASE WHEN badges.name = 'Teacher' THEN users.id ELSE NULL END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid	SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher'
0	SELECT cast(sum(CASE WHEN users.age >= 13 AND users.age <= 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'	SELECT CAST( SUM( IIF( T.Age BETWEEN 13 AND 18, 1, 0 ) ) AS REAL ) * 100 / COUNT(T.Id) FROM ( SELECT Id, Age FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer') ) T
1	SELECT score FROM posts WHERE creaiondate = '2010-07-19 19:19:56.0'	SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
1	SELECT text FROM comments WHERE creationdate = '2010-07-19 19:37:33'	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'
0	SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria'	SELECT Age FROM users WHERE Id IN (SELECT UserId FROM badges) AND Location = 'Vienna, Austria' AND Age IS NOT NULL;
0	SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age >= 19 AND users.age <= 65	SELECT COUNT(DISTINCT T1.UserId) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Age BETWEEN 19 AND 65 AND T1.Name = 'Supporter';
1	SELECT users.views FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0'	SELECT Views FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
0	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT min(reputation) FROM users )	SELECT T2.Name, T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Sharpie'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'
0	SELECT count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Supporter' AND users.age > 65	SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'
1	SELECT displayname FROM users WHERE id = 30	SELECT DisplayName FROM users WHERE Id = 30
1	SELECT count(id) FROM users WHERE LOCATION = 'New York'	SELECT COUNT(Id) FROM users WHERE Location = 'New York'
1	SELECT count(id) FROM votes WHERE strftime('%Y', creationdate) = '2010'	SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
1	SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65	SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65
0	SELECT displayname FROM users ORDER BY views DESC LIMIT 1	SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL)
1	SELECT cast(sum(CASE WHEN strftime('%Y', creationdate) = '2010' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN strftime('%Y', creationdate) = '2011' THEN 1 ELSE 0 END) FROM votes	SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes
1	SELECT tags.tagname FROM posts INNER JOIN tags ON posts.id = tags.wikipostid WHERE posts.ownerdisplayname = 'John Stauffer'	SELECT Tags FROM posts WHERE Id IN (SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'John Salvatier')
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Daniel Vassallo'	SELECT COUNT(*) FROM posts JOIN users on posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';
0	SELECT sum(votes.bountyamount) FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'Harlan'	SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');
1	SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1	SELECT Id FROm (SELECT posts.Id, rank() over (ORDER BY posts.AnswerCount DESC ) as rk FROM posts JOIN users on posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick') WHERE rk = 1
1	SELECT posts.title FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY posts.viewcount DESC LIMIT 1	SELECT Id FROM (SELECT Id, rank() over (ORDER BY ViewCount DESC ) as rk FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder')) WHERE rk = 1
1	SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON users.id = votes.userid WHERE users.displayname = 'Matt Parker' AND votes.postid > 4	SELECT count(*) FROM (SELECT posts.Id FROM posts JOIN users on users.Id = posts.OwnerUserId JOIN votes on posts.Id = votes.PostId WHERE users.DisplayName = 'Matt Parker' GROUP BY posts.Id HAVING count(*) > 4)
1	SELECT count(comments.score) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60	SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60
1	SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.wikipostid WHERE users.displayname = 'Mark Meckes' AND posts.commentcount = 0	SELECT DISTINCT T2.Tags FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0;
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer')
1	SELECT cast(sum(CASE WHEN tags LIKE '%r%' THEN 1 ELSE 0 END) AS REAL) * 100 / count(tags) FROM posts INNER JOIN tags ON posts.id = tags.wikipostid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'	SELECT (SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id JOIN tags T3 ON T1.Id = T3.ExcerptPostId WHERE T2.DisplayName = 'Community' AND T3.TagName = 'r') * 100 / (SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community')
1	SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM users INNER JOIN posts ON users.id = posts.owneruserid	SELECT SUM(IIF(T1.DisplayName = 'Mornington', T2.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T2.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
1	SELECT count(userid) FROM badges WHERE strftime('%Y', date) = '2014' AND name = 'Commentator'	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'
1	SELECT count(id) FROM posts WHERE strftime('%Y-%m-%d', creaiondate) = '2010-07-21'	SELECT COUNT(*) FROM posts WHERE date(CreaionDate) = '2010-07-21'
0	SELECT displayname, age FROM users ORDER BY views DESC LIMIT 1	SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
1	SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'	SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
1	SELECT count(id) FROM comments WHERE userid = 13 AND score < 60	SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60
0	SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON users.id = comments.userid WHERE posts.score > 60	SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60
1	SELECT DISTINCT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND strftime('%Y', badges.date) = '2011'	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'
1	SELECT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150	SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150
1	SELECT posthistory.comment, posts.lasteditdate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?'	SELECT T2.Id, T2.LastEditDate, count(*) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T2.Id
0	SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Outliers'	SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers');
1	SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = ( SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a 1 over time' )	SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'
0	SELECT posthistory.postid, badges.name FROM posthistory INNER JOIN badges ON posthistory.userid = badges.userid WHERE posthistory.userdisplayname = 'Samuel' AND strftime('%Y', posthistory.creationdate) = '2013'	SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'
0	SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ViewCount = ( SELECT MAX(ViewCount) FROM posts ) )
0	SELECT users.displayname, users.location FROM tags INNER JOIN posts ON tags.wikipostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing'	SELECT DisplayName, Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE TagName = 'hypothesis-testing'));
1	SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?'	SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'
0	SELECT ownerdisplayname FROM posts WHERE parentid IS NOT NULL ORDER BY score DESC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)))
0	SELECT users.displayname, users.websiteurl FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1	SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8));
1	SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5	WITH top AS ( SELECT ViewCount FROM posts ORDER BY ViewCount DESC LIMIT 5 ) SELECT Title FROM posts WHERE ViewCount IN top
1	SELECT count(id) FROM tags WHERE count BETWEEN 5000 AND 7000	SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000
0	SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1	SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )
0	SELECT age FROM users ORDER BY reputation DESC LIMIT 1	SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT count(votes.postid) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE strftime('%Y', votes.creationdate) = '2011' AND votes.bountyamount = 50	SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50 HAVING COUNT(T1.PostId) > 0;
0	SELECT id FROM users ORDER BY age LIMIT 1	SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )
0	SELECT posts.score FROM tags INNER JOIN posts ON tags.wikipostid = posts.id ORDER BY tags.count DESC LIMIT 1	SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'
0	SELECT cast(count(DISTINCT postlinks.postid) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE strftime('%Y', posts.creationdate) = '2010' AND posts.answercount <= 2	SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'
1	SELECT postid FROM votes WHERE userid = 1465 ORDER BY bountyamount DESC LIMIT 1	WITH T AS ( SELECT Id, FavoriteCount FROM posts WHERE Id IN ( SELECT PostId FROM votes WHERE UserId = 1465 ) ) SELECT Id FROM T WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM T)
1	SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks));
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1	SELECT T2.DisplayName FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T1 JOIN users as T2 ON T1.UserId = T2.Id WHERE T1.BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T3)
1	SELECT votes.creationdate FROM users INNER JOIN votes ON users.id = votes.userid WHERE users.displayname = 'chl' ORDER BY votes.creationdate ASC LIMIT 1	SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl' GROUP BY u.Id
0	SELECT creationdate FROM users ORDER BY age LIMIT 1	SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users) )
1	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))
1	SELECT count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4	SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN posts T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4;
0	SELECT avg(votes.postid) FROM votes INNER JOIN users ON votes.userid = users.id ORDER BY users.age DESC LIMIT 1	SELECT AVG(post_count) FROM ( SELECT COUNT(DISTINCT T2.PostId) AS post_count FROM users T1 LEFT JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = ( SELECT MAX(Age) FROM users ) GROUP BY T2.UserId )
0	SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1	SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
1	SELECT count(id) FROM users WHERE reputation > 2000 AND views > 1000	SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000
1	SELECT displayname FROM users WHERE age BETWEEN 19 AND 65	SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'
1	SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1	SELECT P.Id, P.Title FROM posts P WHERE P.OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) AND P.ViewCount = ( SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) )
0	SELECT id, title FROM posts ORDER BY score DESC LIMIT 1	SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE Score IS NOT NULL);
1	SELECT avg(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Stephen Turner'	SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'
1	SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', posts.creaiondate) = '2011' AND posts.viewcount > 20000	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreaionDate) = '2011')
0	SELECT id, ownerdisplayname FROM posts WHERE strftime('%Y', creaiondate) = '2010' ORDER BY favoritecount DESC LIMIT 1	SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010';
0	SELECT cast(sum(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE strftime('%Y', users.creationdate) = '2011'	SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
1	SELECT cast(sum(CASE WHEN age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM users	SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users
1	SELECT users.displayname, posts.viewcount FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posthistory.text = 'Computer Game Datasets'	SELECT posts.ViewCount, users.DisplayName FROM posts JOIN users on posts.LastEditorUserId = users.Id WHERE posts.Id IN (SELECT PostId FROM postHistory WHERE Text = 'Computer Game Datasets')
1	SELECT count(id) FROM posts WHERE viewcount > ( SELECT avg(viewcount) FROM posts )	SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);
1	SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(score) FROM posts )	SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts);
1	SELECT count(id) FROM posts WHERE viewcount > 35000 AND commentcount = 0	SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
1	SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1	SELECT T2.DisplayName, T2.Location FROM posts T1 JOIN users T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Id = 183;
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Emmett' ORDER BY badges.date DESC LIMIT 1	WITH T AS ( SELECT T1.Name, T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ) SELECT Name FROM T WHERE Date = (SELECT MAX(Date) FROM T)
1	SELECT count(id) FROM users WHERE age >= 19 AND age <= 65 AND upvotes > 5000	SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000
1	SELECT badges.date - users.creationdate FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Zolomon'	SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
0	SELECT count(posts.id), count(comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1	SELECT COUNT(DISTINCT P.Id) AS NumberOfPosts, COUNT(DISTINCT C.Id) AS NumberOfComments FROM users U JOIN posts P ON U.Id = P.OwnerUserId JOIN comments C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)
1	SELECT posthistory.text, posthistory.userdisplayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Analysing wind data with R' ORDER BY posthistory.creationdate DESC LIMIT 1	SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' AND T3.Id IN (SELECT ID FROM (SELECT T4.ID, rank() over (ORDER BY T4.CreationDate DESC ) as rk FROM users AS T5 INNER JOIN posts AS T6 ON T5.Id = T6.OwnerUserId INNER JOIN comments AS T4 ON T6.Id = T4.PostId WHERE T6.Title = 'Analysing wind data with R') WHERE rk <= 10)
0	SELECT count(DISTINCT badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Citizen Patrol'	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' GROUP BY Name;
0	SELECT count(tags.wikipostid) FROM tags INNER JOIN posts ON tags.wikipostid = posts.id WHERE tags.tagname = 'careers'	SELECT COUNT(DISTINCT ExcerptPostId) FROM tags WHERE TagName = 'careers'
1	SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'	SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
0	SELECT count(comments.id), count(posts.acceptedanswerid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Clustering 1D data'	SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'
1	SELECT creationdate FROM users WHERE displayname = 'IrishStat'	SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
0	SELECT count(id) FROM votes WHERE bountyamount >= 30	SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;
0	SELECT cast(sum(CASE WHEN posts.score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.score) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.reputation = ( SELECT max(reputation) FROM users )	SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation
1	SELECT count(id) FROM posts WHERE score < 20	SELECT COUNT(id) FROM posts WHERE Score < 20
1	SELECT count(tagname) FROM tags WHERE id < 15 AND count <= 20	SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15
1	SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'	SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
1	SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)'	SELECT Reputation, UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'fine, you win :)')
0	SELECT posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'How can I adapt ANOVA for binary data?'	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'
0	SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1	WITH scores AS ( SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount >= 100 AND ViewCount <= 150 ) ) SELECT Text FROM scores WHERE Score = (SELECT MAX(Score) FROM scores)
0	SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl LIKE 'http://%'	SELECT U.CreationDate, U.Age FROM users U WHERE EXISTS (SELECT 1 FROM comments C WHERE C.UserId = U.Id AND C.Text LIKE '%http://%')
1	SELECT count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = 0 AND posts.viewcount < 5	SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;
0	SELECT count(posts.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.commentcount = 1 AND comments.score = 0	SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0
1	SELECT count(users.accountid) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.age = 40 AND comments.score = 0	SELECT COUNT(DISTINCT T1.UserId) FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;
0	SELECT posthistory.postid, count(posthistory.comment) FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Group differences on a five point Likert item'	SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'
1	SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'R is also lazy evaluated.'	SELECT UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.')
1	SELECT comments.text FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'	SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
1	SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0	SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0
0	SELECT cast(sum(CASE WHEN users.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 5 AND 10	SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(DISTINCT UserId) FROM comments WHERE Score BETWEEN 5 AND 10)) AS Percentage FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10 AND T2.UpVotes = 0;
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man'	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM hero_power T2 INNER JOIN superhero T1 ON T1.id = T2.hero_id WHERE T1.superhero_name = '3-D Man');
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength'	SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength';
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200	SELECT COUNT(DISTINCT T3.id) FROM superhero T3 JOIN hero_power T2 ON T3.id = T2.hero_id JOIN superpower T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T3.height_cm > 200;
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.full_name HAVING count(superhero.full_name) > 15	SELECT s.full_name FROM superhero s JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp ON s.id = hp.hero_id;
1	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue'	SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';
0	SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Agility' AND colour.colour = 'Blue' AND colour.colour = 'Blond'	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
0	SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1	SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' ORDER BY height_cm DESC;
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
0	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue'	SELECT T3.colour, COUNT(T1.id) AS popularity FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id JOIN colour T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T3.colour ORDER BY popularity DESC;
1	SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
0	SELECT cast(sum(CASE WHEN superpower.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
0	SELECT publisher.publisher_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_1 LIMIT 1	SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM (SELECT T1.publisher_id, rank() over (ORDER BY T3.attribute_value) as rk FROM superhero AS T1 INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed') WHERE rk = 1)
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Gold'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
1	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_1 ASC LIMIT 1	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_1 < 50	SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Death Touch'));
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_1 = 100 AND gender.gender = 'Female'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1	SELECT superhero_name FROM (SELECT T1.superhero_name, rank() over (ORDER BY COUNT(T2.hero_id) DESC) as rk FROM superhero AS T1 LEFT JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.id) WHERE rk = 1
1	SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'	SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
0	SELECT cast(sum(CASE WHEN alignment.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero)) AS percentage_bad, COUNT(CASE WHEN T3.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_bad_count FROM superhero T1 INNER JOIN alignment T2 ON T1.alignment_id = T2.id INNER JOIN publisher T3 ON T1.publisher_id = T3.id WHERE T2.alignment = 'Bad';
1	SELECT sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id	SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
1	SELECT id FROM publisher WHERE publisher_name = 'Star Trek'	SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
0	SELECT avg(attribute_1) FROM hero_attribute	SELECT AVG(attribute_value) FROM hero_attribute
1	SELECT count(id) FROM superhero WHERE full_name IS NULL	SELECT COUNT(id) FROM superhero WHERE full_name IS NULL
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok'	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero_name = 'Deathlok');
0	SELECT avg(weight_kg) FROM superhero WHERE gender_id = 2	SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T3.gender = 'Male') LIMIT 5
1	SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
0	SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'
1	SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE hero_power.hero_id = 56	SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56
0	SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5	SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'
0	SELECT count(id) FROM superhero WHERE alignment_id = 2	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169
0	SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE race.race = 'Human' AND superhero.height_cm = 185	SELECT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'human';
0	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1	SELECT colour FROM (SELECT T2.colour, rank() over (ORDER BY T1.weight_kg DESC) as rk FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id) WHERE rk = 1
0	SELECT cast(sum(CASE WHEN publisher.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / count(publisher.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180	SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180
0	SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero ) * 0.79	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79
0	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power GROUP BY power_id HAVING COUNT(power_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(power_id) as cnt FROM hero_power GROUP BY power_id)));
0	SELECT hero_attribute.attribute_1 FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination'	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'
1	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1	SELECT T2.power_name FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1;
0	SELECT count(hero_power.hero_id) FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Stealth'	SELECT COUNT(DISTINCT T2.hero_id) FROM superpower T1 JOIN hero_power T2 ON T1.id = T2.power_id WHERE T1.power_name = 'Stealth';
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1	SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')
0	SELECT cast(count(superhero.id) AS REAL) / count(DISTINCT superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.id = 1	SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Durability' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T2.attribute_value = (SELECT MAX(T5.attribute_value) FROM superhero AS T6 INNER JOIN hero_attribute AS T5 ON T6.id = T5.hero_id INNER JOIN publisher AS T7 ON T7.id = T6.publisher_id WHERE T7.publisher_name = 'Dark Horse Comics')
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight'	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Flight'));
1	SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND gender.gender = 'Female'	SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'
1	SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id	SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb'	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
1	SELECT cast(sum(CASE WHEN colour.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female'	SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'
1	SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler'	SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
1	SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13'	SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation'	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Adaptation'));
0	SELECT count(hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo'	SELECT COUNT(DISTINCT power_id) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Amazo');
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'	SELECT power_name FROM superpower WHERE id IN (SELECT HP.power_id FROM hero_power HP JOIN superhero SH ON HP.hero_id = SH.id WHERE SH.full_name = 'Hunter Zolomon');
1	SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'	SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Black' AND superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'
0	SELECT DISTINCT superhero.eye_colour_id FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Gold'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'
1	SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'	SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
1	SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
0	SELECT count(hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1	SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = (SELECT MAX(T3.attribute_value) FROM hero_attribute AS T3 JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength')
1	SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks'	SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'
0	SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
1	SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'	SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
0	SELECT sum(CASE WHEN superhero.full_name = 'Emil Blonsky' THEN superhero.weight_kg ELSE 0 END) - sum(CASE WHEN superhero.full_name = 'Charles Chandler' THEN superhero.weight_kg ELSE 0 END) FROM superhero	SELECT (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference FROM superhero LIMIT 1;
1	SELECT avg(height_cm) FROM superhero	SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero_name = 'Abomination');
1	SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.race_id = 21 AND gender.id = 1	SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1	SELECT T1.superhero_name FROM superhero AS T1 WHERE id IN (SELECT hero_id FROM (SELECT T2.hero_id, rank() over (ORDER BY T2.attribute_value DESC) as rk FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed') WHERE rk = 1)
0	SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'	SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
0	SELECT attribute.attribute_name, hero_attribute.attribute_1 FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man'	SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'
0	SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
1	SELECT count(id) FROM superhero WHERE publisher_id = 1	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1
0	SELECT cast(sum(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM superhero	SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id
1	SELECT cast(sum(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id	SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id
0	SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1	SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
0	SELECT id FROM superpower WHERE power_name = 'Cryokinesis'	SELECT id FROM superpower WHERE power_name = 'cryokinesis'
1	SELECT superhero_name FROM superhero WHERE id = 294	SELECT superhero_name FROM superhero WHERE id = 294
1	SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL	SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr'	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.full_name = 'Helen Parr')
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188	SELECT T2.race FROM superhero T1 JOIN race T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188;
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
0	SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN race ON superhero.race_id = race.id ORDER BY hero_attribute.attribute_1 DESC LIMIT 1	SELECT race.race FROM race INNER JOIN (SELECT race_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute))) AS max_hero ON race.id = max_hero.race_id
1	SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Atom IV'	SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'
1	SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5	SELECT S.full_name FROM superhero S JOIN colour C ON S.eye_colour_id = C.id WHERE C.colour = 'Blue' LIMIT 5;
0	SELECT avg(hero_attribute.attribute_1) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 3	SELECT AVG(T2.attribute_value) AS average_attribute_value FROM superhero T1 JOIN hero_attribute T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3 AND T2.attribute_value IS NOT NULL;
0	SELECT DISTINCT colour.colour FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_1 = 100	SELECT colour FROM (SELECT * FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value = 100))) AS SubQuery;
0	SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' AND gender.gender = 'Female'	SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.alignment_id = 1 and T1.gender_id = 2
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_1 BETWEEN 75 AND 80	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value BETWEEN 75 AND 80);
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND gender.gender = 'Male'	SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'
1	SELECT cast(sum(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.gender_id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.id = 2	SELECT CAST(COUNT(CASE WHEN gender_id = 2 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero WHERE alignment_id = 2
0	SELECT sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) - sum(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.weight_kg = 0	SELECT (COUNT(*) FILTER (WHERE eye_colour_id = 7) - COUNT(*) FILTER (WHERE eye_colour_id = 1)) AS difference FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
0	SELECT sum(hero_attribute.attribute_1) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax'	SELECT power_name FROM superpower WHERE id IN (SELECT HP.power_id FROM hero_power HP JOIN superhero SH ON HP.hero_id = SH.id WHERE SH.superhero_name = 'Ajax');
1	SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE alignment.alignment = 'Bad' AND colour.colour = 'Green'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel Comics' AND gender.gender = 'Female'	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Wind Control')) ORDER BY superhero_name ASC;
0	SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force'	SELECT T5.gender FROM (SELECT gender_id FROM superhero AS T2 WHERE T2.id IN (SELECT T3.hero_id FROM hero_power AS T3 INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force')) AS T1 JOIN gender AS T5 ON T1.gender_id = T5.id
0	SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1	SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') AND weight_kg = (SELECT MAX(weight_kg) FROM superhero WHERE weight_kg IS NOT NULL AND weight_kg > 0 AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'))
1	SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race != 'Human' AND publisher.publisher_name = 'Dark Horse Comics'	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_1 = 100	SELECT COUNT(DISTINCT T3.id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Speed')
1	SELECT sum(CASE WHEN publisher.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id	SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
0	SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_1 ASC LIMIT 1	SELECT attribute_name FROM attribute WHERE id IN (SELECT attribute_id FROM (SELECT hero_attribute.attribute_id, rank() over (ORDER BY hero_attribute.attribute_value) as rk FROM hero_attribute JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Black Panther') WHERE rk = 1)
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
0	SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1	SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
1	SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'	SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
1	SELECT cast(sum(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.publisher_id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'	SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'
1	SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'	SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
1	SELECT count(id) FROM superhero WHERE full_name LIKE 'John%'	SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'
0	SELECT hero_id FROM hero_attribute ORDER BY attribute_1 ASC LIMIT 1	SELECT DISTINCT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
1	SELECT full_name FROM superhero WHERE superhero_name = 'Alien'	SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
0	SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Brown' AND superhero.weight_kg < 100	SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'
0	SELECT hero_attribute.attribute_1 FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Aquababy'	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
1	SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40	SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40
1	SELECT avg(superhero.height_cm) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
0	SELECT hero_power.hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'	SELECT DISTINCT T1.id FROM superhero T1 JOIN hero_power T2 ON T1.id = T2.hero_id JOIN superpower T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence';
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) FROM superhero ) * 0.8	SELECT power_name FROM superpower WHERE superpower.id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm * 100 > (SELECT AVG(height_cm) FROM superhero) * 80);
0	SELECT drivers.driverref FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 18 ORDER BY qualifying.q1 DESC LIMIT 5	SELECT driverRef FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 20 AND q1 IS NOT NULL ORDER BY q1 DESC LIMIT 5)
1	SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 19 AND qualifying.q2 = ( SELECT min(q2) FROM qualifying WHERE raceid = 19 )	SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL AND T1.q2 = (SELECT MIN(q2) AS min_q2 FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)
1	SELECT DISTINCT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.location = 'Shanghai'	SELECT DISTINCT year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai';
1	SELECT DISTINCT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya';
1	SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany'	SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';
0	SELECT DISTINCT constructorstandings.position FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.name = 'Renault'	SELECT position FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM constructors WHERE name = 'Renault')
0	SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2010 AND circuits.country NOT IN ('Asia', 'Europe')	SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010
1	SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain'	SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'
0	SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'	SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE name = 'Australian Grand Prix');
1	SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';
1	SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'	SELECT T2.time FROM races T2 JOIN circuits T1 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';
0	SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'	SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'
0	SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE results.raceid = 24 GROUP BY circuits.country	SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1
1	SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceid = 354	SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'
0	SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40'	SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'
1	SELECT drivers.number FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54'	SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'
1	SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL	SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL
1	SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901	SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901
1	SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29'	SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 ORDER BY drivers.dob LIMIT 1	SELECT forename, surname FROM (SELECT T1.forename, T1.surname, rank() over (ORDER BY T1.dob ASC) as rk FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC) WHERE rk = 1
0	SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.time = '01:27.000' AND laptimes.raceid = 161	SELECT forename, surname, url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes AS T1 WHERE raceId = 161 AND time LIKE '1:27%')
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 933 ORDER BY results.fastestlapspeed DESC LIMIT 1	SELECT T1.nationality FROM drivers AS T1 WHERE driverId IN (SELECT T2.driverId FROM results AS T2 WHERE T2.raceId = 933 AND T2.fastestLapSpeed = (SELECT max(T3.fastestLapSpeed) FROM results AS T3 WHERE T3.raceId = 933));
1	SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix'	SELECT T2.lat, T2.lng FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix';
0	SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 9 ORDER BY constructorstandings.points DESC LIMIT 1	SELECT T3.url FROM constructors T3 WHERE T3.constructorId IN (SELECT T2.constructorId FROM constructorResults T2 WHERE T2.raceId = 9 AND T2.points = (SELECT MAX(T1.points) FROM constructorResults T1 WHERE T1.raceId = 9));
1	SELECT qualifying.q1 FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = 345	SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'
0	SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 347 AND qualifying.q2 = '0:01:15'	SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'
0	SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q3 = '0:01:33' AND qualifying.raceid = 45	SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'
1	SELECT results.time FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Bruce' AND drivers.surname = 'McLaren' AND results.raceid = 743	SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'
1	SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'San Marino Grand Prix' AND results.position = 2 AND races.year = 2006	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2
1	SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901	SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901
0	SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '2015-11-29'	SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1	SELECT forename, surname FROM (SELECT T1.forename, T1.surname, rank() over (ORDER BY T1.dob DESC) as rk FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC) WHERE rk = 1
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.milliseconds LIMIT 1	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM (SELECT T2.driverId, rank() over (ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348) WHERE rk = 1)
0	SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 348 ORDER BY results.fastestlapspeed DESC LIMIT 1	SELECT nationality FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE fastestLapSpeed = (SELECT max(fastestLapSpeed) FROM results))
0	SELECT cast((results.fastestlapspeed - results.fastestlapspeed - results.fastestlapspeed) AS REAL) * 100 / results.fastestlapspeed FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 853	SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'
1	SELECT cast(sum(CASE WHEN results.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16'	SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'
0	SELECT min(YEAR) FROM races WHERE name = 'Singapore Grand Prix'	SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1
0	SELECT count(raceid) FROM races WHERE YEAR = 2005 ORDER BY raceid DESC	SELECT name FROM races WHERE year = 2005 ORDER BY name DESC
1	SELECT name FROM races WHERE strftime('%Y-%m', date) = ( SELECT strftime('%Y-%m', min(date)) FROM races )	SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )
1	SELECT name, date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1	SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1
0	SELECT YEAR FROM races GROUP BY YEAR ORDER BY count(YEAR) DESC LIMIT 1	SELECT year FROM (SELECT year, rank() over (ORDER BY COUNT(round) DESC) as rk FROM races GROUP BY year) WHERE rk = 1
0	SELECT DISTINCT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.year = 2017 AND seasons.year != 2000	SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
0	SELECT circuits.country, circuits.name, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year ASC LIMIT 1	SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
0	SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix' ORDER BY seasons.year DESC LIMIT 1	SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1
1	SELECT count(seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix'	SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
0	SELECT results.driverid FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2010 ORDER BY results.position	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.points DESC LIMIT 1	SELECT forename, surname, points FROM drivers JOIN (SELECT distinct driverId, points FROM driverStandings WHERE points = (SELECT max(points) FROM driverStandings)) AS T ON drivers.driverId == T.driverId
1	SELECT drivers.forename, drivers.surname, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY driverstandings.points DESC LIMIT 3	SELECT forename, surname, points FROM (SELECT T3.forename, T3.surname, T2.points, rank() over (ORDER BY T2.points DESC) as rk FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC) WHERE rk <= 3;
0	SELECT results.time, drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.time ASC LIMIT 1	SELECT milliseconds, forename, surname, name FROM (SELECT T2.milliseconds, T1.forename, T1.surname, T3.name, rank() over (ORDER BY T2.milliseconds ASC) as rk FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId) WHERE rk = 1
1	SELECT avg(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009	SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'
0	SELECT cast(sum(CASE WHEN driverstandings.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.year >= 2010	SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010
0	SELECT drivers.forename, drivers.surname, drivers.nationality, avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid GROUP BY drivers.forename, drivers.surname, drivers.nationality ORDER BY count(driverstandings.wins) DESC LIMIT 1	SELECT forename, surname, nationality, points FROM (SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) as points, rank() over (ORDER BY COUNT(T2.wins) DESC) as rk FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.driverId) WHERE rk = 1;
0	SELECT dob, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1	SELECT age, forename, surname FROM (SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob) as age, forename, surname, rank() over (ORDER BY dob DESC) as rk FROM drivers WHERE nationality = 'Japanese') WHERE rk = 1
0	SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING count(circuits.name) = 4	SELECT T2.circuitId FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T1.raceId) = 4;
1	SELECT circuits.name, circuits.location, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006	SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006
1	SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE strftime('%Y-%m', races.date) = '2005-09'	SELECT T1.name AS race_name, T2.name AS circuit_name, T2.location FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T1.date) = '2005' AND strftime('%m', T1.date) = '09';
1	SELECT DISTINCT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 10	SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20
0	SELECT count(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Sepang International Circuit' )	SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'
1	SELECT races.name, races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds LIMIT 1	SELECT T1.name, T1.year FROM races AS T1 WHERE T1.raceId IN (SELECT raceId FROM (SELECT T2.raceId, rank() over (ORDER BY milliseconds) as rk FROM lapTimes AS T2 INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher') WHERE rk = 1)
1	SELECT avg(driverstandings.points) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN drivers ON driverstandings.driverid = drivers.driverid WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000	SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000
0	SELECT races.year, driverstandings.points FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1	SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(T4.year) FROM races AS T4 INNER JOIN driverStandings AS T5 ON T5.raceId = T4.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId WHERE T6.forename = 'Lewis' AND T6.surname = 'Hamilton')
0	SELECT circuits.name, races.date FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2017 ORDER BY races.date	SELECT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC
0	SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(races.name) DESC LIMIT 1	SELECT MAX(T3.lap) as laps, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId GROUP BY T2.raceId HAVING (laps) = (SELECT MAX(T4.lap) FROM lapTimes AS T4);
1	SELECT cast(sum(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'	SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'
1	SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'	SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
0	SELECT name FROM circuits WHERE LOCATION IN ('Silverstone', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1	SELECT name FROM (SELECT name, rank() over (ORDER BY lat DESC) as rk FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')) WHERE rk = 1
1	SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'	SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
0	SELECT country FROM circuits ORDER BY alt DESC LIMIT 1	SELECT country FROM (SELECT country, rank() over ( ORDER BY alt DESC ) as rk FROM circuits) WHERE rk = 1
1	SELECT count(driverid) FROM drivers WHERE code IS NULL	SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers
0	SELECT circuits.country FROM drivers INNER JOIN circuits ON drivers.driverid = circuits.circuitid ORDER BY drivers.dob ASC LIMIT 1	SELECT nationality FROM (SELECT nationality, rank() over ( ORDER BY dob ASC ) as rk FROM drivers WHERE dob IS NOT NULL) WHERE rk = 1
0	SELECT surname FROM drivers WHERE nationality = 'Italian'	SELECT surname FROM drivers WHERE nationality = 'italian'
1	SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'	SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
1	SELECT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis'	SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
1	SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009	SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
1	SELECT DISTINCT races.year FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'	SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'
0	SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit'	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit';
0	SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'	SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'
1	SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'	SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'
0	SELECT DISTINCT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya'	SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
1	SELECT circuits.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009	SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
0	SELECT min(results.fastestlaptime) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1	SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE driverId IN (SELECT driverId FROM results AS T2 WHERE T2.fastestLapSpeed IS NOT NULL AND fastestLapSpeed = (SELECT max(fastestLapSpeed) FROM results))
0	SELECT driverstandings.driverid FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE driverstandings.position = 1 AND races.year = 2008 AND races.name = 'Australian Grand Prix'	SELECT T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007;
0	SELECT DISTINCT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
0	SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1	SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )
0	SELECT max(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009	SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1
1	SELECT DISTINCT seasons.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
1	SELECT results.positionorder FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008	SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008
0	SELECT drivers.forename, drivers.surname FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND results.grid = 4	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989
0	SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL	SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL
0	SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008	SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
0	SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.rank = 2	SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008
0	SELECT drivers.forename, drivers.surname, drivers.url FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.time DESC LIMIT 1	SELECT T1.forename, T1.surname, T1.url, T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '__:__:__.___' AND T3.year = 2008;
0	SELECT count(results.driverid) FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN constructors ON results.constructorid = constructors.constructorid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND constructors.nationality = 'American'	SELECT COUNT(DISTINCT T3.driverId) FROM races T1 JOIN results T2 ON T1.raceId = T2.raceId JOIN drivers T3 ON T2.driverId = T3.driverId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T3.nationality = 'British';
0	SELECT count(results.driverid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.time IS NOT NULL	SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )
1	SELECT sum(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
0	SELECT avg(replace(fastestlaptime, ':', '')) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'
0	SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / count(laptimes.time) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix'	SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008
0	SELECT cast((cast(replace(results.time, ':', '') AS REAL) - cast(replace(laptimes.time, ':', '') AS REAL)) AS REAL) * 100 / (cast(replace(laptimes.time, ':', '') AS REAL) - cast(replace(pitstops.time, ':', '') AS REAL)) FROM results INNER JOIN laptimes ON results.driverid = laptimes.driverid AND results.raceid = laptimes.raceid INNER JOIN pitstops ON results.driverid = pitstops.driverid AND results.raceid = pitstops.raceid WHERE results.raceid = ( SELECT raceid FROM races WHERE name = 'Australian Grand Prix' AND YEAR = 2008 ORDER BY time DESC LIMIT 1 )	WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)
0	SELECT count(circuitid) FROM circuits WHERE country = 'Australia' AND LOCATION = 'Melbourne'	SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'
1	SELECT lat, lng FROM circuits WHERE country = 'USA'	SELECT lat, lng FROM circuits WHERE country = 'USA'
0	SELECT count(driverid) FROM drivers WHERE dob > 1980 AND nationality = 'British'	SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'
0	SELECT avg(constructorresults.points) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'British'	SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'
0	SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid ORDER BY constructorresults.points DESC LIMIT 1	SELECT name FROM constructors WHERE constructorId IN (SELECT constructorId FROM (SELECT constructorId, rank() over (ORDER BY points DESC) as rk FROM constructorStandings) WHERE rk = 1)
1	SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructorstandings.raceid = 291 AND constructorstandings.points = 0	SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291
0	SELECT count(constructorstandings.constructorid) FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid WHERE constructors.nationality = 'Japanese' AND constructorstandings.points = 0	SELECT COUNT(*) FROM (SELECT T1.constructorId FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2);
0	SELECT constructors.name FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.rank = 1	SELECT name FROM constructors WHERE constructorId IN (SELECT constructorId FROM results WHERE rank = 1)
0	SELECT count(results.constructorid) FROM results INNER JOIN constructors ON results.constructorid = constructors.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50	SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'
0	SELECT cast(count(CASE WHEN drivers.nationality = 'Japanese' THEN drivers.driverid ELSE NULL END) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009	SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009
0	SELECT avg(cast(strftime('%M', time) AS REAL) * 60 + cast(strftime('%S', time) AS REAL)) FROM results WHERE time IS NOT NULL	WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL ) + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE strftime('%Y', drivers.dob) > '1975' AND results.rank = 2	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE rank = 2) AND STRFTIME('%Y', dob) > '1975'
1	SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.nationality = 'Italian' AND results.time IS NULL	SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlaptime DESC LIMIT 1	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL))
0	SELECT results.fastestlap FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2009 ORDER BY results.milliseconds DESC LIMIT 1	SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'
1	SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009	SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
0	SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.milliseconds ASC LIMIT 1	SELECT name, year FROM races WHERE raceId IN (SELECT raceId FROM results WHERE milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL));
0	SELECT cast(sum(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid	SELECT CAST(COUNT(DISTINCT CASE WHEN STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 THEN T3.driverId END) AS REAL) * 100 / COUNT(DISTINCT T3.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005
0	SELECT count(laptimes.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 720000	SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120
0	SELECT code FROM drivers WHERE nationality = 'America'	SELECT code FROM drivers WHERE Nationality = 'American'
1	SELECT raceid FROM races WHERE YEAR = 2009	SELECT raceId FROM races WHERE year = 2009
1	SELECT count(driverid) FROM driverstandings WHERE raceid = 18	SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18
0	SELECT count(drivers.driverid) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE drivers.nationality = 'Netherlands' ORDER BY drivers.dob LIMIT 3	SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'
1	SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'	SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
0	SELECT count(driverid) FROM drivers WHERE dob LIKE '1980%' AND nationality = 'Australian'	SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3	SELECT driverId FROM (SELECT T1.driverId, rank() over (ORDER BY MIN(CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM drivers T1 JOIN lapTimes T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1990' GROUP BY T1.driverId) WHERE rk <= 3
0	SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1	SELECT driverRef FROM (SELECT driverRef, rank() over ( ORDER BY JULIANDAY(dob) ASC ) as rk FROM drivers WHERE nationality = 'German') WHERE rk = 1
0	SELECT DISTINCT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob = '1971-01-01' AND results.fastestlaptime IS NOT NULL	SELECT DISTINCT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL;
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'Spanish' AND drivers.dob < 1982 ORDER BY laptimes.time DESC LIMIT 10	SELECT driverId FROM (SELECT T2.driverId, rank() over ( ORDER BY max(CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) DESC ) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' GROUP BY T1.driverId) WHERE rk <= 10
1	SELECT DISTINCT races.year FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.fastestlaptime IS NOT NULL	SELECT DISTINCT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL;
0	SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.milliseconds DESC LIMIT 1	SELECT year FROM (SELECT T2.year, rank() over ( ORDER BY max(CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0) DESC ) as rk FROM laptimes T1 JOIN races T2 ON T1.raceId = T2.raceId GROUP BY T2.year) WHERE rk = 1
0	SELECT driverid FROM laptimes ORDER BY milliseconds DESC LIMIT 5	SELECT driverId FROM (SELECT driverId, rank() over (ORDER BY MIN((CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) ASC) as rk FROM lapTimes WHERE lap = 1 GROUP BY driverId) WHERE rk <= 5
0	SELECT count(raceid) FROM results WHERE statusid = 2 AND raceid BETWEEN 50 AND 100	SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50
0	SELECT count(name), lat, lng FROM circuits WHERE country = 'Austria'	SELECT location, lat, lng FROM circuits WHERE country = 'Austria'
0	SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1	SELECT raceId FROM (SELECT raceId, rank() over ( ORDER BY COUNT(*) DESC ) as rk FROM results WHERE time IS NOT NULL GROUP BY raceId) WHERE rk = 1
1	SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 23 AND qualifying.q2 IS NOT NULL	SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL
0	SELECT drivers.forename, drivers.surname, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1	SELECT T3.year, T3.name, T3.date, T3.time FROM races T3 JOIN qualifying T2 ON T3.raceId = T2.raceId JOIN drivers T1 ON T2.driverId = T1.driverId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T3.date ASC LIMIT 1
0	SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'American' AND status.status = 'Disqualified'	SELECT COUNT(DISTINCT T1.driverId) FROM drivers T1 JOIN results T2 ON T1.driverId = T2.driverId JOIN status T3 ON T2.statusId = T3.statusId WHERE T1.nationality = 'American' AND T3.status = 'Puncture';
0	SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1	SELECT url FROM (SELECT T1.url, rank() over (ORDER BY max(T2.points) DESC) as rk FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' GROUP BY T1.constructorId) WHERE rk = 1;
0	SELECT constructors.url FROM constructorstandings INNER JOIN constructors ON constructorstandings.constructorid = constructors.constructorid ORDER BY constructorstandings.wins DESC LIMIT 1	SELECT url FROM (SELECT T2.url, rank() over (ORDER BY SUM(T1.wins) DESC) as rk FROM constructors T2 JOIN constructorStandings T1 ON T2.constructorId = T1.constructorId GROUP BY T1.constructorId) WHERE rk = 1
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' ORDER BY laptimes.time DESC LIMIT 1	SELECT driverId FROM (SELECT T1.driverId, rank() over (ORDER BY MAX((CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0)) DESC) as rk FROM laptimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 GROUP BY T1.driverId) WHERE rk = 1;
0	SELECT raceid, milliseconds FROM results ORDER BY milliseconds ASC LIMIT 1	SELECT raceId, milliseconds FROM (SELECT T2.raceId, T1.milliseconds, rank() over (ORDER BY (CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM laptimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1) WHERE rk = 1
1	SELECT avg(results.fastestlaptime) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11	SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'
1	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.forename, drivers.surname ORDER BY sum(cast(pitstops.duration AS REAL)) / count(pitstops.duration) LIMIT 5	SELECT forename, surname FROM (SELECT T2.forename, T2.surname, rank() over ( ORDER BY AVG(T1.duration) ) as rk FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.driverId) WHERE rk <= 3;
0	SELECT results.time FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.points DESC LIMIT 1	SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'
0	SELECT constructors.name, constructors.url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 ORDER BY results.time DESC LIMIT 1	SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'
1	SELECT forename, surname, dob FROM drivers WHERE dob BETWEEN '1981-01-01' AND '1991-12-31' AND nationality = 'Austrian'	SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'
1	SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC	SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
0	SELECT LOCATION, country FROM circuits WHERE name = 'Hungaroring'	SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
0	SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1	SELECT score, name, nationality FROM (SELECT SUM(T1.points) as score, T2.name, T2.nationality, rank() over (ORDER BY SUM(T1.points) DESC) as rk FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.constructorId) WHERE rk = 1
1	SELECT avg(driverstandings.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'	SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
0	SELECT cast(count(raceid) AS REAL) / 10 FROM races WHERE substr(date, 1, 4) BETWEEN '2000' AND '2010'	SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
0	SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1	SELECT nationality FROM drivers GROUP BY nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM drivers GROUP BY nationality) T2);
0	SELECT driverstandings.wins FROM driverstandings INNER JOIN results ON driverstandings.raceid = results.raceid WHERE driverstandings.position = 91	SELECT wins FROM (SELECT wins, rank() OVER (ORDER BY SUM(points) DESC) AS rank FROM driverStandings WHERE points IS NOT NULL GROUP BY driverId) WHERE rank = 91;
0	SELECT races.name FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.fastestlaptime LIMIT 1	SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results));
0	SELECT circuits.location, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid ORDER BY races.date DESC LIMIT 1	SELECT location, country FROM (SELECT T1.location, T1.country, rank() over (ORDER BY MAX(T2.date) DESC) as rk FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId) WHERE rk = 1
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.year = 2008 AND races.circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY qualifying.q3 LIMIT 1	SELECT forename, surname FROM (SELECT T2.forename, T2.surname, CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000, rank() over (ORDER BY min(CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL)) / 1000 ASC ) as rk FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit') GROUP BY T2.driverId) WHERE rk = 1;
0	SELECT drivers.forename, drivers.surname, drivers.nationality, races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1	SELECT forename, surname, nationality, name FROM (SELECT forename, surname, nationality, T.driverId, races.name, rank() over (partition by T.driverId ORDER BY races.date ASC ) as rk FROM (SELECT forename, surname, nationality, driverId, rank() over (ORDER BY dob DESC ) as rk FROM drivers) AS T JOIN driverStandings ON T.driverId = driverStandings.driverId JOIN races on races.raceId = driverStandings.raceId WHERE T.rk = 1) WHERE rk = 1;
0	SELECT count(results.statusid) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Canadian Grand Prix' AND results.statusid = 3	SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1
0	SELECT driverstandings.wins, drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob ASC LIMIT 1	SELECT wins, forename, surname FROM (SELECT SUM(T1.wins) as wins, T2.forename, T2.surname, rank() over (ORDER BY T2.dob ASC) as rk FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId GROUP BY T2.driverId) WHERE rk = 1;
1	SELECT max(duration) FROM pitstops	SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1
0	SELECT races.time FROM races INNER JOIN results ON races.raceid = results.raceid ORDER BY results.fastestlaptime DESC LIMIT 1	SELECT time FROM lapTimes ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR(SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC LIMIT 1
0	SELECT max(pitstops.duration) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1
1	SELECT pitstops.lap FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2011	SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'
0	SELECT pitstops.time FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.year = 2011	SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'
0	SELECT results.laps FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR( SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR( time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC LIMIT 1
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid ORDER BY laptimes.time ASC LIMIT 1	WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, rank() over (ORDER BY min(time_in_seconds)) AS rk FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.rk <= 20
0	SELECT results.position FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.milliseconds LIMIT 1	SELECT position FROM (SELECT T1.position, rank() over (ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton') WHERE rk = 1
0	SELECT laptimes.milliseconds FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT fastest_lap_times.fastestLapTime as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix' ORDER BY fastest_lap_times.time_in_seconds asc LIMIT 1
0	SELECT laptimes.milliseconds FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy' ORDER BY laptimes.milliseconds DESC LIMIT 1	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1
0	SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE races.name = 'Austrian Grand Prix' ORDER BY laptimes.milliseconds DESC LIMIT 1	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT DISTINCT raceId FROM (SELECT T2.raceId, rank() over (ORDER BY fastest_lap_times.time_in_seconds ASC ) as rk FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix') WHERE rk = 1
0	SELECT pitstops.duration FROM races INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE races.name = 'Austrian Grand Prix'	WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId
0	SELECT circuits.location FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488'	SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE raceId IN (SELECT raceId FROM lapTimes WHERE time = '1:29.488'));
1	SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'	SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
0	SELECT avg(laptimes.milliseconds) FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE circuits.country = 'Italy'	SELECT avg(laptime) FROM (SELECT min(t1.milliseconds) as laptime FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' GROUP BY T3.circuitId)
0	SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1	SELECT distinct player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT max(overall_rating) FROM Player_Attributes);
0	SELECT height, player_name FROM player ORDER BY height DESC LIMIT 1	SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
0	SELECT preferred_foot FROM player_attributes ORDER BY potential ASC LIMIT 1	SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)
0	SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.defensive_work_rate = 'low'	SELECT COUNT(distinct player_api_id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'
0	SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 5	SELECT T3.id FROM (SELECT T1.player_api_id, rank() over (ORDER BY max(T1.crossing) DESC ) as rk FROM Player_Attributes T1 GROUP BY T1.player_api_id) AS T2 join Player AS T3 ON T2.player_api_id = T3.player_api_id WHERE rk <= 5
0	SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(match.home_team_goal) + sum(match.away_team_goal) DESC LIMIT 1	SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT MAX(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id)));
0	SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.season = '2016/2017' GROUP BY team.team_long_name ORDER BY sum(MATCH.home_team_goal - MATCH.away_team_goal) LIMIT 1	SELECT t3.team_long_name FROM Match AS t1 INNER JOIN Team AS t3 ON t1.home_team_api_id = t3.team_api_id WHERE t1.season = '2015/2016' AND t1.home_team_goal - t1.away_team_goal < 0 GROUP BY t1.home_team_api_id HAVING COUNT(*) = (SELECT MIN(lost_matches_count) FROM (SELECT home_team_api_id, COUNT(*) AS lost_matches_count FROM Match WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10	SELECT T2.player_name FROM (SELECT player_api_id, rank() over (ORDER BY max(penalties) DESC ) as rk FROM Player_Attributes GROUP BY player_api_id) AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE rk <= 10
0	SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id INNER JOIN league ON league.id = MATCH.league_id WHERE league.name = 'Scotland Premier League' AND MATCH.season = '2009/2010' GROUP BY team.team_long_name ORDER BY sum(MATCH.away_team_goal - MATCH.home_team_goal) DESC LIMIT 1	SELECT t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'Scotland Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 GROUP BY t2.away_team_api_id HAVING COUNT(*) = (SELECT MAX(won_matches_count) FROM (SELECT away_team_api_id, COUNT(*) AS won_matches_count FROM Match AS m INNER JOIN League AS l ON m.league_id = l.id WHERE l.name = 'Scotland Premier League' AND m.season = '2009/2010' AND m.away_team_goal - m.home_team_goal > 0 GROUP BY m.away_team_api_id))
1	SELECT team_attributes.buildupplayspeed FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4	SELECT speed FROM (SELECT max(buildUpPlaySpeed) as speed, rank() over (ORDER BY max(buildUpPlaySpeed) DESC) AS rk FROM Team_Attributes WHERE buildUpPlaySpeed IS NOT NULL GROUP BY team_api_id) WHERE rk <= 4
0	SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' GROUP BY league.name ORDER BY sum(CASE WHEN match.home_team_goal = match.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1	SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id HAVING COUNT(*) = (SELECT MAX(draws) FROM (SELECT COUNT(*) AS draws FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id)))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00' AND player_attributes.sprint_speed >= 97	SELECT DATETIME() - birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE STRFTIME('%Y', `date`) >= '2013' AND STRFTIME('%Y', `date`) <= '2015' AND sprint_speed >= 97)
0	SELECT league.name, count(match.id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY count(MATCH.id) DESC LIMIT 1	SELECT T2.name, COUNT(T1.league_id) AS match_count FROM Match T1 JOIN League T2 ON T1.league_id = T2.id GROUP BY T1.league_id HAVING match_count = (SELECT MAX(match_count) FROM (SELECT COUNT(league_id) AS match_count FROM Match GROUP BY league_id));
1	SELECT avg(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'	SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'
0	SELECT player_api_id FROM player_attributes WHERE substr(date, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1	SELECT DISTINCT p.player_api_id FROM Player_Attributes AS p WHERE SUBSTR(p.date, 1, 4) = '2010' AND p.overall_rating = (SELECT MAX(pa.overall_rating) FROM Player_Attributes AS pa WHERE SUBSTR(pa.date, 1, 4) = '2010')
1	SELECT DISTINCT team_attributes.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed BETWEEN 51 AND 59	SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassing IS NOT NULL GROUP BY team.team_long_name	SELECT T4.team_long_name FROM team AS T4 WHERE T4.team_api_id IN (SELECT t3.team_api_id FROM Team_Attributes AS t3 WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > (SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y', t2.`date`) = '2012'))
0	SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.player_fifa_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'	SELECT CAST(COUNT(DISTINCT CASE WHEN t2.preferred_foot = 'left' THEN t1.id END) AS REAL) * 100 / COUNT(DISTINCT t1.id) percent FROM Player AS t1 LEFT JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992';
0	SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id GROUP BY league.name ORDER BY sum(MATCH.home_team_goal + MATCH.away_team_goal) DESC LIMIT 5	SELECT name, goals FROM (SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) as goals, rank() over (ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC) as rk FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.id) WHERE rk <= 5;
1	SELECT avg(player_attributes.long_shots) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'	SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY avg(player_attributes.heading_accuracy) DESC LIMIT 10	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC) as rk FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id) WHERE rk <= 10;
1	SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.date LIKE '2014%' AND team_attributes.buildupplaydribblingclass = 'Normal' GROUP BY team.team_long_name ORDER BY sum(team_attributes.chancecreationpassing) / count(team_attributes.id) DESC	SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t4.`date`, 1, 4) = '2014' AND t4.chanceCreationPassing < (SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC;
1	SELECT league.name FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2009/2010' GROUP BY league.name HAVING avg(match.home_team_goal) > avg(match.away_team_goal)	SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.id HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0
1	SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers'	SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE substr(player.birthday, 1, 4) = '1970' AND substr(player.birthday, 6, 2) = '10'	SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'
1	SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Franco Zennaro'	SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'
1	SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag'	SELECT T2.buildUpPlayPositioningClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag';
1	SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francois Affolter' AND player_attributes.date = '2014-09-18 00:00:00'	SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'
1	SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Gabriel Tamas' AND strftime('%Y', player_attributes.date) = '2011'	SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'
0	SELECT sum(CASE WHEN league.name = 'Scotland Premier League' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016'	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'
0	SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player ORDER BY birthday DESC LIMIT 1 )	SELECT preferred_foot FROM (SELECT t2.preferred_foot, rank() over (ORDER BY t1.birthday DESC) as rk FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id) WHERE rk = 1
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes))
0	SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left'	SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'
1	SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky'	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_attributes WHERE chanceCreationPassingClass = 'Risky')
1	SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'David Wilson'	SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'
0	SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1	SELECT birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY overall_rating DESC) as rk FROM Player_Attributes) WHERE rk = 1)
1	SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands'	SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'
0	SELECT avg(match.home_team_goal) FROM country INNER JOIN league ON country.id = league.country_id INNER JOIN MATCH ON league.id = MATCH.league_id WHERE country.name = 'Poland' AND MATCH.season = '2010/2011'	SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1	SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1
1	SELECT player_name FROM player WHERE height > 180	SELECT player_name FROM Player WHERE height > 180
1	SELECT count(id) FROM player WHERE strftime('%Y', birthday) > '1990'	SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'
0	SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name LIKE 'Adam%' AND player.weight > 170	SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name = 'Adam'
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010' AND player_attributes.overall_rating > 80	SELECT player_name FROM Player AS t1 WHERE t1.player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010')
1	SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'	SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left'	SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast'	SELECT t1.team_long_name FROM Team AS t1 WHERE team_api_id IN (SELECT t2.team_api_id FROM Team_Attributes AS t2 WHERE t2.buildUpPlaySpeedClass = 'Fast')
1	SELECT team_attributes.buildupplaypassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB'	SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'
1	SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlayPassing > 70);
1	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player_attributes.date) BETWEEN '2010' AND '2015' AND player.height > 170	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'
1	SELECT player_name FROM player ORDER BY height ASC LIMIT 1	SELECT player_name FROM player ORDER BY height ASC LIMIT 1
1	SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A'	SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'
1	SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32	SELECT T.team_short_name FROM Team T WHERE team_api_id IN (SELECT TA.team_api_id FROM Team_Attributes TA WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32)
1	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Doran'	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'
1	SELECT count(match.id) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', MATCH.date) BETWEEN '2008-08' AND '2008-10'	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'
0	SELECT team.team_short_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id WHERE MATCH.home_team_goal = 10	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT home_team_api_id FROM Match WHERE home_team_goal = 10);
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.balance = 61 AND player_attributes.potential = 61	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = 61 AND balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61));
0	SELECT sum(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control ELSE 0 END) - sum(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id	SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
1	SELECT team_long_name FROM team WHERE team_short_name = 'GEN'	SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
1	SELECT player_name FROM player WHERE player_name = 'Abdelaziz Barrada' OR player_name = 'Aaron Lennon' ORDER BY birthday LIMIT 1	SELECT player_name FROM (SELECT player_name, rank() over (ORDER BY birthday ASC) as rk FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')) WHERE rk = 1
0	SELECT player_name FROM player ORDER BY height DESC LIMIT 1	SELECT player_name FROM (SELECT player_name, rank() over (ORDER BY height DESC) as rk FROM Player) WHERE rk = 1
0	SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low'	SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
1	SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League'	SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'
1	SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany'	SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
0	SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986' AND player_attributes.defensive_work_rate = 'high'	SELECT COUNT(DISTINCT t1.player_api_id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y', t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1	SELECT player_name FROM Player WHERE Player.player_api_id IN (SELECT player_api_id FROM (SELECT P.player_api_id, rank() over (ORDER BY PA.crossing DESC) as rk FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')) WHERE rk = 1)
1	SELECT player_attributes.heading_accuracy FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk'	SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'
0	SELECT count(player_attributes.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70	SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE volleys > 70 AND dribbling > 70);
0	SELECT sum(CASE WHEN country.name = 'Belgium' THEN 1 ELSE 0 END) FROM `match` INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2008/2009'	SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'
0	SELECT player_attributes.long_passing FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.birthday ASC LIMIT 1	SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)
0	SELECT sum(CASE WHEN league.name = 'Belgium Jupiler League' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE strftime('%Y', MATCH.date) = '2009' AND strftime('%m', MATCH.date) = '04'	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'
0	SELECT league.name FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE MATCH.season = '2008/2009' GROUP BY league.name ORDER BY count(league.name) DESC LIMIT 1	SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.id HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))
0	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986'	SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'
1	SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id	SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
1	SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Heart of Midlothian'	SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'
1	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino'	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'
1	SELECT sum(player_attributes.crossing) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Lennox'	SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'
1	SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1	SELECT chanceCreationPassing, chanceCreationPassingClass FROM (SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass, rank() over (ORDER BY t2.chanceCreationPassing DESC) as rk FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax') WHERE rk = 1
1	SELECT player_attributes.preferred_foot FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo'	SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'
0	SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Dorlan Pabon' ORDER BY player_attributes.overall_rating DESC LIMIT 1	SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'
0	SELECT avg(match.away_team_goal) FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id WHERE team.team_long_name = 'Parma'	SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM "Match" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND strftime('%Y-%m-%d', player.birthday) = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY t1.birthday ASC) as rk FROM Player AS t1 WHERE t1.player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77)) WHERE rk = 1;
1	SELECT player_attributes.overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04 00:00:00'	SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'
1	SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30'	SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'
1	SELECT player_attributes.attacking_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01 00:00:00'	SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'
1	SELECT player_attributes.defensive_work_rate FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Berigaud' AND player_attributes.date = '2013-02-22 00:00:00'	SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'
1	SELECT player_attributes.date FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1	SELECT date FROM (SELECT T2.date, rank() over (ORDER BY t2.crossing DESC, t2.date ASC) as rk FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Constant') WHERE rk = 1
1	SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.`date` = '2012-02-22'	SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'
1	SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND team_attributes.`date` = '2015-09-10'	SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'
1	SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'FC Lorient' AND team_attributes.`date` = '2010-02-22'	SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'
1	SELECT team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.`date` = '2013-09-20'	SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'
1	SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.`date` = '2010-02-22'	SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'
1	SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.`date` = '2015-09-10'	SELECT T2.defenceAggressionClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'
0	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'
1	SELECT cast((sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) - sum(CASE WHEN player.player_name = 'Jordan Bowery' THEN player_attributes.overall_rating ELSE 0 END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Landon Donovan' THEN player_attributes.overall_rating ELSE 0 END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date = '2013-07-12'	SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'
0	SELECT player_name FROM player ORDER BY height DESC LIMIT 5	SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1
0	SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10	SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY weight DESC) as rk FROM Player) WHERE rk <= 10;
0	SELECT player_name FROM player WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', birthday) > 35	SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 10	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high'	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high');
1	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player.birthday ASC LIMIT 1	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY t1.birthday ASC) as rk FROM Player AS t1 WHERE player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE t2.finishing = 1)) WHERE rk = 1
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow'	SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Slow');
1	SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe'	SELECT t1.team_short_name FROM Team AS t1 WHERE T1.team_api_id IN (SELECT T2.team_api_id FROM Team_Attributes AS t2 WHERE t2.chanceCreationPassingClass = 'Safe')
0	SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3	SELECT player_name FROM Player WHERE player_name IN (SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3) and height > 180 ORDER BY player_name
1	SELECT count(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'	SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'
1	SELECT sum(CASE WHEN id = 6 THEN jumping ELSE 0 END) - sum(CASE WHEN id = 23 THEN jumping ELSE 0 END) FROM player_attributes	SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1
0	SELECT player_attributes.player_api_id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'right' ORDER BY player_attributes.potential ASC LIMIT 3	SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY min(potential) ASC ) as rk FROM Player_Attributes WHERE preferred_foot = 'right' GROUP BY player_api_id) WHERE rk <= 5
0	SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = ( SELECT max(crossing) FROM player_attributes )	SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
0	SELECT cast(sum(iif(stamina > 80 AND strength > 80, 1, 0)) AS REAL) * 100 / count(id) FROM player_attributes	SELECT CAST(COUNT(DISTINCT CASE WHEN strength > 80 AND stamina > 80 THEN player_api_id END) AS REAL) * 100 / (SELECT COUNT(*) FROM Player) FROM Player_Attributes t;
1	SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa'	SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )
0	SELECT match.home_team_goal, match.away_team_goal FROM `match` INNER JOIN league ON match.league_id = league.id WHERE match.date LIKE '2008-09-24%'	SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'
1	SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Alexis Blin'	SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )
1	SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'	SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'
0	SELECT sum(CASE WHEN match.season = '2015/2016' THEN 1 ELSE 0 END) FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Italian Serie A'	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'
0	SELECT match.home_team_goal FROM league INNER JOIN MATCH ON league.id = MATCH.league_id WHERE league.name = 'Netherlands Eredivisie' ORDER BY MATCH.home_team_goal DESC LIMIT 1	SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'
0	SELECT player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1	SELECT T2.finishing, T2.curve FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)
0	SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.home_team_api_id OR team.team_api_id = MATCH.away_team_api_id WHERE MATCH.season = '2015/2016' GROUP BY team.team_long_name ORDER BY count(team.team_long_name) DESC LIMIT 1	SELECT name FROM (SELECT t1.name, rank() over (ORDER BY COUNT(t2.id) DESC) as rk FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.id) WHERE rk <= 4
0	SELECT team.team_long_name FROM team INNER JOIN MATCH ON team.team_api_id = MATCH.away_team_api_id ORDER BY MATCH.away_team_goal DESC LIMIT 1	SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT away_team_api_id FROM Match WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM Match));
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));
0	SELECT cast(sum(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id	SELECT (COUNT(DISTINCT Player.player_api_id) * 100.0 / (SELECT COUNT(*) FROM Player)) AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70;
0	SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id), cast(sum(CASE WHEN admission = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE sex = 'M'	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'
0	SELECT cast(sum(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) > '1930'	SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'
1	SELECT cast(sum(CASE WHEN admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'
0	SELECT cast(sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE'	SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
1	SELECT patient.diagnosis, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609'	SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
1	SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 163109	SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109
0	SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > 500	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
0	SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.rvvt = '+'	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
0	SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1937' AND laboratory.`t-cho` >= 250	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250
0	SELECT patient.id, patient.sex, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb < 3.5	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
0	SELECT cast(sum(CASE WHEN laboratory.tp < 6 OR laboratory.tp > 8 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'	SELECT (COUNT(DISTINCT Patient.ID) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);
1	SELECT avg(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND patient.admission = '+'	SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'
1	SELECT count(id) FROM patient WHERE admission = '-' AND sex = 'F' AND strftime('%Y', description) = '1997'	SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'
0	SELECT strftime('%Y', birthday) - strftime('%Y', `first date`) AS age FROM patient ORDER BY `first date` LIMIT 1	SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
0	SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE strftime('%Y', examination.`examination date`) = '1997' AND patient.sex = 'F' AND examination.thrombosis = 1	SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.SEX = 'F' AND strftime('%Y', T1.`Examination Date`) = '1997';
0	SELECT max(strftime('%Y', birthday)) - min(strftime('%Y', birthday)) FROM patient WHERE tg >= 200	SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200
0	SELECT examination.symptoms, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id ORDER BY patient.birthday LIMIT 1	SELECT Symptoms, Diagnosis FROM (SELECT T2.Symptoms, T1.Diagnosis, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL) WHERE rk = 1;
1	SELECT cast(count(laboratory.id) AS REAL) / 12 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.`date` BETWEEN '1998-01-01' AND '1998-12-31'	SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'
0	SELECT laboratory.date, strftime('%Y', patient.birthday) - strftime('%Y', patient.`first date`) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday LIMIT 1	SELECT L.Date , (strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday)) AS InitialAge FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND P.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE Diagnosis = 'SJS');
0	SELECT cast(sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0'	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN T1.ID END) AS REAL) / COUNT(DISTINCT CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN T1.ID END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', examination.`examination date`) - strftime('%Y', patient.`first date`) < 1	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) < 18 AND examination.`examination date` BETWEEN '1990-01-01' AND '1993-12-31'	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND (strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.Birthday)) < 18;
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-bil` > 2.0	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'
0	SELECT diagnosis FROM examination WHERE `examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY diagnosis ORDER BY count(diagnosis) DESC LIMIT 1	SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis HAVING COUNT(Diagnosis) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Diagnosis) AS Cnt FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis) T1);
0	SELECT avg(cast(strftime('%Y', patient.`first date`) AS INT) - cast(strftime('%Y', birthday) AS INT)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` = '1991-10-01'	SELECT AVG(1999 - CAST(strftime('%Y', Birthday) AS INTEGER)) AS Average_Age FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date >= '1991-10-01' AND Date <= '1991-10-31');
0	SELECT patient.`first date`, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.hgb DESC LIMIT 1	SELECT STRFTIME('%Y', T.Date) - STRFTIME('%Y', Patient.Birthday), Patient.Diagnosis FROM (SELECT Date, ID FROM Laboratory WHERE HGB = (SELECT MAX(HGB) FROM Laboratory)) AS T JOIN Patient ON T.ID = Patient.ID
1	SELECT ana FROM examination WHERE `examination date` = '1996-12-02' AND id = 3605340	SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
1	SELECT `t-cho` FROM laboratory WHERE id = 2927464 AND `date` = '1995-09-04'	SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
0	SELECT sex FROM patient WHERE diagnosis = 'AORTITIS'	SELECT SEX FROM (SELECT SEX, rank() over (ORDER BY `First Date` ASC) as rk FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL) WHERE rk = 1
1	SELECT examination.`acl igm` FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.diagnosis = 'SLE' AND patient.description = '1993-11-12'	SELECT `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'
1	SELECT patient.sex FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9	SELECT T1.SEX FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12')
1	SELECT strftime('%Y', patient.birthday) - strftime('%Y', laboratory.`date`) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.`date` = '1991-10-21'	SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.`first date` = '1991-06-13' AND patient.diagnosis = 'SJS' AND laboratory.date LIKE '1991%'	SELECT COUNT(*) FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS') AND STRFTIME('%Y', Date) = '1995' GROUP BY ID
0	SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1997-01-27' AND patient.diagnosis = 'SLE'	SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE') AND T2.`Examination Date` = T1.`First Date`
1	SELECT examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27'	SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'
1	SELECT cast(sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) - sum(CASE WHEN laboratory.date LIKE '1981-12%' THEN laboratory.`t-cho` ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN laboratory.date LIKE '1981-11%' THEN laboratory.`t-cho` ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1959-02-18'	SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'
0	SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.description) BETWEEN '1997' AND '1998' AND patient.diagnosis = 'BEHCET'	SELECT DISTINCT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alp < 4	SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4
0	SELECT count(id) FROM patient WHERE sex = 'F' AND strftime('%Y', birthday) = '1964' AND admission = '+'	SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'
0	SELECT cast(count(examination.id) AS REAL) * (examination.`acl igm` + examination.`acl igm`) * 0.2 FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S'	SELECT COUNT(DISTINCT ID) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')
0	SELECT cast(sum(CASE WHEN `u-pro` > 0 AND `u-pro` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM laboratory WHERE ua <= 6.5	SELECT CAST(COUNT(DISTINCT CASE WHEN UA <= 6.5 THEN ID END) AS REAL) * 100 / COUNT(DISTINCT ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30
0	SELECT cast(sum(CASE WHEN patient.diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1981' AND patient.sex = 'M'	SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'
1	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1991-10%' AND laboratory.`t-bil` < 2 AND patient.admission = '-'	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31' AND examination.`ana pattern` != 'P'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'
1	SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123	SELECT T1.SEX FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Examination AS T2 INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123)
0	SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND patient.diagnosis = 'SLE' AND laboratory.plt > 400	SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'
0	SELECT symptoms FROM examination WHERE diagnosis = 'SLE' GROUP BY symptoms ORDER BY count(symptoms) DESC LIMIT 1	SELECT Symptoms FROM (SELECT Symptoms, rank() over ( ORDER BY COUNT(Symptoms) DESC ) as rk FROM (SELECT DISTINCT ID, Symptoms FROM Examination WHERE Diagnosis = 'SLE') GROUP BY Symptoms) WHERE rk = 1
0	SELECT `first date`, diagnosis FROM patient WHERE id = 48473	SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;
1	SELECT count(id) FROM patient WHERE diagnosis = 'APS' AND sex = 'F'	SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', laboratory.`date`) = '1997' AND laboratory.tp BETWEEN 6 AND 8.5	SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'
0	SELECT cast(sum(CASE WHEN diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / count(id) FROM examination WHERE symptoms = 'thrombocytopenia'	SELECT CAST(COUNT(CASE WHEN Diagnosis = 'SLE' THEN ID END) AS REAL) * 100 / COUNT(DISTINCT ID) FROM Examination WHERE Symptoms = 'thrombocytopenia';
0	SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.birthday) = '1980' AND patient.diagnosis = 'RA'	SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND patient.admission = '-' AND examination.diagnosis = 'BEHCET'	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.Admission = '-' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T2.Diagnosis = 'Behcet';
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5;
0	SELECT strftime('%J', examination.`examination date`) - strftime('%J', patient.`first date`) AS days FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298	SELECT julianday(E.`Examination Date`) - julianday(P.`First Date`) AS DaysBetween FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 821298 ORDER BY E.`Examination Date` LIMIT 1
0	SELECT laboratory.ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266 AND (laboratory.ua > 8.0 OR laboratory.ua > 6.5)	SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
1	SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 48473 AND laboratory.got >= 60	SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
0	SELECT patient.sex, patient.birthday, laboratory.date FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', laboratory.`date`) = '1994' AND laboratory.got < 60	SELECT T1.SEX, T1.Birthday FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994')
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
0	SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt > 60 ORDER BY patient.birthday ASC	SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
1	SELECT avg(ldh) FROM laboratory WHERE ldh < 500	SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
0	SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800
0	SELECT patient.admission FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE alp < 300 AND patient.admission IN ('+', '-')	SELECT T1.Admission FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.ALP < 300)
0	SELECT patient.id, laboratory.alp < 300 FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1982-04-01'	SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'
0	SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tp < 6.0	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
0	SELECT sum(CASE WHEN laboratory.tp > 8.5 THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'	SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb < 3.5 OR laboratory.alb > 5.5) ORDER BY patient.birthday DESC	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
0	SELECT CASE WHEN alb BETWEEN 3.5 AND 5.5 THEN 'YES' ELSE 'NO' END FROM patient WHERE strftime('%Y', birthday) = '1982'	SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'
0	SELECT cast(sum(CASE WHEN laboratory.ua > 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F'	SELECT (COUNT(DISTINCT T1.ID) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.UA > 6.5;
0	SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE (laboratory.ua < 8.0 AND patient.sex = 'M') OR (laboratory.ua < 6.5 AND patient.sex = 'F')	SELECT avg(UA) FROM (SELECT ID, rank() over (PARTITION BY ID ORDER BY Date DESC ) as rk, UA FROM Laboratory WHERE ID IN (SELECT L.ID FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5))) WHERE rk = 1
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un = 29	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'RA' AND laboratory.un < 30	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.cre >= 1.5	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5;
0	SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) > sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre >= 1.5	SELECT CASE WHEN COUNT(DISTINCT CASE WHEN T1.SEX = 'M' THEN T1.ID END) > SUM(DISTINCT CASE WHEN T1.SEX = 'M' THEN T1.ID END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5;
0	SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id ORDER BY laboratory.`t-bil` DESC LIMIT 1	SELECT ID, SEX, Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` IS NOT NULL));
0	SELECT patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 2	SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID
0	SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1	SELECT DISTINCT ID, `T-CHO` FROM (SELECT T1.ID, T2.`T-CHO`, rank() over (ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID) WHERE rk = 1
0	SELECT avg(strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-cho` >= 250	SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.`T-CHO` >= 250) AND T1.SEX = 'M'
0	SELECT patient.id, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg > 100	SELECT DISTINCT T2.ID, T2.Diagnosis FROM Laboratory T1 INNER JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.TG > 300;
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 50	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50
1	SELECT DISTINCT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.cpk < 250	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956' AND patient.sex = 'M' AND laboratory.cpk >= 250	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250
0	SELECT patient.id, patient.sex, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250	SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250
0	SELECT patient.id, laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.`first date`) = '1991' AND laboratory.glu < 180	SELECT T1.ID, T2.GLU FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Description) = '1991' AND T2.GLU < 180;
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9.0	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC
0	SELECT patient.diagnosis, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 3.5	SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
0	SELECT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) >= 50 AND laboratory.rbc BETWEEN 3.5 AND 6.0	SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50
0	SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.hgb < 10	SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'
0	SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SLE' AND laboratory.hgb BETWEEN 10 AND 17 ORDER BY patient.birthday LIMIT 1	SELECT DISTINCT ID, SEX FROM (SELECT T1.ID, T1.SEX, rank() over ( ORDER BY T1.Birthday ASC ) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17) WHERE rk = 1
0	SELECT patient.id, strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct >= 52 GROUP BY patient.id HAVING count(laboratory.id) > 2	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )
1	SELECT avg(hct) FROM laboratory WHERE date LIKE '1991%' AND hct < 29	SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'
0	SELECT sum(CASE WHEN plt < 100 THEN 1 ELSE 0 END), sum(CASE WHEN plt > 400 THEN 1 ELSE 0 END) FROM laboratory	SELECT (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT <= 100) - (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT >= 400) AS Difference
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`date` LIKE '1984%' AND laboratory.plt BETWEEN 100 AND 400	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'
0	SELECT cast(sum(CASE WHEN patient.sex = 'F' AND laboratory.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.SEX = 'F' THEN T1.ID END) AS REAL) * 100 / COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55 AND T2.PT >= 14
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) > '1992' AND laboratory.pt < 14	SELECT DISTINCT T1.ID FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) > '1992' AND T2.PT < 14;
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45	SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg <= 150 OR laboratory.fg >= 450)	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'
0	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday > '1980-01-01' AND laboratory.fg BETWEEN 150 AND 450	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'
0	SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`u-pro` > 30	SELECT T1.Diagnosis FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.`U-PRO` >= 30)
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` BETWEEN 0 AND 30 AND patient.diagnosis = 'SLE'	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms = 'Abortion' AND laboratory.igg < 900	SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.symptoms IS NOT NULL AND laboratory.igg BETWEEN 900 AND 2000	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
0	SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA >= 80 AND IGA <= 500));
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.`first date`) >= '1990' AND laboratory.iga BETWEEN 80 AND 500	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND strftime('%Y', T1.`First Date`) >= '1990';
0	SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.igm NOT BETWEEN 40 AND 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1	SELECT Diagnosis FROM (SELECT T1.Diagnosis, rank() over (ORDER BY COUNT(T1.Diagnosis) DESC ) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.IGM <= 40 OR T2.IGM >= 400) GROUP BY T1.Diagnosis) WHERE rk = 1;
1	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.crp IN ('+', '-') AND patient.description IS NULL	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL;
0	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.crp NOT IN ('+-', '-') AND laboratory.crp >= 1.0 AND strftime('%Y', 'now') - strftime('%Y', patient.birthday) < 18	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ra IN ('-', '+-') AND laboratory.kct = '+'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'
0	SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) > '1995' AND laboratory.ra IN ('-', '+')	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE RA IN ('-', '+-')) AND Birthday > '1985-01-01';
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', patient.birthday) > 60	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND examination.thrombosis = 0	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0
1	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P'	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'
0	SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.hct NOT BETWEEN 29 AND 52 ORDER BY laboratory.`acl iga` DESC LIMIT 1	SELECT DISTINCT ID FROM (SELECT T1.ID, rank() over (ORDER BY T2.`aCL IgA` DESC) as rk FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29)) WHERE rk = 1;
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'APS' AND laboratory.c4 > 10	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp IN ('-', '+-') AND patient.admission = '+'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP IN ('-', '+-') AND T1.Admission = '+'
0	SELECT birthday FROM patient WHERE rnp != '-' ORDER BY birthday DESC LIMIT 1	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.RNP NOT IN ('-', '+-'))) WHERE rk = 1
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 1	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 0
0	SELECT id FROM patient WHERE birthday IN ( SELECT min(birthday) FROM patient ) LIMIT 3	SELECT ID FROM (SELECT ID, rank() over ( ORDER BY Birthday DESC ) AS RK FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('negative', '0'))) WHERE rk <= 3
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND examination.`examination date` >= '1997-01-01'	SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0');
1	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.sc170 IN ('-', '+-') AND patient.sex = 'M' AND examination.symptoms = 'vertigo'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa IN ('-', '++') AND strftime('%Y', patient.`first date`) < '1990'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa NOT IN ('-', '+') ORDER BY patient.`first date` ASC LIMIT 1	SELECT DISTINCT ID FROM (SELECT T1.ID, rank() over (ORDER BY T1.`First Date` ASC) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0')) WHERE rk = 1
0	SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN ('-', '+-') AND examination.diagnosis = 'SLE'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'
0	SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms IS NOT NULL AND laboratory.ssb IN ('-', '+-')	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('negative', '0') AND T2.Symptoms IS NOT NULL;
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.centromea IN ('-', '+') AND laboratory.ssa IN ('-', '+') AND patient.sex = 'M'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'
0	SELECT DISTINCT examination.diagnosis FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.dna >= 8	SELECT T1.Diagnosis FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.DNA >= 8)
1	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.dna < 8 AND patient.description IS NULL	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`dna-ii` < 8 AND patient.admission = '+'	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Admission = '+';
0	SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'SLE'	SELECT COUNT(DISTINCT CASE WHEN T1.Diagnosis = 'SLE' THEN T1.ID END) * 100.0/ COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60;
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.got < 60	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60;
0	SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60 ORDER BY patient.birthday LIMIT 1	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GOT >= 60)) WHERE rk = 1;
0	SELECT patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3	SELECT Birthday FROM (SELECT T2.Birthday, rank() over (ORDER BY MAX(T1.GPT) DESC) as rk FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.GPT < 60 GROUP BY T1.ID, T2.Birthday) WHERE rk <= 3
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND patient.sex = 'M'	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
0	SELECT patient.`first date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1	SELECT T1.`First Date` FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500));
0	SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh >= 500 ORDER BY patient.`first date` DESC LIMIT 1	SELECT `First Date` FROM (SELECT T1.`First Date`, rank() over (ORDER BY T1.`First Date` DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.LDH >= 500)) WHERE rk = 1
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp >= 300 AND patient.admission = '+'	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.ALP >= 300 AND T2.Admission = '+';
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300;
0	SELECT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.tp < 6	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TP < 6.0);
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6 AND 8	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5;
0	SELECT laboratory.`date` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5 ORDER BY laboratory.alb DESC LIMIT 1	SELECT Date FROM Laboratory WHERE ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5)
0	SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5
0	SELECT examination.`acl igg`, examination.`acl igm`, examination.`acl iga` FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND laboratory.ua > 6.50 ORDER BY laboratory.ua DESC LIMIT 1	SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID IN (SELECT Patient.ID FROM Laboratory JOIN Patient on Laboratory.ID = Patient.ID WHERE UA > 6.5 AND SEX = 'F' AND UA = (SELECT MAX(UA) FROM Laboratory JOIN Patient on Laboratory.ID = Patient.ID WHERE UA > 6.5 AND SEX = 'F'))
0	SELECT max(examination.ana) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.cre < 1.5	SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1
0	SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.cre < 1.5 ORDER BY laboratory.iga DESC LIMIT 1	SELECT DISTINCT ID FROM (SELECT T2.ID, rank() over ( ORDER BY T2.`aCL IgA` DESC ) as rk FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5) WHERE rk = 1
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` >= 2 AND examination.`ana pattern` LIKE '%P%'	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 AND T2.`ANA Pattern` LIKE '%P%';
0	SELECT examination.ana FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-bil` < 2 ORDER BY laboratory.`t-bil` DESC LIMIT 1	SELECT E.ANA FROM Examination E JOIN (SELECT ID, MAX(`T-BIL`) AS MaxBil FROM Laboratory WHERE `T-BIL` < 2.0 GROUP BY ID HAVING MaxBil = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)) L ON E.ID = L.ID;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-cho` > 250 AND examination.kct = '-'	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` >= 250 AND T2.KCT = '-';
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.`t-cho` < 250 AND examination.`ana pattern` = 'P'	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P';
0	SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.tg < 200 AND examination.symptoms IS NOT NULL	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL;
0	SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200 ORDER BY laboratory.tg DESC LIMIT 1	SELECT P.Diagnosis FROM Patient P WHERE P.ID IN (SELECT L.ID FROM Laboratory L WHERE L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200));
0	SELECT patient.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 250	SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+');
0	SELECT min(birthday) FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE glu > 180 )	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday ASC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GLU > 180)) WHERE rk = 1
0	SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.glu < 180 AND examination.thrombosis = 0	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc BETWEEN 3.5 AND 9 AND patient.admission = '+'	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc BETWEEN 3.5 AND 6.0 AND patient.admission = '-'	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis IS NOT NULL AND examination.plt BETWEEN 100 AND 399	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;
0	SELECT laboratory.plt, patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'MCTD' AND laboratory.plt BETWEEN 100 AND 400	SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400
1	SELECT avg(laboratory.pt) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt < 14	SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14	SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
1	SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering'	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department'	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'
0	SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'	SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer';
0	SELECT member.phone FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'	SELECT phone FROM member WHERE member_id IN (SELECT T2.link_to_member FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer')
0	SELECT count(member.member_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium'	SELECT COUNT(DISTINCT T3.member_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium';
0	SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY event.event_name ORDER BY count(attendance.link_to_event) DESC LIMIT 1	SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery);
1	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'	SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'
1	SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'	SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T2.link_to_event = T3.event_id);
1	SELECT count(*) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' AND member.first_name = 'Sacha' AND member.last_name = 'Harrison'	SELECT COUNT(DISTINCT T3.event_id) FROM member T1 INNER JOIN attendance T2 ON T1.member_id = T2.link_to_member INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019';
0	SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING count(event.event_id) > 10	SELECT COUNT(DISTINCT event.event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 10;
0	SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING count(attendance.link_to_member) > 20	SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'Fundraiser' GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20;
0	SELECT cast(count(attendance.link_to_member) AS REAL) / count(DISTINCT event.event_name) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2020' AND event.type = 'Meeting'	SELECT AVG(total_attendance) FROM (SELECT COUNT(T1.link_to_event) AS total_attendance FROM event T2 LEFT JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)
0	SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1	SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
0	SELECT member.first_name, member.last_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud'	SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.member_id IN (SELECT T2.link_to_member FROM attendance AS T2 INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud');
1	SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies'	SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
1	SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sherri' AND member.last_name = 'Ramsey'	SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
1	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'	SELECT DISTINCT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
1	SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President'	SELECT SUM(T2.amount) FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';
0	SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Food'	SELECT T2.spent FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food'
1	SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'	SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois'	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
0	SELECT sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Meeting' AND budget.category = 'Advertisement'	SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement'
0	SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Pierce' AND member.last_name = 'Guidi'	SELECT DISTINCT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'
1	SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'October Speaker'	SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'
0	SELECT sum(CASE WHEN expense.approved = 'true' THEN 1 ELSE 0 END) FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'	SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'
1	SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE strftime('%Y-%m', expense.expense_date) IN ('2019-09', '2019-10') AND member.first_name = 'Elijah' AND member.last_name = 'Allen'	SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')
1	SELECT sum(CASE WHEN strftime('%Y', event.event_date) = '2019' THEN budget.spent ELSE 0 END) - sum(CASE WHEN strftime('%Y', event.event_date) = '2020' THEN budget.spent ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event	SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
1	SELECT LOCATION FROM event WHERE event_name = 'Spring Budget Review'	SELECT location FROM event WHERE event_name = 'Spring Budget Review'
1	SELECT cost FROM expense WHERE expense_date = '2019-09-04' AND expense_description = 'Posters'	SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
0	SELECT budget.remaining FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1	SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )
1	SELECT notes FROM income WHERE date_received = '2019-09-14' AND source = 'Fundraising'	SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
1	SELECT count(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'	SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'
1	SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'	SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
1	SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Adela' AND member.last_name = 'O''Gallagher'	SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'
0	SELECT sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_name = 'November Meeting'	SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0
1	SELECT sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'September Speaker'	SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'
1	SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_date = '2019-08-20' AND expense.expense_description = 'Post Cards, Posters'	SELECT event_status FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-08-20')
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason'	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
0	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large'	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
1	SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson'	SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
1	SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'	SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
1	SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'	SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
1	SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'Dues'	SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'
0	SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1	SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE source = 'Dues' AND date_received = (SELECT min(date_received) FROM income WHERE source = 'Dues'))
0	SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / sum(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement'	SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'
1	SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'November Speaker'	SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
1	SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Pizza'	SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
1	SELECT count(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'	SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'
1	SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'	SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
1	SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'	SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
0	SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id ORDER BY budget.remaining ASC LIMIT 1	SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.remaining = (SELECT MIN(remaining) FROM budget)
0	SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'October Meeting'	SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'
0	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1	SELECT college FROM (SELECT college, COUNT(member_id) AS member_count FROM major JOIN member ON major_id = link_to_major GROUP BY college) WHERE member_count = (SELECT MAX(member_count) FROM (SELECT COUNT(member_id) AS member_count FROM major JOIN member ON major_id = link_to_major GROUP BY college));
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount DESC LIMIT 1	SELECT T2.event_name FROM event T2 WHERE T2.event_id IN (SELECT T1.link_to_event FROM budget T1 GROUP BY T1.link_to_event HAVING SUM(T1.amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM budget GROUP BY link_to_event)))
1	SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position = 'Vice President'	SELECT E.expense_description FROM expense E JOIN member M ON E.link_to_member = M.member_id WHERE M.position = 'Vice President';
0	SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer'	SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer');
1	SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason'	SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'
1	SELECT count(*) FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.state = 'Maryland'	SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'
0	SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'	SELECT COUNT(DISTINCT link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';
1	SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education'	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'
0	SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1	SELECT event_name FROM (SELECT T2.event_name, rank() over (ORDER BY T1.spent / T1.amount DESC) as rk FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed') WHERE rk = 1
1	SELECT count(*) FROM member WHERE POSITION = 'President'	SELECT COUNT(member_id) FROM member WHERE position = 'President'
1	SELECT max(spent) FROM budget	SELECT MAX(spent) FROM budget
1	SELECT count(event_id) FROM event WHERE strftime('%Y', event_date) = '2020' AND TYPE = 'Meeting'	SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'
1	SELECT sum(spent) FROM budget WHERE category = 'Food'	SELECT SUM(spent) FROM budget WHERE category = 'Food'
0	SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.first_name, member.last_name HAVING count(attendance.link_to_event) > 7	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7
0	SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE event.event_name = 'Community Theater' AND major.major_name = 'Interior Design'	SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Interior Design' AND T2.member_id IN (SELECT T3.link_to_member FROM attendance AS T3 INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater')
1	SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
0	SELECT sum(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'	SELECT TOTAL(income.amount) FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
0	SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 40	SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE amount > 40);
0	SELECT sum(expense.cost) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.event_name = 'Yearly Kickoff'	SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'
0	SELECT member.first_name, member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Yearly Kickoff'	SELECT T4.first_name, T4.last_name FROM member AS T4 WHERE T4.member_id IN (SELECT T3.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff');
0	SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1	SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(T4.amount) FROM member AS T3 INNER JOIN income AS T4 ON T3.member_id = T4.link_to_member)
0	SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY expense.cost ASC LIMIT 1	SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM budget T2 JOIN expense T1 ON T2.budget_id = T1.link_to_budget WHERE T2.link_to_event = T3.event_id GROUP BY T2.link_to_event HAVING MIN(T1.cost) = (SELECT MIN(cost) FROM expense WHERE cost IS NOT NULL))
1	SELECT cast(sum(CASE WHEN event.event_name = 'Yearly Kickoff' THEN expense.cost ELSE 0 END) AS REAL) * 100 / sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id	SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
0	SELECT cast(sum(CASE WHEN major.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN major.major_name = 'Physics' THEN 1 ELSE 0 END) FROM member INNER JOIN major ON member.link_to_major = major.major_id	SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major JOIN member on major.major_id = member.link_to_major
0	SELECT source, max(amount) FROM income WHERE date_received LIKE '2019-09%' GROUP BY source	SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source) T2);
0	SELECT first_name, last_name, email FROM member WHERE POSITION = 'Student Club Secretary'	SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'	SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'
0	SELECT count(attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019' AND event.event_name = 'Community Theater'	SELECT COUNT(DISTINCT T2.link_to_member) FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND strftime('%Y', T1.event_date) = '2019';
0	SELECT count(attendance.link_to_event), major.major_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'	SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi' GROUP BY T2.member_id
0	SELECT avg(budget.spent) FROM budget INNER JOIN EVENT ON budget.link_to_event = EVENT.event_id WHERE EVENT.event_status = 'Closed' AND budget.category = 'Food'	SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1	SELECT T2.event_name FROM event T2, (SELECT link_to_event, MAX(spent) AS max_spent FROM budget WHERE category = 'Advertisement' GROUP BY link_to_event) T1 WHERE T2.event_id = T1.link_to_event AND T1.max_spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement');
0	SELECT attendance.link_to_member FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.first_name = 'Maya' AND member.last_name = 'Mclean'	SELECT CASE WHEN member_id IN (SELECT attendance.link_to_member FROM attendance INNER JOIN event ON link_to_event = event_id WHERE event_name = 'Women''s Soccer') THEN 'YES' ELSE 'NO' END AS result FROM (SELECT * FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean')
0	SELECT cast(sum(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE strftime('%Y', event.event_date) = '2019'	SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'
0	SELECT sum(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'	SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'
0	SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY count(t_shirt_size) DESC LIMIT 1	SELECT t_shirt_size FROM (SELECT t_shirt_size, rank() over (ORDER BY COUNT(t_shirt_size) DESC) as rk FROM member GROUP BY t_shirt_size) WHERE rk = 1;
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0	SELECT event_name FROM event WHERE event_id IN (SELECT event_id FROM (SELECT T1.event_id, rank() over (ORDER BY T2.remaining ASC) as rk FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0) WHERE rk = 1)
0	SELECT expense.expense_description, sum(expense.cost) FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'true' GROUP BY expense.expense_description	SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'
0	SELECT budget.amount, budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC	SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC
0	SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1	SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )
0	SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3	SELECT budget_id FROM (SELECT budget_id, rank() over (ORDER BY amount DESC) as rk FROM budget WHERE category = 'Advertisement') WHERE rk <= 3
1	SELECT sum(cost) FROM expense WHERE expense_description = 'Parking'	SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
1	SELECT sum(cost) FROM expense WHERE expense_date = '2019-08-20'	SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
0	SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v' GROUP BY member.first_name, member.last_name	SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'
1	SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'	SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
1	SELECT DISTINCT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'	SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'
0	SELECT member.zip FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost < 50	SELECT T1.zip FROM member AS T1 WHERE member_id IN (SELECT T2.link_to_member FROM expense AS T2 WHERE T2.cost < 50);
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'	SELECT T1.major_name FROM major AS T1 WHERE T1.major_id IN (SELECT T2.link_to_major FROM member AS T2 WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen')
1	SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business'	SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium'	SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'
0	SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30	SELECT T1.type FROM event AS T1 WHERE T1.event_id IN (SELECT T2.link_to_event FROM budget AS T2 WHERE T2.remaining > 30);
0	SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'	SELECT T1.type FROM event AS T1 WHERE T1.location = 'MU 215'
0	SELECT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_date = '2020-03-24T12:00:00'	SELECT T1.type FROM event AS T1 WHERE T1.event_date = '2020-03-24T12:00:00'
0	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'	SELECT T1.major_name FROM major AS T1 WHERE major_id IN (SELECT T2.link_to_major FROM member AS T2 WHERE T2.position = 'Vice President')
0	SELECT cast(sum(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Mathematics'	SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'
0	SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215'	SELECT T1.type FROM event AS T1 WHERE T1.location = 'MU 215'
1	SELECT count(income_id) FROM income WHERE amount = 50	SELECT COUNT(income_id) FROM income WHERE amount = 50
1	SELECT count(*) FROM member WHERE t_shirt_size = 'X-Large' AND POSITION = 'Member'	SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
1	SELECT count(major_id) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'	SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'
0	SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'	SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'
1	SELECT DISTINCT budget.category FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0	SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker';
0	SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member'	SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'
0	SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.' AND event.type = 'Social'	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')) AND type = 'Social' AND location = '900 E. Washington St.'
1	SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-09-10' AND expense.expense_description = 'Pizza'	SELECT T1.last_name, T1.position FROM member AS T1 WHERE member_id IN (SELECT T2.link_to_member FROM expense AS T2 WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza');
0	SELECT member.last_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women''s Soccer' AND member.position = 'Member'	SELECT last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance JOIN event on event_id = link_to_event WHERE event_name = 'Women''s Soccer') AND position = 'Member'
0	SELECT cast(sum(CASE WHEN income.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / count(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium'	SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'
0	SELECT DISTINCT state FROM zip_code WHERE TYPE = 'PO Box'	SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL
1	SELECT zip_code FROM zip_code WHERE state = 'Puerto Rico' AND county = 'San Juan Municipio' AND TYPE = 'PO Box'	SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
1	SELECT event_name FROM event WHERE event_date BETWEEN '2019-03-15' AND '2020-03-20' AND TYPE = 'Game' AND status = 'Closed'	SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
0	SELECT DISTINCT expense.link_to_budget FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.cost > 50	SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50
0	SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'	SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'
0	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy'	SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'
1	SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business'	SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
0	SELECT member.email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20	SELECT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' GROUP BY member_id HAVING SUM(T2.cost) > 20;
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'College of Education & Human Services' AND member.position = 'Member'	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name = 'education' AND T2.college = 'College of Education & Human Services'
0	SELECT cast(sum(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM budget	SELECT (COUNT(DISTINCT CASE WHEN B.remaining < 0 THEN link_to_event END) * 100.0 / (SELECT count(*) FROM event)) AS percentage_over_budget FROM budget B;
1	SELECT event_id, LOCATION, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'	SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'
1	SELECT expense_description FROM expense GROUP BY expense_description HAVING sum(cost) / count(expense_id) > 50	SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
1	SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'	SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
1	SELECT cast(sum(CASE WHEN TYPE = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(zip_code) FROM zip_code	SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code
0	SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0	SELECT event_name, location FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE remaining > 0);
0	SELECT event.event_name, event.event_date FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100	SELECT T1.event_name, T1.event_date FROM event AS T1 WHERE T1.event_id IN (SELECT T2.link_to_event FROM budget AS T2 INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100)
0	SELECT member.first_name, member.last_name, major.major_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE expense.cost > 100	SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.member_id IN (SELECT link_to_member FROM expense AS T3 WHERE T3.cost > 100)
0	SELECT zip_code.city, zip_code.county FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40	SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40
0	SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id GROUP BY member.first_name, member.last_name, expense.cost HAVING count(expense.expense_id) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1	SELECT member_id FROM (SELECT T2.member_id, rank() over (ORDER BY SUM(T1.cost) DESC) as rk FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1) WHERE rk = 1
0	SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'	SELECT SUM(T1.cost) / COUNT(DISTINCT T3.link_to_event) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 on T3.budget_id = T1.link_to_budget WHERE T2.position != 'Member';
0	SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND expense.cost < ( SELECT avg(cost) FROM expense WHERE category = 'Parking' )	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Parking' AND budget_id IN (SELECT link_to_budget FROM expense GROUP BY link_to_budget HAVING SUM(cost) < (SELECT SUM(cost) / COUNT(DISTINCT link_to_event) FROM budget JOIN expense ON budget_id = link_to_budget WHERE category = 'Parking')))
0	SELECT cast(sum(expense.cost) AS REAL) * 100 / count(event.event_id) FROM event INNER JOIN expense ON event.event_id = expense.link_to_budget WHERE event.type = 'Game'	SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
0	SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1	SELECT DISTINCT budget_id FROM (SELECT T2.budget_id, rank() over (ORDER BY T1.cost DESC) as rk FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies') WHERE rk = 1
0	SELECT member.first_name, member.last_name FROM expense INNER JOIN member ON expense.link_to_member = member.member_id ORDER BY expense.cost DESC LIMIT 5	WITH Total AS ( SELECT link_to_member, SUM(cost) AS total_spending FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ) SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN ( SELECT * FROM Total WHERE total_spending IN ( SELECT total_spending FROM Total ORDER BY total_spending DESC LIMIT 5 ) ) AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.total_spending DESC
0	SELECT member.first_name, member.last_name, member.phone FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.cost > ( SELECT avg(cost) FROM expense )	SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT DISTINCT link_to_member FROM expense group by link_to_member HAVING MIN(cost) > (SELECT AVG(cost) FROM expense))
0	SELECT cast(sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.position) - cast(sum(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.position) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member'	SELECT CAST( ( SUM( CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END ) - SUM( CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END ) ) AS REAL ) * 100 / COUNT(T1.member_id) AS diff FROM (SELECT * FROM member WHERE position = 'Member') AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip
1	SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke'	SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
0	SELECT member.first_name, member.last_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies'	SELECT T2.first_name, T2.last_name, SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies' GROUP BY T2.member_id
1	SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'	SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'
0	SELECT budget.category, budget.amount FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'January Speaker'	SELECT category, SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'January Speaker' ) GROUP BY category
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food'	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');
1	SELECT member.first_name, member.last_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09'	SELECT T1.first_name, T1.last_name, T2.amount FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09';
0	SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters'	SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');
1	SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary'	SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'
0	SELECT sum(spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'	SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_id
0	SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke'	SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
1	SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND member.zip = 28092	SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092
1	SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'	SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
1	SELECT cast(count(CASE WHEN currency = 'EUR' THEN customerid ELSE NULL END) AS REAL) / count(CASE WHEN currency = 'CZK' THEN customerid ELSE NULL END) FROM customers	SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers
0	SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.`date`) = '2012' AND customers.segment = 'LAM' ORDER BY YEARMONTH.consumption ASC LIMIT 1	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) ASC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT avg(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y', yearmonth.`date`) = '2013'	SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'
0	SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2011' AND customers.currency = 'CZK' ORDER BY YEARMONTH.consumption DESC LIMIT 1	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) DESC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y', yearmonth.`date`) = '2012' AND yearmonth.consumption < 30000	SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1
0	SELECT sum(CASE WHEN customers.currency = 'CZK' THEN YEARMONTH.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN YEARMONTH.consumption ELSE 0 END) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE strftime('%Y', YEARMONTH.date) = '2012'	SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'
0	SELECT strftime('%Y', `date`) FROM transactions_1k WHERE currency = 'EUR' GROUP BY strftime('%Y', `date`) ORDER BY count(strftime('%Y', `date`)) DESC LIMIT 1	SELECT year FROM (SELECT SUBSTRING(T2.Date, 1, 4) as year, rank() over ( ORDER BY SUM(T2.Consumption) DESC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4)) WHERE rk = 1
0	SELECT segment FROM customers GROUP BY segment ORDER BY sum(consumption) LIMIT 1	SELECT Segment FROM (SELECT T1.Segment, rank() over (ORDER BY SUM(T2.Consumption) ASC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment) WHERE rk = 1
0	SELECT substr(date, 1, 4) FROM yearmonth GROUP BY substr(date, 1, 4) ORDER BY sum(consumption) DESC LIMIT 1	SELECT year FROM (SELECT SUBSTR(T2.Date, 1, 4) as year, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4)) WHERE rk = 1
0	SELECT max(YEARMONTH.consumption) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'SME' AND substr(YEARMONTH.date, 1, 4) = '2013'	SELECT month FROM (SELECT SUBSTR(T2.Date, 5, 2) as month, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2)) WHERE rk = 1
0	SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END), sum(CASE WHEN customers.segment = 'KAM' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 4) = '2013'	SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID), CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID), CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = (SELECT MIN(Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'CZK') AND T2.Date BETWEEN 201301 AND 201312
0	SELECT customers.segment, cast(sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' GROUP BY customers.segment ORDER BY sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2013' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN substr(yearmonth.date, 1, 4) = '2012' THEN yearmonth.consumption ELSE 0 END) DESC LIMIT 1	WITH YearlyConsumption AS (SELECT T2.Segment, SUBSTR(T1.Date, 1, 4) AS Year, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND (SUBSTR(T1.Date, 1, 4) = '2012' OR SUBSTR(T1.Date, 1, 4) = '2013') GROUP BY T2.Segment, SUBSTR(T1.Date, 1, 4)) SELECT Y2013.Segment, ((Y2013.TotalConsumption - Y2012.TotalConsumption) / Y2013.TotalConsumption) * 100 AS PercentageIncrease FROM YearlyConsumption Y2013 JOIN YearlyConsumption Y2012 ON Y2013.Segment = Y2012.Segment WHERE Y2013.Year = '2013' AND Y2012.Year = '2012'
1	SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.customerid = 6 AND substr(yearmonth.date, 1, 4) = '2013'	SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'
0	SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.segment = 'Discount'	SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'
1	SELECT sum(CASE WHEN customerid = 7 THEN consumption ELSE 0 END) - sum(CASE WHEN customerid = 5 THEN consumption ELSE 0 END) FROM yearmonth WHERE date LIKE '201304%'	SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'
0	SELECT sum(CASE WHEN customers.segment = 'SME' THEN 1 ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'CZK'	SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'
0	SELECT customers.customerid FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.segment = 'LAM' AND customers.currency = 'EUR' AND strftime('%Y%m', YEARMONTH.date) = '201310' ORDER BY YEARMONTH.consumption DESC LIMIT 1	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT customers.customerid, sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1	SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID HAVING SUM(T2.Consumption) = (SELECT MAX(Total) FROM (SELECT SUM(T2.Consumption) AS Total FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID))
0	SELECT sum(yearmonth.consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' AND strftime('%Y-%m', yearmonth.date) = '201305'	SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'
0	SELECT cast(sum(iif(yearmonth.consumption > 46.73, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'LAM'	SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) AS Percentage FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Consumption > 46.73;
1	SELECT country, count(gasstationid) FROM gasstations WHERE segment = 'Value for money' GROUP BY country	SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country
0	SELECT cast(sum(iif(customers.segment = 'KAM', transactions_1k.amount, 0)) AS REAL) * 100 / sum(iif(customers.segment = 'KAM', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid	SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'
0	SELECT cast(sum(iif(yearmonth.consumption > 528.3, 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.date) = '201202'	SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
1	SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'	SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'
0	SELECT customerid FROM yearmonth WHERE date = '201309' GROUP BY customerid ORDER BY sum(consumption) DESC LIMIT 1	SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID HAVING SUM(Consumption) = (SELECT MAX(TotalConsumption) FROM (SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID) T1);
1	SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.date, 1, 7) = '201309' GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) LIMIT 1	SELECT Segment FROM (SELECT T2.Segment, rank() over ( ORDER BY SUM(T1.Consumption) ASC ) as rk FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment) WHERE rk = 1
0	SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'SME' AND strftime('%Y-%m', yearmonth.`date`) = '201206' ORDER BY yearmonth.consumption LIMIT 1	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over (ORDER BY SUM(T2.Consumption) ASC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID) WHERE rk = 1;
0	SELECT max(consumption) FROM yearmonth WHERE substr(date, 1, 4) = '2012'	SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1
0	SELECT sum(yearmonth.consumption) / 12 FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR'	SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1
1	SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN `yearmonth` ON substr(yearmonth.date, 1, 7) = substr(transactions_1k.`date`, 1, 7) WHERE substr(yearmonth.date, 5, 2) = '09'	SELECT Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Date >= '2013-09-01' AND Date < '2013-10-01')
1	SELECT DISTINCT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE substr(`date`, 1, 7) = '201306'	SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y', T1.Date) = '2013' AND strftime('%m', T1.Date) = '06'
0	SELECT DISTINCT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR'	SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'
0	SELECT DISTINCT products.description FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid INNER JOIN products ON products.productid = transactions_1k.productid WHERE customers.currency = 'EUR'	SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'
1	SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%'	SELECT AVG(Amount * Price) FROM transactions_1k WHERE Date >= '2012-01-01' AND Date < '2012-02-01';
0	SELECT count(YEARMONTH.customerid) FROM customers INNER JOIN YEARMONTH ON customers.customerid = YEARMONTH.customerid WHERE customers.currency = 'EUR' AND YEARMONTH.consumption > 1000	SELECT COUNT(DISTINCT T1.CustomerID) FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000;
0	SELECT DISTINCT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON products.productid = transactions_1k.productid WHERE gasstations.country = 'CZE'	SELECT Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE')
1	SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11	SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
1	SELECT count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
1	SELECT count(DISTINCT transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01'	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'
0	SELECT avg(transactions_1k.price) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE'	SELECT AVG(Amount * Price) AS AverageTotalPrice FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';
0	SELECT avg(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR'	SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'
0	SELECT customerid FROM transactions_1k WHERE `date` = '2012-08-25' GROUP BY customerid ORDER BY sum(amount) DESC LIMIT 1	SELECT CustomerID FROM (SELECT CustomerID, rank() over ( ORDER BY SUM(Amount * Price) DESC) as rk FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID) WHERE rk = 1
0	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.`date` = '2012-08-25' GROUP BY gasstations.country	SELECT DISTINCT Country FROM (SELECT T2.Country, rank() over ( ORDER BY T1.Time DESC ) as rk FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25') WHERE rk = 1
1	SELECT DISTINCT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24'	SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'
1	SELECT DISTINCT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00'	SELECT DISTINCT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'
0	SELECT sum(iif(transactions_1k.`time` < '13:00:00', 1, 0)) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND transactions_1k.`date` = '2012-08-26'	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'
0	SELECT segment FROM customers WHERE customerid = ( SELECT min(customerid) FROM customers )	SELECT c.Segment FROM customers c WHERE EXISTS (SELECT 1 FROM transactions_1k t WHERE t.CustomerID = c.CustomerID AND t.Date = (SELECT MIN(Date) FROM transactions_1k));
1	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00'	SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
0	SELECT productid FROM transactions_1k WHERE date = '2012-08-23' AND time = '21:20:00'	SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
0	SELECT sum(transactions_1k.price), transactions_1k.date FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 124	SELECT CustomerID, Date, Consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' GROUP BY CustomerID HAVING SUM(Price * Amount) = 124.05) AND Date = '201201'
1	SELECT count(DISTINCT gasstations.gasstationid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-26' AND gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00' AND '09:00'	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'
0	SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE substr(yearmonth.`date`, 1, 7) = '201306'	SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17
1	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467	SELECT DISTINCT gs.Country FROM gasstations gs JOIN transactions_1k tx ON gs.GasStationID = tx.GasStationID WHERE tx.CardID = 667467;
0	SELECT customers.country FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.price = 548.4	SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' GROUP BY T1.CustomerID HAVING SUM(T1.Price * T1.Amount) = 548.4
0	SELECT cast(sum(iif(customers.currency = 'EUR', 1, 0)) AS REAL) * 100 / count(customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-25'	SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date = '2012-08-25')) AS Percentage FROM transactions_1k T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25' AND T2.Currency = 'EUR';
0	SELECT ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2013' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) - ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) ) / ( SELECT consumption FROM yearmonth WHERE strftime('%Y', `date`) = '2012' AND customerid = ( SELECT customerid FROM transactions_1k WHERE price = 634.8 AND `date` = '2012-08-25' ) )	SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID IN (SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' GROUP BY T1.CustomerID HAVING SUM(T1.Price * T1.Amount) = 634.8) GROUP BY CustomerID;
0	SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1	SELECT GasStationID FROM (SELECT GasStationID, rank() over (ORDER BY SUM(Amount * Price) DESC) as rk FROM transactions_1k GROUP BY GasStationID) WHERE rk = 1
1	SELECT cast(sum(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / count(segment) FROM gasstations WHERE country = 'SVK'	SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations
0	SELECT sum(t.amount) FROM transactions_1k AS t WHERE t.customerid = 38508 AND t.date LIKE '201201%'	SELECT (SELECT SUM(T1.Price * T1.Amount) FROM transactions_1k AS T1 JOIN gasstations as T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CustomerID = '38508'), (SELECT T1.Consumption FROM yearmonth as T1 WHERE T1.CustomerID = '38508' AND T1.Date = '201201')
0	SELECT DISTINCT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.amount DESC LIMIT 5	SELECT products.ProductID, products.Description FROM (SELECT ProductID, rank() over (ORDER BY SUM(Amount) DESC ) AS rk FROM transactions_1k GROUP BY ProductID) AS T JOIN products ON T.ProductID = products.ProductID WHERE rk <= 5
0	SELECT customers.customerid, avg(transactions_1k.price / transactions_1k.amount), customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid, customers.currency ORDER BY sum(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1	WITH Total AS (SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY CustomerID) SELECT T2.CustomerID, SUM(T2.Price * T2.Amount) / SUM(T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID IN (SELECT CustomerID FROM Total WHERE TotalConsumption = (SELECT MAX(TotalConsumption) FROM Total)) GROUP BY T2.CustomerID, T1.Currency
0	SELECT gasstations.country FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE products.productid = 2 GROUP BY gasstations.country ORDER BY sum(transactions_1k.price) DESC LIMIT 1	SELECT DISTINCT T2.Country FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 AND T1.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2)
0	SELECT consumption FROM yearmonth WHERE customerid IN ( SELECT customerid FROM transactions_1k WHERE productid = 5 AND price / amount > 29 )	SELECT Consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Price / Amount > 29.00 AND ProductID = 5) AND Date = '201208'
                     easy                 medium               hard                 extra                all                 
count                0                    0                    0                    0                    1534                
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.381               
