0	SELECT `free meal count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda';	SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS HighestEligibleFreeRate FROM frpm WHERE `County Name` = 'Alameda' AND `Enrollment (K-12)` > 0;
0	SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.school = 'Continuation School' ORDER BY frpm.`percent (%) eligible free (ages 5-17)` ASC LIMIT 3;	SELECT rate FROM (SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS rate, rank() over (ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC) as rk FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL) WHERE rk <= 3
0	SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`county name` = 'Fresno' AND frpm.`charter school (y/n)` = 1;	SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1
1	SELECT schools.mailstreet FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`frpm count (k-12)` = ( SELECT max(frpm.`frpm count (k-12)`) FROM frpm );	SELECT MailStreet FROM ( SELECT T2.MailStreet, RANK() OVER (ORDER BY T1.`FRPM Count (K-12)` DESC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ) AS ranked WHERE rk = 1
0	SELECT schools.phone FROM schools WHERE schools.charter = 1 AND schools.lastupdate > '2000-01-01';	SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'
0	SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath < 400 AND schools.virtual = 'F';	SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 400 AND T1.Virtual = 'F';
0	SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1;	SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500
0	SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr >= 1500 ORDER BY satscores.numtsttakr DESC LIMIT 1;	SELECT Phone FROM ( SELECT T2.Phone, RANK() OVER (ORDER BY T1.NumGE1500 DESC) as rk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ) AS ranked WHERE rk = 1
1	SELECT numtsttakr FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`frpm count (k-12)` = (SELECT MAX(frpm.`frpm count (k-12)`) FROM frpm);	SELECT T2.NumTstTakr FROM frpm T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm WHERE `FRPM Count (K-12)` IS NOT NULL);
0	SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 560 AND schools.`charter funding type` = 'Directly funded';	SELECT COUNT(*) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Directly funded';
0	SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread DESC LIMIT 1;	SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores T1 JOIN frpm T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL);
0	SELECT satscores.cds FROM satscores WHERE satscores.enroll12 > 500;	SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500
0	SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`percent (%) eligible free (k-12)` = ( SELECT max(`percent (%) eligible free (k-12)`) FROM frpm WHERE `free meal count (ages 5-17)` / `enrollment (ages 5-17)` > 0.3 );	SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
0	SELECT phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numge1500 / satscores.numtsttakr DESC LIMIT 3;	SELECT Phone FROM ( SELECT T1.Phone, RANK() OVER (ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) AS ranked WHERE rk <= 3
0	SELECT schools.ncesschool FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.`enrollment (ages 5-17)` DESC LIMIT 5;	SELECT NCESSchool FROM ( SELECT T1.NCESSchool, RANK() OVER (ORDER BY T2.`Enrollment (Ages 5-17)` DESC) as rk FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ) AS ranked WHERE rk <= 5
0	SELECT dname FROM satscores WHERE rtype = 'D' GROUP BY dname ORDER BY avgscrread DESC LIMIT 1;	SELECT District FROM ( SELECT T1.District, RANK() OVER (ORDER BY T2.AvgScrRead DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ) AS ranked WHERE rk = 1
0	SELECT count(satscores.cds) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Alameda' AND satscores.numtsttakr < 100;	SELECT COUNT(DISTINCT T1.CDSCode) FROM schools T1 JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T1.County = 'Alameda' AND T2.NumTstTakr < 100;
0	SELECT satscores.cds FROM satscores WHERE satscores.avgscrwrite = 499;	SELECT T2.CharterNum FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite > 499 AND T2.CharterNum IS NOT NULL ORDER BY T1.AvgScrWrite DESC;
0	SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;	SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1;	SELECT Phone FROM ( SELECT T1.Phone, RANK() OVER (ORDER BY T2.AvgScrMath DESC) as rk FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) AS ranked WHERE rk = 1
0	SELECT count(schools.school) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`low grade` = '9' AND frpm.`high grade` = '12';	SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12
0	SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsoffered LIKE 'K-12' AND frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700;	SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700
0	SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;	SELECT sname FROM ( SELECT sname, RANK() OVER (ORDER BY NumTstTakr DESC) as rk FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ) AS ranked WHERE rk = 1
0	SELECT schools.school, schools.street FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE satscores.enroll12 - frpm.`enrollment (ages 5-17)` > 30;	SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30
0	SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numtsttakr >= 1500;	SELECT T3.School FROM schools T3 JOIN frpm T1 ON T3.CDSCode = T1.CDSCode JOIN satscores T2 ON T3.CDSCode = T2.cds WHERE T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` > 0.1 AND T2.NumGE1500 > 0;
0	SELECT avg(satscores.avgscrmath) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.cname = 'Riverside' AND satscores.avgscrmath > 400;	SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`County Name` = 'Riverside' GROUP BY T1.cds HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400;
0	SELECT schools.school, schools.street, schools.city, schools.state, schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` > 800 AND schools.state = 'CA' AND schools.city = 'Monterey';	SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'
0	SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.lastupdate > '1991-01-01' OR schools.closeddate < '2000-01-01';	SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
0	SELECT schools.school, schools.doc FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded' AND frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)` > (SELECT AVG(frpm.`enrollment (k-12)` - frpm.`enrollment (ages 5-17)`) FROM frpm);	SELECT T1.School, T1.DOCType FROM schools T1 JOIN frpm T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Locally funded' AND (T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM schools T4 JOIN frpm T3 ON T4.CDSCode = T3.CDSCode WHERE T4.FundingType = 'Locally funded')
0	SELECT MIN(frpm.`enrollment (k-12)`) FROM frpm WHERE frpm.`school type` = 'K-12 Schools (Public)';	SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
0	SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` ASC LIMIT 5;	SELECT City FROM (SELECT T2.City, rank() over (ORDER BY SUM(T1.`Enrollment (K-12)`) ASC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City) WHERE rk <= 5;
0	SELECT frpm.`free meal count (k-12)`, frpm.`enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.enroll12 = ( SELECT max(enroll12) FROM satscores WHERE satscores.rtype = 'D' ) AND satscores.enroll12 = ( SELECT max(enroll12) FROM satscores WHERE satscores.rtype = 'S' );	SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
1	SELECT `frpm count (k-12)` / `enrollment (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.soc = '66' ORDER BY `frpm count (k-12)` DESC LIMIT 5;	SELECT rate FROM (SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` as rate, rank() over (ORDER BY T1.`FRPM Count (K-12)` DESC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66) WHERE rk <= 5;
0	SELECT frpm.`school name`, frpm.`free meal count (ages 5-17)` FROM frpm WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;	SELECT T2.School, T2.Website FROM frpm T1 JOIN schools T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
1	SELECT frpm.`free meal count (ages 5-17)` / frpm.`enrollment (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Kacey' AND schools.admlname1 = 'Gibson , Free';	SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'
0	SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school (y/n)` = 1 GROUP BY schools.admemail1 ORDER BY sum(frpm.`enrollment (k-12)`) LIMIT 1;	SELECT AdmEmail1 FROM (SELECT T2.AdmEmail1, rank() over (ORDER BY T1.`Enrollment (K-12)` ASC) as rk FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1) WHERE rk = 1
0	SELECT schools.admfname1, schools.admfname2, schools.admfname3 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numtsttakr DESC LIMIT 1;	SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
0	SELECT schools.street, schools.city, schools.state, schools.zip FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 / satscores.numtsttakr = ( SELECT min(satscores.numge1500 / satscores.numtsttakr) FROM satscores );	SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode
0	SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;	SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'
0	SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate LIKE '1980%' AND schools.closeddate LIKE '1980%';	SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'
0	SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread ASC LIMIT 1;	SELECT Phone from (SELECT T2.Phone, rank() over (ORDER BY T1.AvgScrRead ASC) as rk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL) WHERE rk = 1;
0	SELECT sname, avgscrread FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' ORDER BY avgscrread DESC LIMIT 5;	SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5
0	SELECT frpm.`school type` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode ORDER BY satscores.avgscrmath DESC LIMIT 1;	SELECT T2.EdOpsName FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL)
0	SELECT avg(satscores.avgscrmath), schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) LIMIT 1;	WITH RankedScores AS (SELECT cds, (AvgScrMath + AvgScrRead + AvgScrWrite) AS TotalScore FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL) SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (AvgScrMath + AvgScrRead + AvgScrWrite) = (SELECT min(TotalScore) FROM RankedScores ORDER BY TotalScore ASC LIMIT 1)
0	SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.city HAVING satscores.numtsttakr >= 1500;	SELECT T2.City, T1.AvgScrWrite FROM satscores T1 JOIN schools T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 IS NOT NULL AND T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL)
1	SELECT schools.school, satscores.avgscrwrite FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich';	SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'
0	SELECT schools.cdscode FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soctype = 'State Special Schools' AND schools.gsoffered = '12' GROUP BY schools.cdscode ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1;	SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 AND T1.`Enrollment (K-12)` = (SELECT max(T3.`Enrollment (K-12)`) FROM frpm AS T3)
1	SELECT count(schools.cdscode) / 12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.doc = '52' AND frpm.`county name` = 'Alameda' AND strftime('%Y', schools.opendate) = '1980';	SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'
0	SELECT cast(sum(CASE WHEN schools.doc = '54' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.doc = '52' THEN 1 ELSE 0 END) AS REAL) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Orange';	SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'
0	SELECT schools.county, schools.school, schools.closeddate FROM schools WHERE schools.statustype = 'Closed' GROUP BY schools.county, schools.school, schools.closeddate ORDER BY count(*) DESC LIMIT 1;	SELECT County, School, ClosedDate FROM schools WHERE County IN (SELECT County FROM (SELECT County, rank() over (ORDER BY COUNT(*) DESC ) as rk FROM schools WHERE StatusType = 'Closed' GROUP BY County) WHERE rk = 1) AND StatusType = 'Closed' AND school IS NOT NULL
0	SELECT schools.mailstreet FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrmath DESC LIMIT 1 OFFSET 5;	SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1
0	SELECT schools.mailstreet, schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread LIMIT 1;	WITH scr AS ( SELECT T2.MailStreet, T2.School, T1.AvgScrRead FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ) SELECT MailStreet, School FROM scr WHERE AvgScrRead = (SELECT MIN(AvgScrRead) FROM scr)
0	SELECT count(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Lakeport' AND satscores.numtsttakr >= 1500;	SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500
0	SELECT count(satscores.numtsttakr) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.mailcity = 'Fresno';	SELECT TOTAL(T2.NumTstTakr) FROM schools T1 INNER JOIN satscores T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno';
0	SELECT schools.`school name`, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admfname2 = 'Avetik' AND schools.admlname1 = 'Administration';	SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
1	SELECT cast(count(CASE WHEN schools.county = 'Colusa' THEN schools.cdscode ELSE NULL END) AS REAL) / cast(count(CASE WHEN schools.county = 'Humboldt' THEN schools.cdscode ELSE NULL END) AS REAL) FROM schools WHERE schools.mailstate = 'CA';	SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'
0	SELECT count(DISTINCT schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND frpm.`county name` = 'San Joaquin';	SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'California' AND StatusType = 'Active'
0	SELECT schools.phone, schools.ext FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrwrite DESC LIMIT 333;	SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = (SELECT T3.AvgScrWrite FROM satscores AS T3 ORDER BY T3.AvgScrWrite DESC LIMIT 332, 1)
0	SELECT schools.phone, schools.ext FROM schools WHERE schools.zip = '95203-3704';	SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'
1	SELECT schools.website FROM schools WHERE schools.admfname1 = 'Mike' AND schools.admlname1 = 'Larson' OR schools.admfname1 = 'Dante' AND schools.admlname1 = 'Alvarez';	SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')
0	SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.virtual = 'P' AND frpm.`charter school (y/n)` = 1 AND frpm.`county name` = 'San Joaquin';	SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1
0	SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.charter = 1 AND schools.city = 'Hickman' AND schools.doc = '52';	SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'
0	SELECT sum(frpm.`free meal count (k-12)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND satscores.rtype = 'D' AND frpm.`percent (%) eligible free (k-12)` < 0.18;	SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18
0	SELECT schools.admfname1, schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`charter school number` = '00D2';	SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
1	SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';	SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'
0	SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.fundingtype) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`county name` = 'Santa Clara';	SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(1) FROM schools WHERE County = 'Santa Clara' AND Charter = 1;
0	SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter funding type` = 'Directly funded' AND frpm.`county name` = 'Stanislaus' AND schools.fundingtype = 'Directly Funded';	SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'
0	SELECT sum(schools.closeddate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'San Francisco';	SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'
0	SELECT schools.county FROM schools WHERE schools.soc = '11' AND schools.closeddate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;	SELECT County FROM (SELECT County, COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County) WHERE SchoolCount = (SELECT MAX(SchoolCount) FROM (SELECT COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County))
0	SELECT DISTINCT schools.ncesdist FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = 31;	SELECT NCESDist FROM schools WHERE SOC = 31
0	SELECT count(cdscode) FROM schools WHERE county = 'Alpine' AND closeddate IS NULL;	SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'
1	SELECT DISTINCT frpm."DISTRICT CODE" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.magnet = 0 AND schools.city = 'Fresno';	SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0
0	SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SSS' AND frpm.`academic year` = '2014-2015';	SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015
0	SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.mailstrabr = 'PO Box 1040';	SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'
0	SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = '613360';	SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'
0	SELECT schools.eilname FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND frpm.`county code` = '37';	SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37
1	SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.eilcode = 'HS' AND frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`low grade` = '9' AND frpm.`high grade` = '12' AND frpm.`county name` = 'Merced';	SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'
0	SELECT frpm.`school name`, frpm.`percent (%) eligible frpm (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'K-12';	SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'
0	SELECT schools.gsserved FROM schools WHERE schools.city = 'Adelanto' GROUP BY schools.gsserved ORDER BY count(schools.gsserved) DESC LIMIT 1;	SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved) temp);
0	SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON frpm.cdscode = schools.cdscode INNER JOIN satscores ON satscores.cds = schools.cdscode WHERE schools.virtual = 'F' AND satscores.cname BETWEEN 'San Diego' AND 'Santa Barbara';	SELECT County, cnt FROM (SELECT County, COUNT(Virtual) as cnt, rank() over ( ORDER BY COUNT(Virtual) DESC ) as rk FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County) WHERE rk = 1
0	SELECT schools.school, schools.latitude FROM schools ORDER BY schools.latitude DESC LIMIT 1;	SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Latitude = (SELECT MAX(Latitude) FROM schools)
0	SELECT schools.city FROM schools WHERE schools.state = 'CA' ORDER BY schools.latitude ASC LIMIT 1;	SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' AND T2.Latitude IS NOT NULL AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA' AND Latitude IS NOT NULL)
0	SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1;	SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)
0	SELECT count(schools.city) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`school type` = 'K-8 Schools (Public)' AND schools.magnet = 1;	SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City
0	SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY count(admfname1) DESC LIMIT 2;	SELECT DISTINCT AdmFName1, District FROM schools WHERE AdmFName1 IN (SELECT AdmFName1 FROM (SELECT AdmFName1, rank() over (ORDER BY COUNT(admfname1) DESC) as rk FROM schools GROUP BY AdmFName1) WHERE rk <= 2)
0	SELECT schools.cdscode FROM schools WHERE schools.admfname1 = 'Alusine';	SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
0	SELECT schools.district, schools.county, schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`charter school number` = '40';	SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'
1	SELECT schools.admemail1 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`district type` = 'State Special Schools' AND frpm.`school code` = '0109835' AND frpm.`school name` = 'FAME Public Charter' AND satscores.cname = 'San Bernardino' AND satscores.dname = 'Alameda Unified' AND satscores.enroll12 BETWEEN 398 AND 62;	SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62
0	SELECT schools.admemail1 FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY satscores.numtsttakr DESC LIMIT 1;	SELECT School, AdmEmail1 FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 IS NOT NULL))
0	SELECT count(account.account_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a3 LIKE 'east Bohemia' AND account.frequency LIKE 'POPLATEK PO OBRATU';	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'
0	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';	SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN district T2 ON T1.district_id = T2.district_id JOIN loan T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague';
0	SELECT a12, a13 FROM district ORDER BY (a12 + a13) / 2 DESC LIMIT 1;	SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district
0	SELECT count(district_id) FROM district WHERE a11 > 6000 AND a11 < 10000 AND gender = 'F';	sql placeholder
0	SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a3 = 'north Bohemia' AND client.a11 > 8000;	sql placeholder
0	SELECT account.account_id FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.a11 = ( SELECT MAX(a11) FROM district ) AND client.birth_date > ( SELECT MIN(birth_date) FROM client );	SELECT account_id, (SELECT MAX(A11) FROM district) - MIN(district.A11) AS salary_gap FROM client JOIN disp USING (client_id) JOIN account USING (account_id) JOIN district USING (district_id) WHERE gender = 'F' AND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') GROUP BY account_id;
0	SELECT account.account_id FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON client.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1;	SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T3.birth_date = (SELECT max(birth_date) FROM client) AND T4.A11 = (SELECT max(A11) FROM district)
0	SELECT count(*) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK TYDNE';	SELECT COUNT(distinct T2.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'
0	SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT';	SELECT DISTINCT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'
0	SELECT account.account_id FROM account INNER JOIN loan ON loan.account_id = account.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;	SELECT account_id FROM account WHERE account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND amount = ( SELECT MIN(amount) FROM loan WHERE STRFTIME('%Y', date) = '1997' ) ) AND account_id IN ( SELECT account_id FROM loan WHERE STRFTIME('%Y', date) = '1997' AND frequency = 'POPLATEK TYDNE' )
0	SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date LIKE '1993%' ORDER BY loan.amount DESC LIMIT 1;	SELECT T1.account_id FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' AND T1.amount = (SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993')) GROUP BY T1.account_id HAVING MAX(T1.amount)
0	SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON client.district_id = account.district_id INNER JOIN disp ON account.account_id = disp.account_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.a2 = 'Slokolov';	SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'
0	SELECT * FROM account WHERE strftime('%Y', date) = '1995' ORDER BY date ASC LIMIT 1;	SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31')
0	SELECT DISTINCT trans.account_id FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000;	SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.balance > 3000
0	SELECT client.client_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE card.issued = '1994-03-03';	SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE issued = '1994-03-03');
0	SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.account_id = 840;	SELECT date FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14');
1	SELECT district.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.date = '1994-08-25';	SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE date = '1994-08-25');
0	SELECT MAX(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.card_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.date = '1996/10/21';	SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1
0	SELECT gender FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON account.district_id = district.district_id ORDER BY district.a11 DESC LIMIT 1;	SELECT gender FROM (SELECT client.gender, rank() over (ORDER BY client.birth_date ASC ) as rk FROM district JOIN account ON district.district_id = account.district_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id GROUP BY client.client_id HAVING max(A11) = (SELECT max(A11) FROM district)) WHERE rk = 1
0	SELECT trans.amount FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN trans ON loan.account_id = trans.account_id ORDER BY loan.amount DESC LIMIT 1;	SELECT amount FROM (SELECT amount, rank() over (ORDER BY date ASC) as rk FROM trans WHERE account_id IN (SELECT account_id FROM loan WHERE amount = (SELECT max(amount) FROM loan)) GROUP BY account_id) WHERE rk = 1
0	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Jesenik' AND client.gender = 'F';	SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 JOIN disp T2 on T1.client_id = T2.client_id JOIN account T3 on T2.account_id = T3.account_id JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A2 = 'Jesenik';
1	SELECT disp.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE trans.amount = 5100 AND strftime('%Y-%m-%d', trans.date) = '1998-09-02';	SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T3.date = '1998-09-02' AND T3.amount = 5100
1	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date LIKE '1996%';	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'
0	SELECT district.a2 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';	SELECT A2 FROM district T4 WHERE T4.district_id IN (SELECT T3.district_id FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29')
0	SELECT client.birth_date FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';	SELECT birth_date FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM loan WHERE amount = 98832 AND date = '1996-01-03'));
0	SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague';	SELECT account_id FROM (SELECT T1.account_id, rank() over (ORDER BY T1.date ASC) as rk FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague') WHERE rk = 1
0	SELECT district.a3, (COUNT(client.gender = 'M') / COUNT(client.gender)) * 100 FROM client INNER JOIN district ON client.district_id = district.district_id GROUP BY district.a3 ORDER BY district.a4 DESC LIMIT 1;	SELECT p from (SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) as p, rank() over (ORDER BY T2.A4 DESC ) as rk FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.district_id) WHERE rk = 1;
0	SELECT (loan.amount - trans.balance) / trans.balance * 100 FROM loan INNER JOIN trans ON loan.account_id = trans.account_id WHERE loan.date = '1993-07-05';	SELECT CAST((SUM(IIF(trans.date = '1998-12-27', trans.balance, 0)) - SUM(IIF(trans.date = '1993-03-22', trans.balance, 0))) AS REAL) * 100 / SUM(IIF(trans.date = '1993-03-22', trans.balance, 0)) FROM (SELECT client_id FROM loan JOIN disp ON loan.account_id = disp.account_id GROUP BY client_id HAVING min(loan.date) = '1993-07-05') AS T JOIN disp ON disp.client_id = T.client_id JOIN trans ON disp.account_id = trans.account_id GROUP BY T.client_id
0	SELECT cast(sum(CASE WHEN loan.status = 'A' THEN loan.amount END) AS REAL) * 100 / sum(loan.amount) FROM loan;	SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan
0	SELECT cast(sum(iif(loan.amount < 100000, 1, 0)) AS REAL) * 100 / count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C';	SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000
0	SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU';	SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'
1	SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31';	SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'
1	SELECT account.account_id, account.date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prachatice';	SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
0	SELECT loan.loan_id, district.a2, district.a3 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.loan_id = 4990;	SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990
1	SELECT account.account_id, district.a2, district.a3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000;	SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000
0	SELECT loan.loan_id , district.a3 , district.a11 FROM loan INNER JOIN district ON loan.account_id = district.district_id WHERE loan.duration = 60;	SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60
0	SELECT district.district_id, state.state FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN account ON client.client_id = account.client_id INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN loan ON account.account_id = loan.account_id INNER JOIN state ON district.a3 = state.region WHERE loan.status LIKE 'D';	SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
0	SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON account.district_id = district.district_id WHERE account.date = '1993-01-01';	SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'
1	SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';	SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'
0	SELECT district.a2 FROM district INNER JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F' GROUP BY district.a2 ORDER BY COUNT(*) DESC LIMIT 10;	SELECT district.A2 FROM district JOIN (SELECT account.district_id, rank() over (ORDER BY COUNT(*) DESC) as rk FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' GROUP BY account.district_id) AS subquery ON district.district_id = subquery.district_id WHERE rk <= 9
0	SELECT district.a2, SUM(trans.amount) FROM trans INNER JOIN disp ON trans.trans_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND account.date LIKE '1996-01%' GROUP BY district.a2 ORDER BY SUM(trans.amount) DESC LIMIT 10;	sql placeholder
0	SELECT count(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND card.card_id IS NULL;	SELECT COUNT(*) FROM client WHERE client_id NOT IN (SELECT client_id FROM disp WHERE type = 'OWNER') AND district_id IN (SELECT district_id FROM district WHERE A3 = 'south Bohemia')
0	SELECT district.a3 FROM district INNER JOIN loan ON district.district_id = loan.district_id WHERE loan.status = 'A' GROUP BY district.a3 ORDER BY count(loan.loan_id) DESC LIMIT 1;	SELECT A3 FROM (SELECT T2.A3, rank() over (ORDER BY SUM(T3.amount) DESC) as rk FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.district_id) WHERE rk = 1
0	SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M';	SELECT avg(loans) FROM (SELECT sum(T4.amount) as loans FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' GROUP BY T1.client_id);
0	SELECT district.district_id, district.a2 FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1996' ORDER BY district.a13 DESC;	SELECT district_id, A2 FROM (SELECT district_id, A2, rank() over (ORDER BY A13 DESC) as rk FROM district) WHERE rk = 1
0	SELECT max(a16) FROM district;	SELECT COUNT(*) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A16 = (SELECT max(A16) FROM district)) GROUP BY district_id
1	SELECT count(trans.account_id) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0;	SELECT COUNT(DISTINCT T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'
0	SELECT count(loan.loan_id) FROM loan INNER JOIN card ON loan.loan_id = card.loan_id WHERE loan.amount >= 250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND card.type = 'monthly statement' AND loan.status = 'A';	SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000
0	SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'C' AND account.district_id = 1;	SELECT COUNT(DISTINCT T1.account_id) FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 1 AND T1.status IN ('C', 'D');
0	SELECT count(client.gender) FROM district INNER JOIN client ON district.district_id = client.district_id WHERE district.a15 = (SELECT max(a15) FROM district) AND client.gender = 'M';	SELECT cnt FROM (SELECT COUNT(T1.client_id) as cnt, rank() over (ORDER BY T2.A15 DESC ) as rk FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' GROUP BY T1.district_id) WHERE rk = 2;
0	SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'DISPONENT';	SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'
1	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';	SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'
0	SELECT DISTINCT district.district_id FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN client ON account.district_id = client.district_id INNER JOIN district ON client.district_id = district.district_id WHERE trans.amount > 10000 AND trans.date = '1997-01-01';	SELECT DISTINCT T3.district_id FROM trans T1 JOIN account T2 ON T1.account_id = T2.account_id JOIN district T3 ON T2.district_id = T3.district_id WHERE T1.amount > 10000 AND strftime('%Y', T1.date) = '1997';
0	SELECT DISTINCT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.k_symbol = 'SIPO';	SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'
0	SELECT DISTINCT account.account_id FROM card INNER JOIN account ON card.card_id = account.account_id WHERE card.type = 'junior' AND card.type = 'gold';	SELECT DISTINCT T2.account_id FROM card T1 JOIN disp T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold';
0	SELECT avg(trans.amount) FROM trans INNER JOIN card ON trans.account_id = card.card_id INNER JOIN disp ON card.disp_id = disp.disp_id WHERE trans.operation = 'VYBER KARTOU';	SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'
0	SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN trans ON card.disp_id = trans.disp_id WHERE trans.account_id = 1998 AND trans.operation = 'VYBER KARTOU' GROUP BY client.client_id HAVING SUM(trans.amount) < AVG(SUM(trans.amount));	SELECT DISTINCT T2.client_id FROM trans T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y' , T1.date) = '1998' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y' , date) = '1998')
0	SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN loan ON loan.account_id = disp.account_id WHERE client.gender = 'F';	SELECT DISTINCT T1.client_id FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN card T3 ON T2.disp_id = T3.disp_id JOIN loan T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F' AND T2.type = 'OWNER';
0	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'F';	SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A3 = 'south Bohemia';
0	SELECT disp.account_id FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type = 'OWNER' AND district.a2 = 'Tabor';	SELECT DISTINCT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';
0	SELECT DISTINCT disp.type FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.type != 'LOAN' AND district.a11 > 8000 AND district.a11 < 9000;	SELECT DISTINCT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000
0	SELECT count(*) FROM account INNER JOIN trans ON account.account_id = trans.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND trans.bank = 'AB';	SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'North Bohemia'
0	SELECT district.a2 FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ';	SELECT T1.A2 FROM district AS T1 WHERE district_id IN (SELECT T2.district_id FROM account AS T2 INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ')
1	SELECT avg(a15) FROM district WHERE a15 > 4000 AND district_id IN ( SELECT district_id FROM account WHERE date >= '1997-01-01' );	SELECT AVG(T1.A15) FROM district AS T1 WHERE district_id IN (SELECT district_id FROM account AS T2 WHERE STRFTIME('%Y', T2.date) >= '1997') AND T1.A15 > 4000
0	SELECT count(card_id) FROM card WHERE type = 'classic';	SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
1	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M';	SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
0	SELECT (count(type = 'gold' AND issued < '1998-01-01') / count(*)) * 100 FROM card;	SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card
0	SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id ORDER BY loan.amount DESC LIMIT 1;	SELECT DISTINCT client_id FROM (SELECT T1.client_id, rank() over (ORDER BY T2.amount DESC) as rk FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER') WHERE rk = 1;
1	SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532;	SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532
0	SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;	SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333
0	SELECT trans.trans_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER';	SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'
0	SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;	SELECT COUNT(DISTINCT T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000
0	SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;	SELECT DISTINCT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539
1	SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;	SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541
0	SELECT district_id FROM account WHERE status = 'A' GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T3.A2 FROM district T3 INNER JOIN account T2 ON T3.district_id = T2.district_id INNER JOIN loan T1 ON T2.account_id = T1.account_id WHERE T1.status = 'A' GROUP BY T3.district_id HAVING COUNT(DISTINCT T1.account_id) = (SELECT MAX(count) FROM (SELECT COUNT(DISTINCT T1.account_id) AS count FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.status = 'A' GROUP BY T2.district_id));
0	SELECT order.account_id FROM order INNER JOIN trans ON order.order_id = trans.trans_id WHERE trans.trans_id = 32423;	SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423
0	SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;	SELECT T2.* FROM account T1 JOIN trans T2 ON T1.account_id = T2.account_id WHERE T1.district_id = 5;
1	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';	SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'
0	SELECT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > '1996-01-01' AND card.type = 'junior';	SELECT DISTINCT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01';
0	SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a11 > 10000;	SELECT CAST(COUNT(DISTINCT CASE WHEN client.gender = 'F' THEN client.client_id END) AS REAL) * 100 / COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE district.A11 > 10000;
0	SELECT (sum(loan.amount) - sum(loan_1996.amount)) / sum(loan_1996.amount) * 100 FROM loan INNER JOIN loan AS loan_1996 ON loan.account_id = loan_1996.account_id INNER JOIN client ON loan.account_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-12-31';	SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 WHERE T1.account_id IN (SELECT T2.account_id FROM account AS T2 INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER')
0	SELECT count(*) FROM trans INNER JOIN card ON trans.trans_id = card.disp_id WHERE trans.date > '1995-01-01' AND trans.type = 'VYBER';	SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'
0	SELECT district.a3, SUM(district.a16) - SUM(district.a15) AS difference FROM district GROUP BY district.a3;	SELECT SUM(IIF(A3 = 'East Bohemia', A16, 0)) - SUM(IIF(A3 = 'North Bohemia', A16, 0)) FROM district
0	SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'OWNER' OR type = 'DISPONENT';	SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10
0	SELECT frequency FROM account WHERE account_id = 3;	SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539
0	SELECT substr(birth_date, 1, 4) FROM client WHERE client_id = 130;	SELECT strftime('%Y', birth_date) FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id = 130);
0	SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU';	SELECT COUNT(DISTINCT T1.account_id) FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'OWNER';
0	SELECT loan.amount, loan.payments FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 992;	SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992
0	SELECT SUM(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id INNER JOIN account ON trans.account_id = account.account_id WHERE client.client_id = 4 AND trans.trans_id = 851;	SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851
0	SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;	SELECT DISTINCT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9
0	SELECT sum(t.amount) FROM trans t WHERE t.account_id = '617' AND t.date = '1998';	SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617
0	SELECT client.client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id BETWEEN 1983 AND 1987 AND district.a3 = 'east Bohemia';	SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'East Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'
0	SELECT client.client_id FROM client INNER JOIN loan ON client.client_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;	SELECT client_id FROM (SELECT T1.client_id, rank() over (ORDER BY MAX(T3.amount) DESC) as rk FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' GROUP BY T1.client_id) WHERE rk <= 3
0	SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN order ON loan.loan_id = order.order_id INNER JOIN trans ON order.order_id = trans.trans_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.k_symbol = 'SIPO' AND trans.amount > 4000;	SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN trans T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000;
0	SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Beroun' AND account.date > '1996-01-01';	SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'
0	SELECT count(card.card_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' AND card.type = 'junior';	SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN card T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior';
0	SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.client_id) FROM client INNER JOIN account ON client.client_id = account.client_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'Prague';	SELECT (COUNT(DISTINCT CASE WHEN T3.gender = 'F' THEN T3.client_id END) * 100.0 / COUNT(DISTINCT T3.client_id)) AS percentage_female FROM district T1 JOIN account T2 ON T1.district_id = T2.district_id JOIN disp T4 ON T2.account_id = T4.account_id JOIN client T3 ON T4.client_id = T3.client_id WHERE T1.A3 = 'Prague';
0	SELECT cast(sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';	SELECT (COUNT(DISTINCT T1.client_id) * 100.0 / (SELECT COUNT(DISTINCT T1.client_id) FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE')) AS percentage FROM client T1 JOIN disp T2 ON T1.client_id = T2.client_id JOIN account T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.frequency = 'POPLATEK TYDNE';
0	SELECT count(client.client_id) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE';	SELECT COUNT(DISTINCT T2.client_id) FROM account T1 JOIN disp T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER';
0	SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24 AND account.date < '1997-01-01' ORDER BY loan.amount ASC LIMIT 1;	SELECT DISTINCT L.account_id FROM loan L, account A WHERE L.account_id = A.account_id AND L.duration > 24 AND A.date < '1997-01-01' AND L.amount = (SELECT MIN(L2.amount) FROM loan L2 WHERE L2.duration > 24)
0	SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT MIN(a11) FROM district);	SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T3.birth_date = (SELECT max(birth_date) FROM client WHERE gender = 'F') AND T4.A11 = (SELECT max(A11) FROM district JOIN client on district.district_id = client.district_id WHERE gender = 'F')
0	SELECT count(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia' AND client.birth_date = '1920-01-01';	SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'
0	SELECT count(account_id) FROM account WHERE frequency = 'POPLATEK TYDNE';	SELECT COUNT(DISTINCT T1.account_id) FROM loan T1 JOIN account T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE';
0	SELECT avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';	SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'
0	SELECT client.client_id, client.district_id FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE disp.type = 'OWNER';	SELECT client_id, district_id FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE type = 'OWNER');
0	SELECT card.card_id, client.birth_date FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE card.type = 'gold';	SELECT DISTINCT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'
0	SELECT bond_type FROM bond GROUP BY bond_type ORDER BY count(bond_type) DESC LIMIT 1;	WITH BondCounts AS (SELECT bond_type, COUNT(*) AS count FROM bond GROUP BY bond_type) SELECT bond_type FROM BondCounts WHERE count = (SELECT MAX(count) FROM BondCounts);
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '-' AND bond.bond_type = '=' AND atom.element = 'cl';	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'
0	SELECT avg(atom.element = 'o') FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';	SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id) AS oxygen_counts
0	SELECT SUM(bond_type = '-') / COUNT(atom_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';	sql placeholder
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'na' AND molecule.label = '-';	SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+';	SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'
0	SELECT SUM(atom.element = 'c') / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ';	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
1	SELECT count(*) FROM bond WHERE bond_type = '#';	SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'
1	SELECT count(*) FROM atom WHERE element != 'br';	SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'
0	SELECT count(molecule_id) FROM molecule WHERE label = '+';	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'
0	SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'si';	SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
0	SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR004_8_9';	SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id WHERE C.bond_id = 'TR004_8_9' UNION SELECT DISTINCT A.element FROM atom A JOIN connected C ON A.atom_id = C.atom_id2 WHERE C.bond_id = 'TR004_8_9';
0	SELECT DISTINCT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ';	SELECT DISTINCT T3.element FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id JOIN atom T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '=';
0	SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY count(label) DESC LIMIT 1;	SELECT label FROM (SELECT T2.label, rank() over (ORDER BY COUNT(T2.molecule_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label) WHERE rk = 1
0	SELECT bond_type FROM bond WHERE molecule_id = 'TE';	SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'
0	SELECT DISTINCT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
0	SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-';	SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-'
0	SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY count(atom.element) LIMIT 1;	SELECT element FROM (SELECT element, COUNT(*) AS num FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element) WHERE num = (SELECT MIN(num) FROM (SELECT COUNT(*) AS num FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element))
1	SELECT bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20';	SELECT b.bond_type FROM bond b WHERE b.bond_id IN (SELECT c.bond_id FROM connected c WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8'));
0	SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn';	SELECT DISTINCT label FROM molecule EXCEPT SELECT DISTINCT label FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'sn';
0	SELECT count(atom.atom_id) FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'i' AND atom.element = 's' AND bond.bond_type = '-';	SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
0	SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'
0	SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.molecule_id = 'TR181';	SELECT DISTINCT atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181') UNION SELECT DISTINCT atom_id FROM connected WHERE atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR181')
0	SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'f';	SELECT (COUNT(DISTINCT T1.molecule_id) - COUNT(DISTINCT T2.molecule_id)) * 100.0 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM molecule T1 LEFT JOIN atom T2 ON T1.molecule_id = T2.molecule_id AND T2.element = 'f' WHERE T1.label = '+';
0	SELECT cast(sum(iif(bond.bond_type = '#', 1, 0)) AS REAL) * 100 / count(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'
0	SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3;	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3
1	SELECT connected.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.molecule_id = 'TR001' AND bond.bond_id = 'TR001_2_6';	SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'
1	SELECT SUM(label = '+') - SUM(label = '-') AS difference FROM molecule;	SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t
0	SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_5';	SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5' UNION SELECT T.atom_id2 FROM connected AS T WHERE T.bond_id = 'TR000_2_5'
1	SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';	SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'
0	SELECT molecule_id FROM bond WHERE bond_type = ' = ' ORDER BY molecule_id ASC LIMIT 5;	SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5
0	SELECT cast(sum(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / total(bond.bond_id) FROM bond WHERE bond.molecule_id = 'TR008';	SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'
0	SELECT SUM(label = '+') / COUNT(molecule_id) AS percent FROM molecule;	SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t
0	SELECT SUM(atom.element = 'h') / COUNT(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR206';	SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'
0	SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000';	SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'
0	SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';	SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
0	SELECT MAX(COUNT(bond_type)) FROM bond WHERE molecule_id = 'TR018';	SELECT T.bond_type FROM (SELECT T1.bond_type, rank() over (ORDER BY COUNT(T1.molecule_id) DESC) as rk FROM bond AS T1 WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type) AS T WHERE T.rk = 1
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-' AND atom.element = 'c' GROUP BY molecule.molecule_id ORDER BY molecule.molecule_id LIMIT 3;	SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3
1	SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;	SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;
0	SELECT count(bond_id) FROM connected WHERE atom_id = 'TR009_12' OR atom_id2 = 'TR009_12';	SELECT COUNT(DISTINCT bond.bond_id) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE (atom_id = 'TR009_12' or atom_id2 = 'TR009_12') AND molecule_id = 'TR009'
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'br' AND molecule.label = '+';	SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'
0	SELECT bond.bond_type, connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';	SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'
0	SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';	SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
1	SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';	SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'
0	SELECT count(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_19';	SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';
0	SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'
1	SELECT count(*) FROM molecule WHERE label = '-';	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'
0	SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTRING(atom.atom_id, 7, 2) BETWEEN 21 AND 25 AND molecule.label = '+';	SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'
0	SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';	SELECT C.bond_id FROM connected C JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE A1.element = 'p' AND A2.element = 'n' UNION SELECT C.bond_id FROM connected C JOIN atom A1 ON C.atom_id = A1.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE A2.element = 'p' AND A1.element = 'n'
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;	SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) AS bond_count FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT molecule_id, COUNT(bond_type) AS bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery) ORDER BY bond_count DESC) AS T2 ON T1.molecule_id = T2.molecule_id
0	SELECT cast(count(bond_id) AS REAL) / count(atom_id) AS average FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i';	SELECT CAST(COUNT(DISTINCT T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T1.element = 'i';
0	SELECT bond.bond_type, bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_45';	SELECT DISTINCT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45' OR SUBSTR(T2.atom_id2, 7, 2) = '45';
0	SELECT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id2 FROM connected);	SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected);
0	SELECT atom.atom_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.molecule_id = 'TR447' AND bond.bond_type = '#';	SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'
0	SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';	SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19' UNION SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR144_8_19';
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = ' GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;	SELECT T.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id) AS subquery) ORDER BY bond_count DESC) AS T
0	SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY atom.element ORDER BY count(atom.element) LIMIT 1;	SELECT T.element FROM (SELECT T2.element, rank() over (ORDER BY COUNT(DISTINCT T2.molecule_id)) as rk FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id)) T WHERE T.rk = 1
0	SELECT connected.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.element = 'pb';	SELECT DISTINCT CASE WHEN T2.atom_id = T1.atom_id THEN T2.atom_id2 ELSE T2.atom_id END AS bonded_atom_id FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T1.element = 'pb';
0	SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';	SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '#'
0	SELECT DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) )) FROM connected;	sql placeholder
0	SELECT SUM(label = '+') / COUNT(bond_id) FROM bond WHERE bond_type = '-';	SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
1	SELECT count(*) FROM atom WHERE atom.element IN ('c', 'h');	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'
1	SELECT atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 's');	SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's';
0	SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'sn';	SELECT DISTINCT T3.bond_type FROM atom T1 JOIN connected T2 ON T1.atom_id = T2.atom_id2 OR T1.atom_id = T2.atom_id JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn';
0	SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';	SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T
0	SELECT count(*) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '#' AND atom.element = 'p' OR atom.element = 'br';	SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element IN ('p', 'br')) AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '#')
1	SELECT DISTINCT bond.bond_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+';	SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';	SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
0	SELECT SUM(atom.element = 'cl') / COUNT(atom.atom_id) as percent FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';	SELECT CAST(COUNT(DISTINCT CASE WHEN T.element = 'cl' THEN T.atom_id END) AS REAL) * 100 / COUNT(DISTINCT T.atom_id) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T
0	SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');	SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = connected.atom_id2 AND bond.bond_type = '-';	SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'
0	SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE molecule.label = '+';	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'
0	SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';	SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
0	SELECT DISTINCT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11';	SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_10_11');
0	SELECT count(bond_id) FROM bond WHERE element = 'i';	SELECT COUNT(*) FROM (SELECT bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id AND atom.element = 'i' UNION SELECT bond_id FROM connected JOIN atom ON connected.atom_id2 = atom.atom_id AND atom.element = 'i')
0	SELECT max(label) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE element = 'ca';	SELECT label FROM (SELECT T2.label, rank() over (ORDER BY COUNT(DISTINCT T2.molecule_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label) WHERE rk = 1
0	SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl' AND atom.element = 'c';	SELECT CASE WHEN COUNT(DISTINCT T2.element) = 2 THEN 'YES' ELSE 'NO' END FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id OR T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR001_1_8' AND T2.element IN ('cl', 'c');
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c' AND bond.bond_type = '#' AND molecule.label = '-';	SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'
0	SELECT cast(count(CASE WHEN atom.element = 'cl' THEN molecule.molecule_id ELSE NULL END) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '+';	SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'
0	SELECT DISTINCT bond.molecule_id FROM bond WHERE bond.bond_type = ' = ';	SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='
1	SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#';	SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'
0	SELECT element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR005_16_26';	SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_1_2' UNION SELECT DISTINCT T2.element FROM connected T1 JOIN atom T2 ON T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR000_1_2';
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-';	SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_10_11';	SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
0	SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#' AND molecule.label = '+';	SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id IN (SELECT T3.molecule_id FROM bond AS T3 WHERE T3.bond_type = '#')
0	SELECT count(CASE WHEN substr(atom.atom_id, 7, 1) = 4 THEN atom.element END) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';	SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7
0	SELECT SUM(element = 'h'), count(element) FROM atom WHERE molecule_id = 'TR006';	WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label
0	SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'ca';	SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca')
0	SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te';	SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'
0	SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_10_11';	SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
1	SELECT cast(sum(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM bond;	SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T
0	SELECT SUM(CASE WHEN bond.bond_type = ' = ' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';	SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'
0	SELECT label = '+' FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1';	SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
1	SELECT label FROM molecule WHERE molecule_id = 'TR151';	SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'
0	SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';	SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'
1	SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '+';	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'
0	SELECT DISTINCT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';	SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'
1	SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';	SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND bond.bond_type = ' = ';	SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='
1	SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'h';	SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR000_1';	SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element LIKE 'c' AND molecule.label LIKE '-';	SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
0	SELECT SUM(label = '+' AND element = 'h') * 100.0 / COUNT(molecule_id) FROM molecule;	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
1	SELECT label FROM molecule WHERE molecule_id = 'TR124';	SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'
1	SELECT atom.atom_id FROM atom WHERE atom.molecule_id = 'TR186';	SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'
0	SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR007_4_19';	SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'
0	SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_2_4';	SELECT DISTINCT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_2_4');
0	SELECT count(bond_id) FROM bond WHERE molecule_id = 'TR006' AND bond_type = ' = ';	SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label
0	SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule.label = '+' AND bond.bond_type = '=';	SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
0	SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';	SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
0	SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';	SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
0	SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR000_2_3';	SELECT DISTINCT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id2 = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'
0	SELECT count(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';	SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'cl') OR atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'cl');
1	SELECT atom.atom_id, count(bond.bond_type) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE bond.molecule_id = 'TR346' GROUP BY atom.atom_id;	SELECT A.atom_id, COUNT(DISTINCT B.bond_type) AS bond_types FROM atom A JOIN bond B ON A.molecule_id = B.molecule_id WHERE A.molecule_id = 'TR346' GROUP BY A.atom_id;
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = ' = ' AND molecule.label = '+';	SELECT COUNT(DISTINCT T2.molecule_id), COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE element != 's' AND bond_type != ' = ';	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 WHERE T1.molecule_id NOT IN (SELECT T2.molecule_id FROM atom T2 WHERE T2.element = 's') AND T1.molecule_id NOT IN (SELECT T3.molecule_id FROM bond T3 WHERE T3.bond_type = '=')
0	SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_2_4';	SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'
0	SELECT count(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR005';	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'
1	SELECT count(bond_id) FROM bond WHERE bond_type = '-';	SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';	SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';	SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
0	SELECT cast(sum(CASE WHEN molecule.label = '+' AND atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / count(*) AS percentage FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id;	SELECT COUNT(DISTINCT CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id END) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
1	SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_1_7';	SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
0	SELECT count(atom.element) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_3_4';	SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_3_4'
1	SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND connected.atom_id = 'TR000_2';	SELECT T1.bond_type FROM bond AS T1 WHERE T1.bond_id IN (SELECT T2.bond_id FROM connected AS T2 WHERE (T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2') OR (T2.atom_id2 = 'TR000_1' AND T2.atom_id = 'TR000_2'))
1	SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2' UNION SELECT molecule_id FROM atom WHERE atom_id = 'TR000_4';	SELECT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4');
0	SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_1';	SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'
1	SELECT label FROM molecule WHERE molecule_id = 'TR000';	SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'
0	SELECT SUM(bond_type = '-'), COUNT(bond_id) FROM bond;	SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t
0	SELECT count(*) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'n';	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 's' AND bond.bond_type = ' = ';	SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '=' UNION SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 's' AND T3.bond_type = '='
0	SELECT DISTINCT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.label = '-' AND COUNT(molecule.molecule_id) > 5;	SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t
0	SELECT DISTINCT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '=' AND atom.molecule_id = 'TR024';	SELECT DISTINCT T4.element FROM molecule T1 JOIN bond T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.bond_id = T3.bond_id JOIN atom T4 ON T3.atom_id = T4.atom_id OR T3.atom_id2 = T4.atom_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '=';
0	SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY count(atom.molecule_id) DESC LIMIT 1;	SELECT T.molecule_id FROM (SELECT T2.molecule_id, rank() over (ORDER BY COUNT(T1.atom_id) DESC) as rk FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id) T WHERE T.rk = 1
0	SELECT cast(sum(iif(molecule.label = '+', 1, 0)) AS REAL) * 100.0 / count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'h' AND bond.bond_type = '#';	SELECT (CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) / (SELECT COUNT(*) FROM molecule WHERE label = '+')) * 100.0 AS percentage FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.atom_id = T3.atom_id OR T2.atom_id = T3.atom_id2 JOIN bond T4 ON T3.bond_id = T4.bond_id WHERE T1.label = '+' AND T2.element = 'h' AND T4.bond_type = '#';
1	SELECT count(*) FROM molecule WHERE molecule.label = '+';	SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'
0	SELECT count(*) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id BETWEEN 'TR004' AND 'TR010' AND bond.bond_type = '-';	SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'
1	SELECT count(atom.element) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id = 'TR008';	SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'
1	SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND label = '-';	SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
0	SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id WHERE atom.element = 'o' AND bond.bond_type = ' = ';	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule T1 JOIN atom T2 ON T1.molecule_id = T2.molecule_id JOIN connected T3 ON T2.atom_id = T3.atom_id OR T2.atom_id = T3.atom_id2 JOIN bond T4 ON T3.bond_id = T4.bond_id WHERE T2.element = 'o' AND T4.bond_type = '=';
1	SELECT count(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '-';	SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'
0	SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR016';	SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'
0	SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c';	SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id OR T1.atom_id = T3.atom_id2 INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T2.molecule_id = 'TR012' AND T4.bond_type = '=' AND T1.element = 'c';
1	SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o';	SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'
0	SELECT * FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;	SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
0	SELECT cards.name FROM cards WHERE cards.bordercolor = 'borderless' AND cards.id NOT IN ( SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid = cards.cardkingdomid AND cards.cardkingdomid IS NOT NULL );	SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)
0	SELECT name FROM cards WHERE convertedmanacost = (SELECT MAX(faceconvertedmanacost) FROM cards);	SELECT name FROM cards WHERE faceConvertedManaCost IS NOT NULL AND faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards WHERE faceConvertedManaCost IS NOT NULL)
1	SELECT name FROM cards WHERE edhrecrank < 100 AND frameversion = 2015;	SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
0	SELECT name FROM cards WHERE rarity = 'mythic' AND status = 'Banned' AND format = 'gladiator';	SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'
1	SELECT legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.types = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage';	SELECT status FROM legalities WHERE uuid IN (SELECT uuid FROM cards WHERE type = 'Artifact' AND side IS NULL) AND format = 'vintage'
0	SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE power = '*' OR power IS NULL AND legalities.format = 'commander' AND legalities.status = 'Legal';	SELECT id, artist FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'commander' AND status = 'Legal') AND (power = '*' OR power IS NULL)
0	SELECT cards.artist, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele';	SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
0	SELECT cards.name, cards.artist, count(rulings.uuid) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist ORDER BY count(rulings.uuid) DESC LIMIT 1;	SELECT T1.name, T1.artist, T1.isPromo FROM cards T1 JOIN (SELECT uuid, COUNT(uuid) AS ruling_count FROM rulings GROUP BY uuid) T2 ON T1.uuid = T2.uuid WHERE T2.ruling_count = (SELECT MAX(ruling_count) FROM (SELECT COUNT(uuid) AS ruling_count FROM rulings GROUP BY uuid))
1	SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Annul' AND cards.number = '29';	SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'annul' AND T1.number = 29
0	SELECT cards.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;	SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese');
0	SELECT cast(sum(CASE WHEN set_translations.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN cards ON set_translations.id = cards.id;	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'Chinese Simplified' THEN T1.id END) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
0	SELECT sets.totalsetsize FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian';	SELECT T1.name, T1.totalSetSize FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Italian');
0	SELECT count(types) FROM cards WHERE artist = 'Aaron Boyd';	SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd' GROUP BY artist;
1	SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy';	SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
1	SELECT count(id) FROM cards WHERE power = '*';	SELECT COUNT(*) FROM cards WHERE power = '*'
1	SELECT promotypes FROM cards WHERE name = 'Duress';	SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL
1	SELECT cards.colors FROM cards WHERE cards.name = 'Ancestor''s Chosen';	SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'
1	SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor''s Chosen';	SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL
1	SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Angel of Mercy';	SELECT DISTINCT T2.language FROM cards T1 JOIN set_translations T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy';
0	SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0;	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0
1	SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Condemn';	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'
0	SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isstarter = 1;	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1
0	SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle';	SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
0	SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight';	SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
1	SELECT legalities.format FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';	SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
0	SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Phyrexian';	SELECT DISTINCT T1.artist FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian';
0	SELECT Count(id) FROM cards WHERE bordercolor = 'borderless';	SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
0	SELECT count(*) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;	SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isReprint = 1 AND T2.language = 'German';
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless';	SELECT COUNT(DISTINCT T1.id) FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian';
0	SELECT cast(sum(iif(cards.isstoryspotlight = 1, 1, 0)) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'French';	SELECT (COUNT(DISTINCT cards.id) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isStorySpotlight = 1 AND foreign_data.language = 'French';
1	SELECT count(cards.id) FROM cards WHERE cards.toughness = 99;	SELECT COUNT(id) FROM cards WHERE toughness = 99
1	SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd';	SELECT name FROM cards WHERE artist = 'Aaron Boyd'
1	SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'mtgo';	SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'
1	SELECT id FROM cards WHERE convertedmanacost = 0;	SELECT id FROM cards WHERE convertedManaCost = 0
0	SELECT cards.layout FROM cards WHERE cards.keywords = 'Flying';	SELECT layout FROM cards WHERE keywords = 'flying'
1	SELECT count(id) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel';	SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
1	SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT Null AND cards.cardkingdomid IS NOT Null;	SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL
1	SELECT id FROM cards WHERE dueldeck = 'a';	SELECT id FROM cards WHERE duelDeck = 'a'
1	SELECT cards.edhrecrank FROM cards WHERE cards.frameversion = '2015';	SELECT edhrecRank FROM cards WHERE frameVersion = 2015
0	SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';	SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Chinese Simplified');
0	SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'Japanese' AND set_translations.language = 'Japanese' AND cards.availability = 'paper';	SELECT name FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese') AND availability = 'paper';
0	SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'
0	SELECT foreign_data.uuid, foreign_data.language FROM foreign_data INNER JOIN legalities ON foreign_data.uuid = legalities.uuid WHERE legalities.format = 'legacy';	SELECT T1.uuid, T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.uuid IN (SELECT T3.uuid FROM legalities AS T3 WHERE T3.format = 'legacy');
1	SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Beacon of Immortality';	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
0	SELECT count(id) FROM cards WHERE frameversion = 'future';	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'
0	SELECT cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';	SELECT colors FROM cards WHERE setCode = 'OGW';
1	SELECT set_translations.translation , foreign_data.language FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setcode = '10E' AND cards.convertedmanacost = 5;	SELECT cards.id, set_translations.language FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE convertedManaCost = 5 AND cards.setCode = '10E'
1	SELECT cards.name , rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originaltype = 'Creature - Elf';	SELECT T1.name, T2.date FROM cards AS T1 JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf';
1	SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;	SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20
0	SELECT * FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B' AND foreign_data.language = 'German';	SELECT T1.name FROM cards AS T1 WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T1.uuid IN (SELECT T2.uuid FROM foreign_data AS T2)
0	SELECT cards.name FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.rarity = 'uncommon' LIMIT 3;	SELECT name FROM (SELECT T1.name, rank() over (ORDER BY min(T2.date) ASC) as rk FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' GROUP BY T1.uuid) WHERE rk <= 3;
0	SELECT count(cards.id) FROM cards WHERE cards.artist = 'John Avon' AND cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NOT NULL;	SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'
0	SELECT count(*) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;	SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL
1	SELECT count(*) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;	SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'
1	SELECT count(id) FROM cards WHERE frameversion = 1993 AND availability = 'paper' AND hascontentwarning = 1;	SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1
0	SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability IN ('paper', 'mtgo');	SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'
0	SELECT sum(cards.convertedmanacost) FROM cards WHERE cards.artist = 'Rob Alexander';	SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'
0	SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.availability = 'arena';	SELECT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL
1	SELECT set_translations.setcode FROM set_translations WHERE set_translations.language = 'Spanish';	SELECT setCode FROM set_translations WHERE language = 'Spanish'
0	SELECT CAST(COUNT(hand = '+3') AS REAL) / COUNT(id) FROM cards WHERE frameeffects = 'legendary';	SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'
0	SELECT cards.id FROM cards WHERE cards.isstoryspotlight = 1 AND cards.istextless = 1;	SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1
0	SELECT set_translations.translation FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Spanish';	SELECT (SELECT CAST(COUNT(DISTINCT CASE WHEN language = 'Spanish' THEN uuid END) AS REAL) * 100 / (SELECT COUNT(*) FROM cards) FROM foreign_data), name FROM foreign_data WHERE language = 'Spanish';
0	SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.basesetsize = 309;	SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
0	SELECT count(set_translations.setcode) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brasil)';	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'
0	SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Creature' AND legalities.status = 'legal';	SELECT id FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status = 'Legal') AND types = 'Creature';
0	SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German';	SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
0	SELECT count(id) FROM cards WHERE power IS NULL;	SELECT COUNT(DISTINCT T1.uuid) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'
0	SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND rulings.text = 'This is a triggered mana ability' AND cards.side IS NULL;	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL
1	SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper';	SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'
1	SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation';	SELECT artist FROM cards WHERE id IN (SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%')
1	SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson';	SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'
0	SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10';	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'
0	SELECT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ravnica';	SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180
0	SELECT DIVidE(COUNT(hascontentwarning = 0),COUNT(id))*100 FROM cards WHERE format = 'commander' AND status = 'legal';	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.hasContentWarning = 0 THEN T1.id END) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'
0	SELECT cast(sum(CASE WHEN cards.power IS NULL OR cards.power = '*' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.power) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French';	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'French' THEN T1.id END ) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*';
0	SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';	SELECT (COUNT(DISTINCT T2.id) * 100.0 / (SELECT COUNT(DISTINCT T2.id) FROM set_translations T1 INNER JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese')) AS percentage FROM set_translations T1 INNER JOIN sets T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese' AND T2.type = 'expansion';
1	SELECT availability FROM cards WHERE artist = 'Daren Bader';	SELECT availability FROM cards WHERE artist = 'Daren Bader'
1	SELECT count(*) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000;	SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'
1	SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;	SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1
0	SELECT cards.name FROM cards WHERE cards.power IS NULL AND cards.promotypes = 'arenaleague' ORDER BY cards.name ASC LIMIT 3;	SELECT name FROM (SELECT name, rank() over (ORDER BY name) as rk FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague') WHERE rk <= 3
1	SELECT foreign_data.language FROM foreign_data WHERE foreign_data.multiverseid = 149934;	SELECT language FROM foreign_data WHERE multiverseid = 149934
0	SELECT cards.id FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;	SELECT cardKingdomFoilId, cardKingdomId FROM (SELECT cardKingdomFoilId, cardKingdomId, rank() over (ORDER BY cardKingdomFoilId) as rk FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL) WHERE rk <= 3
1	SELECT cast(sum(CASE WHEN cards.istextless = 1 AND cards.layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;	SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
1	SELECT number FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL;	SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL
1	SELECT name FROM sets WHERE mtgocode IS NULL OR mtgocode = '' ORDER BY name ASC LIMIT 3;	SELECT name FROM (SELECT name, rank() over (ORDER BY name) as rk FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '') WHERE rk <= 3
1	SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.mcmname = 'Archenemy' AND sets.code = 'ARC';	SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'
1	SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;	SELECT T1.name, T2.translation FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.id = 5;
1	SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;	SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206
0	SELECT cards.id, cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY cards.name ASC LIMIT 2;	SELECT name, id FROM (SELECT T1.name, T1.id, rank() over (ORDER BY T1.name) as rk FROM sets AS T1 WHERE T1.block = 'Shadowmoor' AND T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Italian')) WHERE rk <= 2
0	SELECT set_translations.setcode FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese' AND sets.isforeignonly = 1 AND sets.isfoilonly = 1;	SELECT T1.name, T1.id FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Japanese') AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0
0	SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.basesetsize DESC LIMIT 1;	SELECT T1.id FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Russian') AND T1.baseSetSize = (SELECT max(T1.baseSetSize) FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.language = 'Russian'))
0	SELECT cast(count(CASE WHEN set_translations.language = 'Chinese Simplified' AND sets.isonlineonly = 1 THEN set_translations.id ELSE NULL END) AS REAL) * 100 / count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code;	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN T1.id END) AS REAL) * 100 / (SELECT COUNT(*) FROM sets) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode;
1	SELECT count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese' AND sets.mtgocode IS NULL OR sets.mtgocode = '';	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
0	SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black';	SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id
0	SELECT count(cards.id) FROM cards WHERE cards.frameeffects = 'extendedart';	SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id
0	SELECT name FROM cards WHERE bordercolor = 'white' AND isfullart = 1;	SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1
0	SELECT foreign_data.language FROM foreign_data WHERE foreign_data.id = 174;	SELECT language FROM set_translations JOIN sets on set_translations.setCode = sets.code WHERE sets.id = 174
0	SELECT set_translations.translation FROM set_translations WHERE set_translations.setcode = 'ALL';	SELECT name FROM sets WHERE code = 'ALL'
1	SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'A Pedra Fellwar';	SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
1	SELECT sets.code FROM sets WHERE sets.releasedate = '2007-07-13';	SELECT code FROM sets WHERE releaseDate = '2007-07-13';
0	SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = 'Masques' AND sets.name = 'Mirage';	SELECT baseSetSize, code FROM sets WHERE block = 'Masques' OR block = 'Mirage';
1	SELECT code FROM sets WHERE type = 'expansion';	SELECT code FROM sets WHERE type = 'expansion';
0	SELECT type FROM cards WHERE watermark = 'boros';	SELECT T2.name, T2.type FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros';
0	SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'colorpie';	SELECT T2.language, T2.flavorText, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'
0	SELECT SUM(convertedmanacost = 16) / COUNT(convertedmanacost) * 100 FROM cards WHERE name = 'Abyssal Horror';	SELECT CAST(COUNT(CASE WHEN T1.convertedManaCost = 10 THEN T1.id END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Abyssal Horror'
0	SELECT sets.code FROM sets WHERE sets.type = 'expansion' AND sets.type = 'commander';	SELECT code FROM sets WHERE type = 'commander';
0	SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';	SELECT T2.name, T2.type FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan';
0	SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'azorius';	SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'
0	SELECT count(*) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL;	SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards
0	SELECT count(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';	SELECT SUM(CASE WHEN availability like '%paper%' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards
1	SELECT cards.name FROM cards WHERE cards.istextless = 0;	SELECT name FROM cards WHERE isTextless = 0;
1	SELECT cards.manacost FROM cards WHERE cards.name = 'Ancestor`s Chosen';	SELECT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'
0	SELECT count(cards.power) FROM cards WHERE cards.colors = 'W' AND cards.power = '*';	SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'
1	SELECT name FROM cards WHERE ispromo = 1 AND side IS NOT NULL;	SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
1	SELECT subtypes,supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';	SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
0	SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';	SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
0	SELECT count(cards.id) FROM cards WHERE cards.colors = 'B' AND cards.coloridentity = 'B' AND cards.availability LIKE '%arena,mtgo%';	SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards
0	SELECT CASE WHEN cards.convertedmanacost > cards.faceconvertedmanacost THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS RESULT FROM cards;	SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
1	SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer';	SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
0	SELECT name FROM cards WHERE frameversion = '2003' ORDER BY manacost DESC LIMIT 3;	SELECT name FROM (SELECT name, rank() over (ORDER BY convertedManaCost DESC) as rk FROM cards WHERE frameVersion = 2003) WHERE rk <= 3
0	SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND cards.name = 'Ancestor's Chosen';	SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'
1	SELECT count(set_translations.translation) FROM set_translations INNER JOIN cards ON set_translations.id = cards.id WHERE cards.name LIKE 'Angel of Mercy';	SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL
0	SELECT name FROM cards WHERE setcode = 'Hauptset Zehnte Edition';	SELECT T1.name FROM cards AS T1 WHERE T1.setCode IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.translation = 'Hauptset Zehnte Edition')
0	SELECT foreign_data.text FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Korean' AND cards.name = 'Ancestor's Chosen';	SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'
1	SELECT count(cards.artist) FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';	SELECT DISTINCT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
1	SELECT sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';	SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');
1	SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';	SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'
0	SELECT CASE WHEN sets.mtgocode IS NOT NULL THEN 'Yes' ELSE 'No' END FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE cards.name = 'Angel of Mercy';	SELECT CASE WHEN T2.mtgoCode IS NOT NULL THEN 'YES' ELSE 'NO' END AS OnlineStatus FROM cards T1 LEFT JOIN sets T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy';
1	SELECT releasedate FROM sets WHERE name = 'Ancestor''s Chosen';	SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen')
1	SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';	SELECT type FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition');
0	SELECT count(set_translations.translation) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';	SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL
0	SELECT isforeignonly FROM sets WHERE name = 'Adarkar Valkyrie';	SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Adarkar Valkyrie')
0	SELECT count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10;	SELECT COUNT(DISTINCT T1.id) FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100;
0	SELECT count(id) FROM cards WHERE name = 'Coldsnap' AND bordercolor = 'black';	SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
0	SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE setcode = 'Coldsnap' );	SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap')
1	SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.setcode = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');	SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist
1	SELECT cards.number FROM cards INNER JOIN sets ON sets.name = 'Coldsnap' WHERE cards.id = 4;	SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4
0	SELECT count(cards.id) FROM cards INNER JOIN sets ON sets.code = cards.setcode INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND cards.convertedmanacost > 5 AND cards.power = '*';	SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5
1	SELECT foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Italian' AND cards.name = 'Ancestor''s Chosen';	SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'
1	SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.flavortext IS NOT NULL;	SELECT DISTINCT T2.language FROM cards T1 JOIN foreign_data T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL;
1	SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.name = 'Ancestor''s Chosen';	SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
0	SELECT foreign_data.text FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';	SELECT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'
0	SELECT foreign_data.name FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name LIKE 'Coldsnap' AND foreign_data.language LIKE 'Italian' ORDER BY foreign_data.convertedmanacost DESC LIMIT 1;	SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian')
1	SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';	SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'
1	SELECT SUM(CASE WHEN cards.convertedmanacost = 7 THEN 1 ELSE 0 END) * 100 / SUM(1) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Coldsnap';	SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
0	SELECT DIVidE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100 FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL AND name = 'Coldsnap';	SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'
1	SELECT code FROM sets WHERE releasedate = '2017-07-14';	SELECT code FROM sets WHERE releaseDate = '2017-07-14'
1	SELECT keyrunecode FROM sets WHERE code = 'PKHC';	SELECT keyruneCode FROM sets WHERE code = 'PKHC'
0	SELECT sets.mcmid FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE sets.code = 'SS2';	SELECT mcmId FROM sets WHERE code = 'SS2'
0	SELECT sets.mcmname FROM sets WHERE sets.releasedate = '2017/6/9';	SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
0	SELECT sets.type FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'From The Vault: Lore';	SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'
1	SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';	SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
0	SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Jim Pavelec';	SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'
1	SELECT sets.releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation';	SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Evacuation')
0	SELECT basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';	SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara');
0	SELECT type FROM sets WHERE name = 'Huitième édition';	SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' )
0	SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'French' AND sets.code = 'ICE';	SELECT translation FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Tendo Ice Bridge') AND language = 'French' AND translation IS NOT NULL
0	SELECT count(set_translations.translation) FROM set_translations WHERE set_translations.setcode = 'Salvat 2011' AND set_translations.translation IS NOT NULL;	SELECT COUNT(translation) AS translation_count FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE name = 'Tenth Edition');
1	SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON set_translations.setcode = cards.setcode WHERE set_translations.language = 'Japanese' AND cards.name = 'Fellwar Stone';	SELECT translation FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese' AND translation IS NOT NULL
0	SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedmanacost DESC LIMIT 1;	SELECT name FROM (SELECT T1.name, rank() over (ORDER BY T1.convertedManaCost DESC) as rk FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path') WHERE rk = 1
1	SELECT sets.releasedate FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.translation = 'Ola de frío';	SELECT T1.releaseDate FROM sets AS T1 WHERE T1.code IN (SELECT T2.setCode FROM set_translations AS T2 WHERE T2.translation = 'Ola de frío')
1	SELECT sets.type FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Samite Pilgrim';	SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )
1	SELECT count(*) FROM cards WHERE convertedmanacost = 3 AND name = 'World Championship Decks 2004';	SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3
1	SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';	SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'
0	SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN foreign_data ON set_translations.id = foreign_data.id WHERE foreign_data.language = 'Japanese';	SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )
0	SELECT DIVidE(SUM(isonlineonly = 1), SUM(language = 'Portuguese (Brazil)))*100 FROM set_translations WHERE language = 'Portuguese (Brazil)';	SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )
0	SELECT sets.type FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.artist = 'Aleksi Briclot' AND cards.istextless = 1;	SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1
1	SELECT id FROM sets WHERE basesetsize = ( SELECT MAX(basesetsize) FROM sets );	SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
1	SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1;	SELECT artist FROM (SELECT artist, rank() over (ORDER BY convertedManaCost DESC) as rk FROM cards WHERE side IS NULL) WHERE rk = 1
0	SELECT cards.frameeffects FROM cards WHERE cards.cardkingdomfoilid IS NOT NULL AND cards.cardkingdomid IS NOT NULL GROUP BY cards.frameeffects ORDER BY count(cards.frameeffects) DESC LIMIT 1;	SELECT frameEffects FROM (SELECT frameEffects, rank() over (ORDER BY COUNT(frameEffects) DESC) as rk FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects) WHERE rk = 1
0	SELECT count(id) FROM cards WHERE power IS NULL OR power = '*' AND hasfoil = 0 AND dueldeck = 'a';	SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'
0	SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1;	SELECT id FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander');
0	SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'duel' ORDER BY cards.convertedmanacost DESC LIMIT 10;	SELECT name FROM (SELECT name, rank() over (ORDER BY manaCost DESC) as rk FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'duel')) WHERE rk <= 10
0	SELECT originalreleasedate , format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'mythic' ORDER BY originalreleasedate ASC LIMIT 1;	SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal')
0	SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.artist = 'Volkan Baga';	SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3
1	SELECT count(CASE WHEN legalities.status = 'Legal' THEN cards.id ELSE NULL END) FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.rarity = 'rare' AND cards.types = 'Enchantment' AND cards.name = 'Abundance';	SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
0	SELECT format , name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE status = 'banned' GROUP BY format ORDER BY count(status) DESC LIMIT 1;	WITH CountedFormats AS (SELECT format, COUNT(*) AS Cnt FROM legalities WHERE status = 'Banned' GROUP BY format), MaxFormat AS (SELECT format FROM CountedFormats WHERE Cnt = (SELECT MAX(Cnt) FROM CountedFormats)) SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format IN (SELECT format FROM MaxFormat) AND legalities.status = 'Banned'
1	SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Battlebond';	SELECT T2.language FROM sets T1 JOIN set_translations T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond';
0	SELECT artist , format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE artist = (SELECT MIN(artist) FROM cards);	SELECT T.artist, legalities.format FROM (SELECT artist, uuid FROM cards WHERE artist IN (SELECT artist FROM cards GROUP BY artist HAVING COUNT(uuid) = (SELECT MIN(count) FROM (SELECT COUNT(uuid) AS count FROM cards GROUP BY artist)))) AS T JOIN legalities ON T.uuid = legalities.uuid
1	SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'D. Alexander Gregory' AND cards.frameversion = '1997' AND cards.hascontentwarning = 1 AND legalities.format = 'legacy';	SELECT status FROM legalities AS T2 WHERE T2.uuid IN (SELECT T1.uuid FROM cards AS T1 WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory') AND T2.format = 'legacy'
0	SELECT cards.name , legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE edhrecrank = 1 AND status = 'banned';	SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'
0	SELECT avg(id) FROM sets WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31';	SELECT * FROM (SELECT AVG(yearly_count) AS average_sets_per_year FROM (SELECT COUNT(*) AS yearly_count FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY strftime('%Y', releaseDate))) NATURAL JOIN (SELECT language FROM (SELECT language, rank() over (ORDER BY COUNT(*) DESC) as rk FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') GROUP BY language) WHERE rk = 1)
0	SELECT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';	SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'
0	SELECT uuid FROM legalities WHERE format = 'oldschool' OR status = 'banned' OR status = 'restricted';	SELECT DISTINCT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')
1	SELECT count(cards.id) FROM cards WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';	SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
1	SELECT rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;	SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC
1	SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';	SELECT C.name, L.format FROM sets S JOIN cards C ON S.code = C.setCode JOIN legalities L ON C.uuid = L.uuid WHERE S.name = 'Hour of Devastation' AND L.status = 'Legal';
0	SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.translation NOT LIKE '%Japanese%';	SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')
0	SELECT cards.frameversion, legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams';	SELECT DISTINCT T1.frameVersion, T1.name, IIF(T1.uuid IN (SELECT T2.uuid FROM legalities AS T2 WHERE status == 'Banned'), 'Banned', 'NO') FROM cards AS T1 WHERE T1.artist = 'Allen Williams'
1	SELECT displayname FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1;	SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )
0	SELECT users.displayname FROM users WHERE year(users.creationdate) = 2014;	SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'
0	SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01 00:00:00';	SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'
0	SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
1	SELECT count(*) FROM users WHERE upvotes > 100 AND downvotes > 1;	SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1
0	SELECT count(users.id) FROM users WHERE users.views > 10 AND year(users.creationdate) > 2013;	SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10
1	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';	SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';	SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
1	SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;	SELECT Title FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))
0	SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts))
1	SELECT sum(posts.commentcount) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie';	SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT posts.answercount FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.answercount DESC LIMIT 1;	SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT users.displayname FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';	SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
1	SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL;	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
0	SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.closeddate IS NOT NULL;	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ClosedDate IS NOT NULL )
1	SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65 AND posts.score >= 20;	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65
1	SELECT users.location FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Eliciting priors from experts';	SELECT Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts');
1	SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE tags.tagname = 'bayesian';	SELECT T2.Body FROM tags AS T1 LEFT JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'
0	SELECT posts.body FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1;	SELECT Body FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags WHERE Count IS NOT NULL));
1	SELECT count(DISTINCT badges.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie';	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';	SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
1	SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie' AND strftime('%Y', badges.date) = '2011';	SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname ORDER BY count(badges.id) DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) = (SELECT MAX(BadgeCount) FROM (SELECT COUNT(Id) AS BadgeCount FROM badges GROUP BY UserId)));
1	SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';	SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
0	SELECT cast(count(badges.id) AS REAL) / count(users.displayname) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.views > 200;	SELECT AVG(badge_count) FROM (SELECT COUNT(b.Id) AS badge_count FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id)
0	SELECT cast(sum(CASE WHEN posts.score > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.age > 65;	SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5
1	SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';	SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
0	SELECT creationdate FROM votes GROUP BY creationdate ORDER BY count(id) DESC LIMIT 1;	SELECT CreationDate FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(VoteCount) FROM (SELECT COUNT(Id) AS VoteCount FROM votes WHERE CreationDate IS NOT NULL GROUP BY CreationDate) T2);
0	SELECT count(badges.id) FROM badges WHERE badges.name = 'Revival';	SELECT Id FROM badges WHERE Name = 'Revival'
0	SELECT posts.title FROM comments INNER JOIN posts ON comments.postid = posts.id ORDER BY comments.score DESC LIMIT 1;	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments));
1	SELECT count(comments.postid) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910;	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910
0	SELECT sum(posts.favoritecount) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.userid = '3025' AND comments.creationdate = '2014/4/23 20:29:39.0';	SELECT FavoriteCount FROM posts WHERE Id IN (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39.0')
1	SELECT comments.text FROM comments WHERE comments.postid = 107829 LIMIT 1;	SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1
1	SELECT closeddate IS NULL FROM posts WHERE id = 23853;	SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
1	SELECT users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.id = '65041';	SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041
1	SELECT count(posts.owneruserid) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Tiago Pasqualini';	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'
1	SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid WHERE votes.id = '6347';	SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347
0	SELECT votes.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.title LIKE '%data visualization%';	SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms')
0	SELECT count(posts.id) / count(votes.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE posts.owneruserid = '24';	SELECT (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) * 1.0 / (SELECT COUNT(Id) FROM votes WHERE UserId = 24) AS ratio;
1	SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';	SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
1	SELECT text FROM comments WHERE score = 17;	SELECT Text FROM comments WHERE Score = 17
1	SELECT displayname FROM users WHERE websiteurl = 'http://stackoverflow.com';	SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
1	SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'SilentGhost';	SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'SilentGhost')
0	SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93';	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'thank you user93!')
1	SELECT text FROM comments WHERE userid = ( SELECT id FROM users WHERE displayname = 'A Lion' );	SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
1	SELECT users.displayname, users.reputation FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Understanding what Dassault iSight is doing?';	SELECT Reputation FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Title = 'Understanding what Dassault iSight is doing?')
1	SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'
0	SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Necromancer';	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer') LIMIT 10
1	SELECT posthistory.userdisplayname FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';	SELECT DisplayName FROM users WHERE Id IN (SELECT T2.UserId FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?')
1	SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.comment = 'Edited';	SELECT T4.Title FROM posts AS T4 WHERE T4.id IN (SELECT T1.Id FROM posts AS T1 JOIN postHistory AS T2 ON T1.Id = T2.PostId Join users AS T3 ON T2.UserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa')
0	SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny';	SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.Id
1	SELECT text FROM comments WHERE postid = ( SELECT id FROM posts WHERE title = 'Why square the difference instead of taking the absolute 1 in standard deviation?' );	SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
1	SELECT sum(votes.bountyamount) FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title LIKE '%data%';	SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'
0	SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.bountyamount = 50;	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%variance%') AND BountyAmount = 50)
0	SELECT avg(posts.viewcount) FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'humor';	SELECT vc, posts.Title, comments.Text FROM (SELECT Tags, AVG(distinct ViewCount) as vc FROM posts WHERE Tags = '<humor>') AS T JOIN posts on T.Tags = posts.Tags JOIN comments on posts.Id = comments.PostId
1	SELECT count(comments.id) FROM comments WHERE comments.userid = 13;	SELECT COUNT(Id) FROM comments WHERE UserId = 13
0	SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;	SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;	SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )
0	SELECT count(id) FROM badges WHERE name = 'Supporter' AND year(date) = 2011;	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
0	SELECT count(*) FROM badges WHERE count > 5;	SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5
0	SELECT count(DISTINCT users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' OR badges.name = 'Supporter' AND users.location = 'New York';	SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teachers') AND T2.Location = 'New York';
1	SELECT users.displayname, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;	SELECT T2.Id, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
0	SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY posthistory.postid HAVING COUNT(posthistory.postid) = 1 AND users.views >= 1000;	SELECT DISTINCT U.Id FROM users U INNER JOIN postHistory PH ON U.Id = PH.UserId WHERE U.Views >= 1000 GROUP BY PH.UserId, PH.PostId HAVING COUNT(*) = 1;
0	SELECT badges.name FROM comments INNER JOIN badges ON comments.userid = badges.userid GROUP BY comments.userid ORDER BY count(comments.id) DESC LIMIT 1;	SELECT T2.Name FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId) AS T1 JOIN badges T2 ON T1.UserId = T2.UserId WHERE T1.CommentCount = (SELECT MAX(CommentCount) FROM (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId))
0	SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'India';	SELECT COUNT(DISTINCT T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'
0	SELECT cast(sum(CASE WHEN Year(badges.date) = 2010 THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) - cast(sum(CASE WHEN Year(badges.date) = 2011 THEN 1 ELSE 0 END) AS REAL) * 100 / count(badges.name) FROM badges;	SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'
1	SELECT posthistory.posthistorytypeid, count(DISTINCT comments.userid) FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;	SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720
1	SELECT postlinks.relatedpostid , posts.viewcount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = 61217;	SELECT T1.ViewCount, T2.RelatedPostId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217;
1	SELECT posts.score, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.id = 395;	SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395
1	SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;	SELECT Id, OwnerUserId FROM posts WHERE Score > 60
1	SELECT SUM(posts.favoritecount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 686 AND votes.creationdate LIKE '2011%';	SELECT SUM(FavoriteCount) FROM posts WHERE Id IN (SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011')
0	SELECT AVG(users.upvotes), AVG(users.age) FROM users INNER JOIN posts ON users.id = posts.owneruserid GROUP BY posts.owneruserid HAVING count(posts.owneruserid) > 10;	SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId
0	SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Announcer';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';
0	SELECT badges.name FROM badges WHERE badges.date = '2010-07-19 19:39:08';	SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'
1	SELECT count(*) FROM comments WHERE score > 60;	SELECT COUNT(id) FROM comments WHERE score > 60
1	SELECT text FROM comments WHERE creationdate = '2010-07-19 19:16:14.0';	SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
1	SELECT count(*) FROM posts WHERE score = 10;	SELECT COUNT(id) FROM posts WHERE Score = 10
0	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.reputation = ( SELECT max(reputation) FROM users );	SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users)
1	SELECT users.reputation FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date = '2010-07-19 19:39:08.0';	SELECT Reputation FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
1	SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'
1	SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY';	SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'
0	SELECT cast(count(badges.name = 'Teacher') AS REAL) * 100 / count(users.id) FROM badges INNER JOIN users ON badges.userid = users.id;	SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS Percentage FROM badges T1 WHERE T1.Name = 'Teacher'
0	SELECT cast(count(badges.userid) AS REAL) * 100 / ( SELECT count(id) FROM users ), users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.age BETWEEN 13 AND 18;	SELECT CAST( SUM( IIF( T.Age BETWEEN 13 AND 18, 1, 0 ) ) AS REAL ) * 100 / COUNT(T.Id) FROM ( SELECT Id, Age FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer') ) T
1	SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0';	SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
1	SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.creationdate = '2010-07-19 19:37:33.0';	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'
0	SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';	SELECT Age FROM users WHERE Id IN (SELECT UserId FROM badges) AND Location = 'Vienna, Austria' AND Age IS NOT NULL;
0	SELECT count(badges.userid) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter' AND users.age BETWEEN 19 AND 65;	SELECT COUNT(DISTINCT T1.UserId) FROM badges T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Age BETWEEN 19 AND 65 AND T1.Name = 'Supporter';
1	SELECT users.views FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.date LIKE '2010-07-19 19:39:08.0';	SELECT Views FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
0	SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY users.reputation ASC LIMIT 1;	SELECT T2.Name FROM badges T2 JOIN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users WHERE Reputation IS NOT NULL)) T1 ON T2.UserId = T1.Id;
1	SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'
0	SELECT count(badges.name) FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.age > 65 AND badges.name = 'Supporter';	SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'
1	SELECT users.displayname FROM users WHERE users.id = 30;	SELECT DisplayName FROM users WHERE Id = 30
1	SELECT count(users.id) FROM users WHERE users.location = 'New York';	SELECT COUNT(Id) FROM users WHERE Location = 'New York'
1	SELECT count(votes.id) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';	SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
1	SELECT count(id) FROM users WHERE age BETWEEN 19 AND 65;	SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65
0	SELECT displayname FROM users ORDER BY views DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users WHERE Views IS NOT NULL)
0	SELECT cast(sum(CASE WHEN votes.creationdate LIKE '2010%' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM votes WHERE votes.creationdate LIKE '2010%';	SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes
1	SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'John Stauffer';	SELECT Tags FROM posts WHERE Id IN (SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'John Salvatier')
1	SELECT count(*) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo';	SELECT COUNT(*) FROM posts JOIN users on posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo';
1	SELECT count(votes.id) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Harlan';	SELECT COUNT(*) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE DisplayName = 'Harlan');
1	SELECT posts.id FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'slashnick' ORDER BY posts.answercount DESC LIMIT 1;	SELECT Id FROm (SELECT posts.Id, rank() over (ORDER BY posts.AnswerCount DESC ) as rk FROM posts JOIN users on posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick') WHERE rk = 1
1	SELECT posts.id FROM posts WHERE posts.ownerdisplayname = 'Harvey Motulsky' OR posts.ownerdisplayname = 'Noah Snyder' GROUP BY posts.id ORDER BY SUM(posts.viewcount) DESC LIMIT 1;	SELECT Id FROM (SELECT Id, rank() over (ORDER BY ViewCount DESC ) as rk FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder')) WHERE rk = 1
1	SELECT count(postid) FROM votes WHERE userid = (SELECT id FROM users WHERE displayname = 'Matt Parker') AND postid > 4;	SELECT count(*) FROM (SELECT posts.Id FROM posts JOIN users on users.Id = posts.OwnerUserId JOIN votes on posts.Id = votes.PostId WHERE users.DisplayName = 'Matt Parker' GROUP BY posts.Id HAVING count(*) > 4)
1	SELECT count(comments.score) FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;	SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60
1	SELECT tags.tagname FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE users.displayname = 'Mark Meckes' AND tags.id NOT IN ( SELECT comments.id FROM comments WHERE comments.userid = users.id );	SELECT DISTINCT T2.Tags FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0;
0	SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer')
1	SELECT cast(count(DISTINCT CASE WHEN tags.tagname = 'r' THEN posts.id ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.id) FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'Community';	SELECT (SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id JOIN tags T3 ON T1.Id = T3.ExcerptPostId WHERE T2.DisplayName = 'Community' AND T3.TagName = 'r') * 100 / (SELECT COUNT(DISTINCT T1.Id) FROM posts T1 JOIN users T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community')
1	SELECT sum(CASE WHEN users.displayname = 'Mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN users.displayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM posts INNER JOIN users ON posts.owneruserid = users.id;	SELECT SUM(IIF(T1.DisplayName = 'Mornington', T2.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T2.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
0	SELECT count(badges.name) FROM badges INNER JOIN users ON badges.userid = users.id WHERE year(badges.date) = 2014 AND badges.name = 'Commentator';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'
0	SELECT count(*) FROM posts WHERE posts.creaiondate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';	SELECT COUNT(*) FROM posts WHERE date(CreaionDate) = '2010-07-21'
1	SELECT users.displayname , users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );	SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
1	SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';	SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
1	SELECT count(comments.score) FROM comments WHERE comments.userid = 13 AND comments.score < 60;	SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60
0	SELECT posthistory.text, users.displayname FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id INNER JOIN users ON posthistory.userid = users.id WHERE posts.score > 60;	SELECT DISTINCT p.Title, u.DisplayName FROM posts p JOIN comments c ON p.Id = c.PostId JOIN users u ON c.UserId = u.Id WHERE c.Score > 60;
0	SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole' AND year(badges.date) = 2011;	SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'
1	SELECT users.displayname , users.websiteurl FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.favoritecount > 150;	SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150
1	SELECT posthistory.id, posthistory.creationdate, posthistory.posthistorytypeid, posthistory.text FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';	SELECT T2.Id, T2.LastEditDate, count(*) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T2.Id
0	SELECT users.lastaccessdate, users.location FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Outliers';	SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers');
1	SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.relatedpostid WHERE posts.title = 'How to tell if something happened in a data set which monitors a 1 over time';	SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'
0	SELECT comments.postid, badges.name FROM comments INNER JOIN badges ON comments.userid = badges.userid WHERE comments.userdisplayname = 'Samuel' AND YEAR(comments.creationdate) = 2013;	SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'
0	SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Id IN ( SELECT OwnerUserId FROM posts WHERE ViewCount = ( SELECT MAX(ViewCount) FROM posts ) )
1	SELECT users.displayname , users.location FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE tags.tagname = 'hypothesis-testing';	SELECT DisplayName, Location FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ExcerptPostId FROM tags WHERE TagName = 'hypothesis-testing'));
1	SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';	SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'
0	SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.parentid IS NOT NULL ORDER BY posts.score DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE Id IN (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)))
0	SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;	SELECT DisplayName, WebsiteUrl FROM users WHERE Id IN (SELECT UserId FROM votes WHERE VoteTypeId = 8 AND BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8));
1	SELECT posts.title FROM posts ORDER BY posts.viewcount DESC LIMIT 5;	WITH top AS ( SELECT ViewCount FROM posts ORDER BY ViewCount DESC LIMIT 5 ) SELECT Title FROM posts WHERE ViewCount IN top
1	SELECT count(id) FROM tags WHERE count BETWEEN 5000 and 7000;	SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000
0	SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1;	SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )
0	SELECT users.age FROM users ORDER BY users.reputation DESC LIMIT 1;	SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
0	SELECT count(*) FROM votes WHERE YEAR(creationdate) = 2011 AND bountyamount = 50;	SELECT COUNT(DISTINCT T1.PostId) FROM votes T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2011' AND T1.BountyAmount = 50 HAVING COUNT(T1.PostId) > 0;
0	SELECT id FROM users ORDER BY age LIMIT 1;	SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )
0	SELECT posts.score FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id ORDER BY tags.count DESC LIMIT 1;	SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'
0	SELECT cast(sum(posts.answercount) AS REAL) / 12 FROM posts WHERE YEAR(posts.creationdate) = 2010 AND posts.answercount <= 2;	SELECT COUNT(*) / 12 AS AverageMonthlyLinks FROM postLinks PL JOIN posts P ON PL.PostId = P.Id WHERE strftime('%Y', PL.CreationDate) = '2010' AND P.AnswerCount <= 2;
1	SELECT posts.id FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 1465 GROUP BY posts.id ORDER BY max(posts.favoritecount) DESC LIMIT 1;	WITH T AS ( SELECT Id, FavoriteCount FROM posts WHERE Id IN ( SELECT PostId FROM votes WHERE UserId = 1465 ) ) SELECT Id FROM T WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM T)
1	SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;	SELECT Title FROM posts WHERE Id IN (SELECT PostId FROM postLinks WHERE CreationDate = (SELECT MIN(CreationDate) FROM postLinks));
0	SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id GROUP BY users.displayname ORDER BY count(badges.name) DESC LIMIT 1;	SELECT T2.DisplayName FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T1 JOIN users as T2 ON T1.UserId = T2.Id WHERE T1.BadgeCount = (SELECT MAX(BadgeCount) FROM (SELECT UserId, COUNT(*) as BadgeCount FROM badges GROUP BY UserId) as T3)
0	SELECT MIN(creationdate) FROM votes WHERE userid = ( SELECT id FROM users WHERE displayname = 'chl' );	SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl' GROUP BY u.Id
0	SELECT creaiondate FROM posts ORDER BY creaiondate ASC LIMIT 1;	SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users) )
1	SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Autobiographer' ORDER BY badges.date LIMIT 1;	SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))
1	SELECT count(users.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.location = 'United Kingdom' AND posts.favoritecount >= 4;	SELECT COUNT(DISTINCT T1.Id) FROM users T1 JOIN posts T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4;
0	SELECT AVG(votes.postid) FROM votes INNER JOIN users ON votes.userid = users.id ORDER BY users.age DESC LIMIT 1;	SELECT AVG(post_count) FROM ( SELECT COUNT(DISTINCT T2.PostId) AS post_count FROM users T1 LEFT JOIN votes T2 ON T1.Id = T2.UserId WHERE T1.Age = ( SELECT MAX(Age) FROM users ) GROUP BY T2.UserId )
0	SELECT users.displayname FROM users ORDER BY users.reputation DESC LIMIT 1;	SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
1	SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;	SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000
1	SELECT users.displayname FROM users WHERE users.age BETWEEN 19 AND 65;	SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
0	SELECT count(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND YEAR(posts.creationdate) = 2010;	SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'
1	SELECT id , title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Harvey Motulsky' ORDER BY views DESC LIMIT 1 );	SELECT P.Id, P.Title FROM posts P WHERE P.OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) AND P.ViewCount = ( SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' ) )
0	SELECT id , title FROM posts ORDER BY score DESC LIMIT 1;	SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE Score IS NOT NULL);
1	SELECT AVG(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';	SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'
0	SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR(posts.creationdate) = 2011;	SELECT DisplayName FROM users WHERE Id IN (SELECT OwnerUserId FROM posts WHERE ViewCount > 20000 AND strftime('%Y', CreaionDate) = '2011')
0	SELECT posts.id, posts.ownerdisplayname FROM posts WHERE year(posts.creaiondate) = 2010 ORDER BY posts.favoritecount DESC LIMIT 1;	SELECT P.Id, U.DisplayName FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010') AND strftime('%Y', CreationDate) = '2010';
0	SELECT DIVidE(count(id where creationdate = 2011 and reputation > 1000), count(id) ) * 100 as percentage FROM users INNER JOIN posts ON users.id = posts.owneruserid;	SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
0	SELECT DIV(count(id), count(id where age BETWEEN 13 and 18)) as percentage FROM users;	SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users
0	SELECT sum(posts.viewcount) FROM posts WHERE posts.title = 'Computer Game Datasets';	SELECT posts.ViewCount, users.DisplayName FROM posts JOIN users on posts.LastEditorUserId = users.Id WHERE posts.Id IN (SELECT PostId FROM postHistory WHERE Text = 'Computer Game Datasets')
0	SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT AVG(posts.viewcount) FROM posts);	SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts WHERE ViewCount IS NOT NULL);
0	SELECT MAX(score) FROM posts;	SELECT COUNT(c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Score = (SELECT MAX(Score) FROM posts);
1	SELECT count(posts.id) FROM posts WHERE posts.viewcount > 35000 AND posts.commentcount = 0;	SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
1	SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183;	SELECT T2.DisplayName, T2.Location FROM posts T1 JOIN users T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Id = 183;
1	SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;	WITH T AS ( SELECT T1.Name, T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ) SELECT Name FROM T WHERE Date = (SELECT MAX(Date) FROM T)
1	SELECT count(*) FROM users WHERE users.age BETWEEN 19 AND 65 AND users.upvotes > 5000;	SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000
0	SELECT SUBTRACT(date from stats_badges, creationdate) FROM users WHERE users.displayname = 'Zolomon';	SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
0	SELECT count(DISTINCT posts.id) , count(DISTINCT comments.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid INNER JOIN comments ON posts.id = comments.postid ORDER BY users.creationdate DESC LIMIT 1;	SELECT COUNT(DISTINCT P.Id) AS NumberOfPosts, COUNT(DISTINCT C.Id) AS NumberOfComments FROM users U JOIN posts P ON U.Id = P.OwnerUserId JOIN comments C ON U.Id = C.UserId WHERE U.CreationDate = (SELECT MAX(CreationDate) FROM users)
1	SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title LIKE 'Analysing wind data with R' ORDER BY comments.creationdate DESC LIMIT 1;	SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' AND T3.Id IN (SELECT ID FROM (SELECT T4.ID, rank() over (ORDER BY T4.CreationDate DESC ) as rk FROM users AS T5 INNER JOIN posts AS T6 ON T5.Id = T6.OwnerUserId INNER JOIN comments AS T4 ON T6.Id = T4.PostId WHERE T6.Title = 'Analysing wind data with R') WHERE rk <= 10)
0	SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';	SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol' GROUP BY Name;
1	SELECT count(*) FROM tags WHERE tagname = 'careers';	SELECT COUNT(DISTINCT ExcerptPostId) FROM tags WHERE TagName = 'careers'
1	SELECT users.reputation, users.views FROM users WHERE users.displayname = 'Jarrod Dixon';	SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
0	SELECT sum(posts.answercount), sum(posts.commentcount) FROM posts WHERE posts.title = 'Clustering 1D data';	SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'
1	SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';	SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
0	SELECT count(votes.id) FROM votes WHERE votes.bountyamount >= 30;	SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30 AND PostId IS NOT NULL;
0	SELECT DIVIDE(count(stats_posts.id WHERE stats_posts.score >= 50), count(stats_posts.id)) AS percentage FROM stats_posts INNER JOIN users ON stats_posts.userid = users.id WHERE users.reputation = ( SELECT MAX(reputation) FROM users );	SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation
1	SELECT count(posts.id) FROM posts WHERE posts.score < 20;	SELECT COUNT(id) FROM posts WHERE Score < 20
1	SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count <= 20;	SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15
1	SELECT tags.excerptpostid , tags.wikipostid FROM tags WHERE tags.tagname = 'sample';	SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
1	SELECT users.reputation, users.upvotes FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text = 'fine, you win :)';	SELECT Reputation, UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'fine, you win :)')
0	SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posthistory.comment = 'regression' AND posts.title = 'How can I adapt ANOVA for binary data?';	SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'
0	SELECT comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount BETWEEN 100 and 150 ORDER BY comments.score DESC LIMIT 1;	WITH scores AS ( SELECT Text, Score FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount >= 100 AND ViewCount <= 150 ) ) SELECT Text FROM scores WHERE Score = (SELECT MAX(Score) FROM scores)
0	SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE '%http://%';	SELECT U.CreationDate, U.Age FROM users U WHERE EXISTS (SELECT 1 FROM comments C WHERE C.UserId = U.Id AND C.Text LIKE '%http://%')
1	SELECT count(DISTINCT posts.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;	SELECT COUNT(DISTINCT T1.PostId) FROM comments T1 JOIN posts T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;
0	SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.commentcount = 1 AND comments.score = 0;	SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0
0	SELECT SUM(users.age) FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.score = 0;	SELECT COUNT(DISTINCT T1.UserId) FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;
1	SELECT posts.id, comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';	SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'
1	SELECT users.upvotes FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text LIKE 'R is also lazy evaluated.';	SELECT UpVotes FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.')
1	SELECT text FROM comments WHERE userdisplayname = 'Harvey Motulsky';	SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
1	SELECT DISTINCT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;	SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0
0	SELECT cast((count(userid) - count(userid where upvotes = 0)) AS REAL) * 100 / count(userid) FROM comments WHERE score BETWEEN 5 AND 10;	SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(DISTINCT UserId) FROM comments WHERE Score BETWEEN 5 AND 10)) AS Percentage FROM comments T1 JOIN users T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10 AND T2.UpVotes = 0;
0	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = '3-D Man';	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM hero_power T2 INNER JOIN superhero T1 ON T1.id = T2.hero_id WHERE T1.superhero_name = '3-D Man');
0	SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';	SELECT COUNT(DISTINCT T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength';
0	SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;	SELECT COUNT(DISTINCT T3.id) FROM superhero T3 JOIN hero_power T2 ON T3.id = T2.hero_id JOIN superpower T1 ON T2.power_id = T1.id WHERE T1.power_name = 'Super Strength' AND T3.height_cm > 200;
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.full_name HAVING COUNT(superhero.full_name) > 15;	SELECT s.full_name FROM superhero s JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(hero_id) > 15) hp ON s.id = hp.hero_id;
1	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
0	SELECT count(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON colour.id = superhero.eye_colour_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';	SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id JOIN hero_power AS T3 ON T1.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility';
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.colour = 'Blond';	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'
1	SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
0	SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1;	SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'Marvel Comics' ORDER BY height_cm DESC;
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
0	SELECT count(superhero.superhero_name) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE publisher.publisher_name = 'Marvel Comics' AND colour.colour = 'Blue';	SELECT T3.colour, COUNT(T1.id) AS popularity FROM superhero T1 JOIN publisher T2 ON T1.publisher_id = T2.id JOIN colour T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' GROUP BY T3.colour ORDER BY popularity DESC;
1	SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
0	SELECT SUM(superpower.power_name = 'Super Strength') / COUNT(superhero.id) * 100 FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics';	SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)
1	SELECT count(*) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE publisher.publisher_name = 'DC Comics';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
0	SELECT t.publisher_name FROM ( SELECT publisher.publisher_name, MIN(hero_attribute.attribute_1) FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' GROUP BY publisher.publisher_name ) t;	SELECT publisher_name FROM publisher WHERE id IN (SELECT publisher_id FROM (SELECT T1.publisher_id, rank() over (ORDER BY T3.attribute_value) as rk FROM superhero AS T1 INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed') WHERE rk = 1)
0	SELECT count(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Gold') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
1	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_1 ASC LIMIT 1;	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_1 < 50;	SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Death Touch'));
0	SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_1 = 100;	SELECT COUNT(DISTINCT T1.id) FROM superhero T1 JOIN gender T2 ON T1.gender_id = T2.id JOIN hero_attribute T3 ON T1.id = T3.hero_id JOIN attribute T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100;
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.superhero_name ORDER BY count(superhero.superhero_name) DESC LIMIT 1;	SELECT superhero_name FROM (SELECT T1.superhero_name, rank() over (ORDER BY COUNT(T2.hero_id) DESC) as rk FROM superhero AS T1 LEFT JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.id) WHERE rk = 1
1	SELECT count(superhero.id) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';	SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
0	SELECT cast(count(CASE WHEN alignment.alignment = 'Bad' THEN superhero.id ELSE NULL END) AS REAL) * 100/ count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics';	SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero)) AS percentage_bad, COUNT(CASE WHEN T3.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_bad_count FROM superhero T1 INNER JOIN alignment T2 ON T1.alignment_id = T2.id INNER JOIN publisher T3 ON T1.publisher_id = T3.id WHERE T2.alignment = 'Bad';
0	SELECT SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics') FROM publisher;	SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
1	SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';	SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
0	SELECT AVG(attribute_1) FROM hero_attribute;	SELECT AVG(attribute_value) FROM hero_attribute
1	SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;	SELECT COUNT(id) FROM superhero WHERE full_name IS NULL
1	SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.id = 75;	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
0	SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Deathlok';	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero_name = 'Deathlok');
1	SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';	SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'
0	SELECT t.power_name FROM ( SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5 ) t;	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T3.gender = 'Male') LIMIT 5
1	SELECT superhero.superhero_name FROM race INNER JOIN superhero ON race.id = superhero.race_id WHERE race.race = 'Alien';	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
0	SELECT superhero.superhero_name FROM superhero WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = 1;	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'
1	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;	SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56
0	SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;	SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'
1	SELECT count(superhero.id) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Bad';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169
1	SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.hair_colour_id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.height_cm = 185 AND race.race = 'human';	SELECT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'human';
0	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;	SELECT colour FROM (SELECT T2.colour, rank() over (ORDER BY T1.weight_kg DESC) as rk FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id) WHERE rk = 1
1	SELECT cast(sum(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.height_cm BETWEEN 150 AND 180;	SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180
0	SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' AND superhero.weight_kg > 0.79 * ( SELECT avg(weight_kg) FROM superhero );	SELECT T1.superhero_name FROM superhero T1 JOIN gender T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero WHERE weight_kg > 0)
0	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superpower.power_name ORDER BY count(superpower.power_name) DESC LIMIT 1;	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power GROUP BY power_id HAVING COUNT(power_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(power_id) as cnt FROM hero_power GROUP BY power_id)));
0	SELECT hero_attribute.attribute_1 FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Abomination';	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'
1	SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;	SELECT T2.power_name FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1;
0	SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';	SELECT COUNT(DISTINCT T2.hero_id) FROM superpower T1 JOIN hero_power T2 ON T1.id = T2.power_id WHERE T1.power_name = 'Stealth';
0	SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1;	SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')
0	SELECT COUNT(superhero.id) / SUM(skin_colour_id = 1) FROM superhero WHERE skin_colour_id = 1;	SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id
1	SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND publisher.publisher_name = 'Dark Horse Comics' GROUP BY superhero.superhero_name ORDER BY max(hero_attribute.attribute_1) DESC LIMIT 1;	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T2.attribute_value = (SELECT MAX(T5.attribute_value) FROM superhero AS T6 INNER JOIN hero_attribute AS T5 ON T6.id = T5.hero_id INNER JOIN publisher AS T7 ON T7.id = T6.publisher_id WHERE T7.publisher_name = 'Dark Horse Comics')
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
0	SELECT superhero.superhero_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Flight';	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Flight'));
1	SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Dark Horse Comics';	SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'
0	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id AND superhero.hair_colour_id = superhero.eye_colour_id;	SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';	SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
0	SELECT SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female') FROM superhero WHERE gender_id = ( SELECT id FROM gender WHERE gender = 'Female' );	SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'
1	SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.full_name = 'Charles Chandler';	SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
1	SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';	SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Adaptation'));
1	SELECT count(DISTINCT hero_power.power_id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.superhero_name = 'Amazo';	SELECT COUNT(DISTINCT power_id) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE superhero_name = 'Amazo');
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';	SELECT power_name FROM superpower WHERE id IN (SELECT HP.power_id FROM hero_power HP JOIN superhero SH ON HP.hero_id = SH.id WHERE SH.full_name = 'Hunter Zolomon');
1	SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';	SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
1	SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'
0	SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Gold';	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'
1	SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';	SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
1	SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
0	SELECT count(hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1;	SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = (SELECT MAX(T3.attribute_value) FROM hero_attribute AS T3 JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength')
1	SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.superhero_name = 'Cameron Hicks';	SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'
0	SELECT SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) / COUNT(*) * 100 FROM superhero WHERE publisher_name = 'Marvel Comics';	SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
1	SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';	SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
0	SELECT sum(CASE WHEN t.full_name = 'Emil Blonsky' THEN t.weight_kg ELSE 0 END) - sum(CASE WHEN t.full_name = 'Charles Chandler' THEN t.weight_kg ELSE 0 END) FROM superhero t;	SELECT (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference FROM superhero LIMIT 1;
1	SELECT avg(superhero.height_cm) FROM superhero;	SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';	SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power JOIN superhero ON superhero.id = hero_power.hero_id WHERE superhero_name = 'Abomination');
1	SELECT count(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;	SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_1 DESC LIMIT 1;	SELECT T1.superhero_name FROM superhero AS T1 WHERE id IN (SELECT hero_id FROM (SELECT T2.hero_id, rank() over (ORDER BY T2.attribute_value DESC) as rk FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed') WHERE rk = 1)
1	SELECT count(superhero.id) FROM superhero WHERE superhero.alignment_id = 3;	SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
0	SELECT attribute.attribute_name, hero_attribute.attribute_1 FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';	SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = 9;	SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'
1	SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Hawkman' OR superhero.superhero_name = 'Karate Kid' OR superhero.superhero_name = 'Speedy';	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
1	SELECT count(*) FROM superhero WHERE publisher_id = 1;	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1
0	SELECT cast(sum(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / count(superhero.id) FROM superhero;	SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id
0	SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;	SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id
0	SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1;	SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
1	SELECT superpower.id FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'cryokinesis';	SELECT id FROM superpower WHERE power_name = 'cryokinesis'
1	SELECT superhero_name FROM superhero WHERE id = 294;	SELECT superhero_name FROM superhero WHERE id = 294
1	SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;	SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0;
1	SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = '<NAME>';	SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.full_name = 'Helen Parr')
1	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;	SELECT T2.race FROM superhero T1 JOIN race T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188;
1	SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = 38;	SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
0	SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';	SELECT race.race FROM race INNER JOIN (SELECT race_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute))) AS max_hero ON race.id = max_hero.race_id
1	SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';	SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'
1	SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;	SELECT S.full_name FROM superhero S JOIN colour C ON S.eye_colour_id = C.id WHERE C.colour = 'Blue' LIMIT 5;
0	SELECT avg(hero_attribute.attribute_1) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.alignment_id = 3;	SELECT AVG(T2.attribute_value) AS average_attribute_value FROM superhero T1 JOIN hero_attribute T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3 AND T2.attribute_value IS NOT NULL;
0	SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.skin_colour_id WHERE superhero.id = 100;	SELECT colour FROM (SELECT * FROM colour WHERE id IN (SELECT skin_colour_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value = 100))) AS SubQuery;
0	SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE gender.gender = 'Female' AND alignment.alignment = 'Good';	SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.alignment_id = 1 and T1.gender_id = 2
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_1 BETWEEN 75 AND 80;	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_attribute WHERE attribute_value BETWEEN 75 AND 80);
0	SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'blue' AND gender.gender = 'male';	SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'
0	SELECT SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN alignment ON superhero.alignment_id = alignment.id;	SELECT CAST(COUNT(CASE WHEN gender_id = 2 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM superhero WHERE alignment_id = 2
0	SELECT SUM(colour.id = 7) - SUM(colour.id = 1) AS difference FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;	SELECT (COUNT(*) FILTER (WHERE eye_colour_id = 7) - COUNT(*) FILTER (WHERE eye_colour_id = 1)) AS difference FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
0	SELECT hero_attribute.attribute_1 FROM attribute INNER JOIN hero_attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Strength' AND superhero.superhero_name = 'Hulk';	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'
0	SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';	SELECT power_name FROM superpower WHERE id IN (SELECT HP.power_id FROM hero_power HP JOIN superhero SH ON HP.hero_id = SH.id WHERE SH.superhero_name = 'Ajax');
0	SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green' AND superhero.alignment_id = 2;	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'
1	SELECT count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';	SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'
0	SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name;	SELECT superhero_name FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = 'Wind Control')) ORDER BY superhero_name ASC;
0	SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';	SELECT T5.gender FROM (SELECT gender_id FROM superhero AS T2 WHERE T2.id IN (SELECT T3.hero_id FROM hero_power AS T3 INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force')) AS T1 JOIN gender AS T5 ON T1.gender_id = T5.id
0	SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;	SELECT superhero_name FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') AND weight_kg = (SELECT MAX(weight_kg) FROM superhero WHERE weight_kg IS NOT NULL AND weight_kg > 0 AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics'))
1	SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN race ON superhero.race_id = race.id WHERE race.race <> 'Human' AND publisher.publisher_name = 'Dark Horse Comics';	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'
0	SELECT COUNT(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed';	SELECT COUNT(DISTINCT T3.id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Speed')
0	SELECT SUM(publisher_name = 'DC Comics') - SUM(publisher_name = 'Marvel Comics') AS difference FROM publisher;	SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
0	SELECT attribute.attribute_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_1 ASC LIMIT 1;	SELECT attribute_name FROM attribute WHERE id IN (SELECT attribute_id FROM (SELECT hero_attribute.attribute_id, rank() over (ORDER BY hero_attribute.attribute_value) as rk FROM hero_attribute JOIN superhero ON superhero.id = hero_attribute.hero_id WHERE superhero.superhero_name = 'Black Panther') WHERE rk = 1)
1	SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.superhero_name = 'Abomination';	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
0	SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;	SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
1	SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';	SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
1	SELECT cast(count(CASE WHEN gender.gender = 'Female' THEN superhero.id ELSE NULL END) AS REAL) * 100 / count(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'George Lucas';	SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'
1	SELECT cast(sum(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';	SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
1	SELECT count(*) FROM superhero WHERE full_name LIKE 'John%';	SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'
0	SELECT superhero.id FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id ORDER BY hero_attribute.attribute_1 ASC LIMIT 1;	SELECT DISTINCT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
1	SELECT full_name FROM superhero WHERE superhero_name = 'Alien';	SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
0	SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = 1;	SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'
0	SELECT hero_attribute.attribute_1 FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';	SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
1	SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;	SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40
0	SELECT avg(superhero.height_cm) FROM superhero WHERE superhero.alignment_id = 1;	SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
0	SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';	SELECT DISTINCT T1.id FROM superhero T1 JOIN hero_power T2 ON T1.id = T2.hero_id JOIN superpower T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence';
0	SELECT colour FROM colour WHERE id = (SELECT eye_colour_id FROM superhero WHERE superhero_name = 'Blackwulf');	SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
0	SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.height_cm > 0.8 * ( SELECT avg(height_cm) FROM superhero );	SELECT power_name FROM superpower WHERE superpower.id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm * 100 > (SELECT AVG(height_cm) FROM superhero) * 80);
0	SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q1 = '1:26.572' AND races.raceid = 18;	SELECT driverRef FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 20 AND q1 IS NOT NULL ORDER BY q1 DESC LIMIT 5)
0	SELECT drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 19 AND laptimes.lap = 2 AND laptimes.milliseconds = ( SELECT MIN(milliseconds) FROM laptimes WHERE laptimes.raceid = 19 AND laptimes.lap = 2 );	SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL AND T1.q2 = (SELECT MIN(q2) AS min_q2 FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)
0	SELECT races.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Shanghai';	SELECT DISTINCT year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.location = 'Shanghai';
1	SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya';
0	SELECT DISTINCT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany';	SELECT T2.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany';
0	SELECT circuits.circuitid FROM constructors INNER JOIN circuits ON constructors.constructorid = circuits.circuitid WHERE constructors.name = 'Renault';	SELECT position FROM constructorStandings WHERE constructorId = (SELECT constructorId FROM constructors WHERE name = 'Renault')
0	SELECT count(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.country != 'Asia' AND circuits.country != 'Europe' AND seasons.year = 2010;	SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010
0	SELECT DISTINCT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain';	SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'
0	SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';	SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE name = 'Australian Grand Prix');
0	SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';
0	SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';	SELECT T2.time FROM races T2 JOIN circuits T1 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';
0	SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';	SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'
1	SELECT constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;	SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1
1	SELECT qualifying.q1 FROM qualifying WHERE qualifying.driverid = 354 AND qualifying.raceid = 354;	SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'
0	SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.raceid = 355 AND qualifying.q2 = '0:01:40';	SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'
1	SELECT drivers.number FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = 903 AND qualifying.q3 = '1:01:54';	SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'
0	SELECT count(DISTINCT driverid) FROM results WHERE raceid NOT IN ( SELECT raceid FROM races WHERE year = 2007 );	SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL
1	SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;	SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901
0	SELECT count(laptimes.driverid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.date = '2015-11-29';	SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL
0	SELECT drivers.driverid FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 ORDER BY drivers.dob ASC LIMIT 1;	SELECT forename, surname FROM (SELECT T1.forename, T1.surname, rank() over (ORDER BY T1.dob ASC) as rk FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC) WHERE rk = 1
0	SELECT url FROM drivers WHERE driverid = 161;	SELECT forename, surname, url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes AS T1 WHERE raceId = 161 AND time LIKE '1:27%')
0	SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN driverstandings ON races.raceid = driverstandings.raceid WHERE results.raceid = 933 AND results.fastestlapspeed = ( SELECT MAX(fastestlapspeed) FROM results );	SELECT T1.nationality FROM drivers AS T1 WHERE driverId IN (SELECT T2.driverId FROM results AS T2 WHERE T2.raceId = 933 AND T2.fastestLapSpeed = (SELECT max(T3.fastestLapSpeed) FROM results AS T3 WHERE T3.raceId = 933));
1	SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Malaysian Grand Prix';	SELECT T2.lat, T2.lng FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix';
0	SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid INNER JOIN constructorstandings ON races.raceid = constructorstandings.raceid WHERE constructorstandings.position = 1 AND constructorresults.points = (SELECT max(constructorresults.points) FROM constructorresults WHERE constructorresults.raceid = 9);	SELECT T3.url FROM constructors T3 WHERE T3.constructorId IN (SELECT T2.constructorId FROM constructorResults T2 WHERE T2.raceId = 9 AND T2.points = (SELECT MAX(T1.points) FROM constructorResults T1 WHERE T1.raceId = 9));
0	SELECT q1 FROM qualifying WHERE driverid = 345 AND raceid = 345;	SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'
0	SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q2 = '0:01:15' AND races.raceid = '347';	SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'
0	SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q3 LIKE '0:01:33';	SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'
1	SELECT time FROM results WHERE driverid = 743 AND raceid = 743;	SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2006 AND results.position = 2;	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2
1	SELECT seasons.url FROM races INNER JOIN seasons ON races.year = seasons.year WHERE races.raceid = 901;	SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901
0	SELECT count(driverstandings.driverid) FROM driverstandings INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.date = '2015-11-29';	SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL
0	SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1;	SELECT forename, surname FROM (SELECT T1.forename, T1.surname, rank() over (ORDER BY T1.dob DESC) as rk FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC) WHERE rk = 1
1	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = 348 ORDER BY laptimes.time ASC LIMIT 1;	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM (SELECT T2.driverId, rank() over (ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348) WHERE rk = 1)
0	SELECT drivers.nationality FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.milliseconds ASC LIMIT 1;	SELECT nationality FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE fastestLapSpeed = (SELECT max(fastestLapSpeed) FROM results))
0	SELECT DIVIDE(SUBTRACT(fastestlapspeed(raceid = 853), (fastestlapspeed (raceid = 854)), (fastestlapspeed(raceid = 853)) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'resta' AND results.raceid = 853;	SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'
0	SELECT drivers.driverid, DIVIDE(COUNT(driverid where time has 1 and date = '1983-07-16'), (COUNT(driverid where date = '1983-07-16')) as percentage FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.date = '1983-07-16' GROUP BY drivers.driverid;	SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'
0	SELECT min(races.year) FROM races WHERE races.name = 'Singapore Grand Prix';	SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1
0	SELECT count(raceid) FROM races WHERE year = 2005;	SELECT name FROM races WHERE year = 2005 ORDER BY name DESC
0	SELECT name FROM races WHERE year = year(min(date)) AND month = month(min(date));	SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )
1	SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;	SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1
0	SELECT year FROM races GROUP BY year ORDER BY count(raceid) DESC LIMIT 1;	SELECT year FROM (SELECT year, rank() over (ORDER BY COUNT(round) DESC) as rk FROM races GROUP BY year) WHERE rk = 1
0	SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year <> 2000;	SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
1	SELECT circuits.country, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix' ORDER BY races.year LIMIT 1;	SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
0	SELECT max(seasons.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch';	SELECT MAX(T1.year) FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'British Grand Prix' AND T2.name = 'Brands Hatch';
0	SELECT count(races.year) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit' AND circuits.country = 'United Kindom';	SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
0	SELECT drivers.driverref, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 ORDER BY driverstandings.position;	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC
0	SELECT drivers.forename, drivers.surname FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid ORDER BY driverstandings.points DESC LIMIT 1;	SELECT forename, surname, points FROM drivers JOIN (SELECT distinct driverId, points FROM driverStandings WHERE points = (SELECT max(points) FROM driverStandings)) AS T ON drivers.driverId == T.driverId
0	SELECT drivers.surname, driverstandings.points FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY driverstandings.points DESC LIMIT 3;	SELECT forename, surname, points FROM (SELECT T3.forename, T3.surname, T2.points, rank() over (ORDER BY T2.points DESC) as rk FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC) WHERE rk <= 3;
0	SELECT drivers.driverref, races.name FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1;	SELECT milliseconds, forename, surname, name FROM (SELECT T2.milliseconds, T1.forename, T1.surname, T3.name, rank() over (ORDER BY T2.milliseconds ASC) as rk FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId) WHERE rk = 1
1	SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.driverref = 'vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix';	SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'
0	SELECT (COUNT(races.raceid) where drivers.surname = 'Hamilton', races.year >= 2010 and driverstandings.position > 1) / (COUNT(races.raceid) where drivers.surname = 'Hamilton', races.year >= 2010) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid;	SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010
0	SELECT drivers.forename, drivers.nationality, avg(results.points) FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN results ON driverstandings.driverid = results.driverid GROUP BY drivers.driverid ORDER BY count(driverstandings.wins) DESC LIMIT 1;	SELECT forename, surname, nationality, points FROM (SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) as points, rank() over (ORDER BY COUNT(T2.wins) DESC) as rk FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.driverId) WHERE rk = 1;
0	SELECT dob FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;	SELECT age, forename, surname FROM (SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob) as age, forename, surname, rank() over (ORDER BY dob DESC) as rk FROM drivers WHERE nationality = 'Japanese') WHERE rk = 1
0	SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year BETWEEN 1990 AND 2000 GROUP BY circuits.circuitid HAVING COUNT(races.raceid) = 4;	SELECT T2.circuitId FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE T1.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T1.raceId) = 4;
0	SELECT circuits.name, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;	SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006
0	SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2005 AND month(races.date) = 9;	SELECT T1.name AS race_name, T2.name AS circuit_name, T2.location FROM races T1 JOIN circuits T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T1.date) = '2005' AND strftime('%m', T1.date) = '09';
0	SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.driverref = 'yoong' AND results.position < 10;	SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20
0	SELECT count(driverstandings.wins) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.circuitref = 'sepang';	SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'
1	SELECT races.name, races.year FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = ( SELECT min(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' );	SELECT T1.name, T1.year FROM races AS T1 WHERE T1.raceId IN (SELECT raceId FROM (SELECT T2.raceId, rank() over (ORDER BY milliseconds) as rk FROM lapTimes AS T2 INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher') WHERE rk = 1)
1	SELECT avg(points) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND seasons.year = 2000;	SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000
0	SELECT min(races.year) FROM races WHERE races.name = '<NAME>';	SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(T4.year) FROM races AS T4 INNER JOIN driverStandings AS T5 ON T5.raceId = T4.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId WHERE T6.forename = 'Lewis' AND T6.surname = 'Hamilton')
1	SELECT races.name, circuits.country FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2017 ORDER BY races.date;	SELECT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC
0	SELECT races.name , races.year , circuits.location FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid GROUP BY races.raceid ORDER BY count(laptimes.lap) DESC LIMIT 1;	SELECT MAX(T3.lap) as laps, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId GROUP BY T2.raceId HAVING (laps) = (SELECT MAX(T4.lap) FROM lapTimes AS T4);
0	SELECT COUNT(races.raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name = 'European Grand Prix';	SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'
1	SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';	SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
0	SELECT name FROM circuits ORDER BY lat DESC LIMIT 1;	SELECT name FROM (SELECT name, rank() over (ORDER BY lat DESC) as rk FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')) WHERE rk = 1
1	SELECT circuits.circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';	SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
0	SELECT circuits.country FROM circuits ORDER BY circuits.alt DESC LIMIT 1;	SELECT country FROM (SELECT country, rank() over ( ORDER BY alt DESC ) as rk FROM circuits) WHERE rk = 1
1	SELECT count(code) FROM drivers WHERE code IS NULL;	SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers
0	SELECT drivers.nationality FROM drivers ORDER BY drivers.dob ASC LIMIT 1;	SELECT nationality FROM (SELECT nationality, rank() over ( ORDER BY dob ASC ) as rk FROM drivers WHERE dob IS NOT NULL) WHERE rk = 1
1	SELECT drivers.surname FROM drivers INNER JOIN constructors ON drivers.nationality = constructors.nationality WHERE constructors.nationality = 'italian';	SELECT surname FROM drivers WHERE nationality = 'italian'
0	SELECT drivers.url FROM drivers WHERE drivers.driverref = 'davidson';	SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
1	SELECT drivers.driverref FROM drivers WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis';	SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
1	SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';	SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
1	SELECT DISTINCT races.year FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Silverstone Circuit';	SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'
0	SELECT * FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'silverstone';	SELECT T2.url FROM circuits T1 JOIN races T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit';
0	SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2010 AND circuits.location = 'Abu Dhabi';	SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'
1	SELECT count(*) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';	SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'
0	SELECT races.date FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Barcelona-Catalunya';	SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
0	SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON races.year = seasons.year INNER JOIN constructors ON races.constructorid = constructors.constructorid WHERE races.name = 'Spanish Grand Prix' AND constructors.nationality = 'Spanish' AND seasons.year = 2009;	SELECT url FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009 LIMIT 1);
0	SELECT min(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1
0	SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.fastestlapspeed DESC LIMIT 1;	SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE driverId IN (SELECT driverId FROM results AS T2 WHERE T2.fastestLapSpeed IS NOT NULL AND fastestLapSpeed = (SELECT max(fastestLapSpeed) FROM results))
0	SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND results.rank = 1;	SELECT T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007;
1	SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
0	SELECT races.name FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;	SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )
0	SELECT max(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';	SELECT MAX(CAST(T2.fastestLapSpeed AS FLOAT)) AS MaxSpeed FROM races T1 JOIN results T2 ON T1.raceId = T2.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';
1	SELECT races.year FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' GROUP BY races.year;	SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
1	SELECT rank FROM results WHERE resultid = '2008' AND driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND driverref = 'hamilton' AND surname = 'Hamilton');	SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON results.driverid = drivers.driverid INNER JOIN races ON races.raceid = results.raceid WHERE results.grid = 4 AND races.year = 2008 AND races.name = 'Australian Grand Prix';	SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989
0	SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.time IS NOT NULL;	SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL
1	SELECT results.fastestlaptime FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis' AND races.year = 2008 AND races.name = 'Australian Grand Prix';	SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
0	SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND results.rank = 2;	SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON results.driverid = drivers.driverid INNER JOIN races ON races.raceid = results.raceid INNER JOIN seasons ON seasons.year = races.year WHERE races.year = 2008 AND results.position = 1;	SELECT T1.forename, T1.surname, T1.url, T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '__:__:__.___' AND T3.year = 2008;
0	SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND drivers.nationality = 'American';	SELECT COUNT(DISTINCT T3.driverId) FROM races T1 JOIN results T2 ON T1.raceId = T2.raceId JOIN drivers T3 ON T2.driverId = T3.driverId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T3.nationality = 'British';
0	SELECT count(results.resultid) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = 2008 AND races.name = 'Australian Grand Prix';	SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )
0	SELECT sum(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.driverref = 'lewis';	SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
0	SELECT avg(laptimes.milliseconds / 1000) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'
0	SELECT cast(count(CASE WHEN laptimes.time IS NOT NULL THEN laptimes.raceid ELSE NULL END) AS REAL) / count(laptimes.raceid) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008;	SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008
0	SELECT divide(subtract(results.time, results.fastestlaptime), results.time) * 100 FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008;	WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)
0	SELECT count(circuitid) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';	SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'
1	SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'USA';	SELECT lat, lng FROM circuits WHERE country = 'USA'
0	SELECT count(driverid) FROM drivers WHERE year(dob) > 1980 AND nationality = 'British';	SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'
0	SELECT avg(constructorresults.points) FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructors.nationality = 'British';	SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'
0	SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;	SELECT name FROM constructors WHERE constructorId IN (SELECT constructorId FROM (SELECT constructorId, rank() over (ORDER BY points DESC) as rk FROM constructorStandings) WHERE rk = 1)
0	SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.raceid = 18 AND constructorresults.points = 0;	SELECT T2.name FROM constructorResults T1 JOIN constructors T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0;
0	SELECT COUNT(constructors.constructorid) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE constructors.nationality = 'Japanese' AND COUNT(races.raceid) = 2;	SELECT COUNT(*) FROM (SELECT T1.constructorId FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2);
0	SELECT constructorid FROM constructorstandings WHERE position = 1;	SELECT name FROM constructors WHERE constructorId IN (SELECT constructorId FROM results WHERE rank = 1)
1	SELECT count(DISTINCT constructors.constructorid) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50;	SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'
0	SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009 AND results.time IS NOT NULL;	SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009
0	SELECT AVG(CAST(SUBSTR(results.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(results.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(results.time, 7, 2) AS REAL)) FROM results WHERE results.time IS NOT NULL;	WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL ) + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL
0	SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN results ON driverstandings.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year > 1975 AND driverstandings.position = 2;	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE rank = 2) AND STRFTIME('%Y', dob) > '1975'
1	SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.time IS NULL AND drivers.nationality = 'Italian';	SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid ORDER BY results.fastestlaptime LIMIT 1;	SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL))
0	SELECT results.fastestlap FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND results.resultid = 2009;	SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'
1	SELECT avg(results.fastestlapspeed) FROM races INNER JOIN results ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;	SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
0	SELECT races.name, races.year FROM races INNER JOIN results ON races.raceid = results.raceid WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1;	SELECT name, year FROM races WHERE raceId IN (SELECT raceId FROM results WHERE milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL));
0	SELECT COUNT(driverid) / COUNT(driverid) * 100 FROM drivers WHERE year(dob) < 1985 AND laps > 50;	SELECT CAST(COUNT(DISTINCT CASE WHEN STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 THEN T3.driverId END) AS REAL) * 100 / COUNT(DISTINCT T3.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005
0	SELECT count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.milliseconds < 7200 AND drivers.nationality = 'French';	SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120
0	SELECT drivers.code FROM drivers WHERE drivers.nationality = 'America';	SELECT code FROM drivers WHERE Nationality = 'American'
1	SELECT raceid FROM races WHERE year = 2009;	SELECT raceId FROM races WHERE year = 2009
0	SELECT count(DISTINCT driverid) FROM driverstandings WHERE raceid LIKE 18;	SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18
0	SELECT count(nationality) FROM drivers WHERE nationality = 'Dutch';	SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'
1	SELECT driverref FROM drivers WHERE surname = 'Kubica' AND forename = 'Robert';	SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
0	SELECT count(driverid) FROM drivers WHERE year(dob) = 1980 AND nationality = 'Australian';	SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'
0	SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.nationality = 'German' AND strftime('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time ASC LIMIT 3;	SELECT driverId FROM (SELECT T1.driverId, rank() over (ORDER BY MIN(CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM drivers T1 JOIN lapTimes T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1990' GROUP BY T1.driverId) WHERE rk <= 3
0	SELECT drivers.driverref FROM drivers WHERE drivers.nationality = 'German' ORDER BY drivers.dob LIMIT 1;	SELECT driverRef FROM (SELECT driverRef, rank() over ( ORDER BY JULIANDAY(dob) ASC ) as rk FROM drivers WHERE nationality = 'German') WHERE rk = 1
0	SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 1971 AND laptimes.milliseconds = (SELECT max(laptimes.milliseconds) FROM laptimes);	SELECT DISTINCT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL;
0	SELECT DISTINCT drivers.surname, drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.nationality = 'Spanish' AND races.year < 1982 ORDER BY results.time DESC LIMIT 10;	SELECT driverId FROM (SELECT T2.driverId, rank() over ( ORDER BY max(CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) DESC ) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' GROUP BY T1.driverId) WHERE rk <= 10
0	SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = ( SELECT max(milliseconds) FROM laptimes );	SELECT DISTINCT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL;
0	SELECT races.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1;	SELECT year FROM (SELECT T2.year, rank() over ( ORDER BY max(CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0) DESC ) as rk FROM laptimes T1 JOIN races T2 ON T1.raceId = T2.raceId GROUP BY T2.year) WHERE rk = 1
0	SELECT driverid FROM results WHERE laps = 1 ORDER BY time LIMIT 5;	SELECT driverId FROM (SELECT driverId, rank() over (ORDER BY MIN((CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) ASC) as rk FROM lapTimes WHERE lap = 1 GROUP BY driverId) WHERE rk <= 5
0	SELECT count(results.resultid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE results.raceid > 50 AND results.raceid < 100 AND status.status = 'Disqualified';	SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50
0	SELECT count(circuitid) FROM circuits WHERE location = 'Austria';	SELECT location, lat, lng FROM circuits WHERE country = 'Austria'
0	SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY count(raceid) DESC LIMIT 1;	SELECT raceId FROM (SELECT raceId, rank() over ( ORDER BY COUNT(*) DESC ) as rk FROM results WHERE time IS NOT NULL GROUP BY raceId) WHERE rk = 1
1	SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE qualifying.q2 IS NOT NULL AND races.raceid = 23;	SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL
0	SELECT races.year, races.date, races.time FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid ORDER BY drivers.dob DESC LIMIT 1;	SELECT T3.year, T3.name, T3.date, T3.time FROM races T3 JOIN qualifying T2 ON T3.raceId = T2.raceId JOIN drivers T1 ON T2.driverId = T1.driverId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T3.date ASC LIMIT 1
0	SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE drivers.nationality = 'American' AND status.status = 'Disqualified';	SELECT COUNT(DISTINCT T1.driverId) FROM drivers T1 JOIN results T2 ON T1.driverId = T2.driverId JOIN status T3 ON T2.statusId = T3.statusId WHERE T1.nationality = 'American' AND T3.status = 'Puncture';
0	SELECT constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1;	SELECT url FROM (SELECT T1.url, rank() over (ORDER BY max(T2.points) DESC) as rk FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' GROUP BY T1.constructorId) WHERE rk = 1;
0	SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1;	SELECT url FROM (SELECT T2.url, rank() over (ORDER BY SUM(T1.wins) DESC) as rk FROM constructors T2 JOIN constructorStandings T1 ON T2.constructorId = T1.constructorId GROUP BY T1.constructorId) WHERE rk = 1
0	SELECT drivers.forename , drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.lap = 3 AND races.name = 'French Grand Prix' ORDER BY laptimes.milliseconds ASC LIMIT 1;	SELECT driverId FROM (SELECT T1.driverId, rank() over (ORDER BY MAX((CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0)) DESC) as rk FROM laptimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 GROUP BY T1.driverId) WHERE rk = 1;
0	SELECT MIN(laptimes.milliseconds) FROM laptimes WHERE laptimes.lap = 1;	SELECT raceId, milliseconds FROM (SELECT T2.raceId, T1.milliseconds, rank() over (ORDER BY (CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(T1.time) - LENGTH(REPLACE(T1.time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(T1.time, INSTR(T1.time, ':') + 1), INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(SUBSTR(T1.time, INSTR(T1.time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM laptimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1) WHERE rk = 1
0	SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11;	SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'
0	SELECT drivers.surname, drivers.driverref FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.nationality = 'German' AND races.year BETWEEN 1980 AND 1985 GROUP BY drivers.surname, drivers.driverref ORDER BY avg(pitstops.duration) ASC LIMIT 5;	SELECT forename, surname FROM (SELECT T2.forename, T2.surname, rank() over ( ORDER BY AVG(T1.duration) ) as rk FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.driverId) WHERE rk <= 3;
0	SELECT results.time FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2008 AND races.name = 'Canadian Grand Prix';	SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'
0	SELECT constructors.constructorref, constructors.url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid INNER JOIN races ON results.raceid = races.raceid WHERE races.year = 2009 AND races.name = 'Singapore Grand Prix';	SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'
0	SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.dob BETWEEN '1981' AND '1991' AND drivers.nationality = 'Austrian';	SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'
0	SELECT drivers.forename, drivers.surname, constructors.url, drivers.dob FROM drivers INNER JOIN constructors ON drivers.nationality = constructors.nationality WHERE drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;	SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
1	SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';	SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
0	SELECT constructorresults.points, constructors.name, constructors.nationality FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid INNER JOIN races ON constructorresults.raceid = races.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1;	SELECT score, name, nationality FROM (SELECT SUM(T1.points) as score, T2.name, T2.nationality, rank() over (ORDER BY SUM(T1.points) DESC) as rk FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.constructorId) WHERE rk = 1
0	SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix';	SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
0	SELECT avg(races.year) FROM races WHERE races.date BETWEEN '2000-01-01' AND '2010-12-31';	SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
0	SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(nationality) DESC LIMIT 1;	SELECT nationality FROM drivers GROUP BY nationality HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM drivers GROUP BY nationality) T2);
0	SELECT driverstandings.wins FROM driverstandings WHERE driverstandings.position = 91;	SELECT wins FROM (SELECT wins, rank() OVER (ORDER BY SUM(points) DESC) AS rank FROM driverStandings WHERE points IS NOT NULL GROUP BY driverId) WHERE rank = 91;
0	SELECT races.name FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds LIMIT 1;	SELECT name FROM races WHERE raceId IN (SELECT raceId FROM results WHERE fastestLapTime = (SELECT MIN(fastestLapTime) FROM results));
0	SELECT circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1;	SELECT location, country FROM (SELECT T1.location, T1.country, rank() over (ORDER BY MAX(T2.date) DESC) as rk FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId) WHERE rk = 1
0	SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE qualifying.position = 1 AND qualifying.number = 3 AND races.year = 2008 AND circuits.name = 'Marina Bay Street Circuit';	SELECT forename, surname FROM (SELECT T2.forename, T2.surname, CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000, rank() over (ORDER BY min(CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL)) / 1000 ASC ) as rk FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit') GROUP BY T2.driverId) WHERE rk = 1;
0	SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN races ON drivers.driverid = races.raceid ORDER BY drivers.dob LIMIT 1;	SELECT forename, surname, nationality, name FROM (SELECT forename, surname, nationality, T.driverId, races.name, rank() over (partition by T.driverId ORDER BY races.date ASC ) as rk FROM (SELECT forename, surname, nationality, driverId, rank() over (ORDER BY dob DESC ) as rk FROM drivers) AS T JOIN driverStandings ON T.driverId = driverStandings.driverId JOIN races on races.raceId = driverStandings.raceId WHERE T.rk = 1) WHERE rk = 1;
0	SELECT count(drivers.driverref) FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Canadian Grand Prix' AND status.status = 'Accident' ORDER BY results.number DESC LIMIT 1;	SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1
0	SELECT drivers.forename, drivers.surname, driverstandings.wins FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY drivers.dob ASC LIMIT 1;	SELECT wins, forename, surname FROM (SELECT SUM(T1.wins) as wins, T2.forename, T2.surname, rank() over (ORDER BY T2.dob ASC) as rk FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId GROUP BY T2.driverId) WHERE rk = 1;
1	SELECT MAX(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid;	SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1
0	SELECT laptimes.time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1;	SELECT time FROM lapTimes ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR(SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC LIMIT 1
0	SELECT MAX(pitstops.duration) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';	SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1
1	SELECT pitstops.lap FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND races.year = 2011 AND races.name = 'Australian Grand Prix';	SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'
1	SELECT duration FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';	SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'
0	SELECT laptimes.time FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Formula_1';	SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR( SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR( time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) ASC LIMIT 1
0	SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.milliseconds ASC LIMIT 1;	WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, rank() over (ORDER BY min(time_in_seconds)) AS rk FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.rk <= 20
0	SELECT MIN(laptimes.position) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.driverref = 'hamilton' AND drivers.surname = 'Hamilton' AND races.name = 'Formula_1';	SELECT position FROM (SELECT T1.position, rank() over (ORDER BY (CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) ELSE 0 END * 3600 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) END * 60 + CASE WHEN LENGTH(time) - LENGTH(REPLACE(time, ':', '')) = 2 THEN CAST(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1, INSTR(SUBSTR( SUBSTR(time, INSTR(time, ':') + 1), INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + 1), '.') - 1) AS INTEGER) ELSE CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(SUBSTR(time, INSTR(time, ':') + 1), '.') - 1) AS INTEGER) END + CAST(SUBSTR(time, INSTR(time, '.') + 1) AS INTEGER) / 1000.0)) as rk FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton') WHERE rk = 1
0	SELECT MIN(laptimes.milliseconds) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT fastest_lap_times.fastestLapTime as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix' ORDER BY fastest_lap_times.time_in_seconds asc LIMIT 1
0	SELECT * FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1
0	SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid WHERE laptimes.milliseconds = (SELECT MAX(laptimes.milliseconds) FROM laptimes);	WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT DISTINCT raceId FROM (SELECT T2.raceId, rank() over (ORDER BY fastest_lap_times.time_in_seconds ASC ) as rk FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix') WHERE rk = 1
0	SELECT pitstops.duration FROM pitstops INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Austrian Grand Prix';	WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId
0	SELECT circuits.lat , circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488';	SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE raceId IN (SELECT raceId FROM lapTimes WHERE time = '1:29.488'));
0	SELECT avg(pitstops.milliseconds) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.name = 'Formula_1';	SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
0	SELECT cast(avg(laptimes.milliseconds) AS REAL) FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';	SELECT avg(laptime) FROM (SELECT min(t1.milliseconds) as laptime FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' GROUP BY T3.circuitId)
0	SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1;	SELECT distinct player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT max(overall_rating) FROM Player_Attributes);
0	SELECT player.player_name , player.height FROM player ORDER BY player.height DESC LIMIT 1;	SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
0	SELECT player_attributes.preferred_foot FROM player_attributes WHERE player_attributes.potential IS NOT NULL ORDER BY player_attributes.potential ASC LIMIT 1;	SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)
0	SELECT count(*) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating >= 60 AND player_attributes.overall_rating < 65 AND player_attributes.attacking_work_rate = 'low';	SELECT COUNT(distinct player_api_id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'
0	SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.crossing DESC LIMIT 5;	SELECT T3.id FROM (SELECT T1.player_api_id, rank() over (ORDER BY max(T1.crossing) DESC ) as rk FROM Player_Attributes T1 GROUP BY T1.player_api_id) AS T2 join Player AS T3 ON T2.player_api_id = T3.player_api_id WHERE rk <= 5
0	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.id ORDER BY SUM(match.home_team_goal + match.away_team_goal) DESC LIMIT 1;	SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' GROUP BY league_id HAVING SUM(home_team_goal + away_team_goal) = (SELECT MAX(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM Match WHERE season = '2015/2016' GROUP BY league_id)));
0	SELECT team.team_short_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.season = '2015/2016' AND SUBTRACT(match.home_team_goal, match.away_team_goal) < 0 ORDER BY SUBTRACT(match.home_team_goal, match.away_team_goal) ASC LIMIT 1;	SELECT t3.team_long_name FROM Match AS t1 INNER JOIN Team AS t3 ON t1.home_team_api_id = t3.team_api_id WHERE t1.season = '2015/2016' AND t1.home_team_goal - t1.away_team_goal < 0 GROUP BY t1.home_team_api_id HAVING COUNT(*) = (SELECT MIN(lost_matches_count) FROM (SELECT home_team_api_id, COUNT(*) AS lost_matches_count FROM Match WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;	SELECT T2.player_name FROM (SELECT player_api_id, rank() over (ORDER BY max(penalties) DESC ) as rk FROM Player_Attributes GROUP BY player_api_id) AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE rk <= 10
0	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team_attributes.team_api_id = team.team_api_id INNER JOIN match ON match.away_team_api_id = team.team_api_id WHERE league.name = 'Scotland Premier League' AND match.season = '2009/2010' AND SUBTRACT(match.away_team_goal, match.home_team_goal) > 0 GROUP BY team.team_long_name ORDER BY SUBTRACT(match.away_team_goal, match.home_team_goal) DESC LIMIT 1;	SELECT t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'Scotland Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 GROUP BY t2.away_team_api_id HAVING COUNT(*) = (SELECT MAX(won_matches_count) FROM (SELECT away_team_api_id, COUNT(*) AS won_matches_count FROM Match AS m INNER JOIN League AS l ON m.league_id = l.id WHERE l.name = 'Scotland Premier League' AND m.season = '2009/2010' AND m.away_team_goal - m.home_team_goal > 0 GROUP BY m.away_team_api_id))
1	SELECT buildupplayspeed FROM team_attributes ORDER BY buildupplayspeed DESC LIMIT 4;	SELECT speed FROM (SELECT max(buildUpPlaySpeed) as speed, rank() over (ORDER BY max(buildUpPlaySpeed) DESC) AS rk FROM Team_Attributes WHERE buildUpPlaySpeed IS NOT NULL GROUP BY team_api_id) WHERE rk <= 4
0	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY SUM(match.home_team_goal = match.away_team_goal) DESC LIMIT 1;	SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id HAVING COUNT(*) = (SELECT MAX(draws) FROM (SELECT COUNT(*) AS draws FROM Match WHERE season = '2015/2016' AND home_team_goal = away_team_goal GROUP BY league_id)))
0	SELECT player.id FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.sprint_speed >= 97 AND player_attributes.date >= '2013-01-01 00:00:00' AND player_attributes.date <= '2015-12-31 00:00:00';	SELECT DATETIME() - birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE STRFTIME('%Y', `date`) >= '2013' AND STRFTIME('%Y', `date`) <= '2015' AND sprint_speed >= 97)
0	SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;	SELECT T2.name, COUNT(T1.league_id) AS match_count FROM Match T1 JOIN League T2 ON T1.league_id = T2.id GROUP BY T1.league_id HAVING match_count = (SELECT MAX(match_count) FROM (SELECT COUNT(league_id) AS match_count FROM Match GROUP BY league_id));
1	SELECT avg(player.height) FROM player WHERE player.birthday >= '1990-01-01 00:00:00' AND player.birthday < '1996-01-01 00:00:00';	SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'
0	SELECT player_api_id FROM player_attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM player_attributes WHERE substr(date,1,4) = '2010');	SELECT DISTINCT p.player_api_id FROM Player_Attributes AS p WHERE SUBSTR(p.date, 1, 4) = '2010' AND p.overall_rating = (SELECT MAX(pa.overall_rating) FROM Player_Attributes AS pa WHERE SUBSTR(pa.date, 1, 4) = '2010')
1	SELECT team_attributes.team_fifa_api_id FROM team_attributes WHERE team_attributes.buildupplayspeed BETWEEN 51 AND 59;	SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE strftime('%Y', team_attributes.date) = '2012' AND team_attributes.buildupplaypassingclass = 'Long' GROUP BY team.team_long_name HAVING SUM(team_attributes.buildupplaypassing) / COUNT(team.team_long_name) > team_attributes.buildupplaypassing;	SELECT T4.team_long_name FROM team AS T4 WHERE T4.team_api_id IN (SELECT t3.team_api_id FROM Team_Attributes AS t3 WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > (SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y', t2.`date`) = '2012'))
0	SELECT cast(sum(CASE WHEN player.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';	SELECT CAST(COUNT(DISTINCT CASE WHEN t2.preferred_foot = 'left' THEN t1.id END) AS REAL) * 100 / COUNT(DISTINCT t1.id) percent FROM Player AS t1 LEFT JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992';
0	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY sum(match.home_team_goal + match.away_team_goal) ASC LIMIT 5;	SELECT name, goals FROM (SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) as goals, rank() over (ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC) as rk FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.id) WHERE rk <= 5;
0	SELECT avg(long_shots) FROM player_attributes WHERE player_fifa_api_id = 218353;	SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(heading_accuracy) DESC LIMIT 10;	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC) as rk FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id) WHERE rk <= 10;
1	SELECT team.team_long_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplaydribblingclass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00' ORDER BY chancecreationpassing DESC;	SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t4.`date`, 1, 4) = '2014' AND t4.chanceCreationPassing < (SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC;
1	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2009/2010' GROUP BY league.name HAVING AVG(match.home_team_goal) > AVG(match.away_team_goal);	SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.id HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0
1	SELECT team.team_short_name FROM team WHERE team.team_long_name = 'Queens Park Rangers';	SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'
0	SELECT * FROM player WHERE substr(birthday,1,4) = '1970' AND substr(birthday,6,2) = '10';	SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'
1	SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';	SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'
1	SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag';	SELECT T2.buildUpPlayPositioningClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag';
1	SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942 AND date = '2014-09-18 00:00:00';	SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'
1	SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND strftime('%Y', date) = '2011';	SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'
1	SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND league.name = 'Scotland Premier League';	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'
0	SELECT preferred_foot FROM player_attributes WHERE date = ( SELECT max(date) FROM player_attributes );	SELECT preferred_foot FROM (SELECT t2.preferred_foot, rank() over (ORDER BY t1.birthday DESC) as rk FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id) WHERE rk = 1
0	SELECT * FROM player_attributes ORDER BY potential DESC LIMIT 1;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes))
0	SELECT count(player_attributes.preferred_foot) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left';	SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'
1	SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_attributes WHERE chanceCreationPassingClass = 'Risky')
1	SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'David Wilson';	SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'
0	SELECT player.birthday FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;	SELECT birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY overall_rating DESC) as rk FROM Player_Attributes) WHERE rk = 1)
1	SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';	SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'
1	SELECT avg(match.home_team_goal) FROM match INNER JOIN country ON match.country_id = country.id WHERE country.name = 'Poland' AND match.season = '2010/2011';	SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.finishing DESC LIMIT 1;	SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1
1	SELECT player_name FROM player WHERE height > 180;	SELECT player_name FROM Player WHERE height > 180
1	SELECT count(player_name) FROM player WHERE strftime('%Y', birthday) > '1990';	SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'
0	SELECT count(player.player_name) FROM player WHERE player.weight > 170 AND player.player_name LIKE 'Adam%';	SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name = 'Adam'
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > 80 AND strftime('%Y', player_attributes.date) BETWEEN '2008' AND '2010';	SELECT player_name FROM Player AS t1 WHERE t1.player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010')
1	SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';	SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'
0	SELECT * FROM player_attributes WHERE preferred_foot = 'left';	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'left');
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';	SELECT t1.team_long_name FROM Team AS t1 WHERE team_api_id IN (SELECT t2.team_api_id FROM Team_Attributes AS t2 WHERE t2.buildUpPlaySpeedClass = 'Fast')
1	SELECT team_attributes.buildupplaypassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_short_name = 'CLB';	SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'
1	SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplaypassing > 70;	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlayPassing > 70);
0	SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.height > 170;	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'
1	SELECT player_name FROM player ORDER BY height ASC LIMIT 1;	SELECT player_name FROM player ORDER BY height ASC LIMIT 1
1	SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';	SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'
1	SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;	SELECT T.team_short_name FROM Team T WHERE team_api_id IN (SELECT TA.team_api_id FROM Team_Attributes TA WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32)
1	SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'
1	SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'
0	SELECT team.team_short_name FROM team INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;	SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT home_team_api_id FROM Match WHERE home_team_goal = 10);
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = ( SELECT max(balance) FROM player_attributes WHERE potential = 61 );	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = 61 AND balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61));
0	SELECT SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')) FROM player_attributes;	SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
1	SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';	SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
0	SELECT player_name FROM player ORDER BY birthday ASC LIMIT 1;	SELECT player_name FROM (SELECT player_name, rank() over (ORDER BY birthday ASC) as rk FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')) WHERE rk = 1
0	SELECT player.player_name FROM player ORDER BY player.height DESC LIMIT 1;	SELECT player_name FROM (SELECT player_name, rank() over (ORDER BY height DESC) as rk FROM Player) WHERE rk = 1
0	SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.attacking_work_rate = 'low';	SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
1	SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';	SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'
1	SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';	SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
0	SELECT count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', birthday) < '1986' AND player_attributes.defensive_work_rate = 'high';	SELECT COUNT(DISTINCT t1.player_api_id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y', t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.crossing DESC LIMIT 1;	SELECT player_name FROM Player WHERE Player.player_api_id IN (SELECT player_api_id FROM (SELECT P.player_api_id, rank() over (ORDER BY PA.crossing DESC) as rk FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')) WHERE rk = 1)
0	SELECT heading_accuracy FROM player_attributes WHERE player_api_id = 505942;	SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'
0	SELECT count(player.player_name) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;	SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE volleys > 70 AND dribbling > 70);
1	SELECT count(match.id) FROM match INNER JOIN country ON match.country_id = country.id WHERE match.season = '2008/2009' AND country.name = 'Belgium';	SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'
0	SELECT player_attributes.long_passing FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.birthday ASC LIMIT 1;	SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)
1	SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'
0	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2008/2009' GROUP BY league.id ORDER BY count(match.league_id) DESC LIMIT 1;	SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.id HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))
1	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE strftime('%Y', player.birthday) < '1986';	SELECT AVG(T2.overall_rating) FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986' AND T2.overall_rating IS NOT NULL;
0	SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;	SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
1	SELECT avg(team_attributes.buildupplayspeed) FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Heart of Midlothian';	SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'
1	SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Pietro Marino';	SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'
1	SELECT SUM(player_attributes.crossing) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Lennox';	SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'
1	SELECT team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;	SELECT chanceCreationPassing, chanceCreationPassingClass FROM (SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass, rank() over (ORDER BY t2.chanceCreationPassing DESC) as rk FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax') WHERE rk = 1
1	SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo' );	SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'
1	SELECT MAX(overall_rating) FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Dorlan Pabon' );	SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'
0	SELECT avg(match.away_team_goal) FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND match.country_id = 1;	SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM "Match" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1;	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY t1.birthday ASC) as rk FROM Player AS t1 WHERE t1.player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77)) WHERE rk = 1;
1	SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04 00:00:00';	SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'
1	SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Parravicini' AND player_attributes.date = '2010-08-30 00:00:00';	SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'
1	SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Francesco Migliore' AND player_attributes.date = '2015-05-01 00:00:00';	SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'
0	SELECT defensive_work_rate FROM player_attributes WHERE `date` = '2013-02-22' AND player_name = 'Kevin Berigaud';	SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'
1	SELECT player_attributes.date FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Kevin Constant' ORDER BY player_attributes.crossing DESC LIMIT 1;	SELECT date FROM (SELECT T2.date, rank() over (ORDER BY t2.crossing DESC, t2.date ASC) as rk FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Constant') WHERE rk = 1
1	SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2012-02-22 00:00:00';	SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'
1	SELECT player_attributes.dribbling FROM player_attributes INNER JOIN match ON player_attributes.date = match.date INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE team.team_short_name = 'LEI' AND player_attributes.date = '2015-09-10 00:00:00';	SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'
0	SELECT buildupplaypassingclass FROM team_attributes WHERE team_long_name = 'FC Lorient' AND date = '2010-02-22';	SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'
1	SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'PEC Zwolle' AND team_attributes.date = '2013-09-20 00:00:00';	SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'
1	SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22 00:00:00';	SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'
1	SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hannover 96' AND team_attributes.date = '2015-09-10 00:00:00';	SELECT T2.defenceAggressionClass FROM Team T1 JOIN Team_Attributes T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date LIKE '2015-09-10%'
1	SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Marko Arnautovic' AND player_attributes.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00';	SELECT AVG(T2.overall_rating) FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND SUBSTR(T2.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21' AND T2.overall_rating IS NOT NULL;
0	SELECT ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Landon Donovan' AND date = '2013/7/12' ) - ( SELECT overall_rating FROM player_attributes WHERE player_name = 'Jordan Bowery' AND date = '2013/7/12' ) AS RESULT;	SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'
0	SELECT player_name FROM player ORDER BY height DESC LIMIT 5;	SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1
0	SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;	SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY weight DESC) as rk FROM Player) WHERE rk <= 10;
0	SELECT player_name FROM player WHERE datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34;	SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35
0	SELECT count(*) FROM match INNER JOIN player ON match.away_player_11 = player.player_api_id WHERE player.player_name = '<NAME>';	sql placeholder
0	SELECT sum(away_team_goal) FROM match WHERE away_player_1 = 34480 AND away_player_2 = 37937;	sql placeholder
0	SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_11 = player.player_api_id WHERE SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(player.birthday)) < 31;	sql placeholder
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY overall_rating DESC LIMIT 10;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes))
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high';	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE attacking_work_rate = 'high');
0	SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.finishing = 1 ORDER BY SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(player.birthday)) DESC LIMIT 1;	SELECT player_name FROM (SELECT t1.player_name, rank() over (ORDER BY t1.birthday ASC) as rk FROM Player AS t1 WHERE player_api_id IN (SELECT t2.player_api_id FROM Player_Attributes AS t2 WHERE t2.finishing = 1)) WHERE rk = 1
0	SELECT player.player_name FROM player INNER JOIN league ON player.id = league.id WHERE league.name = 'Belgium';	sql placeholder
0	SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.country_id WHERE player_attributes.vision > 89;	sql placeholder
0	SELECT country.name FROM country INNER JOIN player ON country.id = player.id GROUP BY country.name ORDER BY AVG(player.weight) DESC LIMIT 1;	sql placeholder
1	SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';	SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Slow');
1	SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE chancecreationpassingclass = 'Safe';	SELECT t1.team_short_name FROM Team AS t1 WHERE T1.team_api_id IN (SELECT T2.team_api_id FROM Team_Attributes AS t2 WHERE t2.chanceCreationPassingClass = 'Safe')
0	SELECT avg(player.height) FROM player INNER JOIN country ON player.id = country.id WHERE country.name = 'Italy';	sql placeholder
0	SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;	SELECT player_name FROM Player WHERE player_name IN (SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3) and height > 180 ORDER BY player_name
1	SELECT count(*) FROM player WHERE birthday > '1990' AND player_name LIKE 'Aaron%';	SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'
0	SELECT SUBTRACT(jumping AND id = 6,jumping AND id = 23) FROM player_attributes WHERE id = 23;	SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1
0	SELECT player_attributes.player_api_id FROM player_attributes WHERE player_attributes.potential = (SELECT MIN(potential) FROM player_attributes) AND player_attributes.preferred_foot = 'right' LIMIT 3;	SELECT player_api_id FROM (SELECT player_api_id, rank() over (ORDER BY min(potential) ASC ) as rk FROM Player_Attributes WHERE preferred_foot = 'right' GROUP BY player_api_id) WHERE rk <= 5
0	SELECT MAX(crossing) FROM player_attributes WHERE preferred_foot = 'left';	SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
0	SELECT cast(count(CASE WHEN player_attributes.strength > 80 AND player_attributes.stamina > 80 THEN player_attributes.id ELSE NULL END) AS REAL) * 100 / count(player_attributes.id) FROM player_attributes;	SELECT CAST(COUNT(DISTINCT CASE WHEN strength > 80 AND stamina > 80 THEN player_api_id END) AS REAL) * 100 / (SELECT COUNT(*) FROM Player) FROM Player_Attributes t;
1	SELECT country.name FROM country INNER JOIN league ON country.id = league.country_id WHERE league.name = 'Poland Ekstraklasa';	SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )
0	SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = 1;	SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'
0	SELECT sprint_speed, agility, acceleration FROM player_attributes WHERE player_api_id = 2625;	SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )
1	SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';	SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'
0	SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Italy' AND season = '2015/2016';	SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'
0	SELECT MAX(match.home_team_goal) FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id INNER JOIN league ON team.id = league.id WHERE league.name = 'Netherlands Eredivisie';	SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'
0	SELECT player_attributes.finishing , player_attributes.curve FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id ORDER BY player.weight DESC LIMIT 1;	SELECT T2.finishing, T2.curve FROM Player T1 JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = (SELECT MAX(weight) FROM Player)
0	SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.id ORDER BY count(match.id) DESC LIMIT 1;	SELECT name FROM (SELECT t1.name, rank() over (ORDER BY COUNT(t2.id) DESC) as rk FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.id) WHERE rk <= 4
0	SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id GROUP BY team.team_long_name ORDER BY sum(match.away_team_goal) DESC LIMIT 1;	SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT away_team_api_id FROM Match WHERE away_team_goal = (SELECT MAX(away_team_goal) FROM Match));
0	SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;	SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes));
0	SELECT cast(count(CASE WHEN player.height < 180 AND player_attributes.overall_rating > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player.id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id;	SELECT (COUNT(DISTINCT Player.player_api_id) * 100.0 / (SELECT COUNT(*) FROM Player)) AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70;
0	SELECT CASE WHEN sex = 'M' AND admission = '+' THEN 'in-patient' WHEN sex = 'M' AND admission = '-' THEN 'outpatient' ELSE 'other' END AS type , COUNT(id) AS count FROM patient GROUP BY type;	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'
0	SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient WHERE year(birthday) > '1930';	SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'
0	SELECT count(*) / (SELECT count(*) FROM patient WHERE year(birthday) BETWEEN '1930-01-01' AND '1940-12-31') * 100 FROM patient WHERE admission = '+';	SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'
0	SELECT (COUNT(id) WHERE diagnosis = 'SLE' AND admission = '+') / (COUNT(id) WHERE diagnosis = 'SLE' AND admission = '-') FROM patient;	SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
1	SELECT patient.diagnosis , laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.id = '30609';	SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
0	SELECT examination.`examination date`, patient.sex, patient.birthday FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.id = 163109;	SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109
0	SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh > '500';	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
0	SELECT id, age FROM patient WHERE rvvt = '+';	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
0	SELECT patient.id, patient.sex, patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2;	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
0	SELECT * FROM patient WHERE year(birthday) = '1937' AND `t-cho` >= '250';	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250
0	SELECT laboratory.id, patient.sex, examination.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.alb < 3.5;	SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
0	SELECT cast(sum(CASE WHEN laboratory.tp < '6.0' OR laboratory.tp > '8.5' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F';	SELECT (COUNT(DISTINCT Patient.ID) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);
0	SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.admission = '+' AND SUBTRACT(year(current_timestamp), year(patient.birthday)) >= '50';	SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'
0	SELECT count(id) FROM patient WHERE sex = 'F' AND year(description) = '1997' AND admission = '-';	SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'
0	SELECT SUBTRACT(YEAR(birthday), YEAR(`first date`)) FROM patient ORDER BY `first date` ASC LIMIT 1;	SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
0	SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = '1' AND patient.sex = 'F' AND strftime('%Y', examination.`examination date`) = '1997';	SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.SEX = 'F' AND strftime('%Y', T1.`Examination Date`) = '1997';
0	SELECT MAX(year(birthday)) - MIN(year(birthday)) FROM patient WHERE laboratory.tg >= 200;	SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200
0	SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id ORDER BY patient.birthday LIMIT 1;	SELECT Symptoms, Diagnosis FROM (SELECT T2.Symptoms, T1.Diagnosis, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL) WHERE rk = 1;
0	SELECT EXTRACT(YEAR FROM examination.`examination date`) AS year, EXTRACT(MONTH FROM examination.`examination date`) AS month, COUNT(examination.id) AS count FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY year, month;	SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'
0	SELECT MAX(birthday), year(`first date`), year(birthday) FROM patient WHERE diagnosis = 'SJS';	SELECT L.Date , (strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday)) AS InitialAge FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND P.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE Diagnosis = 'SJS');
0	SELECT cast(count(CASE WHEN patient.sex = 'M' THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN patient.sex = 'F' THEN 1 ELSE NULL END) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua <= '8.0';	SELECT CAST(COUNT(DISTINCT CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN T1.ID END) AS REAL) / COUNT(DISTINCT CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN T1.ID END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
0	SELECT count(DISTINCT patient.id) FROM patient WHERE SUBTraCT(year(`examination date`), year(`first date`)) >= 1;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1
0	SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE year(patient.birthday) < 18 AND `examination date` BETWEEN '1990-01-01' AND '1993-12-31';	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND (strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.Birthday)) < 18;
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > '2.0' AND patient.sex = 'M';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'
0	SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;	SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis HAVING COUNT(Diagnosis) = (SELECT MAX(Cnt) FROM (SELECT COUNT(Diagnosis) AS Cnt FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis) T1);
0	SELECT avg(2000 - strftime('%Y', patient.birthday)) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1991-10-01' AND '1991-10-30';	SELECT AVG(1999 - CAST(strftime('%Y', Birthday) AS INTEGER)) AS Average_Age FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date >= '1991-10-01' AND Date <= '1991-10-31');
0	SELECT SUBTraCT(year(`examination date`), year(birthday)), MAX(hgb) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id;	SELECT STRFTIME('%Y', T.Date) - STRFTIME('%Y', Patient.Birthday), Patient.Diagnosis FROM (SELECT Date, ID FROM Laboratory WHERE HGB = (SELECT MAX(HGB) FROM Laboratory)) AS T JOIN Patient ON T.ID = Patient.ID
1	SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-02';	SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
0	SELECT CASE WHEN examination.`t-cho` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` = '1995-09-04' AND patient.id = 2927464;	SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
0	SELECT patient.sex FROM patient WHERE patient.diagnosis = 'AORTITIS' LIMIT 1;	SELECT SEX FROM (SELECT SEX, rank() over (ORDER BY `First Date` ASC) as rk FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL) WHERE rk = 1
1	SELECT examination.`acl igm` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND patient.description = '1993/11/12';	SELECT `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'
1	SELECT CASE WHEN patient.sex = 'M' THEN 'man' WHEN patient.sex = 'F' THEN 'women' END FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date = '1992-06-12' AND laboratory.gpt = 9 AND laboratory.got = 9;	SELECT T1.SEX FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12')
0	SELECT SUBSTR('1992', 1, 4) - year(patient.birthday) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua = '8.4' AND laboratory.date = '1991-10-21';	SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'
0	SELECT count(id) FROM patient WHERE `first date` = '1991-06-13' AND diagnosis = 'SJS';	SELECT COUNT(*) FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS') AND STRFTIME('%Y', Date) = '1995' GROUP BY ID
0	SELECT diagnosis FROM examination WHERE `examination date` = '1997-01-27';	SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID IN (SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE') AND T2.`Examination Date` = T1.`First Date`
1	SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959/3/1' AND examination.`examination date` = '1993/9/27';	SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'
0	SELECT SUBTraCT(SUM(birthday = '1959-02-18' and date like '1981-11-%' THEN `t-cho`), SUM(birthday = '1959-02-18' and date like '1981-12-%' THEN `t-cho`)) FROM laboratory WHERE birthday = '1959-02-18';	SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'
0	SELECT * FROM patient WHERE diagnosis = 'Behcet' AND description BETWEEN '1997-1-1' AND '1998-1-1';	SELECT DISTINCT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'
0	SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;	SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4
0	SELECT id FROM patient WHERE sex = 'F' AND YEAR(birthday) = 1964 AND admission = '+';	SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'
0	SELECT COUNT(*) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.thrombosis = 2 AND examination.`ana pattern` = 'S' AND examination.`acl igm` > (SELECT AVG(`acl igm`) FROM examination);	SELECT COUNT(DISTINCT ID) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')
0	SELECT 100 * count(laboratory.id) / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE `u-pro` > 0 AND `u-pro` < 30 AND ua <= 6.5;	SELECT CAST(COUNT(DISTINCT CASE WHEN UA <= 6.5 THEN ID END) AS REAL) * 100 / COUNT(DISTINCT ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30
0	SELECT cast(sum(patient.sex = 'M') AS REAL) * 100 / count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'Behcet' AND YEAR(`first date`) = '1981';	SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'
0	SELECT * FROM patient WHERE admission = '-' AND date LIKE '1991-10%' AND `t-bil` < 2.0;	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'
0	SELECT count(id) FROM patient WHERE sex = 'F' AND birthday BETWEEN '1980-01-01' AND '1989-12-31' AND diagnosis != 'ANA';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'
1	SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp > 2 AND laboratory.cre = 1 AND laboratory.ldh = 123;	SELECT T1.SEX FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Examination AS T2 INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123)
1	SELECT avg(laboratory.alb) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 400 AND patient.diagnosis = 'SLE' AND patient.sex = 'F';	SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'
0	SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' GROUP BY examination.symptoms ORDER BY count(examination.symptoms) DESC LIMIT 1;	SELECT Symptoms FROM (SELECT Symptoms, rank() over ( ORDER BY COUNT(Symptoms) DESC ) as rk FROM (SELECT DISTINCT ID, Symptoms FROM Examination WHERE Diagnosis = 'SLE') GROUP BY Symptoms) WHERE rk = 1
1	SELECT description, diagnosis FROM patient WHERE id = 48473;	SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';	SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'
0	SELECT count(patient.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` = '6' AND examination.diagnosis = 'Normal' AND YEAR(examination.`examination date`) = '1997' AND laboratory.c4 > '6' AND laboratory.c4 < '8.5';	SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'
0	SELECT cast(sum(patient.diagnosis LIKE '%SLE%') AS REAL) * 100 / count(examination.id) FROM examination examination INNER JOIN patient patient ON examination.id = patient.id WHERE examination.symptoms LIKE '%thrombocytopenia%';	SELECT CAST(COUNT(CASE WHEN Diagnosis = 'SLE' THEN ID END) AS REAL) * 100 / COUNT(DISTINCT ID) FROM Examination WHERE Symptoms = 'thrombocytopenia';
0	SELECT cast(count(CASE WHEN patient.sex = 'F' AND examination.diagnosis = 'RA' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE YEAR(patient.birthday) = '1980';	SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'M' AND examination.`examination date` BETWEEN '1995' AND '1997' AND patient.diagnosis = 'BEHCET' AND patient.admission = '-';	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.Admission = '-' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T2.Diagnosis = 'Behcet';
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5;
0	SELECT dateDIFF(`examination date`, `first date`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 821298;	SELECT julianday(E.`Examination Date`) - julianday(P.`First Date`) AS DaysBetween FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = 821298 ORDER BY E.`Examination Date` LIMIT 1
0	SELECT CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 'Yes' ELSE 'No' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266;	SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
0	SELECT laboratory.date, examination.`examination date` FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.got >= 60;	SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
0	SELECT patient.sex , patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got < 60 AND year(laboratory.date) = 1994;	SELECT T1.SEX, T1.Birthday FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994')
0	SELECT laboratory.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.gpt >= 60;	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
0	SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id ORDER BY patient.birthday ASC LIMIT 1;	SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
1	SELECT avg(laboratory.ldh) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500;	SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
0	SELECT laboratory.id, SUBTRACT(year(current_timestamp), year(patient.birthday)) AS age FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh BETWEEN 600 AND 800;	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800
0	SELECT DISTINCT patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300;	SELECT T1.Admission FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.ALP < 300)
0	SELECT laboratory.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.birthday = '1982-04-01' AND laboratory.alp < 300;	SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 6.0;	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
0	SELECT SUBTraCT(laboratory.tp, 8.5) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.tp > 8.5;	SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.alb <= 3.5 OR laboratory.alb >= 5.5) ORDER BY patient.birthday DESC;	SELECT ID FROM Patient WHERE SEX = 'M' AND ID IN (SELECT ID FROM Laboratory WHERE ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC;
0	SELECT CASE WHEN laboratory.alb BETWEEN 3.5 AND 5.5 THEN 'Yes' ELSE 'No' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.birthday) = '1982';	SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'Normal' ELSE 'Abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'
0	SELECT count(CASE WHEN (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F') THEN 1 ELSE NULL END) * 100 / count(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id;	SELECT (COUNT(DISTINCT T1.ID) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS Percentage FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.UA > 6.5;
0	SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua < 8.0 AND patient.sex = 'M' OR laboratory.ua < 6.5 AND patient.sex = 'F';	SELECT avg(UA) FROM (SELECT ID, rank() over (PARTITION BY ID ORDER BY Date DESC ) as rk, UA FROM Laboratory WHERE ID IN (SELECT L.ID FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5))) WHERE rk = 1
0	SELECT patient.id, patient.sex, patient.birthday FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.un = 29;	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
0	SELECT patient.id, patient.sex, patient.birthday FROM patient WHERE patient.diagnosis = 'RA' AND patient.un < 30;	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'
0	SELECT count(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE cre >= 1.5 AND sex = 'M';	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5;
0	SELECT (SUM(sex = 'M') > SUM(sex = 'F')) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE cre >= 1.5;	SELECT CASE WHEN COUNT(DISTINCT CASE WHEN T1.SEX = 'M' THEN T1.ID END) > SUM(DISTINCT CASE WHEN T1.SEX = 'M' THEN T1.ID END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5;
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-bil` DESC LIMIT 1;	SELECT ID, SEX, Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` IS NOT NULL));
0	SELECT patient.sex, sum(laboratory.`t-bil`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id GROUP BY patient.sex HAVING sum(laboratory.`t-bil`) >= 2;	SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID
0	SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1;	SELECT DISTINCT ID, `T-CHO` FROM (SELECT T1.ID, T2.`T-CHO`, rank() over (ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID) WHERE rk = 1
0	SELECT sum(CASE WHEN patients.deathdate IS NULL THEN round((strftime('%J', date('now')) - strftime('%J', patients.birthdate)) / 365) ELSE round((strftime('%J', patients.deathdate) - strftime('%J', patients.birthdate)) / 365) END) / count(patients.patient) FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE conditions.description = 'Hypertension' AND patients.gender = 'M';	SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.`T-CHO` >= 250) AND T1.SEX = 'M'
0	SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100;	SELECT DISTINCT T2.ID, T2.Diagnosis FROM Laboratory T1 INNER JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.TG > 300;
0	SELECT count(id) FROM patient WHERE tg >= 200 AND SUBTraCT(year(current_timestamp), year(birthday)) > 50;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50
0	SELECT DISTINCT id FROM patient WHERE admission = '-' AND cpk < 250;	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND strftime('%Y', patient.birthday) BETWEEN '1936' AND '1956' AND laboratory.cpk >= 250;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250
0	SELECT patient.id, patient.sex, age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 AND laboratory.`t-cho` < 250;	SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250
0	SELECT laboratory.id , laboratory.glu FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.glu < 180 AND year(patient.`first date`) >= 1991;	SELECT T1.ID, T2.GLU FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Description) = '1991' AND T2.GLU < 180;
0	SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc <= 3.5 OR laboratory.wbc >= 9.0 GROUP BY patient.sex ORDER BY DATEDIFF(NOW(), patient.birthday) ASC;	SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC
0	SELECT patient.id , year(current_timestamp) - year(patient.birthday) AS age , patient.diagnosis FROM patient WHERE patient.rbc < 3.5;	SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
0	SELECT patient.sex, patient.admission FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND SUBTRACT(strftime('%Y', 'now'), strftime('%Y', patient.birthday)) >= 50 AND ( laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 );	SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50
0	SELECT id, sex FROM patient WHERE admission = '-' AND hgb < 10;	SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'
0	SELECT patient.id, patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND 10 < laboratory.hgb < 17 AND patient.diagnosis = 'SLE' ORDER BY patient.birthday ASC LIMIT 1;	SELECT DISTINCT ID, SEX FROM (SELECT T1.ID, T1.SEX, rank() over ( ORDER BY T1.Birthday ASC ) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17) WHERE rk = 1
0	SELECT patient.id , strftime('%Y', current_timestamp) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.id HAVING COUNT(patient.id) > 2 AND laboratory.hct >= 52;	SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )
1	SELECT avg(laboratory.hct) FROM laboratory WHERE laboratory.date LIKE '1991%' AND laboratory.hct < 29;	SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'
0	SELECT SUM(plt < 100), SUM(plt > 400) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE plt < 100 OR plt > 400;	SELECT (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT <= 100) - (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT >= 400) AS Difference
0	SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND strftime('%Y', laboratory.date) = '1984' AND SUBSTR(strftime('%Y', 'now'), 1, 4) - SUBSTR(strftime('%Y', patient.birthday), 1, 4) < 50;	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'
0	SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.pt >= 14;	SELECT CAST(COUNT(DISTINCT CASE WHEN T1.SEX = 'F' THEN T1.ID END) AS REAL) * 100 / COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55 AND T2.PT >= 14
0	SELECT * FROM patient WHERE year(`first date`) > 1992 AND pt < 14;	SELECT DISTINCT T1.ID FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) > '1992' AND T2.PT < 14;
0	SELECT count(laboratory.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`examination date` > '1997-01-01' AND laboratory.aptt < 45;	SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45
0	SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.aptt > 45 AND examination.thrombosis = 3;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45
0	SELECT count(laboratory.fg) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.wbc BETWEEN 3.5 AND 9.0 AND (laboratory.fg <= 150 OR laboratory.fg >= 450);	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'
0	SELECT count(DISTINCT id) FROM patient WHERE birthday > '1980-01-01' AND fg NOT BETWEEN 150 AND 450;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'
0	SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`u-pro` >= 30;	SELECT T1.Diagnosis FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.`U-PRO` >= 30)
0	SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE 0 < laboratory.`u-pro` < 30 AND examination.diagnosis = 'SLE';	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
0	SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.symptoms = 'abortion' AND examination.`acl igg` < 900;	SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;
0	SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igg` BETWEEN 900 AND 2000 AND examination.symptoms IS NOT NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
0	SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.iga BETWEEN 80 AND 500 ORDER BY laboratory.iga DESC LIMIT 1;	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA >= 80 AND IGA <= 500));
0	SELECT count(examination.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` BETWEEN 80 AND 500 AND strftime('%Y', patient.`first date`) >= 1990;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.IGA > 80 AND T2.IGA < 500 AND strftime('%Y', T1.`First Date`) >= '1990';
0	SELECT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl igm` NOT BETWEEN 40 AND 400 GROUP BY patient.diagnosis ORDER BY count(patient.diagnosis) DESC LIMIT 1;	SELECT Diagnosis FROM (SELECT T1.Diagnosis, rank() over (ORDER BY COUNT(T1.Diagnosis) DESC ) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.IGM <= 40 OR T2.IGM >= 400) GROUP BY T1.Diagnosis) WHERE rk = 1;
0	SELECT count(*) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.crp LIKE '+' OR examination.crp LIKE '-' OR examination.crp < 1.0 AND patient.description IS NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL;
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.crp NOT IN('+-', '-') AND laboratory.crp >= 1.0 AND SUBTraCT((YEAR(CURdate()), YEAR(patient.birthday))) < 18;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct = '+' AND patient.diagnosis = 'RA';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'
0	SELECT DISTINCT patient.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.ra IN('-', '+-') AND YEAR(patient.birthday) >= 1995;	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE RA IN ('-', '+-')) AND Birthday > '1985-01-01';
0	SELECT id FROM patient WHERE rf < 20 AND (YEAR(CURdate()) - YEAR(birthday)) > 60;	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60;
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf < 20 AND patient.diagnosis != 'thrombosis';	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0
0	SELECT count(DISTINCT laboratory.igg) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.c3 > 35 AND examination.`ana pattern` = 'P';	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'
0	SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND laboratory.rf = '<20.5' AND laboratory.igm = '<20.5' AND laboratory.iga = ( SELECT max(examination.`acl iga`) FROM examination ) LIMIT 1;	SELECT DISTINCT ID FROM (SELECT T1.ID, rank() over (ORDER BY T2.`aCL IgA` DESC) as rk FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29)) WHERE rk = 1;
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'APS' AND laboratory.c4 > 10;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'
0	SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.rnp = '-' AND patient.admission = '+';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP IN ('-', '+-') AND T1.Admission = '+'
0	SELECT birthday FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE rnp NOT IN('-', '+-') ) ORDER BY birthday DESC LIMIT 1;	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.RNP NOT IN ('-', '+-'))) WHERE rk = 1
0	SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.sm IN('-', '+-') AND examination.thrombosis = '1';	SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 0
0	SELECT id FROM patient WHERE sm NOT IN('-', '+-') ORDER BY birthday DESC LIMIT 3;	SELECT ID FROM (SELECT ID, rank() over ( ORDER BY Birthday DESC ) AS RK FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('negative', '0'))) WHERE rk <= 3
0	SELECT examination.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE `examination date` >= '1997-01-01' AND sc170 IN('-', '+-');	SELECT DISTINCT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.SC170 IN ('negative', '0');
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sc170 IN('-', '+-') AND patient.sex = 'M' AND examination.symptoms = 'vertigo';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL
0	SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssa IN('-','+-') AND YEAR(`first date`) < 1990;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'
0	SELECT id FROM patient WHERE ssa NOT IN('-', '+-') ORDER BY `first date` LIMIT 1;	SELECT DISTINCT ID FROM (SELECT T1.ID, rank() over (ORDER BY T1.`First Date` ASC) as rk FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0')) WHERE rk = 1
0	SELECT count(DISTINCT laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.ssb IN('-', '+-') AND examination.diagnosis = 'SLE';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.ssb IN('-', '+-') AND examination.symptoms IS NOT NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('negative', '0') AND T2.Symptoms IS NOT NULL;
0	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.centromea IN('-', '+-') AND laboratory.ssb IN('-', '+-') AND patient.sex = 'M';	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'
0	SELECT DISTINCT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.dna >= 8;	SELECT T1.Diagnosis FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.DNA >= 8)
1	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna < 8 AND patient.description IS NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL
0	SELECT count(*) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`dna-ii` < 8 AND patient.admission = '+';	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Admission = '+';
0	SELECT cast(sum(CASE WHEN laboratory.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE';	SELECT COUNT(DISTINCT CASE WHEN T1.Diagnosis = 'SLE' THEN T1.ID END) * 100.0/ COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60;
0	SELECT count(patient.id) FROM patient WHERE patient.sex = 'M' AND patient.got < 60;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60;
0	SELECT MAX(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60;	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GOT >= 60)) WHERE rk = 1;
0	SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.gpt < 60 ORDER BY laboratory.gpt DESC LIMIT 3;	SELECT Birthday FROM (SELECT T2.Birthday, rank() over (ORDER BY MAX(T1.GPT) DESC) as rk FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.GPT < 60 GROUP BY T1.ID, T2.Birthday) WHERE rk <= 3
0	SELECT sum(CASE WHEN patient.sex = 'M' THEN 1 ELSE 0 END) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.got < 60;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
0	SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh < 500 ORDER BY laboratory.ldh DESC LIMIT 1;	SELECT T1.`First Date` FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500));
0	SELECT date FROM patient WHERE id = ( SELECT MAX(id) FROM patient ) AND ldh >= 500;	SELECT `First Date` FROM (SELECT T1.`First Date`, rank() over (ORDER BY T1.`First Date` DESC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.LDH >= 500)) WHERE rk = 1
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp >= 300 AND patient.admission = '+';	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T1.ALP >= 300 AND T2.Admission = '+';
0	SELECT count(laboratory.alp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.admission = '-' AND laboratory.alp < 300;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300;
0	SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tp < 6.0;	SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TP < 6.0);
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp > 6.0 AND laboratory.tp < 8.5;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5;
0	SELECT examination.`examination date` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.alb > 3.5 AND laboratory.alb < 5.5;	SELECT Date FROM Laboratory WHERE ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5)
0	SELECT count(laboratory.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.alb > 3.5 AND laboratory.alb < 5.5 AND laboratory.tp BETWEEN 6.0 AND 8.5;	SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5
0	SELECT MAX(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'F' AND examination.`acl igg` > 6.50;	SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID IN (SELECT Patient.ID FROM Laboratory JOIN Patient on Laboratory.ID = Patient.ID WHERE UA > 6.5 AND SEX = 'F' AND UA = (SELECT MAX(UA) FROM Laboratory JOIN Patient on Laboratory.ID = Patient.ID WHERE UA > 6.5 AND SEX = 'F'))
0	SELECT MAX(ana) FROM examination WHERE cre < 1.5;	SELECT MAX(E.ANA) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.CRE < 1.5;
0	SELECT patient.id FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.cre < 1.5 AND MAX(examination.`acl iga`);	SELECT DISTINCT ID FROM (SELECT T2.ID, rank() over ( ORDER BY T2.`aCL IgA` DESC ) as rk FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5) WHERE rk = 1
0	SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` >= 2.0 AND examination.`ana pattern` LIKE '%P%';	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 AND T2.`ANA Pattern` LIKE '%P%';
0	SELECT examination.`acl igg` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`t-bil` < 2.0;	SELECT E.ANA FROM Examination E JOIN (SELECT ID, MAX(`T-BIL`) AS MaxBil FROM Laboratory WHERE `T-BIL` < 2.0 GROUP BY ID HAVING MaxBil = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)) L ON E.ID = L.ID;
0	SELECT count(*) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'Normal' AND laboratory.centromea = 'negative' AND laboratory.rnp = 'negative' AND laboratory.`t-cho` >= 250;	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` >= 250 AND T2.KCT = '-';
0	SELECT count(*) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND `t-cho` < 250;	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P';
0	SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tg < 200 AND examination.symptoms IS NOT NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL;
0	SELECT patient.diagnosis FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.tg < 200 AND patient.diagnosis = 'Normal';	SELECT P.Diagnosis FROM Patient P WHERE P.ID IN (SELECT L.ID FROM Laboratory L WHERE L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200));
0	SELECT laboratory.id, examination.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.cpk < 250 AND examination.thrombosis = 0;	SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250
0	SELECT count(patient.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE laboratory.cpk < 250 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+');	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+');
0	SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu > 180 ORDER BY patient.birthday ASC LIMIT 1;	SELECT Birthday FROM (SELECT T1.Birthday, rank() over (ORDER BY T1.Birthday ASC) as rk FROM Patient AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.GLU > 180)) WHERE rk = 1
0	SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu < 180 AND patient.diagnosis != 'thrombosis';	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.GLU < 180 AND T2.Thrombosis = 0;
1	SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT count(laboratory.wbc) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'SLE' AND laboratory.wbc BETWEEN 3.5 AND 9.0;	SELECT COUNT(DISTINCT T1.ID) FROM Patient T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0;
0	SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc <= 3.5 OR laboratory.rbc >= 6.0 AND patient.admission = '-';	SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'
0	SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.plt > 100 AND laboratory.plt < 400 AND patient.diagnosis IS NOT NULL;	SELECT COUNT(DISTINCT T1.ID) FROM Laboratory T1 JOIN Examination T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Symptoms IS NOT NULL;
0	SELECT laboratory.plt FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'MCTD' AND (laboratory.plt > 100 AND laboratory.plt < 400);	SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400
1	SELECT avg(pt) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE sex = 'M' AND pt < 14;	SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'
0	SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14;	SELECT COUNT(DISTINCT T1.ID) FROM Examination T1 JOIN Laboratory T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14;
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Sanders' AND member.first_name = 'Angela';	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
1	SELECT count(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'
0	SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';	SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer';
0	SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';	SELECT phone FROM member WHERE member_id IN (SELECT T2.link_to_member FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer')
0	SELECT count(member.t_shirt_size) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';	SELECT COUNT(DISTINCT T3.member_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium';
0	SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Student' GROUP BY event.event_id ORDER BY COUNT(attendance.link_to_event) DESC LIMIT 1;	SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery);
1	SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';	SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'
1	SELECT event.event_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';	SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM attendance T2 JOIN member T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T2.link_to_event = T3.event_id);
0	SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND YEAR(event.event_date) = 2019;	SELECT COUNT(DISTINCT T3.event_id) FROM member T1 INNER JOIN attendance T2 ON T1.member_id = T2.link_to_member INNER JOIN event T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison' AND strftime('%Y', T3.event_date) = '2019';
0	SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Member' AND event.type = 'Meeting';	SELECT COUNT(DISTINCT event.event_id) FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 10;
0	SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_name HAVING COUNT(event_id) > 20;	SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'Fundraiser' GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20;
0	SELECT avg(attendance.link_to_event) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.type = 'Meeting' AND YEAR(event.event_date) = 2020;	SELECT AVG(total_attendance) FROM (SELECT COUNT(T1.link_to_event) AS total_attendance FROM event T2 LEFT JOIN attendance T1 ON T2.event_id = T1.link_to_event WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020' GROUP BY T2.event_id)
1	SELECT expense_description FROM expense WHERE cost = ( SELECT max(cost) FROM expense );	SELECT expense_description FROM expense WHERE cost = (SELECT max(cost) FROM expense);
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
0	SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';	SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.member_id IN (SELECT T2.link_to_member FROM attendance AS T2 INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud');
1	SELECT member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';	SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
1	SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Ramsey' AND member.first_name = 'Sherri';	SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
1	SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.last_name = 'Hewitt' AND member.first_name = 'Tyler';	SELECT DISTINCT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
0	SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';	SELECT SUM(T2.amount) FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President';
0	SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';	SELECT T2.spent FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food'
1	SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President';	SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
0	SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE budget.category = 'Advertisement' AND event.event_name = 'September Meeting';	SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement'
0	SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Pierce' AND member.first_name = 'Guidi';	SELECT DISTINCT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'
1	SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';	SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'
1	SELECT CASE WHEN expense.approved = 'true' THEN 'yes' ELSE 'no' END FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'October Meeting' AND expense.expense_date = '2019-10-08';	SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'
0	SELECT sum(expense.cost) / count(expense.expense_id) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Allen' AND member.first_name = 'Elijah' AND month(expense.expense_date) = 9 AND month(expense.expense_date) = 10;	SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')
0	SELECT sum(budget.spent) - sum(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Student_Club';	SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
1	SELECT location FROM event WHERE event_name = 'Spring Budget Review';	SELECT location FROM event WHERE event_name = 'Spring Budget Review'
1	SELECT expense.cost FROM expense WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';	SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
0	SELECT budget.remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;	SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )
1	SELECT income.notes FROM income WHERE income.date_received = '2019-09-14' AND income.source = 'Fundraising';	SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
1	SELECT count(major.major_id) FROM major WHERE major.college = 'College of Humanities and Social Sciences';	SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'
1	SELECT phone FROM member WHERE last_name = 'Jacobs' AND first_name = 'Carlo';	SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
1	SELECT zip_code.county FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'O''Gallagher' AND member.first_name = 'Adela';	SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'
1	SELECT count(budget.budget_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;	SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0
1	SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';	SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'
0	SELECT DISTINCT event.status FROM budget INNER JOIN event ON budget.link_to_event = event.event_id INNER JOIN expense ON budget.link_to_event = expense.link_to_budget WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-8-20';	SELECT event_status FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-08-20')
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Thomason' AND member.first_name = 'Brent';	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
0	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
1	SELECT zip_code.type FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Nielson' AND member.first_name = 'Christof';	SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
1	SELECT zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Harrison' AND member.first_name = 'Sacha';	SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
1	SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';	SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
1	SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.source = 'Dues' AND member.first_name = 'Connor' AND member.last_name = 'Hilton';	SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'
0	SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;	SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE source = 'Dues' AND date_received = (SELECT min(date_received) FROM income WHERE source = 'Dues'))
0	SELECT cast(sum(CASE WHEN budget.category = 'Advertisement' AND event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) AS REAL) / cast(sum(CASE WHEN budget.category = 'Advertisement' AND event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) AS REAL) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;	SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'
1	SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount * 1 ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';	SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
1	SELECT SUM(expense.cost) FROM expense WHERE expense.expense_description = 'Pizza';	SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
1	SELECT count(zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';	SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'
1	SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences';	SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
0	SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.last_name = 'Firth';	SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
0	SELECT expense.expense_description FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY budget.remaining ASC LIMIT 1;	SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.remaining = (SELECT MIN(remaining) FROM budget)
0	SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';	SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'
0	SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1;	SELECT college FROM (SELECT college, COUNT(member_id) AS member_count FROM major JOIN member ON major_id = link_to_major GROUP BY college) WHERE member_count = (SELECT MAX(member_count) FROM (SELECT COUNT(member_id) AS member_count FROM major JOIN member ON major_id = link_to_major GROUP BY college));
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';	SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
0	SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1;	SELECT T2.event_name FROM event T2 WHERE T2.event_id IN (SELECT T1.link_to_event FROM budget T1 GROUP BY T1.link_to_event HAVING SUM(T1.amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM budget GROUP BY link_to_event)))
0	SELECT expense.expense_id FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President';	SELECT E.expense_description FROM expense E JOIN member M ON E.link_to_member = M.member_id WHERE M.position = 'Vice President';
0	SELECT count(link_to_member) FROM attendance WHERE link_to_event LIKE 'recI43CzsZ0Q625ma';	SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer');
1	SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.last_name = 'Mason' AND member.first_name = 'Casey';	SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'
1	SELECT count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';	SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'
0	SELECT count(attendance.link_to_event) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE member.phone = '954-555-6240';	SELECT COUNT(DISTINCT link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';
1	SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'
0	SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status LIKE 'Closed' ORDER BY budget.spent / budget.amount DESC LIMIT 1;	SELECT event_name FROM (SELECT T2.event_name, rank() over (ORDER BY T1.spent / T1.amount DESC) as rk FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed') WHERE rk = 1
1	SELECT count(member.member_id) FROM member WHERE member.position = 'President';	SELECT COUNT(member_id) FROM member WHERE position = 'President'
1	SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.spent DESC LIMIT 1;	SELECT MAX(spent) FROM budget
0	SELECT count(event_id) FROM `event` WHERE type = 'Meeting' AND YEAR(event_date) = 2020;	SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'
1	SELECT sum(budget.spent) FROM budget WHERE budget.category = 'Food';	SELECT SUM(spent) FROM budget WHERE category = 'Food'
1	SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member GROUP BY member.member_id HAVING COUNT(attendance.link_to_event) > 7;	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7
0	SELECT member.first_name , member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Interior Design' AND event.event_name = 'Community Theater';	SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Interior Design' AND T2.member_id IN (SELECT T3.link_to_member FROM attendance AS T3 INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater')
1	SELECT member.first_name || ' ' || member.last_name AS name_of_students FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';	SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
0	SELECT count(*) FROM income WHERE income.link_to_member = 'rec280Sk7o31iG0Tx';	SELECT TOTAL(income.amount) FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour';
0	SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;	SELECT first_name, last_name FROM member WHERE member_id IN (SELECT link_to_member FROM income WHERE amount > 40);
0	SELECT SUM(expense.cost) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.event_name = 'Yearly Kickoff';	SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'
0	SELECT member.first_name, member.last_name FROM member INNER JOIN budget ON member.member_id = budget.link_to_member WHERE event.event_name = 'Yearly Kickoff';	SELECT T4.first_name, T4.last_name FROM member AS T4 WHERE T4.member_id IN (SELECT T3.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff');
0	SELECT member.first_name, member.last_name, income.source, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1;	SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(T4.amount) FROM member AS T3 INNER JOIN income AS T4 ON T3.member_id = T4.link_to_member)
0	SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event GROUP BY event.event_name ORDER BY MIN(budget.spent) LIMIT 1;	SELECT T3.event_name FROM event T3 WHERE EXISTS (SELECT 1 FROM budget T2 JOIN expense T1 ON T2.budget_id = T1.link_to_budget WHERE T2.link_to_event = T3.event_id GROUP BY T2.link_to_event HAVING MIN(T1.cost) = (SELECT MIN(cost) FROM expense WHERE cost IS NOT NULL))
0	SELECT DIVIDE(SUM(t.cost), SUM(t.cost)) * 100 FROM expense t WHERE t.event_name = 'Yearly Kickoff';	SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
0	SELECT DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics')) FROM major;	SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major JOIN member on major.major_id = member.link_to_major
0	SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' and '2019-09-30' GROUP BY income.source ORDER BY sum(income.amount) DESC LIMIT 1;	SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source) T2);
1	SELECT first_name, last_name, email FROM member WHERE position = 'Secretary';	SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';	SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'
0	SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND YEAR(event.event_date) = 2019;	SELECT COUNT(DISTINCT T2.link_to_member) FROM event T1 JOIN attendance T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND strftime('%Y', T1.event_date) = '2019';
0	SELECT count(attendance.link_to_event) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';	SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi' GROUP BY T2.member_id
1	SELECT AVG(t.spent) FROM budget t WHERE t.category = 'Food' AND t.event_status = 'Closed';	SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;	SELECT T2.event_name FROM event T2, (SELECT link_to_event, MAX(spent) AS max_spent FROM budget WHERE category = 'Advertisement' GROUP BY link_to_event) T1 WHERE T2.event_id = T1.link_to_event AND T1.max_spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement');
0	SELECT iif(attendance.link_to_event = 'rec2N69DMcrqN9PJC', 'YES', 'NO') FROM attendance RIGHT JOIN member ON attendance.link_to_member = member.member_id WHERE member.last_name = 'Mclean' AND member.first_name = 'Maya';	SELECT CASE WHEN member_id IN (SELECT attendance.link_to_member FROM attendance INNER JOIN event ON link_to_event = event_id WHERE event_name = 'Women''s Soccer') THEN 'YES' ELSE 'NO' END AS result FROM (SELECT * FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean')
0	SELECT SUM(event.type = 'Community Service'), COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Student_Club' AND event.event_date BETWEEN '2019-01-01' and '2019-12-31';	SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'
0	SELECT expense.cost FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE expense.expense_description = 'Posters' AND event.event_name = 'September Speaker';	SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'
0	SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;	SELECT t_shirt_size FROM (SELECT t_shirt_size, rank() over (ORDER BY COUNT(t_shirt_size) DESC) as rk FROM member GROUP BY t_shirt_size) WHERE rk = 1;
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.event_status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;	SELECT event_name FROM event WHERE event_id IN (SELECT event_id FROM (SELECT T1.event_id, rank() over (ORDER BY T2.remaining ASC) as rk FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0) WHERE rk = 1)
0	SELECT event.type, SUM(expense.cost) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY event.type;	SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'
0	SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;	SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC
0	SELECT budget.budget_id FROM budget WHERE budget.category = 'Food' ORDER BY budget.amount DESC LIMIT 1;	SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )
0	SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;	SELECT budget_id FROM (SELECT budget_id, rank() over (ORDER BY amount DESC) as rk FROM budget WHERE category = 'Advertisement') WHERE rk <= 3
0	SELECT sum(expense.cost) FROM expense INNER JOIN zip_code ON expense.expense_id = zip_code.zip_code WHERE expense.expense_description = 'Parking';	SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
1	SELECT SUM(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';	SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
1	SELECT member.first_name, member.last_name, sum(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.link_to_member = 'rec4BLdZHS2Blfp4v';	SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'
0	SELECT expense_description FROM expense WHERE link_to_member = 'rec1x5zBFIqoOuPW8';	SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
0	SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.t_shirt_size = 'X-Large';	SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'
0	SELECT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50;	SELECT T1.zip FROM member AS T1 WHERE member_id IN (SELECT T2.link_to_member FROM expense AS T2 WHERE T2.cost < 50);
1	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Cullen' AND member.first_name = 'Phillip';	SELECT T1.major_name FROM major AS T1 WHERE T1.major_id IN (SELECT T2.link_to_major FROM member AS T2 WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen')
1	SELECT member.position FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business';	SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.t_shirt_size LIKE 'Medium' AND major.major_name LIKE 'Business';	SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'
0	SELECT event.type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30;	SELECT T1.type FROM event AS T1 WHERE T1.event_id IN (SELECT T2.link_to_event FROM budget AS T2 WHERE T2.remaining > 30);
0	SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';	SELECT T1.type FROM event AS T1 WHERE T1.location = 'MU 215'
0	SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';	SELECT T1.type FROM event AS T1 WHERE T1.event_date = '2020-03-24T12:00:00'
0	SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';	SELECT T1.major_name FROM major AS T1 WHERE major_id IN (SELECT T2.link_to_major FROM member AS T2 WHERE T2.position = 'Vice President')
0	SELECT cast(sum(CASE WHEN major.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id;	SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'
0	SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';	SELECT T1.type FROM event AS T1 WHERE T1.location = 'MU 215'
1	SELECT count(amount) FROM income WHERE amount = 50;	SELECT COUNT(income_id) FROM income WHERE amount = 50
1	SELECT count(member.member_id) FROM member WHERE member.position = 'Member' AND member.t_shirt_size = 'X-Large';	SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
1	SELECT count(major.major_name) FROM major WHERE major.department = 'School of Applied Sciences, Technology and Education' AND major.college = 'College of Agriculture and Applied Sciences';	SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'
0	SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';	SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'
0	SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;	SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker';
0	SELECT zip_code.city, zip_code.state FROM major INNER JOIN member ON major.major_id = member.link_to_major INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member';	SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'
0	SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Vice President' AND event.location = '900 E. Washington St.';	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')) AND type = 'Social' AND location = '900 E. Washington St.'
1	SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';	SELECT T1.last_name, T1.position FROM member AS T1 WHERE member_id IN (SELECT T2.link_to_member FROM expense AS T2 WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza');
0	SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';	SELECT last_name FROM member WHERE member_id IN (SELECT link_to_member FROM attendance JOIN event on event_id = link_to_event WHERE event_name = 'Women''s Soccer') AND position = 'Member'
0	SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';	SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'
0	SELECT state FROM zip_code WHERE type = 'PO Box';	SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL
1	SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.county = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico';	SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
0	SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND event.type = 'Game' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20';	SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
0	SELECT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50;	SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50
0	SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19';	SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'
0	SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Katy';	SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'
0	SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'college of Agriculture and Applied Sciences' AND major.major_name = 'Business';	SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
0	SELECT email FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE cost > 20 AND expense_date BETWEEN '2019-09-10' and '2019-11-19';	SELECT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' GROUP BY member_id HAVING SUM(T2.cost) > 20;
1	SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'education';	SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name = 'education' AND T2.college = 'College of Education & Human Services'
0	SELECT cast(sum(CASE WHEN budget.remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id;	SELECT (COUNT(DISTINCT CASE WHEN B.remaining < 0 THEN link_to_event END) * 100.0 / (SELECT count(*) FROM event)) AS percentage_over_budget FROM budget B;
1	SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' and '2020-03-31';	SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'
0	SELECT expense.expense_description FROM expense WHERE expense.cost > 50;	SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
1	SELECT member.first_name, member.last_name FROM member WHERE member.t_shirt_size = 'X-Large';	SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
1	SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code;	SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code
0	SELECT event.event_name, event.location FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 0;	SELECT event_name, location FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE remaining > 0);
0	SELECT event.event_name , event.event_date FROM expense INNER JOIN event ON expense.expense_id = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;	SELECT T1.event_name, T1.event_date FROM event AS T1 WHERE T1.event_id IN (SELECT T2.link_to_event FROM budget AS T2 INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100)
0	SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > 100;	SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.member_id IN (SELECT link_to_member FROM expense AS T3 WHERE T3.cost > 100)
0	SELECT DISTINCT zip_code.city, zip_code.state FROM income INNER JOIN member ON income.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE income.amount > 40;	SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40
0	SELECT member.first_name, member.last_name, MAX(expense.cost) FROM expense INNER JOIN attendance ON expense.expense_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING COUNT(expense.expense_id) > 1;	SELECT member_id FROM (SELECT T2.member_id, rank() over (ORDER BY SUM(T1.cost) DESC) as rk FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1) WHERE rk = 1
0	SELECT avg(expense.cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';	SELECT SUM(T1.cost) / COUNT(DISTINCT T3.link_to_event) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 on T3.budget_id = T1.link_to_budget WHERE T2.position != 'Member';
0	SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' GROUP BY event.event_name HAVING expense.cost < DIVIDE(SUM(expense.cost), COUNT(event.event_id));	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Parking' AND budget_id IN (SELECT link_to_budget FROM expense GROUP BY link_to_budget HAVING SUM(cost) < (SELECT SUM(cost) / COUNT(DISTINCT link_to_event) FROM budget JOIN expense ON budget_id = link_to_budget WHERE category = 'Parking')))
0	SELECT SUM(expense.cost), COUNT(event.event_id) FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE event.type = 'Game';	SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
0	SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Water, chips, cookies' ORDER BY expense.cost DESC LIMIT 1;	SELECT DISTINCT budget_id FROM (SELECT T2.budget_id, rank() over (ORDER BY T1.cost DESC) as rk FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies') WHERE rk = 1
0	SELECT member.first_name, member.last_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.first_name, member.last_name ORDER BY sum(expense.cost) DESC LIMIT 0, 5;	WITH Total AS ( SELECT link_to_member, SUM(cost) AS total_spending FROM expense WHERE cost IS NOT NULL GROUP BY link_to_member ) SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN ( SELECT * FROM Total WHERE total_spending IN ( SELECT total_spending FROM Total ORDER BY total_spending DESC LIMIT 5 ) ) AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.total_spending DESC
0	SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT AVG(cost) FROM expense );	SELECT first_name, last_name, phone FROM member WHERE member_id IN (SELECT DISTINCT link_to_member FROM expense group by link_to_member HAVING MIN(cost) > (SELECT AVG(cost) FROM expense))
0	SELECT cast(sum(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code;	SELECT CAST( ( SUM( CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END ) - SUM( CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END ) ) AS REAL ) * 100 / COUNT(T1.member_id) AS diff FROM (SELECT * FROM member WHERE position = 'Member') AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip
1	SELECT major.major_name, major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.last_name = 'Gerke' AND member.first_name = 'Garrett';	SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
0	SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Water, Veggie tray, supplies';	SELECT T2.first_name, T2.last_name, SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies' GROUP BY T2.member_id
1	SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';	SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'
0	SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';	SELECT category, SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'January Speaker' ) GROUP BY category
0	SELECT event.event_name FROM budget INNER JOIN event ON event.event_id = budget.link_to_event WHERE budget.category = 'Food';	SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food');
1	SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09';	SELECT T1.first_name, T1.last_name, T2.amount FROM member T1 JOIN income T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09';
0	SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';	SELECT category FROM budget WHERE budget_id IN (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters');
1	SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';	SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'
0	SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';	SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_id
0	SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke';	SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
1	SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;	SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092
1	SELECT count(gasstationid) FROM gasstations WHERE gasstations.country = 'CZE' AND gasstations.segment = 'Premium';	SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
0	SELECT count(currency = 'EUR') / count(currency = 'CZK') FROM customers;	SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers
0	SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'LAM' GROUP BY yearmonth.customerid ORDER BY yearmonth.consumption ASC LIMIT 1;	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) ASC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT cast(sum(yearmonth.consumption) AS REAL) / 12 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date LIKE '2013%' AND customers.segment = 'SME';	SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'
0	SELECT yearmonth.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201101' AND '201112' AND customers.currency = 'CZK' GROUP BY yearmonth.customerid ORDER BY count(yearmonth.customerid) DESC LIMIT 1;	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) DESC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND yearmonth.consumption < 30000;	SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1
1	SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212';	SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'
0	SELECT strftime('%Y', date) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' ORDER BY consumption DESC LIMIT 1;	SELECT year FROM (SELECT SUBSTRING(T2.Date, 1, 4) as year, rank() over ( ORDER BY SUM(T2.Consumption) DESC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4)) WHERE rk = 1
1	SELECT segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid GROUP BY segment ORDER BY sum(consumption) ASC LIMIT 1;	SELECT Segment FROM (SELECT T1.Segment, rank() over (ORDER BY SUM(T2.Consumption) ASC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment) WHERE rk = 1
0	SELECT strftime('%Y', date) FROM yearmonth GROUP BY strftime('%Y', date) ORDER BY sum(consumption) DESC LIMIT 1;	SELECT year FROM (SELECT SUBSTR(T2.Date, 1, 4) as year, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4)) WHERE rk = 1
0	SELECT yearmonth.date FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND yearmonth.date LIKE '2013%' ORDER BY yearmonth.consumption DESC LIMIT 1;	SELECT month FROM (SELECT SUBSTR(T2.Date, 5, 2) as month, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2)) WHERE rk = 1
0	SELECT SUM(yearmonth.consumption) / COUNT(yearmonth.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'CZK' AND yearmonth.date BETWEEN '201301' AND '201312';	SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID), CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID), CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = (SELECT MIN(Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'CZK') AND T2.Date BETWEEN 201301 AND 201312
0	SELECT segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON transactions_1k.customerid = gasstations.gasstationid INNER JOIN products ON gasstations.gasstationid = products.productid WHERE customers.currency = 'EUR' AND yearmonth.date BETWEEN '201201' AND '201312' GROUP BY segment ORDER BY (yearmonth.consumption - yearmonth.consumption) DESC LIMIT 1;	WITH YearlyConsumption AS (SELECT T2.Segment, SUBSTR(T1.Date, 1, 4) AS Year, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND (SUBSTR(T1.Date, 1, 4) = '2012' OR SUBSTR(T1.Date, 1, 4) = '2013') GROUP BY T2.Segment, SUBSTR(T1.Date, 1, 4)) SELECT Y2013.Segment, ((Y2013.TotalConsumption - Y2012.TotalConsumption) / Y2013.TotalConsumption) * 100 AS PercentageIncrease FROM YearlyConsumption Y2013 JOIN YearlyConsumption Y2012 ON Y2013.Segment = Y2012.Segment WHERE Y2013.Year = '2013' AND Y2012.Year = '2012'
1	SELECT sum(t.amount) FROM transactions_1k t WHERE t.customerid = '6' AND t.date BETWEEN '201308' AND '201311';	SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'
1	SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN gasstations.segment = 'Discount' ELSE 0 END) - sum(CASE WHEN gasstations.country = 'SVK' THEN gasstations.segment = 'Discount' ELSE 0 END) FROM gasstations;	SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS Difference;
1	SELECT sum(CASE WHEN yearmonth.customerid = 7 THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN yearmonth.customerid = 5 THEN yearmonth.consumption ELSE 0 END) FROM yearmonth WHERE yearmonth.date = '201304';	SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'
0	SELECT sum(CASE WHEN customers.segment = 'SME' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid;	SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'
0	SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '201310' ORDER BY yearmonth.consumption DESC LIMIT 1;	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over ( ORDER BY SUM(T2.Consumption) DESC ) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID) WHERE rk = 1
0	SELECT transactions_1k.customerid, transactions_1k.amount FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.segment = 'KAM' GROUP BY transactions_1k.customerid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1;	SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID HAVING SUM(T2.Consumption) = (SELECT MAX(Total) FROM (SELECT SUM(T2.Consumption) AS Total FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption IS NOT NULL GROUP BY T1.CustomerID))
1	SELECT sum(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';	SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'
0	SELECT SUM(CASE WHEN customers.segment = 'LAM' THEN yearmonth.consumption ELSE 0 END) / SUM(CASE WHEN customers.segment = 'LAM' THEN 1 ELSE 0 END) * 100 FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid;	SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers WHERE Segment = 'LAM')) AS Percentage FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Consumption > 46.73;
1	SELECT gasstations.country, count(gasstations.gasstationid) FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country;	SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country
0	SELECT SUM(CASE WHEN customers.segment = 'KAM' THEN transactions_1k.amount ELSE 0 END) / SUM(CASE WHEN customers.segment = 'KAM' THEN 1 ELSE 0 END) * 100 FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid;	SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'
1	SELECT cast(sum(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / count(yearmonth.date) FROM yearmonth WHERE yearmonth.date = '201202';	SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
0	SELECT gasstations.segment FROM gasstations WHERE gasstations.country = 'CZE';	SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'
0	SELECT yearmonth.customerid FROM yearmonth WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;	SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID HAVING SUM(Consumption) = (SELECT MAX(TotalConsumption) FROM (SELECT SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID) T1);
1	SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY customers.segment ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;	SELECT Segment FROM (SELECT T2.Segment, rank() over ( ORDER BY SUM(T1.Consumption) ASC ) as rk FROM yearmonth T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment) WHERE rk = 1
0	SELECT customers.`customer names` FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201206' AND customers.segment = 'SME' ORDER BY yearmonth.consumption ASC LIMIT 1;	SELECT CustomerID FROM (SELECT T1.CustomerID, rank() over (ORDER BY SUM(T2.Consumption) ASC) as rk FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID) WHERE rk = 1;
0	SELECT max(yearmonth.consumption) FROM yearmonth WHERE yearmonth.date LIKE '2012%';	SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1
0	SELECT yearmonth.date, SUM(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' GROUP BY yearmonth.date ORDER BY SUM(yearmonth.consumption) DESC LIMIT 1;	SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1
1	SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date = '201309';	SELECT Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Date >= '2013-09-01' AND Date < '2013-10-01')
1	SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date LIKE '201306%';	SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y', T1.Date) = '2013' AND strftime('%m', T1.Date) = '06'
0	SELECT chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.currency = 'EUR';	SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'
0	SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR';	SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'
1	SELECT avg(price) FROM transactions_1k WHERE date LIKE '2012-01%';	SELECT AVG(Amount * Price) FROM transactions_1k WHERE Date >= '2012-01-01' AND Date < '2012-02-01';
0	SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND transactions_1k.amount > 1000;	SELECT COUNT(DISTINCT T1.CustomerID) FROM customers T1 JOIN yearmonth T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000;
1	SELECT products.description FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE gasstations.country = 'CZE';	SELECT Description FROM transactions_1k JOIN products ON transactions_1k.ProductID = products.ProductID WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE')
1	SELECT DISTINCT transactions_1k.time FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11;	SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
1	SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
1	SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date > '2012-01-01';	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'
0	SELECT sum(transactions_1k.price) / count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE';	SELECT AVG(Amount * Price) AS AverageTotalPrice FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE';
0	SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR';	SELECT AVG(T2.Amount * T2.Price) AS AverageTotalPrice FROM customers T1 JOIN transactions_1k T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'
0	SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' ORDER BY amount DESC LIMIT 1;	SELECT CustomerID FROM (SELECT CustomerID, rank() over ( ORDER BY SUM(Amount * Price) DESC) as rk FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID) WHERE rk = 1
0	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25';	SELECT DISTINCT Country FROM (SELECT T2.Country, rank() over ( ORDER BY T1.Time DESC ) as rk FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25') WHERE rk = 1
1	SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND transactions_1k.date = '2012-08-24';	SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'
1	SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00';	SELECT DISTINCT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'
0	SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR' AND transactions_1k.time < '13:00:00' AND transactions_1k.date = '2012-08-26';	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'
0	SELECT customers.segment FROM customers ORDER BY customers.customerid LIMIT 1;	SELECT c.Segment FROM customers c WHERE EXISTS (SELECT 1 FROM transactions_1k t WHERE t.CustomerID = c.CustomerID AND t.Date = (SELECT MIN(Date) FROM transactions_1k));
1	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';	SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
0	SELECT transactions_1k.productid FROM transactions_1k WHERE strftime('%Y/%m/%d %H:%M:%S', transactions_1k.date) = '2012/8/23 21:20:00';	SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';
1	SELECT transactions_1k.amount, transactions_1k.date FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE transactions_1k.customerid = 39 AND yearmonth.date = '2012-01-01';	SELECT CustomerID, Date, Consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' GROUP BY CustomerID HAVING SUM(Price * Amount) = 124.05) AND Date = '201201'
0	SELECT sum(CASE WHEN gasstations.country = 'CZE' THEN 1 ELSE 0 END) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012-08-26';	SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'
0	SELECT DISTINCT customers.currency FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date LIKE '%201306%';	SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17
1	SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 667467;	SELECT DISTINCT gs.Country FROM gasstations gs JOIN transactions_1k tx ON gs.GasStationID = tx.GasStationID WHERE tx.CardID = 667467;
0	SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '2012-08-24';	SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' GROUP BY T1.CustomerID HAVING SUM(T1.Price * T1.Amount) = 548.4
0	SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.currency = 'EUR' AND yearmonth.date = '2012-08-25';	SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date = '2012-08-25')) AS Percentage FROM transactions_1k T1 JOIN customers T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25' AND T2.Currency = 'EUR';
1	SELECT (transactions_1k.amount - transactions_1k.amount) / transactions_1k.amount FROM transactions_1k WHERE transactions_1k.date = '2012-08-25' AND transactions_1k.customerid = 6348;	SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID IN (SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' GROUP BY T1.CustomerID HAVING SUM(T1.Price * T1.Amount) = 634.8) GROUP BY CustomerID;
0	SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid ORDER BY transactions_1k.amount DESC LIMIT 1;	SELECT GasStationID FROM (SELECT GasStationID, rank() over (ORDER BY SUM(Amount * Price) DESC) as rk FROM transactions_1k GROUP BY GasStationID) WHERE rk = 1
0	SELECT sum(yearmonth.consumption)/sum(yearmonth.consumption)*100 FROM yearmonth INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE gasstations.country = 'SVK' AND gasstations.segment = 'Premium';	SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations
0	SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE yearmonth.date = '201201' AND customers.customerid = 38508;	SELECT (SELECT SUM(T1.Price * T1.Amount) FROM transactions_1k AS T1 JOIN gasstations as T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CustomerID = '38508'), (SELECT T1.Consumption FROM yearmonth as T1 WHERE T1.CustomerID = '38508' AND T1.Date = '201201')
0	SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid ORDER BY transactions_1k.price DESC LIMIT 5;	SELECT products.ProductID, products.Description FROM (SELECT ProductID, rank() over (ORDER BY SUM(Amount) DESC ) AS rk FROM transactions_1k GROUP BY ProductID) AS T JOIN products ON T.ProductID = products.ProductID WHERE rk <= 5
0	SELECT customers.customerid, customers.currency, AVG(transactions_1k.price / transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.customerid ORDER BY AVG(transactions_1k.price / transactions_1k.amount) DESC LIMIT 1;	WITH Total AS (SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth GROUP BY CustomerID) SELECT T2.CustomerID, SUM(T2.Price * T2.Amount) / SUM(T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID IN (SELECT CustomerID FROM Total WHERE TotalConsumption = (SELECT MAX(TotalConsumption) FROM Total)) GROUP BY T2.CustomerID, T1.Currency
0	SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid WHERE products.productid = 2 GROUP BY gasstations.country ORDER BY sum(transactions_1k.price) DESC LIMIT 1;	SELECT DISTINCT T2.Country FROM transactions_1k T1 JOIN gasstations T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 AND T1.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2)
1	SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN products ON transactions_1k.productid = products.productid INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN gasstations ON yearmonth.customerid = gasstations.gasstationid WHERE transactions_1k.productid = 5 AND yearmonth.date LIKE '201208' AND transactions_1k.price / transactions_1k.amount > 29.00;	SELECT Consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Price / Amount > 29.00 AND ProductID = 5) AND Date = '201208'
Accuracy: 31.617
