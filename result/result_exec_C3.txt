1	SELECT COUNT(*) FROM singer;	SELECT count(*) FROM singer
1	SELECT COUNT(*) FROM singer;	SELECT count(*) FROM singer
1	SELECT name, country, age FROM singer ORDER BY age DESC;	SELECT name ,  country ,  age FROM singer ORDER BY age DESC
1	SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age DESC;	SELECT name ,  country ,  age FROM singer ORDER BY age DESC
1	SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';	SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
1	SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';	SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
0	SELECT singer.name, singer.song_release_year FROM singer WHERE age = ( SELECT MIN(age) FROM singer )	SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
0	SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = ( SELECT MIN(age) FROM singer )	SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
1	SELECT DISTINCT country FROM singer WHERE age > 20;	SELECT DISTINCT country FROM singer WHERE age  >  20
1	SELECT DISTINCT country FROM singer WHERE age > 20;	SELECT DISTINCT country FROM singer WHERE age  >  20
1	SELECT country, COUNT(*) as number_of_singers FROM singer GROUP BY country;	SELECT country ,  count(*) FROM singer GROUP BY country
1	SELECT country, COUNT(*) FROM singer GROUP BY country;	SELECT country ,  count(*) FROM singer GROUP BY country
1	SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);	SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
1	SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);	SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
1	SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;	SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
1	SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity >= 5000 AND stadium.capacity <= 10000;	SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
0	SELECT MAX(capacity), AVG(capacity) FROM stadium;	select max(capacity), average from stadium
1	SELECT AVG(capacity), MAX(capacity) FROM stadium;	select avg(capacity) ,  max(capacity) from stadium
1	SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;	SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
1	SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = ( SELECT MAX(average) FROM stadium )	SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
1	SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;	SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
1	SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;	SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
0	SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;	SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
1	SELECT stadium.name, COUNT(concert.concert_id) as num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id;	SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
0	SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;	SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
0	SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT concert.stadium_id FROM concert WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM concert WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT(*) DESC LIMIT 1 ) );	select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
1	SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;	SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
1	SELECT year from concert group by year order by count(*) desc limit 1;	SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
1	SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL;	SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
1	SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;	SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
1	SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30;	SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
0	SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert WHERE year = 2014 );	SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
0	SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT concert.stadium_id FROM concert WHERE concert.year = 2014 );	SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
0	SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;	SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
0	SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;	select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
0	SELECT singer.name, COUNT(concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;	SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
0	SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;	SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
1	SELECT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;	SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
1	SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;	SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
1	SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';	SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
1	SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';	SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
1	SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015;	SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
1	SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;	SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
1	SELECT COUNT(*) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 );	select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
1	SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);	select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
1	SELECT COUNT(*) FROM pets WHERE weight > 10;	SELECT count(*) FROM pets WHERE weight  >  10
1	SELECT COUNT(*) FROM pets WHERE weight > 10;	SELECT count(*) FROM pets WHERE weight  >  10
0	SELECT pets.weight FROM pets WHERE pets.pettype = 'dog' ORDER BY pets.pet_age ASC LIMIT 1;	SELECT weight FROM pets ORDER BY pet_age LIMIT 1
0	SELECT MIN(weight) FROM pets WHERE pettype = 'dog';	SELECT weight FROM pets ORDER BY pet_age LIMIT 1
1	SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;	SELECT max(weight) ,  petType FROM pets GROUP BY petType
1	SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;	SELECT max(weight) ,  petType FROM pets GROUP BY petType
1	SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;	SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
1	SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20	SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
1	SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';	SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
0	SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';	SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
1	SELECT COUNT(DISTINCT pettype) FROM pets;	SELECT count(DISTINCT pettype) FROM pets
1	SELECT COUNT(DISTINCT pettype) FROM pets;	SELECT count(DISTINCT pettype) FROM pets
0	SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';	SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
0	SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');	SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
0	SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' );	select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
0	SELECT student.fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' ) AND stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' );	SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
1	SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat" );	SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
1	SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );	SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
1	SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' )	SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
1	SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = "cat");	SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
1	SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' )	SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
0	SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';	SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
0	SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);	SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
1	SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1;	SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
1	SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;	SELECT petid ,  weight FROM pets WHERE pet_age  >  1
1	SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;	SELECT petid ,  weight FROM pets WHERE pet_age  >  1
1	SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;	SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
1	SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;	SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
1	SELECT pettype, avg(weight) FROM pets GROUP BY pettype;	SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
1	SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;	SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
0	SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;	SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
0	SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;	SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
1	SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';	SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
1	SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';	SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
1	SELECT student.stuid, COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;	SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
1	SELECT student.stuid, COUNT(pets.petid) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid;	select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
1	SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);	SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
1	SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(*) > 1);	SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
1	SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;	SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
0	SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.lname DESC LIMIT 1;	SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
1	SELECT AVG(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet )	select avg(age) from student where stuid not in (select stuid from has_pet)
1	SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet)	select avg(age) from student where stuid not in (select stuid from has_pet)
1	SELECT COUNT(*) FROM continents;	SELECT count(*) FROM CONTINENTS;
1	SELECT count(*) FROM continents;	SELECT count(*) FROM CONTINENTS;
1	SELECT continents.contid, continents.continent, COUNT(countries.countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;	SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
0	SELECT continents.contid, continents.continent, COUNT(countries.countryid) as num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;	SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
1	SELECT COUNT(*) FROM countries;	SELECT count(*) FROM COUNTRIES;
1	SELECT count(*) FROM countries;	SELECT count(*) FROM COUNTRIES;
1	SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) as num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;	SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
1	SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;	SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
1	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower LIMIT 1;	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
1	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1;	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
0	SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);	SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
0	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);	SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
0	SELECT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;	SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
0	SELECT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;	SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
0	SELECT car_names.make, cars_data.year FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = ( SELECT MIN(year) FROM cars_data );	SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
0	SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;	SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
1	SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
0	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980;	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
1	SELECT continents.continent, COUNT(car_makers.id) FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;	SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
1	SELECT continents.continent, COUNT(car_makers.maker) FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent;	SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
0	SELECT countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;	SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
0	SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;	SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
0	SELECT car_makers.fullname, COUNT(model_list.model) as model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname;	select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
1	SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS num_car_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;	SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
0	SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc' AND car_names.make = 'amc hornet sportabout (sw)';	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
0	SELECT accelerate FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.model = 'amc hornet sportabout (sw)';	SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
1	SELECT COUNT(DISTINCT car_makers.id) AS car_maker_count FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
0	SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
1	SELECT count(DISTINCT modelid) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id WHERE countries.countryname = 'usa';	SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
0	SELECT COUNT(modelid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE countries.countryname = 'United States';	SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
1	SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;	SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
1	SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;	SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
1	SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;	select min(weight) from cars_data where cylinders  =  8 and year  =  1974
1	SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;	select min(weight) from cars_data where cylinders  =  8 and year  =  1974
0	SELECT model_list.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model;	SELECT Maker ,  Model FROM MODEL_LIST;
0	SELECT model_list.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model;	SELECT Maker ,  Model FROM MODEL_LIST;
1	SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname, countries.countryid;	SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
0	SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid;	SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
1	SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;	SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
1	SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;	SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
1	SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year;	SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
0	SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year;	SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
1	SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3;	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
0	SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = "europe";	SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
0	SELECT MAX(cars_data.horsepower), car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;	SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
0	SELECT MAX(cars_data.horsepower), car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3	SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
1	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
1	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;	select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
1	SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;	SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
1	SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;	select avg(horsepower) from cars_data where year  <  1980;
1	SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'volvo';	SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
0	SELECT AVG(cars_data.edispl) FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'volvo';	SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
1	SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;	SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
0	SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;	SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
0	SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY model_list.model ORDER BY COUNT(DISTINCT car_names.make) DESC LIMIT 1;	SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
0	SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1;	SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
1	SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;	SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
1	SELECT count(*) FROM cars_data WHERE cylinders > 4;	SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
1	SELECT count(*) FROM cars_data WHERE year = 1980;	SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
1	SELECT COUNT(*) FROM cars_data WHERE year = 1980;	SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
1	SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON car_makers.id = model_list.maker WHERE car_makers.fullname = "American Motor Company";	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
1	SELECT COUNT(*) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = "American Motor Company"	SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
1	SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(model_list.model) > 3;	SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
0	SELECT makers.id, makers.maker FROM car_makers AS makers JOIN model_list AS models ON makers.id = models.maker GROUP BY makers.id, makers.maker HAVING COUNT(models.modelid) > 3;	SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
1	SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;	SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
1	SELECT DISTINCT car_names.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = "General Motors" OR cars_data.weight > 3500;	SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
0	SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;	select distinct year from cars_data where weight between 3000 and 4000;
0	SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight < 4000 INTERSECT SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight > 3000;	select distinct year from cars_data where weight between 3000 and 4000;
1	SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);	SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
1	SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);	SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
0	SELECT MIN(cars_data.cylinders) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE model_list.model = 'volvo' ORDER BY cars_data.accelerate LIMIT 1;	SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
1	SELECT cylinders FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE model_list.model = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1;	SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
0	SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)	SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
0	SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);	SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
0	SELECT count(DISTINCT countries.countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 2;	select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
0	SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2;	select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
1	SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;	SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
1	SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;	SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
1	SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
0	SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;	SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
1	SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;	SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
0	SELECT car_makers.id, car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders < 4 AND horsepower > ( SELECT MIN(horsepower) FROM cars_data )	select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
0	SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;	select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
1	SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;	select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
0	SELECT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
0	SELECT car_names.model FROM model_list INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';	SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
0	SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers);	SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
0	SELECT countryname FROM countries WHERE countryid NOT IN ( SELECT country FROM car_makers );	SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
0	SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;	select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
0	SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3;	SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
0	SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 3 ) OR countries.countryid IN ( SELECT car_makers.country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' );	SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
0	SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) OR countryid IN (SELECT country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model WHERE car_names.make = "fiat");	select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
1	SELECT country FROM airlines WHERE airline = "JetBlue Airways";	SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
1	SELECT country FROM airlines WHERE airline = 'JetBlue Airways';	SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
1	SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';	SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
1	SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';	SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
1	SELECT airline, abbreviation FROM airlines WHERE country = "USA";	SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
1	SELECT airline, abbreviation FROM airlines WHERE country = 'USA';	SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
1	SELECT airportcode, airportname FROM airports WHERE city = "Anthony";	SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
1	SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';	SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
1	SELECT COUNT(*) FROM airlines;	SELECT count(*) FROM AIRLINES
1	SELECT count(*) FROM airlines;	SELECT count(*) FROM AIRLINES
1	SELECT COUNT(*) FROM airports;	SELECT count(*) FROM AIRPORTS
1	SELECT COUNT(*) FROM airports;	SELECT count(*) FROM AIRPORTS
1	SELECT COUNT(*) FROM flights;	SELECT count(*) FROM FLIGHTS
1	SELECT COUNT(*) FROM flights;	SELECT count(*) FROM FLIGHTS
1	SELECT airline FROM airlines WHERE abbreviation = 'UAL';	SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
1	SELECT airline FROM airlines WHERE abbreviation = 'UAL';	SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
1	SELECT COUNT(*) FROM airlines WHERE country = "USA";	SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
1	SELECT COUNT(*) FROM airlines WHERE country = 'USA';	SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
1	SELECT city, country FROM airports WHERE airportname = "Alton";	SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
1	SELECT city, country FROM airports WHERE airportname = 'Alton';	SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
1	SELECT airportname FROM airports WHERE airportcode = 'AKO';	SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
1	SELECT airportname FROM airports WHERE airportcode = 'AKO';	SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
1	SELECT airportname FROM airports WHERE city = 'Aberdeen';	SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
1	SELECT airportname FROM airports WHERE city = 'Aberdeen';	SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
1	SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';	SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
1	SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';	SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
1	SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';	SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
1	SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';	SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
1	SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
0	SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
1	SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen'	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
1	SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
1	SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
1	SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = "Aberdeen") AND destairport IN (SELECT airportcode FROM airports WHERE city = "Ashley");	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
0	SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
0	SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.abbreviation = 'JetBlue';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
0	SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
0	SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
0	SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
0	SELECT COUNT(*) FROM flights WHERE airline = "United Airlines" AND sourceairport = "AHD";	SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
0	SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
0	SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen" AND flights.airline = "United Airlines";	SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
1	SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
1	SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
0	SELECT city FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1 )	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
1	SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
0	SELECT airports.airportcode FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode ORDER BY COUNT(flights.flightno) DESC LIMIT 1;	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
0	SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
0	SELECT airportcode FROM airports ORDER BY (SELECT COUNT(*) FROM flights WHERE destairport = airports.airportcode OR sourceairport = airports.airportcode) ASC LIMIT 1;	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
0	SELECT airportname FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = ( SELECT MIN(count) FROM ( SELECT COUNT(*) as count FROM flights GROUP BY sourceairport ) ) ) LIMIT 1;	SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
0	SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
0	SELECT flights.airline FROM flights GROUP BY flights.airline ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
0	SELECT abbreviation, country FROM airlines WHERE uid IN ( SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 )	SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
0	SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 );	SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
0	SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
1	SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
0	SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
0	SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
0	SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights WHERE destairport = 'APG' ) AND airline IN ( SELECT airline FROM flights WHERE destairport = 'CVO' );	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
0	SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT sourceairport) = 2;	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
0	SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN ( SELECT DISTINCT flights.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'APG' );	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
0	SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN ( SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'APG' );	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
0	SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10 );	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
0	SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
0	SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200 );	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
0	SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;	SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
0	SELECT flightno FROM flights WHERE airline = "United Airlines";	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
0	SELECT flightno FROM flights WHERE airline = 'United Airlines';	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
1	SELECT flightno FROM flights WHERE sourceairport = 'APG';	SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
1	SELECT flightno FROM flights WHERE sourceairport = 'APG';	SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
1	SELECT flightno FROM flights WHERE destairport = "APG";	SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
1	SELECT flightno FROM flights WHERE destairport = 'APG';	SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
1	SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = "Aberdeen";	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
0	SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
1	SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = "Aberdeen";	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
0	SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = "Aberdeen");	SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
1	SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');	SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
1	SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN ("Aberdeen", "Abilene"));	SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
1	SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT DISTINCT destairport FROM flights) AND airportcode NOT IN (SELECT DISTINCT sourceairport FROM flights);	SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
0	SELECT airportcode, airportname, city, country FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);	SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
1	SELECT COUNT(*) FROM employee;	SELECT count(*) FROM employee
1	SELECT COUNT(*) FROM employee;	SELECT count(*) FROM employee
1	SELECT name FROM employee ORDER BY age ASC;	SELECT name FROM employee ORDER BY age
1	SELECT employee.name FROM employee ORDER BY employee.age ASC;	SELECT name FROM employee ORDER BY age
1	SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city;	SELECT count(*) ,  city FROM employee GROUP BY city
1	SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city;	SELECT count(*) ,  city FROM employee GROUP BY city
1	SELECT employee.city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;	SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
1	SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;	SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
1	SELECT location, COUNT(*) AS shop_count FROM shop GROUP BY location;	SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
1	SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location;	SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
1	SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop );	SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
1	SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop)	SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
1	SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;	SELECT min(Number_products) ,  max(Number_products) FROM shop
1	SELECT MIN(number_products), MAX(number_products) FROM shop;	SELECT min(Number_products) ,  max(Number_products) FROM shop
1	SELECT name, location, district FROM shop ORDER BY number_products DESC;	SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
1	SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;	SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
1	SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);	SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
1	SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);	SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
0	SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
0	SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1;	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
1	SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation);	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
1	SELECT employee.name FROM evaluation INNER JOIN employee ON evaluation.employee_id = employee.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation);	SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
1	SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation)	SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
1	SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation);	SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
0	SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;	SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
1	SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY hiring.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;	SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
1	SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring)	SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
1	SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring);	SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
1	SELECT shop.name, COUNT(employee.employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;	SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
0	SELECT shop.name, COUNT(employee.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name;	SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
1	SELECT SUM(bonus) FROM evaluation;	SELECT sum(bonus) FROM evaluation
1	SELECT SUM(bonus) FROM evaluation;	SELECT sum(bonus) FROM evaluation
1	SELECT hiring.* FROM hiring;	SELECT * FROM hiring
1	SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;	SELECT * FROM hiring
0	SELECT shop.district FROM shop WHERE (number_products < 3000 AND shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000))	SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
0	SELECT shop.district FROM shop INNER JOIN ( SELECT district FROM shop WHERE number_products < 3000 GROUP BY district ) AS low_product_shops ON shop.district = low_product_shops.district INNER JOIN ( SELECT district FROM shop WHERE number_products > 10000 GROUP BY district ) AS high_product_shops ON shop.district = high_product_shops.district;	SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
1	SELECT COUNT(DISTINCT location) FROM shop;	SELECT count(DISTINCT LOCATION) FROM shop
1	SELECT COUNT(DISTINCT location) FROM shop;	SELECT count(DISTINCT LOCATION) FROM shop
1	SELECT COUNT(*) FROM documents;	SELECT count(*) FROM Documents
1	SELECT COUNT(*) FROM documents;	SELECT count(*) FROM Documents
1	SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;	SELECT document_id ,  document_name ,  document_description FROM Documents
1	SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;	SELECT document_id ,  document_name ,  document_description FROM Documents
1	SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';	SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
1	SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';	SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
1	SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = "Robbin CV";	SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
1	SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';	SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
1	SELECT COUNT(DISTINCT templates.template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id;	SELECT count(DISTINCT template_id) FROM Documents
1	SELECT COUNT(DISTINCT templates.template_id) as template_count FROM templates JOIN documents ON templates.template_id = documents.template_id;	SELECT count(DISTINCT template_id) FROM Documents
1	SELECT COUNT(DISTINCT documents.document_id) AS document_count FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'PPT';	SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
0	SELECT COUNT(DISTINCT documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'PPT';	SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
0	SELECT templates.template_id, COUNT(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;	SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
1	SELECT templates.template_id, COUNT(*) AS usage_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;	SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
0	SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;	SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
0	SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;	SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
1	SELECT templates.template_id FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1	SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
1	SELECT templates.template_id FROM templates WHERE templates.template_id IN (SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT(*) > 1);	SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
1	SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;	SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
1	SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;	SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
1	SELECT COUNT(*) FROM templates;	SELECT count(*) FROM Templates
1	SELECT COUNT(*) FROM templates;	SELECT count(*) FROM Templates
1	SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;	SELECT template_id ,  version_number ,  template_type_code FROM Templates
1	SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;	SELECT template_id ,  version_number ,  template_type_code FROM Templates
1	SELECT DISTINCT template_type_code FROM templates;	SELECT DISTINCT template_type_code FROM Templates
0	SELECT template_type_code FROM templates;	SELECT DISTINCT template_type_code FROM Templates
1	SELECT templates.template_id FROM templates WHERE templates.template_type_code IN ('PP', 'PPT');	SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
1	SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';	SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
1	SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';	SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
1	SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';	SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
1	SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;	SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
1	SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;	SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
0	SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;	SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
1	SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;	SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
1	SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;	SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;	SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code HAVING COUNT(templates.template_id) < 3;	SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
1	SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3;	SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
1	SELECT MIN(version_number), template_type_code FROM templates;	SELECT min(Version_Number) ,  template_type_code FROM Templates
0	SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates)	SELECT min(Version_Number) ,  template_type_code FROM Templates
1	SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE documents.document_name = "Data base";	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
1	SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
1	SELECT documents.document_name FROM documents JOIN templates ON templates.template_id = documents.template_id JOIN ref_template_types ON ref_template_types.template_type_code = templates.template_type_code WHERE ref_template_types.template_type_code = "BK";	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
1	SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';	SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
1	SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;	SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
1	SELECT ref_template_types.template_type_code, COUNT(DISTINCT documents.document_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;	SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
1	SELECT ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
1	SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
0	SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL;	SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
0	SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code NOT IN (SELECT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id)	SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
1	SELECT template_type_code, template_type_description FROM ref_template_types;	SELECT template_type_code ,  template_type_description FROM Ref_template_types
1	SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types;	SELECT template_type_code ,  template_type_description FROM Ref_template_types
1	SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';	SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
0	SELECT ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.template_type_code = 'AD';	SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
1	SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';	SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
1	SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = "Book";	SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
1	SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
1	SELECT ref_template_types.template_type_description FROM templates JOIN documents ON documents.template_id = templates.template_id JOIN ref_template_types ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description;	SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
1	SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = "Presentation";	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
1	SELECT templates.template_id FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';	SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
1	SELECT COUNT(*) FROM paragraphs;	SELECT count(*) FROM Paragraphs
1	SELECT COUNT(*) FROM paragraphs;	SELECT count(*) FROM Paragraphs
1	SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';	SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
0	SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');	SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
0	SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';	select other_details from paragraphs where paragraph_text like 'korea'
0	SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text = 'Korea';	select other_details from paragraphs where paragraph_text like 'korea'
0	SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Welcome to NY' );	SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
1	SELECT paragraph_id, paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY';	SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
0	SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Customer reviews' );	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
0	SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Customer reviews' );	SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
1	SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;	SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
1	SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;	SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
1	SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as paragraph_count FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name;	SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
1	SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS number_of_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;	SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
1	SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
1	SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
0	SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;	SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
0	SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;	SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
1	SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1;	SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
1	SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1;	SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
1	SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
1	SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;	SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
0	SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');	SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
0	SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');	SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
1	SELECT COUNT(*) FROM teacher;	SELECT count(*) FROM teacher
1	SELECT COUNT(*) FROM teacher;	SELECT count(*) FROM teacher
1	SELECT name FROM teacher ORDER BY age ASC;	SELECT Name FROM teacher ORDER BY Age ASC
1	SELECT name FROM teacher ORDER BY age ASC;	SELECT Name FROM teacher ORDER BY Age ASC
1	SELECT age, hometown FROM teacher;	SELECT Age ,  Hometown FROM teacher
1	SELECT teacher.age, teacher.hometown FROM teacher;	SELECT Age ,  Hometown FROM teacher
0	SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District';	select name from teacher where hometown != "little lever urban district"
0	SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';	select name from teacher where hometown != "little lever urban district"
1	SELECT name FROM teacher WHERE age IN (32, 33);	SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
1	SELECT name FROM teacher WHERE age IN (32, 33)	SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
1	SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;	SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
1	SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;	SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
1	SELECT teacher.hometown, COUNT(*) as num_teachers FROM teacher GROUP BY teacher.hometown;	SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
1	SELECT teacher.hometown, count(*) FROM teacher GROUP BY teacher.hometown;	SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
1	SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;	SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;	SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1;	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
1	SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;	SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
1	SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id;	SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
1	SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;	SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
1	SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;	SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
1	SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;	SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
1	SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = "Math";	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
1	SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';	SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
1	SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;	SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
1	SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;	SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
0	SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2);	SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
0	SELECT name FROM teacher WHERE teacher_id IN ( SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2 );	SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
1	SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange )	SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
1	SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL;	SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
1	SELECT COUNT(*) FROM visitor WHERE age < 30;	SELECT count(*) FROM visitor WHERE age  <  30
1	SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;	SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
1	SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;	SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
1	SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC;	SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
1	SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;	SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
1	SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009;	SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
1	SELECT open_year, num_of_staff FROM museum WHERE name = "Plaza Museum";	SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
1	SELECT museum.name FROM museum WHERE museum.num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE museum.open_year > 2010 );	SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
1	SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(DISTINCT visit.museum_id) > 1;	SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
0	SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;	SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
1	SELECT visit.museum_id, museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY visit.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
1	SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit)	SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
1	SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY MAX(visit.num_of_ticket) DESC LIMIT 1;	SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
1	SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;	SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
1	SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1);	SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
1	SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011;	SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
0	SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year <= 2010)	SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
1	SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;	SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
1	SELECT COUNT(*) FROM players;	SELECT count(*) FROM players
1	SELECT COUNT(*) FROM players;	SELECT count(*) FROM players
1	SELECT COUNT(*) FROM matches;	SELECT count(*) FROM matches
1	SELECT COUNT(*) FROM matches;	SELECT count(*) FROM matches
1	SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = "USA";	SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
0	SELECT players.first_name, players.birth_date FROM players WHERE players.player_id IN (SELECT player_id FROM rankings WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = "USA") OR player_id IN (SELECT loser_id FROM matches WHERE winner_ioc = "USA"));	SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
1	SELECT (SELECT AVG(loser_age) FROM matches) AS average_loser_age, (SELECT AVG(winner_age) FROM matches) AS average_winner_age;	SELECT avg(loser_age) ,  avg(winner_age) FROM matches
1	SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;	SELECT avg(loser_age) ,  avg(winner_age) FROM matches
0	SELECT AVG(rankings.ranking) as average_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id;	SELECT avg(winner_rank) FROM matches
1	SELECT AVG(winner_rank) FROM matches;	SELECT avg(winner_rank) FROM matches
0	SELECT MAX(loser_rank) FROM matches;	SELECT min(loser_rank) FROM matches
0	SELECT MAX(loser_rank) FROM matches;	SELECT min(loser_rank) FROM matches
1	SELECT COUNT(DISTINCT country_code) FROM players;	SELECT count(DISTINCT country_code) FROM players
1	SELECT COUNT(DISTINCT country_code) FROM players;	SELECT count(DISTINCT country_code) FROM players
1	SELECT COUNT(DISTINCT loser_name) FROM matches;	SELECT count(DISTINCT loser_name) FROM matches
1	SELECT COUNT(DISTINCT loser_name) FROM matches;	SELECT count(DISTINCT loser_name) FROM matches
1	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
1	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;	SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
0	SELECT DISTINCT first_name, last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT DISTINCT first_name, last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;	SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
0	SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;	SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
1	SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;	SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
1	SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;	SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
1	SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open';	SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
0	SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' );	SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
0	SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players) ;	SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
1	SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;	SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
1	SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;	SELECT first_name ,  last_name FROM players ORDER BY birth_date
0	SELECT players.first_name || ' ' || players.last_name FROM players ORDER BY players.birth_date;	SELECT first_name ,  last_name FROM players ORDER BY birth_date
1	SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;	SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
0	SELECT players.first_name || ' ' || players.last_name FROM players WHERE players.hand = 'Left' ORDER BY players.birth_date;	SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
0	SELECT players.first_name, players.country_code FROM players WHERE players.player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1 );	SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
0	SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;	SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
1	SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;	SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
1	SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;	SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
0	SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;	SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
0	SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(matches.winner_name) DESC LIMIT 1;	SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
0	SELECT matches.winner_name FROM matches JOIN players ON players.player_id = matches.winner_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;	SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
1	SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "Australian Open" ORDER BY matches.winner_rank_points DESC LIMIT 1;	SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
1	SELECT loser_name, winner_name FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );	SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
1	SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );	SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
0	SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;	SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
1	SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;	SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
0	SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;	SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
1	SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;	SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
1	SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;	SELECT count(*) ,  country_code FROM players GROUP BY country_code
1	SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code;	SELECT count(*) ,  country_code FROM players GROUP BY country_code
1	SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;	SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
1	SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;	SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
1	SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;	SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
1	SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;	SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
0	SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date;	SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
0	SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;	SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
1	SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;	SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
1	SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;	SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
0	SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;	SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
0	SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;	SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
0	SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'left';	SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
0	SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.winner_hand = 'L' AND matches.tourney_name = 'WTA Championships';	SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
0	SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);	SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
0	SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY SUM(matches.winner_rank_points) DESC LIMIT 1;	SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
1	SELECT players.hand, COUNT(*) AS count FROM players GROUP BY players.hand;	SELECT count(*) ,  hand FROM players GROUP BY hand
1	SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;	SELECT count(*) ,  hand FROM players GROUP BY hand
1	SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';	SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
1	SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;	SELECT name ,  tonnage FROM ship ORDER BY name DESC
0	SELECT name, date, result FROM battle;	SELECT name ,  date FROM battle
1	SELECT MIN(killed) AS minimum_death_toll, MAX(killed) AS maximum_death_toll FROM death;	SELECT max(killed) ,  min(killed) FROM death
1	SELECT AVG(injured) FROM death;	SELECT avg(injured) FROM death
0	SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';	SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
1	SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';	SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
1	SELECT battle.id, battle.name FROM battle WHERE battle.id IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.ship_type = 'Brig' )	SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
1	SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;	SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
0	SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;	SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
0	SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';	SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
1	SELECT COUNT(DISTINCT result) FROM battle;	SELECT count(DISTINCT RESULT) FROM battle
1	SELECT COUNT(DISTINCT battle.id) FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = '225' )	SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
0	SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');	SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
0	SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');	SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
1	SELECT note FROM death WHERE note LIKE '%East%';	SELECT note FROM death WHERE note LIKE '%East%'
1	SELECT addresses.line_1, addresses.line_2 FROM addresses;	SELECT line_1 ,  line_2 FROM addresses
1	SELECT addresses.line_1, addresses.line_2 FROM addresses;	SELECT line_1 ,  line_2 FROM addresses
1	SELECT COUNT(*) FROM courses;	SELECT count(*) FROM Courses
1	SELECT COUNT(*) FROM courses;	SELECT count(*) FROM Courses
1	SELECT course_description FROM courses WHERE course_name = 'math';	SELECT course_description FROM Courses WHERE course_name  =  'math'
1	SELECT course_description FROM courses WHERE course_name = "math";	SELECT course_description FROM Courses WHERE course_name  =  'math'
1	SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';	SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
1	SELECT zip_postcode FROM addresses WHERE city = "Port Chelsea";	SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
1	SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(DISTINCT degree_programs.degree_program_id) DESC LIMIT 1;	SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
0	SELECT departments.department_id, departments.department_name FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;	select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
1	SELECT COUNT(DISTINCT department_id) FROM degree_programs;	SELECT count(DISTINCT department_id) FROM Degree_Programs
1	SELECT COUNT(DISTINCT department_id) FROM degree_programs;	SELECT count(DISTINCT department_id) FROM Degree_Programs
1	SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;	SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
0	SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;	SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
0	SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'engineering')	SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
0	SELECT count(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');	SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
1	SELECT section_name, section_description FROM sections;	SELECT section_name ,  section_description FROM Sections
1	SELECT section_name, section_description FROM sections;	SELECT section_name ,  section_description FROM Sections
1	SELECT course_id, course_name FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) <= 2 )	SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
0	SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2 );	SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
1	SELECT section_name FROM sections ORDER BY section_name DESC;	SELECT section_name FROM Sections ORDER BY section_name DESC
1	SELECT section_name FROM sections ORDER BY section_name DESC;	SELECT section_name FROM Sections ORDER BY section_name DESC
0	SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;	SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
0	SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;	SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
1	SELECT department_description FROM departments WHERE department_name LIKE '%computer%';	SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
1	SELECT department_description FROM departments WHERE department_name LIKE '%computer%';	SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
0	SELECT first_name, middle_name, last_name, student_id FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE semester_id = [semester_id] GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2 );	SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1	SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
0	SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = "Bachelor";	SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
0	SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors';	SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
1	SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
1	SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;	SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
0	SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;	SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
0	SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 )	SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
0	SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) as num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY num_enrollments DESC LIMIT 1;	SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
0	SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1;	SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_id IS NULL;	SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
1	SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_id IS NULL;	SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
0	SELECT courses.course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;	SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
0	SELECT courses.course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;	SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
0	SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;	SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
1	SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
0	SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;	SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
0	SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;	SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
0	SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts WHERE transcripts.transcript_id IN (SELECT student_enrolment_courses.student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_courses.student_enrolment_id HAVING COUNT(*) >= 2);	SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
0	SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2 );	SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
1	SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';	SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
0	SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';	select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
1	SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;	SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
1	SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;	SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
0	SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1;	SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
0	SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY students.date_first_registered ASC LIMIT 1;	SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
0	SELECT students.first_name FROM students JOIN addresses AS perm ON students.permanent_address_id = perm.address_id JOIN addresses AS curr ON students.current_address_id = curr.address_id WHERE perm.line_1 <> curr.line_1;	SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
0	SELECT students.first_name FROM students JOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN addresses AS current ON students.current_address_id = current.address_id WHERE permanent.line_1 <> current.line_1;	SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
0	SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses WHERE addresses.address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 );	SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
0	SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
1	SELECT AVG(transcript_date) AS average_print_date FROM transcripts;	SELECT avg(transcript_date) FROM Transcripts
1	SELECT AVG(transcript_date) FROM transcripts;	SELECT avg(transcript_date) FROM Transcripts
1	SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1;	SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
1	SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1;	SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
1	SELECT COUNT(*) FROM transcripts;	SELECT count(*) FROM Transcripts
1	SELECT COUNT(*) FROM transcripts;	SELECT count(*) FROM Transcripts
1	SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;	SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
1	SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;	SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
0	SELECT COUNT(*) as max_enrollment_count, student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id ORDER BY max_enrollment_count DESC LIMIT 1;	SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
0	SELECT MAX(count_course) as max_count, course_id, student_enrolment_id FROM ( SELECT course_id, student_enrolment_id, COUNT(course_id) as count_course FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) GROUP BY course_id ORDER BY max_count DESC LIMIT 1;	SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
0	SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY transcripts.transcript_date, transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;	SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
1	SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date ORDER BY COUNT(*) ASC LIMIT 1;	SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
0	SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor' INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = 'Master';	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
0	SELECT semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;	SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
1	SELECT count(DISTINCT students.current_address_id) FROM students;	SELECT count(DISTINCT current_address_id) FROM Students
0	SELECT DISTINCT line_1, line_2, line_3, city FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id OR students.current_address_id = addresses.address_id;	SELECT count(DISTINCT current_address_id) FROM Students
0	SELECT students.first_name, students.last_name, students.middle_name, students.student_id, students.email_address, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id ORDER BY students.last_name DESC;	SELECT other_student_details FROM Students ORDER BY other_student_details DESC
0	SELECT students.last_name, students.first_name, students.middle_name, students.other_student_details FROM students ORDER BY students.last_name DESC;	SELECT other_student_details FROM Students ORDER BY other_student_details DESC
0	SELECT section_name, section_description, section_id, course_id FROM sections WHERE section_name = 'h';	SELECT section_description FROM Sections WHERE section_name  =  'h'
1	SELECT sections.section_description FROM sections WHERE sections.section_name = 'h';	SELECT section_description FROM Sections WHERE section_name  =  'h'
0	SELECT students.first_name FROM students WHERE students.permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR students.cell_mobile_number = '09700166582';	select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
0	SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';	select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
1	SELECT title FROM cartoon ORDER BY title ASC;	SELECT Title FROM Cartoon ORDER BY title
1	SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC;	SELECT Title FROM Cartoon ORDER BY title
1	SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';	SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
1	SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones';	SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
1	SELECT COUNT(*) FROM cartoon WHERE written_by = "Joseph Kuhr";	SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
1	SELECT count(*) FROM cartoon WHERE written_by = "Joseph Kuhr";	SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
1	SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;	SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
1	SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;	SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
1	SELECT title FROM cartoon WHERE directed_by IN ("Ben Jones", "Brandon Vietti");	SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
1	SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';	SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
1	SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;	SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
1	SELECT country, COUNT(*) AS channel_count FROM tv_channel GROUP BY country ORDER BY channel_count DESC LIMIT 1;	SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
1	SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;	SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
1	SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;	SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
1	SELECT content FROM tv_channel WHERE series_name = "Sky Radio";	SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
1	SELECT content FROM tv_channel WHERE series_name = "Sky Radio";	SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
1	SELECT package_option FROM tv_channel WHERE series_name = "Sky Radio";	SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
1	SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio';	SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
1	SELECT count(*) FROM tv_channel WHERE language = 'English';	SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
1	SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';	SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
1	SELECT language, count(*) as num_of_tv_channels FROM tv_channel GROUP BY language ORDER BY num_of_tv_channels LIMIT 1;	SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
1	SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;	SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
1	SELECT tv_channel.language, COUNT(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language	SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
1	SELECT language, COUNT(DISTINCT tv_channel.id) as num_channels FROM tv_channel GROUP BY language;	SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
1	SELECT series_name FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = "The Rise of the Blue Beetle!";	SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
0	SELECT series_name FROM tv_channel WHERE id = ( SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!' );	SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
1	SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
1	SELECT cartoon.title FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';	SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
0	SELECT episode FROM tv_series ORDER BY rating DESC;	SELECT Episode FROM TV_series ORDER BY rating
1	SELECT episode FROM tv_series ORDER BY rating;	SELECT Episode FROM TV_series ORDER BY rating
1	SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;	SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
1	SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;	SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
1	SELECT MIN(share), MAX(share) FROM tv_series;	SELECT max(SHARE) , min(SHARE) FROM TV_series;
1	SELECT MAX(share), MIN(share) FROM tv_series;	SELECT max(SHARE) , min(SHARE) FROM TV_series;
1	SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";	SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
1	SELECT air_date FROM tv_series WHERE episode = "A Love of a Lifetime";	SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
1	SELECT weekly_rank FROM tv_series WHERE episode = "A Love of a Lifetime";	SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
1	SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime';	SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
1	SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = "A Love of a Lifetime";	SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
1	SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = "A Love of a Lifetime";	SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
1	SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = "Sky Radio";	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
0	SELECT episode FROM tv_series WHERE channel = ( SELECT id FROM tv_channel WHERE series_name = "Sky Radio" ) ;	SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
1	SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;	SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
1	SELECT cartoon.directed_by, COUNT(cartoon.id) as num_cartoons FROM cartoon GROUP BY cartoon.directed_by;	SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
1	SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.original_air_date = ( SELECT MAX(original_air_date) FROM cartoon )	select production_code ,  channel from cartoon order by original_air_date desc limit 1
0	SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.id = (SELECT MAX(id) FROM cartoon)	select production_code ,  channel from cartoon order by original_air_date desc limit 1
0	SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;	SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
0	SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;	SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
1	SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
1	SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';	SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
0	SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = "Todd Casey" )	SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
0	SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = "Todd Casey" );	SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
0	SELECT tv_channel.series_name, tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');	SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
0	SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');	SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
1	SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';	SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
1	SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';	SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
0	SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT id) > 2 )	SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
0	SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT(*) > 2;	SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
1	SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = "Ben Jones" )	SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
1	SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );	SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
1	SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (SELECT DISTINCT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones');	SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
1	SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones')	SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
1	SELECT COUNT(*) FROM poker_player;	SELECT count(*) FROM poker_player
1	SELECT COUNT(*) FROM poker_player;	SELECT count(*) FROM poker_player
1	SELECT earnings FROM poker_player ORDER BY earnings DESC;	SELECT Earnings FROM poker_player ORDER BY Earnings DESC
1	SELECT earnings FROM poker_player ORDER BY earnings DESC;	SELECT Earnings FROM poker_player ORDER BY Earnings DESC
1	SELECT final_table_made, best_finish FROM poker_player;	SELECT Final_Table_Made ,  Best_Finish FROM poker_player
1	SELECT final_table_made, best_finish FROM poker_player;	SELECT Final_Table_Made ,  Best_Finish FROM poker_player
1	SELECT AVG(earnings) FROM poker_player;	SELECT avg(Earnings) FROM poker_player
1	SELECT avg(earnings) FROM poker_player;	SELECT avg(Earnings) FROM poker_player
1	SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player ) LIMIT 1;	SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
1	SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;	SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
1	SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;	SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
1	SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;	SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
1	SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
1	SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
1	SELECT people.name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
1	SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
1	SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
1	SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
1	SELECT people.birth_date FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1;	SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
1	SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1;	SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
1	SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
1	SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;	SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
1	SELECT AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;	SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
1	SELECT AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;	SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
1	SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
1	SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;	SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
1	SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality;	SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
1	SELECT nationality, COUNT(*) FROM people GROUP BY nationality;	SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
1	SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;	SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;	SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
1	SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;	SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
1	SELECT name, birth_date FROM people ORDER BY name ASC	SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
1	SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;	SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
1	SELECT name FROM people WHERE nationality != "Russia";	SELECT Name FROM people WHERE Nationality != "Russia"
1	SELECT name FROM people WHERE nationality <> 'Russia';	SELECT Name FROM people WHERE Nationality != "Russia"
1	SELECT people.name FROM people WHERE people.people_id NOT IN ( SELECT poker_player.people_id FROM poker_player )	SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
1	SELECT people.name FROM people LEFT JOIN poker_player ON poker_player.people_id = people.people_id WHERE poker_player.people_id IS NULL;	SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
1	SELECT COUNT(DISTINCT nationality) FROM people;	SELECT count(DISTINCT Nationality) FROM people
1	SELECT COUNT(DISTINCT nationality) FROM people;	SELECT count(DISTINCT Nationality) FROM people
0	SELECT COUNT(DISTINCT state) FROM area_code_state;	SELECT count(*) FROM area_code_state
1	SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;	SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
1	SELECT vote_id, phone_number, state FROM votes;	SELECT vote_id ,  phone_number ,  state FROM votes
1	SELECT MAX(area_code), MIN(area_code) FROM area_code_state;	SELECT max(area_code) ,  min(area_code) FROM area_code_state
1	SELECT MAX(created) FROM votes WHERE state = 'CA';	SELECT max(created) FROM votes WHERE state  =  'CA'
1	SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';	SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
1	SELECT DISTINCT state, created FROM votes;	SELECT DISTINCT state ,  created FROM votes
1	SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN ( SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2 );	SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
1	SELECT contestants.contestant_number, contestants.contestant_name FROM contestants INNER JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;	SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
1	SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA';	SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
1	SELECT COUNT(*) FROM contestants LEFT JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE votes.contestant_number IS NULL;	SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
1	SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
1	SELECT votes.created, votes.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';	SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
1	SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling' INTERSECT SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Kelly Clauss';	SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
1	SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';	select contestant_name from contestants where contestant_name like "%al%"
1	SELECT name FROM country WHERE indepyear > 1950;	SELECT Name FROM country WHERE IndepYear  >  1950
1	SELECT name FROM country WHERE indepyear > 1950;	SELECT Name FROM country WHERE IndepYear  >  1950
1	SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';	SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
1	SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';	SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
1	SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';	SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
0	SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';	SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
1	SELECT continent FROM country WHERE name = 'Anguilla';	SELECT Continent FROM country WHERE Name  =  "Anguilla"
1	SELECT continent FROM country WHERE name = 'Anguilla';	SELECT Continent FROM country WHERE Name  =  "Anguilla"
1	SELECT country.region FROM city INNER JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';	SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
1	SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';	SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
0	SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
0	SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
1	SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';	SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
1	SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil';	SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
1	SELECT region, population FROM country WHERE name = 'Angola';	SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
1	SELECT region, population FROM country WHERE name = 'Angola';	SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
1	SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';	SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
1	SELECT AVG(lifeexpectancy) FROM country WHERE region = "Central Africa";	SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
1	SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;	SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
1	SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;	SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
1	SELECT SUM(population), MAX(gnp) FROM country WHERE continent = "Asia";	SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
1	SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';	SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
1	SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';	SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
1	SELECT AVG(lifeexpectancy) FROM country WHERE continent = "Africa" AND governmentform = "Republic";	SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
1	SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');	SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
1	SELECT SUM(surfacearea) FROM country WHERE continent = "Asia" OR continent = "Europe";	SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
1	SELECT SUM(population) FROM city WHERE district = 'Gelderland';	SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
1	SELECT SUM(population) FROM city WHERE district = 'Gelderland';	SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
1	SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';	SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
1	SELECT AVG(GNP) AS mean_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US Territory';	SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
1	SELECT COUNT(DISTINCT language) AS unique_languages FROM countrylanguage;	SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
1	SELECT COUNT(DISTINCT language) FROM countrylanguage;	SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
1	SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = "Africa";	SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
1	SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';	SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
0	SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';	SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
0	SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');	SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
0	SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';	SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
0	SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';	SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
0	SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT country.name FROM country WHERE country.code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1 );	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT country.continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.continent ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;	SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT code) DESC LIMIT 1;	SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT COUNT(DISTINCT country.name) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') GROUP BY country.code HAVING COUNT(DISTINCT countrylanguage.language) = 2;	SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
0	SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch');	SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
1	SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French';	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
0	SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' );	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
0	SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = "English" AND isofficial = 1) AND country.code IN (SELECT countrycode FROM countrylanguage WHERE language = "French" AND isofficial = 1);	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
1	SELECT country.name FROM country WHERE EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language IN ('English', 'French') AND countrylanguage.isofficial = 'T' GROUP BY countrylanguage.countrycode HAVING COUNT(*) = 2 );	SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
1	SELECT COUNT(DISTINCT c.continent) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'Chinese';	SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
1	SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');	SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
0	SELECT region FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch') )	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
0	SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('Dutch', 'English');	SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
0	SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');	select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
0	SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 1;	SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
0	SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ORDER BY percentage DESC LIMIT 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
1	SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
1	SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT country.code) = 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
1	SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
0	SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "English" ORDER BY city.population DESC LIMIT 1;	SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
0	SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;	SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
1	SELECT name, population, lifeexpectancy FROM country WHERE continent = "Asia" ORDER BY surfacearea DESC LIMIT 1;	SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
1	SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;	SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
0	SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English" AND isofficial = "T")	SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
0	SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');	SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
0	SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");	SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
0	SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");	SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
0	SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1;	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
1	SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T';	SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
0	SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN ( 	SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
0	SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 1;	SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
0	SELECT code, name, surfacearea FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )	SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
0	SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')	SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
0	SELECT country.name FROM country WHERE country.continent = "Africa" AND country.population < (SELECT MIN(population) FROM country WHERE continent = "Asia");	SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
1	SELECT name FROM country WHERE continent = "Africa" AND population < (SELECT MIN(population) FROM country WHERE continent = "Asia")	SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
1	SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );	SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
0	SELECT country.name FROM country WHERE country.continent = "Asia" AND country.population > ( SELECT MAX(population) FROM country WHERE continent = "Africa" );	SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
0	SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');	SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
0	SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = "English");	SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
1	SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> "English";	SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
0	SELECT countrycode FROM countrylanguage WHERE language != "English";	SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
1	SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English") AND country.governmentform != "Republic";	SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
1	SELECT code FROM country WHERE governmentform != "Republic" AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = "English");	SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
0	SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N';	SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
0	SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F';	SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
0	SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';	select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
0	SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1;	SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
0	SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country);	SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
0	SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = ( SELECT MIN(population) FROM country )	SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
1	SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);	SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
1	SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);	SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
1	SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count >= 3;	SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
1	SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count > 2;	SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
1	SELECT DISTRICT, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;	SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
1	SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;	SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
0	SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;	SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
0	SELECT country.governmentform, SUM(country.population) AS total_population FROM country WHERE country.governmentform IN ( SELECT DISTINCT country.governmentform FROM country WHERE country.lifeexpectancy > 72 ) GROUP BY country.governmentform;	SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
1	SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING avg_life_expectancy < 72;	SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
1	SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country WHERE continent IN ( SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72 ) GROUP BY continent;	SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
1	SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;	SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
1	SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5	SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
1	SELECT name FROM country ORDER BY population DESC LIMIT 3;	SELECT Name FROM country ORDER BY Population DESC LIMIT 3
1	SELECT country.name FROM country ORDER BY population DESC LIMIT 3;	SELECT Name FROM country ORDER BY Population DESC LIMIT 3
1	SELECT name FROM country ORDER BY population ASC LIMIT 3;	SELECT Name FROM country ORDER BY Population ASC LIMIT 3
1	SELECT name FROM country ORDER BY population LIMIT 3;	SELECT Name FROM country ORDER BY Population ASC LIMIT 3
1	SELECT COUNT(*) FROM country WHERE continent = 'Asia';	SELECT count(*) FROM country WHERE continent  =  "Asia"
1	SELECT COUNT(*) FROM country WHERE continent = 'Asia';	SELECT count(*) FROM country WHERE continent  =  "Asia"
1	SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;	SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
1	SELECT name FROM country WHERE continent = "Europe" AND population = 80000;	SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
0	SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;	select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
0	SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = "North America" AND surfacearea > 3000;	select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
1	SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;	SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
1	SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;	select name from city where population between 160000 and 900000
1	SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;	SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
1	SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;	SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
0	SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code ) GROUP BY country.name;	SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
0	SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING MAX(countrylanguage.percentage) = countrylanguage.percentage;	SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
0	SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.language HAVING countrylanguage.percentage = MAX(countrylanguage.percentage);	SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
0	SELECT COUNT(countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;	SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
0	SELECT countrycode FROM countrylanguage WHERE language = "Spanish" ORDER BY percentage DESC LIMIT 1;	SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
0	SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = "Spanish" AND countrylanguage.isofficial = 1 AND countrylanguage.percentage > 50;	SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
1	SELECT COUNT(conductor_id) FROM conductor;	SELECT count(*) FROM conductor
1	SELECT COUNT(*) FROM conductor;	SELECT count(*) FROM conductor
1	SELECT conductor.name FROM conductor ORDER BY conductor.age ASC;	SELECT Name FROM conductor ORDER BY Age ASC
1	SELECT conductor.name FROM conductor ORDER BY conductor.age;	SELECT Name FROM conductor ORDER BY Age ASC
1	SELECT name FROM conductor WHERE nationality != 'USA';	SELECT Name FROM conductor WHERE Nationality != 'USA'
1	SELECT name FROM conductor WHERE nationality != "USA";	SELECT Name FROM conductor WHERE Nationality != 'USA'
1	SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC;	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
1	SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;	SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
1	SELECT AVG(attendance) FROM show;	SELECT avg(Attendance) FROM SHOW
1	SELECT AVG(attendance) AS average_attendance FROM show;	SELECT avg(Attendance) FROM SHOW
1	SELECT MIN(share), MAX(share) FROM performance WHERE type != "Live final";	SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
1	SELECT MAX(share), MIN(share) FROM performance WHERE type != "Live final";	SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
1	SELECT COUNT(DISTINCT nationality) FROM conductor;	SELECT count(DISTINCT Nationality) FROM conductor
1	SELECT COUNT(DISTINCT nationality) FROM conductor;	SELECT count(DISTINCT Nationality) FROM conductor
1	SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;	SELECT Name FROM conductor ORDER BY Year_of_Work DESC
1	SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;	SELECT Name FROM conductor ORDER BY Year_of_Work DESC
1	SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;	SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
1	SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1;	SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
1	SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id	SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
1	SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;	SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
0	SELECT conductor.name FROM conductor GROUP BY conductor.name HAVING COUNT(DISTINCT conductor.conductor_id) > 1;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
1	SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
0	SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
0	SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
1	SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;	SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
1	SELECT record_company, COUNT(orchestra) as num_orchestras FROM orchestra GROUP BY record_company;	SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
1	SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company;	SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
1	SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;	SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
0	SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;	SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
1	SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;	SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;	SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;	SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
1	SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_id FROM performance );	SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
1	SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;	SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
1	SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;	SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
1	SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');	SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
1	SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');	SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
0	SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1 );	SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
1	SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);	SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
1	SELECT COUNT(*) FROM highschooler;	SELECT count(*) FROM Highschooler
1	SELECT COUNT(*) FROM highschooler;	SELECT count(*) FROM Highschooler
1	SELECT name, grade FROM highschooler;	SELECT name ,  grade FROM Highschooler
1	SELECT name, grade FROM highschooler;	SELECT name ,  grade FROM Highschooler
1	SELECT grade FROM highschooler;	SELECT grade FROM Highschooler
1	SELECT grade FROM highschooler	SELECT grade FROM Highschooler
1	SELECT grade FROM highschooler WHERE name = 'Kyle';	SELECT grade FROM Highschooler WHERE name  =  "Kyle"
1	SELECT grade FROM highschooler WHERE name = 'Kyle';	SELECT grade FROM Highschooler WHERE name  =  "Kyle"
1	SELECT name FROM highschooler WHERE grade = 10;	SELECT name FROM Highschooler WHERE grade  =  10
1	SELECT name FROM highschooler WHERE grade = 10;	SELECT name FROM Highschooler WHERE grade  =  10
1	SELECT id FROM highschooler WHERE name = 'Kyle';	SELECT ID FROM Highschooler WHERE name  =  "Kyle"
1	SELECT id FROM highschooler WHERE name = "Kyle";	SELECT ID FROM Highschooler WHERE name  =  "Kyle"
1	SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);	SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
1	SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);	SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
1	SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;	SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
1	SELECT grade, COUNT(id) FROM highschooler GROUP BY grade;	SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
1	SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;	SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
1	SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;	SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
1	SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;	SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
1	SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;	SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
1	SELECT friend.student_id, COUNT(friend.friend_id) as number_of_friends FROM friend GROUP BY friend.student_id;	SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
0	SELECT highschooler.id, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;	SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
0	SELECT highschooler.name, COUNT(friend.friend_id) AS number_of_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;	SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
0	SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name;	SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
1	SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1 )	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 )	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
1	SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 )	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
0	SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = "Kyle";	SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
1	SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN highschooler h ON h.id = friend.student_id WHERE h.name = "Kyle"	SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
0	SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');	SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
0	SELECT Count(*) as num_friends FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');	SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
1	SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)	SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
1	SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)	SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
0	SELECT name FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend )	SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
0	SELECT name FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend )	SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
0	SELECT highschooler.id FROM highschooler WHERE id IN (SELECT friend_id FROM friend) AND id IN (SELECT liked_id FROM likes);	SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
0	SELECT highschooler.id FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(*) > 0;	SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
0	SELECT highschooler.name FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.liked_id = highschooler.id GROUP BY highschooler.name;	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
0	SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes)	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
1	SELECT student_id, COUNT(*) AS like_count FROM likes GROUP BY student_id;	SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
1	SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;	SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
0	SELECT highschooler.name, COUNT(likes.student_id) FROM highschooler INNER JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;	SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
0	SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;	SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
1	SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
1	SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
1	SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.student_id) >= 2;	SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
1	SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 )	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
1	SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 );	SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
0	SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');	SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
1	SELECT COUNT(*) FROM likes INNER JOIN highschooler ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle';	SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
1	SELECT AVG(grade) FROM highschooler WHERE id IN ( SELECT DISTINCT student_id FROM friend )	SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
1	SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend.student_id FROM friend);	SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
1	SELECT MIN(grade) FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend )	SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
1	SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);	SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
0	SELECT state FROM owners WHERE state IN (SELECT state FROM professionals)	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
1	SELECT DISTINCT state FROM owners INTERSECT SELECT DISTINCT state FROM professionals;	SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
1	SELECT avg(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);	SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
1	SELECT avg(age) as average_age FROM dogs WHERE dog_id in (SELECT DISTINCT dog_id FROM treatments);	SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
1	SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2);	SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
1	SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 );	SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
0	SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id HAVING SUM(treatments.cost_of_treatment) <= 1000;	select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
0	SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE owners.owner_id NOT IN ( SELECT owners.owner_id FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000 );	select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
1	SELECT DISTINCT first_name FROM owners UNION SELECT DISTINCT first_name FROM professionals EXCEPT SELECT DISTINCT name FROM dogs;	SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
1	SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs	SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
1	SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN ( SELECT DISTINCT professional_id FROM treatments );	SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
1	SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments)	SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
0	SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;	SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
0	SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;	SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
1	SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );	SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
1	SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );	SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
1	SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
1	SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
0	SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;	SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
0	SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;	SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
1	SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;	SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
0	SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;	SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
1	SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;	SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
0	SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;	SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
0	SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );	SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
0	SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );	SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
0	SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments));	SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
0	SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);	SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
1	SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;	SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
1	SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;	SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
1	SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;	SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
1	SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;	SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
0	SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;	SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
0	SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;	SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
1	SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;	SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
1	SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;	SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
0	SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name = ( SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1 ) ORDER BY treatments.date_of_treatment;	SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
0	SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_code IN ( SELECT breed_code FROM breeds GROUP BY breed_code HAVING COUNT(*) = 1 );	SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
1	SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';	SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
0	SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%'	SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
0	SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;	SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
0	SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id	SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
0	SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = ( SELECT MIN(age) FROM dogs )	SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
0	SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs);	SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
1	SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';	SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
1	SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');	SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
1	SELECT date_arrived, date_departed FROM dogs;	SELECT date_arrived ,  date_departed FROM Dogs
1	SELECT date_arrived, date_departed FROM dogs;	SELECT date_arrived ,  date_departed FROM Dogs
1	SELECT COUNT(DISTINCT dog_id) FROM treatments;	SELECT count(DISTINCT dog_id) FROM Treatments
1	SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;	SELECT count(DISTINCT dog_id) FROM Treatments
1	SELECT COUNT(DISTINCT professional_id) FROM treatments;	SELECT count(DISTINCT professional_id) FROM Treatments
1	SELECT COUNT(DISTINCT professional_id) FROM treatments;	SELECT count(DISTINCT professional_id) FROM Treatments
1	SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';	SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
1	SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';	SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
1	SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';	SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
1	SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';	SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
1	SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);	SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
1	SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);	SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
1	SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;	SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
1	SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;	SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
1	SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)	SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
1	SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);	select count(*) from dogs where dog_id not in ( select dog_id from treatments )
1	SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);	SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
1	SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )	SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
1	SELECT COUNT(DISTINCT professionals.professional_id) FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.professional_id IS NULL;	SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
1	SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);	SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
1	SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;	SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
1	SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;	SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
1	SELECT AVG(age) FROM dogs;	SELECT avg(age) FROM Dogs
1	SELECT AVG(age) FROM dogs;	SELECT avg(age) FROM Dogs
1	SELECT MAX(age) FROM dogs;	SELECT max(age) FROM Dogs
1	SELECT max(age) AS oldest_dog_age FROM dogs;	SELECT max(age) FROM Dogs
1	SELECT charge_type, charge_amount FROM charges;	SELECT charge_type ,  charge_amount FROM Charges
1	SELECT charge_type, charge_amount FROM charges;	SELECT charge_type ,  charge_amount FROM Charges
1	SELECT MAX(charge_amount) FROM charges	SELECT max(charge_amount) FROM Charges
0	SELECT charge_amount FROM charges WHERE charge_type = ( SELECT charge_type FROM charges ORDER BY charge_amount DESC LIMIT 1 )	SELECT max(charge_amount) FROM Charges
1	SELECT email_address, cell_number, home_phone FROM professionals;	SELECT email_address ,  cell_number ,  home_phone FROM professionals
1	SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;	SELECT email_address ,  cell_number ,  home_phone FROM professionals
0	SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code	SELECT DISTINCT breed_code ,  size_code FROM dogs
0	SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;	SELECT DISTINCT breed_code ,  size_code FROM dogs
0	SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;	SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
0	SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;	SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
1	SELECT COUNT(*) FROM singer;	SELECT count(*) FROM singer
1	SELECT COUNT(*) FROM singer;	SELECT count(*) FROM singer
1	SELECT name FROM singer ORDER BY net_worth_millions ASC;	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
1	SELECT name FROM singer ORDER BY net_worth_millions ASC;	SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
1	SELECT birth_year, citizenship FROM singer;	SELECT Birth_Year ,  Citizenship FROM singer
1	SELECT birth_year, citizenship FROM singer;	SELECT Birth_Year ,  Citizenship FROM singer
1	SELECT name FROM singer WHERE citizenship != 'France';	SELECT Name FROM singer WHERE Citizenship != "France"
0	SELECT name FROM singer WHERE citizenship != 'French';	SELECT Name FROM singer WHERE Citizenship != "France"
1	SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;	SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
1	SELECT name FROM singer WHERE birth_year IN (1948, 1949);	SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
1	SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;	SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
1	SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;	SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
1	SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship;	SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
1	SELECT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;	SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
1	SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;	SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
1	SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;	select citizenship from singer group by citizenship order by count(*) desc limit 1
1	SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;	SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
1	SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;	SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
1	SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;	SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
1	SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;	SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
1	SELECT DISTINCT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
0	SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song WHERE sales > 300000 );	SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
0	SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1 );	SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
1	SELECT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;	SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
1	SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;	SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
1	SELECT name, SUM(sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name;	SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
1	SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)	SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
1	SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;	SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
1	SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;	SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
0	SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;	SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
1	SELECT COUNT(*) FROM other_available_features;	SELECT count(*) FROM Other_Available_Features
1	SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon';	SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
0	SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE properties.property_type_code = "code";	SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
0	SELECT properties.property_name FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('House', 'Apartment') AND properties.room_count > 1	SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
                     easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.883                0.711                0.655                0.355                0.686               
