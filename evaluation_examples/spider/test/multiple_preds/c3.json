[
  {
    "id": 0,
    "db_id": "soccer_3",
    "nlq": "How many clubs are there?",
    "gold": "SELECT count(*) FROM club",
    "infer_predictions": [
      [
        "SELECT COUNT(club_id) FROM club",
        "SELECT COUNT(*) FROM club",
        "SELECT COUNT(1) FROM club",
        "SELECT COUNT(DISTINCT club.name) FROM club",
        "SELECT SUM(1) FROM club",
        "SELECT COUNT(club.club_id) AS number_of_clubs FROM club"
      ]
    ]
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "nlq": "Count the number of clubs.",
    "gold": "SELECT count(*) FROM club",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM club",
        "SELECT COUNT(club_id) FROM club",
        "SELECT COUNT(1) FROM club",
        "SELECT COUNT(*) AS NumOfClubs FROM club",
        "SELECT COUNT(club_id) AS NumClubs FROM club",
        "SELECT COUNT(DISTINCT club_id) AS TotalClubs FROM club",
        "SELECT COUNT(DISTINCT name) FROM club"
      ]
    ]
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "nlq": "List the name of clubs in ascending alphabetical order.",
    "gold": "SELECT Name FROM club ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM club ORDER BY name ASC",
        "SELECT c.name AS ClubName FROM club c ORDER BY ClubName ASC",
        "SELECT club.name AS ClubName FROM club ORDER BY ClubName ASC",
        "SELECT c.name FROM club c ORDER BY c.name COLLATE NOCASE ASC"
      ]
    ]
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "nlq": "What are the names of clubs, ordered alphabetically?",
    "gold": "SELECT Name FROM club ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM club ORDER BY name ASC",
        "SELECT name FROM club WHERE name IS NOT NULL ORDER BY name",
        "SELECT name FROM club GROUP BY name ORDER BY name",
        "SELECT club.name FROM club WHERE club.name IS NOT NULL ORDER BY club.name ASC"
      ]
    ]
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "nlq": "What are the managers and captains of clubs?",
    "gold": "SELECT Manager ,  Captain FROM club",
    "infer_predictions": [
      [
        "SELECT manager, captain FROM club",
        "SELECT c.manager, c.captain FROM club c",
        "SELECT manager AS Club_Manager, captain AS Club_Captain FROM club",
        "SELECT club.manager AS Manager, club.captain AS Captain FROM club",
        "SELECT DISTINCT c.manager, c.captain FROM club c",
        "SELECT manager, captain FROM club ORDER BY manager"
      ]
    ]
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "nlq": "Return the managers and captains of all clubs.",
    "gold": "SELECT Manager ,  Captain FROM club",
    "infer_predictions": [
      [
        "SELECT manager, captain FROM club",
        "SELECT c.manager, c.captain FROM club c",
        "SELECT manager AS 'Manager', captain AS 'Captain' FROM club",
        "SELECT M.manager, M.captain FROM club M",
        "SELECT manager, captain FROM club GROUP BY manager, captain",
        "SELECT manager, captain FROM club WHERE manager IS NOT NULL AND captain IS NOT NULL",
        "WITH club_details AS (SELECT manager, captain FROM club) SELECT manager, captain FROM club_details",
        "SELECT manager as club_manager, captain as club_captain FROM club ORDER BY manager"
      ]
    ]
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "nlq": "List the name of clubs whose manufacturer is not \"Nike\"",
    "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
    "infer_predictions": [
      [
        "SELECT name FROM club WHERE manufacturer <> 'Nike'",
        "SELECT name FROM club WHERE NOT manufacturer = 'Nike'",
        "SELECT C.name FROM club AS C WHERE C.manufacturer != 'Nike'",
        "SELECT club.name FROM club WHERE club.manufacturer IS NOT 'Nike'",
        "SELECT C.name FROM club C WHERE C.manufacturer NOT IN ('Nike')",
        "SELECT club.name FROM club WHERE UPPER(club.manufacturer) NOT LIKE UPPER('Nike')",
        "SELECT C.name FROM club C WHERE C.manufacturer NOT LIKE 'Nike'",
        "SELECT club.name FROM club WHERE 'Nike' <> club.manufacturer",
        "SELECT name FROM club WHERE ('Nike' <> manufacturer)",
        "SELECT name FROM club WHERE manufacturer NOT GLOB 'Nike'"
      ]
    ]
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "nlq": "What are the names of clubs who do not have the manufacturer Nike?",
    "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
    "infer_predictions": [
      [
        "SELECT name FROM club WHERE manufacturer != 'Nike'",
        "SELECT name FROM club WHERE NOT manufacturer = 'Nike'",
        "SELECT name FROM club WHERE UPPER(manufacturer) <> 'NIKE'",
        "SELECT CL.name FROM club CL WHERE CL.manufacturer <> 'Nike'",
        "SELECT name FROM club WHERE manufacturer NOT LIKE 'Nike'",
        "SELECT name FROM club WHERE manufacturer NOT IN ('Nike')",
        "SELECT club.name FROM club WHERE club.manufacturer <> 'Nike'",
        "SELECT DISTINCT name FROM club WHERE manufacturer <> 'Nike'",
        "SELECT name FROM club WHERE IFNULL(manufacturer, '') <> 'Nike'",
        "SELECT C.name FROM club C WHERE C.manufacturer NOT LIKE 'Nike'"
      ]
    ]
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "nlq": "What are the names of players in ascending order of wins count?",
    "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
    "infer_predictions": [
      [
        "SELECT name FROM player ORDER BY wins_count ASC",
        "SELECT p.name FROM player p ORDER BY p.wins_count ASC",
        "SELECT name FROM player p ORDER BY wins_count ASC",
        "SELECT p.name AS player_name FROM player p ORDER BY p.wins_count ASC",
        "SELECT p.name FROM player p ORDER BY p.wins_count"
      ]
    ]
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "nlq": "Return the names of players in order of count of wins, ascending.",
    "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
    "infer_predictions": [
      [
        "SELECT name FROM player ORDER BY wins_count ASC",
        "SELECT p.name FROM player p ORDER BY p.wins_count ASC",
        "SELECT name FROM player AS player ORDER BY wins_count ASC",
        "SELECT name FROM player p ORDER BY p.wins_count ASC",
        "SELECT player.name AS Name FROM player ORDER BY player.wins_count ASC",
        "SELECT p.name AS PlayerName FROM player AS p ORDER BY p.wins_count ASC"
      ]
    ]
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "nlq": "What is the name of the player with the highest earnings?",
    "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM player ORDER BY earnings DESC LIMIT 1;",
        "SELECT p.name FROM player p WHERE p.earnings = (SELECT MAX(earnings) FROM player);",
        "SELECT name FROM player WHERE earnings = (SELECT MAX(earnings) FROM player) LIMIT 1;",
        "SELECT name FROM (SELECT name, RANK() OVER (ORDER BY earnings DESC) AS rank FROM player) WHERE rank = 1 LIMIT 1;",
        "SELECT name FROM player WHERE earnings IN (SELECT MAX(earnings) FROM player);",
        "SELECT name FROM player p WHERE p.earnings = (SELECT MAX(earnings) FROM player p2);"
      ]
    ]
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "nlq": "Return the name of the player who earns the most money.",
    "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM player ORDER BY earnings DESC LIMIT 1",
        "SELECT P.name FROM player P WHERE P.earnings = (SELECT MAX(earnings) FROM player)",
        "SELECT player.name FROM player WHERE earnings = (SELECT MAX(earnings) FROM player)",
        "SELECT P.name FROM player P ORDER BY P.earnings DESC LIMIT 1",
        "SELECT P.name FROM (SELECT name, MAX(earnings) FROM player) P",
        "SELECT name FROM player WHERE earnings IN (SELECT MAX(earnings) FROM player GROUP BY earnings)",
        "SELECT name FROM (SELECT name FROM player ORDER BY earnings DESC LIMIT 1) AS highest_earning_player"
      ]
    ]
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "nlq": "What are the distinct countries of players with earnings higher than 1200000?",
    "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
    "infer_predictions": [
      [
        "SELECT DISTINCT country FROM player WHERE earnings > 1200000",
        "SELECT DISTINCT p.country FROM player p WHERE p.earnings > 1200000",
        "SELECT country FROM player GROUP BY country HAVING MAX(earnings) > 1200000",
        "SELECT country FROM (SELECT DISTINCT country, earnings FROM player) WHERE earnings > 1200000",
        "SELECT DISTINCT country FROM player p WHERE p.earnings > 1200000",
        "SELECT p.country FROM player p WHERE p.earnings > 1200000 GROUP BY p.country",
        "SELECT DISTINCT p.country FROM player AS p WHERE EXISTS (SELECT 1 FROM player WHERE player_id = p.player_id AND earnings > 1200000)",
        "SELECT country FROM player WHERE earnings > 1200000 GROUP BY country HAVING COUNT(*) > 0"
      ]
    ]
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "nlq": "From which countries are players who make more than 1200000 from?",
    "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
    "infer_predictions": [
      [
        "SELECT DISTINCT country FROM player WHERE earnings > 1200000",
        "SELECT country FROM player WHERE earnings > 1200000 GROUP BY country",
        "SELECT country FROM (SELECT country FROM player WHERE earnings > 1200000) AS subquery",
        "SELECT p.country FROM player p WHERE p.earnings > 1200000 GROUP BY p.country",
        "SELECT country FROM player GROUP BY country HAVING MAX(earnings) > 1200000",
        "SELECT DISTINCT p.country FROM player p WHERE EXISTS (SELECT 1 FROM player pl WHERE pl.country = p.country AND pl.earnings > 1200000)",
        "SELECT country FROM (SELECT DISTINCT country FROM player WHERE earnings > 1200000) AS unique_countries"
      ]
    ]
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "nlq": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM player WHERE earnings = (SELECT MAX(earnings) FROM player WHERE wins_count > 2)",
        "SELECT country FROM player WHERE earnings IN (SELECT MAX(earnings) FROM player WHERE wins_count > 2)",
        "SELECT p.country FROM player p WHERE p.earnings = (SELECT MAX(p2.earnings) FROM player p2 WHERE p2.wins_count > 2)",
        "SELECT p.country FROM player p JOIN (SELECT MAX(earnings) as max_earnings FROM player WHERE wins_count > 2) sub ON p.earnings = sub.max_earnings",
        "SELECT p1.country FROM player p1 WHERE p1.earnings = (SELECT MAX(p2.earnings) FROM player p2 WHERE p2.wins_count > 2) AND p1.wins_count > 2",
        "SELECT p.country FROM player p WHERE p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count > 2) AND p.wins_count > 2",
        "SELECT p.country FROM (SELECT * FROM player WHERE wins_count > 2) p WHERE p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count > 2)",
        "SELECT country FROM player WHERE player_id = (SELECT player_id FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1)",
        "SELECT p.country FROM player p WHERE p.earnings = (SELECT earnings FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "nlq": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1",
        "SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC LIMIT 1",
        "SELECT country FROM (SELECT country FROM player WHERE wins_count > 2 ORDER BY earnings DESC) LIMIT 1",
        "SELECT MAX(p.country) FROM player p WHERE p.wins_count > 2 GROUP BY p.country ORDER BY MAX(p.earnings) DESC LIMIT 1",
        "SELECT p.country FROM player p WHERE p.wins_count > 2 and p.earnings = (SELECT MAX(earnings) FROM player WHERE wins_count>2)",
        "SELECT p.country FROM (SELECT country, MAX(earnings) AS max_earnings FROM player WHERE wins_count > 2 GROUP BY country ORDER BY max_earnings DESC) p LIMIT 1",
        "SELECT p.country FROM player p WHERE p.wins_count > 2 ORDER BY p.earnings DESC, p.player_id ASC LIMIT 1",
        "SELECT country FROM player WHERE player_id = (SELECT player_id FROM player WHERE wins_count > 2 ORDER BY earnings DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "nlq": "Show names of players and names of clubs they are in.",
    "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
    "infer_predictions": [
      [
        "SELECT player.name, club.name FROM player JOIN club ON player.club_id = club.club_id",
        "SELECT p.name, c.name FROM player p INNER JOIN club c ON p.club_id = c.club_id",
        "SELECT pl.name AS PlayerName, cl.name AS ClubName FROM player pl, club cl WHERE pl.club_id = cl.club_id",
        "SELECT pr.name, cr.name FROM player pr CROSS JOIN club cr WHERE pr.club_id = cr.club_id",
        "SELECT p.name AS playerName, c.name AS clubName FROM player AS p JOIN club AS c ON p.club_id = c.club_id",
        "SELECT name, (SELECT name FROM club WHERE club_id = player.club_id) AS ClubName FROM player",
        "SELECT (SELECT name FROM club WHERE club_id = pl.club_id), pl.name FROM player pl",
        "SELECT p.name || ' in ' || c.name AS info FROM player p INNER JOIN club c ON p.club_id = c.club_id"
      ]
    ]
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "nlq": "What are the names of players and the corresponding clubs that they are in?",
    "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
    "infer_predictions": [
      [
        "SELECT player.name, club.name FROM player INNER JOIN club ON player.club_id = club.club_id",
        "SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id",
        "SELECT p.name, c.name FROM player p, club c WHERE p.club_id = c.club_id",
        "SELECT player_name, club_name FROM (SELECT name AS player_name, club_id FROM player) p JOIN (SELECT name AS club_name, club_id FROM club) c ON p.club_id = c.club_id",
        "SELECT a.name, b.name FROM player a, club b WHERE a.club_id = b.club_id",
        "SELECT DISTINCT player_name, club_name FROM (SELECT p.name AS player_name, c.name AS club_name, p.club_id FROM player p JOIN club c ON p.club_id = c.club_id) tbl",
        "SELECT names.player_name, names.club_name FROM (SELECT player.name AS player_name, club.name AS club_name FROM player JOIN club ON player.club_id = club.club_id) names",
        "SELECT p.name || '' AS player_name, c.name || '' AS club_name FROM player p INNER JOIN club c ON p.club_id = c.club_id AND p.country = c.manager"
      ]
    ]
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "nlq": "Show names of clubs that have players with more than 2 win counts.",
    "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT club.name FROM club JOIN player ON club.club_id = player.club_id WHERE player.wins_count > 2",
        "SELECT club.name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)",
        "SELECT club.name FROM club INNER JOIN player ON club.club_id = player.club_id AND player.wins_count > 2 GROUP BY club.name",
        "SELECT DISTINCT c.name FROM club c, player p WHERE c.club_id = p.club_id AND p.wins_count > 2",
        "SELECT c.name FROM club c WHERE EXISTS (SELECT 1 FROM player p WHERE p.club_id = c.club_id AND p.wins_count > 2)",
        "SELECT club.name FROM club WHERE club.club_id IN (SELECT player.club_id FROM player GROUP BY player.club_id HAVING MAX(player.wins_count) > 2)",
        "SELECT club.name FROM club JOIN player ON club.club_id = player.club_id GROUP BY club.name HAVING SUM(player.wins_count) > 2",
        "SELECT DISTINCT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2",
        "SELECT c.name FROM club c WHERE c.club_id IN (SELECT p.club_id FROM player p WHERE p.wins_count > 2 GROUP BY p.club_id)"
      ]
    ]
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "nlq": "What are the names of clubs that have players who have won more than twice?",
    "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
    "infer_predictions": [
      [
        "SELECT club.name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2 GROUP BY club_id)",
        "SELECT DISTINCT c.name FROM club c JOIN player p ON c.club_id = p.club_id WHERE p.wins_count > 2",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING MAX(wins_count) > 2)",
        "SELECT club.name FROM club INNER JOIN (SELECT DISTINCT club_id FROM player WHERE wins_count > 2) AS winners ON club.club_id = winners.club_id",
        "SELECT DISTINCT name FROM club WHERE EXISTS (SELECT 1 FROM player WHERE club_id = club.club_id AND wins_count > 2)",
        "SELECT name FROM club c WHERE EXISTS (SELECT p.club_id FROM player p WHERE p.club_id = c.club_id AND p.wins_count > 2)",
        "SELECT DISTINCT c.name FROM club c, player p WHERE c.club_id = p.club_id AND p.wins_count > 2",
        "SELECT club.name FROM club LEFT JOIN player ON club.club_id = player.club_id WHERE player.wins_count > 2 AND player.club_id IS NOT NULL",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE wins_count > 2)",
        "SELECT DISTINCT c.name FROM club c WHERE c.club_id IN (SELECT p.club_id FROM player p WHERE p.wins_count > 2)"
      ]
    ]
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "nlq": "Show names of players from the club with manager \"Sam Allardyce\".",
    "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
    "infer_predictions": [
      [
        "SELECT p.name FROM player p INNER JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce'",
        "SELECT name FROM player WHERE club_id IN (SELECT club_id FROM club WHERE manager = 'Sam Allardyce')",
        "SELECT player.name FROM player, club WHERE player.club_id = club.club_id AND club.manager = 'Sam Allardyce'",
        "SELECT p.name FROM player p, club c WHERE p.club_id = c.club_id AND c.manager = 'Sam Allardyce'",
        "SELECT name FROM player WHERE club_id = (SELECT club_id FROM club WHERE manager = 'Sam Allardyce')",
        "SELECT p.name FROM player p CROSS JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce'",
        "SELECT p.name FROM player p LEFT JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce'",
        "SELECT player.name FROM player INNER JOIN club ON player.club_id = club.club_id WHERE club.manager = 'Sam Allardyce'"
      ]
    ]
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "nlq": "What are the names of players from the club managed by Sam Allardyce?",
    "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
    "infer_predictions": [
      [
        "SELECT player.name FROM player JOIN club ON player.club_id = club.club_id WHERE club.manager = 'Sam Allardyce'",
        "SELECT name FROM player WHERE club_id IN (SELECT club_id FROM club WHERE manager = 'Sam Allardyce')",
        "SELECT p.name FROM player p INNER JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce'",
        "SELECT DISTINCT p.name FROM player p, club c WHERE p.club_id = c.club_id AND c.manager = 'Sam Allardyce'",
        "SELECT p.name FROM player p WHERE EXISTS (SELECT 1 FROM club c WHERE c.club_id = p.club_id AND c.manager = 'Sam Allardyce')",
        "SELECT name FROM player WHERE club_id = (SELECT club_id FROM club WHERE manager = 'Sam Allardyce')",
        "SELECT p.name FROM player p LEFT JOIN club c ON p.club_id = c.club_id WHERE c.manager = 'Sam Allardyce'",
        "SELECT player.name FROM player INNER JOIN club ON player.club_id = club.club_id WHERE club.manager = 'Sam Allardyce'",
        "SELECT p.name FROM player p JOIN club c ON p.club_id = c.club_id AND c.manager = 'Sam Allardyce'"
      ]
    ]
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "nlq": "Show names of clubs in descending order of average earnings of players belonging.",
    "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
    "infer_predictions": [
      [
        "SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id ORDER BY AVG(earnings) DESC)",
        "SELECT club.name FROM club INNER JOIN player ON club.club_id = player.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC",
        "SELECT c.name FROM club c, player p WHERE c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING AVG(earnings) ORDER BY AVG(earnings) DESC)",
        "SELECT DISTINCT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC",
        "SELECT (SELECT name FROM club WHERE club_id = x.club_id) AS name FROM (SELECT club_id FROM player GROUP BY club_id ORDER BY AVG(earnings) DESC) x",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING AVG(earnings) IS NOT NULL ORDER BY AVG(earnings) DESC)",
        "SELECT club.name FROM club JOIN player ON club.club_id = player.club_id GROUP BY club.name HAVING AVG(player.earnings) IS NOT NULL ORDER BY AVG(player.earnings) DESC"
      ]
    ]
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "nlq": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
    "infer_predictions": [
      [
        "SELECT c.name FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name ORDER BY AVG(p.earnings) DESC",
        "SELECT club.name FROM club INNER JOIN player ON club.club_id = player.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id ORDER BY AVG(earnings) DESC)",
        "SELECT c.name FROM club c WHERE c.club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING AVG(earnings) ORDER BY AVG(earnings) DESC)",
        "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player GROUP BY club_id HAVING AVG(earnings) IS NOT NULL ORDER BY AVG(earnings) DESC)",
        "SELECT (SELECT name FROM club WHERE club_id = p.club_id) AS club_name FROM player p GROUP BY p.club_id ORDER BY AVG(earnings) DESC",
        "SELECT name FROM (SELECT club_id FROM player GROUP BY club_id ORDER BY AVG(earnings) DESC) AS sub JOIN club ON sub.club_id = club.club_id",
        "SELECT club.name FROM player JOIN club ON player.club_id = club.club_id GROUP BY club.name ORDER BY AVG(player.earnings) DESC",
        "SELECT sub.club_name FROM (SELECT c.name AS club_name, AVG(p.earnings) AS average_earnings FROM club c JOIN player p ON c.club_id = p.club_id GROUP BY c.name) sub ORDER BY sub.average_earnings DESC",
        "SELECT c.name FROM (SELECT club_id, AVG(earnings) AS avg_earnings FROM player GROUP BY club_id) p JOIN club c ON p.club_id = c.club_id ORDER BY p.avg_earnings DESC"
      ]
    ]
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "nlq": "Show different manufacturers and the number of clubs they are associated with.",
    "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
    "infer_predictions": [
      [
        "SELECT manufacturer, COUNT(club_id) FROM club GROUP BY manufacturer",
        "SELECT DISTINCT manufacturer, COUNT(DISTINCT club_id) AS number_of_clubs FROM club GROUP BY manufacturer",
        "SELECT c.manufacturer, COUNT(c.club_id) AS count_of_clubs FROM club c GROUP BY c.manufacturer",
        "SELECT manufacturer, COUNT(*) FROM club GROUP BY manufacturer",
        "SELECT c.manufacturer, COUNT(c.club_id) FROM (SELECT DISTINCT manufacturer, club_id FROM club) c GROUP BY c.manufacturer",
        "SELECT mfr.manufacturer, COUNT(mfr.club_id) FROM (SELECT manufacturer, club_id FROM club) mfr GROUP BY mfr.manufacturer",
        "SELECT manufacturer AS manuf, COUNT(club_id) AS total_clubs FROM club GROUP BY manuf",
        "SELECT c.manufacturer, COUNT(*) AS num_clubs FROM club c GROUP BY c.manufacturer",
        "SELECT man, COUNT(cid) FROM (SELECT manufacturer AS man, club_id AS cid FROM club) GROUP BY man",
        "SELECT main.manufacturer, COUNT(main.club_id) FROM (SELECT manufacturer, club_id FROM club) AS main GROUP BY main.manufacturer"
      ]
    ]
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "nlq": "How many clubs use each manufacturer?",
    "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
    "infer_predictions": [
      [
        "SELECT manufacturer, COUNT(DISTINCT club_id) FROM club GROUP BY manufacturer",
        "SELECT c.manufacturer, COUNT(DISTINCT c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer",
        "SELECT manufacturer, COUNT(*) FROM (SELECT DISTINCT manufacturer, club_id FROM club) GROUP BY manufacturer",
        "SELECT manufacturer, COUNT(club_id) AS club_count FROM (SELECT DISTINCT manufacturer, club_id FROM club) GROUP BY manufacturer",
        "SELECT DISTINCT manufacturer, COUNT(club_id) OVER (PARTITION BY manufacturer) FROM club GROUP BY manufacturer, club_id",
        "SELECT COUNT(DISTINCT c.club_id) as ClubCount, c.manufacturer FROM club c GROUP BY c.manufacturer",
        "SELECT DISTINCT c.manufacturer, (SELECT COUNT(DISTINCT club_id) FROM club WHERE manufacturer = c.manufacturer) FROM club c",
        "SELECT c1.manufacturer, (SELECT COUNT(DISTINCT c2.club_id) FROM club c2 WHERE c2.manufacturer = c1.manufacturer) FROM club c1 GROUP BY c1.manufacturer",
        "SELECT a.manufacturer, (SELECT COUNT(DISTINCT b.club_id) FROM club b WHERE b.manufacturer = a.manufacturer) FROM club a GROUP BY a.manufacturer"
      ]
    ]
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "nlq": "Please show the most common manufacturer of clubs.",
    "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT manufacturer FROM (SELECT manufacturer, COUNT(*) as total FROM club GROUP BY manufacturer) ORDER BY total DESC LIMIT 1",
        "SELECT c.manufacturer FROM club c GROUP BY c.manufacturer ORDER BY COUNT(c.manufacturer) DESC LIMIT 1",
        "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM club GROUP BY manufacturer))",
        "SELECT manufacturer FROM club WHERE manufacturer IN (SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT manufacturer FROM (SELECT manufacturer, COUNT(manufacturer) as freq FROM club GROUP BY manufacturer ORDER BY freq DESC LIMIT 1) AS most_common",
        "SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(club_id) DESC LIMIT 1",
        "SELECT manufacturer FROM (SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(manufacturer) DESC LIMIT 1)",
        "SELECT c.manufacturer FROM (SELECT manufacturer, COUNT(manufacturer) as num FROM club GROUP BY manufacturer) c ORDER BY c.num DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "nlq": "Which manufacturer is most common among clubs?",
    "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.manufacturer FROM club c GROUP BY c.manufacturer ORDER BY COUNT(c.manufacturer) DESC LIMIT 1",
        "SELECT manufacturer FROM (SELECT manufacturer, COUNT(manufacturer) AS count FROM club GROUP BY manufacturer) WHERE count = (SELECT MAX(count) FROM (SELECT manufacturer, COUNT(manufacturer) AS count FROM club GROUP BY manufacturer))",
        "SELECT c.manufacturer FROM (SELECT manufacturer, COUNT(*) cnt FROM club GROUP BY manufacturer) c ORDER BY c.cnt DESC LIMIT 1",
        "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(manufacturer) = (SELECT MAX(count) FROM (SELECT COUNT(manufacturer) AS count FROM club GROUP BY manufacturer))",
        "SELECT c.manufacturer FROM club c WHERE c.club_id IN (SELECT club_id FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.manufacturer FROM club c LEFT JOIN (SELECT manufacturer, COUNT(*) AS cnt FROM club GROUP BY manufacturer) t ON c.manufacturer = t.manufacturer ORDER BY t.cnt DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "nlq": "List the manufacturers that are associated with more than one club.",
    "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(club_id) > 1",
        "SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(*) > 1",
        "SELECT c.manufacturer FROM (SELECT manufacturer FROM club GROUP BY manufacturer) c JOIN club b ON c.manufacturer = b.manufacturer GROUP BY c.manufacturer HAVING COUNT(b.club_id) > 1",
        "SELECT DISTINCT a.manufacturer FROM club a WHERE (SELECT COUNT(*) FROM club WHERE manufacturer = a.manufacturer) > 1",
        "SELECT c.manufacturer FROM club c WHERE EXISTS (SELECT null FROM club WHERE manufacturer = c.manufacturer GROUP BY manufacturer HAVING COUNT(*) > 1)",
        "SELECT manufacturer FROM (SELECT manufacturer, COUNT(club_id) as num_clubs FROM club GROUP BY manufacturer) WHERE num_clubs > 1",
        "WITH ManufacturerCounts AS (SELECT manufacturer, COUNT(*) AS NumberOfClubs FROM club GROUP BY manufacturer) SELECT manufacturer FROM ManufacturerCounts WHERE NumberOfClubs > 1",
        "SELECT manufacturer FROM club c1 WHERE 1 < (SELECT COUNT(*) FROM club c2 WHERE c2.manufacturer = c1.manufacturer GROUP BY manufacturer)",
        "SELECT mfr.manufacturer FROM (SELECT manufacturer, COUNT(club_id) as club_count FROM club GROUP BY manufacturer) mfr WHERE mfr.club_count > 1"
      ]
    ]
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "nlq": "Which manufacturers work for more than 1 club?",
    "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(DISTINCT club_id) > 1",
        "SELECT c.manufacturer FROM club c GROUP BY c.manufacturer HAVING COUNT(DISTINCT c.club_id) > 1",
        "SELECT DISTINCT manufacturer FROM (SELECT manufacturer, COUNT(DISTINCT club_id) AS num_clubs FROM club GROUP BY manufacturer) WHERE num_clubs > 1",
        "SELECT c1.manufacturer FROM club c1 JOIN club c2 ON c1.manufacturer = c2.manufacturer WHERE c1.club_id != c2.club_id GROUP BY c1.manufacturer",
        "SELECT manufacturer FROM (SELECT manufacturer, COUNT(*) as total FROM club GROUP BY manufacturer) tmp WHERE total > 1",
        "SELECT c.manufacturer FROM (SELECT manufacturer, COUNT(club_id) AS club_count FROM club GROUP BY manufacturer) c WHERE c.club_count > 1",
        "SELECT c.manufacturer FROM club c WHERE (SELECT COUNT(*) FROM club WHERE manufacturer = c.manufacturer) > 1 GROUP BY c.manufacturer",
        "SELECT group_manufacturer.manufacturer FROM (SELECT manufacturer, COUNT(club_id) AS multiple_clubs FROM club GROUP BY manufacturer HAVING COUNT(club_id) > 1) group_manufacturer",
        "SELECT DISTINCT c.manufacturer FROM club c INNER JOIN club cw ON c.manufacturer = cw.manufacturer WHERE c.club_id <> cw.club_id",
        "SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) > 1 AND COUNT(DISTINCT club_id) > 1"
      ]
    ]
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "nlq": "List the country that have more than one player.",
    "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1",
        "SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(*) > 1",
        "SELECT country FROM (SELECT country, COUNT(*) AS cnt FROM player GROUP BY country) WHERE cnt > 1",
        "WITH grouped AS (SELECT country, COUNT(player_id) AS num_players FROM player GROUP BY country) SELECT country FROM grouped WHERE num_players > 1",
        "SELECT DISTINCT p1.country FROM player p1 JOIN player p2 ON p1.player_id != p2.player_id AND p1.country = p2.country",
        "SELECT p.country FROM player p WHERE (SELECT COUNT(*) FROM player p2 WHERE p2.country = p.country) > 1 GROUP BY p.country",
        "SELECT p.country FROM player p INNER JOIN (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1) pc ON p.country = pc.country GROUP BY p.country",
        "SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(player_id) > 1"
      ]
    ]
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "nlq": "Which countries have produced more than one player?",
    "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1",
        "SELECT country FROM player GROUP BY country HAVING COUNT(*) > 1",
        "SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.name) > 1",
        "SELECT DISTINCT p.country FROM player p WHERE (SELECT COUNT(*) FROM player WHERE country = p.country) > 1",
        "SELECT p.country FROM player p INNER JOIN (SELECT country, COUNT(*) AS cnt FROM player GROUP BY country) AS sub ON p.country = sub.country WHERE sub.cnt > 1",
        "SELECT country FROM (SELECT country, COUNT(player_id) AS num_players FROM player GROUP BY country) WHERE num_players > 1",
        "SELECT p.country FROM (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1) p",
        "SELECT DISTINCT country FROM player WHERE country IN (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1)"
      ]
    ]
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "nlq": "List the name of clubs that do not have players.",
    "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "infer_predictions": [
      [
        "SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player)",
        "SELECT name FROM club c WHERE NOT EXISTS (SELECT 1 FROM player p WHERE p.club_id = c.club_id)",
        "SELECT name FROM club WHERE NOT EXISTS (SELECT NULL FROM player WHERE player.club_id = club.club_id)",
        "SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.player_id IS NULL",
        "SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT DISTINCT p.club_id FROM player p)",
        "SELECT c.name FROM club c LEFT OUTER JOIN player p ON c.club_id = p.club_id GROUP BY c.club_id HAVING COUNT(p.player_id) = 0",
        "SELECT name FROM club WHERE club_id NOT IN (SELECT DISTINCT club_id FROM player WHERE club_id IS NOT NULL)",
        "SELECT c.name FROM club c WHERE NOT EXISTS (SELECT * FROM player p WHERE p.club_id = c.club_id)",
        "SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player WHERE player.club_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "nlq": "What are the names of clubs that do not have any players?",
    "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "infer_predictions": [
      [
        "SELECT club.name FROM club WHERE club_id NOT IN (SELECT club_id FROM player)",
        "SELECT name FROM club WHERE NOT EXISTS (SELECT 1 FROM player WHERE player.club_id = club.club_id)",
        "SELECT c.name FROM club c LEFT JOIN player p ON c.club_id = p.club_id WHERE p.club_id IS NULL",
        "SELECT c.name FROM club c WHERE NOT EXISTS (SELECT NULL FROM player p WHERE p.club_id = c.club_id)",
        "SELECT name FROM club WHERE club_id NOT IN (SELECT DISTINCT club_id FROM player)",
        "SELECT c.name FROM club c WHERE c.club_id NOT IN (SELECT DISTINCT p.club_id FROM player p)",
        "SELECT c.name FROM club as c LEFT JOIN player as p ON c.club_id = p.club_id WHERE p.name IS NULL",
        "SELECT club.name FROM club LEFT JOIN player ON club.club_id = player.club_id GROUP BY club.name HAVING COUNT(player.player_id) = 0",
        "SELECT cl.name FROM club cl WHERE cl.club_id NOT IN (SELECT DISTINCT pl.club_id FROM player pl WHERE pl.club_id = cl.club_id)"
      ]
    ]
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "nlq": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
    "infer_predictions": [
      [
        "SELECT DISTINCT country FROM player WHERE earnings > 1400000 OR earnings < 1100000",
        "SELECT country FROM player WHERE earnings NOT BETWEEN 1100000 AND 1400000 GROUP BY country",
        "SELECT p.country FROM player p WHERE p.earnings > 1400000 UNION SELECT p.country FROM player p WHERE p.earnings < 1100000",
        "SELECT DISTINCT country FROM player WHERE earnings > 1400000 UNION ALL SELECT DISTINCT country FROM player WHERE earnings < 1100000",
        "SELECT country FROM (SELECT country, earnings FROM player) WHERE earnings < 1100000 OR earnings > 1400000",
        "SELECT country FROM player GROUP BY country HAVING MIN(earnings) < 1100000 OR MAX(earnings) > 1400000",
        "SELECT DISTINCT p.country FROM player p WHERE EXISTS (SELECT 1 FROM player WHERE earnings < 1100000 OR earnings > 1400000 AND player_id = p.player_id)"
      ]
    ]
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "nlq": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.country FROM player p1 WHERE p1.earnings > 1400000 AND EXISTS (SELECT 1 FROM player p2 WHERE p2.earnings < 1100000 AND p1.country = p2.country)",
        "SELECT country FROM player WHERE earnings > 1400000 INTERSECT SELECT country FROM player WHERE earnings < 1100000",
        "SELECT p.country FROM player p JOIN (SELECT country FROM player WHERE earnings < 1100000) AS low ON p.country = low.country WHERE p.earnings > 1400000",
        "SELECT DISTINCT country FROM player p WHERE (SELECT MAX(earnings) FROM player WHERE country = p.country) > 1400000 AND (SELECT MIN(earnings) FROM player WHERE country = p.country) < 1100000",
        "SELECT DISTINCT p.country FROM player p INNER JOIN player q ON p.country = q.country WHERE p.earnings > 1400000 AND q.earnings < 1100000",
        "SELECT country FROM player GROUP BY country HAVING MAX(earnings) > 1400000 AND MIN(earnings) < 1100000",
        "SELECT p1.country FROM player p1, player p2 WHERE p1.country = p2.country AND p1.earnings > 1400000 AND p2.earnings < 1100000 GROUP BY p1.country",
        "WITH HighEarners AS (SELECT country FROM player WHERE earnings > 1400000), LowEarners AS (SELECT country FROM player WHERE earnings < 1100000) SELECT country FROM HighEarners INTERSECT SELECT country FROM LowEarners",
        "SELECT DISTINCT country FROM player WHERE country IN (SELECT country FROM player WHERE earnings > 1400000) AND country IN (SELECT country FROM player WHERE earnings < 1100000)",
        "WITH RankedCountries AS (SELECT country, MAX(earnings) AS MaxEarnings, MIN(earnings) AS MinEarnings FROM player GROUP BY country) SELECT country FROM RankedCountries WHERE MaxEarnings > 1400000 AND MinEarnings < 1100000"
      ]
    ]
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "nlq": "What is the number of distinct countries of all players?",
    "gold": "SELECT COUNT (DISTINCT Country) FROM player",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country) FROM player",
        "SELECT COUNT(DISTINCT p.country) FROM player p",
        "SELECT COUNT(DISTINCT country) AS unique_countries FROM player",
        "SELECT COUNT(DISTINCT country) FROM (SELECT country FROM player)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM player)",
        "SELECT DISTINCT COUNT(country) FROM player GROUP BY country HAVING COUNT(country) > 0",
        "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM player) AS distinct_countries",
        "SELECT COUNT(DISTINCT p.country) FROM player p WHERE p.country IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM player WHERE country IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "nlq": "How many different countries are players from?",
    "gold": "SELECT COUNT (DISTINCT Country) FROM player",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country) FROM player",
        "SELECT COUNT(DISTINCT p.country) FROM player p",
        "SELECT COUNT(unique_players.country) FROM (SELECT DISTINCT country FROM player) AS unique_players",
        "SELECT COUNT(DISTINCT country) AS country_count FROM player",
        "SELECT (SELECT COUNT(DISTINCT country) FROM player)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM player)",
        "SELECT COUNT(*) FROM (SELECT country FROM player GROUP BY country)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT p.country FROM player p)",
        "SELECT COUNT(DISTINCT p.country) AS total_countries FROM player p",
        "SELECT (SELECT COUNT(DISTINCT country) FROM player) AS cnt_c"
      ]
    ]
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "nlq": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
    "infer_predictions": [
      [
        "SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe')",
        "SELECT p.earnings FROM player p WHERE p.country = 'Australia' OR p.country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE country = 'Australia' UNION SELECT earnings FROM player WHERE country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE country LIKE 'Australia' OR country LIKE 'Zimbabwe'",
        "SELECT p.earnings FROM player AS p WHERE p.country IN ('Australia', 'Zimbabwe')",
        "SELECT p.earnings FROM player AS p WHERE p.country = 'Australia' UNION ALL SELECT p.earnings FROM player AS p WHERE p.country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE country = 'Australia' UNION ALL SELECT earnings FROM player WHERE country = 'Zimbabwe'",
        "SELECT DISTINCT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe')",
        "SELECT p.earnings FROM player p WHERE (p.country = 'Australia' OR p.country = 'Zimbabwe')",
        "SELECT DISTINCT p.earnings FROM player AS p WHERE p.country IN ('Australia', 'Zimbabwe')"
      ]
    ]
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "nlq": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
    "infer_predictions": [
      [
        "SELECT earnings FROM player WHERE country IN ('Australia', 'Zimbabwe')",
        "SELECT p.earnings FROM player p WHERE p.country = 'Australia' OR p.country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE country = 'Australia' UNION SELECT earnings FROM player WHERE country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE country IN (SELECT country FROM player WHERE country = 'Australia' OR country = 'Zimbabwe')",
        "SELECT DISTINCT earnings FROM player WHERE country = 'Australia' OR country = 'Zimbabwe'",
        "SELECT p.earnings FROM player AS p WHERE p.country IN ('Australia', 'Zimbabwe')",
        "SELECT earnings FROM player p WHERE country = 'Australia' UNION ALL SELECT earnings FROM player WHERE country = 'Zimbabwe'",
        "SELECT earnings FROM player WHERE player.country IN (SELECT distinct country FROM player WHERE country = 'Australia' OR country = 'Zimbabwe')",
        "SELECT p.earnings FROM player p WHERE p.country IN (SELECT country FROM player WHERE country IN ('Australia', 'Zimbabwe'))"
      ]
    ]
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "nlq": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
    "infer_predictions": [
      [
        "SELECT DISTINCT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers, orders, order_items WHERE customers.customer_id = orders.customer_id AND orders.order_id = order_items.order_id GROUP BY customers.customer_id HAVING COUNT(DISTINCT orders.order_id) > 2 AND COUNT(order_items.order_item_id) >= 3",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c, orders o, order_items oi WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(DISTINCT oi.order_item_id) >= 3",
        "SELECT customers.customer_id, customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.customer_id HAVING COUNT(DISTINCT orders.order_id) > 2 AND COUNT(order_items.order_item_id) >= 3",
        "SELECT DISTINCT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers INNER JOIN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2) x ON customers.customer_id = x.customer_id INNER JOIN (SELECT orders.customer_id FROM order_items JOIN orders ON order_items.order_id = orders.order_id GROUP BY orders.customer_id HAVING COUNT(order_items.order_item_id) >= 3) y ON customers.customer_id = y.customer_id"
      ]
    ]
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "nlq": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
    "infer_predictions": [
      [
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c WHERE c.customer_id IN (SELECT o.customer_id FROM orders o GROUP BY o.customer_id HAVING COUNT(*) > 2) AND c.customer_id IN (SELECT o.customer_id FROM orders o JOIN order_items i ON o.order_id = i.order_id GROUP BY o.customer_id HAVING COUNT(i.order_item_id) >= 3)",
        "SELECT DISTINCT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id HAVING COUNT(DISTINCT orders.order_id) > 2 AND customers.customer_id IN (SELECT orders.customer_id FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.customer_id HAVING COUNT(order_items.order_item_id) >= 3)",
        "SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers WHERE customers.customer_id IN (SELECT orders.customer_id FROM orders GROUP BY orders.customer_id HAVING COUNT(orders.order_id) > 2) AND EXISTS (SELECT 1 FROM order_items WHERE order_items.order_id IN (SELECT order_id FROM orders WHERE orders.customer_id = customers.customer_id) GROUP BY order_items.order_id HAVING COUNT(order_items.order_item_id) >= 3)",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c WHERE EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(o.order_id) > 2) AND EXISTS (SELECT 1 FROM orders o JOIN order_items i ON o.order_id = i.order_id WHERE o.customer_id = c.customer_id GROUP BY o.customer_id HAVING COUNT(*) >= 3)",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c JOIN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2) o ON c.customer_id = o.customer_id JOIN (SELECT customer_id FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customer_id HAVING COUNT(order_item_id) >= 3) oi ON c.customer_id = oi.customer_id",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AS frequent_customers JOIN customers c ON frequent_customers.customer_id = c.customer_id WHERE frequent_customers.customer_id IN (SELECT customer_id FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customer_id HAVING SUM(1) >= 3)",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c WHERE (SELECT COUNT(*) FROM orders o WHERE o.customer_id = c.customer_id) > 2 AND (SELECT COUNT(*) FROM order_items i JOIN orders o ON i.order_id = o.order_id WHERE o.customer_id = c.customer_id) >= 3",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items i ON o.order_id = i.order_id GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(i.order_item_id) >= 3",
        "SELECT customer_id, customer_first_name, customer_last_name FROM (SELECT c.customer_id, c.customer_first_name, c.customer_last_name, COUNT(DISTINCT o.order_id) AS order_count, COUNT(i.order_item_id) AS item_count FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items i ON o.order_id = i.order_id GROUP BY c.customer_id) AS stats WHERE stats.order_count > 2 AND stats.item_count >= 3",
        "SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM customers c WHERE c.customer_id IN (SELECT o.customer_id FROM orders o GROUP BY o.customer_id HAVING COUNT(o.order_id) > 2) AND EXISTS (SELECT 1 FROM orders o JOIN order_items i ON o.order_id = i.order_id WHERE o.customer_id = c.customer_id GROUP BY i.order_id HAVING COUNT(i.order_item_id) >= 3)"
      ]
    ]
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "nlq": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
    "infer_predictions": [
      [
        "SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS number_of_products FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code",
        "SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS number_of_products FROM orders AS o INNER JOIN order_items AS oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code",
        "SELECT orders.order_id, orders.order_status_code, COUNT(order_items.product_id) AS number_of_products FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id, orders.order_status_code",
        "SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS number_of_products FROM orders o, order_items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code",
        "SELECT order_id, order_status_code, COUNT(*) AS number_of_products FROM orders JOIN order_items USING(order_id) GROUP BY order_id, order_status_code",
        "SELECT orders.order_id, order_status_code, SUM(CASE WHEN product_id IS NOT NULL THEN 1 ELSE 0 END) AS number_of_products FROM orders LEFT JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id, orders.order_status_code",
        "SELECT o.order_id, o.order_status_code, COUNT(oi.order_item_id) AS number_of_products FROM orders o LEFT JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.product_id IS NOT NULL GROUP BY o.order_id, o.order_status_code",
        "SELECT o.order_id, o.order_status_code, COUNT(*) AS number_of_products FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code",
        "SELECT o.order_id, o.order_status_code, COUNT(oi.order_item_id) AS number_of_products FROM (SELECT * FROM orders) o JOIN (SELECT * FROM order_items) oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code"
      ]
    ]
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "nlq": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
    "infer_predictions": [
      [
        "SELECT o.order_id, o.order_status_code, COUNT(*) AS product_count FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code",
        "SELECT orders.order_id, orders.order_status_code, COUNT(order_items.product_id) AS product_count FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id",
        "SELECT O.order_id, O.order_status_code, COUNT(P.product_id) AS product_count FROM orders O JOIN order_items I ON O.order_id = I.order_id JOIN products P ON I.product_id = P.product_id GROUP BY O.order_id, O.order_status_code",
        "SELECT order_id, order_status_code, (SELECT COUNT(*) FROM order_items WHERE order_items.order_id = orders.order_id) AS product_count FROM orders",
        "SELECT A.order_id, A.order_status_code, (SELECT COUNT(*) FROM order_items B WHERE B.order_id = A.order_id) AS product_count FROM orders A",
        "SELECT order_id, order_status_code, COUNT(DISTINCT product_id) AS product_count FROM orders NATURAL JOIN order_items GROUP BY order_id, order_status_code",
        "SELECT O.order_id, O.order_status_code, (SELECT COUNT(1) FROM order_items I WHERE I.order_id = O.order_id GROUP BY I.order_id) AS product_count FROM orders O",
        "SELECT COUNT(order_items.product_id) AS Number_of_Products, orders.order_id, orders.order_status_code FROM orders LEFT JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id",
        "SELECT order_id, order_status_code, COUNT(order_item_id) AS product_count FROM orders JOIN order_items USING (order_id) GROUP BY order_id, order_status_code",
        "SELECT ord.order_id, ord.order_status_code, COUNT(itm.order_item_id) AS product_count FROM orders ord LEFT OUTER JOIN order_items itm ON ord.order_id = itm.order_id GROUP BY ord.order_id, ord.order_status_code"
      ]
    ]
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "nlq": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT o.date_order_placed FROM orders o WHERE o.date_order_placed = (SELECT MIN(date_order_placed) FROM orders) OR o.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
        "SELECT date_order_placed FROM orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM orders) UNION SELECT o.date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1",
        "SELECT MIN(o.date_order_placed) AS earliest_date FROM orders o UNION SELECT o.date_order_placed FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1",
        "SELECT o.date_order_placed FROM orders o WHERE EXISTS (SELECT 1 FROM orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM orders) AND orders.order_id = o.order_id) OR o.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
        "SELECT o.date_order_placed FROM orders o WHERE o.date_order_placed = (SELECT MIN(date_order_placed) FROM orders) OR EXISTS (SELECT 1 FROM order_items WHERE order_id = o.order_id GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
        "SELECT o.date_order_placed FROM orders o WHERE o.date_order_placed = (SELECT MIN(date_order_placed) FROM orders UNION SELECT date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1))",
        "SELECT o.date_order_placed FROM orders o WHERE o.date_order_placed IN (SELECT MIN(date_order_placed) AS min_date FROM orders UNION SELECT o.date_order_placed FROM orders o WHERE o.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1))",
        "SELECT o.date_order_placed FROM orders o WHERE o.order_id IN (SELECT order_id FROM orders WHERE date_order_placed = (SELECT MIN(date_order_placed) FROM orders) UNION SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
        "SELECT o.date_order_placed FROM orders o WHERE o.date_order_placed IN (SELECT MIN(date_order_placed) FROM orders UNION SELECT date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(order_item_id) > 1)"
      ]
    ]
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "nlq": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT MIN(date_order_placed), date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1) GROUP BY date_order_placed",
        "SELECT (SELECT MIN(date_order_placed) FROM orders) AS earliest_order_date, o.date_order_placed FROM orders o INNER JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(*) > 1) i ON o.order_id = i.order_id",
        "WITH order_counts AS (SELECT order_id, COUNT(order_item_id) AS item_count FROM order_items GROUP BY order_id) SELECT (SELECT MIN(date_order_placed) FROM orders), date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_counts WHERE item_count > 1)",
        "SELECT MIN(o.date_order_placed) AS EarliestOrderDate, o.date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1",
        "SELECT first_table.earliest, grouped_orders.date_order_placed FROM (SELECT MIN(date_order_placed) AS earliest FROM orders) AS first_table CROSS JOIN (SELECT order_id, date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1) GROUP BY date_order_placed) AS grouped_orders",
        "SELECT A.earliest_order, B.date_order_placed FROM (SELECT MIN(date_order_placed) AS earliest_order FROM orders) A, (SELECT date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)) B",
        "SELECT MIN(date_order_placed), date_order_placed FROM orders GROUP BY date_order_placed, order_id HAVING order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)",
        "WITH earliest_date AS (SELECT MIN(date_order_placed) AS date_order_placed FROM orders), multi_item_orders AS (SELECT o.date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1) SELECT earliest_date.date_order_placed, multi_item_orders.date_order_placed FROM earliest_date, multi_item_orders",
        "SELECT DISTINCT (SELECT MIN(date_order_placed) FROM orders) AS earliest_order, o.date_order_placed FROM orders o INNER JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1) p ON o.order_id = p.order_id",
        "SELECT global_min.date_order_placed AS earliest_date, relevant_orders.date_order_placed FROM (SELECT MIN(date_order_placed) AS date_order_placed FROM orders) AS global_min CROSS JOIN (SELECT date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) > 1)) AS relevant_orders"
      ]
    ]
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "nlq": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
    "infer_predictions": [
      [
        "SELECT customer_first_name, customer_middle_initial, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)",
        "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
        "SELECT f.customer_first_name, f.customer_middle_initial, f.customer_last_name FROM customers f WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = f.customer_id)",
        "SELECT ct.customer_first_name, ct.customer_middle_initial, ct.customer_last_name FROM customers ct WHERE ct.customer_id NOT IN (SELECT DISTINCT customer_id FROM orders)",
        "SELECT cust.customer_first_name, cust.customer_middle_initial, cust.customer_last_name FROM customers cust WHERE cust.customer_id NOT IN (SELECT ords.customer_id FROM orders ords)",
        "SELECT first_name.customer_first_name, first_name.customer_middle_initial, first_name.customer_last_name FROM customers first_name LEFT OUTER JOIN orders on_orders ON first_name.customer_id = on_orders.customer_id WHERE on_orders.customer_id IS NULL",
        "SELECT c1.customer_first_name, c1.customer_middle_initial, c1.customer_last_name FROM customers c1 LEFT JOIN orders o1 ON c1.customer_id = o1.customer_id WHERE o1.order_id IS NULL",
        "SELECT distinct_customers.customer_first_name, distinct_customers.customer_middle_initial, distinct_customers.customer_last_name FROM customers distinct_customers WHERE distinct_customers.customer_id NOT IN (SELECT orders.customer_id FROM orders)",
        "SELECT customer_fnames.customer_first_name, customer_fnames.customer_middle_initial, customer_fnames.customer_last_name FROM customers customer_fnames WHERE customer_fnames.customer_id NOT IN (SELECT order_creater.customer_id FROM orders order_creater)",
        "SELECT nf.customer_first_name, nf.customer_middle_initial, nf.customer_last_name FROM customers nf WHERE nf.customer_id NOT IN (SELECT of.customer_id FROM orders of WHERE of.customer_id = nf.customer_id)"
      ]
    ]
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "nlq": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
    "infer_predictions": [
      [
        "SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.customer_id)",
        "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)",
        "SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL",
        "SELECT c1.customer_first_name, c1.customer_last_name, c1.customer_middle_initial FROM customers c1 WHERE c1.customer_id NOT IN (SELECT DISTINCT o1.customer_id FROM orders o1)",
        "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders)",
        "SELECT c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c WHERE NOT EXISTS (SELECT * FROM orders o WHERE o.customer_id = c.customer_id)",
        "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders WHERE order_status_code IS NOT NULL)",
        "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers EXCEPT SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE customer_id IN (SELECT customer_id FROM orders)",
        "SELECT distinct c.customer_first_name, c.customer_last_name, c.customer_middle_initial FROM customers c LEFT OUTER JOIN orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
        "SELECT customer_first_name, customer_last_name, customer_middle_initial FROM customers WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.customer_id = customers.customer_id)"
      ]
    ]
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "nlq": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "gold": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P WHERE P.product_id NOT IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) >= 2)",
        "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P LEFT JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) >= 2) X ON P.product_id = X.product_id WHERE X.product_id IS NULL",
        "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P WHERE NOT EXISTS (SELECT 1 FROM order_items OI WHERE OI.product_id = P.product_id GROUP BY OI.product_id HAVING COUNT(*) >= 2)",
        "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P WHERE (SELECT COUNT(*) FROM order_items OI WHERE OI.product_id = P.product_id) < 2",
        "SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P WHERE P.product_id NOT IN (SELECT OI.product_id FROM order_items OI GROUP BY OI.product_id HAVING COUNT(DISTINCT OI.order_id) >= 2)",
        "SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id NOT IN (SELECT product_id FROM (SELECT product_id, COUNT(order_id) as order_count FROM order_items GROUP BY product_id) WHERE order_count >= 2)",
        "SELECT DISTINCT P.product_id, P.product_name, P.product_price, P.product_color FROM products P EXCEPT SELECT P.product_id, P.product_name, P.product_price, P.product_color FROM products P INNER JOIN order_items O ON P.product_id = O.product_id GROUP BY P.product_id HAVING COUNT(O.order_id) >= 2",
        "SELECT products.product_id, products.product_name, products.product_price, products.product_color FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) >= 2)",
        "SELECT products.product_id, products.product_name, products.product_price, products.product_color FROM products WHERE products.product_id NOT IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) >= 2)",
        "SELECT products.product_id, products.product_name, products.product_price, products.product_color FROM products WHERE (SELECT COUNT(oi.product_id) FROM order_items oi WHERE oi.product_id = products.product_id GROUP BY oi.product_id) < 2"
      ]
    ]
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "nlq": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "gold": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
    "infer_predictions": [
      [
        "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p WHERE (SELECT COUNT(DISTINCT oi.order_id) FROM order_items oi WHERE oi.product_id = p.product_id) < 2",
        "SELECT product_id, product_name, product_price, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2)",
        "SELECT products.product_id, products.product_name, products.product_price, products.product_color FROM products INNER JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2) limitedOrderItems ON products.product_id = limitedOrderItems.product_id",
        "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p WHERE p.product_id IN (SELECT oi.product_id FROM order_items oi GROUP BY oi.product_id HAVING COUNT(DISTINCT oi.order_id) < 2)",
        "SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(DISTINCT oi.order_id) < 2",
        "SELECT pr.product_id, pr.product_name, pr.product_price, pr.product_color FROM products pr JOIN (SELECT order_items.product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2) as grp ON pr.product_id = grp.product_id",
        "SELECT prods.product_id, prods.product_name, prods.product_price, prods.product_color FROM products prods INNER JOIN (SELECT DISTINCT ci.product_id FROM order_items ci GROUP BY ci.product_id HAVING COUNT(DISTINCT ci.order_id) < 2) as cis ON prods.product_id = cis.product_id",
        "SELECT a.product_id, a.product_name, a.product_price, a.product_color FROM products a WHERE (SELECT COUNT(DISTINCT b.order_id) FROM order_items b WHERE a.product_id = b.product_id GROUP BY b.product_id) < 2",
        "SELECT DISTINCT pis.product_id, pis.product_name, pis.product_price, pis.product_color FROM products pis LEFT OUTER JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2) as filteredItems ON pis.product_id = filteredItems.product_id",
        "SELECT z.product_id, z.product_name, z.product_price, z.product_color FROM products z WHERE z.product_id IN (SELECT i.product_id FROM order_items i GROUP BY product_id HAVING COUNT(DISTINCT order_id) < 2)"
      ]
    ]
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "nlq": "Which orders have at least 2 products on it? List the order id and date.",
    "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT distinct o.order_id, o.date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(distinct oi.product_id) >= 2",
        "SELECT o.order_id, o.date_order_placed FROM orders o WHERE o.order_id IN (SELECT oi.order_id FROM order_items oi GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2)",
        "SELECT o.order_id, o.date_order_placed FROM orders o INNER JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2) x ON o.order_id = x.order_id",
        "SELECT orders.order_id, orders.date_order_placed FROM orders WHERE order_id IN (SELECT order_items.order_id FROM order_items GROUP BY order_items.order_id HAVING COUNT(DISTINCT order_items.product_id) >= 2)",
        "SELECT o.order_id, o.date_order_placed FROM orders o WHERE EXISTS (SELECT 1 FROM order_items oi WHERE oi.order_id = o.order_id GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2)",
        "SELECT a.order_id, a.date_order_placed FROM orders a JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2) b ON a.order_id = b.order_id",
        "SELECT distinct orders.order_id, orders.date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id, order_items.product_id HAVING COUNT(order_items.product_id) >= 2",
        "SELECT xoe.order_id, xoe.date_order_placed FROM (SELECT orders.order_id, orders.date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(DISTINCT order_items.product_id) >= 2) AS xoe",
        "SELECT ord.order_id, ord.date_order_placed FROM orders ord WHERE (SELECT COUNT(DISTINCT oi.product_id) FROM order_items oi WHERE oi.order_id = ord.order_id GROUP BY oi.order_id) >= 2"
      ]
    ]
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "nlq": "What are the ids and dates of the orders with at least two products?",
    "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT orders.order_id, date_order_placed FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(DISTINCT product_id) >= 2",
        "SELECT o.order_id, o.date_order_placed FROM orders o WHERE (SELECT COUNT(DISTINCT product_id) FROM order_items WHERE order_id = o.order_id) >= 2",
        "SELECT o.order_id, o.date_order_placed FROM orders o INNER JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2) AS item_counts ON o.order_id = item_counts.order_id",
        "SELECT o.order_id, o.date_order_placed FROM orders o, order_items oi WHERE o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(DISTINCT oi.product_id) >= 2",
        "SELECT order_id, date_order_placed FROM orders WHERE order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
        "SELECT a.order_id, a.date_order_placed FROM orders a JOIN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2) b ON a.order_id = b.order_id",
        "SELECT o.order_id, o.date_order_placed FROM orders o WHERE EXISTS (SELECT 1 FROM order_items oi WHERE o.order_id = oi.order_id GROUP BY oi.order_id HAVING COUNT(DISTINCT oi.product_id) >= 2)",
        "SELECT DISTINCT orders.order_id, orders.date_order_placed FROM orders LEFT JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id HAVING COUNT(DISTINCT order_items.product_id) >= 2",
        "SELECT o.order_id, o.date_order_placed FROM orders o WHERE o.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 2)",
        "SELECT ord.order_id, ord.date_order_placed FROM orders ord INNER JOIN order_items it ON ord.order_id = it.order_id WHERE '1' = '1' GROUP BY ord.order_id HAVING COUNT(DISTINCT it.product_id) >= 2"
      ]
    ]
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "nlq": "Which product are listed in orders most frequently? List the id, product name and price.",
    "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT P.product_id, P.product_name, P.product_price FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id ORDER BY COUNT(OI.product_id) DESC LIMIT 1;",
        "SELECT P.product_id, P.product_name, P.product_price FROM products P, order_items OI WHERE P.product_id = OI.product_id GROUP BY P.product_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "SELECT product_id, product_name, product_price FROM (SELECT P.product_id, P.product_name, P.product_price, COUNT(OI.product_id) AS frequency FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id) AS sub_query ORDER BY frequency DESC LIMIT 1;",
        "SELECT product_id, product_name, product_price FROM products WHERE product_id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1);",
        "SELECT A.product_id, A.product_name, A.product_price FROM (SELECT P.product_id, P.product_name, P.product_price, COUNT(OI.product_id) AS cnt FROM products P INNER JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id) AS A ORDER BY A.cnt DESC LIMIT 1;",
        "SELECT B.product_id, B.product_name, B.product_price FROM (SELECT product_id, COUNT(*) as Total FROM order_items GROUP BY product_id) A JOIN products B ON A.product_id = B.product_id ORDER BY A.Total DESC LIMIT 1;",
        "WITH RankedProducts AS (SELECT P.product_id, P.product_name, P.product_price, RANK() OVER (ORDER BY COUNT(OI.product_id) DESC) as Rank FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id) SELECT product_id, product_name, product_price FROM RankedProducts WHERE Rank = 1;",
        "SELECT products.product_id, product_name, product_price FROM products JOIN (SELECT product_id, COUNT(product_id) as CountProducts FROM order_items GROUP BY product_id ORDER BY CountProducts DESC LIMIT 1) temp ON products.product_id = temp.product_id;"
      ]
    ]
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "nlq": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT P.product_id, P.product_name, P.product_price FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.product_id ORDER BY COUNT(OI.order_item_id) DESC LIMIT 1",
        "SELECT products.product_id, products.product_name, products.product_price FROM products INNER JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id ORDER BY COUNT(order_items.order_item_id) DESC LIMIT 1",
        "SELECT PR.product_id, PR.product_name, PR.product_price FROM products PR, order_items OI WHERE PR.product_id = OI.product_id GROUP BY PR.product_id ORDER BY COUNT(OI.order_item_id) DESC LIMIT 1",
        "SELECT product_id, product_name, product_price FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(product_id) DESC LIMIT 1)",
        "SELECT products.product_id, products.product_name, products.product_price FROM products JOIN (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1) TopProducts ON products.product_id = TopProducts.product_id",
        "SELECT P.product_id, P.product_name, P.product_price FROM products AS P JOIN (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(order_item_id) DESC LIMIT 1) AS FREQ ON P.product_id = FREQ.product_id",
        "SELECT product_id, product_name, product_price FROM (SELECT product_id, COUNT(order_item_id) AS Frequency FROM order_items GROUP BY product_id ORDER BY Frequency DESC LIMIT 1) AS MostOrdered JOIN products USING(product_id)",
        "SELECT P.product_id, P.product_name, P.product_price FROM products P WHERE P.product_id IN (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(order_item_id) DESC LIMIT 1)",
        "SELECT PR.product_id, PR.product_name, PR.product_price FROM (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(order_item_id) DESC LIMIT 1) AS PopProduct INNER JOIN products PR ON PR.product_id = PopProduct.product_id",
        "SELECT P.product_id, P.product_name, P.product_price FROM (SELECT product_id, COUNT(order_item_id) AS CountOrders FROM order_items GROUP BY product_id ORDER BY CountOrders DESC LIMIT 1) TopOrder JOIN products P ON TopOrder.product_id = P.product_id"
      ]
    ]
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "nlq": "Which order have the least sum of the product prices. List the order id and sum.",
    "gold": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT order_id, MIN(sum_price) FROM (SELECT oi.order_id AS order_id, SUM(p.product_price) AS sum_price FROM order_items oi JOIN products p ON oi.product_id = p.product_id GROUP BY oi.order_id) AS Price_SumTable",
        "SELECT priceTable.order_id, MIN(priceTable.sum_prices) FROM (SELECT oi.order_id, SUM(p.product_price) AS sum_prices FROM order_items AS oi INNER JOIN products AS p ON oi.product_id = p.product_id GROUP BY oi.order_id) AS priceTable",
        "SELECT MIN(price_calculations.total_product_price), price_calculations.order_id FROM (SELECT oi.order_id, SUM(p.product_price) AS total_product_price FROM order_items AS oi INNER JOIN products AS p ON p.product_id = oi.product_id GROUP BY oi.order_id) AS price_calculations",
        "SELECT Orders.order_id, MIN(AggregatedTotal.total_price) FROM (SELECT oi.order_id, SUM(p.product_price) AS total_price FROM order_items oi JOIN products p ON oi.product_id = p.product_id GROUP BY oi.order_id) AS AggregatedTotal INNER JOIN orders Orders ON AggregatedTotal.order_id = Orders.order_id",
        "SELECT x.order_id, MIN(x.product_sum) FROM (SELECT oi.order_id AS order_id, SUM(prod.product_price) AS product_sum FROM order_items as oi JOIN products as prod ON oi.product_id = prod.product_id GROUP BY oi.order_id) x",
        "SELECT y.order_id, MIN(y.total_cost) FROM (SELECT order_items.order_id, SUM(products.product_price) AS total_cost FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY order_items.order_id) y",
        "SELECT summed_data.order_id, MIN(summed_data.prices_sum) AS min_price_sum FROM (SELECT oi.order_id AS order_id, TOTAL(p.product_price) AS prices_sum FROM order_items oi LEFT JOIN products p ON oi.product_id = p.product_id GROUP BY oi.order_id) summed_data"
      ]
    ]
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "nlq": "What is the order that total cost the least , and how much is the total cost ?",
    "gold": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
    "infer_predictions": [
      [
        "SELECT o.order_id, MIN(total_cost) FROM (SELECT orders.order_id, SUM(products.product_price) AS total_cost FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id) o",
        "WITH TotalCosts AS (SELECT orders.order_id AS ord_id, SUM(products.product_price) AS total_cost FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id) SELECT ord_id AS order_id, MIN(total_cost) FROM TotalCosts",
        "SELECT order_id, MIN(TotalCost) FROM (SELECT orders.order_id, SUM(products.product_price) AS TotalCost FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id) GROUPED_COSTS",
        "SELECT order_id, MIN(Total_Cost) FROM (SELECT ordrs.order_id, SUM(prduct.product_price) AS Total_Cost FROM orders ordrs JOIN order_items ordr_itms ON ordrs.order_id = ordr_itms.order_id JOIN products prduct ON ordr_itms.product_id = prduct.product_id GROUP BY ordrs.order_id) SUB_TABLE",
        "SELECT ord_rt.order_id, min(ord_rt.total_price) FROM (SELECT o.order_id, sum(p.product_price) AS total_price FROM orders o JOIN order_items i ON o.order_id = i.order_id JOIN products p ON i.product_id = p.product_id GROUP BY o.order_id) ord_rt",
        "WITH CostSummary AS (SELECT orders.order_id, SUM(products.product_price) AS totalPrice FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id) SELECT order_id, MIN(totalPrice) FROM CostSummary"
      ]
    ]
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "nlq": "What is the most popular payment method?",
    "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
        "SELECT payment_method_code, COUNT(payment_method_code) AS cnt FROM customer_payment_methods GROUP BY payment_method_code ORDER BY cnt DESC LIMIT 1",
        "SELECT payment_method_code, MAX(c) FROM (SELECT payment_method_code, COUNT(*) as c FROM customer_payment_methods GROUP BY payment_method_code) GROUPED",
        "SELECT MAX(use_count.payment_method_code) FROM (SELECT payment_method_code, COUNT(*) AS use_count FROM customer_payment_methods GROUP BY payment_method_code) use_count",
        "SELECT payment_method_code FROM (SELECT payment_method_code, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM customer_payment_methods GROUP BY payment_method_code) WHERE rank = 1",
        "SELECT p.payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS TotalUses FROM customer_payment_methods GROUP BY payment_method_code ORDER BY TotalUses DESC) p LIMIT 1",
        "WITH PM_Counts AS (SELECT payment_method_code, COUNT(*) as usage_count FROM customer_payment_methods GROUP BY payment_method_code) SELECT payment_method_code FROM PM_Counts WHERE usage_count = (SELECT MAX(usage_count) FROM PM_Counts)"
      ]
    ]
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "nlq": "What is the payment method that most customers use?",
    "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT MAX(payment_method_code) FROM (SELECT payment_method_code, COUNT(*) as total FROM customer_payment_methods GROUP BY payment_method_code) p",
        "SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1",
        "SELECT payment_method_code FROM customer_payment_methods WHERE customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MAX(c2.usage) FROM (SELECT COUNT(*) AS usage FROM customer_payment_methods GROUP BY payment_method_code) c2)) LIMIT 1",
        "SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code HAVING COUNT(*) = (SELECT max(count_global.use_count) FROM (SELECT payment_method_code, COUNT(*) AS use_count FROM customer_payment_methods GROUP BY payment_method_code) count_global)",
        "WITH count_methods AS (SELECT payment_method_code, COUNT(*) AS ct FROM customer_payment_methods GROUP BY payment_method_code) SELECT payment_method_code FROM count_methods WHERE ct = (SELECT MAX(ct) FROM count_methods)",
        "SELECT payment_method_code FROM customer_payment_methods p1 GROUP BY payment_method_code HAVING COUNT(p1.customer_id) = (SELECT MAX(c.count) FROM (SELECT COUNT(*) as count FROM customer_payment_methods GROUP BY payment_method_code) c)"
      ]
    ]
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "nlq": "How many number of products does each gender of customers buy? List the gender and the number",
    "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
    "infer_predictions": [
      [
        "SELECT customers.gender_code, COUNT(DISTINCT products.product_id) AS num_products FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customers.gender_code",
        "SELECT c.gender_code, COUNT(DISTINCT p.product_id) AS product_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY c.gender_code",
        "SELECT c.gender_code, COUNT(DISTINCT p.product_id) AS total_products FROM customers c, orders o, order_items oi, products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY c.gender_code",
        "SELECT gender FROM (SELECT DISTINCT c.gender_code as gender, p.product_id FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN products p ON oi.product_id = p.product_id) GROUP BY gender",
        "SELECT c.gender_code AS Gender, COUNT(DISTINCT p.product_id) FROM customers c, orders o, order_items oi, products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY c.gender_code"
      ]
    ]
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "nlq": "How many products does each gender buy?",
    "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
    "infer_predictions": [
      [
        "SELECT customers.gender_code, COUNT(products.product_id) FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customers.gender_code",
        "SELECT c.gender_code, COUNT(p.product_id) FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY c.gender_code",
        "SELECT gene.gender_code, COUNT(prod.product_id) AS product_count FROM customers gene, orders ord, order_items itm, products prod WHERE gene.customer_id = ord.customer_id AND ord.order_id = itm.order_id AND itm.product_id = prod.product_id GROUP BY gene.gender_code",
        "SELECT g.gender_code, COUNT(DISTINCT pr.product_id) AS total_products FROM customers g LEFT JOIN orders o ON g.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN products pr ON oi.product_id = pr.product_id GROUP BY g.gender_code",
        "SELECT c.gender_code, COUNT(*) AS product_count FROM customers c, orders o, order_items oi, products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY c.gender_code",
        "SELECT gender_code, COUNT(product_id) FROM (SELECT customers.gender_code, products.product_id FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id) GROUP BY gender_code",
        "SELECT C.gender_code, COUNT(P.product_id) FROM products P JOIN order_items OI ON P.product_id = OI.product_id JOIN orders O ON O.order_id = OI.order_id JOIN customers C ON C.customer_id = O.customer_id GROUP BY C.gender_code",
        "SELECT cust.gender_code, COUNT(prdct.product_id) AS product_count FROM customers cust JOIN orders ord ON cust.customer_id = ord.customer_id JOIN order_items itm ON ord.order_id = itm.order_id JOIN products prdct ON itm.product_id = prdct.product_id GROUP BY cust.gender_code",
        "SELECT customer_gender.gender_code, COUNT(user_products.product_id) AS product_counts FROM customers customer_gender JOIN orders user_orders ON customer_gender.customer_id = user_orders.customer_id JOIN order_items user_order_items ON user_orders.order_id = user_order_items.order_id JOIN products user_products ON user_order_items.product_id = user_products.product_id GROUP BY customer_gender.gender_code"
      ]
    ]
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "nlq": "How many orders has each gender of customers placed?",
    "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
    "infer_predictions": [
      [
        "SELECT gender_code, COUNT(DISTINCT orders.order_id) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code",
        "SELECT cus.gender_code, COUNT(DISTINCT ord.order_id) AS total_orders FROM customers cus INNER JOIN orders ord ON cus.customer_id = ord.customer_id GROUP BY cus.gender_code",
        "SELECT c.gender_code, COUNT(DISTINCT o.order_id) AS order_count FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code",
        "SELECT gender_code, COUNT(*) FROM (SELECT DISTINCT orders.order_id, customers.gender_code FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id) GROUP BY gender_code",
        "SELECT customers.gender_code, COUNT(orders.order_id) AS orders_placed FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code",
        "SELECT c.gender_code, COUNT(o.order_id) FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code",
        "SELECT gender_code, COUNT(order_id) FROM customers JOIN orders USING(customer_id) GROUP BY gender_code",
        "SELECT ct.gender_code, COUNT(od.order_id) FROM customers ct INNER JOIN orders od ON ct.customer_id = od.customer_id GROUP BY ct.gender_code",
        "SELECT DISTINCT 'male' AS gender_code, (SELECT COUNT(*) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.gender_code = 'male') AS total_male_orders, 'female' AS gender_code, (SELECT COUNT(*) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.gender_code = 'female') AS total_female_orders FROM orders",
        "SELECT gender_code, COUNT(DISTINCT ord_id) FROM (SELECT gender_code, orders.order_id AS ord_id FROM customers JOIN orders ON customers.customer_id = orders.customer_id) GROUP BY gender_code"
      ]
    ]
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "nlq": "How many orders has each gender placed?",
    "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
    "infer_predictions": [
      [
        "SELECT gender_code, COUNT(order_id) AS orders_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code",
        "SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM customers c INNER JOIN orders o USING (customer_id) GROUP BY c.gender_code",
        "SELECT gender_code, COUNT(*) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code",
        "SELECT gender_code, COUNT(orders.order_id) FROM customers JOIN orders USING (customer_id) GROUP BY customers.gender_code",
        "SELECT gender_code, COUNT(order_id) FROM orders JOIN customers ON customers.customer_id = orders.customer_id GROUP BY gender_code",
        "SELECT gender_code, COUNT(orders.order_id) AS order_count FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code",
        "SELECT customers.gender_code, COUNT(orders.order_id) FROM customers, orders WHERE customers.customer_id = orders.customer_id GROUP BY customers.gender_code",
        "SELECT DISTINCT gender_code, COUNT(orders.order_id) OVER (PARTITION BY gender_code) FROM customers JOIN orders ON customers.customer_id = orders.customer_id",
        "SELECT customers.gender_code, COUNT(order_id) AS order_count FROM orders INNER JOIN customers ON customers.customer_id = orders.customer_id GROUP BY customers.gender_code"
      ]
    ]
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "nlq": "List the customers' first name, middle initial, last name and payment methods.",
    "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
    "infer_predictions": [
      [
        "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, pm.payment_method_code FROM customers c JOIN customer_payment_methods pm ON c.customer_id = pm.customer_id",
        "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM customers INNER JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id",
        "SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, cust_pm.payment_method_code FROM customers, customer_payment_methods cust_pm WHERE customers.customer_id = cust_pm.customer_id",
        "SELECT first_name, middle_initial, last_name, method_code FROM (SELECT customer_first_name AS first_name, customer_middle_initial AS middle_initial, customer_last_name AS last_name, customer_id FROM customers) AS cust LEFT JOIN (SELECT payment_method_code AS method_code, customer_id FROM customer_payment_methods) AS paym ON cust.customer_id = paym.customer_id",
        "SELECT DISTINCT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM customers c, customer_payment_methods p WHERE c.customer_id = p.customer_id",
        "SELECT c.customer_first_name AS First, c.customer_middle_initial AS MI, c.customer_last_name AS Last, pm.payment_method_code AS PaymentMethod FROM customers c, customer_payment_methods pm WHERE c.customer_id = pm.customer_id",
        "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM customers, customer_payment_methods WHERE customers.customer_id = customer_payment_methods.customer_id",
        "SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, customer_payment_methods.payment_method_code FROM customers JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id ORDER BY customers.customer_last_name"
      ]
    ]
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "nlq": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
    "infer_predictions": [
      [
        "SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM customers c JOIN customer_payment_methods p ON c.customer_id = p.customer_id",
        "SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM customers INNER JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id",
        "SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, customer_payment_methods.payment_method_code FROM customers, customer_payment_methods WHERE customers.customer_id = customer_payment_methods.customer_id",
        "SELECT first.customer_first_name, first.customer_middle_initial, first.customer_last_name, second.payment_method_code FROM customers first INNER JOIN customer_payment_methods second ON first.customer_id = second.customer_id",
        "SELECT c.customer_first_name as FirstName, c.customer_middle_initial as MiddleInitial, c.customer_last_name as LastName, p.payment_method_code as PaymentMethod FROM customers c, customer_payment_methods p WHERE c.customer_id = p.customer_id",
        "SELECT c1.customer_first_name, c1.customer_middle_initial, c1.customer_last_name, cp.payment_method_code FROM customers c1 LEFT JOIN customer_payment_methods cp ON c1.customer_id = cp.customer_id",
        "SELECT a.customer_first_name, a.customer_middle_initial, a.customer_last_name, b.payment_method_code FROM customers a JOIN customer_payment_methods b ON a.customer_id = b.customer_id",
        "SELECT cust.customer_first_name, cust.customer_middle_initial, cust.customer_last_name, pay.payment_method_code FROM customers cust INNER JOIN customer_payment_methods pay ON cust.customer_id = pay.customer_id",
        "SELECT person.customer_first_name, person.customer_middle_initial, person.customer_last_name, payment.payment_method_code FROM customers AS person JOIN customer_payment_methods AS payment ON person.customer_id = payment.customer_id"
      ]
    ]
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "nlq": "List the invoices' status, date and the date of shipment.",
    "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
    "infer_predictions": [
      [
        "SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices JOIN shipments ON invoices.invoice_number = shipments.invoice_number",
        "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM invoices AS i INNER JOIN shipments AS s ON i.invoice_number = s.invoice_number",
        "SELECT iv.invoice_status_code, iv.invoice_date, sh.shipment_date FROM invoices iv, shipments sh WHERE iv.invoice_number = sh.invoice_number",
        "SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices, shipments WHERE invoices.invoice_number = shipments.invoice_number",
        "SELECT inv.invoice_status_code, inv.invoice_date, shp.shipment_date FROM invoices inv JOIN shipments shp ON inv.invoice_number = shp.invoice_number",
        "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM invoices i, shipments s WHERE i.invoice_number = s.invoice_number",
        "SELECT DISTINCT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices INNER JOIN shipments ON invoices.invoice_number = shipments.invoice_number",
        "SELECT iv.invoice_status_code AS Status, iv.invoice_date AS InvoiceDate, sh.shipment_date AS ShipmentDate FROM invoices iv JOIN shipments sh ON iv.invoice_number = sh.invoice_number",
        "SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM invoices i INNER JOIN shipments s USING (invoice_number)",
        "SELECT inv.invoice_status_code, inv.invoice_date, shp.shipment_date FROM invoices inv INNER JOIN shipments shp USING (invoice_number)"
      ]
    ]
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "nlq": "What are the statuses, dates, and shipment dates for all invoices?",
    "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
    "infer_predictions": [
      [
        "SELECT I.invoice_status_code, I.invoice_date, S.shipment_date FROM invoices I JOIN shipments S ON I.invoice_number = S.invoice_number",
        "SELECT invoice_status_code, invoice_date, shipment_date FROM invoices INNER JOIN shipments USING (invoice_number)",
        "SELECT invoice_status_code, invoices.invoice_date, shipment_date FROM invoices, shipments WHERE invoices.invoice_number = shipments.invoice_number",
        "SELECT A.invoice_status_code, A.invoice_date, B.shipment_date FROM invoices A, shipments B WHERE A.invoice_number = B.invoice_number",
        "SELECT invoice_status_code, invoice_date, (SELECT shipment_date FROM shipments WHERE shipments.invoice_number = invoices.invoice_number) AS shipment_date FROM invoices",
        "SELECT DISTINCT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices, shipments WHERE invoices.invoice_number = shipments.invoice_number",
        "SELECT S.invoice_status_code, S.invoice_date, shipment_date FROM (SELECT invoice_number, invoice_status_code, invoice_date FROM invoices) S INNER JOIN shipments ON S.invoice_number = shipments.invoice_number",
        "SELECT I.invoice_status_code, I.invoice_date, (SELECT shipment_date FROM shipments WHERE shipments.invoice_number = I.invoice_number) FROM invoices I",
        "SELECT A.invoice_status_code, A.invoice_date, B.shipment_date FROM (SELECT invoice_number, invoice_status_code, invoice_date FROM invoices) A LEFT JOIN shipments B ON A.invoice_number = B.invoice_number",
        "SELECT T.invoice_status_code, T.invoice_date, shipment_date FROM shipments JOIN (SELECT invoice_number, invoice_status_code, invoice_date FROM invoices) T ON shipments.invoice_number = T.invoice_number"
      ]
    ]
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "nlq": "List the names of the products being shipped and the corresponding shipment date.",
    "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "infer_predictions": [
      [
        "SELECT p.product_name, s.shipment_date FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id",
        "SELECT DISTINCT product_name, shipment_date FROM products INNER JOIN order_items ON products.product_id = order_items.product_id INNER JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id INNER JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id",
        "SELECT product_name, shipment_date FROM products p, order_items oi, shipment_items si, shipments s WHERE p.product_id = oi.product_id AND oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id",
        "SELECT p.product_name, s.shipment_date FROM shipments s, shipment_items si, order_items oi, products p WHERE s.shipment_id = si.shipment_id AND si.order_item_id = oi.order_item_id AND oi.product_id = p.product_id",
        "SELECT product_name, shipment_date FROM products JOIN order_items USING(product_id) JOIN shipment_items USING(order_item_id) JOIN shipments USING(shipment_id)",
        "SELECT product_name AS 'Product Name', shipment_date AS 'Shipment Date' FROM products CROSS JOIN order_items ON products.product_id = order_items.product_id CROSS JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id CROSS JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id",
        "SELECT products.product_name, shipments.shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id",
        "SELECT p.product_name AS Product, sh.shipment_date AS Date FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipment_items si ON oi.order_item_id = si.order_item_id INNER JOIN shipments sh ON si.shipment_id = sh.shipment_id",
        "SELECT product_name, shipment_date FROM products, order_items, shipment_items, shipments WHERE products.product_id = order_items.product_id AND order_items.order_item_id = shipment_items.order_item_id AND shipment_items.shipment_id = shipments.shipment_id"
      ]
    ]
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "nlq": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "infer_predictions": [
      [
        "SELECT p.product_name, s.shipment_date FROM products p JOIN shipments s ON p.product_id = s.order_id",
        "SELECT products.product_name, shipments.shipment_date FROM products INNER JOIN shipments ON products.product_id = shipments.order_id",
        "SELECT DISTINCT product_name, shipment_date FROM products, shipments WHERE products.product_id = shipments.order_id",
        "SELECT p.product_name, s.shipment_date FROM products AS p, shipments AS s WHERE p.product_id = s.order_id",
        "SELECT product_name, shipment_date FROM products CROSS JOIN shipments WHERE products.product_id = shipments.order_id",
        "SELECT p.product_name, s.shipment_date FROM shipments s JOIN products p ON p.product_id = s.order_id",
        "SELECT a.product_name, b.shipment_date FROM products a, shipments b WHERE a.product_id = b.order_id",
        "SELECT products.product_name, shipments.shipment_date FROM products JOIN shipments ON products.product_id = shipments.order_id",
        "SELECT p.product_name, s.shipment_date FROM products p INNER JOIN shipments s ON p.product_id = s.order_id"
      ]
    ]
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "nlq": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
    "infer_predictions": [
      [
        "SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipments ON order_items.order_id = shipments.order_id",
        "SELECT DISTINCT a.order_item_status_code, b.shipment_tracking_number FROM order_items AS a INNER JOIN shipments AS b ON a.order_id = b.order_id",
        "SELECT order_item_status_code, shipment_tracking_number FROM order_items, shipments WHERE order_items.order_id = shipments.order_id",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi, shipments s WHERE oi.order_id = s.order_id",
        "SELECT a.order_item_status_code, b.shipment_tracking_number FROM order_items a, shipments b WHERE a.order_id = b.order_id",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi INNER JOIN shipments s ON oi.order_id = s.order_id",
        "SELECT order_item_status_code, shipment_tracking_number FROM order_items JOIN shipments USING(order_id)",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi CROSS JOIN shipments s ON oi.order_id = s.order_id",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM shipments s JOIN order_items oi USING(order_id)"
      ]
    ]
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "nlq": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN orders ON order_items.order_id = orders.order_id JOIN shipments ON orders.order_id = shipments.order_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id",
        "SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items INNER JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id INNER JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id",
        "SELECT DISTINCT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi, shipments s, shipment_items si WHERE oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id",
        "SELECT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi CROSS JOIN shipments s JOIN shipment_items si ON oi.order_item_id = si.order_item_id WHERE si.shipment_id = s.shipment_id",
        "SELECT order_item_status_code, shipment_tracking_number FROM order_items, shipments WHERE order_items.order_id IN (SELECT order_id FROM shipments) AND order_items.order_item_id IN (SELECT order_item_id FROM shipment_items)",
        "SELECT DISTINCT oi.order_item_status_code, s.shipment_tracking_number FROM order_items oi JOIN orders o ON oi.order_id = o.order_id JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON o.order_id = s.order_id",
        "SELECT oi.order_item_status_code AS Status, s.shipment_tracking_number AS Tracking FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id",
        "SELECT order_item_status_code, shipment_tracking_number FROM (SELECT order_item_status_code, shipment_tracking_number, order_items.order_item_id FROM order_items JOIN shipments ON order_items.order_id = shipments.order_id) AS subquery JOIN shipment_items ON subquery.order_item_id = shipment_items.order_item_id",
        "SELECT DISTINCT order_item_status_code, shipment_tracking_number FROM shipment_items si, order_items oi, shipments s WHERE oi.order_item_id = si.order_item_id AND si.shipment_id = s.shipment_id AND oi.order_id = s.order_id"
      ]
    ]
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "nlq": "What is the product name and the color of the ordered items which have been shipped?",
    "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT pr.product_name, pr.product_color FROM products pr JOIN order_items oi ON pr.product_id = oi.product_id JOIN shipment_items si ON oi.order_item_id = si.order_item_id",
        "SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))",
        "SELECT pr.product_name, pr.product_color FROM products pr WHERE EXISTS (SELECT 1 FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id WHERE pr.product_id = oi.product_id)",
        "SELECT DISTINCT product_name, product_color FROM order_items INNER JOIN products ON order_items.product_id = products.product_id WHERE order_item_id IN (SELECT order_item_id FROM shipment_items)",
        "SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items oi INNER JOIN shipment_items si ON oi.order_item_id = si.order_item_id)",
        "SELECT DISTINCT pr.product_name, pr.product_color FROM products pr, order_items oi, shipment_items si WHERE pr.product_id = oi.product_id AND oi.order_item_id = si.order_item_id",
        "SELECT DISTINCT product_name, product_color FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id",
        "SELECT product_name, product_color FROM products pr INNER JOIN (SELECT DISTINCT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items)) tmp ON pr.product_id = tmp.product_id",
        "SELECT DISTINCT pr.product_name, pr.product_color FROM (SELECT * FROM shipment_items JOIN order_items ON shipment_items.order_item_id = order_items.order_item_id) sj JOIN products pr ON sj.product_id = pr.product_id"
      ]
    ]
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "nlq": "What are the names and colors of all products that have been shipped?",
    "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.product_name, p.product_color FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id",
        "SELECT DISTINCT product_name, product_color FROM products INNER JOIN order_items ON products.product_id = order_items.product_id INNER JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id",
        "SELECT DISTINCT products.product_name, products.product_color FROM products, order_items, shipment_items WHERE products.product_id = order_items.product_id AND order_items.order_item_id = shipment_items.order_item_id",
        "SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))",
        "SELECT DISTINCT products.product_name, products.product_color FROM shipments INNER JOIN shipment_items ON shipments.shipment_id = shipment_items.shipment_id INNER JOIN order_items ON shipment_items.order_item_id = order_items.order_item_id INNER JOIN products ON order_items.product_id = products.product_id",
        "SELECT DISTINCT p.product_name, p.product_color FROM products p INNER JOIN (SELECT oi.product_id FROM order_items oi INNER JOIN shipment_items si ON oi.order_item_id = si.order_item_id) AS ShippedProducts ON p.product_id = ShippedProducts.product_id",
        "SELECT DISTINCT p.product_name, p.product_color FROM products p WHERE EXISTS (SELECT 1 FROM shipment_items si INNER JOIN order_items oi ON si.order_item_id = oi.order_item_id WHERE oi.product_id = p.product_id)",
        "SELECT DISTINCT product_name, product_color FROM products WHERE EXISTS (SELECT 1 FROM order_items JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id WHERE products.product_id = order_items.product_id)",
        "SELECT product_name, product_color FROM products WHERE product_id IN (SELECT product_id FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id)",
        "SELECT products.product_name, products.product_color FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.order_item_id IN (SELECT order_item_id FROM shipment_items)"
      ]
    ]
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "nlq": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM products p WHERE product_id IN (SELECT product_id FROM invoices NATURAL JOIN customers WHERE gender_code = 'Female')"
      ]
    ]
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "nlq": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM products AS p JOIN customer_payment_methods AS cpm ON p.product_id = cpm.customer_id JOIN customers AS c ON c.customer_id = cpm.customer_id WHERE c.gender_code = 'Female'",
        "SELECT DISTINCT pr.product_name, pr.product_price, pr.product_description FROM products pr WHERE EXISTS (SELECT 1 FROM customers c INNER JOIN customer_payment_methods cpm ON c.customer_id = cpm.customer_id WHERE c.gender_code = 'Female' AND cpm.customer_id = pr.product_id)",
        "SELECT DISTINCT prod.product_name, prod.product_price, prod.product_description FROM customers cust JOIN customer_payment_methods pay ON cust.customer_id = pay.customer_id JOIN products prod ON prod.product_id = pay.customer_id WHERE cust.gender_code = 'Female'",
        "SELECT DISTINCT pl.product_name, pl.product_price, pl.product_description FROM products AS pl WHERE pl.product_id IN (SELECT prd.product_id FROM products prd INNER JOIN customer_payment_methods cpm ON prd.product_id = cpm.customer_id INNER JOIN customers cstm ON cstm.customer_id = cpm.customer_id WHERE cstm.gender_code = 'Female')",
        "SELECT DISTINCT prodDetails.product_name, prodDetails.product_price, prodDetails.product_description FROM customer_payment_methods cm JOIN customers cs ON cs.customer_id = cm.customer_id AND cs.gender_code = 'Female' JOIN products prodDetails ON cm.customer_id = prodDetails.product_id",
        "SELECT DISTINCT pds.product_name, pds.product_price, pds.product_description FROM customer_payment_methods payMethod INNER JOIN customers femCustomer ON femCustomer.customer_id = payMethod.customer_id INNER JOIN products pds ON pds.product_id = payMethod.customer_id WHERE femCustomer.gender_code = 'Female'",
        "SELECT DISTINCT prod.product_name, prod.product_price, prod.product_description FROM products AS prod JOIN (SELECT customer_id FROM customers WHERE gender_code = 'Female') valid_customers ON prod.product_id = valid_customers.customer_id",
        "SELECT DISTINCT pname.product_name, pname.product_price, pname.product_description FROM products AS pname INNER JOIN (SELECT customer_id FROM customers WHERE gender_code = 'Female') fwomen ON pname.product_id = fwomen.customer_id"
      ]
    ]
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "nlq": "What are invoices status of all the orders which have not been shipped?",
    "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
    "infer_predictions": [
      [
        "SELECT inv.invoice_status_code FROM invoices inv WHERE inv.invoice_number NOT IN (SELECT sh.invoice_number FROM shipments sh)",
        "SELECT invoice_status_code FROM invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM shipments)",
        "SELECT DISTINCT i.invoice_status_code FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL",
        "SELECT i.invoice_status_code FROM invoices i WHERE NOT EXISTS (SELECT 1 FROM shipments s WHERE s.invoice_number = i.invoice_number)",
        "SELECT i.invoice_status_code FROM invoices i EXCEPT SELECT i.invoice_status_code FROM invoices i, shipments s WHERE i.invoice_number = s.invoice_number",
        "SELECT invoice_status_code FROM invoices EXCEPT SELECT invoice_status_code FROM invoices INNER JOIN shipments ON invoices.invoice_number = shipments.invoice_number",
        "SELECT i.invoice_status_code FROM invoices i LEFT OUTER JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL",
        "SELECT i.invoice_status_code FROM invoices i WHERE i.invoice_number NOT IN (SELECT s.invoice_number FROM shipments s)",
        "SELECT invoice_status_code FROM invoices WHERE invoice_number NOT IN (SELECT DISTINCT invoice_number FROM shipments)",
        "SELECT inv.invoice_status_code FROM invoices inv LEFT JOIN shipments sh ON inv.invoice_number = sh.invoice_number WHERE sh.shipment_id IS NULL"
      ]
    ]
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "nlq": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
    "infer_predictions": [
      [
        "SELECT inv.invoice_status_code FROM invoices inv WHERE inv.invoice_number NOT IN (SELECT sh.invoice_number FROM shipments sh)",
        "SELECT invoice_status_code FROM invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM shipments)",
        "SELECT DISTINCT i.invoice_status_code FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL",
        "SELECT i.invoice_status_code FROM invoices i WHERE NOT EXISTS (SELECT 1 FROM shipments s WHERE s.invoice_number = i.invoice_number)",
        "SELECT DISTINCT invoice_status_code FROM invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM shipments GROUP BY invoice_number)",
        "SELECT invoice_status_code FROM invoices EXCEPT SELECT i.invoice_status_code FROM invoices i, shipments s WHERE i.invoice_number = s.invoice_number",
        "SELECT inv.invoice_status_code FROM invoices inv WHERE NOT EXISTS (SELECT 1 FROM shipments sh WHERE sh.invoice_number = inv.invoice_number)",
        "SELECT inv.invoice_status_code FROM invoices inv LEFT OUTER JOIN shipments s ON inv.invoice_number = s.invoice_number WHERE s.invoice_number IS NULL",
        "SELECT inv.invoice_status_code FROM invoices inv WHERE inv.invoice_number NOT IN (SELECT sh.invoice_number FROM shipments sh WHERE sh.shipment_id IS NOT NULL)",
        "SELECT DISTINCT invoice_status_code FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_status_code HAVING COUNT(s.shipment_id) = 0"
      ]
    ]
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "nlq": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "gold": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
    "infer_predictions": [
      [
        "SELECT o.order_id, o.date_order_placed AS date, SUM(p.product_price) AS total_cost FROM orders AS o JOIN order_items AS oi ON o.order_id = oi.order_id JOIN products AS p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
        "SELECT orders.order_id, orders.date_order_placed AS date, SUM(products.product_price) AS total_cost FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id, orders.date_order_placed",
        "SELECT ord.order_id, ord.date_order_placed AS date, SUM(prod.product_price) AS total_cost FROM orders AS ord JOIN order_items AS oitm ON ord.order_id = oitm.order_id JOIN products AS prod ON oitm.product_id = prod.product_id GROUP BY ord.order_id, ord.date_order_placed",
        "SELECT order_id, date_order_placed AS date, SUM(product_price) AS total_cost FROM orders JOIN order_items USING(order_id) JOIN products USING(product_id) GROUP BY order_id, date_order_placed",
        "SELECT o.order_id, o.date_order_placed AS date_order, SUM(pr.product_price) AS total_order_cost FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products pr ON oi.product_id = pr.product_id GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed AS date_of_order, SUM(p.product_price) AS cost_of_order FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed AS order_date, TOTAL(p.product_price) AS total_price FROM orders o, order_items oi, products p WHERE o.order_id = oi.order_id AND oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed as ordered_date, TOTAL(product_price) as total_amount FROM orders AS o JOIN order_items AS oi ON o.order_id = oi.order_id JOIN products AS p ON p.product_id = oi.product_id GROUP BY o.order_id",
        "SELECT ord.order_id, ord.date_order_placed AS order_date, sum(prdt.product_price) AS total_price FROM orders AS ord INNER JOIN order_items AS ord_items ON ord.order_id = ord_items.order_id INNER JOIN products AS prdt ON ord_items.product_id = prdt.product_id GROUP BY ord.order_id, ord.date_order_placed",
        "SELECT orders.order_id, date_order_placed AS order_date, SUM(product_price) AS calculated_total FROM orders JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY orders.order_id, date_order_placed"
      ]
    ]
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "nlq": "For each order, what is its id, date, and total amount paid?",
    "gold": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
    "infer_predictions": [
      [
        "SELECT o.order_id, o.date_order_placed AS date, SUM(oi.order_item_id) AS total_amount_paid FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE EXISTS (SELECT 1 FROM invoices i JOIN shipments s ON i.invoice_number = s.invoice_number WHERE s.order_id = o.order_id AND i.invoice_status_code = 'Paid') GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed, SUM(oi.order_item_id) FROM orders o INNER JOIN order_items oi ON oi.order_id = o.order_id INNER JOIN shipments s ON s.order_id = o.order_id INNER JOIN invoices i ON s.invoice_number = i.invoice_number AND i.invoice_status_code = 'Paid' GROUP BY o.order_id, o.date_order_placed",
        "SELECT orders.order_id, orders.date_order_placed, SUM(order_items.order_item_id) FROM orders JOIN order_items ON orders.order_id = order_items.order_id WHERE orders.order_id IN (SELECT shipments.order_id FROM shipments JOIN invoices ON shipments.invoice_number = invoices.invoice_number WHERE invoices.invoice_status_code = 'Paid') GROUP BY orders.order_id, orders.date_order_placed",
        "SELECT o.order_id, o.date_order_placed, SUM(oi.order_item_id) as TotalPaid FROM orders o, order_items oi, shipments s, invoices i WHERE o.order_id = oi.order_id AND o.order_id = s.order_id AND s.invoice_number = i.invoice_number AND i.invoice_status_code = 'Paid' GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed, (SELECT SUM(order_item_id) FROM order_items WHERE order_id = o.order_id) AS total_amount_paid FROM orders o WHERE EXISTS (SELECT 1 FROM shipments INNER JOIN invoices ON shipments.invoice_number = invoices.invoice_number WHERE shipments.order_id = o.order_id AND invoices.invoice_status_code = 'Paid') GROUP BY o.order_id, o.date_order_placed",
        "SELECT o.order_id, o.date_order_placed, (SELECT SUM(order_items.order_item_id) FROM order_items WHERE order_items.order_id = o.order_id GROUP BY order_items.order_id) AS total_amount_paid FROM orders o JOIN invoices i ON i.invoice_number IN (SELECT invoice_number FROM shipments WHERE order_id = o.order_id AND invoice_status_code = 'Paid')",
        "SELECT orders.order_id, orders.date_order_placed, IFNULL((SELECT SUM(order_item_id) FROM order_items WHERE order_id = orders.order_id), 0) AS total_amount_paid FROM orders LEFT JOIN shipments ON orders.order_id = shipments.order_id LEFT JOIN invoices ON shipments.invoice_number = invoices.invoice_number AND invoices.invoice_status_code = 'Paid' GROUP BY orders.order_id, orders.date_order_placed",
        "SELECT order_id, date_order_placed, (SELECT SUM(order_items.order_item_id) FROM order_items WHERE order_items.order_id = orders.order_id) FROM orders WHERE order_id IN (SELECT shipments.order_id FROM shipments JOIN invoices ON shipments.invoice_number = invoices.invoice_number WHERE invoices.invoice_status_code = 'Paid')",
        "SELECT o.order_id, o.date_order_placed, (SELECT SUM(order_item_id) FROM order_items oi WHERE oi.order_id = o.order_id) AS amount_paid FROM orders o WHERE o.order_id IN (SELECT s.order_id FROM shipments s JOIN invoices i ON s.invoice_number = i.invoice_number WHERE i.invoice_status_code = 'Paid') GROUP BY o.order_id, o.date_order_placed",
        "SELECT order_id, date_order_placed, total_amount_paid FROM (SELECT o.order_id, o.date_order_placed, SUM(oi.order_item_id) as total_amount_paid FROM orders o INNER JOIN order_items oi ON o.order_id = oi.order_id WHERE EXISTS (SELECT 1 FROM shipments s JOIN invoices i ON s.invoice_number = i.invoice_number WHERE s.order_id = o.order_id AND i.invoice_status_code = 'Paid') GROUP BY o.order_id, o.date_order_placed) SUB"
      ]
    ]
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "nlq": "How many customers have placed any order?",
    "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT o.customer_id) FROM orders o;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM orders);",
        "SELECT COUNT(*) FROM (SELECT customer_id FROM orders GROUP BY customer_id);",
        "SELECT COUNT(DISTINCT customer_id) FROM orders;",
        "SELECT SUM(1) FROM (SELECT DISTINCT o.customer_id FROM orders o);",
        "SELECT COUNT(DISTINCT customer_id) AS customer_count FROM orders WHERE customer_id IS NOT NULL;",
        "SELECT COUNT(*) FROM (SELECT 1 FROM orders GROUP BY customer_id);",
        "SELECT COUNT(d.customer_id) FROM (SELECT DISTINCT customer_id FROM orders) AS d;"
      ]
    ]
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "nlq": "How many different customers have ordered things?",
    "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT customer_id) FROM orders",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM orders)",
        "SELECT COUNT(DISTINCT o.customer_id) FROM orders o",
        "SELECT COUNT(*) FROM (SELECT customer_id FROM orders GROUP BY customer_id)",
        "SELECT COUNT(DISTINCT customer_id) FROM orders WHERE order_id IS NOT NULL",
        "SELECT COUNT(DISTINCT o.customer_id) FROM orders o WHERE o.order_id IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM orders WHERE order_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "nlq": "How many item states are there in the orders?",
    "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT order_item_status_code) FROM order_items",
        "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM order_items)",
        "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM order_items GROUP BY order_item_status_code)",
        "SELECT COUNT(*) AS total_states FROM (SELECT DISTINCT order_item_status_code FROM order_items)",
        "SELECT COUNT(DISTINCT o.order_item_status_code) FROM order_items o",
        "SELECT COUNT(DISTINCT order_item_status_code) FROM (SELECT order_item_status_code FROM order_items)"
      ]
    ]
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "nlq": "How many different item status codes are there listed in ordered items?",
    "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT order_item_status_code) FROM order_items",
        "SELECT COUNT(*) FROM (SELECT DISTINCT order_item_status_code FROM order_items)",
        "SELECT COUNT(distinct_status) FROM (SELECT DISTINCT order_item_status_code AS distinct_status FROM order_items)",
        "WITH UniqueStatus AS (SELECT DISTINCT order_item_status_code FROM order_items) SELECT COUNT(order_item_status_code) FROM UniqueStatus",
        "SELECT DISTINCT COUNT(order_item_status_code) FROM order_items GROUP BY order_item_status_code",
        "SELECT COUNT(*) FROM (SELECT order_item_status_code FROM order_items GROUP BY order_item_status_code)",
        "WITH DistinctStatuses AS (SELECT order_item_status_code FROM order_items GROUP BY order_item_status_code) SELECT COUNT(*) FROM DistinctStatuses",
        "SELECT COUNT(DISTINCT oi.order_item_status_code) FROM order_items oi",
        "SELECT COUNT(*) FROM (SELECT order_item_status_code AS status FROM order_items GROUP BY status)"
      ]
    ]
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "nlq": "How many different payment methods are there?",
    "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM customer_payment_methods);",
        "SELECT SUM(DISTINCT_FLAG) FROM (SELECT 1 AS DISTINCT_FLAG FROM customer_payment_methods GROUP BY payment_method_code);",
        "SELECT COUNT(DISTINCT payment_method_code) AS Number_of_Payment_Methods FROM customer_payment_methods;",
        "SELECT COUNT(payment_method_code) FROM (SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT p.payment_method_code FROM customer_payment_methods p);",
        "SELECT DISTINCT COUNT(*) OVER () FROM customer_payment_methods GROUP BY payment_method_code;",
        "SELECT COUNT(DISTINCT cpm.payment_method_code) FROM customer_payment_methods cpm;"
      ]
    ]
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "nlq": "How many different payment methods can customers choose from?",
    "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods",
        "SELECT COUNT(*) FROM (SELECT DISTINCT payment_method_code FROM customer_payment_methods)",
        "SELECT COUNT(DISTINCT payment_method_code) AS NumberOfPaymentMethods FROM customer_payment_methods",
        "SELECT DISTINCT COUNT(payment_method_code) AS Methods FROM customer_payment_methods GROUP BY payment_method_code",
        "SELECT COUNT(1) FROM (SELECT DISTINCT payment_method_code FROM customer_payment_methods)",
        "SELECT COUNT(*) FROM (SELECT payment_method_code FROM customer_payment_methods GROUP BY payment_method_code)",
        "SELECT COUNT(DISTINCT payment_method_code) FROM customer_payment_methods WHERE payment_method_code IS NOT NULL"
      ]
    ]
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "nlq": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
    "infer_predictions": [
      [
        "SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%'",
        "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number LIKE '+12%'",
        "SELECT login_name, login_password FROM customers WHERE SUBSTR(phone_number, 1, 3) = '+12'",
        "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number GLOB '+12*'",
        "SELECT login_name, login_password FROM customers WHERE phone_number >= '+12' AND phone_number < '+13'",
        "SELECT c.login_name AS ln, c.login_password AS pwd FROM customers c WHERE c.phone_number LIKE '+12%'",
        "SELECT login_name, login_password FROM customers WHERE INSTR(phone_number, '+12') = 1"
      ]
    ]
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "nlq": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
    "infer_predictions": [
      [
        "SELECT login_name, login_password FROM customers WHERE phone_number LIKE '+12%'",
        "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number LIKE '+12%'",
        "SELECT login_name, login_password FROM customers WHERE SUBSTR(phone_number, 1, 3) = '+12'",
        "SELECT c.login_name, c.login_password FROM customers c WHERE c.phone_number GLOB '+12*'",
        "SELECT login_name, login_password FROM customers WHERE phone_number GLOB '+12*'",
        "SELECT login_name, login_password FROM customers WHERE SUBSTRING(phone_number, 1, 3) = '+12'",
        "SELECT c.login_name, c.login_password FROM customers AS c WHERE SUBSTR(c.phone_number, 1, 3) = '+12'"
      ]
    ]
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "nlq": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
    "infer_predictions": [
      [
        "SELECT product_size FROM products WHERE product_name LIKE '%Dell%'",
        "SELECT p.product_size FROM products p WHERE p.product_name LIKE '%Dell%'",
        "SELECT product_size FROM products WHERE INSTR(product_name, 'Dell') > 0",
        "SELECT DISTINCT p.product_size FROM products p WHERE p.product_name LIKE '%Dell%'",
        "SELECT p.product_size FROM products p WHERE p.product_name LIKE 'Dell%'",
        "SELECT p.product_size FROM products AS p WHERE p.product_name LIKE '%Dell%' AND p.product_name IS NOT NULL",
        "SELECT product_size FROM products WHERE product_name LIKE 'Dell%' OR product_name LIKE '%Dell%'"
      ]
    ]
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "nlq": "What are the sizes of all products whose name includes the word 'Dell'?",
    "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
    "infer_predictions": [
      [
        "SELECT product_size FROM products WHERE product_name LIKE '%Dell%'",
        "SELECT p.product_size FROM products p WHERE p.product_name LIKE '%Dell%'",
        "SELECT DISTINCT p.product_size FROM products p WHERE p.product_name LIKE '%Dell%'",
        "SELECT product_size FROM products WHERE UPPER(product_name) LIKE UPPER('%Dell%')",
        "SELECT DISTINCT product_size FROM products WHERE UPPER(product_name) LIKE UPPER('%Dell%')",
        "SELECT product_size FROM products WHERE product_name LIKE 'Dell%' OR product_name LIKE '% Dell%'"
      ]
    ]
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "nlq": "What are the product price and the product size of the products whose price is above average?",
    "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
    "infer_predictions": [
      [
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT P.product_price, P.product_size FROM products P WHERE P.product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(P.product_price) FROM products P)",
        "SELECT P.product_price, P.product_size FROM products P WHERE P.product_price > (SELECT AVG(P2.product_price) FROM products P2)",
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(P1.product_price) FROM products P1)",
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(PRODUCTS.product_price) FROM products PRODUCTS)"
      ]
    ]
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "nlq": "What are the prices and sizes of all products whose price is above the mean?",
    "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
    "infer_predictions": [
      [
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM products GROUP BY product_id)",
        "SELECT p.product_price, p.product_size FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products p2 WHERE p2.product_id = p.product_id GROUP BY p2.product_id)",
        "SELECT pp.product_price, pp.product_size FROM products pp WHERE pp.product_price > (SELECT Average FROM (SELECT AVG(product_price) AS Average FROM products))",
        "SELECT product_price, product_size FROM products WHERE product_price > (SELECT AVG(product_price) FROM (SELECT product_price FROM products))",
        "SELECT product_price, product_size FROM products e WHERE product_price > (SELECT AVG(d.product_price) FROM products d WHERE e.product_id = d.product_id)",
        "SELECT DISTINCT product_price, product_size FROM products px WHERE px.product_price > (SELECT AVG(comparator.product_price) FROM products comparator WHERE px.product_id = comparator.product_id)",
        "SELECT product_price, product_size FROM products W WHERE product_price > (SELECT AVG(product_price) FROM products Group by product_price)"
      ]
    ]
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "nlq": "How many kinds of products have not been sold?",
    "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT product_id) FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_items)",
        "SELECT COUNT(*) FROM products p WHERE NOT EXISTS (SELECT 1 FROM order_items oi WHERE oi.product_id = p.product_id)",
        "SELECT COUNT(product_id) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL",
        "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT DISTINCT oi.product_id FROM order_items oi)",
        "SELECT COUNT(DISTINCT product_id) FROM products EXCEPT SELECT DISTINCT product_id FROM order_items",
        "SELECT COUNT(*) FROM products AS p WHERE NOT EXISTS (SELECT NULL FROM order_items AS oi WHERE p.product_id = oi.product_id)",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p WHERE p.product_id NOT IN (SELECT DISTINCT product_id FROM order_items)",
        "SELECT COUNT(*) FROM (SELECT product_id FROM products EXCEPT SELECT product_id FROM order_items)",
        "SELECT COUNT(DISTINCT products.product_id) FROM products WHERE NOT EXISTS (SELECT 1 FROM order_items WHERE products.product_id = order_items.product_id)"
      ]
    ]
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "nlq": "What is the number of products that have not been ordered yet?",
    "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_items)",
        "SELECT COUNT(product_id) FROM products WHERE NOT EXISTS (SELECT product_id FROM order_items WHERE products.product_id = order_items.product_id)",
        "SELECT COUNT(*) FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.order_id IS NULL",
        "SELECT COUNT(products.product_id) FROM products WHERE products.product_id NOT IN (SELECT order_items.product_id FROM order_items)",
        "SELECT COUNT(DISTINCT products.product_id) FROM products WHERE products.product_id NOT IN (SELECT DISTINCT order_items.product_id FROM order_items)",
        "SELECT COUNT(1) FROM (SELECT product_id FROM products EXCEPT SELECT product_id FROM order_items)",
        "SELECT COUNT(p.product_id) FROM products p WHERE NOT EXISTS (SELECT 1 FROM order_items oi WHERE oi.product_id = p.product_id)",
        "SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items WHERE order_items.product_id IS NOT NULL)",
        "SELECT COUNT(*) FROM (SELECT products.product_id FROM products LEFT OUTER JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL)",
        "SELECT COUNT(*) FROM products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM order_items oi)"
      ]
    ]
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "nlq": "How many customers do not have any payment method?",
    "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)",
        "SELECT COUNT(customers.customer_id) FROM customers LEFT JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id WHERE customer_payment_methods.customer_id IS NULL",
        "SELECT COUNT(*) FROM (SELECT customers.customer_id FROM customers LEFT OUTER JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id WHERE customer_payment_methods.payment_method_code IS NULL)",
        "SELECT COUNT(*) FROM customers WHERE NOT EXISTS (SELECT NULL FROM customer_payment_methods WHERE customers.customer_id = customer_payment_methods.customer_id)",
        "SELECT COUNT(customer_id) FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_payment_methods)",
        "SELECT COUNT(*) FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customer_payment_methods cmp WHERE c.customer_id = cmp.customer_id)",
        "SELECT COUNT(DISTINCT customers.customer_id) FROM customers LEFT JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id WHERE customer_payment_methods.payment_method_code IS NULL",
        "SELECT COUNT(*) FROM (SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_payment_methods)",
        "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT cpm.customer_id FROM customer_payment_methods cpm)",
        "SELECT COUNT(*) FROM customers c LEFT JOIN customer_payment_methods cpm ON c.customer_id = cpm.customer_id WHERE cpm.customer_id IS NULL"
      ]
    ]
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "nlq": "How many customers do not have a listed payment method?",
    "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)",
        "SELECT COUNT(customers.customer_id) FROM customers LEFT JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id WHERE customer_payment_methods.customer_id IS NULL",
        "SELECT COUNT(DISTINCT customers.customer_id) FROM customers LEFT OUTER JOIN customer_payment_methods ON customers.customer_id = customer_payment_methods.customer_id WHERE customer_payment_methods.payment_method_code IS NULL",
        "SELECT COUNT(*) FROM customers WHERE NOT EXISTS (SELECT 1 FROM customer_payment_methods WHERE customer_payment_methods.customer_id = customers.customer_id)",
        "SELECT (COUNT(*) - (SELECT COUNT(DISTINCT customer_id) FROM customer_payment_methods)) FROM customers",
        "SELECT COUNT(*) FROM customers c WHERE c.customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)",
        "SELECT COUNT(*) FROM customers AS c LEFT JOIN customer_payment_methods AS pcm ON c.customer_id = pcm.customer_id WHERE pcm.payment_method_code IS NULL",
        "SELECT COUNT(*) FROM customers WHERE customer_id IN (SELECT customers.customer_id FROM customers EXCEPT SELECT customer_payment_methods.customer_id FROM customer_payment_methods)",
        "SELECT COUNT(c.customer_id) FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customer_payment_methods pcm WHERE pcm.customer_id = c.customer_id)",
        "SELECT TOTAL(c.customer_id != pcm.customer_id) FROM customers c LEFT JOIN customer_payment_methods pcm ON c.customer_id = pcm.customer_id WHERE pcm.customer_id IS NULL"
      ]
    ]
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "nlq": "What are all the order status and all the dates of orders?",
    "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
    "infer_predictions": [
      [
        "SELECT DISTINCT order_status_code, date_order_placed FROM orders",
        "SELECT order_status_code, date_order_placed FROM orders GROUP BY order_status_code, date_order_placed",
        "SELECT o.order_status_code, o.date_order_placed FROM orders o",
        "SELECT o.order_status_code, o.date_order_placed FROM orders o GROUP BY o.order_status_code, o.date_order_placed",
        "SELECT DISTINCT o.order_status_code, o.date_order_placed FROM orders o",
        "SELECT order_status_code, date_order_placed FROM (SELECT DISTINCT order_status_code, date_order_placed FROM orders)",
        "SELECT DISTINCT order_status_code, date_order_placed FROM orders LIMIT 10",
        "SELECT order_status_code, date_order_placed FROM (SELECT * FROM orders) GROUP BY order_status_code, date_order_placed",
        "SELECT order_status_code, date_order_placed FROM orders where order_id in (select order_id from orders) GROUP BY order_status_code, date_order_placed",
        "SELECT order_status_code, date_order_placed FROM orders WHERE EXISTS (SELECT 1 FROM orders o2 WHERE o2.order_id = orders.order_id)"
      ]
    ]
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "nlq": "What are the status codes and dates placed for all of the orders?",
    "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
    "infer_predictions": [
      [
        "SELECT order_status_code, date_order_placed FROM orders",
        "SELECT o.order_status_code, o.date_order_placed FROM orders o",
        "SELECT order_status_code, date_order_placed FROM orders ORDER BY order_status_code",
        "SELECT order_status_code, date_order_placed FROM orders GROUP BY order_status_code, date_order_placed",
        "SELECT order_status_code AS status, date_order_placed AS date FROM orders",
        "SELECT o.order_status_code AS status_code, o.date_order_placed AS placed_date FROM orders o",
        "SELECT order_status_code, MIN(date_order_placed) FROM orders GROUP BY order_status_code",
        "SELECT * FROM (SELECT order_status_code, date_order_placed FROM orders) sub"
      ]
    ]
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "nlq": "List the address, town and county information of the customers who live in the USA.",
    "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
    "infer_predictions": [
      [
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA'",
        "SELECT c.address_line_1, c.town_city, c.county FROM customers c WHERE c.country = 'USA'",
        "SELECT address_line_1 AS Address, town_city AS Town, county AS County FROM customers WHERE country = 'USA'",
        "SELECT * FROM (SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA')",
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA' ORDER BY town_city",
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA' GROUP BY county, town_city, address_line_1",
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA' LIMIT 100",
        "SELECT address_line_1 || ', ' || town_city || ', ' || county AS full_address FROM customers WHERE country = 'USA'",
        "WITH USA_Customers AS (SELECT address_line_1, town_city, county FROM customers WHERE country = 'USA') SELECT * FROM USA_Customers"
      ]
    ]
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "nlq": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
    "infer_predictions": [
      [
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'United States';",
        "SELECT address_line_1, town_city, county FROM customers WHERE country = 'United States' ORDER BY customer_id;",
        "SELECT address_line_1 AS Address, town_city AS City, county AS County FROM customers WHERE country = 'United States';",
        "SELECT address_line_1, town_city, county FROM customers WHERE country LIKE 'United States';",
        "SELECT C.address_line_1, C.town_city, C.county FROM customers C WHERE C.country = 'United States';",
        "SELECT C.address_line_1, C.town_city, C.county FROM customers C WHERE C.country = 'United States' ORDER BY C.customer_id ASC;",
        "SELECT C.address_line_1, C.town_city, C.county FROM customers C WHERE C.country LIKE 'United States';",
        "SELECT DISTINCT C.address_line_1, C.town_city, C.county FROM customers C WHERE C.country = 'United States';",
        "SELECT address_line_1 || ', ' || town_city || ', ' || county AS full_address FROM customers WHERE country = 'United States';"
      ]
    ]
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "nlq": "List all the pairs of buyer first names and product names.",
    "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
    "infer_predictions": [
      [
        "SELECT cu.customer_first_name, pr.product_name FROM customers cu JOIN orders orr ON cu.customer_id = orr.customer_id JOIN order_items oi ON orr.order_id = oi.order_id JOIN products pr ON oi.product_id = pr.product_id",
        "SELECT c.customer_first_name, p.product_name FROM customers c, orders o, order_items oi, products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id",
        "SELECT customer_first_name, product_name FROM customers JOIN orders USING (customer_id) JOIN order_items USING (order_id) JOIN products ON order_items.product_id = products.product_id",
        "SELECT DISTINCT customer_first_name, product_name FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id",
        "SELECT c.customer_first_name, p.product_name FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_items oi ON o.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id",
        "SELECT customer_first_name, product_name FROM (SELECT c.customer_first_name, oi.product_id FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id) AS coi JOIN products ON coi.product_id = products.product_id",
        "SELECT buyers.customer_first_name, purchases.product_name FROM customers buyers JOIN orders clerks ON buyers.customer_id = clerks.customer_id JOIN order_items lists ON clerks.order_id = lists.order_id JOIN products purchases ON lists.product_id = purchases.product_id",
        "SELECT (SELECT customer_first_name FROM customers WHERE customers.customer_id = orders.customer_id) AS buyer_name, (SELECT product_name FROM products WHERE products.product_id = order_items.product_id) AS sold_product FROM orders JOIN order_items ON orders.order_id = order_items.order_id",
        "SELECT c.customer_first_name AS buyer, p.product_name AS product FROM customers c CROSS JOIN products p WHERE EXISTS (SELECT 1 FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id)"
      ]
    ]
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "nlq": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
    "infer_predictions": [
      [
        "SELECT c.customer_first_name, p.product_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id;",
        "SELECT customer_first_name, product_name FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id;",
        "SELECT customer_first_name AS BuyerFirstName, product_name AS ProductPurchased FROM customers, orders, order_items, products WHERE customers.customer_id = orders.customer_id AND orders.order_id = order_items.order_id AND order_items.product_id = products.product_id;",
        "SELECT C.customer_first_name, P.product_name FROM customers C, orders O, order_items OI, products P WHERE C.customer_id = O.customer_id AND O.order_id = OI.order_id AND OI.product_id = P.product_id;",
        "SELECT c.customer_first_name, p.product_name FROM customers c, orders o, order_items oi, products p WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND oi.product_id = p.product_id;",
        "SELECT DISTINCT c.customer_first_name, p.product_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id LEFT JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN products p ON oi.product_id = p.product_id;",
        "SELECT c.customer_first_name AS Buyer, p.product_name AS PurchasedProduct FROM customers c CROSS JOIN orders o ON c.customer_id = o.customer_id CROSS JOIN order_items oi ON o.order_id = oi.order_id CROSS JOIN products p ON oi.product_id = p.product_id;",
        "SELECT customer_first_name, product_name FROM customers JOIN orders USING(customer_id) JOIN order_items USING(order_id) JOIN products USING(product_id);",
        "SELECT buyer.customer_first_name, purchased.product_name FROM customers buyer JOIN orders o ON buyer.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products purchased ON oi.product_id = purchased.product_id;",
        "SELECT cust.customer_first_name, prod.product_name FROM customers cust LEFT OUTER JOIN orders ords ON cust.customer_id = ords.customer_id LEFT OUTER JOIN order_items items ON ords.order_id = items.order_id LEFT OUTER JOIN products prod ON items.product_id = prod.product_id;"
      ]
    ]
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "nlq": "How many items are shipped?",
    "gold": "SELECT count(*) FROM Shipment_Items",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM shipment_items",
        "SELECT COUNT(order_item_id) FROM shipment_items",
        "SELECT COUNT(si.order_item_id) FROM shipment_items si",
        "SELECT COUNT(*) FROM (SELECT order_item_id FROM shipment_items)",
        "SELECT COUNT(si.order_item_id) FROM shipment_items si INNER JOIN shipments s ON si.shipment_id = s.shipment_id",
        "SELECT COUNT(DISTINCT si.order_item_id) FROM shipment_items si",
        "SELECT COUNT(*) FROM (SELECT order_item_id FROM shipment_items GROUP BY order_item_id)",
        "SELECT COUNT(DISTINCT si.order_item_id) FROM shipments s INNER JOIN shipment_items si ON s.shipment_id = si.shipment_id",
        "SELECT COUNT(DISTINCT shi.order_item_id) FROM shipment_items shi"
      ]
    ]
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "nlq": "How many products have been shipped?",
    "gold": "SELECT count(*) FROM Shipment_Items",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id INNER JOIN shipment_items si ON oi.order_item_id = si.order_item_id",
        "SELECT COUNT(DISTINCT product_id) FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_item_id IN (SELECT order_item_id FROM shipment_items))",
        "SELECT COUNT(*) FROM (SELECT DISTINCT products.product_id FROM products, order_items, shipment_items WHERE products.product_id = order_items.product_id AND order_items.order_item_id = shipment_items.order_item_id)",
        "SELECT COUNT(DISTINCT products.product_id) FROM products, order_items, shipment_items WHERE products.product_id = order_items.product_id AND order_items.order_item_id = shipment_items.order_item_id",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p, order_items oi, shipment_items si WHERE p.product_id = oi.product_id AND oi.order_item_id = si.order_item_id",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p INNER JOIN (order_items oi INNER JOIN shipment_items si ON oi.order_item_id = si.order_item_id) ON p.product_id = oi.product_id",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p WHERE EXISTS (SELECT 1 FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id WHERE oi.product_id = p.product_id)"
      ]
    ]
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "nlq": "What is the product average price?",
    "gold": "SELECT avg(product_price) FROM Products",
    "infer_predictions": [
      [
        "SELECT AVG(product_price) FROM products",
        "SELECT AVG(p.product_price) FROM products p",
        "SELECT AVG(product_price) AS average_price FROM products",
        "SELECT AVG(p.product_price) AS average_price FROM products p",
        "SELECT /* comments */ AVG(product_price) FROM products",
        "SELECT AVG(product_price) AS avg_price FROM products",
        "SELECT AVG(product_price) FROM products WHERE product_price IS NOT NULL",
        "SELECT AVG(p.product_price) FROM products p WHERE p.product_price IS NOT NULL",
        "SELECT AVG(product_price) AS average_price FROM products WHERE product_price > 0",
        "SELECT AVG(p.product_price) AS avg_price FROM products p WHERE p.product_price > 0"
      ]
    ]
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "nlq": "How much do the products cost on average?",
    "gold": "SELECT avg(product_price) FROM Products",
    "infer_predictions": [
      [
        "SELECT AVG(product_price) FROM products",
        "SELECT AVG(P.product_price) AS AveragePrice FROM products P",
        "SELECT AVG(product_price) AS Average_Price FROM products",
        "SELECT (SUM(product_price) / COUNT(product_id)) FROM products",
        "SELECT (SUM(P.product_price) / COUNT(P.product_id)) AS AvgPrice FROM products P",
        "SELECT AVG(product_price) FROM products WHERE product_id IS NOT NULL",
        "SELECT AVG(P.product_price) FROM products P WHERE P.product_price IS NOT NULL",
        "SELECT AVG(PR.product_price) AS AverageProductPrice FROM products AS PR WHERE product_description IS NOT NULL",
        "SELECT (SUM(product_price) / COUNT(*)) FROM products WHERE product_id IN (SELECT product_id FROM products)"
      ]
    ]
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "nlq": "What is the average price of the products being ordered?",
    "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "infer_predictions": [
      [
        "SELECT AVG(products.product_price) FROM products JOIN order_items ON products.product_id = order_items.product_id",
        "SELECT AVG(p.product_price) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id",
        "SELECT AVG(pricetable.product_price) FROM (SELECT product_price FROM products WHERE product_id IN (SELECT product_id FROM order_items)) pricetable",
        "SELECT AVG(product_price) FROM products WHERE product_id IN (SELECT product_id FROM order_items)",
        "SELECT AVG(pr.product_price) FROM products pr, order_items oi WHERE pr.product_id = oi.product_id",
        "SELECT AVG(price) FROM (SELECT product_price AS price FROM products p JOIN order_items oi ON p.product_id = oi.product_id) t",
        "SELECT AVG(product_price) FROM products p JOIN (SELECT DISTINCT product_id FROM order_items) pi ON p.product_id = pi.product_id",
        "SELECT AVG(pro.product_price) FROM products pro WHERE EXISTS (SELECT 1 FROM order_items oi WHERE oi.product_id = pro.product_id)"
      ]
    ]
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "nlq": "What is the price of all products being ordered on average?",
    "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "infer_predictions": [
      [
        "SELECT AVG(products.product_price) FROM products JOIN order_items ON products.product_id = order_items.product_id",
        "SELECT AVG(product_price) FROM products WHERE product_id IN (SELECT product_id FROM order_items)",
        "SELECT AVG(product_price) AS average_price FROM products INNER JOIN order_items ON products.product_id = order_items.product_id",
        "SELECT AVG(p.product_price) FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id",
        "SELECT AVG(pr.product_price) FROM products pr, order_items oi WHERE pr.product_id = oi.product_id",
        "SELECT AVG(p.product_price) FROM products p WHERE EXISTS (SELECT 1 FROM order_items oi WHERE oi.product_id = p.product_id)",
        "SELECT AVG(prices.product_price) FROM (SELECT product_price FROM products INNER JOIN order_items ON products.product_id = order_items.product_id) prices",
        "SELECT AVG(product_price) FROM products p WHERE p.product_id IN (SELECT product_id FROM order_items)"
      ]
    ]
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "nlq": "What are the email address, town and county of the customers who are of the least common gender?",
    "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
    "infer_predictions": [
      [
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code = (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code IN (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(gender_code) ASC LIMIT 1)",
        "SELECT c.email_address, c.town_city, c.county FROM customers c JOIN (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(gender_code) ASC LIMIT 1) g ON c.gender_code = g.gender_code",
        "SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(*) as cnt FROM customers GROUP BY gender_code ORDER BY cnt ASC) LIMIT 1)",
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code = (SELECT gc.gender_code FROM (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC) gc LIMIT 1)",
        "SELECT top.email_address, top.town_city, top.county FROM (SELECT * FROM customers WHERE gender_code = (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)) top",
        "SELECT customer.email_address, customer.town_city, customer.county FROM customers customer WHERE customer.gender_code = (SELECT MIN_COUNT.gender_code FROM (SELECT gender_code, MIN(count) FROM (SELECT gender_code, COUNT(*) AS count FROM customers GROUP BY gender_code) GROUP_ALIAS) AS MIN_COUNT)",
        "SELECT customer.email_address, customer.town_city, customer.county FROM customers customer WHERE (customer.gender_code) = (SELECT M.gender_code FROM customers ALIAS INNER JOIN (SELECT gender_code, COUNT(*) AS Qty FROM customers GROUP BY gender_code ORDER BY Qty ASC LIMIT 1) AS M ON ALIAS.gender_code = M.gender_code)",
        "SELECT email_address, town_city, county FROM customers WHERE customers.gender_code IN (SELECT gender_code FROM (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY COUNT(gender_code) ASC) target_gender_code)"
      ]
    ]
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "nlq": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
    "infer_predictions": [
      [
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code = (SELECT gender_code FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id ORDER BY COUNT(order_id) ASC LIMIT 1))",
        "SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gender_code FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY COUNT(orders.order_id) ASC LIMIT 1)",
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE c.gender_code IN (SELECT gender FROM (SELECT gender_code AS gender, COUNT(*) as num_orders FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY num_orders ASC LIMIT 1))",
        "SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT c.gender_code FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT cust.email_address, cust.town_city, cust.county FROM customers cust WHERE cust.gender_code = (SELECT c.gender_code FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1)",
        "SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gcode FROM (SELECT gender_code AS gcode, COUNT(o.order_id) AS occ FROM customers JOIN orders o ON customers.customer_id = o.customer_id GROUP BY gender_code ORDER BY occ ASC LIMIT 1))",
        "SELECT c.email_address, c.town_city, c.county FROM customers c JOIN (SELECT gender_code FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY COUNT(orders.order_id) ASC LIMIT 1) res ON c.gender_code = res.gender_code",
        "SELECT email_address, town_city, county FROM customers WHERE gender_code = (SELECT gender_code FROM (SELECT gender_code, COUNT(order_id) AS order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY gender_code ORDER BY order_count ASC LIMIT 1) tmp)",
        "SELECT c.email_address, c.town_city, c.county FROM customers c WHERE EXISTS (SELECT 1 FROM customers subc INNER JOIN orders o ON subc.customer_id = o.customer_id WHERE subc.gender_code = c.gender_code GROUP BY subc.gender_code ORDER BY COUNT(o.order_id) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "nlq": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
    "infer_predictions": [
      [
        "SELECT DISTINCT O.date_order_placed FROM orders O INNER JOIN customers C ON O.customer_id = C.customer_id INNER JOIN customer_payment_methods PM ON C.customer_id = PM.customer_id GROUP BY O.order_id HAVING COUNT(DISTINCT PM.payment_method_code) >= 2",
        "SELECT date_order_placed FROM orders WHERE customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
        "SELECT O.date_order_placed FROM orders O WHERE EXISTS (SELECT 1 FROM customer_payment_methods PM WHERE PM.customer_id = O.customer_id GROUP BY PM.customer_id HAVING COUNT(PM.payment_method_code) >= 2)",
        "SELECT date_order_placed FROM orders WHERE customer_id IN (SELECT PM.customer_id FROM customer_payment_methods PM GROUP BY PM.customer_id HAVING COUNT(DISTINCT PM.payment_method_code) >= 2)",
        "SELECT O.date_order_placed FROM orders O JOIN (SELECT PM.customer_id FROM customer_payment_methods PM GROUP BY PM.customer_id HAVING COUNT(DISTINCT PM.payment_method_code) >= 2) AS PM_VALID ON O.customer_id = PM_VALID.customer_id",
        "SELECT DISTINCT orders.date_order_placed FROM orders INNER JOIN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2) AS multi_payment_customers ON orders.customer_id = multi_payment_customers.customer_id",
        "SELECT date_order_placed FROM orders INNER JOIN customer_payment_methods ON orders.customer_id = customer_payment_methods.customer_id GROUP BY orders.order_id HAVING COUNT(DISTINCT customer_payment_methods.payment_method_code) >= 2",
        "SELECT orders.date_order_placed FROM orders, customer_payment_methods WHERE orders.customer_id = customer_payment_methods.customer_id GROUP BY orders.order_id HAVING COUNT(DISTINCT customer_payment_methods.payment_method_code) >= 2",
        "SELECT DISTINCT O.date_order_placed FROM orders AS O JOIN customer_payment_methods AS PM ON O.customer_id = PM.customer_id GROUP BY O.order_id HAVING COUNT(DISTINCT PM.payment_method_code) >= 2",
        "SELECT orders.date_order_placed FROM orders JOIN customer_payment_methods ON orders.customer_id = customer_payment_methods.customer_id GROUP BY orders.order_id, orders.customer_id HAVING COUNT(DISTINCT customer_payment_methods.payment_method_code) >= 2"
      ]
    ]
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "nlq": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
    "infer_predictions": [
      [
        "SELECT DISTINCT o.date_order_placed FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)",
        "SELECT DISTINCT date_order_placed FROM orders WHERE customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(*) >= 2)",
        "SELECT o.date_order_placed FROM orders o WHERE EXISTS (SELECT 1 FROM customer_payment_methods cpm WHERE cpm.customer_id = o.customer_id GROUP BY cpm.customer_id HAVING COUNT(cpm.payment_method_code) >= 2)",
        "SELECT date_order_placed FROM orders WHERE customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2)",
        "SELECT DISTINCT date_order_placed FROM orders o INNER JOIN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2) cpm ON cpm.customer_id = o.customer_id",
        "SELECT DISTINCT o.date_order_placed FROM orders o, customer_payment_methods cpm WHERE o.customer_id = cpm.customer_id GROUP BY cpm.customer_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2",
        "SELECT DISTINCT o.date_order_placed FROM orders o JOIN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) > 1) cpm ON o.customer_id = cpm.customer_id",
        "SELECT DISTINCT o.date_order_placed FROM orders o INNER JOIN customer_payment_methods cpm ON o.customer_id = cpm.customer_id GROUP BY cpm.customer_id HAVING COUNT(cpm.payment_method_code) > 1",
        "SELECT DISTINCT date_order_placed FROM orders WHERE customer_id IN (SELECT pm.customer_id FROM customer_payment_methods pm GROUP BY pm.customer_id HAVING COUNT(pm.payment_method_code) > 1)",
        "SELECT o.date_order_placed FROM orders o WHERE o.customer_id IN (SELECT customer_id FROM customer_payment_methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)"
      ]
    ]
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "nlq": "What is the most uncommon order status?",
    "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT o.order_status_code FROM orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1",
        "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) as cnt FROM orders GROUP BY order_status_code) ORDER BY cnt ASC LIMIT 1",
        "SELECT order_status_code FROM orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MIN(count) FROM (SELECT COUNT(order_status_code) as count FROM orders GROUP BY order_status_code))",
        "SELECT o.order_status_code FROM orders o GROUP BY o.order_status_code HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) c FROM orders GROUP BY order_status_code))",
        "SELECT o.order_status_code FROM orders o GROUP BY o.order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
        "WITH OrderCounts AS (SELECT order_status_code, COUNT(*) AS count FROM orders GROUP BY order_status_code) SELECT order_status_code FROM OrderCounts ORDER BY count ASC LIMIT 1",
        "SELECT order_status_code FROM orders WHERE order_status_code IN (SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT order_status_code, COUNT(*) as order_count FROM orders GROUP BY order_status_code ORDER BY order_count ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "nlq": "What is the least common order status?",
    "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT MIN(order_status_code) FROM orders GROUP BY order_status_code ORDER BY COUNT(order_status_code)",
        "SELECT os.order_status_code FROM (SELECT order_status_code, COUNT(*) as cnt FROM orders GROUP BY order_status_code) AS os ORDER BY os.cnt ASC LIMIT 1",
        "WITH OrderStatusCount AS (SELECT order_status_code, COUNT(*) AS OSCOUNT FROM orders GROUP BY order_status_code) SELECT order_status_code FROM OrderStatusCount WHERE OSCOUNT = (SELECT MIN(OSCOUNT) FROM OrderStatusCount)",
        "SELECT order_status_code FROM orders WHERE order_status_code IN (SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) as order_count FROM orders GROUP BY order_status_code ORDER BY order_count ASC) LIMIT 1",
        "SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(order_id) ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "nlq": "For all the products sold for more than 3 times, list their id and description.",
    "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
    "infer_predictions": [
      [
        "SELECT DISTINCT P.product_id, P.product_description FROM products P JOIN order_items OI ON OI.product_id = P.product_id GROUP BY P.product_id HAVING COUNT(DISTINCT OI.order_id) > 3",
        "SELECT products.product_id, products.product_description FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) > 3)",
        "SELECT products.product_id, products.product_description FROM products INNER JOIN (SELECT order_items.product_id FROM order_items GROUP BY order_items.product_id HAVING COUNT(order_items.order_id) > 3) as ProductSold ON ProductSold.product_id = products.product_id",
        "SELECT P.product_id, P.product_description FROM products P WHERE EXISTS (SELECT OI.product_id FROM order_items OI WHERE OI.product_id = P.product_id GROUP BY OI.product_id HAVING COUNT(OI.order_id) > 3)",
        "SELECT product_id, product_description FROM products WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) > 3)",
        "SELECT P.product_id, P.product_description FROM order_items OI JOIN products P ON OI.product_id = P.product_id GROUP BY OI.product_id HAVING COUNT(OI.order_id) > 3",
        "SELECT P.product_id, P.product_description FROM products P WHERE (SELECT COUNT(*) FROM order_items WHERE order_items.product_id = P.product_id) > 3",
        "SELECT products.product_id, products.product_description FROM products INNER JOIN order_items on products.product_id = order_items.product_id GROUP BY products.product_id HAVING COUNT(DISTINCT order_items.order_id) > 3",
        "SELECT P.product_id, P.product_description FROM products P, order_items OI WHERE P.product_id = OI.product_id GROUP BY P.product_id HAVING COUNT(OI.order_id) > 3",
        "SELECT products.product_id, products.product_description FROM products JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(DISTINCT order_id) > 3) prod_query ON products.product_id = prod_query.product_id"
      ]
    ]
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "nlq": "For all products sold more than 3 times, what are their ids and descriptions?",
    "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
    "infer_predictions": [
      [
        "SELECT products.product_id, products.product_description FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id HAVING COUNT(order_items.product_id) > 3",
        "SELECT p.product_id, p.product_description FROM products p INNER JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.product_id) > 3",
        "SELECT prod.product_id, prod.product_description FROM products AS prod WHERE prod.product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) > 3)",
        "SELECT PR.product_id, PR.product_description FROM products PR JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(product_id) > 3) AS Counted ON Counted.product_id = PR.product_id",
        "SELECT P.product_id, P.product_description FROM products AS P JOIN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) > 3) AllowedProducts ON P.product_id = AllowedProducts.product_id",
        "SELECT DISTINCT pr.product_id, pr.product_description FROM products pr INNER JOIN (SELECT order_items.product_id FROM order_items GROUP BY order_items.product_id HAVING COUNT(order_items.product_id) > 3) oi ON pr.product_id = oi.product_id",
        "SELECT unique_products.product_id, unique_products.product_description FROM (SELECT COUNT(oi.product_id) as Count, oi.product_id FROM order_items oi GROUP BY oi.product_id HAVING Count > 3) TempCount INNER JOIN products unique_products ON TempCount.product_id = unique_products.product_id",
        "SELECT ScoredProducts.product_id, ScoredProducts.product_description FROM (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_id) > 3) PopProd JOIN products ScoredProducts ON ScoredProducts.product_id = PopProd.product_id",
        "SELECT list.product_id, list.product_description FROM products list, order_items details WHERE list.product_id = details.product_id GROUP BY details.product_id HAVING COUNT(list.product_id) > 3"
      ]
    ]
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "nlq": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT I.invoice_date, I.invoice_number FROM invoices I WHERE I.invoice_number IN (SELECT S.invoice_number FROM shipments S GROUP BY S.invoice_number HAVING COUNT(*) >= 2)",
        "SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT S.invoice_number FROM shipments S GROUP BY S.invoice_number HAVING COUNT(S.shipment_id) >= 2)",
        "SELECT I.invoice_date, I.invoice_number FROM invoices I JOIN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2) AS Sub ON I.invoice_number = Sub.invoice_number",
        "SELECT invoice_date, invoice_number FROM invoices WHERE EXISTS (SELECT 1 FROM shipments S WHERE invoices.invoice_number = S.invoice_number GROUP BY S.invoice_number HAVING COUNT(shipment_id) >= 2)",
        "SELECT invoice_date, invoice_number FROM invoices I WHERE (SELECT COUNT(*) FROM shipments S WHERE S.invoice_number = I.invoice_number GROUP BY S.invoice_number) >= 2",
        "SELECT I.invoice_date, I.invoice_number FROM (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(*) >= 2) AS SubQuery JOIN invoices I ON I.invoice_number = SubQuery.invoice_number",
        "SELECT I.invoice_date, I.invoice_number FROM invoices I INNER JOIN shipments S ON I.invoice_number = S.invoice_number GROUP BY I.invoice_number HAVING COUNT(distinct S.shipment_id) >= 2",
        "SELECT I.invoice_date, I.invoice_number FROM invoices I WHERE I.invoice_number IN (SELECT S.invoice_number FROM shipments S GROUP BY S.invoice_number HAVING COUNT(distinct S.shipment_id) >= 2)",
        "SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(*) > 1)",
        "SELECT I.invoice_date, I.invoice_number FROM invoices I WHERE I.invoice_number IN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(shipment_id) > 1)"
      ]
    ]
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "nlq": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT i.invoice_date, i.invoice_number FROM invoices i JOIN shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(s.shipment_id) >= 2",
        "SELECT i.invoice_date, i.invoice_number FROM invoices i WHERE i.invoice_number IN (SELECT s.invoice_number FROM shipments s GROUP BY s.invoice_number HAVING COUNT(s.shipment_id) >= 2)",
        "SELECT i.invoice_date, i.invoice_number FROM invoices i INNER JOIN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(*) >= 2) as SubQuery ON i.invoice_number = SubQuery.invoice_number",
        "SELECT DISTINCT i.invoice_date, i.invoice_number FROM invoices i, shipments s WHERE i.invoice_number = s.invoice_number GROUP BY i.invoice_number HAVING COUNT(DISTINCT s.shipment_id) >= 2",
        "SELECT DISTINCT i.invoice_date, i.invoice_number FROM shipments s, invoices i WHERE i.invoice_number = s.invoice_number GROUP BY s.invoice_number HAVING COUNT(DISTINCT s.shipment_id) >= 2",
        "SELECT invoice_date, invoice_number FROM (SELECT i.invoice_date, i.invoice_number, COUNT(s.shipment_id) as shipment_count FROM invoices i LEFT JOIN shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number) WHERE shipment_count >= 2",
        "SELECT DISTINCT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM shipments GROUP BY invoice_number HAVING COUNT(shipment_id) >= 2)",
        "SELECT invoice_date, invoice_number FROM invoices WHERE invoice_number IN (SELECT invoice_number FROM (SELECT invoice_number, COUNT(*) AS cnt FROM shipments GROUP BY invoice_number) WHERE cnt >= 2)",
        "SELECT invoice_date, invoice_number FROM invoices WHERE EXISTS (SELECT NULL FROM shipments WHERE invoices.invoice_number = shipments.invoice_number GROUP BY shipments.invoice_number HAVING COUNT(shipments.shipment_id) >= 2)",
        "SELECT DISTINCT invoice_date, invoice_number FROM invoices i WHERE (SELECT COUNT(*) FROM shipments s WHERE s.invoice_number = i.invoice_number) >= 2"
      ]
    ]
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "nlq": "what are all shipment tracking numbers and shipment dates?",
    "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
    "infer_predictions": [
      [
        "SELECT shipment_tracking_number, shipment_date FROM shipments;",
        "SELECT DISTINCT s.shipment_tracking_number, s.shipment_date FROM shipments s;",
        "SELECT s1.shipment_tracking_number, s1.shipment_date FROM shipments s1;",
        "SELECT shipment_tracking_number, shipment_date FROM shipments ORDER BY shipment_date DESC;",
        "SELECT shipment_tracking_number, shipment_date FROM shipments GROUP BY shipment_tracking_number, shipment_date;",
        "SELECT shipments.shipment_tracking_number AS TrackingNumber, shipments.shipment_date AS Date FROM shipments;",
        "SELECT shipments.shipment_tracking_number, shipments.shipment_date FROM shipments WHERE shipment_tracking_number IS NOT NULL;",
        "SELECT * FROM (SELECT shipment_tracking_number, shipment_date FROM shipments) AS subquery;"
      ]
    ]
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "nlq": "What are the tracking numbers and dates for all shipments listed?",
    "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
    "infer_predictions": [
      [
        "SELECT shipment_tracking_number, shipment_date FROM shipments",
        "SELECT s.shipment_tracking_number, s.shipment_date FROM shipments s",
        "SELECT s1.shipment_tracking_number, s1.shipment_date FROM shipments s1",
        "SELECT DISTINCT s.shipment_tracking_number, s.shipment_date FROM shipments s",
        "SELECT shipment_tracking_number, shipment_date FROM shipments GROUP BY shipment_tracking_number, shipment_date",
        "SELECT SHIPMENT.shipment_tracking_number, SHIPMENT.shipment_date FROM shipments SHIPMENT",
        "SELECT shipments.shipment_tracking_number AS tracking_number, shipments.shipment_date AS date FROM shipments"
      ]
    ]
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "nlq": "What are the color, description and size of the products priced below the maximum price.",
    "gold": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
    "infer_predictions": [
      [
        "SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products);",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(product_price) FROM products);",
        "SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(p.product_price) FROM products p);",
        "SELECT prod.product_color, prod.product_description, prod.product_size FROM products prod WHERE prod.product_price < (SELECT MAX(product_price) FROM products);",
        "SELECT prod.product_color, prod.product_description, prod.product_size FROM products prod WHERE prod.product_price < (SELECT MAX(p.product_price) FROM products p);",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(prod.product_price) FROM products prod);",
        "SELECT P.product_color, P.product_description, P.product_size FROM products AS P WHERE P.product_price < (SELECT MAX(prod.product_price) FROM products prod);"
      ]
    ]
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "nlq": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "gold": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
    "infer_predictions": [
      [
        "SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products)",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(p2.product_price) FROM products p2)",
        "SELECT product_color, product_description, product_size FROM products WHERE product_price NOT IN (SELECT MAX(product_price) FROM products)",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price != (SELECT MAX(product_price) FROM products)",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE EXISTS (SELECT 1 FROM products p2 WHERE p2.product_price > p.product_price)",
        "WITH MaxPrice AS (SELECT MAX(product_price) as max_price FROM products) SELECT product_color, product_description, product_size FROM products, MaxPrice WHERE products.product_price < MaxPrice.max_price",
        "SELECT product_color, product_description, product_size FROM products WHERE product_price < (SELECT MAX(product_price) FROM products p)",
        "SELECT p.product_color, p.product_description, p.product_size FROM products p WHERE p.product_price < (SELECT MAX(p2.product_price) FROM products p2 WHERE p2.product_price > p.product_price)"
      ]
    ]
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "nlq": "Return the names of directors who are older than the average age.",
    "gold": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
    "infer_predictions": [
      [
        "SELECT d.name FROM director d WHERE d.age > (SELECT AVG(age) FROM director)",
        "SELECT name FROM director WHERE age > (SELECT AVG(age) FROM director)",
        "WITH AverageAge AS (SELECT AVG(age) AS avg_age FROM director) SELECT name FROM director WHERE age > (SELECT avg_age FROM AverageAge)",
        "SELECT name FROM director WHERE age > (SELECT AVG(d2.age) FROM director d2)",
        "SELECT name FROM director d1 WHERE d1.age > (SELECT AVG(d2.age) FROM director d2)",
        "SELECT d.name FROM director d JOIN (SELECT AVG(age) AS avg_age FROM director) sub ON d.age > sub.avg_age",
        "SELECT d.name FROM director d WHERE d.age > (SELECT AVG(director.age) FROM director)",
        "SELECT d.name FROM director d WHERE EXISTS (SELECT 1 FROM director WHERE d.age > (SELECT AVG(age) FROM director))"
      ]
    ]
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "nlq": "Find the the name of the oldest director.",
    "gold": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM channel JOIN program ON channel.channel_id = program.channel_id GROUP BY director_id ORDER BY start_year ASC LIMIT 1",
        "SELECT c.name FROM channel c INNER JOIN program p ON c.channel_id = p.channel_id GROUP BY p.director_id ORDER BY p.start_year LIMIT 1",
        "SELECT ch.name FROM channel ch, program pr WHERE ch.channel_id = pr.channel_id GROUP BY pr.director_id HAVING pr.start_year = MIN(pr.start_year)",
        "SELECT (SELECT p.name FROM channel p WHERE p.channel_id = pr.channel_id) AS name FROM program pr GROUP BY pr.director_id ORDER BY pr.start_year ASC LIMIT 1",
        "SELECT name FROM (SELECT c.name, p.director_id, MIN(p.start_year) AS earliest FROM channel c JOIN program p ON c.channel_id = p.channel_id GROUP BY p.director_id) LIMIT 1",
        "SELECT name FROM channel WHERE channel_id IN (SELECT channel_id FROM program GROUP BY director_id ORDER BY start_year ASC LIMIT 1)",
        "SELECT c1.name FROM channel c1, program p1 WHERE c1.channel_id = p1.channel_id AND p1.start_year = (SELECT MIN(start_year) FROM program GROUP BY director_id ORDER BY start_year LIMIT 1)",
        "SELECT c.name FROM channel c INNER JOIN program p ON c.channel_id = p.channel_id WHERE (p.director_id, p.start_year) IN (SELECT director_id, MIN(start_year) FROM program GROUP BY director_id)",
        "SELECT name FROM channel WHERE channel_id = (SELECT channel_id FROM (SELECT channel_id FROM program GROUP BY director_id ORDER BY start_year) AS earliest_director)"
      ]
    ]
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "nlq": "How many channels have the word 'bbc' in their internet link?",
    "gold": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(channel_id) FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(DISTINCT channel_id) FROM channel WHERE LOWER(internet) LIKE '%bbc%'",
        "SELECT COUNT(DISTINCT name) FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(1) FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(*) AS count_bbc FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(1) AS NumberOfBBCChannels FROM channel WHERE internet LIKE '%bbc%'",
        "SELECT COUNT(DISTINCT channel_id) AS Total FROM channel WHERE internet LIKE '%bbc%'"
      ]
    ]
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "nlq": "How many different digital terrestrial channels are there?",
    "gold": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channel",
        "SELECT COUNT(*) FROM (SELECT DISTINCT digital_terrestrial_channel FROM channel)",
        "SELECT COUNT(*) FROM (SELECT digital_terrestrial_channel FROM channel GROUP BY digital_terrestrial_channel)",
        "SELECT COUNT(*) FROM (SELECT 1 FROM channel GROUP BY digital_terrestrial_channel)",
        "SELECT COUNT(DISTINCT digital_terrestrial_channel) AS number_of_channels FROM channel",
        "SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channel WHERE digital_terrestrial_channel IS NOT NULL"
      ]
    ]
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "nlq": "List all program titles in the order of starting year. List the most recent one first.",
    "gold": "SELECT title FROM program ORDER BY start_year DESC",
    "infer_predictions": [
      [
        "SELECT title FROM program ORDER BY start_year DESC",
        "SELECT p.title FROM program p ORDER BY p.start_year DESC",
        "SELECT title FROM program ORDER BY start_year DESC, program_id",
        "SELECT p.title FROM program p ORDER BY p.start_year DESC, p.program_id",
        "SELECT program.title AS Title FROM program ORDER BY start_year DESC"
      ]
    ]
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "nlq": "Which director is in charge of the most programs?",
    "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT D.name FROM director D JOIN program P ON D.director_id = P.director_id GROUP BY D.director_id ORDER BY COUNT(P.program_id) DESC LIMIT 1",
        "SELECT name FROM director WHERE director_id IN (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT top_d.name FROM director AS top_d WHERE top_d.director_id = (SELECT P.director_id FROM program P GROUP BY P.director_id ORDER BY COUNT(P.program_id) DESC LIMIT 1)",
        "SELECT name FROM director WHERE director_id = (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(count_programs) FROM (SELECT COUNT(program_id) AS count_programs FROM program GROUP BY director_id)))",
        "SELECT d.name FROM director d INNER JOIN (SELECT director_id, COUNT(*) as program_count FROM program GROUP BY director_id ORDER BY program_count DESC LIMIT 1) top_programs ON d.director_id = top_programs.director_id",
        "SELECT director_name.name FROM (SELECT d.name AS name, COUNT(p.program_id) AS num_programs FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.director_id ORDER BY num_programs DESC LIMIT 1) AS director_name",
        "SELECT (SELECT name FROM director WHERE director_id = max_director.max_id) AS director_name FROM (SELECT P.director_id AS max_id FROM program P GROUP BY P.director_id ORDER BY COUNT(*) DESC LIMIT 1) AS max_director",
        "SELECT D.name FROM director AS D JOIN (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1) AS TopDirector ON D.director_id = TopDirector.director_id",
        "SELECT name FROM director WHERE director_id = (SELECT P.director_id FROM program P GROUP BY P.director_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT name FROM director WHERE director_id = (SELECT director_id FROM (SELECT director_id, COUNT(program_id) AS total FROM program GROUP BY director_id ORDER BY total DESC LIMIT 1) AS tp)"
      ]
    ]
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "nlq": "Find the name and age of the director who is in charge of the most programs?",
    "gold": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.name, d.age FROM director d JOIN program p ON d.director_id = p.director_id GROUP BY d.director_id ORDER BY COUNT(p.program_id) DESC LIMIT 1",
        "SELECT name, age FROM director WHERE director_id = (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT d.name, d.age FROM (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1) AS x JOIN director d ON d.director_id = x.director_id",
        "SELECT name, age FROM director WHERE director_id IN (SELECT director_id FROM program GROUP BY director_id HAVING COUNT(program_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(program_id) AS cnt FROM program GROUP BY director_id)))",
        "SELECT name, d.age FROM director AS d WHERE d.director_id = (SELECT p.director_id FROM program AS p GROUP BY p.director_id ORDER BY COUNT(p.director_id) DESC LIMIT 1)",
        "SELECT name, age FROM director WHERE director_id = (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1)",
        "SELECT d.name, d.age FROM director d INNER JOIN (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1) p ON d.director_id = p.director_id",
        "SELECT d.name, d.age FROM director d WHERE EXISTS (SELECT 1 FROM (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1) p WHERE d.director_id = p.director_id)",
        "SELECT d.name, d.age FROM (SELECT director_id FROM program GROUP BY director_id ORDER BY COUNT(*) DESC LIMIT 1) pd INNER JOIN director d ON pd.director_id = d.director_id"
      ]
    ]
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "nlq": "Return the title of the program that began most recently.",
    "gold": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM program WHERE start_year = (SELECT MAX(start_year) FROM program);",
        "SELECT P.title FROM program P ORDER BY P.start_year DESC LIMIT 1;",
        "SELECT title FROM program ORDER BY start_year DESC LIMIT 1;",
        "SELECT P.title FROM program P WHERE P.start_year IN (SELECT MAX(start_year) FROM program);",
        "SELECT title FROM (SELECT title, MAX(start_year) FROM program GROUP BY title) LIMIT 1;",
        "SELECT P.title FROM (SELECT * FROM program ORDER BY start_year DESC) P LIMIT 1;",
        "SELECT title FROM program WHERE program_id = (SELECT program_id FROM program ORDER BY start_year DESC LIMIT 1);",
        "SELECT P.title FROM program P JOIN (SELECT MAX(start_year) AS LatestYear FROM program) Temp ON P.start_year = Temp.LatestYear;",
        "SELECT title FROM program GROUP BY title, start_year HAVING start_year = MAX(start_year) LIMIT 1;"
      ]
    ]
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "nlq": "Find the name and website link of the channels that have more than one program.",
    "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT ch.name, ch.internet FROM channel ch JOIN program pr ON ch.channel_id = pr.channel_id GROUP BY ch.channel_id HAVING COUNT(pr.program_id) > 1",
        "SELECT name, internet FROM channel WHERE channel_id IN (SELECT channel_id FROM program GROUP BY channel_id HAVING COUNT(program_id) > 1)",
        "SELECT DISTINCT ch.name, ch.internet FROM channel ch INNER JOIN program pr ON ch.channel_id = pr.channel_id WHERE (SELECT COUNT(*) FROM program WHERE channel_id = ch.channel_id) > 1",
        "SELECT name, internet FROM channel ch WHERE EXISTS (SELECT NULL FROM program pr WHERE pr.channel_id = ch.channel_id GROUP BY pr.channel_id HAVING COUNT(pr.program_id) > 1)",
        "SELECT ch.name, ch.internet FROM channel ch, program pr WHERE ch.channel_id = pr.channel_id GROUP BY ch.channel_id HAVING COUNT(DISTINCT pr.program_id) > 1",
        "SELECT ch.name, ch.internet FROM channel ch JOIN (SELECT channel_id FROM program GROUP BY channel_id HAVING COUNT(program_id) > 1) pr ON ch.channel_id = pr.channel_id",
        "SELECT name, internet FROM channel WHERE channel_id IN (SELECT channel_id FROM program pr GROUP BY pr.channel_id HAVING COUNT(*) > 1)",
        "SELECT ch.name, ch.internet FROM channel ch INNER JOIN (SELECT channel_id, COUNT(program_id) AS cnt FROM program GROUP BY channel_id) sub ON ch.channel_id = sub.channel_id WHERE sub.cnt > 1",
        "SELECT name, internet FROM channel WHERE channel_id IN (SELECT channel_id FROM (SELECT channel_id, COUNT(program_id) AS program_count FROM program GROUP BY channel_id) WHERE program_count > 1)",
        "SELECT name, internet FROM channel AS ch WHERE (SELECT COUNT(program_id) FROM program AS pr WHERE pr.channel_id = ch.channel_id) > 1"
      ]
    ]
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "nlq": "Find the number of programs for each channel. Return the name of each channel as well.",
    "gold": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
    "infer_predictions": [
      [
        "SELECT channel.name, COUNT(program.program_id) FROM channel JOIN program ON channel.channel_id = program.channel_id GROUP BY channel.channel_id",
        "SELECT c.name, COUNT(p.program_id) AS program_count FROM channel AS c LEFT JOIN program AS p ON c.channel_id = p.channel_id GROUP BY c.channel_id",
        "SELECT c.name, COUNT(DISTINCT p.program_id) FROM channel c LEFT JOIN program p ON c.channel_id = p.channel_id GROUP BY c.channel_id",
        "SELECT ch.name, (SELECT COUNT(*) FROM program pr WHERE pr.channel_id = ch.channel_id) AS num_programs FROM channel ch",
        "SELECT channel.name, COUNT(*) AS total_programs FROM channel LEFT JOIN program ON channel.channel_id = program.channel_id GROUP BY channel.channel_id",
        "SELECT (SELECT name FROM channel WHERE channel_id = program.channel_id), COUNT(program_id) FROM program GROUP BY channel_id",
        "SELECT cn.name, COUNT(pr.program_id) FROM channel cn JOIN program pr ON cn.channel_id = pr.channel_id GROUP BY cn.channel_id",
        "SELECT name, (SELECT COUNT(program_id) FROM program WHERE channel.channel_id = program.channel_id) FROM channel GROUP BY channel_id",
        "SELECT c.name, IFNULL(COUNT(p.program_id), 0) FROM channel c LEFT JOIN program p ON c.channel_id = p.channel_id GROUP BY c.name"
      ]
    ]
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "nlq": "Find the number of channels that do not run any program.",
    "gold": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM channel WHERE channel_id NOT IN (SELECT DISTINCT channel_id FROM program)",
        "SELECT COUNT(*) FROM channel LEFT JOIN program ON channel.channel_id = program.channel_id WHERE program.channel_id IS NULL",
        "SELECT COUNT(channel.channel_id) FROM channel WHERE NOT EXISTS (SELECT 1 FROM program WHERE program.channel_id = channel.channel_id)",
        "SELECT COUNT(DISTINCT channel.channel_id) FROM channel LEFT JOIN program ON channel.channel_id = program.channel_id WHERE program.program_id IS NULL",
        "SELECT COUNT(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program WHERE channel_id IS NOT NULL)",
        "SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT p.channel_id FROM program p WHERE p.channel_id = c.channel_id)",
        "SELECT COUNT(channel.name) FROM channel LEFT OUTER JOIN program ON channel.channel_id = program.channel_id WHERE program.channel_id IS NULL",
        "SELECT COUNT(channel.channel_id) FROM channel WHERE channel.channel_id NOT IN (SELECT DISTINCT p.channel_id FROM program p WHERE p.channel_id IS NOT NULL)",
        "SELECT COUNT(DISTINCT c.channel_id) FROM channel c LEFT JOIN program p ON c.channel_id = p.channel_id GROUP BY c.channel_id HAVING COUNT(p.channel_id) = 0",
        "SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT NULL FROM program p WHERE p.channel_id = c.channel_id)"
      ]
    ]
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "nlq": "What is the name of the director who is in the \"Dracula\" program?",
    "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "infer_predictions": [
      [
        "SELECT director.name FROM director JOIN program ON director.director_id = program.director_id WHERE program.title = 'Dracula'",
        "SELECT d.name FROM director AS d INNER JOIN program AS p ON d.director_id = p.director_id WHERE p.title = 'Dracula'",
        "SELECT name FROM director WHERE director_id IN (SELECT director_id FROM program WHERE title = 'Dracula')",
        "SELECT d.name FROM director d, program p WHERE d.director_id = p.director_id AND p.title = 'Dracula'",
        "SELECT d.name FROM director d JOIN program p ON d.director_id = p.director_id WHERE p.title = 'Dracula'",
        "SELECT director.name FROM director, program WHERE director.director_id = program.director_id AND program.title = 'Dracula'",
        "SELECT dir.name FROM director dir WHERE dir.director_id = (SELECT p.director_id FROM program p WHERE p.title = 'Dracula')",
        "SELECT name FROM director WHERE director_id = (SELECT director_id FROM program WHERE title = 'Dracula')",
        "SELECT name FROM director AS d WHERE EXISTS (SELECT 1 FROM program AS p WHERE p.director_id = d.director_id AND p.title = 'Dracula')",
        "SELECT name FROM director WHERE EXISTS (SELECT program.director_id FROM program WHERE program.title = 'Dracula' AND program.director_id = director.director_id)"
      ]
    ]
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "nlq": "Find the name and internet web of the channel that is directed by the most directors.",
    "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT channel.name, channel.internet FROM channel JOIN director_admin ON channel.channel_id = director_admin.channel_id GROUP BY channel.channel_id ORDER BY COUNT(DISTINCT director_admin.director_id) DESC LIMIT 1",
        "SELECT ch.name, ch.internet FROM channel as ch INNER JOIN director_admin as da ON ch.channel_id = da.channel_id GROUP BY ch.channel_id ORDER BY COUNT(DISTINCT da.director_id) DESC LIMIT 1",
        "SELECT c.name, c.internet FROM channel c WHERE c.channel_id = (SELECT da.channel_id FROM director_admin da GROUP BY da.channel_id ORDER BY COUNT(DISTINCT da.director_id) DESC LIMIT 1)",
        "SELECT name, internet FROM (SELECT channel.name, channel.internet, COUNT(DISTINCT director_admin.director_id) AS director_count FROM channel JOIN director_admin ON channel.channel_id = director_admin.channel_id GROUP BY channel.channel_id) AS result ORDER BY result.director_count DESC LIMIT 1",
        "SELECT ch.name, ch.internet FROM channel ch JOIN (SELECT channel_id, COUNT(DISTINCT director_id) AS num_directors FROM director_admin GROUP BY channel_id) da ON ch.channel_id = da.channel_id ORDER BY da.num_directors DESC LIMIT 1",
        "SELECT c.name, c.internet FROM channel c INNER JOIN (SELECT channel_id FROM director_admin GROUP BY channel_id HAVING COUNT(DISTINCT director_id) = (SELECT MAX(num_directors) FROM (SELECT COUNT(DISTINCT director_id) AS num_directors FROM director_admin GROUP BY channel_id))) da ON c.channel_id = da.channel_id",
        "SELECT c.name, c.internet FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id GROUP BY c.channel_id, c.name, c.internet HAVING COUNT(DISTINCT da.director_id) = (SELECT MAX(total_directors) FROM (SELECT COUNT(DISTINCT director_id) AS total_directors FROM director_admin GROUP BY channel_id) sub)",
        "SELECT c.name, c.internet FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id GROUP BY c.channel_id HAVING COUNT(DISTINCT da.director_id) = (SELECT COUNT(DISTINCT director_id) FROM director_admin GROUP BY channel_id ORDER BY COUNT(DISTINCT director_id) DESC LIMIT 1)",
        "SELECT c.name, c.internet FROM channel as c WHERE c.channel_id IN (SELECT han.channel_id FROM director_admin as han GROUP BY han.channel_id ORDER BY COUNT(DISTINCT han.director_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "nlq": "Find the name of the directors whose age is between 30 and 60.",
    "gold": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
    "infer_predictions": [
      [
        "SELECT D.name FROM director D WHERE D.age BETWEEN 30 AND 60",
        "SELECT name FROM director WHERE age >= 30 AND age <= 60",
        "SELECT d.name FROM director d WHERE d.age > 29 AND d.age < 61",
        "SELECT director.name FROM director WHERE director.age > 29 AND director.age < 61",
        "SELECT name FROM director WHERE age IN (30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60)",
        "SELECT name FROM director WHERE ABS(age - 45) <= 30",
        "SELECT d.name FROM director d WHERE d.age IS NOT NULL AND d.age BETWEEN 30 AND 60",
        "SELECT d.name FROM director d WHERE d.age >= 30 AND d.age <= 60 ORDER BY d.age ASC"
      ]
    ]
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "nlq": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "gold": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
    "infer_predictions": [
      [
        "SELECT channel.name FROM channel JOIN director_admin ON channel.channel_id = director_admin.channel_id JOIN director ON director_admin.director_id = director.director_id GROUP BY channel.channel_id HAVING SUM(CASE WHEN director.age < 40 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN director.age > 60 THEN 1 ELSE 0 END) > 0",
        "SELECT c.name FROM channel c, director d, director_admin da WHERE c.channel_id = da.channel_id AND da.director_id = d.director_id GROUP BY c.channel_id HAVING MIN(d.age) < 40 AND MAX(d.age) > 60",
        "SELECT channel_name FROM (SELECT c.name AS channel_name, MIN(d.age) AS min_age, MAX(d.age) AS max_age FROM channel c INNER JOIN director_admin da ON c.channel_id = da.channel_id INNER JOIN director d ON da.director_id = d.director_id GROUP BY c.channel_id) WHERE min_age < 40 AND max_age > 60",
        "SELECT DISTINCT c.name FROM channel c WHERE EXISTS (SELECT 1 FROM director d INNER JOIN director_admin da ON d.director_id = da.director_id WHERE da.channel_id = c.channel_id AND d.age < 40) AND EXISTS (SELECT 1 FROM director d INNER JOIN director_admin da ON d.director_id = da.director_id WHERE da.channel_id = c.channel_id AND d.age > 60)",
        "SELECT c.name FROM channel c JOIN director_admin da ON c.channel_id = da.channel_id JOIN director d ON da.director_id = d.director_id GROUP BY c.channel_id HAVING MAX(CASE WHEN d.age > 60 THEN 1 ELSE 0 END) = 1 AND MAX(CASE WHEN d.age < 40 THEN 1 ELSE 0 END) = 1",
        "SELECT c.name FROM channel c WHERE c.channel_id IN (SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.age < 40 INTERSECT SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.age > 60)",
        "WITH aged_directors AS (SELECT da.channel_id, MIN(d.age) AS youngest, MAX(d.age) AS eldest FROM director d INNER JOIN director_admin da ON d.director_id = da.director_id GROUP BY da.channel_id) SELECT c.name FROM channel c JOIN aged_directors ad ON c.channel_id = ad.channel_id WHERE ad.youngest < 40 AND ad.eldest > 60",
        "SELECT c.name FROM channel c WHERE (SELECT COUNT(DISTINCT CASE WHEN d.age < 40 THEN 1 WHEN d.age > 60 THEN 1 END) FROM director d JOIN director_admin da ON d.director_id = da.director_id WHERE da.channel_id = c.channel_id) = 2",
        "SELECT DISTINCT c.name FROM channel c, director_admin da, director d WHERE c.channel_id = da.channel_id AND da.director_id = d.director_id AND ((d.age < 40) OR (d.age > 60)) GROUP BY c.channel_id HAVING COUNT(DISTINCT CASE WHEN d.age < 40 THEN 1 ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN d.age > 60 THEN 1 ELSE NULL END) > 0"
      ]
    ]
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "nlq": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "gold": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
    "infer_predictions": [
      [
        "SELECT ch.channel_id, ch.name FROM channel ch WHERE ch.channel_id NOT IN (SELECT da.channel_id FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE d.name = 'Hank Baskett')",
        "SELECT ch.channel_id, ch.name FROM channel ch LEFT JOIN director_admin da ON ch.channel_id = da.channel_id LEFT JOIN director d ON da.director_id = d.director_id WHERE d.name <> 'Hank Baskett' OR d.name IS NULL",
        "SELECT ch.channel_id, ch.name FROM channel ch WHERE NOT EXISTS (SELECT 1 FROM director_admin da JOIN director d ON da.director_id = d.director_id WHERE da.channel_id = ch.channel_id AND d.name = 'Hank Baskett')",
        "SELECT channel_id, name FROM channel WHERE channel_id NOT IN (SELECT da.channel_id FROM director_admin da, director d WHERE da.director_id = d.director_id AND d.name = 'Hank Baskett')",
        "SELECT channel.channel_id, channel.name FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM director_admin WHERE director_id IN (SELECT director_id FROM director WHERE name = 'Hank Baskett'))",
        "SELECT ch.channel_id, ch.name FROM channel ch WHERE NOT EXISTS (SELECT * FROM director d JOIN director_admin da ON d.director_id = da.director_id WHERE da.channel_id = ch.channel_id AND d.name = 'Hank Baskett')",
        "SELECT channel_id, name FROM channel AS ch WHERE channel_id NOT IN (SELECT channel_id FROM director_admin WHERE director_id = (SELECT director_id FROM director WHERE name = 'Hank Baskett'))",
        "SELECT c.channel_id, c.name FROM channel c LEFT JOIN director_admin da ON c.channel_id = da.channel_id LEFT JOIN director d ON da.director_id = d.director_id WHERE d.name != 'Hank Baskett' OR d.name IS NULL",
        "SELECT ch.channel_id, ch.name FROM channel ch LEFT JOIN (SELECT * FROM director WHERE name = 'Hank Baskett') d ON d.director_id IN (SELECT director_id FROM director_admin WHERE channel_id = ch.channel_id) WHERE d.director_id IS NULL"
      ]
    ]
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "nlq": "How many radios are there?",
    "gold": "SELECT count(*) FROM radio",
    "infer_predictions": [
      [
        "SELECT COUNT(radio_id) FROM radio",
        "SELECT COUNT(*) FROM radio",
        "SELECT COUNT(1) FROM radio",
        "SELECT COUNT(radio_id) AS total_radios FROM radio",
        "SELECT COUNT(*) AS TotalCount FROM radio",
        "SELECT COUNT(DISTINCT r.radio_id) FROM radio r",
        "SELECT COUNT(r.radio_id) FROM radio r"
      ]
    ]
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "nlq": "List the transmitters of radios in ascending order of erp kw .",
    "gold": "select transmitter from radio order by erp_kw asc",
    "infer_predictions": [
      [
        "SELECT transmitter FROM radio ORDER BY erp_kw ASC",
        "SELECT r.transmitter FROM radio r ORDER BY r.erp_kw ASC",
        "SELECT r.transmitter FROM radio r ORDER BY erp_kw",
        "SELECT transmitter AS Transmitter FROM radio ORDER BY erp_kw ASC",
        "SELECT transmitter FROM radio r ORDER BY r.erp_kw",
        "SELECT Transmitter AS transmitter FROM radio ORDER BY erp_kw ASC"
      ]
    ]
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "nlq": "What are the names and original air dates of tv shows?",
    "gold": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
    "infer_predictions": [
      [
        "SELECT tv_show_name, original_airdate FROM tv_show;",
        "SELECT tv.tv_show_name, tv.original_airdate FROM tv_show tv;",
        "SELECT ttv.tv_show_name, ttv.original_airdate FROM tv_show ttv;",
        "SELECT * FROM (SELECT tv_show_name, original_airdate FROM tv_show);",
        "SELECT ts.tv_show_name, ts.original_airdate FROM tv_show ts;",
        "SELECT tshow.tv_show_name, tshow.original_airdate FROM tv_show tshow;",
        "SELECT every_show.tv_show_name, every_show.original_airdate FROM tv_show every_show;"
      ]
    ]
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "nlq": "List the station names of city channels whose affiliation is not \"ABC\".",
    "gold": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
    "infer_predictions": [
      [
        "SELECT station_name FROM city_channel WHERE affiliation <> 'ABC'",
        "SELECT cc.station_name FROM city_channel AS cc WHERE cc.affiliation != 'ABC'",
        "SELECT cc.station_name FROM city_channel cc WHERE cc.affiliation NOT IN ('ABC')",
        "SELECT DISTINCT cc.station_name FROM city_channel cc WHERE cc.affiliation IS NOT 'ABC'",
        "SELECT station_name FROM city_channel WHERE NOT(affiliation = 'ABC')",
        "SELECT station_name FROM city_channel WHERE affiliation NOT LIKE 'ABC'",
        "SELECT station_name FROM city_channel WHERE 'ABC' <> affiliation",
        "SELECT cc.station_name FROM city_channel cc WHERE 'ABC' != cc.affiliation",
        "SELECT station_name FROM city_channel WHERE ('ABC' NOT IN (affiliation))",
        "SELECT station_name FROM city_channel AS cc WHERE cc.affiliation IS NOT 'ABC'"
      ]
    ]
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "nlq": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "gold": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
    "infer_predictions": [
      [
        "SELECT transmitter FROM radio WHERE erp_kw > 150 OR erp_kw < 30",
        "SELECT r.transmitter FROM radio r WHERE r.erp_kw > 150 OR r.erp_kw < 30",
        "SELECT transmitter FROM radio WHERE erp_kw NOT BETWEEN 30 AND 150",
        "SELECT transmitter FROM radio WHERE erp_kw < 30 UNION SELECT transmitter FROM radio WHERE erp_kw > 150",
        "SELECT transmitter FROM radio WHERE erp_kw > 150 UNION ALL SELECT transmitter FROM radio WHERE erp_kw < 30",
        "SELECT r1.transmitter FROM radio r1 WHERE r1.erp_kw > 150 OR r1.erp_kw < 30"
      ]
    ]
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "nlq": "What is the transmitter of the radio with the largest ERP_kW?",
    "gold": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT transmitter FROM radio ORDER BY erp_kw DESC LIMIT 1",
        "SELECT transmitter FROM radio WHERE erp_kw = (SELECT MAX(erp_kw) FROM radio)",
        "SELECT r.transmitter FROM radio r WHERE r.erp_kw = (SELECT MAX(erp_kw) FROM radio)",
        "SELECT t.transmitter FROM (SELECT * FROM radio ORDER BY erp_kw DESC LIMIT 1) t",
        "SELECT r.transmitter FROM radio r ORDER BY r.erp_kw DESC LIMIT 1",
        "SELECT r.transmitter FROM (SELECT transmitter, MAX(erp_kw) AS max_erp FROM radio GROUP BY transmitter ORDER BY max_erp DESC LIMIT 1) r",
        "SELECT transmitter FROM radio WHERE erp_kw IN (SELECT MAX(erp_kw) FROM radio)"
      ]
    ]
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "nlq": "What is the average ERP across all radios?",
    "gold": "SELECT avg(ERP_kW) FROM radio",
    "infer_predictions": [
      [
        "SELECT AVG(erp_kw) FROM radio",
        "SELECT AVG(r.erp_kw) FROM radio r",
        "SELECT AVG(erp_kw) AS AverageERP FROM radio",
        "SELECT AVG(erp) FROM (SELECT erp_kw AS erp FROM radio)",
        "SELECT (SUM(erp_kw) / COUNT(*)) FROM radio",
        "SELECT AVG(r.erp_kw) AS Average_Erp FROM radio r",
        "SELECT (SUM(radio.erp_kw) / COUNT(radio.radio_id)) FROM radio",
        "SELECT AVG(erp) FROM (SELECT erp_kw AS erp FROM radio) AS erp_table"
      ]
    ]
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "nlq": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "gold": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
    "infer_predictions": [
      [
        "SELECT affiliation, COUNT(*) AS num_channels FROM city_channel GROUP BY affiliation",
        "SELECT c.affiliation, COUNT(c.id) AS num_channels FROM city_channel c GROUP BY c.affiliation",
        "SELECT t1.affiliation, COUNT(t1.affiliation) AS num_channels FROM city_channel AS t1 GROUP BY t1.affiliation",
        "SELECT affiliation, COUNT(id) FROM city_channel GROUP BY affiliation",
        "SELECT c.affiliation, COUNT(*) FROM city_channel AS c GROUP BY c.affiliation",
        "SELECT cc.affiliation, COUNT(cc.id) FROM city_channel cc GROUP BY cc.affiliation",
        "SELECT c.affiliation, COUNT(DISTINCT c.id) AS num_channels FROM city_channel c GROUP BY c.affiliation",
        "SELECT affiliation, COUNT(id) AS num_channels FROM city_channel GROUP BY 1",
        "SELECT cc.affiliation, COUNT(cc.affiliation) FROM city_channel cc GROUP BY cc.affiliation",
        "SELECT DISTINCT c.affiliation, COUNT(c.id) AS count FROM city_channel c GROUP BY c.affiliation"
      ]
    ]
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "nlq": "Please show the most common affiliation for city channels.",
    "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT affiliation, COUNT(*) AS count FROM city_channel GROUP BY affiliation ORDER BY count DESC LIMIT 1",
        "WITH AffiliationCount AS (SELECT affiliation, COUNT(affiliation) AS cnt FROM city_channel GROUP BY affiliation) SELECT affiliation FROM AffiliationCount ORDER BY cnt DESC LIMIT 1",
        "SELECT affiliation FROM (SELECT affiliation, COUNT(*) AS total FROM city_channel GROUP BY affiliation) ORDER BY total DESC LIMIT 1",
        "SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(AffiliationCount) FROM (SELECT COUNT(*) AS AffiliationCount FROM city_channel GROUP BY affiliation))",
        "SELECT a.affiliation FROM (SELECT affiliation, COUNT(*) total FROM city_channel GROUP BY affiliation) a WHERE a.total = (SELECT MAX(total) FROM (SELECT affiliation, COUNT(*) total FROM city_channel GROUP BY affiliation) b)",
        "SELECT affiliation FROM (SELECT affiliation, RANK() OVER (ORDER BY COUNT(*) DESC) rank_num FROM city_channel GROUP BY affiliation) WHERE rank_num = 1",
        "SELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "nlq": "List the affiliations shared by more than three city channels.",
    "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
    "infer_predictions": [
      [
        "SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) > 3",
        "SELECT cc.affiliation FROM city_channel cc GROUP BY cc.affiliation HAVING COUNT(cc.affiliation) > 3",
        "SELECT distinct affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(id) > 3",
        "SELECT affiliation FROM (SELECT affiliation, COUNT(*) AS channel_count FROM city_channel GROUP BY affiliation) WHERE channel_count > 3",
        "SELECT c2.affiliation FROM (SELECT c.affiliation, COUNT(*) AS cnt FROM city_channel c GROUP BY c.affiliation) c2 WHERE c2.cnt > 3",
        "SELECT a.affiliation FROM city_channel a WHERE (SELECT COUNT(*) FROM city_channel b WHERE b.affiliation = a.affiliation) > 3 GROUP BY a.affiliation",
        "SELECT affiliation FROM city_channel WHERE affiliation IN (SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(id) > 3)",
        "SELECT t.affiliation FROM (SELECT affiliation FROM city_channel GROUP BY affiliation) t LEFT JOIN city_channel ON t.affiliation = city_channel.affiliation GROUP BY t.affiliation HAVING COUNT(city_channel.id)>3",
        "SELECT DISTINCT aff.affiliation FROM (SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(affiliation) > 3) aff"
      ]
    ]
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "nlq": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "gold": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
    "infer_predictions": [
      [
        "SELECT city, station_name FROM city_channel ORDER BY station_name ASC",
        "SELECT c.city, c.station_name FROM city_channel c ORDER BY c.station_name ASC",
        "SELECT city AS City, station_name AS StationName FROM city_channel ORDER BY StationName ASC",
        "SELECT city_channel.city as City, city_channel.station_name as Station FROM city_channel ORDER BY Station ASC",
        "SELECT * FROM (SELECT city, station_name FROM city_channel) ORDER BY station_name ASC"
      ]
    ]
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "nlq": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "gold": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
    "infer_predictions": [
      [
        "SELECT r.transmitter, cc.city FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id",
        "SELECT r.transmitter, cc.city FROM radio AS r INNER JOIN city_channel_radio AS ccr ON r.radio_id = ccr.radio_id INNER JOIN city_channel AS cc ON cc.id = ccr.city_channel_id",
        "SELECT transmitter, city FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id",
        "SELECT r.transmitter AS Transmitter, cc.city AS City FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.radio_id = ccr.radio_id AND ccr.city_channel_id = cc.id",
        "SELECT transmitter, city FROM radio, city_channel_radio, city_channel WHERE radio.radio_id = city_channel_radio.radio_id AND city_channel_radio.city_channel_id = city_channel.id",
        "SELECT r.transmitter, cc.city FROM radio r CROSS JOIN city_channel cc JOIN city_channel_radio ccr ON cc.id = ccr.city_channel_id WHERE r.radio_id = ccr.radio_id",
        "SELECT r1.transmitter AS transmitter, cc1.city AS city FROM (SELECT * FROM radio) r1 JOIN (SELECT * FROM city_channel_radio) ccr1 ON r1.radio_id = ccr1.radio_id JOIN (SELECT * FROM city_channel) cc1 ON ccr1.city_channel_id = cc1.id",
        "SELECT r.transmitter, cc.city FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id INNER JOIN city_channel cc ON cc.id = ccr.city_channel_id",
        "SELECT r.transmitter, cc.city FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id LEFT JOIN city_channel cc ON ccr.city_channel_id = cc.id",
        "SELECT DISTINCT r.transmitter, cc.city FROM radio r, city_channel cc, city_channel_radio ccr WHERE r.radio_id = ccr.radio_id AND ccr.city_channel_id = cc.id"
      ]
    ]
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "nlq": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "gold": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
    "infer_predictions": [
      [
        "SELECT r.transmitter, cc.station_name FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id ORDER BY r.erp_kw DESC",
        "SELECT transmitter, station_name FROM radio INNER JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id INNER JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id ORDER BY erp_kw DESC",
        "SELECT r.transmitter AS Transmitter, cc.station_name AS Station FROM radio As r INNER JOIN city_channel_radio As ccr ON r.radio_id = ccr.radio_id INNER JOIN city_channel As cc ON cc.id = ccr.city_channel_id ORDER BY r.erp_kw DESC",
        "SELECT transmitter, station_name FROM radio, city_channel_radio, city_channel WHERE radio.radio_id = city_channel_radio.radio_id AND city_channel_radio.city_channel_id = city_channel.id ORDER BY erp_kw DESC",
        "SELECT r.transmitter, cc.station_name FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.radio_id = ccr.radio_id AND ccr.city_channel_id = cc.id ORDER BY r.erp_kw DESC",
        "SELECT r.transmitter, cc.station_name FROM radio r CROSS JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id CROSS JOIN city_channel cc ON ccr.city_channel_id = cc.id ORDER BY r.erp_kw DESC",
        "SELECT r.transmitter, cc.station_name FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.radio_id = ccr.radio_id AND cc.id = ccr.city_channel_id ORDER BY r.erp_kw DESC",
        "SELECT transmitter, station_name FROM radio NATURAL JOIN city_channel_radio NATURAL JOIN city_channel ORDER BY erp_kw DESC",
        "SELECT r.transmitter, cc.station_name FROM city_channel cc JOIN city_channel_radio ccr ON cc.id = ccr.city_channel_id JOIN radio r ON ccr.radio_id = r.radio_id ORDER BY r.erp_kw DESC"
      ]
    ]
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "nlq": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "gold": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
    "infer_predictions": [
      [
        "SELECT r.transmitter, COUNT(DISTINCT ccr.city_channel_id) FROM radio r JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id GROUP BY r.transmitter",
        "SELECT transmitter, COUNT(id) FROM radio INNER JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id INNER JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id GROUP BY transmitter",
        "SELECT r.transmitter, COUNT(cc.id) AS channel_count FROM radio r INNER JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id JOIN city_channel cc ON ccr.city_channel_id = cc.id GROUP BY r.transmitter",
        "SELECT transmitter, COUNT(*) FROM radio, city_channel_radio, city_channel WHERE radio.radio_id = city_channel_radio.radio_id AND city_channel_radio.city_channel_id = city_channel.id GROUP BY transmitter",
        "SELECT transmitter, COUNT(cc.id) FROM radio r INNER JOIN city_channel_radio ccr ON ccr.radio_id = r.radio_id INNER JOIN city_channel cc ON cc.id = ccr.city_channel_id GROUP BY transmitter",
        "SELECT r.transmitter, COUNT(*) FROM radio r, city_channel_radio ccr, city_channel cc WHERE r.radio_id = ccr.radio_id AND ccr.city_channel_id = cc.id GROUP BY r.transmitter",
        "SELECT transmitter, COUNT(DISTINCT city_channel_id) AS NumberOfChannels FROM radio INNER JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id GROUP BY transmitter",
        "SELECT r.transmitter, COUNT(distinct id) AS ChannelsCount FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id LEFT JOIN city_channel c ON c.id = ccr.city_channel_id GROUP BY r.transmitter",
        "SELECT transmitter, COUNT(DISTINCT cc.id) FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel cc ON city_channel_radio.city_channel_id = cc.id GROUP BY transmitter",
        "SELECT transmitter, COUNT(DISTINCT ccr.city_channel_id) FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id GROUP BY transmitter"
      ]
    ]
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "nlq": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "gold": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
    "infer_predictions": [
      [
        "SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio)",
        "SELECT DISTINCT r.transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL",
        "SELECT DISTINCT transmitter FROM radio WHERE NOT EXISTS (SELECT 1 FROM city_channel_radio WHERE city_channel_radio.radio_id = radio.radio_id)",
        "SELECT DISTINCT transmitter FROM radio r WHERE r.radio_id NOT IN (SELECT DISTINCT radio_id FROM city_channel_radio)",
        "SELECT DISTINCT r.transmitter FROM radio r WHERE r.radio_id NOT IN (SELECT ccr.radio_id FROM city_channel_radio ccr)",
        "SELECT DISTINCT transmitter FROM radio AS r WHERE NOT EXISTS (SELECT NULL FROM city_channel_radio AS ccr WHERE ccr.radio_id = r.radio_id)",
        "SELECT DISTINCT transmitter FROM radio r WHERE r.radio_id NOT IN (SELECT city_channel_radio.radio_id FROM city_channel_radio)",
        "SELECT DISTINCT r.transmitter FROM radio r LEFT OUTER JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL",
        "SELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio WHERE is_online = TRUE OR is_online = FALSE)",
        "SELECT DISTINCT transmitter FROM radio WHERE EXISTS (SELECT * FROM radio r LEFT JOIN city_channel_radio ccr ON r.radio_id = ccr.radio_id WHERE ccr.radio_id IS NULL AND r.transmitter = radio.transmitter)"
      ]
    ]
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "nlq": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1",
        "SELECT v.model FROM vehicle v WHERE v.power > 6000 ORDER BY v.top_speed DESC LIMIT 1",
        "SELECT model FROM (SELECT model, top_speed FROM vehicle WHERE power > 6000) ORDER BY top_speed DESC LIMIT 1",
        "WITH HighPowerVehicles AS (SELECT model, top_speed FROM vehicle WHERE power > 6000) SELECT model FROM HighPowerVehicles ORDER BY top_speed DESC LIMIT 1",
        "SELECT model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 6000) ORDER BY top_speed DESC LIMIT 1",
        "WITH FilteredVehicles AS (SELECT model, top_speed FROM vehicle WHERE power > 6000) SELECT model FROM FilteredVehicles ORDER BY top_speed DESC LIMIT 1",
        "SELECT v.model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle vi WHERE vi.vehicle_id = v.vehicle_id AND v.power > 6000) ORDER BY v.top_speed DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "nlq": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1",
        "SELECT model FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000)",
        "SELECT model FROM (SELECT model, top_speed FROM vehicle WHERE power > 6000 ORDER BY top_speed DESC) LIMIT 1",
        "SELECT v.model FROM (SELECT model, MAX(top_speed) AS topspeed FROM vehicle WHERE power > 6000) AS v",
        "WITH HighPowerVehicles AS (SELECT model, top_speed FROM vehicle WHERE power > 6000) SELECT model FROM HighPowerVehicles ORDER BY top_speed DESC LIMIT 1",
        "SELECT model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 6000 AND top_speed = (SELECT MAX(top_speed) FROM vehicle WHERE power > 6000))"
      ]
    ]
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "nlq": "What are the names of the drivers who are citizens of the 'United States'?",
    "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "infer_predictions": [
      [
        "SELECT name FROM driver WHERE citizenship = 'United States'",
        "SELECT name FROM driver WHERE citizenship LIKE 'United States'",
        "SELECT d.name FROM driver d WHERE d.citizenship = 'United States'",
        "SELECT name FROM driver WHERE citizenship IS 'United States'",
        "SELECT name FROM driver WHERE 'United States' = citizenship",
        "SELECT d.name FROM driver d WHERE d.citizenship LIKE 'United States'"
      ]
    ]
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "nlq": "Return the names of drivers with citizenship from the United States.",
    "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "infer_predictions": [
      [
        "SELECT name FROM driver WHERE citizenship = 'United States'",
        "SELECT d.name FROM driver d WHERE d.citizenship = 'United States'",
        "SELECT name FROM driver WHERE citizenship LIKE 'United States'",
        "SELECT d.name FROM driver d WHERE d.citizenship LIKE 'United States'",
        "SELECT name FROM driver WHERE citizenship IN ('United States')",
        "SELECT name FROM driver WHERE LOWER(citizenship) = 'united states'",
        "SELECT d.name FROM driver AS d WHERE LOWER(d.citizenship) = 'united states'"
      ]
    ]
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "nlq": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT driver_id, MAX(vehicle_count) FROM (SELECT driver_id, COUNT(vehicle_id) AS vehicle_count FROM vehicle_driver GROUP BY driver_id)",
        "SELECT D.driver_id, COUNT(D.vehicle_id) AS num_vehicles FROM (SELECT driver_id, vehicle_id FROM vehicle_driver GROUP BY driver_id, vehicle_id) D GROUP BY D.driver_id ORDER BY num_vehicles DESC LIMIT 1",
        "SELECT driver_id, MAX(vehicle_count) FROM (SELECT driver_id, COUNT(*) AS vehicle_count FROM vehicle_driver GROUP BY driver_id) GROUP BY driver_id ORDER BY vehicle_count DESC LIMIT 1",
        "WITH VehicleCounts AS (SELECT driver_id, COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id) SELECT driver_id, MAX(num_vehicles) FROM VehicleCounts",
        "SELECT A.driver_id, A.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id) A WHERE A.num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id))",
        "SELECT driver_id, num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id) WHERE num_vehicles = (SELECT MAX(num_vehicles) FROM (SELECT COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id)) LIMIT 1",
        "SELECT driver_id, num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id ORDER BY num_vehicles DESC LIMIT 1) AS MaxVehicles",
        "SELECT first.driver_id, first.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id ORDER BY num_vehicles DESC LIMIT 1) as first",
        "SELECT X.driver_id, X.num_vehicles FROM (SELECT driver_id, COUNT(vehicle_id) as num_vehicles FROM vehicle_driver GROUP BY driver_id ORDER BY num_vehicles DESC LIMIT 1) as X"
      ]
    ]
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "nlq": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.driver_id, COUNT(vd.vehicle_id) AS num_vehicles FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id GROUP BY d.driver_id ORDER BY num_vehicles DESC LIMIT 1",
        "SELECT vd.driver_id, COUNT(*) AS num_vehicles FROM vehicle_driver vd GROUP BY vd.driver_id ORDER BY num_vehicles DESC LIMIT 1",
        "SELECT driver_id, MAX(vehicle_count) FROM (SELECT driver_id, COUNT(vehicle_id) AS vehicle_count FROM vehicle_driver GROUP BY driver_id) GROUP BY driver_id ORDER BY vehicle_count DESC LIMIT 1",
        "SELECT driver_id, vehicle_count FROM (SELECT driver_id, COUNT(*) AS vehicle_count FROM vehicle_driver GROUP BY driver_id ORDER BY vehicle_count DESC) LIMIT 1",
        "SELECT x.driver_id FROM (SELECT driver_id, COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id ORDER BY num_vehicles DESC LIMIT 1) x",
        "SELECT driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY COUNT(vehicle_id) DESC LIMIT 1",
        "SELECT driver_id, COUNT(*) FROM vehicle_driver GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(vehicle_count) FROM (SELECT COUNT(*) AS vehicle_count FROM vehicle_driver GROUP BY driver_id) t) LIMIT 1",
        "SELECT driverID FROM (SELECT driver_id AS driverID, COUNT(vehicle_id) OVER (PARTITION BY driver_id) AS num_vehicles FROM vehicle_driver) AS drv_order ORDER BY num_vehicles DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "nlq": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
    "infer_predictions": [
      [
        "SELECT MAX(power) AS max_power, AVG(power) AS avg_power FROM vehicle WHERE builder = 'Zhuzhou'",
        "SELECT MAX(v.power) AS MaximumPower, AVG(v.power) AS AveragePower FROM vehicle v WHERE v.builder = 'Zhuzhou'",
        "SELECT MAX(power), AVG(power) FROM vehicle WHERE builder = 'Zhuzhou'",
        "SELECT (SELECT MAX(power) FROM vehicle WHERE builder = 'Zhuzhou') AS max_power, (SELECT AVG(power) FROM vehicle WHERE builder = 'Zhuzhou') AS avg_power",
        "SELECT MAX(power) AS MaximumPower, AVG(power) AS AveragePower FROM vehicle GROUP BY builder HAVING builder = 'Zhuzhou'",
        "SELECT MAX(v.power), AVG(v.power) FROM vehicle v GROUP BY v.builder HAVING v.builder = 'Zhuzhou'",
        "SELECT MAX(vehicle.power) AS MaxPower, AVG(vehicle.power) AS AvgPower FROM vehicle WHERE vehicle.builder = 'Zhuzhou'",
        "SELECT (SELECT MAX(v.power) FROM vehicle v WHERE v.builder = 'Zhuzhou') AS MaxPower, (SELECT AVG(v.power) FROM vehicle v WHERE v.builder = 'Zhuzhou') AS AvgPower",
        "SELECT MAX(v.power) AS MaxPower, AVG(v.power) AS AvgPower FROM vehicle v WHERE v.builder = 'Zhuzhou'"
      ]
    ]
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "nlq": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
    "infer_predictions": [
      [
        "SELECT MAX(power) AS max_power, AVG(power) AS avg_power FROM vehicle WHERE builder = 'Zhuzhou'",
        "SELECT MAX(v.power), AVG(v.power) FROM vehicle AS v WHERE v.builder = 'Zhuzhou'",
        "SELECT MAX(vehicle.power) AS maximum_power, AVG(vehicle.power) AS average_power FROM vehicle WHERE vehicle.builder = 'Zhuzhou'",
        "SELECT (SELECT MAX(power) FROM vehicle WHERE builder = 'Zhuzhou'), (SELECT AVG(power) FROM vehicle WHERE builder = 'Zhuzhou')",
        "SELECT (SELECT MAX(v.power) FROM vehicle AS v WHERE v.builder = 'Zhuzhou'), (SELECT AVG(v.power) FROM vehicle AS v WHERE v.builder = 'Zhuzhou')",
        "SELECT MAX(power), AVG(power) FROM vehicle WHERE builder = 'Zhuzhou' GROUP BY builder",
        "SELECT MAX(v.power) AS maxp, AVG(v.power) AS avgp FROM vehicle v WHERE v.builder = 'Zhuzhou' GROUP BY v.builder",
        "SELECT MAX(v.power) max_power, AVG(v.power) avg_power FROM vehicle v WHERE v.builder = 'Zhuzhou'",
        "SELECT (SELECT MAX(vehicle.power) FROM vehicle WHERE builder = 'Zhuzhou') AS MaxPower, (SELECT AVG(vehicle.power) FROM vehicle WHERE builder = 'Zhuzhou') AS AvgPower",
        "SELECT (SELECT MAX(power) FROM vehicle v WHERE v.builder = 'Zhuzhou'), (SELECT AVG(power) FROM vehicle v WHERE v.builder = 'Zhuzhou')"
      ]
    ]
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "nlq": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT v.vehicle_id FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id ORDER BY COUNT(vd.driver_id) ASC LIMIT 1",
        "SELECT VD.vehicle_id FROM vehicle_driver VD GROUP BY VD.vehicle_id HAVING COUNT(VD.driver_id) = (SELECT MIN(Count) FROM (SELECT COUNT(*) AS Count FROM vehicle_driver GROUP BY vehicle_id)) LIMIT 1",
        "SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id ORDER BY frequency ASC) WHERE frequency = (SELECT MIN(frequency) FROM (SELECT COUNT(driver_id) as frequency FROM vehicle_driver GROUP BY vehicle_id))",
        "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(vehicle_id) ASC, vehicle_id ASC LIMIT 1",
        "SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT MIN(vehicle_id) AS vehicle_id FROM (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(vehicle_id) ASC LIMIT 1)",
        "SELECT a.vehicle_id FROM vehicle_driver a GROUP BY a.vehicle_id ORDER BY COUNT(a.driver_id) ASC LIMIT 1",
        "WITH RankedVehicles AS (SELECT vehicle_id, RANK() OVER (ORDER BY COUNT(driver_id) ASC) AS Rank FROM vehicle_driver GROUP BY vehicle_id) SELECT vehicle_id FROM RankedVehicles WHERE Rank = 1"
      ]
    ]
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "nlq": "Return the id of the vehicle that has been driven the fewest times.",
    "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY COUNT(vehicle_id) ASC LIMIT 1",
        "SELECT V.vehicle_id FROM vehicle_driver V GROUP BY V.vehicle_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT vehicle_id FROM (SELECT vehicle_id, COUNT(vehicle_id) AS count FROM vehicle_driver GROUP BY vehicle_id) AS T ORDER BY T.count ASC LIMIT 1",
        "SELECT V.vehicle_id FROM vehicle_driver V GROUP BY V.vehicle_id HAVING COUNT(V.vehicle_id) = (SELECT MIN(C.count) FROM (SELECT COUNT(vehicle_id) AS count FROM vehicle_driver GROUP BY vehicle_id) C) LIMIT 1",
        "WITH Counted AS (SELECT vehicle_id, COUNT(vehicle_id) AS TimesDriven FROM vehicle_driver GROUP BY vehicle_id) SELECT vehicle_id FROM Counted ORDER BY TimesDriven ASC LIMIT 1",
        "SELECT vehicle_vehicle_id FROM (SELECT vehicle_driver.vehicle_id AS vehicle_vehicle_id, COUNT(vehicle_driver.vehicle_id) AS vehicle_count FROM vehicle_driver GROUP BY vehicle_driver.vehicle_id) AS sub_driver_count ORDER BY vehicle_count ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "nlq": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
    "infer_predictions": [
      [
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996",
        "SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = 1996",
        "SELECT top_speed AS Speed, power AS Horsepower FROM vehicle WHERE build_year = 1996",
        "SELECT top_speed, power FROM vehicle v WHERE v.build_year = 1996 ORDER BY v.vehicle_id",
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996 AND top_speed IS NOT NULL",
        "SELECT v.top_speed, v.power FROM vehicle AS v WHERE build_year = 1996 ORDER BY v.top_speed DESC",
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996 LIMIT 100"
      ]
    ]
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "nlq": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
    "infer_predictions": [
      [
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996",
        "SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = 1996",
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996 ORDER BY top_speed DESC LIMIT 1",
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996 ORDER BY power DESC LIMIT 1",
        "SELECT top_speed, power FROM vehicle WHERE build_year = 1996 LIMIT 1",
        "SELECT top_speed, power FROM vehicle WHERE vehicle.build_year = 1996 AND power = (SELECT MAX(power) FROM vehicle WHERE build_year = 1996)"
      ]
    ]
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "nlq": "What are the build year, model name and builder of the vehicles?",
    "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
    "infer_predictions": [
      [
        "SELECT build_year, model, builder FROM vehicle",
        "SELECT v.build_year, v.model, v.builder FROM vehicle v",
        "SELECT build_year AS 'Year Built', model AS 'Model Name', builder AS 'Builder' FROM vehicle",
        "SELECT build_year, model, builder FROM vehicle GROUP BY build_year, model, builder",
        "SELECT * FROM (SELECT build_year, model, builder FROM vehicle)",
        "SELECT build_year, model, builder FROM vehicle ORDER BY build_year"
      ]
    ]
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "nlq": "Give the build year, model, and builder of each vehicle.",
    "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
    "infer_predictions": [
      [
        "SELECT build_year, model, builder FROM vehicle",
        "SELECT v.build_year, v.model, v.builder FROM vehicle v",
        "SELECT build_year AS YearBuilt, model AS ModelName, builder AS Manufacturer FROM vehicle",
        "SELECT build_year, model, builder FROM vehicle GROUP BY vehicle_id",
        "SELECT DISTINCT V.build_year, V.model, V.builder FROM vehicle V",
        "SELECT vehicle.build_year AS 'Year of Manufacture', vehicle.model AS 'Model', vehicle.builder AS 'Vehicle Builder' FROM vehicle",
        "SELECT v.build_year, v.model, v.builder FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_id = v.vehicle_id)",
        "SELECT build_year, model, builder FROM vehicle ORDER BY build_year DESC"
      ]
    ]
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "nlq": "How many drivers have driven vehicles built in 2012?",
    "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE build_year = 2012)",
        "SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012",
        "SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver WHERE vehicle_id IN (SELECT v.vehicle_id FROM vehicle v WHERE v.build_year = 2012)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT driver_id FROM vehicle_driver vd INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012)",
        "WITH VehiclesOf2012 AS (SELECT vehicle_id FROM vehicle WHERE build_year = 2012) SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver vd WHERE vd.vehicle_id IN (SELECT vehicle_id FROM VehiclesOf2012)",
        "SELECT COUNT(DISTINCT driver_id) FROM (SELECT vd.driver_id FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012)",
        "SELECT DISTINCT COUNT(driver_id) FROM vehicle_driver JOIN vehicle ON vehicle.vehicle_id = vehicle_driver.vehicle_id WHERE vehicle.build_year = 2012",
        "With driven_by as (SELECT DISTINCT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id from vehicle WHERE build_year = 2012)) SELECT COUNT(driver_id) FROM driven_by"
      ]
    ]
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "nlq": "Count the number of different drivers who have driven vehicles built in 2012.",
    "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012",
        "SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE build_year = 2012)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT vd.driver_id FROM vehicle_driver vd INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012)",
        "SELECT DISTINCT COUNT(vd.driver_id) FROM vehicle_driver vd, vehicle v WHERE vd.vehicle_id = v.vehicle_id AND v.build_year = 2012",
        "SELECT COUNT(*) FROM (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE build_year = 2012)) GROUP BY driver_id",
        "SELECT COUNT(distinct vd.driver_id) FROM vehicle_driver vd JOIN vehicle v ON v.vehicle_id = vd.vehicle_id WHERE v.build_year = '2012'",
        "SELECT COUNT(DISTINCT driver_id) AS unique_drivers FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE build_year = 2012)",
        "SELECT COUNT(DISTINCT vd.driver_id) FROM vehicle v JOIN vehicle_driver vd ON vd.vehicle_id = v.vehicle_id AND v.build_year = 2012",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver AS d WHERE EXISTS (SELECT 1 FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.build_year = 2012 AND d.driver_id = vd.driver_id)"
      ]
    ]
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "nlq": "How many drivers have raced in 'NASCAR'?",
    "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT driver.driver_id) FROM driver WHERE racing_series = 'NASCAR'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT driver_id FROM driver WHERE racing_series = 'NASCAR')",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series = 'NASCAR'",
        "SELECT COUNT(DISTINCT id) FROM (SELECT driver_id AS id FROM driver WHERE racing_series = 'NASCAR')",
        "SELECT COUNT(*) FROM driver d WHERE d.racing_series = 'NASCAR' GROUP BY d.driver_id",
        "SELECT COUNT(d.driver_id) FROM (SELECT DISTINCT driver_id FROM driver WHERE racing_series = 'NASCAR') d",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series = 'NASCAR' GROUP BY d.driver_id"
      ]
    ]
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "nlq": "Count the number of drivers who have raced in NASCAR.",
    "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT driver_id) FROM driver WHERE racing_series = 'NASCAR';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT driver_id FROM driver WHERE racing_series = 'NASCAR');",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.racing_series = 'NASCAR';",
        "SELECT COUNT(1) FROM (SELECT driver_id FROM driver WHERE racing_series = 'NASCAR' GROUP BY driver_id);",
        "SELECT COUNT(driver_id) FROM (SELECT driver_id FROM driver WHERE racing_series = 'NASCAR' GROUP BY driver_id);",
        "SELECT SUM(COUNT(*)) OVER () FROM driver WHERE racing_series = 'NASCAR' GROUP BY driver_id;",
        "SELECT COUNT(d.driver_id) FROM (SELECT DISTINCT driver_id FROM driver WHERE racing_series = 'NASCAR') AS d;",
        "SELECT COUNT(d.driver_id) FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE racing_series = 'NASCAR' AND driver_id = d.driver_id);",
        "SELECT COUNT(ALL d.driver_id) FROM driver d WHERE d.racing_series = 'NASCAR';"
      ]
    ]
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "nlq": "What is the average top speed of vehicles?",
    "gold": "SELECT avg(top_speed) FROM vehicle",
    "infer_predictions": [
      [
        "SELECT AVG(top_speed) FROM vehicle",
        "SELECT AVG(v.top_speed) FROM vehicle v",
        "SELECT AVG(top_speed) AS average_speed FROM vehicle",
        "SELECT AVG(v.top_speed) AS average_speed FROM vehicle v",
        "SELECT AVG(v.top_speed) FROM vehicle v GROUP BY v.vehicle_id",
        "SELECT AVG(top_speed) FROM vehicle GROUP BY vehicle_id",
        "SELECT AVG(top_speed) FROM (SELECT top_speed FROM vehicle)",
        "SELECT AVG(v.top_speed) FROM (SELECT top_speed FROM vehicle) v",
        "SELECT AVG(top_speed) FROM vehicle WHERE vehicle_id IS NOT NULL",
        "SELECT AVG(v.top_speed) AS avg_speed FROM vehicle AS v WHERE v.vehicle_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "nlq": "Return the average top speed across all vehicles.",
    "gold": "SELECT avg(top_speed) FROM vehicle",
    "infer_predictions": [
      [
        "SELECT AVG(top_speed) FROM vehicle",
        "SELECT AVG(v.top_speed) FROM vehicle v",
        "SELECT AVG(top_speed) AS average_speed FROM vehicle",
        "SELECT AVG(v.top_speed) AS average_speed FROM vehicle v",
        "SELECT AVG(top_speed) FROM vehicle GROUP BY vehicle_id",
        "SELECT (SUM(top_speed) / COUNT(top_speed)) FROM vehicle",
        "SELECT (SUM(v.top_speed) / COUNT(v.top_speed)) FROM vehicle v",
        "SELECT AVG(top_speed) FROM (SELECT top_speed FROM vehicle) AS subquery"
      ]
    ]
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "nlq": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "gold": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000",
        "SELECT DISTINCT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 5000))",
        "SELECT DISTINCT name FROM driver AS d INNER JOIN vehicle_driver AS vd ON d.driver_id = vd.driver_id INNER JOIN vehicle AS v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000",
        "SELECT DISTINCT d.name FROM driver d, vehicle_driver vd, vehicle v WHERE d.driver_id = vd.driver_id AND vd.vehicle_id = v.vehicle_id AND v.power > 5000",
        "SELECT DISTINCT d.name FROM driver d WHERE EXISTS (SELECT 1 FROM vehicle_driver vd LEFT JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE vd.driver_id = d.driver_id AND v.power > 5000)",
        "SELECT DISTINCT d.name FROM driver d WHERE driver_id IN (SELECT vd.driver_id FROM vehicle_driver vd LEFT JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000)",
        "SELECT DISTINCT d.name FROM driver d, vehicle v, vehicle_driver vd WHERE d.driver_id = vd.driver_id AND vd.vehicle_id = v.vehicle_id AND v.power > 5000",
        "SELECT name FROM (SELECT DISTINCT name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000)",
        "SELECT DISTINCT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver vd INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000)",
        "SELECT d.name AS driver FROM driver d INNER JOIN vehicle_driver vd ON d.driver_id = vd.driver_id INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000 GROUP BY d.name"
      ]
    ]
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "nlq": "Return the names of drivers who have driven vehicles with power over 5000.",
    "gold": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.name FROM driver AS d JOIN vehicle_driver AS vd ON d.driver_id = vd.driver_id JOIN vehicle AS v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000",
        "SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 5000))",
        "SELECT d.name FROM driver d, vehicle_driver vd, vehicle v WHERE d.driver_id = vd.driver_id AND vd.vehicle_id = v.vehicle_id AND v.power > 5000",
        "SELECT name FROM driver WHERE EXISTS (SELECT * FROM vehicle_driver JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE driver.driver_id = vehicle_driver.driver_id AND vehicle.power > 5000)",
        "SELECT DISTINCT name FROM driver d INNER JOIN vehicle_driver vd ON d.driver_id = vd.driver_id INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000",
        "SELECT d.name FROM driver d WHERE d.driver_id IN (SELECT vd.driver_id FROM vehicle_driver vd INNER JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.power > 5000)",
        "SELECT name FROM driver AS d WHERE d.driver_id IN (SELECT vd.driver_id FROM vehicle AS v JOIN vehicle_driver AS vd ON v.vehicle_id = vd.vehicle_id WHERE v.power > 5000)",
        "SELECT d.name FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE power > 5000)",
        "SELECT DISTINCT d.name FROM driver d WHERE EXISTS (SELECT 1 FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.driver_id = d.driver_id AND v.power > 5000)"
      ]
    ]
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "nlq": "Which car models have total production larger than 100 or top speed higher than 150?",
    "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE total_production > 100 OR top_speed > 150;",
        "SELECT v.model FROM vehicle v WHERE v.total_production > 100 OR v.top_speed > 150;",
        "SELECT v.model FROM vehicle v WHERE (v.total_production > 100 OR v.top_speed > 150);",
        "SELECT model FROM vehicle WHERE (total_production > 100) OR (top_speed > 150);",
        "SELECT DISTINCT v.model FROM vehicle v WHERE (v.total_production > 100 OR v.top_speed > 150);",
        "SELECT vehicle.model FROM vehicle WHERE vehicle.total_production > 100 OR vehicle.top_speed > 150 ORDER BY vehicle.model;",
        "SELECT model FROM vehicle WHERE total_production > 100 UNION SELECT model FROM vehicle WHERE top_speed > 150;"
      ]
    ]
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "nlq": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE total_production > 100 OR top_speed > 150;",
        "SELECT v.model FROM vehicle v WHERE v.total_production > 100 OR v.top_speed > 150;",
        "SELECT model FROM vehicle v WHERE v.total_production > 100 OR v.top_speed > 150;"
      ]
    ]
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "nlq": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
    "infer_predictions": [
      [
        "SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "SELECT build_year, model FROM vehicle WHERE model LIKE '%DJ%' ORDER BY build_year",
        "SELECT * FROM (SELECT model, build_year FROM vehicle) WHERE model LIKE '%DJ%'",
        "SELECT build_year, model FROM vehicle WHERE INSTR(model, 'DJ') > 0",
        "SELECT v.model, v.build_year FROM vehicle v WHERE v.model LIKE '%DJ%'",
        "SELECT model AS car_model, build_year AS year_built FROM vehicle WHERE model LIKE '%DJ%'",
        "SELECT model, build_year FROM vehicle WHERE model GLOB '*DJ*'",
        "SELECT v.model, v.build_year FROM vehicle AS v WHERE v.model LIKE '%DJ%' ORDER BY v.build_year DESC",
        "SELECT model, build_year FROM vehicle WHERE substring(model, 0, 3) = 'DJ'"
      ]
    ]
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "nlq": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
    "infer_predictions": [
      [
        "SELECT model, build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "SELECT v.model, v.build_year FROM vehicle v WHERE v.model LIKE '%DJ%'",
        "SELECT model AS car_model, build_year AS car_build_year FROM vehicle WHERE model LIKE '%DJ%'",
        "SELECT model, build_year FROM vehicle WHERE instr(model, 'DJ') > 0",
        "SELECT v.model, v.build_year FROM vehicle v WHERE v.model GLOB '*DJ*'",
        "SELECT v1.model, v1.build_year FROM vehicle v1 WHERE v1.model LIKE '%DJ%'"
      ]
    ]
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "nlq": "What are the models which have not been driven by any drivers?",
    "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver)",
        "SELECT v.model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.vehicle_id IS NULL",
        "SELECT v.model FROM vehicle v WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id)",
        "SELECT model FROM vehicle EXCEPT SELECT v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id",
        "SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT DISTINCT vehicle_id FROM vehicle_driver)",
        "SELECT v.model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vd.vehicle_id FROM vehicle_driver vd)",
        "SELECT v.model FROM vehicle v WHERE NOT EXISTS (SELECT NULL FROM vehicle_driver vd WHERE v.vehicle_id = vd.vehicle_id)",
        "SELECT model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver vd WHERE vd.driver_id IS NOT NULL)",
        "SELECT DISTINCT model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver)",
        "SELECT v.model FROM vehicle v LEFT OUTER JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.driver_id IS NULL"
      ]
    ]
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "nlq": "Return the models of vehicles that have never been driven.",
    "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
    "infer_predictions": [
      [
        "SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver)",
        "SELECT model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vd.vehicle_id FROM vehicle_driver vd)",
        "SELECT model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.driver_id IS NULL",
        "SELECT v.model FROM vehicle v WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id)",
        "SELECT model FROM vehicle WHERE vehicle_id NOT IN (SELECT DISTINCT vehicle_id FROM vehicle_driver)",
        "SELECT v.model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.model HAVING COUNT(vd.driver_id) = 0",
        "SELECT v.model FROM vehicle v WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver WHERE vehicle_id IS NOT NULL)",
        "SELECT model FROM vehicle EXCEPT SELECT v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id",
        "SELECT v.model FROM vehicle v WHERE NOT EXISTS (SELECT vd.vehicle_id FROM vehicle_driver vd WHERE v.vehicle_id = vd.vehicle_id)",
        "SELECT v.model FROM vehicle v WHERE v.vehicle_id NOT IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id)"
      ]
    ]
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "nlq": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
    "infer_predictions": [
      [
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) = 2 OR v.builder = 'Ziyang'",
        "SELECT DISTINCT vehicle_id, model FROM vehicle WHERE builder = 'Ziyang' UNION SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) = 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle WHERE vehicle.builder = 'Ziyang' UNION SELECT vehicle.vehicle_id, vehicle.model FROM vehicle JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id GROUP BY vehicle.vehicle_id, vehicle.model HAVING COUNT(vehicle_driver.driver_id) = 2",
        "SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON vd.vehicle_id = v.vehicle_id GROUP BY v.vehicle_id, v.model HAVING v.builder = 'Ziyang' OR COUNT(DISTINCT vd.driver_id) = 2",
        "SELECT vehicle_id, model FROM (SELECT vehicle_id, model, builder FROM vehicle) AS veh WHERE veh.builder = 'Ziyang' OR veh.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) = 2)",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle LEFT OUTER JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id GROUP BY vehicle.vehicle_id, vehicle.model HAVING (COUNT(DISTINCT vehicle_driver.driver_id) = 2 OR vehicle.builder = 'Ziyang')",
        "SELECT DISTINCT veh.vehicle_id, veh.model FROM vehicle AS veh WHERE veh.builder = 'Ziyang' OR veh.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) = 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) = 2) OR v.builder = 'Ziyang'"
      ]
    ]
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "nlq": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
    "infer_predictions": [
      [
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) = 2 OR v.builder = 'Ziyang'",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2) OR v.builder = 'Ziyang'",
        "SELECT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) = 2 UNION SELECT vehicle_id, model FROM vehicle WHERE builder = 'Ziyang'",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' UNION SELECT vd.vehicle_id, v.model FROM vehicle v INNER JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2",
        "WITH DriverCount AS (SELECT vehicle_id, COUNT(driver_id) as total_drivers FROM vehicle_driver GROUP BY vehicle_id) SELECT v.vehicle_id, v.model FROM vehicle v LEFT JOIN DriverCount dc ON v.vehicle_id = dc.vehicle_id WHERE dc.total_drivers = 2 OR v.builder = 'Ziyang'",
        "SELECT v.vehicle_id, v.model FROM vehicle v JOIN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(driver_id) = 2) vd ON v.vehicle_id = vd.vehicle_id OR v.builder = 'Ziyang'",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(vd.driver_id) = 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.builder = 'Ziyang' OR (SELECT COUNT(*) FROM vehicle_driver WHERE vehicle_id = v.vehicle_id) = 2"
      ]
    ]
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "nlq": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon' OR v.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(distinct driver_id) > 2)",
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v INNER JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2) UNION SELECT DISTINCT vehicle_id, model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver vd JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon')",
        "SELECT vehicle_id, model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2 OR vehicle_id IN (SELECT vehicle_id FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon'))",
        "SELECT v1.vehicle_id, v1.model FROM vehicle v1 WHERE EXISTS (SELECT NULL FROM vehicle_driver vd JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon' AND vd.vehicle_id = v1.vehicle_id) OR v1.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) > 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd WHERE vd.driver_id IN (SELECT d.driver_id FROM driver d WHERE d.name = 'Jeff Gordon')) OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) > 2)",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_driver.vehicle_id FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon') UNION SELECT vehicle.vehicle_id, vehicle.model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2)",
        "SELECT DISTINCT vehicle.vehicle_id, vehicle.model FROM vehicle INNER JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id WHERE vehicle.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver vd JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon' UNION SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2)",
        "WITH QualifiedVehicles AS (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2 UNION SELECT vd.vehicle_id FROM vehicle_driver vd JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon') SELECT vehicle.vehicle_id, model FROM vehicle JOIN QualifiedVehicles ON vehicle.vehicle_id = QualifiedVehicles.vehicle_id",
        "SELECT DISTINCT first.vehicle_id, first.model FROM vehicle AS first WHERE first.vehicle_id IN (SELECT second.vehicle_id FROM vehicle_driver AS second GROUP BY second.vehicle_id HAVING COUNT(DISTINCT second.driver_id) > 2) UNION SELECT vehicle_id, model FROM vehicle WHERE EXISTS (SELECT * FROM vehicle_driver AS first JOIN driver AS sec ON first.driver_id = sec.driver_id WHERE sec.name = 'Jeff Gordon' AND first.vehicle_id = vehicle.vehicle_id)",
        "SELECT vehicle_id, model FROM vehicle WHERE EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.vehicle_id = vehicle.vehicle_id GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2) OR vehicle_id IN (SELECT vehicle_id FROM vehicle_driver INNER JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon')"
      ]
    ]
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "nlq": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) > 2) OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd JOIN driver d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon')",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle INNER JOIN vehicle_driver ON vehicle.vehicle_id = vehicle_driver.vehicle_id INNER JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon' OR vehicle.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2)",
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle AS v JOIN vehicle_driver AS vd ON v.vehicle_id = vd.vehicle_id LEFT JOIN driver AS d ON vd.driver_id = d.driver_id WHERE d.name = 'Jeff Gordon' OR v.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2)",
        "SELECT DISTINCT v.vehicle_id, v.model FROM vehicle v WHERE EXISTS (SELECT 1 FROM driver d JOIN vehicle_driver vd ON vd.driver_id = d.driver_id WHERE vd.vehicle_id = v.vehicle_id AND d.name = 'Jeff Gordon') OR v.vehicle_id IN (SELECT vd.vehicle_id FROM vehicle_driver vd GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) > 2)",
        "SELECT DISTINCT vehicle.vehicle_id, vehicle.model FROM vehicle, vehicle_driver, driver WHERE vehicle.vehicle_id = vehicle_driver.vehicle_id AND vehicle_driver.driver_id = driver.driver_id AND (driver.name = 'Jeff Gordon' OR vehicle.vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2))",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_driver.vehicle_id FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon') OR vehicle_id IN (SELECT vehicle_driver.vehicle_id FROM vehicle_driver GROUP BY vehicle_driver.vehicle_id HAVING COUNT(DISTINCT vehicle_driver.driver_id) > 2)",
        "SELECT v.vehicle_id, v.model FROM vehicle v WHERE EXISTS (SELECT * FROM vehicle_driver vd WHERE vd.vehicle_id = v.vehicle_id GROUP BY vd.vehicle_id HAVING COUNT(DISTINCT vd.driver_id) > 2) OR EXISTS (SELECT * FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE d.name = 'Jeff Gordon' AND vd.vehicle_id = v.vehicle_id)",
        "SELECT v.vehicle_id, v.model FROM vehicle v INNER JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id INNER JOIN driver d ON vd.driver_id = d.driver_id GROUP BY v.vehicle_id, v.model HAVING COUNT(DISTINCT vd.driver_id) > 2 OR MAX(d.name = 'Jeff Gordon') = 1",
        "SELECT vehicle.vehicle_id, vehicle.model FROM vehicle WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id HAVING COUNT(DISTINCT driver_id) > 2 UNION SELECT vehicle_id FROM vehicle_driver JOIN driver ON vehicle_driver.driver_id = driver.driver_id WHERE driver.name = 'Jeff Gordon')"
      ]
    ]
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "nlq": "How many vehicles have maximum top speed?",
    "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(vehicle_id) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT SUM(CASE WHEN top_speed = (SELECT MAX(top_speed) FROM vehicle) THEN 1 ELSE 0 END) FROM vehicle",
        "SELECT COUNT(*) FROM vehicle WHERE top_speed IN (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(*) FROM vehicle V1 WHERE V1.top_speed = (SELECT MAX(V2.top_speed) FROM vehicle V2)",
        "SELECT COUNT(*) FROM vehicle V WHERE V.top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(vehicle_id) FROM vehicle WHERE top_speed IN (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(*) AS VehiclesWithMaxSpeed FROM vehicle V WHERE V.top_speed = (SELECT MAX(top_speed) FROM vehicle V)",
        "SELECT COUNT(*) FROM (SELECT 1 FROM vehicle WHERE vehicle.top_speed = (SELECT MAX(top_speed) FROM vehicle) GROUP BY vehicle_id)"
      ]
    ]
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "nlq": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(vehicle_id) FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(*) FROM vehicle WHERE top_speed IN (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(*) FROM vehicle v WHERE v.top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(*) FROM vehicle v1 WHERE v1.top_speed = (SELECT MAX(v1.top_speed) FROM vehicle v1)",
        "SELECT COUNT(*) FROM vehicle v WHERE EXISTS (SELECT 1 FROM vehicle v2 WHERE v2.top_speed = v.top_speed AND v2.top_speed = (SELECT MAX(top_speed) FROM vehicle))",
        "SELECT COUNT(*) AS total_vehicles_with_max_speed FROM vehicle WHERE top_speed = (SELECT MAX(top_speed) FROM vehicle)",
        "SELECT COUNT(vehicle.vehicle_id) FROM vehicle WHERE vehicle.top_speed IN (SELECT MAX(vehicle.top_speed) FROM vehicle)"
      ]
    ]
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "nlq": "Show all driver names in the alphabetical order.",
    "gold": "SELECT name FROM driver ORDER BY name",
    "infer_predictions": [
      [
        "SELECT name FROM driver ORDER BY name ASC",
        "SELECT name FROM driver GROUP BY name ORDER BY name",
        "SELECT D.name FROM driver D ORDER BY D.name ASC",
        "SELECT name FROM (SELECT name FROM driver) ORDER BY name",
        "SELECT LOWER(name) FROM driver ORDER BY LOWER(name) ASC",
        "SELECT name FROM driver WHERE name IS NOT NULL ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "nlq": "What are the names of drivers, returned in alphbetical order?",
    "gold": "SELECT name FROM driver ORDER BY name",
    "infer_predictions": [
      [
        "SELECT driver.name FROM driver ORDER BY driver.name ASC",
        "SELECT DISTINCT d.name FROM driver d ORDER BY d.name",
        "SELECT d.name FROM driver d ORDER BY d.name ASC",
        "SELECT name FROM driver d ORDER BY d.name ASC",
        "SELECT d.name FROM driver AS d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id ORDER BY d.name ASC",
        "SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver) ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "nlq": "How many drivers have been racing in each racing series?",
    "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
    "infer_predictions": [
      [
        "SELECT racing_series, COUNT(DISTINCT driver_id) AS num_drivers FROM driver GROUP BY racing_series",
        "SELECT d.racing_series, COUNT(DISTINCT d.driver_id) AS num_drivers FROM driver AS d GROUP BY d.racing_series",
        "SELECT racing_series, COUNT(*) FROM (SELECT DISTINCT racing_series, driver_id FROM driver) GROUP BY racing_series",
        "SELECT racing_series, COUNT(unique_driver_id) FROM (SELECT racing_series, driver_id AS unique_driver_id FROM driver GROUP BY racing_series, driver_id) GROUP BY racing_series",
        "SELECT racing_series, COUNT(DISTINCT driver.driver_id) AS num_drivers FROM driver GROUP BY racing_series",
        "SELECT driver.racing_series, COUNT(DISTINCT driver.driver_id) FROM driver GROUP BY driver.racing_series",
        "SELECT racing_series, COUNT(driver_id) FROM (SELECT racing_series, driver_id FROM driver GROUP BY racing_series, driver_id) AS unique_drivers GROUP BY racing_series",
        "SELECT rs, COUNT(*) FROM (SELECT racing_series AS rs, driver_id FROM driver GROUP BY rs, driver_id) GROUP BY rs",
        "SELECT d.racing_series, COUNT(DISTINCT d.driver_id) FROM driver d GROUP BY d.racing_series",
        "SELECT racing_series, COUNT(DISTINCT unique_drivers) FROM (SELECT racing_series, driver_id AS unique_drivers FROM driver) GROUP BY racing_series"
      ]
    ]
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "nlq": "Count the number of drivers that have raced in each series.",
    "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
    "infer_predictions": [
      [
        "SELECT racing_series, COUNT(DISTINCT driver_id) AS num_drivers FROM driver GROUP BY racing_series",
        "SELECT d.racing_series, COUNT(DISTINCT d.driver_id) as num_drivers FROM driver d GROUP BY d.racing_series",
        "SELECT driver.racing_series, COUNT(DISTINCT driver.driver_id) AS num_drivers FROM driver GROUP BY driver.racing_series",
        "SELECT racing_series, COUNT(*) AS num_drivers FROM (SELECT DISTINCT racing_series, driver_id FROM driver) GROUP BY racing_series",
        "SELECT d.racing_series, COUNT(DISTINCT driver_id) FROM driver d GROUP BY d.racing_series",
        "SELECT COUNT(DISTINCT driver_id) AS num_drivers, racing_series FROM driver GROUP BY racing_series",
        "SELECT racing_series, COUNT(DISTINCT d.driver_id) as num_drivers FROM driver d GROUP BY racing_series",
        "SELECT r_series, COUNT(DISTINCT d_id) FROM (SELECT driver_id AS d_id, racing_series AS r_series FROM driver) GROUP BY r_series",
        "SELECT racing_series, COUNT(driver_id) FROM (SELECT DISTINCT racing_series, driver_id FROM driver) GROUP BY racing_series",
        "SELECT racing_series, COUNT(d.driver_id) AS num_drivers FROM (SELECT DISTINCT driver_id, racing_series FROM driver) d GROUP BY d.racing_series"
      ]
    ]
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "nlq": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
    "infer_predictions": [
      [
        "SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model = 'DJ1'",
        "SELECT driver.name, driver.citizenship FROM driver INNER JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id INNER JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.model = 'DJ1'",
        "SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))",
        "SELECT d.name, d.citizenship FROM driver d, vehicle_driver vd, vehicle v WHERE d.driver_id = vd.driver_id AND vd.vehicle_id = v.vehicle_id AND v.model = 'DJ1'",
        "SELECT d1.name, d1.citizenship FROM driver d1 WHERE EXISTS (SELECT 1 FROM vehicle_driver vd1 JOIN vehicle v1 ON vd1.vehicle_id = v1.vehicle_id WHERE vd1.driver_id = d1.driver_id AND v1.model = 'DJ1')",
        "SELECT driver.name, driver.citizenship FROM driver, vehicle_driver, vehicle WHERE driver.driver_id = vehicle_driver.driver_id AND vehicle_driver.vehicle_id = vehicle.vehicle_id AND vehicle.model = 'DJ1'",
        "SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT vehicle_driver.driver_id FROM vehicle_driver JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.model = 'DJ1')",
        "SELECT name, citizenship FROM driver d WHERE EXISTS (SELECT * FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model = 'DJ1' AND vd.driver_id = d.driver_id)",
        "SELECT DISTINCT driver.name, driver.citizenship FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id JOIN vehicle ON vehicle.vehicle_id = vehicle_driver.vehicle_id WHERE vehicle.model = 'DJ1'",
        "SELECT driver.name, driver.citizenship FROM driver JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id INNER JOIN vehicle ON vehicle_driver.vehicle_id = vehicle.vehicle_id WHERE vehicle.model = 'DJ1' GROUP BY driver.name, driver.citizenship"
      ]
    ]
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "nlq": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
    "infer_predictions": [
      [
        "SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model = 'DJ1'",
        "SELECT name, citizenship FROM driver WHERE driver_id IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IN (SELECT vehicle_id FROM vehicle WHERE model = 'DJ1'))",
        "SELECT dr.name, dr.citizenship FROM driver dr, vehicle_driver vd, vehicle vh WHERE dr.driver_id = vd.driver_id AND vh.vehicle_id = vd.vehicle_id AND vh.model = 'DJ1'",
        "SELECT d.name, d.citizenship FROM driver d, vehicle v, vehicle_driver vd WHERE v.model = 'DJ1' AND vd.vehicle_id = v.vehicle_id AND vd.driver_id = d.driver_id",
        "SELECT DISTINCT driver.name, driver.citizenship FROM driver INNER JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id INNER JOIN vehicle ON vehicle.vehicle_id = vehicle_driver.vehicle_id WHERE vehicle.model = 'DJ1'",
        "SELECT d.name, d.citizenship FROM driver AS d WHERE EXISTS (SELECT 1 FROM vehicle_driver AS vd JOIN vehicle AS v ON vd.vehicle_id = v.vehicle_id WHERE vd.driver_id = d.driver_id AND v.model = 'DJ1')",
        "SELECT d.name, d.citizenship FROM driver d WHERE d.driver_id IN (SELECT vd.driver_id FROM vehicle_driver vd JOIN vehicle v ON vd.vehicle_id = v.vehicle_id WHERE v.model = 'DJ1')",
        "SELECT dr.name, dr.citizenship FROM driver dr INNER JOIN vehicle_driver vedr ON dr.driver_id = vedr.driver_id WHERE vedr.vehicle_id IN (SELECT ve.vehicle_id FROM vehicle ve WHERE ve.model = 'DJ1')",
        "SELECT d.name, d.citizenship FROM driver d JOIN vehicle_driver vd ON vd.driver_id = d.driver_id WHERE vd.vehicle_id IN (SELECT v.vehicle_id FROM vehicle v WHERE v.model = 'DJ1')",
        "SELECT d.name, d.citizenship FROM driver AS d JOIN vehicle_driver AS vd ON vd.driver_id = d.driver_id JOIN vehicle AS v ON v.vehicle_id = vd.vehicle_id WHERE v.model = 'DJ1'"
      ]
    ]
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "nlq": "How many drivers have not driven any cars?",
    "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)",
        "SELECT COUNT(d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.driver_id IS NULL",
        "SELECT COUNT(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.driver_id = d.driver_id)",
        "SELECT COUNT(*) FROM (SELECT driver_id FROM driver EXCEPT SELECT driver_id FROM vehicle_driver)",
        "SELECT COUNT(d.driver_id) FROM driver d WHERE d.driver_id NOT IN (SELECT vd.driver_id FROM vehicle_driver vd)",
        "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT DISTINCT driver_id FROM vehicle_driver)",
        "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IS NOT NULL)",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.driver_id NOT IN (SELECT vd.driver_id FROM vehicle_driver vd)",
        "SELECT COUNT(d.driver_id) FROM driver d WHERE NOT EXISTS (SELECT driver_id FROM vehicle_driver vd WHERE vd.driver_id = d.driver_id AND vd.vehicle_id IS NOT NULL)",
        "SELECT COUNT(*) FROM driver AS d LEFT JOIN vehicle_driver AS vd ON d.driver_id = vd.driver_id WHERE vd.vehicle_id IS NULL"
      ]
    ]
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "nlq": "Count the number of drivers who have not driven any vehicles.",
    "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT DISTINCT driver_id FROM vehicle_driver)",
        "SELECT COUNT(driver.driver_id) FROM driver LEFT JOIN vehicle_driver ON driver.driver_id = vehicle_driver.driver_id WHERE vehicle_driver.vehicle_id IS NULL",
        "SELECT COUNT(DISTINCT driver.driver_id) FROM driver WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.driver_id = driver.driver_id)",
        "SELECT COUNT(*) FROM driver d WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.driver_id = d.driver_id)",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON vd.driver_id = d.driver_id WHERE vd.vehicle_id IS NULL",
        "SELECT COUNT(d.driver_id) FROM driver d LEFT OUTER JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE vd.vehicle_id IS NULL",
        "SELECT COUNT(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver WHERE vehicle_id IS NOT NULL)",
        "SELECT (SELECT COUNT(*) FROM driver) - (SELECT COUNT(DISTINCT driver_id) FROM vehicle_driver)",
        "SELECT COUNT(d.driver_id) as driver_count FROM driver d WHERE d.driver_id NOT IN (SELECT v.driver_id FROM vehicle_driver v)",
        "SELECT COUNT(d.driver_id) FROM driver d LEFT JOIN vehicle_driver vd ON d.driver_id = vd.driver_id GROUP BY d.driver_id HAVING COUNT(vd.vehicle_id) = 0"
      ]
    ]
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "nlq": "How many exams are there?",
    "gold": "SELECT count(*) FROM Exams",
    "infer_predictions": [
      [
        "SELECT COUNT(exam_id) FROM exams",
        "SELECT COUNT(*) FROM exams",
        "SELECT COUNT(exam_id) AS total_exams FROM exams",
        "SELECT COUNT(*) AS number_of_exams FROM exams",
        "SELECT COUNT(1) FROM exams",
        "SELECT (SELECT COUNT(*) FROM exams) as total_exams_count",
        "SELECT (SELECT COUNT(exam_id) FROM exams) as exam_count"
      ]
    ]
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "nlq": "Count the number of exams.",
    "gold": "SELECT count(*) FROM Exams",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM exams",
        "SELECT COUNT(exam_id) FROM exams",
        "SELECT COUNT(exam_id) AS exam_count FROM exams",
        "SELECT COUNT(*) AS TotalExams FROM exams",
        "SELECT COUNT(1) FROM exams",
        "SELECT COUNT(*) FROM (SELECT DISTINCT exam_id FROM exams)",
        "SELECT COUNT(exam_id) FROM exams GROUP BY exam_id HAVING COUNT(exam_id) >= 1",
        "SELECT COUNT(DISTINCT e.exam_id) FROM exams e"
      ]
    ]
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "nlq": "List the distinct subject code of exams in ascending alphabetical order .",
    "gold": "select distinct subject_code from exams order by subject_code asc",
    "infer_predictions": [
      [
        "SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC",
        "SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code ASC",
        "SELECT subject_code FROM (SELECT DISTINCT subject_code FROM exams) ORDER BY subject_code ASC",
        "SELECT e.subject_code FROM exams e GROUP BY e.subject_code ORDER BY e.subject_code ASC",
        "SELECT * FROM (SELECT DISTINCT subject_code FROM exams) ORDER BY subject_code ASC",
        "SELECT DISTINCT e.subject_code FROM (SELECT * FROM exams) e ORDER BY e.subject_code ASC",
        "SELECT subject_code FROM exams GROUP BY subject_code ORDER BY subject_code ASC"
      ]
    ]
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "nlq": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "gold": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
    "infer_predictions": [
      [
        "SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC",
        "SELECT DISTINCT e.subject_code FROM exams e ORDER BY e.subject_code",
        "SELECT DISTINCT subject_code FROM exams ORDER BY 1",
        "SELECT subject_code FROM (SELECT DISTINCT subject_code FROM exams) ORDER BY subject_code",
        "SELECT subject_code FROM exams GROUP BY subject_code ORDER BY subject_code",
        "SELECT DISTINCT exams.subject_code AS SubjectCode FROM exams ORDER BY SubjectCode",
        "SELECT e.subject_code FROM (SELECT DISTINCT subject_code FROM exams) AS e ORDER BY e.subject_code",
        "SELECT * FROM (SELECT DISTINCT subject_code FROM exams) ORDER BY subject_code"
      ]
    ]
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "nlq": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
    "infer_predictions": [
      [
        "SELECT exam_name, exam_date FROM exams WHERE subject_code <> 'Database'",
        "SELECT e.exam_name, e.exam_date FROM exams e WHERE e.subject_code != 'Database'",
        "SELECT exam_name, exam_date FROM exams WHERE NOT subject_code = 'Database'",
        "SELECT e.exam_name, e.exam_date FROM exams e WHERE e.subject_code NOT IN ('Database')",
        "SELECT exam_name, exam_date FROM exams WHERE subject_code IS NOT 'Database'",
        "SELECT e.exam_name, e.exam_date FROM exams e WHERE NOT(e.subject_code LIKE 'Database')",
        "SELECT exam_name, exam_date FROM exams WHERE subject_code NOT GLOB 'Database'",
        "SELECT exam_name, exam_date FROM exams WHERE NOT EXISTS(SELECT 1 FROM exams e WHERE e.subject_code = 'Database' AND e.exam_id = exams.exam_id)",
        "SELECT exams.exam_name, exams.exam_date FROM exams WHERE exams.subject_code NOT BETWEEN 'Database' AND 'Database'",
        "SELECT EXAM_NAME, EXAM_DATE FROM EXAMS WHERE UPPER(SUBJECT_CODE) <> UPPER('Database')"
      ]
    ]
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "nlq": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
    "infer_predictions": [
      [
        "SELECT exam_date, exam_name FROM exams WHERE subject_code != 'Database'",
        "SELECT e.exam_date, e.exam_name FROM exams e WHERE e.subject_code <> 'Database'",
        "SELECT exam_date, exam_name FROM exams WHERE NOT subject_code = 'Database'",
        "SELECT exam_date, exam_name FROM exams WHERE subject_code NOT IN ('Database')",
        "SELECT e.exam_date, e.exam_name FROM exams AS e WHERE e.subject_code NOT LIKE 'Database'",
        "SELECT exam_date, exam_name FROM exams WHERE subject_code IS NOT 'Database'",
        "SELECT exam_date, exam_name FROM exams WHERE (subject_code = 'Database') IS NOT TRUE",
        "SELECT exams.exam_date, exams.exam_name FROM exams WHERE exams.subject_code <> 'Database'",
        "SELECT exam_date, exam_name FROM exams WHERE UPPER(subject_code) != UPPER('Database')"
      ]
    ]
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "nlq": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
    "infer_predictions": [
      [
        "SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC",
        "SELECT e.exam_date FROM exams e WHERE e.subject_code LIKE '%data%' ORDER BY e.exam_date DESC",
        "SELECT e.exam_date FROM exams e WHERE EXISTS (SELECT 1 FROM exams e2 WHERE e2.subject_code LIKE '%data%' AND e2.exam_id = e.exam_id) ORDER BY e.exam_date DESC",
        "SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' COLLATE NOCASE ORDER BY exam_date DESC",
        "SELECT exam_date FROM exams WHERE INSTR(subject_code, 'data') > 0 ORDER BY exam_date DESC",
        "SELECT e.exam_date FROM exams e WHERE e.subject_code LIKE '%data%' AND e.exam_date IS NOT NULL ORDER BY e.exam_date DESC"
      ]
    ]
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "nlq": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
    "infer_predictions": [
      [
        "SELECT exams.exam_date FROM exams WHERE exams.subject_code LIKE '%data%' ORDER BY exams.exam_date DESC",
        "SELECT exam_date FROM exams WHERE subject_code COLLATE UTF8_GENERAL_CI LIKE '%data%' ORDER BY exam_date DESC",
        "SELECT DISTINCT e.exam_date FROM exams e WHERE e.subject_code LIKE '%data%' ORDER BY e.exam_date DESC",
        "SELECT e.exam_date FROM exams e WHERE INSTR(e.subject_code, 'data') > 0 ORDER BY e.exam_date DESC",
        "SELECT * FROM (SELECT exams.exam_date FROM exams WHERE exams.subject_code LIKE '%data%') AS filtered_dates ORDER BY filtered_dates.exam_date DESC",
        "SELECT DISTINCT exam_date FROM (SELECT exam_date FROM exams WHERE subject_code LIKE '%data%') ORDER BY exam_date DESC",
        "SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' GROUP BY exam_date ORDER BY exam_date DESC"
      ]
    ]
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "nlq": "What are the type of questions and their counts?",
    "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
    "infer_predictions": [
      [
        "SELECT type_of_question_code, COUNT(*) AS count FROM questions GROUP BY type_of_question_code",
        "SELECT q.type_of_question_code, COUNT(q.type_of_question_code) AS count FROM questions q GROUP BY q.type_of_question_code",
        "SELECT COUNT(question_id) AS count, type_of_question_code FROM questions GROUP BY type_of_question_code",
        "SELECT type_of_question_code, COUNT(question_id) FROM questions GROUP BY type_of_question_code",
        "SELECT q.type_of_question_code, COUNT(*) FROM questions q GROUP BY q.type_of_question_code",
        "SELECT COUNT(*) AS total, type_of_question_code FROM questions GROUP BY type_of_question_code ORDER BY total DESC",
        "SELECT type_of_question_code, COUNT(type_of_question_code) AS count FROM questions GROUP BY type_of_question_code ORDER BY count",
        "SELECT type_of_question_code, COUNT(1) FROM questions GROUP BY type_of_question_code",
        "SELECT type_of_question_code, COUNT(*) AS num_questions FROM questions GROUP BY type_of_question_code ORDER BY num_questions",
        "SELECT q.type_of_question_code, COUNT(q.question_id) FROM questions q GROUP BY q.type_of_question_code"
      ]
    ]
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "nlq": "For each question type, return its type code and its count of occurrence.",
    "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
    "infer_predictions": [
      [
        "SELECT q.type_of_question_code, COUNT(*) AS count FROM questions q GROUP BY q.type_of_question_code",
        "SELECT type_of_question_code, COUNT(question_id) AS count FROM questions GROUP BY type_of_question_code",
        "SELECT q.type_of_question_code, COUNT(q.question_id) AS occurrence FROM questions q GROUP BY q.type_of_question_code",
        "SELECT q.type_of_question_code AS type_code, COUNT(*) FROM questions q GROUP BY q.type_of_question_code",
        "SELECT tqc.type_of_question_code, COUNT(1) AS total FROM questions AS tqc GROUP BY tqc.type_of_question_code",
        "SELECT COUNT(q.question_id) AS count, q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code",
        "SELECT tmp.type_of_question_code, COUNT(tmp.type_of_question_code) FROM (SELECT type_of_question_code FROM questions) AS tmp GROUP BY tmp.type_of_question_code",
        "SELECT type_of_question_code, COUNT(question_id) FROM questions GROUP BY type_of_question_code",
        "SELECT a.type_of_question_code, COUNT(b.question_id) FROM questions AS a LEFT JOIN questions AS b ON a.question_id = b.question_id GROUP BY a.type_of_question_code",
        "SELECT type_of_question_code AS code, COUNT(*) AS num_of_questions FROM questions GROUP BY code"
      ]
    ]
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "nlq": "What are the distinct student answer texts that received comments \"Normal\"?",
    "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal'",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE sa.comments = 'Normal'",
        "SELECT student_answer_text FROM student_answers WHERE comments = 'Normal' GROUP BY student_answer_text",
        "SELECT student_answer_text FROM student_answers WHERE comments = 'Normal' GROUP BY student_answer_text HAVING COUNT(*) > 0",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE sa.comments = 'Normal' GROUP BY sa.student_answer_text",
        "SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal' ORDER BY student_answer_text",
        "SELECT * FROM (SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal')",
        "SELECT student_answer_text FROM (SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal') t"
      ]
    ]
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "nlq": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal'",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE sa.comments = 'Normal'",
        "SELECT DISTINCT student_answer_text FROM student_answers WHERE comments LIKE 'Normal'",
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text HAVING comments = 'Normal'",
        "SELECT DISTINCT student_answer_text FROM (SELECT student_answer_text, comments FROM student_answers) WHERE comments = 'Normal'",
        "SELECT DISTINCT student_answer_text FROM (SELECT * FROM student_answers WHERE comments = 'Normal')",
        "SELECT student_answer_text FROM student_answers WHERE comments = 'Normal' GROUP BY student_answer_text",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE sa.comments LIKE 'Normal'",
        "SELECT student_answer_text FROM student_answers WHERE comments = 'Normal' GROUP BY student_answer_text HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "nlq": "How many different comments are there for student answers?",
    "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT comments) FROM student_answers",
        "SELECT COUNT(*) FROM (SELECT DISTINCT comments FROM student_answers)",
        "SELECT SUM(1) FROM (SELECT DISTINCT comments FROM student_answers)",
        "SELECT COUNT(DISTINCT comments) AS count_comments FROM student_answers",
        "WITH distinct_comments AS (SELECT DISTINCT comments FROM student_answers) SELECT COUNT(*) FROM distinct_comments",
        "WITH unique_comments AS (SELECT DISTINCT comments FROM student_answers) SELECT COUNT(comments) FROM unique_comments",
        "SELECT COUNT(DISTINCT comments) FROM student_answers WHERE comments IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT comments FROM student_answers GROUP BY comments)"
      ]
    ]
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "nlq": "Count the number of different comments for student answers.",
    "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT comments) FROM student_answers",
        "SELECT COUNT(*) FROM (SELECT DISTINCT comments FROM student_answers)",
        "SELECT COUNT(*) FROM (SELECT comments FROM student_answers GROUP BY comments)",
        "SELECT SUM(counts) FROM (SELECT COUNT(comments) as counts FROM student_answers GROUP BY comments)",
        "SELECT COUNT(DISTINCT sa.comments) FROM student_answers sa",
        "SELECT COUNT(*) FROM (SELECT DISTINCT sa.comments FROM student_answers sa)",
        "SELECT COUNT(DISTINCT comments) FROM student_answers WHERE comments IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT comments FROM student_answers WHERE comments != '')"
      ]
    ]
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "nlq": "List all the student answer texts in descending order of count.",
    "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
    "infer_predictions": [
      [
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(*) DESC;",
        "SELECT sa.student_answer_text FROM student_answers sa GROUP BY sa.student_answer_text ORDER BY COUNT(sa.student_answer_text) DESC;",
        "SELECT sa.student_answer_text FROM student_answers sa GROUP BY sa.student_answer_text ORDER BY COUNT(sa.student_id) DESC;",
        "SELECT s.student_answer_text FROM student_answers s WHERE EXISTS (SELECT 1 FROM questions_in_exams e WHERE s.question_id = e.question_id) GROUP BY s.student_answer_text ORDER BY COUNT(s.student_answer_text) DESC;",
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text HAVING COUNT(student_answer_text) > 0 ORDER BY COUNT(student_answer_text) DESC;",
        "SELECT sa.student_answer_text FROM student_answers sa GROUP BY sa.student_answer_text ORDER BY COUNT(sa.student_answer_id) DESC;",
        "SELECT student_answer_text FROM student_answers JOIN questions_in_exams ON student_answers.exam_id = questions_in_exams.exam_id AND student_answers.question_id = questions_in_exams.question_id GROUP BY student_answer_text ORDER BY COUNT(student_answer_text) DESC"
      ]
    ]
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "nlq": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
    "infer_predictions": [
      [
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(*) DESC",
        "SELECT s.student_answer_text FROM student_answers s GROUP BY s.student_answer_text ORDER BY COUNT(s.student_answer_text) DESC",
        "SELECT s_an.student_answer_text FROM student_answers s_an GROUP BY s_an.student_answer_text ORDER BY COUNT(s_an.student_answer_id) DESC",
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text HAVING COUNT(student_answer_text) > 0 ORDER BY COUNT(student_answer_text) DESC",
        "SELECT student_answer_text, COUNT(*) AS Frequency FROM student_answers GROUP BY student_answer_text ORDER BY Frequency DESC",
        "SELECT S.student_answer_text, COUNT(S.student_answer_id) AS Frequency FROM student_answers S GROUP BY S.student_answer_text ORDER BY Frequency DESC",
        "SELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY COUNT(student_answer_id) DESC",
        "SELECT t.student_answer_text FROM (SELECT student_answer_text, COUNT(*) as Frequency FROM student_answers GROUP BY student_answer_text) t ORDER BY t.Frequency DESC",
        "SELECT student_answer_text, COUNT(student_answer_id) as C FROM student_answers GROUP BY student_answer_text ORDER BY C DESC",
        "SELECT student_answer_text, Frequency FROM (SELECT student_answer_text, COUNT(*) AS Frequency FROM student_answers GROUP BY student_answer_text) GROUPED_DATA ORDER BY Frequency DESC"
      ]
    ]
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "nlq": "Please show the first names of students and the dates of their answers.",
    "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
    "infer_predictions": [
      [
        "SELECT s.first_name, a.date_of_answer FROM students s JOIN student_answers a ON s.student_id = a.student_id",
        "SELECT first_name, date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id",
        "SELECT students.first_name, student_answers.date_of_answer FROM students INNER JOIN student_answers ON students.student_id = student_answers.student_id",
        "SELECT s.first_name, a.date_of_answer FROM students AS s INNER JOIN student_answers AS a ON s.student_id = a.student_id",
        "SELECT DISTINCT s.first_name, a.date_of_answer FROM students s, student_answers a WHERE s.student_id = a.student_id",
        "SELECT s.first_name, a.date_of_answer FROM students s, student_answers a WHERE s.student_id = a.student_id",
        "SELECT first_name, date_of_answer FROM students, student_answers WHERE students.student_id = student_answers.student_id",
        "SELECT DISTINCT first_name, date_of_answer FROM students JOIN student_answers USING(student_id)",
        "SELECT s.first_name AS FirstName, a.date_of_answer AS DateOfAnswer FROM students s JOIN student_answers a ON s.student_id = a.student_id",
        "SELECT students.first_name, student_answers.date_of_answer FROM students, student_answers WHERE students.student_id = student_answers.student_id"
      ]
    ]
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "nlq": "For each student answer, find the first name of the student and the date of the answer.",
    "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
    "infer_predictions": [
      [
        "SELECT s.first_name, sa.date_of_answer FROM student_answers sa JOIN students s ON sa.student_id = s.student_id",
        "SELECT first_name, date_of_answer FROM students, student_answers WHERE students.student_id = student_answers.student_id",
        "SELECT first_name, date_of_answer FROM students INNER JOIN student_answers ON students.student_id = student_answers.student_id",
        "SELECT s.first_name, sa.date_of_answer FROM students AS s INNER JOIN student_answers AS sa ON s.student_id = sa.student_id",
        "SELECT DISTINCT first_name, date_of_answer FROM students JOIN student_answers ON students.student_id = student_answers.student_id",
        "SELECT s.first_name AS FirstName, sa.date_of_answer AS DateOfAnswer FROM students s, student_answers sa WHERE s.student_id = sa.student_id",
        "SELECT st.first_name, st_ans.date_of_answer FROM students st JOIN student_answers st_ans ON st.student_id = st_ans.student_id",
        "SELECT s.first_name AS StudentFirstName, sa.date_of_answer AS AnswerDate FROM students s JOIN student_answers sa ON s.student_id = sa.student_id",
        "SELECT s.first_name AS fname, sa.date_of_answer AS doa FROM students s, student_answers sa WHERE s.student_id = sa.student_id"
      ]
    ]
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "nlq": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
    "infer_predictions": [
      [
        "SELECT s.email_adress, sa.date_of_answer FROM students s JOIN student_answers sa ON s.student_id = sa.student_id ORDER BY sa.date_of_answer DESC",
        "SELECT email_adress, date_of_answer FROM students INNER JOIN student_answers ON students.student_id = student_answers.student_id ORDER BY date_of_answer DESC",
        "SELECT students.email_adress, student_answers.date_of_answer FROM students, student_answers WHERE students.student_id = student_answers.student_id ORDER BY student_answers.date_of_answer DESC",
        "SELECT stu.email_adress, ans.date_of_answer FROM students AS stu JOIN student_answers AS ans ON stu.student_id = ans.student_id ORDER BY ans.date_of_answer DESC",
        "SELECT e_adress.email_adress, dat_ans.date_of_answer FROM students e_adress JOIN student_answers dat_ans ON e_adress.student_id = dat_ans.student_id ORDER BY dat_ans.date_of_answer DESC",
        "SELECT S.email_adress, A.date_of_answer FROM students S LEFT JOIN student_answers A ON S.student_id = A.student_id ORDER BY A.date_of_answer DESC",
        "SELECT (email_adress) AS StudentEmail, (date_of_answer) AS AnswerDate FROM students ST JOIN student_answers SA ON ST.student_id = SA.student_id ORDER BY AnswerDate DESC",
        "SELECT EmailAdress, DateOfAnswer FROM (SELECT students.email_adress as EmailAdress, student_answers.date_of_answer as DateOfAnswer FROM students JOIN student_answers ON students.student_id = student_answers.student_id) ORDER BY DateOfAnswer DESC",
        "SELECT StudentContactInfo.email_adress, AnswerDates.date_of_answer FROM students StudentContactInfo JOIN student_answers AnswerDates ON StudentContactInfo.student_id = AnswerDates.student_id ORDER BY AnswerDates.date_of_answer DESC"
      ]
    ]
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "nlq": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
    "infer_predictions": [
      [
        "SELECT students.first_name || ' ' || last_name AS full_name, student_answers.date_of_answer FROM student_answers JOIN students on student_answers.student_id = students.student_id ORDER BY student_answers.date_of_answer DESC"
      ]
    ]
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "nlq": "Please show the least common assessment for students.",
    "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT assessment FROM (SELECT assessment, COUNT(*) AS cnt FROM student_assessments GROUP BY assessment) ORDER BY cnt ASC LIMIT 1",
        "SELECT assessment FROM student_assessments GROUP BY assessment HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM student_assessments GROUP BY assessment))",
        "WITH AssCount AS (SELECT assessment, COUNT(*) AS cnt FROM student_assessments GROUP BY assessment) SELECT assessment FROM AssCount ORDER BY cnt ASC LIMIT 1",
        "WITH RankedAssessments AS (SELECT assessment, RANK() OVER (ORDER BY COUNT(*) ASC) AS rank FROM student_assessments GROUP BY assessment) SELECT assessment FROM RankedAssessments WHERE rank = 1",
        "SELECT s.assessment FROM student_assessments s JOIN (SELECT assessment, COUNT(*) as cnt FROM student_assessments GROUP BY assessment) sa ON s.assessment = sa.assessment ORDER BY sa.cnt ASC LIMIT 1",
        "SELECT assessment FROM student_assessments GROUP BY assessment HAVING COUNT(assessment) = (SELECT COUNT(assessment) FROM student_assessments GROUP BY assessment ORDER BY COUNT(assessment) LIMIT 1)"
      ]
    ]
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "nlq": "Which assessment has the smallest frequency count?",
    "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT MIN(sub.assessment) FROM (SELECT assessment, COUNT(*) as freq FROM student_assessments GROUP BY assessment ORDER BY freq ASC) sub",
        "WITH AssessmentFrequency AS (SELECT assessment, COUNT(*) AS freq FROM student_assessments GROUP BY assessment) SELECT assessment FROM AssessmentFrequency WHERE freq = (SELECT MIN(freq) FROM AssessmentFrequency)",
        "SELECT sub.assessment FROM (SELECT assessment, COUNT(*) freq FROM student_assessments GROUP BY assessment) as sub WHERE sub.freq = (SELECT MIN(freq) FROM (SELECT COUNT(*) freq FROM student_assessments GROUP BY assessment) sub2)",
        "SELECT (SELECT assessment FROM student_assessments GROUP BY assessment ORDER BY COUNT(*) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "nlq": "Please show the first names of the students that have at least two answer records.",
    "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.first_name FROM students s JOIN student_answers sa ON s.student_id = sa.student_id GROUP BY s.student_id HAVING COUNT(sa.student_answer_id) >= 2",
        "SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2)",
        "SELECT s.first_name FROM students s WHERE EXISTS (SELECT 1 FROM student_answers sa WHERE sa.student_id = s.student_id GROUP BY sa.student_id HAVING COUNT(sa.student_answer_id) >= 2)",
        "SELECT f.first_name FROM (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2) AS x JOIN students AS f ON f.student_id = x.student_id",
        "SELECT DISTINCT f.first_name FROM students f INNER JOIN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2) sa ON f.student_id = sa.student_id",
        "SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(*) >= 2)",
        "SELECT f.first_name FROM students f WHERE (SELECT COUNT(*) FROM student_answers sa WHERE sa.student_id = f.student_id) >= 2",
        "SELECT DISTINCT f.first_name FROM (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(*) >= 2) AS filtered_ids INNER JOIN students f ON f.student_id = filtered_ids.student_id",
        "SELECT f.first_name FROM students f WHERE f.student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) > 1)",
        "SELECT f.first_name FROM students f, (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2) AS subquery WHERE f.student_id = subquery.student_id"
      ]
    ]
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "nlq": "Which students have 2 or more answer records? Give me their first names.",
    "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT s.first_name FROM students s JOIN student_answers sa ON s.student_id = sa.student_id GROUP BY s.student_id HAVING COUNT(sa.student_answer_id) >= 2",
        "SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2)",
        "SELECT DISTINCT first_name FROM students INNER JOIN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(student_answer_id) >= 2) AS MultipleAnswers ON students.student_id = MultipleAnswers.student_id",
        "SELECT first_name FROM students s WHERE EXISTS (SELECT 1 FROM student_answers sa WHERE sa.student_id = s.student_id GROUP BY sa.student_id HAVING COUNT(sa.student_answer_id) >= 2)",
        "SELECT first_name FROM (SELECT s.first_name, COUNT(sa.student_answer_id) AS answers_count FROM students s JOIN student_answers sa ON s.student_id = sa.student_id GROUP BY s.student_id HAVING answers_count >= 2) AS students_with_multiple_answers",
        "SELECT s.first_name FROM students s WHERE (SELECT COUNT(*) FROM student_answers sa WHERE sa.student_id = s.student_id) >= 2",
        "SELECT s.first_name FROM students s INNER JOIN student_answers sa ON s.student_id = sa.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT sa.student_answer_id) >= 2",
        "SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers GROUP BY student_id HAVING COUNT(*) >= 2)",
        "SELECT s.first_name FROM students s JOIN (SELECT sa.student_id FROM student_answers sa GROUP BY sa.student_id HAVING COUNT(sa.student_answer_id) >= 2) filtered ON filtered.student_id = s.student_id",
        "SELECT DISTINCT s.first_name FROM students s JOIN student_answers sa ON s.student_id = sa.student_id GROUP BY s.student_id, s.first_name HAVING COUNT(sa.student_id) >= 2"
      ]
    ]
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "nlq": "What is the most common valid answer text?",
    "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT valid_answer_text FROM valid_answers GROUP BY valid_answer_text ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT valid_answer_text FROM valid_answers WHERE valid_answer_id IN (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT v.valid_answer_text FROM valid_answers v JOIN student_assessments s ON v.valid_answer_id = s.valid_answer_id GROUP BY v.valid_answer_text ORDER BY COUNT(s.valid_answer_id) DESC LIMIT 1",
        "SELECT valid_answer_text FROM (SELECT valid_answer_text, COUNT(*) AS freq FROM valid_answers GROUP BY valid_answer_text ORDER BY freq DESC) LIMIT 1",
        "SELECT v.valid_answer_text FROM (SELECT valid_answer_id, COUNT(*) as popularity FROM student_assessments GROUP BY valid_answer_id ORDER BY popularity DESC LIMIT 1) AS popular JOIN valid_answers v ON popular.valid_answer_id = v.valid_answer_id",
        "SELECT valid_answer_text FROM valid_answers v WHERE v.valid_answer_id = (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT valid_answer_text, COUNT(*) AS cnt FROM valid_answers GROUP BY valid_answer_text ORDER BY cnt DESC LIMIT 1",
        "SELECT ju.valid_answer_text FROM valid_answers ju INNER JOIN (SELECT valid_answer_id, COUNT(*) as total FROM student_assessments GROUP BY valid_answer_id ORDER BY total DESC LIMIT 1) AS su ON ju.valid_answer_id = su.valid_answer_id",
        "SELECT v.valid_answer_text FROM valid_answers v WHERE v.valid_answer_id IN (SELECT valid_answer_id FROM student_assessments sa GROUP BY sa.valid_answer_id HAVING COUNT(sa.student_answer_id) = (SELECT MAX(count_id) FROM (SELECT COUNT(student_answer_id) AS count_id FROM student_assessments GROUP BY valid_answer_id) t)) ORDER BY v.valid_answer_text ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "nlq": "Find the valid answer text that appeared most frequently.",
    "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT valid_answer_text FROM valid_answers WHERE valid_answer_id IN (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT v.valid_answer_text FROM valid_answers v JOIN (SELECT valid_answer_id, COUNT(*) as freq FROM student_assessments GROUP BY valid_answer_id ORDER BY freq DESC LIMIT 1) t ON v.valid_answer_id = t.valid_answer_id",
        "SELECT v.valid_answer_text FROM valid_answers v WHERE v.valid_answer_id = (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT va.valid_answer_text FROM valid_answers va INNER JOIN (SELECT valid_answer_id, COUNT(valid_answer_id) AS cnt FROM student_assessments GROUP BY valid_answer_id ORDER BY cnt DESC LIMIT 1) sa ON va.valid_answer_id = sa.valid_answer_id",
        "SELECT (SELECT valid_answer_text FROM valid_answers WHERE valid_answer_id = sub.valid_answer_id) FROM (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1) sub",
        "SELECT valid_answer_text FROM valid_answers WHERE valid_answer_id = (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(valid_answer_id) DESC LIMIT 1)",
        "WITH Ranked_Valid_Answers AS (SELECT valid_answer_id, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM student_assessments GROUP BY valid_answer_id) SELECT v.valid_answer_text FROM valid_answers v JOIN Ranked_Valid_Answers rva ON v.valid_answer_id = rva.valid_answer_id WHERE rva.rank = 1",
        "SELECT valid_answer_text FROM valid_answers WHERE valid_answer_id = (SELECT valid_answer_id FROM (SELECT valid_answer_id, COUNT(*) AS count FROM student_assessments GROUP BY valid_answer_id) temp_table ORDER BY count DESC LIMIT 1)",
        "SELECT valid_answers.valid_answer_text FROM valid_answers JOIN (SELECT valid_answer_id FROM student_assessments GROUP BY valid_answer_id ORDER BY COUNT(*) DESC LIMIT 1) AS Most_Frequent ON valid_answers.valid_answer_id = Most_Frequent.valid_answer_id",
        "SELECT va.valid_answer_text FROM valid_answers va WHERE va.valid_answer_id = (SELECT sa.valid_answer_id FROM student_assessments sa GROUP BY sa.valid_answer_id ORDER BY COUNT(sa.valid_answer_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "nlq": "List the last names of the students whose gender is not \"M\".",
    "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
    "infer_predictions": [
      [
        "SELECT last_name FROM students WHERE gender_mfu <> 'M'",
        "SELECT last_name FROM students WHERE NOT gender_mfu = 'M'",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu != 'M'",
        "SELECT s.last_name FROM students s WHERE NOT s.gender_mfu = 'M'",
        "SELECT last_name FROM students WHERE gender_mfu NOT IN ('M')",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu NOT IN ('M')",
        "SELECT DISTINCT last_name FROM students WHERE gender_mfu <> 'M'",
        "SELECT s.last_name FROM students AS s WHERE s.gender_mfu <> 'M'",
        "SELECT DISTINCT s.last_name FROM students s WHERE s.gender_mfu != 'M'",
        "SELECT students.last_name FROM students WHERE students.gender_mfu != 'M'"
      ]
    ]
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "nlq": "What are the last names of the students with gender other than \"M\"?",
    "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
    "infer_predictions": [
      [
        "SELECT last_name FROM students WHERE gender_mfu != 'M'",
        "SELECT DISTINCT last_name FROM students WHERE NOT gender_mfu = 'M'",
        "SELECT last_name FROM students WHERE gender_mfu <> 'M'",
        "SELECT last_name FROM students WHERE gender_mfu NOT IN ('M')",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu NOT IN ('M')",
        "SELECT students.last_name FROM students WHERE students.gender_mfu <> 'M'",
        "SELECT s.last_name FROM students s WHERE NOT s.gender_mfu = 'M'",
        "SELECT DISTINCT students.last_name FROM students WHERE NOT students.gender_mfu = 'M'"
      ]
    ]
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "nlq": "List each gender and the corresponding number of students.",
    "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
    "infer_predictions": [
      [
        "SELECT gender_mfu, COUNT(student_id) as number_of_students FROM students GROUP BY gender_mfu",
        "SELECT s.gender_mfu, COUNT(s.student_id) AS count_of_students FROM students s GROUP BY s.gender_mfu",
        "SELECT gender_mfu, COUNT(*) AS total FROM students GROUP BY gender_mfu",
        "SELECT gender_mfu, COUNT(1) as number_of_students FROM students GROUP BY gender_mfu",
        "SELECT s.gender_mfu, COUNT(DISTINCT s.student_id) as number_of_students FROM students s GROUP BY s.gender_mfu",
        "SELECT gender_mfu, COUNT(student_id) FROM students GROUP BY gender_mfu ORDER BY gender_mfu",
        "SELECT s.gender_mfu, SUM(1) AS num_students FROM students s GROUP BY s.gender_mfu",
        "SELECT gender_mfu, COUNT(student_id) FROM students GROUP BY gender_mfu HAVING COUNT(student_id) > 0",
        "SELECT gender_mfu, SUM(CASE WHEN student_id IS NOT NULL THEN 1 ELSE 0 END) as student_count FROM students GROUP BY gender_mfu",
        "SELECT gender_mfu, COUNT(*) AS total FROM (SELECT DISTINCT student_id, gender_mfu FROM students) GROUP BY gender_mfu"
      ]
    ]
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "nlq": "For each gender, return the gender code and the number of students who identify as that gender.",
    "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
    "infer_predictions": [
      [
        "SELECT gender_mfu, COUNT(student_id) FROM students GROUP BY gender_mfu",
        "SELECT s.gender_mfu, COUNT(*) AS total FROM students s GROUP BY s.gender_mfu",
        "SELECT students.gender_mfu, COUNT(students.student_id) AS num_students FROM students GROUP BY students.gender_mfu",
        "SELECT COUNT(student_id), gender_mfu FROM students GROUP BY gender_mfu ORDER BY COUNT(student_id)",
        "SELECT gender_mfu, COUNT(student_id) as count_of_students FROM students GROUP BY gender_mfu",
        "SELECT st.gender_mfu, COUNT(st.student_id) FROM students st GROUP BY st.gender_mfu",
        "SELECT DISTINCT gender_mfu, (SELECT COUNT(*) FROM students WHERE gender_mfu = st.gender_mfu) FROM students st",
        "SELECT s.gender_mfu, COUNT(DISTINCT s.student_id) FROM students s GROUP BY s.gender_mfu",
        "SELECT gender_mfu, COUNT(student_id) AS total_students FROM students GROUP BY gender_mfu",
        "SELECT a.gender_mfu, (SELECT COUNT(*) FROM students w WHERE w.gender_mfu = a.gender_mfu) AS qty FROM students a GROUP BY a.gender_mfu"
      ]
    ]
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "nlq": "List the last names of the students whose gender is \"F\" or \"M\".",
    "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
    "infer_predictions": [
      [
        "SELECT last_name FROM students WHERE gender_mfu IN ('F', 'M');",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu = 'F' OR s.gender_mfu = 'M';",
        "SELECT last_name FROM students WHERE gender_mfu = 'F' UNION SELECT last_name FROM students WHERE gender_mfu = 'M';",
        "SELECT last_name FROM students WHERE 'F' = gender_mfu OR 'M' = gender_mfu;",
        "SELECT DISTINCT last_name FROM students WHERE gender_mfu IN ('F', 'M');",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu IN ('M', 'F');",
        "SELECT last_name FROM students WHERE gender_mfu LIKE 'F' OR gender_mfu LIKE 'M';",
        "SELECT s.last_name FROM (SELECT * FROM students) s WHERE s.gender_mfu = 'F' OR s.gender_mfu = 'M';",
        "SELECT s.last_name FROM students s WHERE s.gender_mfu BETWEEN 'F' AND 'M';",
        "SELECT students.last_name FROM students WHERE students.gender_mfu IN ('F', 'M');"
      ]
    ]
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "nlq": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
    "infer_predictions": [
      [
        "SELECT last_name FROM students WHERE gender_mfu IN ('F', 'M');",
        "SELECT DISTINCT last_name FROM students WHERE gender_mfu = 'F' OR gender_mfu = 'M';",
        "SELECT S.last_name FROM students S WHERE S.gender_mfu = 'M' OR S.gender_mfu = 'F';",
        "SELECT last_name FROM students WHERE gender_mfu IN (SELECT gender_mfu FROM students WHERE gender_mfu = 'M' OR gender_mfu = 'F');",
        "SELECT last_name FROM students WHERE gender_mfu = 'F' UNION SELECT last_name FROM students WHERE gender_mfu = 'M';",
        "SELECT student_id, last_name FROM students WHERE gender_mfu IN ('M', 'F') ORDER BY last_name;",
        "SELECT last_name FROM students AS s WHERE EXISTS (SELECT 1 FROM students AS sub WHERE s.gender_mfu = sub.gender_mfu AND sub.gender_mfu IN ('M', 'F'));",
        "SELECT last_name FROM students WHERE 'M' = gender_mfu OR 'F' = gender_mfu;",
        "SELECT DISTINCT S.last_name FROM students S WHERE 'F' IN (S.gender_mfu) OR 'M' IN (S.gender_mfu);",
        "SELECT last_name FROM (SELECT last_name, gender_mfu FROM students) WHERE gender_mfu IN ('F', 'M')"
      ]
    ]
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "nlq": "List the first names of the students who do not have any answers.",
    "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
    "infer_predictions": [
      [
        "SELECT first_name FROM students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM student_answers)",
        "SELECT s.first_name FROM students s LEFT JOIN student_answers sa ON s.student_id = sa.student_id WHERE sa.student_id IS NULL",
        "SELECT first_name FROM students EXCEPT SELECT first_name FROM students WHERE student_id IN (SELECT student_id FROM student_answers)",
        "SELECT first_name FROM students WHERE NOT EXISTS (SELECT 1 FROM student_answers WHERE student_answers.student_id = students.student_id)",
        "SELECT DISTINCT first_name FROM students LEFT OUTER JOIN student_answers ON students.student_id = student_answers.student_id WHERE student_answers.student_id IS NULL",
        "SELECT s.first_name FROM students s WHERE NOT EXISTS (SELECT student_id FROM student_answers WHERE student_answers.student_id = s.student_id)",
        "SELECT first_name FROM students s WHERE s.student_id NOT IN (SELECT student_id FROM student_answers)",
        "SELECT first_name FROM students WHERE student_id NOT IN (SELECT sa.student_id FROM student_answers sa)",
        "SELECT first_name FROM students s WHERE s.student_id NOT IN (SELECT DISTINCT sa.student_id FROM student_answers sa)",
        "SELECT first_name FROM students AS s WHERE (SELECT COUNT(*) FROM student_answers AS sa WHERE sa.student_id = s.student_id) = 0"
      ]
    ]
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "nlq": "Which students do not have any answers? Find their first names.",
    "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
    "infer_predictions": [
      [
        "SELECT s.first_name FROM students s WHERE NOT EXISTS (SELECT 1 FROM student_answers sa WHERE sa.student_id = s.student_id)",
        "SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_answers)",
        "SELECT s.first_name FROM students s LEFT JOIN student_answers sa ON s.student_id = sa.student_id WHERE sa.student_id IS NULL",
        "SELECT s.first_name FROM students s WHERE s.student_id NOT IN (SELECT DISTINCT student_id FROM student_answers)",
        "SELECT students.first_name FROM students LEFT OUTER JOIN student_answers ON students.student_id = student_answers.student_id WHERE student_answers.student_id IS NULL",
        "SELECT s.first_name FROM students s WHERE NOT EXISTS (SELECT student_id FROM student_answers WHERE student_answers.student_id = s.student_id)",
        "SELECT first_name FROM students AS s WHERE NOT EXISTS (SELECT student_id FROM student_answers AS sa WHERE sa.student_id = s.student_id)",
        "SELECT s.first_name FROM students s LEFT JOIN student_answers sa ON s.student_id = sa.student_id WHERE sa.student_answer_id IS NULL",
        "SELECT DISTINCT s.first_name FROM students s WHERE s.student_id NOT IN (SELECT student_id FROM student_answers)"
      ]
    ]
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "nlq": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa JOIN student_assessments sae ON sa.student_answer_id = sae.student_answer_id WHERE sa.comments IN ('Normal', 'Absent') AND EXISTS (SELECT 1 FROM student_answers sa2 WHERE sa2.student_answer_text = sa.student_answer_text AND sa2.comments <> sa.comments)",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE sa.comments IN ('Normal', 'Absent') GROUP BY sa.student_answer_text HAVING COUNT(DISTINCT sa.comments) > 1",
        "SELECT DISTINCT student_answer_text FROM student_answers WHERE comments = 'Normal' AND student_answer_text IN (SELECT student_answer_text FROM student_answers WHERE comments = 'Absent')",
        "SELECT sa1.student_answer_text FROM student_answers sa1 WHERE sa1.comments = 'Normal' AND EXISTS (SELECT 1 FROM student_answers sa2 WHERE sa2.student_answer_text = sa1.student_answer_text AND sa2.comments = 'Absent')",
        "SELECT sa.student_answer_text FROM student_answers sa WHERE EXISTS (SELECT 1 FROM student_answers sa2 WHERE sa2.student_answer_text = sa.student_answer_text AND sa2.comments = 'Absent') INTERSECT SELECT sa.student_answer_text FROM student_answers sa WHERE sa.comments = 'Normal'",
        "SELECT Normal.student_answer_text FROM (SELECT student_answer_text FROM student_answers WHERE comments = 'Normal') Normal JOIN (SELECT student_answer_text FROM student_answers WHERE comments = 'Absent') Absent ON Normal.student_answer_text = Absent.student_answer_text",
        "SELECT B.student_answer_text FROM student_answers B JOIN (SELECT student_answer_text FROM student_answers WHERE comments = 'Absent') As A ON B.student_answer_text = A.student_answer_text WHERE B.comments = 'Normal'",
        "SELECT student_answer_text FROM (SELECT student_answer_text, MAX(comments) AS MaxComment, MIN(comments) AS MinComment FROM student_answers GROUP BY student_answer_text HAVING MaxComment <> MinComment AND MaxComment IN ('Normal', 'Absent') AND MinComment IN ('Normal', 'Absent'))",
        "SELECT DISTINCT sa1.student_answer_text FROM student_answers sa1, student_answers sa2 WHERE sa1.student_answer_text = sa2.student_answer_text AND sa1.comments = 'Normal' AND sa2.comments = 'Absent'",
        "WITH NormalComments AS (SELECT student_answer_text FROM student_answers WHERE comments = 'Normal'), AbsentComments AS (SELECT student_answer_text FROM student_answers WHERE comments = 'Absent') SELECT nc.student_answer_text FROM NormalComments nc JOIN AbsentComments ac ON nc.student_answer_text = ac.student_answer_text"
      ]
    ]
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "nlq": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.student_answer_text FROM student_answers a WHERE a.comments IN ('Normal', 'Absent') GROUP BY a.student_answer_text HAVING COUNT(DISTINCT a.comments) = 2",
        "SELECT a.student_answer_text FROM student_answers a JOIN (SELECT student_answer_text FROM student_answers WHERE comments = 'Normal') n ON a.student_answer_text = n.student_answer_text WHERE a.comments = 'Absent'",
        "SELECT student_answer_text FROM student_answers WHERE student_answer_id IN (SELECT student_answer_id FROM student_answers WHERE comments = 'Normal') AND comments = 'Absent'",
        "SELECT DISTINCT sa.student_answer_text FROM student_answers sa WHERE EXISTS (SELECT 1 FROM student_answers sa2 WHERE sa2.student_answer_text = sa.student_answer_text AND sa2.comments = 'Absent') AND sa.comments = 'Normal'",
        "SELECT a.student_answer_text FROM student_answers a WHERE a.comments = 'Normal' INTERSECT SELECT a.student_answer_text FROM student_answers a WHERE a.comments = 'Absent'",
        "SELECT student_answer_text FROM student_answers WHERE student_answer_text IN (SELECT student_answer_text FROM student_answers GROUP BY student_answer_text HAVING SUM(CASE WHEN comments = 'Normal' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN comments = 'Absent' THEN 1 ELSE 0 END) > 0)",
        "WITH NormalAnswers AS (SELECT student_answer_text FROM student_answers WHERE comments = 'Normal'), AbsentAnswers AS (SELECT student_answer_text FROM student_answers WHERE comments = 'Absent') SELECT NormalAnswers.student_answer_text FROM NormalAnswers JOIN AbsentAnswers ON NormalAnswers.student_answer_text = AbsentAnswers.student_answer_text",
        "SELECT student_answer_text FROM student_answers WHERE comments = 'Absent' AND student_answer_text IN (SELECT student_answer_text FROM student_answers WHERE comments = 'Normal')",
        "SELECT DISTINCT a1.student_answer_text FROM student_answers a1, student_answers a2 WHERE a1.student_answer_text = a2.student_answer_text AND a1.comments = 'Normal' AND a2.comments = 'Absent'",
        "SELECT DISTINCT first.student_answer_text FROM student_answers first, student_answers second WHERE first.student_answer_id != second.student_answer_id AND first.student_answer_text = second.student_answer_text AND ((first.comments = 'Normal' AND second.comments = 'Absent') OR (first.comments = 'Absent' AND second.comments = 'Normal'))"
      ]
    ]
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "nlq": "Show the types of questions that have at least three questions.",
    "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3",
        "SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(q.question_id) >= 3",
        "SELECT q.type_of_question_code FROM questions AS q WHERE (SELECT COUNT(*) FROM questions q2 WHERE q2.type_of_question_code = q.type_of_question_code) >= 3 GROUP BY q.type_of_question_code",
        "WITH QuestionCount AS (SELECT type_of_question_code, COUNT(question_id) AS total FROM questions GROUP BY type_of_question_code) SELECT type_of_question_code FROM QuestionCount WHERE total >= 3",
        "SELECT COUNT(question_id) AS Total, type_of_question_code FROM questions GROUP BY type_of_question_code HAVING Total >= 3",
        "SELECT q.type_of_question_code FROM (SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(*) >= 3) AS q",
        "SELECT DISTINCT q1.type_of_question_code FROM questions q1 JOIN (SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(*) >= 3) q2 ON q1.type_of_question_code = q2.type_of_question_code",
        "SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING COUNT(DISTINCT q.question_id) >= 3",
        "WITH TypeCounts AS (SELECT type_of_question_code, COUNT(question_id) AS CountQuestions FROM questions GROUP BY type_of_question_code) SELECT type_of_question_code FROM TypeCounts WHERE CountQuestions >= 3",
        "SELECT DISTINCT type_of_question_code FROM questions WHERE type_of_question_code IN (SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(*) >= 3)"
      ]
    ]
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "nlq": "Which types of questions have 3 or more questions? Return the questions type code.",
    "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT type_of_question_code FROM questions GROUP BY type_of_question_code HAVING COUNT(question_id) >= 3",
        "SELECT type_of_question_code FROM (SELECT type_of_question_code FROM questions) AS sub GROUP BY type_of_question_code HAVING COUNT(*) >= 3",
        "SELECT q1.type_of_question_code FROM questions AS q1 WHERE (SELECT COUNT(*) FROM questions AS q2 WHERE q1.type_of_question_code = q2.type_of_question_code) >= 3 GROUP BY q1.type_of_question_code",
        "SELECT DISTINCT q.type_of_question_code FROM questions AS q JOIN (SELECT type_of_question_code, COUNT(*) AS cnt FROM questions GROUP BY type_of_question_code) AS q2 ON q.type_of_question_code = q2.type_of_question_code WHERE q2.cnt >= 3",
        "SELECT COUNT(question_id) AS cnt, type_of_question_code FROM questions GROUP BY type_of_question_code HAVING cnt >= 3",
        "SELECT COUNT(*) AS Count, type_of_question_code FROM (SELECT type_of_question_code, question_id FROM questions) GROUP BY type_of_question_code HAVING Count >= 3",
        "WITH CountQuestions AS (SELECT type_of_question_code, COUNT(question_id) AS cnt FROM questions GROUP BY type_of_question_code) SELECT type_of_question_code FROM CountQuestions WHERE cnt >= 3",
        "SELECT q.type_of_question_code FROM questions q GROUP BY q.type_of_question_code HAVING SUM(1) >= 3"
      ]
    ]
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "nlq": "Show all information on students.",
    "gold": "SELECT * FROM Students",
    "infer_predictions": [
      [
        "SELECT * FROM students",
        "SELECT student_id, first_name, last_name, middle_name, gender_mfu FROM students",
        "SELECT students.* FROM students",
        "SELECT s.* FROM students AS s",
        "SELECT st.student_id, st.first_name, st.last_name, st.middle_name, st.gender_mfu FROM students st",
        "SELECT student_id AS 'Student ID', first_name AS 'First Name', last_name AS 'Last Name', middle_name AS 'Middle Name', gender_mfu AS 'Gender MFU' FROM students"
      ]
    ]
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "nlq": "What is al the available information of each student?",
    "gold": "SELECT * FROM Students",
    "infer_predictions": [
      [
        "SELECT * FROM students;",
        "SELECT students.* FROM students;",
        "SELECT student_id, first_name, last_name, middle_name, gender_mfu FROM students;",
        "SELECT s.student_id, s.first_name, s.last_name, s.middle_name, s.gender_mfu FROM students s;",
        "SELECT student_id AS studentIdentifier, first_name AS firstName, last_name AS lastName, middle_name AS middleName, gender_mfu AS gender FROM students;",
        "SELECT stu.student_id, stu.first_name, stu.last_name, stu.middle_name, stu.gender_mfu FROM students stu;",
        "SELECT * FROM students WHERE student_id IS NOT NULL;",
        "SELECT student_id, first_name, last_name, IFNULL(middle_name, 'Not Provided'), gender_mfu FROM students;"
      ]
    ]
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "nlq": "How many addresses do we have?",
    "gold": "SELECT count(*) FROM Addresses",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM addresses",
        "SELECT COUNT(address_id) FROM addresses",
        "SELECT COUNT(1) FROM addresses",
        "SELECT COUNT(address_id) AS total_addresses FROM addresses",
        "SELECT COUNT(*) AS address_count FROM addresses",
        "SELECT SUM(1) FROM addresses",
        "SELECT COUNT(address_details) FROM addresses",
        "SELECT COUNT(*) FROM (SELECT address_id FROM addresses)"
      ]
    ]
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of addresses.",
    "gold": "SELECT count(*) FROM Addresses",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM addresses;",
        "SELECT COUNT(address_id) FROM addresses;",
        "SELECT COUNT(address_id) AS total_addresses FROM addresses;",
        "SELECT COUNT(address_id) FROM addresses WHERE address_id IS NOT NULL;",
        "SELECT COUNT(*) FROM (SELECT address_id FROM addresses);",
        "SELECT COUNT(*) FROM addresses WHERE address_id IS NOT NULL;",
        "SELECT COUNT(*) AS count_of_addresses FROM addresses;",
        "SELECT COUNT(DISTINCT address_id) AS distinct_address_count FROM addresses;",
        "SELECT COUNT(address_id) FROM addresses GROUP BY address_id HAVING COUNT(*) > 0;"
      ]
    ]
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "nlq": "List all address ids and address details.",
    "gold": "SELECT address_id ,  address_details FROM Addresses",
    "infer_predictions": [
      [
        "SELECT address_id, address_details FROM addresses;",
        "SELECT a.address_id, a.address_details FROM addresses a;",
        "SELECT addr.address_id, addr.address_details FROM addresses addr;",
        "SELECT address_id, address_details FROM addresses ORDER BY address_id;",
        "SELECT * FROM addresses WHERE address_id IN (SELECT address_id FROM addresses);",
        "SELECT address_id AS 'Address ID', address_details AS 'Details' FROM addresses;",
        "SELECT address_id, address_details FROM addresses GROUP BY address_id, address_details;"
      ]
    ]
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "nlq": "What are all the address ids and address details?",
    "gold": "SELECT address_id ,  address_details FROM Addresses",
    "infer_predictions": [
      [
        "SELECT address_id, address_details FROM addresses",
        "SELECT a.address_id, a.address_details FROM addresses a",
        "SELECT address_id, address_details FROM addresses ORDER BY address_id",
        "SELECT * FROM addresses WHERE address_id IS NOT NULL AND address_details IS NOT NULL",
        "SELECT address_id as aid, address_details as details FROM addresses",
        "SELECT address_id, address_details FROM addresses GROUP BY address_id, address_details",
        "SELECT address_id, address_details FROM addresses WHERE address_id IN (SELECT address_id FROM addresses)",
        "SELECT addr.address_id, addr.address_details FROM addresses addr"
      ]
    ]
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "nlq": "How many products do we have?",
    "gold": "SELECT count(*) FROM Products",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM products;",
        "SELECT COUNT(product_id) FROM products;",
        "SELECT COUNT(product_id) AS TotalProducts FROM products;",
        "SELECT COUNT(product_id) FROM products WHERE product_id IS NOT NULL;",
        "SELECT COUNT(*) AS Total FROM products;",
        "SELECT COUNT(1) FROM products;",
        "SELECT SUM(1) FROM products;",
        "SELECT COUNT(product_name) FROM products;",
        "SELECT COUNT(product_type_code) FROM products WHERE product_type_code IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of products.",
    "gold": "SELECT count(*) FROM Products",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM products",
        "SELECT COUNT(product_id) FROM products",
        "SELECT COUNT(1) FROM products",
        "SELECT COUNT(product_id) AS num_products FROM products",
        "SELECT COUNT(product_name) FROM products",
        "SELECT COUNT(IFNULL(product_id, 0)) FROM products",
        "SELECT SUM(1) FROM products",
        "SELECT MAX(rowid) FROM products"
      ]
    ]
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "nlq": "Show all product ids, product type codes, and product name.",
    "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
    "infer_predictions": [
      [
        "SELECT product_id, product_type_code, product_name FROM products;",
        "SELECT p.product_id, p.product_type_code, p.product_name FROM products p;",
        "SELECT product_id, product_type_code, product_name FROM products WHERE product_id IS NOT NULL;",
        "SELECT pr.product_id, pr.product_type_code, pr.product_name FROM products pr;",
        "SELECT DISTINCT p.product_id, p.product_type_code, p.product_name FROM products p;",
        "SELECT product_id, product_type_code, product_name FROM products ORDER BY product_id;",
        "SELECT * FROM (SELECT product_id, product_type_code, product_name FROM products) AS p;"
      ]
    ]
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "nlq": "What are the ids, type codes, and names for all products?",
    "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
    "infer_predictions": [
      [
        "SELECT product_id, product_type_code, product_name FROM products;",
        "SELECT p.product_id, p.product_type_code, p.product_name FROM products p;",
        "SELECT product_id, product_type_code, product_name FROM products ORDER BY product_id;",
        "SELECT product_id AS id, product_type_code AS type_code, product_name AS name FROM products;",
        "SELECT product_id, product_type_code, product_name FROM products WHERE product_id IS NOT NULL;",
        "SELECT product_id, product_type_code, product_name FROM products GROUP BY product_id, product_type_code, product_name;"
      ]
    ]
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "nlq": "What is the price for the product with name Monitor?",
    "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT product_price FROM products WHERE product_name = 'Monitor'",
        "SELECT p.product_price FROM products p WHERE p.product_name = 'Monitor'",
        "SELECT product_price FROM products WHERE product_name LIKE 'Monitor'",
        "SELECT product_price FROM products WHERE product_name = 'Monitor' LIMIT 1"
      ]
    ]
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "nlq": "Give the price of the Monitor product.",
    "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT product_price FROM products WHERE product_name = 'Monitor'",
        "SELECT product_price FROM products WHERE product_name LIKE 'Monitor'",
        "SELECT p.product_price FROM products p WHERE p.product_name = 'Monitor'",
        "SELECT product_price FROM products WHERE LOWER(product_name) = 'monitor'",
        "SELECT (product_price) FROM products WHERE TRIM(product_name) = 'Monitor'",
        "SELECT (product_price) FROM products WHERE product_name = 'Monitor' AND 'alwaysTrue' = 'alwaysTrue'",
        "SELECT p.product_price FROM products p WHERE p.product_name COLLATE NOCASE = 'monitor'"
      ]
    ]
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "nlq": "Show the minimum, average, maximum price for all products.",
    "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
    "infer_predictions": [
      [
        "SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM products",
        "SELECT MIN(products.product_price), AVG(products.product_price), MAX(products.product_price) FROM products",
        "SELECT MIN(p.product_price) AS Minimum, AVG(p.product_price) AS Average, MAX(p.product_price) AS Maximum FROM products AS p",
        "SELECT MinPrice, AvgPrice, MaxPrice FROM (SELECT MIN(product_price) MinPrice, AVG(product_price) AvgPrice, MAX(product_price) MaxPrice FROM products)",
        "SELECT A, B, C FROM (SELECT MIN(product_price) AS A, AVG(product_price) AS B, MAX(product_price) AS C FROM products) AS Stats",
        "SELECT MIN(p.product_price), AVG(p.product_price), MAX(p.product_price) FROM products p",
        "SELECT 'Minimum Price' AS Type, MIN(product_price) AS Price FROM products UNION ALL SELECT 'Average Price', AVG(product_price) FROM products UNION ALL SELECT 'Maximum Price', MAX(product_price) FROM products",
        "SELECT product_stats.MinimumPrice, product_stats.AveragePrice, product_stats.MaximumPrice FROM (SELECT MIN(product_price) AS MinimumPrice, AVG(product_price) AS AveragePrice, MAX(product_price) AS MaximumPrice FROM products) product_stats"
      ]
    ]
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "nlq": "What are the minimum, average, and maximum prices across all products?",
    "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
    "infer_predictions": [
      [
        "SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM products",
        "SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM products AS p",
        "SELECT MIN(p.product_price), AVG(p.product_price), MAX(p.product_price) FROM products p",
        "SELECT MIN(PRICE), AVG(PRICE), MAX(PRICE) FROM (SELECT PRODUCT_PRICE AS PRICE FROM PRODUCTS)"
      ]
    ]
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "nlq": "What is the average price for products with type Clothes?",
    "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
    "infer_predictions": [
      [
        "SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes'",
        "SELECT AVG(p.product_price) FROM products p WHERE p.product_type_code = 'Clothes'",
        "SELECT AVG(product_price) AS average_price FROM products WHERE product_type_code = 'Clothes'",
        "SELECT AVG(p.product_price) AS average_price FROM products p WHERE p.product_type_code = 'Clothes'",
        "SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
        "SELECT AVG(p.product_price) FROM products p WHERE p.product_type_code = 'Clothes' GROUP BY p.product_type_code",
        "SELECT AVG(product_price) AS AveragePrice FROM products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
        "SELECT AVG(p.product_price) AS AveragePrice FROM products p WHERE p.product_type_code = 'Clothes' GROUP BY p.product_type_code",
        "SELECT AVG(product_price) FROM products GROUP BY product_type_code HAVING product_type_code = 'Clothes'",
        "SELECT AVG(p.product_price) FROM products p GROUP BY p.product_type_code HAVING p.product_type_code = 'Clothes'"
      ]
    ]
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "nlq": "Return the average price of Clothes.",
    "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
    "infer_predictions": [
      [
        "SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes'",
        "SELECT AVG(p.product_price) AS average_price FROM products p WHERE p.product_type_code = 'Clothes'",
        "SELECT product_type_code, AVG(product_price) AS avg_price FROM products GROUP BY product_type_code HAVING product_type_code = 'Clothes'",
        "SELECT product_type_code, AVG(product_price) FROM products WHERE product_type_code = 'Clothes' GROUP BY product_type_code",
        "SELECT ROUND(AVG(product_price), 2) FROM products WHERE product_type_code = 'Clothes'"
      ]
    ]
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "nlq": "How many hardware type products do we have?",
    "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(product_id) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(1) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(product_name) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(*) FROM products p WHERE p.product_type_code = 'Hardware'",
        "SELECT SUM(1) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p WHERE p.product_type_code = 'Hardware'"
      ]
    ]
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of products of the type Hardware.",
    "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(product_id) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(1) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(DISTINCT product_name) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT SUM(1) FROM products WHERE product_type_code = 'Hardware'",
        "SELECT COUNT(*) FROM (SELECT * FROM products WHERE product_type_code = 'Hardware')",
        "SELECT COUNT(*) FROM products WHERE product_type_code LIKE 'Hardware'",
        "SELECT COUNT(*) FROM products P WHERE P.product_type_code = 'Hardware'",
        "SELECT COUNT(DISTINCT P.product_id) FROM products P WHERE P.product_type_code = 'Hardware'"
      ]
    ]
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "nlq": "Show all product names with price higher than the average.",
    "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
    "infer_predictions": [
      [
        "SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM products p2)",
        "SELECT DISTINCT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM products p2)",
        "SELECT product_name FROM products WHERE product_price > (SELECT AVG(p.product_price) FROM products p)",
        "SELECT p.product_name FROM products AS p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM products p2)",
        "SELECT DISTINCT p.product_name FROM products AS p WHERE p.product_price > (SELECT AVG(p2.product_price) AS avg_price FROM products p2)",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products AS p2)"
      ]
    ]
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of products that have a price above the average for all products.",
    "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
    "infer_predictions": [
      [
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)",
        "SELECT DISTINCT product_name FROM products WHERE product_price > (SELECT AVG(p.product_price) FROM products p)",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(p1.product_price) FROM products p1)",
        "SELECT prod.product_name FROM products AS prod WHERE prod.product_price > (SELECT AVG(p.product_price) FROM products p)",
        "SELECT products.product_name FROM products WHERE product_price > (SELECT average_price FROM (SELECT AVG(product_price) AS average_price FROM products))",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(prod.product_price) FROM products prod)",
        "SELECT p.product_name FROM products p WHERE p.product_price > (SELECT AVG(product_price) FROM products AS p1)"
      ]
    ]
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "nlq": "Show all hardware product names with price higher than the average price of hardware type products.",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
    "infer_predictions": [
      [
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(p2.product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(p.product_price) FROM products p WHERE product_type_code = 'Hardware' GROUP BY p.product_type_code)",
        "SELECT p.product_name FROM products AS p INNER JOIN (SELECT AVG(product_price) AS avg_price FROM products WHERE product_type_code = 'Hardware') x ON p.product_type_code = 'Hardware' WHERE p.product_price > x.avg_price",
        "SELECT product_name FROM products AS p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(price) FROM (SELECT product_price AS price FROM products WHERE product_type_code = 'Hardware') temp)",
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' AND EXISTS (SELECT 1 FROM products p2 WHERE p2.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware'))",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(products.product_price) FROM products WHERE products.product_type_code = 'Hardware' GROUP BY product_type_code)",
        "SELECT p.product_name FROM (SELECT p1.product_name, product_type_code, product_price FROM products p1 WHERE p1.product_type_code = 'Hardware') p WHERE p.product_price > (SELECT AVG(p2.product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')"
      ]
    ]
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
    "infer_predictions": [
      [
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(p.product_price) FROM products p WHERE p.product_type_code = 'Hardware')",
        "SELECT p1.product_name FROM products p1 WHERE p1.product_type_code = 'Hardware' AND p1.product_price > (SELECT AVG(p2.product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')",
        "SELECT p.product_name FROM products AS p, (SELECT AVG(product_price) AS AvgPrice FROM products WHERE product_type_code = 'Hardware') AS AvgTable WHERE p.product_type_code = 'Hardware' AND p.product_price > AvgTable.AvgPrice",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(pp.product_price) FROM products pp WHERE pp.product_type_code = 'Hardware')",
        "SELECT product_name FROM products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT product_name FROM (SELECT * FROM products WHERE product_type_code = 'Hardware') AS sub WHERE sub.product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT project1.product_name FROM (SELECT * FROM products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM products WHERE product_type_code = 'Hardware')) project1"
      ]
    ]
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "nlq": "What is the name of the most expensive product with type Clothes?",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')",
        "SELECT P.product_name FROM products P WHERE P.product_type_code = 'Clothes' ORDER BY P.product_price DESC LIMIT 1",
        "SELECT P.product_name FROM products P WHERE P.product_type_code = 'Clothes' AND P.product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')",
        "SELECT product_name FROM (SELECT product_name, MAX(product_price) FROM products WHERE product_type_code = 'Clothes')",
        "SELECT product_name FROM (SELECT product_name, RANK() OVER (ORDER BY product_price DESC) rank FROM products WHERE product_type_code = 'Clothes') WHERE rank = 1",
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes' GROUP BY product_type_code)"
      ]
    ]
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "nlq": "Give the name of the most expensive Clothes product.",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC LIMIT 1",
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1",
        "SELECT product_name FROM (SELECT product_name, product_price FROM products WHERE product_type_code = 'Clothes') ORDER BY product_price DESC LIMIT 1",
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes')",
        "SELECT product_name FROM products WHERE product_type_code = 'Clothes' AND product_price = (SELECT MAX(product_price) FROM products WHERE product_type_code = 'Clothes') LIMIT 1",
        "SELECT product_name FROM products WHERE product_id = (SELECT product_id FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "nlq": "What is the product id and product name for the cheapest Hardware type product?",
    "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1",
        "SELECT p.product_id, p.product_name FROM products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1",
        "WITH FilteredProducts AS (SELECT product_id, product_name, product_price FROM products WHERE product_type_code = 'Hardware') SELECT product_id, product_name FROM FilteredProducts ORDER BY product_price ASC LIMIT 1",
        "SELECT product_id, product_name FROM (SELECT product_id, product_name, RANK() OVER (ORDER BY product_price ASC) AS rnk FROM products WHERE product_type_code = 'Hardware') WHERE rnk = 1"
      ]
    ]
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "nlq": "Give the id and name of the cheapest Hardware product.",
    "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT products.product_id, products.product_name FROM products WHERE products.product_type_code = 'Hardware' ORDER BY products.product_price ASC LIMIT 1",
        "SELECT MIN(product_price) AS MinPrice, product_id, product_name FROM products WHERE product_type_code = 'Hardware' GROUP BY product_id, product_name HAVING MinPrice = (SELECT MIN(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT p1.product_id, p1.product_name FROM products p1 WHERE p1.product_type_code = 'Hardware' AND p1.product_price = (SELECT MIN(product_price) FROM products p2 WHERE p2.product_type_code = 'Hardware')",
        "SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM products WHERE product_type_code = 'Hardware')",
        "SELECT p.product_id, p.product_name FROM (SELECT product_id, product_name, product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC ) p LIMIT 1",
        "WITH CheapestHardware AS (SELECT product_id, product_name, MIN(product_price) AS Price FROM products WHERE product_type_code = 'Hardware') SELECT product_id, product_name FROM CheapestHardware"
      ]
    ]
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "nlq": "List all product names in descending order of price.",
    "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
    "infer_predictions": [
      [
        "SELECT product_name FROM products ORDER BY product_price DESC",
        "SELECT p.product_name FROM products p ORDER BY p.product_price DESC",
        "SELECT product_name FROM products WHERE product_price IS NOT NULL ORDER BY product_price DESC",
        "SELECT product_name FROM (SELECT product_name, product_price FROM products) ORDER BY product_price DESC",
        "SELECT products.product_name FROM products WHERE product_price IN (SELECT MAX(product_price) FROM products GROUP BY product_id) ORDER BY product_price DESC"
      ]
    ]
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of the products, sorted by descending price?",
    "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
    "infer_predictions": [
      [
        "SELECT product_name FROM products ORDER BY product_price DESC",
        "SELECT P.product_name FROM products P ORDER BY P.product_price DESC",
        "SELECT product_name FROM products ORDER BY product_price DESC, product_name ASC",
        "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 100",
        "SELECT a.product_name FROM (SELECT * FROM products) AS a ORDER BY a.product_price DESC",
        "SELECT LOWER(product_name) FROM products ORDER BY product_price DESC"
      ]
    ]
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "nlq": "Show all hardware type products in ascending order of price.",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
    "infer_predictions": [
      [
        "SELECT product_name, product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
        "SELECT product_name, product_price FROM products WHERE product_type_code LIKE 'Hardware' ORDER BY product_price ASC",
        "SELECT PRODUCT.product_name, PRODUCT.product_price FROM products PRODUCT WHERE PRODUCT.product_type_code = 'Hardware' ORDER BY PRODUCT.product_price ASC",
        "SELECT product_name, product_price FROM products WHERE product_type_code = 'Hardware' AND product_price IS NOT NULL ORDER BY product_price ASC",
        "SELECT products.product_name, products.product_price FROM products WHERE product_type_code = 'Hardware' AND products.product_price > 0 ORDER BY products.product_price ASC",
        "SELECT product_name, product_price FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 9999999"
      ]
    ]
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of all Hardware products, sorted by price ascending?",
    "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
    "infer_predictions": [
      [
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC",
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC",
        "SELECT p.product_name FROM products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_name",
        "SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price, product_id"
      ]
    ]
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "nlq": "List all product type codes and the number of products in each type.",
    "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
    "infer_predictions": [
      [
        "SELECT product_type_code, COUNT(product_id) AS number_of_products FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, COUNT(p.product_id) AS count_of_products FROM products p GROUP BY p.product_type_code",
        "SELECT products.product_type_code, COUNT(*) AS total_products FROM products GROUP BY products.product_type_code",
        "SELECT p.product_type_code, COUNT(p.product_id) FROM products p GROUP BY p.product_type_code",
        "SELECT product_type_code, COUNT(DISTINCT product_id) AS num_of_products FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, COUNT(DISTINCT p.product_id) FROM products p GROUP BY p.product_type_code",
        "SELECT products.product_type_code, COUNT(products.product_id) FROM products GROUP BY products.product_type_code",
        "SELECT product_type_code, COUNT(1) AS total_products FROM products GROUP BY product_type_code",
        "SELECT product_type_code, COUNT(*) FROM products GROUP BY product_type_code",
        "SELECT product_type_code, COUNT(product_id) AS product_count FROM products GROUP BY product_type_code"
      ]
    ]
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "nlq": "How many products are there for each product type?",
    "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
    "infer_predictions": [
      [
        "SELECT product_type_code, COUNT(product_id) AS product_count FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, COUNT(p.product_id) AS total_products FROM products p GROUP BY p.product_type_code",
        "SELECT COUNT(*) AS count_of_products, product_type_code FROM products GROUP BY product_type_code",
        "SELECT product_type_code, COUNT(DISTINCT product_id) FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, COUNT(*) FROM products p GROUP BY p.product_type_code",
        "SELECT product_type_code, COUNT(1) FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, COUNT(p.product_id) AS num_products FROM products p GROUP BY p.product_type_code",
        "SELECT product_type_code, COUNT(product_id) AS CountOf FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "SELECT COUNT(product_id), product_type_code AS TypeCode FROM products GROUP BY product_type_code",
        "SELECT COUNT(*), product_type_code AS ProductType FROM products GROUP BY product_type_code"
      ]
    ]
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "nlq": "Show all product type codes and the average price for each type.",
    "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
    "infer_predictions": [
      [
        "SELECT product_type_code, AVG(product_price) AS avg_price FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM products p GROUP BY p.product_type_code",
        "SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, AVG(p.product_price) FROM products p GROUP BY p.product_type_code",
        "SELECT products.product_type_code, AVG(products.product_price) AS average_price FROM products GROUP BY products.product_type_code",
        "SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM products AS p GROUP BY p.product_type_code"
      ]
    ]
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "nlq": "What is the average price of products for each product type?",
    "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
    "infer_predictions": [
      [
        "SELECT product_type_code, AVG(product_price) AS avg_price FROM products GROUP BY product_type_code",
        "SELECT p.product_type_code, AVG(p.product_price) AS AveragePrice FROM products p GROUP BY p.product_type_code",
        "SELECT products.product_type_code, AVG(products.product_price) AS AverageProductPrice FROM products GROUP BY products.product_type_code",
        "SELECT p.product_type_code, AVG(p.product_price) FROM products p GROUP BY p.product_type_code",
        "SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code",
        "SELECT product_type_code AS TypeCode, AVG(product_price) AS AveragePrice FROM products GROUP BY TypeCode",
        "SELECT p.product_type_code AS TypeCode, AVG(p.product_price) AS AvgPrice FROM products p GROUP BY TypeCode"
      ]
    ]
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "nlq": "What are the product type code with at least two products?",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
        "SELECT DISTINCT p.product_type_code FROM products p WHERE 2 <= (SELECT COUNT(*) FROM products p2 WHERE p2.product_type_code = p.product_type_code)",
        "SELECT p1.product_type_code FROM products p1 JOIN products p2 ON p1.product_id != p2.product_id AND p1.product_type_code = p2.product_type_code GROUP BY p1.product_type_code",
        "SELECT product_type_code FROM (SELECT product_type_code, COUNT(product_id) AS prod_count FROM products GROUP BY product_type_code) WHERE prod_count >= 2",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2",
        "SELECT DISTINCT product_type_code FROM products WHERE product_type_code IN (SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) > 1)",
        "SELECT t.product_type_code FROM (SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2) t",
        "SELECT pt.product_type_code FROM (SELECT product_type_code, COUNT(*) as cnt FROM products GROUP BY product_type_code) pt WHERE pt.cnt >= 2",
        "SELECT product_type_code FROM (SELECT product_type_code, COUNT(DISTINCT product_id) as total_count FROM products GROUP BY product_type_code) as ps WHERE ps.total_count > 1"
      ]
    ]
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "nlq": "Give the product type codes of product types that have two or more products.",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2",
        "SELECT DISTINCT p1.product_type_code FROM products p1 WHERE (SELECT COUNT(*) FROM products p2 WHERE p2.product_type_code = p1.product_type_code) >= 2",
        "WITH ProductCounts AS (SELECT product_type_code, COUNT(product_id) AS cnt FROM products GROUP BY product_type_code) SELECT product_type_code FROM ProductCounts WHERE cnt >= 2",
        "SELECT products.product_type_code FROM products JOIN (SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2) groupedProducts ON products.product_type_code = groupedProducts.product_type_code GROUP BY products.product_type_code",
        "SELECT DISTINCT p.product_type_code FROM products p WHERE EXISTS (SELECT 1 FROM products WHERE product_type_code = p.product_type_code GROUP BY product_type_code HAVING COUNT(product_id) >= 2)",
        "SELECT product_type_code FROM (SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(*) >= 2) a",
        "SELECT p.product_type_code FROM (SELECT product_type_code, COUNT(*) cnt FROM products GROUP BY product_type_code) p WHERE p.cnt >= 2",
        "SELECT a.product_type_code FROM (SELECT product_type_code, COUNT(product_id) AS CountProduct FROM products GROUP BY product_type_code) a WHERE a.CountProduct >= 2",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING SUM(1) > 1"
      ]
    ]
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "nlq": "What is the product type code with most number of products?",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) DESC LIMIT 1",
        "SELECT product_type_code FROM (SELECT product_type_code, COUNT(*) AS cnt FROM products GROUP BY product_type_code) ORDER BY cnt DESC LIMIT 1",
        "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(product_id) AS cnt FROM products GROUP BY product_type_code))",
        "WITH ProdCount AS (SELECT product_type_code, COUNT(product_id) AS total FROM products GROUP BY product_type_code) SELECT product_type_code FROM ProdCount WHERE total = (SELECT MAX(total) FROM ProdCount)",
        "SELECT p.product_type_code FROM (SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1) p",
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(DISTINCT product_id) DESC LIMIT 1",
        "WITH ProductCounts AS (SELECT product_type_code, COUNT(product_id) as ProductCount FROM products GROUP BY product_type_code) SELECT product_type_code FROM ProductCounts ORDER BY ProductCount DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code ORDER BY COUNT(DISTINCT p.product_id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "nlq": "What is the most frequent product type code?",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) DESC LIMIT 1",
        "SELECT top_product_type.product_type_code FROM (SELECT product_type_code, COUNT(product_type_code) AS frequency FROM products GROUP BY product_type_code) AS top_product_type ORDER BY top_product_type.frequency DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p INNER JOIN order_items oi ON oi.product_id = p.product_id GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p WHERE p.product_id IN (SELECT product_id FROM order_items) GROUP BY p.product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p, order_items oi WHERE p.product_id = oi.product_id GROUP BY p.product_type_code ORDER BY COUNT(p.product_type_code) DESC LIMIT 1",
        "SELECT product_type_code, COUNT(product_type_code) AS frequency FROM products GROUP BY product_type_code ORDER BY frequency DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p INNER JOIN (SELECT product_id FROM order_items) oi ON oi.product_id = p.product_id GROUP BY p.product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.product_type_code FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN customer_orders co ON co.order_id = oi.order_id GROUP BY p.product_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT MAX(product_type.subtotal_count) FROM (SELECT product_type_code, COUNT(*) AS subtotal_count FROM products GROUP BY product_type_code) product_type"
      ]
    ]
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "nlq": "How many customers do we have?",
    "gold": "SELECT count(*) FROM Customers",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers",
        "SELECT COUNT(customer_id) FROM customers",
        "SELECT COUNT(*) AS total_customers FROM customers",
        "SELECT COUNT(DISTINCT customers.customer_id) AS customer_count FROM customers",
        "SELECT COUNT(customer_name) FROM customers WHERE customer_id IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM customers)",
        "SELECT COUNT(*) FROM customers WHERE customer_id IN (SELECT customer_id FROM customers)",
        "SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id > 0"
      ]
    ]
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of customers.",
    "gold": "SELECT count(*) FROM Customers",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers",
        "SELECT COUNT(customer_id) FROM customers",
        "SELECT COUNT(1) FROM customers",
        "SELECT COUNT(customer_name) FROM customers WHERE customer_name IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT customer_id FROM customers)",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM customers)",
        "SELECT COUNT(customer_id) FROM customers GROUP BY customer_id HAVING COUNT(customer_id) >= 1",
        "SELECT (SELECT COUNT(*) FROM customers) AS total_customers"
      ]
    ]
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "nlq": "Show all customer ids and customer names.",
    "gold": "SELECT customer_id ,  customer_name FROM Customers",
    "infer_predictions": [
      [
        "SELECT customer_id, customer_name FROM customers",
        "SELECT customer.customer_id, customer.customer_name FROM customers customer",
        "SELECT customers.customer_id AS customer_id, customers.customer_name AS customer_name FROM customers",
        "SELECT customer_id AS id, customer_name AS name FROM customers",
        "SELECT cust.customer_id, cust.customer_name FROM customers cust",
        "SELECT c.customer_id, c.customer_name FROM customers c",
        "SELECT customers.customer_id, customers.customer_name FROM customers GROUP BY customers.customer_id, customers.customer_name"
      ]
    ]
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "nlq": "What are the ids and names of all customers?",
    "gold": "SELECT customer_id ,  customer_name FROM Customers",
    "infer_predictions": [
      [
        "SELECT customer_id, customer_name FROM customers",
        "SELECT c.customer_name, c.customer_id FROM customers c",
        "SELECT c.customer_id, c.customer_name FROM customers c",
        "SELECT customer_id AS id, customer_name AS name FROM customers",
        "SELECT id, name FROM customers JOIN (SELECT customer_name AS name, customer_id AS id FROM customers) AS alias",
        "SELECT name, id FROM customers JOIN (SELECT customer_id AS id, customer_name AS name FROM customers) AS alias",
        "SELECT customer_name AS name, customer_id AS id FROM customers",
        "SELECT id, name FROM customers JOIN (SELECT customer_name AS name, customer_id AS id FROM customers) as ALIAS"
      ]
    ]
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "nlq": "What is the customer address, customer phone, and customer email for Jeromy?",
    "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT c.customer_address, c.customer_phone, c.customer_email FROM customers c WHERE c.customer_name = 'Jeromy'",
        "SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name = 'Jeromy'",
        "SELECT customer_address AS Address, customer_phone AS Phone, customer_email AS Email FROM customers WHERE customer_name = 'Jeromy'",
        "SELECT cust.customer_address, cust.customer_phone, cust.customer_email FROM customers cust WHERE cust.customer_name = 'Jeromy'",
        "SELECT c.customer_address, c.customer_phone, c.customer_email FROM customers c WHERE c.customer_name LIKE 'Jeromy'",
        "SELECT customer_address, customer_phone, customer_email FROM customers WHERE customer_name LIKE 'Jeromy'"
      ]
    ]
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "nlq": "Give the address, phone, and email for customers with the name Jeromy.",
    "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT addresses.address_details, customers.customer_phone, customers.customer_email FROM customers JOIN addresses ON customers.address_id = addresses.address_id WHERE customers.customer_name = 'Jeromy'",
        "SELECT a.address_details, c.customer_phone, c.customer_email FROM customers c INNER JOIN addresses a ON c.address_id = a.address_id WHERE c.customer_name = 'Jeromy'",
        "SELECT ad.address_details, cm.customer_phone, cm.customer_email FROM customers cm, addresses ad WHERE cm.address_id = ad.address_id AND cm.customer_name = 'Jeromy'",
        "SELECT address_details, customer_phone, customer_email FROM addresses, customers WHERE addresses.address_id = customers.address_id AND customers.customer_name = 'Jeromy'",
        "SELECT adrs.address_details, cs.customer_phone, cs.customer_email FROM customers cs CROSS JOIN addresses adrs ON cs.address_id = adrs.address_id WHERE cs.customer_name = 'Jeromy'",
        "SELECT d.address_details, e.customer_phone, e.customer_email FROM customers e INNER JOIN addresses d ON e.address_id = d.address_id WHERE e.customer_name = 'Jeromy'",
        "SELECT f.address_details, g.customer_phone, g.customer_email FROM addresses f LEFT JOIN customers g ON f.address_id = g.address_id WHERE g.customer_name = 'Jeromy'"
      ]
    ]
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "nlq": "Show all payment method codes and the number of customers in each code.",
    "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
    "infer_predictions": [
      [
        "SELECT payment_method_code, COUNT(customer_id) AS count_customers FROM customers GROUP BY payment_method_code",
        "SELECT c.payment_method_code, COUNT(*) AS number_of_customers FROM customers c GROUP BY c.payment_method_code",
        "SELECT payment_method_code, COUNT(*) FROM customers GROUP BY payment_method_code",
        "SELECT c.payment_method_code, COUNT(c.customer_id) FROM customers c GROUP BY c.payment_method_code",
        "SELECT payment_method_code, COUNT(DISTINCT customer_id) FROM customers GROUP BY payment_method_code",
        "SELECT DISTINCT payment_method_code, (SELECT COUNT(customer_id) FROM customers AS ci WHERE ci.payment_method_code = c.payment_method_code) AS customer_count FROM customers AS c",
        "SELECT payment_method_code, COUNT(customer_id) FROM customers c GROUP BY payment_method_code ORDER BY payment_method_code",
        "SELECT payment_method_code, COUNT(*) AS customer_count FROM customers GROUP BY payment_method_code ORDER BY customer_count DESC",
        "SELECT c.payment_method_code, (SELECT COUNT(*) FROM customers WHERE payment_method_code = c.payment_method_code) AS number_of_customers FROM customers c GROUP BY c.payment_method_code",
        "SELECT DISTINCT c.payment_method_code, COUNT(c.customer_id) OVER (PARTITION BY c.payment_method_code) AS num_customers FROM customers c ORDER BY c.payment_method_code"
      ]
    ]
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "nlq": "How many customers use each payment method?",
    "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
    "infer_predictions": [
      [
        "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM customers GROUP BY payment_method_code",
        "SELECT payment_method_code, COUNT(DISTINCT customer_id) AS num_customers FROM customers GROUP BY payment_method_code",
        "SELECT payment_method_code, COUNT(*) AS num_customers FROM customers GROUP BY payment_method_code",
        "SELECT c.payment_method_code, COUNT(c.customer_id) AS num_customers FROM customers AS c GROUP BY c.payment_method_code",
        "SELECT c.payment_method_code, COUNT(c.customer_id) AS num_customers FROM customers c GROUP BY c.payment_method_code",
        "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM customers GROUP BY payment_method_code ORDER BY payment_method_code ASC",
        "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) > 0",
        "SELECT COUNT(c.customer_id) AS num_customers, c.payment_method_code FROM customers c GROUP BY c.payment_method_code",
        "SELECT payment_method_code, COUNT(customer_id) AS num_customers FROM (SELECT customer_id, payment_method_code FROM customers) GROUP BY payment_method_code",
        "SELECT t.payment_method_code, COUNT(t.customer_id) AS customers_count FROM (SELECT customer_id, payment_method_code FROM customers) AS t GROUP BY t.payment_method_code"
      ]
    ]
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "nlq": "What is the payment method code used by most number of customers?",
    "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.payment_method_code FROM customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.customer_id) DESC LIMIT 1",
        "WITH PaymentCount AS (SELECT payment_method_code, COUNT(customer_id) AS total FROM customers GROUP BY payment_method_code) SELECT payment_method_code FROM PaymentCount ORDER BY total DESC LIMIT 1",
        "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(customer_id) AS cust_count FROM customers GROUP BY payment_method_code) ORDER BY cust_count DESC LIMIT 1",
        "SELECT c.payment_method_code FROM (SELECT payment_method_code, COUNT(*) cnt FROM customers GROUP BY payment_method_code) c ORDER BY c.cnt DESC LIMIT 1",
        "WITH RankedMethod AS (SELECT payment_method_code, DENSE_RANK() OVER (ORDER BY COUNT(customer_id) DESC) AS rank FROM customers GROUP BY payment_method_code) SELECT payment_method_code FROM RankedMethod WHERE rank = 1 LIMIT 1",
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MAX(customer_count) FROM (SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM customers GROUP BY payment_method_code) sub)"
      ]
    ]
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "nlq": "Give the code of the payment method that is most commonly used.",
    "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.payment_method_code FROM customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.payment_method_code) DESC LIMIT 1",
        "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) as cnt FROM customers GROUP BY payment_method_code) ORDER BY cnt DESC LIMIT 1",
        "SELECT c.payment_method_code FROM (SELECT payment_method_code, COUNT(payment_method_code) as count FROM customers GROUP BY payment_method_code) as c ORDER BY c.count DESC LIMIT 1",
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(payment_method_code) = (SELECT MAX(count) FROM (SELECT COUNT(payment_method_code) AS count FROM customers GROUP BY payment_method_code))",
        "SELECT x.payment_method_code FROM (SELECT payment_method_code, COUNT(payment_method_code) AS num FROM customers GROUP BY payment_method_code) x WHERE x.num = (SELECT MAX(num) FROM (SELECT COUNT(payment_method_code) AS num FROM customers GROUP BY payment_method_code) y) LIMIT 1",
        "SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(payment_method_code) AS PaymentsCount FROM customers GROUP BY payment_method_code ORDER BY PaymentsCount DESC) GROUPED ORDER BY GROUPED.PaymentsCount DESC LIMIT 1",
        "SELECT p.payment_method_code FROM (SELECT c.payment_method_code, COUNT(*) as Total FROM customers c GROUP BY c.payment_method_code ORDER BY Total DESC) p LIMIT 1"
      ]
    ]
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "nlq": "Show all customer names with the  payment method code used by least number of customers.",
    "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT C.customer_name FROM customers C WHERE C.payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) ASC LIMIT 1)",
        "SELECT cust.customer_name FROM customers cust JOIN (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) ASC LIMIT 1) AS pmc ON cust.payment_method_code = pmc.payment_method_code",
        "SELECT customer_name FROM customers WHERE payment_method_code IN (SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(customer_id) = (SELECT MIN(count) FROM (SELECT COUNT(customer_id) AS count FROM customers GROUP BY payment_method_code)))",
        "SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS num_customers FROM customers GROUP BY payment_method_code) AS grouped_payments ORDER BY num_customers ASC LIMIT 1)",
        "SELECT customer_name FROM customers AS cs WHERE cs.payment_method_code = (SELECT pm.payment_method_code FROM (SELECT payment_method_code, COUNT(*) num FROM customers GROUP BY payment_method_code ORDER BY num ASC LIMIT 1) pm)",
        "SELECT c.customer_name FROM customers c WHERE c.payment_method_code IN ( SELECT x.payment_method_code FROM (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(DISTINCT customer_id) ASC LIMIT 1) x)",
        "SELECT cust.customer_name FROM customers cust WHERE cust.payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) AND EXISTS (SELECT 1 FROM customers c2 WHERE c2.payment_method_code = cust.payment_method_code GROUP BY c2.payment_method_code HAVING COUNT(c2.customer_id) = (SELECT MIN(count) FROM (SELECT COUNT(customer_id) count FROM customers GROUP BY payment_method_code) foo))"
      ]
    ]
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of customers who use the least common payment method?",
    "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT C.customer_name FROM customers C JOIN (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) AS PMC ON C.payment_method_code = PMC.payment_method_code",
        "SELECT C.customer_name FROM customers C WHERE C.payment_method_code IN (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT customer_name FROM customers WHERE payment_method_code = (SELECT MIN(payment_method_code) FROM (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC) P)",
        "SELECT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code, COUNT(*) AS freq FROM customers GROUP BY payment_method_code ORDER BY freq ASC) AS Temp LIMIT 1)",
        "SELECT C.customer_name FROM customers C WHERE EXISTS (SELECT 1 FROM customers WHERE customers.payment_method_code = C.payment_method_code GROUP BY payment_method_code HAVING COUNT(*) = (SELECT COUNT(*) FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1))",
        "SELECT customer_name FROM customers AS o WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC) t LIMIT 1)",
        "SELECT C.customer_name FROM customers C INNER JOIN (SELECT payment_method_code FROM customers GROUP BY payment_method_code HAVING COUNT(*) = (SELECT MIN(CNT) FROM (SELECT payment_method_code, COUNT(*) AS CNT FROM customers GROUP BY payment_method_code) x)) y ON C.payment_method_code = y.payment_method_code",
        "SELECT C.customer_name FROM (SELECT customer_name, payment_method_code FROM customers) C INNER JOIN (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1) PM ON C.payment_method_code = PM.payment_method_code",
        "SELECT DISTINCT customer_name FROM customers WHERE payment_method_code = (SELECT payment_method_code FROM (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1) P)"
      ]
    ]
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "nlq": "What is the payment method and customer number for customer named Jeromy?",
    "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy'",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name LIKE 'Jeromy'",
        "SELECT c.payment_method_code, c.customer_number FROM customers c WHERE c.customer_name = 'Jeromy'",
        "SELECT payment_method_code AS payment, customer_number AS number FROM customers WHERE customer_name = 'Jeromy'",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name IN (SELECT customer_name FROM customers WHERE customer_name = 'Jeromy')",
        "SELECT c.payment_method_code, c.customer_number FROM customers c WHERE c.customer_name LIKE 'Jeromy'",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name COLLATE NOCASE = 'Jeromy'",
        "SELECT customer.payment_method_code, customer.customer_number FROM customers customer WHERE customer.customer_name = 'Jeromy'"
      ]
    ]
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "nlq": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy'",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name LIKE 'Jeromy'",
        "SELECT c.payment_method_code, c.customer_number FROM customers c WHERE c.customer_name = 'Jeromy'",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy' LIMIT 1",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy' ORDER BY customer_id ASC LIMIT 1",
        "SELECT payment_method_code, customer_number FROM customers WHERE customer_name LIKE 'Jeromy' OR customer_name = 'Jeromy'",
        "SELECT * FROM (SELECT payment_method_code, customer_number FROM customers WHERE customer_name = 'Jeromy') AS jermoy_info"
      ]
    ]
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "nlq": "What are the distinct payment methods used by customers?",
    "gold": "SELECT DISTINCT payment_method_code FROM Customers",
    "infer_predictions": [
      [
        "SELECT DISTINCT payment_method_code FROM customers",
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code",
        "SELECT DISTINCT(pmc) FROM (SELECT payment_method_code AS pmc FROM customers)",
        "SELECT payment_method_code FROM (SELECT DISTINCT payment_method_code FROM customers) AS unique_methods",
        "SELECT DISTINCT(payment_method_code) FROM customers WHERE payment_method_code IS NOT NULL",
        "SELECT DISTINCT c.payment_method_code FROM customers c WHERE c.payment_method_code <> ''",
        "SELECT DISTINCT p FROM (SELECT payment_method_code AS p FROM customers)",
        "SELECT DISTINCT q.payment_method_code FROM (SELECT * FROM customers) AS q",
        "SELECT DISTINCT m.payment_method_code FROM (SELECT payment_method_code FROM customers) m"
      ]
    ]
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "nlq": "Give the different payment method codes that customers use.",
    "gold": "SELECT DISTINCT payment_method_code FROM Customers",
    "infer_predictions": [
      [
        "SELECT DISTINCT payment_method_code FROM customers",
        "SELECT payment_method_code FROM customers GROUP BY payment_method_code",
        "SELECT DISTINCT c.payment_method_code FROM customers c",
        "SELECT c.payment_method_code FROM customers c GROUP BY c.payment_method_code",
        "WITH DistinctCodes AS (SELECT DISTINCT payment_method_code FROM customers) SELECT payment_method_code FROM DistinctCodes",
        "WITH Codes AS (SELECT payment_method_code FROM customers) SELECT DISTINCT payment_method_code FROM Codes",
        "SELECT DISTINCT payment_method_code FROM customers WHERE payment_method_code IS NOT NULL",
        "SELECT DISTINCT(payment_method_code) AS PaymentCode FROM customers",
        "SELECT payment_method_code FROM (SELECT DISTINCT payment_method_code FROM customers)",
        "SELECT c.payment_method_code FROM customers c WHERE c.payment_method_code IS NOT NULL GROUP BY c.payment_method_code"
      ]
    ]
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "nlq": "Show the id and the product type for all products, order by product name.",
    "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
    "infer_predictions": [
      [
        "SELECT product_id, product_type_code FROM products ORDER BY product_name",
        "SELECT p.product_id, p.product_type_code FROM products p ORDER BY p.product_name ASC",
        "SELECT product_id AS id, product_type_code AS type FROM products ORDER BY product_name",
        "SELECT p.product_id AS id, p.product_type_code AS type FROM products p ORDER BY p.product_name",
        "SELECT DISTINCT p.product_id, p.product_type_code FROM products p ORDER BY p.product_name",
        "SELECT product_id AS ProductID, product_type_code AS ProductType FROM products ORDER BY product_name ASC"
      ]
    ]
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "nlq": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
    "infer_predictions": [
      [
        "SELECT product_id, product_type_code FROM products ORDER BY product_name ASC",
        "SELECT p.product_id, p.product_type_code FROM products p ORDER BY p.product_name",
        "SELECT p.product_id, p.product_type_code FROM products p ORDER BY p.product_name ASC",
        "SELECT product_id AS id, product_type_code AS type FROM products ORDER BY product_name ASC",
        "SELECT p.product_id, product_type_code FROM products p ORDER BY p.product_name COLLATE NOCASE",
        "SELECT p.id, p.type FROM (SELECT product_id AS id, product_type_code AS type, product_name FROM products) p ORDER BY p.product_name ASC",
        "SELECT products.product_id AS id, products.product_type_code AS type_code FROM products ORDER BY products.product_name ASC"
      ]
    ]
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "nlq": "What is the product type with least number of products?",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1",
        "SELECT MIN(product_type) FROM (SELECT product_type_code as product_type, COUNT(*) as cnt FROM products GROUP BY product_type_code) sub",
        "SELECT product_type_code FROM (SELECT product_type_code, COUNT(product_id) as total FROM products GROUP BY product_type_code ORDER BY total ASC) t LIMIT 1",
        "SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(product_id) as cnt FROM products GROUP BY product_type_code) t)",
        "SELECT p.product_type_code FROM products p JOIN (SELECT product_type_code, COUNT(*) as number FROM products GROUP BY product_type_code) a ON p.product_type_code = a.product_type_code ORDER BY a.number ASC LIMIT 1",
        "SELECT product_type_code FROM (SELECT product_type_code, COUNT(product_id) as total FROM products GROUP BY product_type_code) as c ORDER BY c.total ASC LIMIT 1",
        "SELECT sq.product_type_code FROM (SELECT product_type_code, COUNT(product_id) as product_count FROM products GROUP BY product_type_code ORDER BY product_count ASC LIMIT 1) sq",
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY SUM(1) ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "nlq": "What is the code of the product type that is least common?",
    "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1",
        "SELECT product_type_code FROM products WHERE product_type_code IN (SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) = (SELECT MIN(count_prod) FROM (SELECT COUNT(product_id) as count_prod FROM products GROUP BY product_type_code))) LIMIT 1",
        "SELECT p.product_type_code FROM products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(p1.product_id) AS cnt FROM products p1 GROUP BY p1.product_type_code) sub)",
        "WITH Counts AS (SELECT product_type_code, COUNT(product_id) AS count_products FROM products GROUP BY product_type_code) SELECT product_type_code FROM Counts ORDER BY count_products ASC LIMIT 1",
        "SELECT product_type_code FROM (SELECT product_type_code, RANK() OVER (ORDER BY COUNT(product_id)) AS rank FROM products GROUP BY product_type_code) WHERE rank = 1",
        "SELECT p.product_type_code FROM (SELECT product_type_code, COUNT(product_id) AS count_products FROM products GROUP BY product_type_code ORDER BY count_products ASC) p LIMIT 1",
        "WITH ProductCounts AS (SELECT product_type_code, COUNT(*) AS TotalCount FROM products GROUP BY product_type_code) SELECT product_type_code FROM ProductCounts WHERE TotalCount = (SELECT MIN(TotalCount) FROM ProductCounts) LIMIT 1"
      ]
    ]
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "nlq": "How many customer orders do we have?",
    "gold": "SELECT count(*) FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customer_orders",
        "SELECT COUNT(order_id) FROM customer_orders",
        "SELECT COUNT(1) FROM customer_orders",
        "SELECT COUNT(order_id) AS total_orders FROM customer_orders",
        "SELECT COUNT(*) AS total_order_count FROM customer_orders",
        "SELECT (SELECT COUNT(*) FROM customer_orders)",
        "SELECT (SELECT COUNT(order_id) FROM customer_orders)",
        "SELECT COUNT(1) AS order_count FROM customer_orders",
        "SELECT COUNT(DISTINCT order_id) AS unique_orders FROM customer_orders"
      ]
    ]
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of customer orders.",
    "gold": "SELECT count(*) FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customer_orders",
        "SELECT COUNT(order_id) FROM customer_orders",
        "SELECT COUNT(1) FROM customer_orders",
        "SELECT COUNT(*) AS total_orders FROM customer_orders",
        "SELECT SUM(1) FROM customer_orders",
        "SELECT COUNT(order_id) AS order_count FROM customer_orders",
        "SELECT COUNT(*) FROM (SELECT order_id FROM customer_orders)"
      ]
    ]
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "nlq": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders co JOIN customers c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders co INNER JOIN customers c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'Jeromy')",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Jeromy')",
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders co, customers c WHERE co.customer_id = c.customer_id AND c.customer_name = 'Jeromy'",
        "SELECT customer_orders.order_id, customer_orders.order_date, customer_orders.order_status_code FROM customer_orders, customers WHERE customer_orders.customer_id = customers.customer_id AND customers.customer_name = 'Jeromy'",
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders AS co JOIN customers AS c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
        "SELECT o.order_id, o.order_date, o.order_status_code FROM customer_orders o JOIN customers cus ON o.customer_id = cus.customer_id WHERE cus.customer_name = 'Jeromy'",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE EXISTS (SELECT 1 FROM customers WHERE customers.customer_id = customer_orders.customer_id AND customers.customer_name = 'Jeromy')",
        "SELECT o.order_id, o.order_date, o.order_status_code FROM customer_orders o WHERE o.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.customer_name = 'Jeromy')"
      ]
    ]
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "nlq": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
    "infer_predictions": [
      [
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders co JOIN customers c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'Jeromy')",
        "SELECT o.order_id, o.order_date, o.order_status_code FROM customer_orders o, customers cust WHERE o.customer_id = cust.customer_id AND cust.customer_name = 'Jeromy'",
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders AS co INNER JOIN customers AS c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy'",
        "SELECT o.order_id, o.order_date, o.order_status_code FROM customer_orders o INNER JOIN customers cust ON o.customer_id = cust.customer_id AND cust.customer_name = 'Jeromy'",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'Jeromy')",
        "SELECT co.order_id, co.order_date, co.order_status_code FROM customer_orders AS co JOIN customers AS c ON co.customer_id = c.customer_id WHERE c.customer_name LIKE 'Jeromy'",
        "SELECT o.order_id, o.order_date, o.order_status_code FROM customer_orders o LEFT JOIN customers cust ON o.customer_id = cust.customer_id WHERE cust.customer_name = 'Jeromy'",
        "SELECT order_id, order_date, order_status_code FROM customer_orders WHERE EXISTS (SELECT 1 FROM customers WHERE customer_name = 'Jeromy' AND customer_id = customer_orders.customer_id)",
        "SELECT customer_orders.order_id, customer_orders.order_date, customer_orders.order_status_code FROM customers INNER JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customers.customer_name = 'Jeromy'"
      ]
    ]
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "nlq": "Show all customer names, ids and the number of orders by each customer.",
    "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
    "infer_predictions": [
      [
        "SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id, customers.customer_name",
        "SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS number_of_orders FROM customers c LEFT JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name",
        "SELECT c.customer_name, c.customer_id, (SELECT COUNT(*) FROM customer_orders co WHERE co.customer_id = c.customer_id) AS number_of_orders FROM customers c",
        "SELECT c.customer_name, c.customer_id, IFNULL(orders.number_of_orders, 0) AS number_of_orders FROM customers c LEFT JOIN (SELECT customer_id, COUNT(order_id) AS number_of_orders FROM customer_orders GROUP BY customer_id) orders ON c.customer_id = orders.customer_id",
        "SELECT c1.customer_name, c1.customer_id, IFNULL(c2.order_counts, 0) AS number_of_orders FROM customers c1 LEFT JOIN (SELECT customer_id, COUNT(order_id) AS order_counts FROM customer_orders GROUP BY customer_id) c2 ON c1.customer_id = c2.customer_id",
        "SELECT c.customer_name, c.customer_id, COUNT(distinct co.order_id) AS number_of_orders FROM customers c LEFT OUTER JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id",
        "SELECT FROM_CUSTOMERS.customer_name, FROM_CUSTOMERS.customer_id, ORDER_COUNT.count AS number_of_orders FROM customers AS FROM_CUSTOMERS JOIN (SELECT customer_id, COUNT(*) AS count FROM customer_orders GROUP BY customer_id) AS ORDER_COUNT ON FROM_CUSTOMERS.customer_id = ORDER_COUNT.customer_id",
        "SELECT cst.customer_name, cst.customer_id, COUNT(ord.order_id) AS number_of_orders FROM customers cst JOIN customer_orders ord ON cst.customer_id = ord.customer_id GROUP BY cst.customer_id"
      ]
    ]
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "nlq": "What are the names, ids, and number of orders made for each customer?",
    "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
    "infer_predictions": [
      [
        "SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS num_orders FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id",
        "SELECT customer_name, customer_id, COUNT(distinct order_id) as num_orders FROM customers JOIN customer_orders USING(customer_id) GROUP BY customer_id",
        "SELECT cust.customer_name, cust.customer_id, COUNT(distinct ord.order_id) AS num_orders FROM customers cust INNER JOIN customer_orders ord ON cust.customer_id = ord.customer_id GROUP BY cust.customer_id",
        "SELECT c.customer_name, c.customer_id, (SELECT COUNT(*) FROM customer_orders WHERE customer_id = c.customer_id) AS num_orders FROM customers c",
        "SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS num_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id",
        "SELECT name.customer_name, name.customer_id, COUNT(ord.order_id) AS num_orders FROM customers name LEFT JOIN customer_orders ord ON name.customer_id = ord.customer_id GROUP BY name.customer_id",
        "SELECT c1.customer_name, c1.customer_id, COUNT(order_id) FROM customers c1 LEFT JOIN customer_orders o1 ON c1.customer_id = o1.customer_id GROUP BY c1.customer_id",
        "SELECT cust_details.customer_name, cust_details.customer_id, (SELECT COUNT(order_id) FROM customer_orders WHERE customer_id = cust_details.customer_id) num_orders FROM customers cust_details",
        "SELECT c_name.customer_name, c_name.customer_id, (SELECT COUNT(*) FROM customer_orders co WHERE co.customer_id = c_name.customer_id) AS num_orders FROM customers c_name",
        "SELECT each_customer.customer_name, each_customer.customer_id, COUNT(each_order.order_id) AS order_count FROM customers each_customer JOIN customer_orders each_order ON each_customer.customer_id = each_order.customer_id GROUP BY each_customer.customer_id"
      ]
    ]
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "nlq": "What is the customer id, name, phone, and email for the customer with most orders?",
    "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c JOIN (SELECT customer_id, COUNT(*) as total_orders FROM customer_orders GROUP BY customer_id ORDER BY total_orders DESC LIMIT 1) most_orders ON c.customer_id = most_orders.customer_id",
        "SELECT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers INNER JOIN (SELECT customer_id, COUNT(*) AS TotalOrders FROM customer_orders GROUP BY customer_id ORDER BY TotalOrders DESC LIMIT 1) subq ON customers.customer_id = subq.customer_id",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customer_orders co JOIN customers c ON co.customer_id = c.customer_id GROUP BY co.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH OrderCounts AS (SELECT customer_id, COUNT(*) AS TotalOrders FROM customer_orders GROUP BY customer_id) SELECT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN OrderCounts ON customers.customer_id = OrderCounts.customer_id ORDER BY TotalOrders DESC LIMIT 1",
        "SELECT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers, (SELECT customer_id, COUNT(order_id) AS num_orders FROM customer_orders GROUP BY customer_id ORDER BY num_orders DESC LIMIT 1) as top_customer WHERE customers.customer_id = top_customer.customer_id",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1) max_orders INNER JOIN customers c ON c.customer_id = max_orders.customer_id",
        "SELECT DISTINCT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_orders.order_id) = (SELECT MAX(OrderCount) FROM (SELECT COUNT(order_id) AS OrderCount FROM customer_orders GROUP BY customer_id) temp)",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c WHERE c.customer_id = (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH customer_order_count AS (SELECT customer_id, COUNT(order_id) AS order_count FROM customer_orders GROUP BY customer_id) SELECT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN customer_order_count ON customer_order_count.customer_id = customers.customer_id ORDER BY order_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "nlq": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1",
        "SELECT customers.customer_id, customers.customer_name, customers.customer_phone, customers.customer_email FROM customers INNER JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id ORDER BY COUNT(customer_orders.order_id) DESC LIMIT 1",
        "SELECT customer_id, customer_name, customer_phone, customer_email FROM customers WHERE customer_id = (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c WHERE c.customer_id IN (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1)",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c INNER JOIN (SELECT customer_id, COUNT(order_id) AS order_count FROM customer_orders GROUP BY customer_id ORDER BY order_count DESC LIMIT 1) top_customer ON c.customer_id = top_customer.customer_id",
        "SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM customers c INNER JOIN customer_orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING COUNT(co.order_id) = (SELECT MAX(order_count) FROM (SELECT COUNT(order_id) AS order_count FROM customer_orders GROUP BY customer_id) tmp)"
      ]
    ]
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "nlq": "Show all order status and the number of orders in each status.",
    "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
    "infer_predictions": [
      [
        "SELECT order_status_code, COUNT(order_id) AS num_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT co.order_status_code, COUNT(co.order_id) AS num_orders FROM customer_orders AS co GROUP BY co.order_status_code",
        "SELECT order_status_code, COUNT(*) FROM customer_orders GROUP BY order_status_code",
        "SELECT order_status_code, COUNT(*) AS num_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT co.order_status_code, COUNT(*) AS num_orders FROM customer_orders AS co GROUP BY co.order_status_code",
        "SELECT order_status_code, COUNT(order_id) AS total_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT order_status_code, COUNT(order_id) AS count_of_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT co.order_status_code, COUNT(co.order_id) AS order_count FROM customer_orders AS co GROUP BY co.order_status_code",
        "SELECT order_status_code, COUNT(*) AS number_of_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT co.order_status_code, COUNT(*) AS number_of_orders FROM customer_orders AS co GROUP BY co.order_status_code"
      ]
    ]
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "nlq": "How many orders have each order status code?",
    "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
    "infer_predictions": [
      [
        "SELECT order_status_code, COUNT(*) AS total_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT order_status_code, COUNT(order_id) AS total_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT CO.order_status_code, COUNT(*) AS total_orders FROM customer_orders CO GROUP BY CO.order_status_code",
        "SELECT CO.order_status_code, COUNT(CO.order_id) AS total_orders FROM customer_orders CO GROUP BY CO.order_status_code",
        "SELECT COUNT(order_id) AS total_orders, order_status_code FROM customer_orders GROUP BY order_status_code",
        "SELECT count(order_id) as total_orders, order_status_code from customer_orders group by order_status_code",
        "SELECT order_status_code, COUNT(order_id) as total_orders FROM customer_orders GROUP BY order_status_code",
        "SELECT COUNT(*) as total_orders, order_status_code FROM customer_orders GROUP BY order_status_code",
        "SELECT CO.order_status_code, COUNT(CO.order_id) as total_orders FROM customer_orders CO GROUP BY CO.order_status_code",
        "SELECT CO.order_status_code, COUNT(*) as total_orders FROM customer_orders CO GROUP BY CO.order_status_code"
      ]
    ]
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "nlq": "What is the order status code that is most common?",
    "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT co.order_status_code FROM customer_orders AS co GROUP BY co.order_status_code ORDER BY COUNT(co.order_status_code) DESC LIMIT 1",
        "SELECT order_status_code, COUNT(order_status_code) AS Frequency FROM customer_orders GROUP BY order_status_code ORDER BY Frequency DESC LIMIT 1",
        "WITH OrderStatusCount AS (SELECT order_status_code, COUNT(*) AS count FROM customer_orders GROUP BY order_status_code) SELECT order_status_code FROM OrderStatusCount ORDER BY count DESC LIMIT 1",
        "SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(order_id) DESC LIMIT 1",
        "SELECT co.order_status_code FROM customer_orders co GROUP BY co.order_status_code ORDER BY COUNT(co.order_id) DESC LIMIT 1",
        "SELECT order_status_code FROM (SELECT order_status_code, COUNT(*) as cnt FROM customer_orders GROUP BY order_status_code) ORDER BY cnt DESC LIMIT 1",
        "SELECT order_status_code AS MostFrequentStatusCode FROM customer_orders GROUP BY order_status_code HAVING COUNT(order_status_code) = (SELECT MAX(cnt) FROM (SELECT order_status_code, COUNT(order_status_code) as cnt FROM customer_orders GROUP BY order_status_code))"
      ]
    ]
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "nlq": "Give the order status code that is most frequent across customer orders.",
    "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT x.order_status_code FROM (SELECT order_status_code, COUNT(*) as total FROM customer_orders GROUP BY order_status_code) x ORDER BY x.total DESC LIMIT 1",
        "SELECT top_order_status_code.order_status_code FROM (SELECT order_status_code, COUNT(order_status_code) as count_status FROM customer_orders GROUP BY order_status_code) top_order_status_code WHERE top_order_status_code.count_status = (SELECT MAX(count_status) FROM (SELECT COUNT(order_status_code) as count_status FROM customer_orders GROUP BY order_status_code)) LIMIT 1",
        "WITH RankFrequency AS (SELECT order_status_code, RANK() OVER (ORDER BY COUNT(order_id) DESC) as rank FROM customer_orders GROUP BY order_status_code) SELECT order_status_code FROM RankFrequency WHERE rank = 1",
        "WITH OrderData AS (SELECT order_status_code, COUNT(order_status_code) as freq FROM customer_orders GROUP BY order_status_code) SELECT order_status_code FROM OrderData ORDER BY freq DESC LIMIT 1",
        "SELECT o.order_status_code FROM customer_orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) DESC LIMIT 1",
        "SELECT top_status.order_status_code FROM (SELECT order_status_code, COUNT(order_id) AS frequency FROM customer_orders GROUP BY order_status_code ORDER BY frequency DESC) top_status LIMIT 1",
        "SELECT order_status_code, COUNT(order_status_code) AS quantity FROM customer_orders GROUP BY order_status_code ORDER BY quantity DESC LIMIT 1",
        "SELECT first_one.order_status_code FROM (SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1) AS first_one",
        "SELECT order_status_code FROM (SELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1) final_answer"
      ]
    ]
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "nlq": "How many customers do not have an order?",
    "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c LEFT JOIN customer_orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
        "SELECT COUNT(c.customer_id) FROM customers c LEFT OUTER JOIN customer_orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
        "SELECT COUNT(*) FROM customers WHERE NOT EXISTS (SELECT 1 FROM customer_orders WHERE customer_orders.customer_id = customers.customer_id)",
        "SELECT COUNT(*) FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customer_orders co WHERE co.customer_id = c.customer_id)",
        "SELECT COUNT( *) FROM (SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders)",
        "SELECT COUNT(1) FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders)",
        "SELECT COUNT(c.customer_id) FROM customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_orders co)",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c WHERE c.customer_id NOT IN (SELECT DISTINCT co.customer_id FROM customer_orders co)",
        "SELECT COUNT(1) FROM customers AS c LEFT JOIN customer_orders AS co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL"
      ]
    ]
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of customers who have not made an order.",
    "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)",
        "SELECT COUNT(DISTINCT customers.customer_id) FROM customers WHERE NOT EXISTS (SELECT 1 FROM customer_orders WHERE customer_orders.customer_id = customers.customer_id)",
        "SELECT COUNT(*) AS NoOrdersCount FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_orders.customer_id FROM customer_orders)",
        "SELECT COUNT(c.customer_id) FROM customers c LEFT OUTER JOIN customer_orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL",
        "SELECT COUNT(*) FROM customers LEFT OUTER JOIN customer_orders ON customers.customer_id = customer_orders.customer_id AND customer_orders.order_id IS NULL GROUP BY customers.customer_id",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c WHERE NOT EXISTS (SELECT customer_orders.customer_id FROM customer_orders WHERE customer_orders.customer_id = c.customer_id)",
        "SELECT COUNT(customers.customer_id) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders WHERE customer_orders.customer_id = customers.customer_id)"
      ]
    ]
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "nlq": "Show all product names without an order.",
    "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "infer_predictions": [
      [
        "SELECT p.product_name FROM products p WHERE p.product_id NOT IN (SELECT o.product_id FROM order_items o)",
        "SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)",
        "SELECT product_name FROM products EXCEPT SELECT products.product_name FROM products JOIN order_items ON products.product_id = order_items.product_id",
        "SELECT p.product_name FROM products p LEFT JOIN order_items o ON p.product_id = o.product_id WHERE o.product_id IS NULL",
        "SELECT product_name FROM products WHERE NOT EXISTS (SELECT 1 FROM order_items WHERE products.product_id = order_items.product_id)",
        "SELECT DISTINCT product_name FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_items)",
        "SELECT p.product_name FROM products p WHERE NOT EXISTS (SELECT NULL FROM order_items o WHERE o.product_id = p.product_id)",
        "SELECT DISTINCT p.product_name FROM products p LEFT JOIN order_items o ON p.product_id = o.product_id WHERE o.product_id IS NULL",
        "SELECT product_name FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_items WHERE order_items.product_id IS NOT NULL)",
        "SELECT products.product_name FROM products LEFT OUTER JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL"
      ]
    ]
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "nlq": "What are the names of products that have not been ordered?",
    "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "infer_predictions": [
      [
        "SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)",
        "SELECT p.product_name FROM products p LEFT JOIN order_items o ON p.product_id = o.product_id WHERE o.product_id IS NULL",
        "SELECT product_name FROM products EXCEPT SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items)",
        "SELECT p.product_name FROM products p WHERE NOT EXISTS (SELECT NULL FROM order_items o WHERE o.product_id = p.product_id)",
        "SELECT product_name FROM products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_items)",
        "SELECT products.product_name FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL",
        "SELECT p.product_name FROM products p WHERE p.product_id NOT IN (SELECT DISTINCT o.product_id FROM order_items o)",
        "SELECT products.product_name FROM products WHERE NOT EXISTS (SELECT 1 FROM order_items WHERE order_items.product_id = products.product_id)",
        "SELECT p.product_name FROM products AS p WHERE NOT EXISTS (SELECT 1 FROM order_items AS o WHERE o.product_id = p.product_id)"
      ]
    ]
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "nlq": "How many products named Monitor have been ordered?",
    "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT products.product_id) FROM products JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'",
        "SELECT COUNT(*) FROM (SELECT products.product_id FROM products INNER JOIN order_items ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor' GROUP BY products.product_id)",
        "SELECT COUNT(DISTINCT order_items.product_id) FROM order_items INNER JOIN products ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor'",
        "SELECT COUNT(products.product_id) FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor' AND order_items.product_id IS NOT NULL GROUP BY products.product_id",
        "SELECT COUNT(DISTINCT products.product_id) FROM products, order_items WHERE products.product_id = order_items.product_id AND products.product_name = 'Monitor'",
        "SELECT COUNT(*) FROM products WHERE product_name = 'Monitor' AND EXISTS (SELECT 1 FROM order_items WHERE order_items.product_id = products.product_id)",
        "SELECT SUM(case when products.product_name = 'Monitor' then 1 else 0 end) AS MonitorCount FROM products JOIN order_items ON order_items.product_id = products.product_id",
        "SELECT COUNT(*) FROM (SELECT 1 FROM products CROSS JOIN order_items ON products.product_id = order_items.product_id WHERE products.product_name = 'Monitor' GROUP BY products.product_id)",
        "SELECT COUNT(DISTINCT p.product_id) FROM products p JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_name = 'Monitor'"
      ]
    ]
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "nlq": "What is the total number of Monitor products that have been ordered?",
    "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT SUM(oi.order_quantity) FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
        "SELECT SUM(order_quantity) FROM order_items WHERE product_id IN (SELECT product_id FROM products WHERE product_name = 'Monitor')",
        "SELECT TOTAL(oi.order_quantity) FROM order_items oi JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
        "SELECT SUM(order_quantity) as TotalMonitors FROM order_items INNER JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor'",
        "SELECT TOTAL(order_quantity) FROM order_items INNER JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor'",
        "SELECT SUM(oi.order_quantity) FROM products p JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_name = 'Monitor'",
        "SELECT COUNT(*) * oi.order_quantity FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor' GROUP BY p.product_id",
        "SELECT SUM(order_quantity) FROM order_items WHERE EXISTS (SELECT 1 FROM products WHERE products.product_id = order_items.product_id AND products.product_name = 'Monitor')",
        "SELECT SUM(order_items.order_quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor'",
        "SELECT SUM(o.quantity) FROM (SELECT order_quantity as quantity FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor') o"
      ]
    ]
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "nlq": "How many customers have ordered the product named Monitor?",
    "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT c.customer_id FROM customers c, customer_orders co, order_items oi, products p WHERE c.customer_id = co.customer_id AND co.order_id = oi.order_id AND oi.product_id = p.product_id AND p.product_name = 'Monitor')",
        "SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id IN (SELECT co.customer_id FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor')",
        "SELECT DISTINCT COUNT(c.customer_id) FROM products p, order_items oi, customer_orders co, customers c WHERE p.product_id = oi.product_id AND oi.order_id = co.order_id AND co.customer_id = c.customer_id AND p.product_name = 'Monitor'",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c, customer_orders co, order_items oi, products p WHERE c.customer_id = co.customer_id AND co.order_id = oi.order_id AND oi.product_id = p.product_id AND p.product_name = 'Monitor'",
        "WITH Ordered_Monitors AS (SELECT DISTINCT c.customer_id FROM customers c, customer_orders co, order_items oi, products p WHERE c.customer_id = co.customer_id AND co.order_id = oi.order_id AND oi.product_id = p.product_id AND p.product_name = 'Monitor') SELECT COUNT(customer_id) FROM Ordered_Monitors",
        "SELECT COUNT(*) FROM (SELECT c.customer_id FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor' GROUP BY c.customer_id)"
      ]
    ]
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of different customers who have bought a Monitor Product.",
    "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders WHERE order_id IN (SELECT order_id FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Monitor')))",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c WHERE EXISTS (SELECT 1 FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE co.customer_id = c.customer_id AND p.product_name = 'Monitor')",
        "SELECT COUNT(DISTINCT c.customer_id) FROM customers c INNER JOIN customer_orders co ON c.customer_id = co.customer_id INNER JOIN order_items oi ON co.order_id = oi.order_id INNER JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'",
        "WITH PurchasedMonitors AS (SELECT DISTINCT order_id FROM order_items WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Monitor')) SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE order_id IN (SELECT order_id FROM PurchasedMonitors)",
        "WITH MonitorOrders AS (SELECT oi.order_id FROM order_items oi JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor') SELECT COUNT(DISTINCT co.customer_id) FROM customer_orders co WHERE co.order_id IN (SELECT order_id FROM MonitorOrders)",
        "SELECT COUNT(DISTINCT c.customer_id) FROM (SELECT co.customer_id FROM customers c JOIN customer_orders co ON c.customer_id = co.customer_id JOIN order_items oi ON co.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor') c",
        "SELECT DISTINCT COUNT(co.customer_id) FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id WHERE oi.product_id IN (SELECT product_id FROM products WHERE product_name = 'Monitor') GROUP BY co.customer_id",
        "SELECT COUNT(*) FROM (SELECT DISTINCT co.customer_id FROM customer_orders co, order_items oi, products p WHERE co.order_id = oi.order_id AND oi.product_id = p.product_id AND p.product_name = 'Monitor')",
        "SELECT COUNT(DISTINCT co.customer_id) FROM (SELECT customer_orders.customer_id FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE products.product_name = 'Monitor') co"
      ]
    ]
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "nlq": "How many customers have an order?",
    "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT customer_orders.customer_id) FROM customer_orders;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM customer_orders);",
        "SELECT COUNT(DISTINCT CO.customer_id) FROM customer_orders CO;",
        "SELECT COUNT(DISTINCT customer_id) AS active_customers FROM customer_orders;",
        "SELECT COUNT(*) FROM (SELECT customers.customer_id FROM customers INNER JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id);",
        "SELECT COUNT(DISTINCT C.customer_id) FROM customers C JOIN customer_orders CO ON C.customer_id = CO.customer_id;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT C.customer_id FROM customers C, customer_orders CO WHERE C.customer_id = CO.customer_id);",
        "SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE customer_id IN (SELECT customer_id FROM customers);",
        "SELECT COUNT(*) FROM (SELECT 1 FROM customer_orders GROUP BY customer_id) AS unique_customers;"
      ]
    ]
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "nlq": "Count the number of differnt customers who have made an order.",
    "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT customer_orders.customer_id) FROM customer_orders",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM customer_orders)",
        "SELECT COUNT(DISTINCT customer_id) AS total_unique_customers FROM customer_orders",
        "SELECT COUNT(*) FROM (SELECT customer_orders.customer_id FROM customer_orders GROUP BY customer_orders.customer_id)",
        "SELECT COUNT(DISTINCT co.customer_id) FROM customer_orders co"
      ]
    ]
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "nlq": "Show all customer ids without an order.",
    "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)",
        "SELECT c.customer_id FROM customers c LEFT JOIN customer_orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
        "SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders",
        "SELECT customer_id FROM customers WHERE NOT EXISTS (SELECT customer_id FROM customer_orders WHERE customers.customer_id = customer_orders.customer_id)",
        "SELECT customer_id FROM customers c WHERE NOT EXISTS (SELECT * FROM customer_orders co WHERE co.customer_id = c.customer_id)",
        "SELECT c.customer_id FROM customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_orders co)",
        "SELECT DISTINCT c.customer_id FROM customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM customer_orders co)",
        "SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders)",
        "SELECT c.customer_id FROM customers c LEFT JOIN customer_orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL",
        "SELECT customer_id FROM customers WHERE NOT EXISTS (SELECT 1 FROM customer_orders WHERE customer_orders.customer_id = customers.customer_id)"
      ]
    ]
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "nlq": "What are the ids of customers who have not made an order?",
    "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
    "infer_predictions": [
      [
        "SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)",
        "SELECT customers.customer_id FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.customer_id IS NULL",
        "SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders",
        "SELECT c.customer_id FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customer_orders co WHERE co.customer_id = c.customer_id)",
        "SELECT c.customer_id FROM customers c LEFT OUTER JOIN customer_orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
        "SELECT distinct customers.customer_id FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.customer_id IS NULL",
        "SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_orders)",
        "SELECT customer_id FROM customers c WHERE NOT EXISTS (SELECT customer_id FROM customer_orders co WHERE co.customer_id = c.customer_id)",
        "SELECT DISTINCT c.customer_id FROM customers c WHERE NOT EXISTS (SELECT co.customer_id FROM customer_orders co WHERE co.customer_id = c.customer_id)"
      ]
    ]
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "nlq": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
    "infer_predictions": [
      [
        "SELECT DISTINCT co.order_date, co.order_id FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id WHERE oi.order_quantity > 6 OR co.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3)",
        "SELECT co.order_date, co.order_id FROM customer_orders co WHERE co.order_id IN (SELECT order_id FROM order_items WHERE order_quantity > 6 GROUP BY order_id) OR co.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3)",
        "SELECT co.order_date, co.order_id FROM customer_orders co WHERE EXISTS (SELECT 1 FROM order_items oi WHERE oi.order_id = co.order_id AND (oi.order_quantity > 6 OR (SELECT COUNT(*) FROM order_items oix WHERE oix.order_id = co.order_id) > 3))",
        "SELECT co.order_date, co.order_id FROM customer_orders co INNER JOIN (SELECT order_id FROM order_items WHERE order_quantity > 6 UNION SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3) AS filtered_orders ON co.order_id = filtered_orders.order_id",
        "SELECT co.order_date, co.order_id FROM customer_orders co WHERE co.order_id IN (SELECT oi.order_id FROM order_items oi WHERE oi.order_quantity > 6 UNION ALL SELECT oi.order_id FROM order_items oi GROUP BY oi.order_id HAVING COUNT(oi.product_id) > 3)",
        "SELECT DISTINCT order_date, order_id FROM customer_orders WHERE order_id IN (SELECT order_id FROM order_items WHERE order_quantity > 6) OR order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3)",
        "SELECT DISTINCT co.order_date, co.order_id FROM customer_orders co, order_items oi WHERE co.order_id = oi.order_id AND (oi.order_quantity > 6 OR co.order_id IN (SELECT oi.order_id FROM order_items oi GROUP BY oi.order_id HAVING COUNT(oi.product_id) > 3))",
        "SELECT co.order_date, co.order_id FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id GROUP BY co.order_date, co.order_id HAVING MAX(oi.order_quantity) > 6 OR COUNT(DISTINCT oi.product_id) > 3",
        "SELECT co.order_date, co.order_id from customer_orders co WHERE EXISTS (SELECT 1 from order_items oi WHERE oi.order_id = co.order_id AND oi.order_quantity > 6) OR EXISTS (SELECT 1 from order_items oi WHERE oi.order_id = co.order_id GROUP BY oi.order_id HAVING count(distinct oi.product_id) > 3)"
      ]
    ]
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "nlq": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
    "infer_predictions": [
      [
        "SELECT DISTINCT co.order_id, co.order_date FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id WHERE oi.order_quantity > 6 OR co.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(*) > 3)",
        "SELECT co.order_id, co.order_date FROM customer_orders co WHERE co.order_id IN (SELECT oi.order_id FROM order_items oi GROUP BY oi.order_id HAVING MAX(oi.order_quantity) > 6 OR COUNT(oi.product_id) > 3)",
        "SELECT co.order_id, co.order_date FROM customer_orders co INNER JOIN order_items oi ON co.order_id = oi.order_id GROUP BY co.order_id, co.order_date HAVING MAX(oi.order_quantity) > 6 OR COUNT(DISTINCT oi.product_id) > 3",
        "SELECT co.order_id, co.order_date FROM customer_orders co WHERE EXISTS (SELECT 1 FROM order_items oi WHERE oi.order_id = co.order_id AND oi.order_quantity > 6) OR co.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3)",
        "SELECT co.order_id, co.order_date FROM customer_orders co LEFT JOIN order_items oi ON co.order_id = oi.order_id GROUP BY co.order_id, co.order_date HAVING MAX(oi.order_quantity) > 6 OR COUNT(oi.product_id) > 3",
        "SELECT DISTINCT co.order_id, co.order_date FROM customer_orders co, order_items oi WHERE co.order_id = oi.order_id AND (oi.order_quantity > 6 OR co.order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3))",
        "SELECT co.order_id, co.order_date FROM customer_orders co WHERE co.order_id IN (SELECT order_id FROM order_items WHERE order_quantity > 6 GROUP BY order_id UNION SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3)",
        "SELECT o.order_id, o.order_date FROM customer_orders o WHERE o.order_id IN (SELECT oi.order_id FROM order_items oi WHERE oi.order_quantity > 6 GROUP BY oi.order_id) OR o.order_id IN (SELECT oi.order_id FROM order_items oi GROUP BY oi.order_id HAVING COUNT(oi.product_id) > 3)",
        "SELECT co.order_id, co.order_date FROM customer_orders co JOIN (SELECT order_id FROM order_items WHERE order_quantity > 6 UNION SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 3) a ON co.order_id = a.order_id",
        "SELECT order_id, order_date FROM customer_orders WHERE order_id IN (SELECT order_id FROM order_items WHERE order_quantity > 6 GROUP BY order_id UNION ALL SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(DISTINCT product_id) > 3)"
      ]
    ]
  },
  {
    "id": 315,
    "db_id": "region_building",
    "nlq": "How many buildings are there?",
    "gold": "SELECT count(*) FROM building",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM building",
        "SELECT COUNT(building_id) FROM building",
        "SELECT COUNT(1) FROM building",
        "SELECT COUNT(building_id) AS total_buildings FROM building",
        "SELECT SUM(1) FROM building",
        "SELECT COUNT(*) AS Total FROM building",
        "SELECT COUNT(building_id) FROM building GROUP BY NULL",
        "SELECT COUNT(*) FROM (SELECT building_id FROM building) AS Temp"
      ]
    ]
  },
  {
    "id": 316,
    "db_id": "region_building",
    "nlq": "Count the number of buildings.",
    "gold": "SELECT count(*) FROM building",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM building",
        "SELECT COUNT(building_id) FROM building",
        "SELECT COUNT(1) FROM building",
        "SELECT COUNT(building_id) AS number_of_buildings FROM building",
        "SELECT COUNT(*) AS building_count FROM building",
        "SELECT sum(case when building_id is not null then 1 else 0 end) FROM building",
        "SELECT total(building_id IS NOT NULL) FROM building",
        "SELECT CountOfBuildings FROM (SELECT COUNT(*) AS CountOfBuildings FROM building)"
      ]
    ]
  },
  {
    "id": 317,
    "db_id": "region_building",
    "nlq": "List the names of buildings in ascending order of number of stories.",
    "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
    "infer_predictions": [
      [
        "SELECT name FROM building ORDER BY number_of_stories ASC",
        "SELECT name FROM building b ORDER BY b.number_of_stories ASC",
        "SELECT b.name FROM building b ORDER BY b.number_of_stories",
        "SELECT name FROM building ORDER BY 1 ASC"
      ]
    ]
  },
  {
    "id": 318,
    "db_id": "region_building",
    "nlq": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
    "infer_predictions": [
      [
        "SELECT name FROM building ORDER BY number_of_stories ASC",
        "SELECT b.name FROM building b ORDER BY b.number_of_stories ASC",
        "SELECT tree.name FROM building tree ORDER BY tree.number_of_stories ASC"
      ]
    ]
  },
  {
    "id": 319,
    "db_id": "region_building",
    "nlq": "List the addresses of buildings in descending order of building completion year.",
    "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
    "infer_predictions": [
      [
        "SELECT b.address FROM building b ORDER BY b.completed_year DESC",
        "SELECT address FROM building ORDER BY completed_year DESC",
        "SELECT bldr.address FROM building bldr ORDER BY bldr.completed_year DESC",
        "SELECT DISTINCT b.address FROM building b ORDER BY b.completed_year DESC"
      ]
    ]
  },
  {
    "id": 320,
    "db_id": "region_building",
    "nlq": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
    "infer_predictions": [
      [
        "SELECT address FROM building ORDER BY completed_year DESC",
        "SELECT address FROM building ORDER BY completed_year DESC, building_id ASC",
        "SELECT building.address AS 'Address' FROM building ORDER BY building.completed_year DESC",
        "SELECT b.address FROM building b ORDER BY b.completed_year DESC, b.building_id ASC",
        "SELECT address FROM (SELECT * FROM building) ORDER BY completed_year DESC"
      ]
    ]
  },
  {
    "id": 321,
    "db_id": "region_building",
    "nlq": "What is the maximum number of stories of buildings not completed in 1980?",
    "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
    "infer_predictions": [
      [
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year <> 1980",
        "SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year != 1980",
        "SELECT MAX(number_of_stories) AS max_stories FROM building WHERE NOT completed_year = 1980",
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year NOT IN (1980)",
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year IS NOT 1980",
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year NOT LIKE '1980'",
        "SELECT MAX(NUMBER_OF_STORIES) FROM BUILDING WHERE COMPLETED_YEAR <> 1980",
        "SELECT MAX(b.number_of_stories) FROM building AS b WHERE b.completed_year NOT BETWEEN 1980 AND 1980",
        "SELECT MAX(NUMBER_OF_STORIES) FROM BUILDING WHERE NOT (COMPLETED_YEAR = 1980)",
        "SELECT MAX(number_of_stories) FROM building b WHERE b.completed_year NOT GLOB '1980'"
      ]
    ]
  },
  {
    "id": 322,
    "db_id": "region_building",
    "nlq": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
    "infer_predictions": [
      [
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year != 1980",
        "SELECT MAX(b.number_of_stories) AS max_stories FROM building b WHERE b.completed_year <> 1980",
        "SELECT MAX(b.number_of_stories) FROM building b WHERE NOT b.completed_year = 1980",
        "WITH FilteredBuildings AS (SELECT number_of_stories FROM building WHERE completed_year != 1980) SELECT MAX(number_of_stories) FROM FilteredBuildings",
        "WITH Non1980Buildings AS (SELECT number_of_stories FROM building WHERE completed_year <> 1980) SELECT MAX(number_of_stories) FROM Non1980Buildings",
        "SELECT MAX(number_of_stories) AS MaxStories FROM building WHERE completed_year NOT IN (1980)",
        "SELECT MAX(number_of_stories) FROM (SELECT number_of_stories FROM building WHERE completed_year NOT IN (1980))",
        "SELECT MAX(number_of_stories) FROM building WHERE completed_year != 1980 GROUP BY building_id",
        "SELECT MAX(b.number_of_stories) FROM building b WHERE b.completed_year IS NOT 1980",
        "SELECT (SELECT MAX(number_of_stories) FROM building WHERE completed_year != 1980) AS MaxNumberOfStories"
      ]
    ]
  },
  {
    "id": 323,
    "db_id": "region_building",
    "nlq": "What is the average population for all regions?",
    "gold": "SELECT avg(Population) FROM region",
    "infer_predictions": [
      [
        "SELECT AVG(population) FROM region",
        "SELECT AVG(population) AS average_population FROM region",
        "SELECT AVG(region.population) AS average_population FROM region",
        "SELECT AVG(population) FROM region GROUP BY region_id",
        "SELECT AVG(population) FROM region WHERE population IS NOT NULL",
        "SELECT AVG(region.population) FROM region WHERE region.population IS NOT NULL",
        "SELECT AVG(r.population) FROM region r",
        "SELECT AVG(r.population) AS average_population FROM region r",
        "SELECT AVG(population) FROM (SELECT population FROM region)"
      ]
    ]
  },
  {
    "id": 324,
    "db_id": "region_building",
    "nlq": "Compute the average population of a region.",
    "gold": "SELECT avg(Population) FROM region",
    "infer_predictions": [
      [
        "SELECT AVG(population) FROM region",
        "SELECT AVG(population) AS avg_population FROM region",
        "SELECT AVG(pop) FROM (SELECT population AS pop FROM region)",
        "SELECT AVG(p) FROM (SELECT population AS p FROM region AS r)",
        "SELECT AVG(region.population) AS AveragePopulation FROM region",
        "SELECT AVG(population) FROM (SELECT population FROM region)",
        "SELECT (SUM(population) / COUNT(*)) FROM region",
        "SELECT (SUM(region.population) / COUNT(region.region_id)) FROM region"
      ]
    ]
  },
  {
    "id": 325,
    "db_id": "region_building",
    "nlq": "What are the names of regions in ascending alphabetical order?",
    "gold": "SELECT Name FROM region ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM region ORDER BY name ASC",
        "SELECT r.name FROM region r ORDER BY r.name ASC"
      ]
    ]
  },
  {
    "id": 326,
    "db_id": "region_building",
    "nlq": "List the names of regions in alphabetical order.",
    "gold": "SELECT Name FROM region ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM region ORDER BY name ASC",
        "SELECT r.name FROM region r ORDER BY r.name ASC",
        "SELECT DISTINCT r.name FROM region r ORDER BY r.name ASC"
      ]
    ]
  },
  {
    "id": 327,
    "db_id": "region_building",
    "nlq": "What are the capitals of the regions with area bigger than 10000?",
    "gold": "SELECT Capital FROM region WHERE Area  >  10000",
    "infer_predictions": [
      [
        "SELECT capital FROM region WHERE area > 10000",
        "SELECT r1.capital FROM region r1 WHERE r1.area > 10000",
        "SELECT capital FROM region WHERE area > 10000 ORDER BY capital",
        "SELECT r.capital FROM region r WHERE r.area > 10000 ORDER BY r.capital DESC",
        "SELECT R.capital FROM region R WHERE R.area > 10000",
        "WITH SelectedRegion AS (SELECT capital FROM region WHERE area > 10000) SELECT capital FROM SelectedRegion",
        "SELECT capital FROM region GROUP BY capital HAVING area > 10000"
      ]
    ]
  },
  {
    "id": 328,
    "db_id": "region_building",
    "nlq": "Give me the capitals of the regions whose area is larger than 10000.",
    "gold": "SELECT Capital FROM region WHERE Area  >  10000",
    "infer_predictions": [
      [
        "SELECT capital FROM region WHERE area > 10000",
        "SELECT r.capital FROM region r WHERE r.area > 10000",
        "SELECT r2.capital FROM region r2 WHERE r2.area > 10000"
      ]
    ]
  },
  {
    "id": 329,
    "db_id": "region_building",
    "nlq": "List the capital of the region with the largest population.",
    "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT capital FROM region WHERE population = (SELECT MAX(population) FROM region)",
        "SELECT r.capital FROM region r ORDER BY r.population DESC LIMIT 1",
        "SELECT capital FROM region ORDER BY population DESC LIMIT 1",
        "SELECT r.capital FROM region r WHERE r.population = (SELECT MAX(population) FROM region)",
        "SELECT r.capital FROM region r WHERE r.population IN (SELECT MAX(population) FROM region)",
        "SELECT r.capital FROM region r JOIN (SELECT MAX(population) AS max_pop FROM region) t ON r.population = t.max_pop",
        "SELECT capital FROM region WHERE population = (SELECT MAX(population) FROM region WHERE name = region.name)"
      ]
    ]
  },
  {
    "id": 330,
    "db_id": "region_building",
    "nlq": "Which region has the largest population? Give me the capital of the region.",
    "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT capital FROM region ORDER BY population DESC LIMIT 1",
        "SELECT r.capital FROM region r WHERE r.population = (SELECT MAX(population) FROM region)",
        "SELECT r.capital FROM region r JOIN (SELECT region_id FROM region ORDER BY population DESC LIMIT 1) top_region ON r.region_id = top_region.region_id",
        "SELECT capital FROM (SELECT capital, RANK() OVER (ORDER BY population DESC) AS ranking FROM region) WHERE ranking = 1",
        "SELECT first_value(capital) OVER (ORDER BY population DESC) FROM region LIMIT 1",
        "SELECT r.capital FROM region r INNER JOIN (SELECT MAX(population) AS maxPop FROM region) maxTbl ON r.population = maxTbl.maxPop",
        "SELECT r.capital FROM region r WHERE r.population IN (SELECT MAX(population) FROM region)",
        "SELECT r.capital FROM region r ORDER BY r.population DESC LIMIT 1",
        "SELECT capital FROM region t1 WHERE NOT EXISTS (SELECT 1 FROM region t2 WHERE t2.population > t1.population)"
      ]
    ]
  },
  {
    "id": 331,
    "db_id": "region_building",
    "nlq": "List the names of the regions with the top 5 largest areas.",
    "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
    "infer_predictions": [
      [
        "SELECT name FROM region ORDER BY area DESC LIMIT 5",
        "SELECT name FROM region ORDER BY area DESC, region_id ASC LIMIT 5",
        "SELECT r.name FROM region r ORDER BY r.area DESC, r.region_id ASC LIMIT 5",
        "SELECT name FROM (SELECT name, area FROM region ORDER BY area DESC) LIMIT 5",
        "SELECT name FROM region WHERE area IS NOT NULL ORDER BY area DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 332,
    "db_id": "region_building",
    "nlq": "What are the names of the 5 largest regions in terms of area?",
    "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
    "infer_predictions": [
      [
        "SELECT name FROM region ORDER BY area DESC LIMIT 5",
        "SELECT name FROM (SELECT name, area FROM region ORDER BY area DESC) LIMIT 5",
        "SELECT name FROM region ORDER BY area DESC, name ASC LIMIT 5",
        "SELECT name FROM region WHERE area IS NOT NULL ORDER BY area DESC LIMIT 5",
        "SELECT r.name FROM region r WHERE r.area IS NOT NULL ORDER BY r.area DESC LIMIT 5"
      ]
    ]
  },
  {
    "id": 333,
    "db_id": "region_building",
    "nlq": "Show the names of buildings and the names of regions they are in.",
    "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "infer_predictions": [
      [
        "SELECT building.name, region.name FROM building JOIN region ON building.region_id = region.region_id",
        "SELECT b.name AS building_name, r.name AS region_name FROM building b INNER JOIN region r ON b.region_id = r.region_id",
        "SELECT building.name AS Building, region.name AS Region FROM building, region WHERE building.region_id = region.region_id",
        "SELECT b.name, r.name FROM building b, region r WHERE b.region_id = r.region_id",
        "SELECT DISTINCT b.name, r.name FROM building b JOIN region r ON b.region_id = r.region_id",
        "SELECT b.name AS BuildingName, r.name AS RegionName FROM building AS b JOIN region AS r ON b.region_id = r.region_id",
        "SELECT (SELECT name FROM building WHERE region_id = region.region_id), name FROM region",
        "SELECT building.name AS Building_Name, region.name AS Region_Name FROM building LEFT JOIN region ON building.region_id = region.region_id"
      ]
    ]
  },
  {
    "id": 334,
    "db_id": "region_building",
    "nlq": "For each building, return the name of the building and the name of the region it belongs to.",
    "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "infer_predictions": [
      [
        "SELECT b.name, r.name FROM building b JOIN region r ON b.region_id = r.region_id",
        "SELECT building.name, region.name FROM building INNER JOIN region ON building.region_id = region.region_id",
        "SELECT b.name AS BuildingName, r.name AS RegionName FROM building AS b, region AS r WHERE b.region_id = r.region_id",
        "SELECT building.name, region.name FROM building, region WHERE building.region_id = region.region_id",
        "SELECT A.name, B.name FROM building A JOIN region B ON A.region_id = B.region_id",
        "SELECT bld.name, reg.name FROM building bld INNER JOIN region reg ON bld.region_id = reg.region_id",
        "SELECT b.name, r.name FROM building b, region r WHERE b.region_id = r.region_id",
        "SELECT building.name, region.name FROM building JOIN region USING(region_id)",
        "SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id",
        "SELECT b.name, r.name FROM building b CROSS JOIN region r ON b.region_id = r.region_id"
      ]
    ]
  },
  {
    "id": 335,
    "db_id": "region_building",
    "nlq": "Show the names of regions that have more than one building.",
    "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT name FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(*) > 1)",
        "SELECT DISTINCT R.name FROM region R JOIN building B ON R.region_id = B.region_id GROUP BY R.region_id HAVING COUNT(B.building_id) > 1",
        "SELECT R.name FROM region R WHERE EXISTS (SELECT 1 FROM building B WHERE B.region_id = R.region_id GROUP BY B.region_id HAVING COUNT(B.building_id) > 1)",
        "SELECT name FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1)",
        "SELECT region.name FROM region INNER JOIN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1) AS subquery ON region.region_id = subquery.region_id",
        "SELECT R.name FROM (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(*) > 1) AS subregion JOIN region R ON subregion.region_id = R.region_id",
        "SELECT r.name FROM region r WHERE (SELECT COUNT(*) FROM building WHERE region_id = r.region_id) > 1",
        "SELECT DISTINCT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.region_id HAVING COUNT(DISTINCT b.building_id) > 1",
        "SELECT name FROM (SELECT region_id, COUNT(*) AS cnt FROM building GROUP BY region_id HAVING cnt > 1) AS SQ JOIN region ON region.region_id = SQ.region_id",
        "SELECT region.name FROM region, building WHERE region.region_id = building.region_id GROUP BY region.name, region.region_id HAVING COUNT(building.building_id) > 1"
      ]
    ]
  },
  {
    "id": 336,
    "db_id": "region_building",
    "nlq": "Which regions have more than one building? Give me the names of the regions.",
    "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT r.name FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1",
        "SELECT name FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(*) > 1)",
        "SELECT r.name FROM region r WHERE EXISTS (SELECT 1 FROM building b WHERE b.region_id = r.region_id GROUP BY b.region_id HAVING COUNT(b.building_id) > 1)",
        "SELECT name FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1)",
        "SELECT DISTINCT r.name FROM region r, building b WHERE r.region_id = b.region_id GROUP BY r.region_id, r.name HAVING COUNT(b.building_id) > 1",
        "SELECT r.name FROM region r INNER JOIN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1) AS c ON r.region_id = c.region_id",
        "SELECT DISTINCT name FROM region WHERE region_id IN (SELECT region_id FROM building b GROUP BY b.region_id HAVING COUNT(*) > 1)",
        "SELECT r.name FROM region r WHERE r.region_id IN (SELECT b.region_id FROM building b GROUP BY b.region_id HAVING COUNT(*) > 1)",
        "SELECT region.name FROM region JOIN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) > 1) AS building_count ON region.region_id = building_count.region_id",
        "SELECT DISTINCT r.name FROM region AS r JOIN building AS b ON b.region_id = r.region_id GROUP BY r.region_id, r.name HAVING COUNT(b.building_id) > 1"
      ]
    ]
  },
  {
    "id": 337,
    "db_id": "region_building",
    "nlq": "Show the capital of the region that has the most buildings.",
    "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT R.capital FROM region R WHERE R.region_id = (SELECT B.region_id FROM building B GROUP BY B.region_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT capital FROM region WHERE region_id = (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC LIMIT 1)",
        "SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id HAVING COUNT(building_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(building_id) AS cnt FROM building GROUP BY region_id)))",
        "SELECT R.capital FROM region AS R JOIN (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(*) DESC LIMIT 1) AS B ON R.region_id = B.region_id",
        "SELECT R.capital FROM region R INNER JOIN (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC LIMIT 1) B ON R.region_id = B.region_id",
        "SELECT (SELECT capital FROM region WHERE region_id = (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(*) DESC LIMIT 1))",
        "SELECT R.capital FROM region R WHERE R.region_id = (SELECT region_id FROM (SELECT region_id, COUNT(*) AS total FROM building GROUP BY region_id ORDER BY total DESC LIMIT 1) temp)",
        "SELECT capital FROM region WHERE region_id = (SELECT B.region_id FROM (SELECT region_id, COUNT(*) AS building_count FROM building GROUP BY region_id ORDER BY building_count DESC LIMIT 1) B)",
        "SELECT capital FROM region WHERE EXISTS (SELECT 1 FROM building WHERE region.region_id = building.region_id GROUP BY region_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT R.capital FROM region R WHERE R.region_id = (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC, region_id LIMIT 1)"
      ]
    ]
  },
  {
    "id": 338,
    "db_id": "region_building",
    "nlq": "Which region has the largest number of buildings? Show me the capital of the region.",
    "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.capital FROM region r WHERE r.region_id = (SELECT b.region_id FROM building b GROUP BY b.region_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT capital FROM region WHERE region_id IN (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC LIMIT 1)",
        "SELECT r.capital FROM region r JOIN (SELECT region_id, COUNT(*) as cnt FROM building GROUP BY region_id ORDER BY cnt DESC LIMIT 1) b ON r.region_id = b.region_id",
        "SELECT r.capital FROM region AS r INNER JOIN (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(*) DESC LIMIT 1) AS t ON r.region_id = t.region_id",
        "SELECT capital FROM region WHERE region_id = (SELECT region_id FROM (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC) LIMIT 1)",
        "SELECT r.capital FROM region r JOIN building b ON r.region_id = b.region_id GROUP BY b.region_id ORDER BY COUNT(b.building_id) DESC LIMIT 1",
        "SELECT r.capital FROM region AS r WHERE r.region_id = (SELECT region_id FROM building GROUP BY region_id LIMIT 1)",
        "SELECT r.capital FROM (SELECT region_id FROM building GROUP BY region_id ORDER BY COUNT(building_id) DESC LIMIT 1) b JOIN region r ON b.region_id = r.region_id",
        "SELECT capital FROM (SELECT r.capital, COUNT(b.building_id) AS building_count FROM building b JOIN region r ON b.region_id = r.region_id GROUP BY b.region_id ORDER BY building_count DESC LIMIT 1) subquery",
        "SELECT region.capital FROM building, region WHERE building.region_id = region.region_id GROUP BY building.region_id ORDER BY COUNT(building.building_id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 339,
    "db_id": "region_building",
    "nlq": "Show addresses of buildings and the capitals of regions they are in.",
    "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "infer_predictions": [
      [
        "SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id",
        "SELECT b.address, r.capital FROM building AS b INNER JOIN region AS r ON b.region_id = r.region_id",
        "SELECT building.address, region.capital FROM building, region WHERE building.region_id = region.region_id",
        "SELECT address, capital FROM building INNER JOIN region ON building.region_id = region.region_id",
        "SELECT b.address, r.capital FROM building b, region r WHERE b.region_id = r.region_id",
        "SELECT address, capital FROM building b LEFT JOIN region r ON b.region_id = r.region_id",
        "SELECT b.address AS Building_Address, r.capital AS Region_Capital FROM building b JOIN region r ON b.region_id = r.region_id",
        "SELECT building.address AS Address, region.capital AS Capital FROM building JOIN region ON building.region_id = region.region_id"
      ]
    ]
  },
  {
    "id": 340,
    "db_id": "region_building",
    "nlq": "For each building, return the address of the building and the name of the region it belongs to.",
    "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "infer_predictions": [
      [
        "SELECT building.address, region.name FROM building JOIN region ON building.region_id = region.region_id",
        "SELECT b.address, r.name FROM building b INNER JOIN region r ON b.region_id = r.region_id",
        "SELECT b.address AS Building_Address, r.name AS Region_Name FROM building b, region r WHERE b.region_id = r.region_id",
        "SELECT building.address, region.name FROM building, region WHERE building.region_id = region.region_id",
        "SELECT addr, region_name FROM (SELECT address AS addr, region_id FROM building) JOIN (SELECT region_id, name AS region_name FROM region) USING (region_id)",
        "SELECT a.address, n.name FROM building a LEFT JOIN region n ON a.region_id = n.region_id;",
        "SELECT (SELECT region.name FROM region WHERE region.region_id = building.region_id) AS region_name, address FROM building",
        "SELECT (address), (SELECT name FROM region WHERE region.region_id = building.region_id) FROM building"
      ]
    ]
  },
  {
    "id": 341,
    "db_id": "region_building",
    "nlq": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
    "infer_predictions": [
      [
        "SELECT number_of_stories FROM building WHERE region_id IN (SELECT region_id FROM region WHERE name = 'Abruzzo')",
        "SELECT b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name = 'Abruzzo'",
        "SELECT building.number_of_stories FROM building INNER JOIN region ON building.region_id = region.region_id WHERE region.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building, region WHERE building.region_id = region.region_id AND region.name = 'Abruzzo'",
        "SELECT b.number_of_stories FROM building b, region r WHERE b.region_id = r.region_id AND r.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building WHERE EXISTS (SELECT 1 FROM region WHERE region.region_id = building.region_id AND region.name = 'Abruzzo')",
        "SELECT number_of_stories FROM building b WHERE b.region_id IN (SELECT r.region_id FROM region r WHERE r.name = 'Abruzzo')",
        "SELECT b.number_of_stories FROM building b WHERE EXISTS (SELECT 1 FROM region r WHERE r.region_id = b.region_id AND r.name = 'Abruzzo')",
        "SELECT number_of_stories FROM building INNER JOIN region ON building.region_id = region.region_id AND region.name = 'Abruzzo'",
        "SELECT distinct number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE r.name = 'Abruzzo'"
      ]
    ]
  },
  {
    "id": 342,
    "db_id": "region_building",
    "nlq": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
    "infer_predictions": [
      [
        "SELECT building.number_of_stories FROM building INNER JOIN region ON building.region_id = region.region_id WHERE region.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building WHERE region_id IN (SELECT region_id FROM region WHERE name = 'Abruzzo')",
        "SELECT B.number_of_stories FROM building B, region R WHERE B.region_id = R.region_id AND R.name = 'Abruzzo'",
        "SELECT B.number_of_stories FROM building B JOIN region R ON B.region_id = R.region_id WHERE R.name = 'Abruzzo'",
        "SELECT building.number_of_stories FROM building JOIN region ON building.region_id = region.region_id AND region.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building WHERE EXISTS (SELECT 1 FROM region WHERE building.region_id = region.region_id AND name = 'Abruzzo')",
        "SELECT B.number_of_stories FROM building AS B INNER JOIN region AS R ON B.region_id = R.region_id WHERE R.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building INNER JOIN region USING (region_id) WHERE region.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building NATURAL JOIN region WHERE region.name = 'Abruzzo'",
        "SELECT number_of_stories FROM building WHERE region_id = (SELECT region_id FROM region WHERE name = 'Abruzzo')"
      ]
    ]
  },
  {
    "id": 343,
    "db_id": "region_building",
    "nlq": "Please show each completion year and the number of buildings completed in that year.",
    "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
    "infer_predictions": [
      [
        "SELECT completed_year, COUNT(building_id) FROM building GROUP BY completed_year",
        "SELECT building.completed_year, COUNT(*) FROM building GROUP BY building.completed_year",
        "SELECT b.completed_year, COUNT(b.building_id) FROM building b GROUP BY b.completed_year",
        "SELECT completed_year, COUNT(*) AS total FROM building GROUP BY completed_year",
        "SELECT b.completed_year, COUNT(b.building_id) AS count_of_buildings FROM building b GROUP BY b.completed_year",
        "SELECT completed_year, COUNT(building_id) AS count FROM building GROUP BY completed_year",
        "SELECT b.completed_year, COUNT(*) FROM building b GROUP BY b.completed_year",
        "SELECT b.completed_year, COUNT(building_id) FROM building b GROUP BY b.completed_year"
      ]
    ]
  },
  {
    "id": 344,
    "db_id": "region_building",
    "nlq": "For completion year, return the year and the number of buildings completed.",
    "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
    "infer_predictions": [
      [
        "SELECT completed_year, COUNT(building_id) AS number_of_buildings FROM building GROUP BY completed_year",
        "SELECT b.completed_year, COUNT(b.building_id) AS total_buildings FROM building b GROUP BY b.completed_year",
        "SELECT completed_year AS year, COUNT(*) AS num_buildings FROM building GROUP BY completed_year",
        "SELECT b.completed_year, COUNT(*) AS building_count FROM building AS b GROUP BY b.completed_year",
        "SELECT building.completed_year, COUNT(building.building_id) AS count_of_buildings FROM building GROUP BY building.completed_year",
        "SELECT b.completed_year, COUNT(DISTINCT b.building_id) AS buildings FROM building b GROUP BY b.completed_year",
        "SELECT completed_year, COUNT(building_id) FROM building GROUP BY completed_year",
        "SELECT completed_year AS completion_year, COUNT(building_id) AS total_buildings FROM building GROUP BY completion_year",
        "SELECT completed_year, (SELECT COUNT(*) FROM building WHERE completed_year = b.completed_year) AS building_count FROM building b GROUP BY completed_year"
      ]
    ]
  },
  {
    "id": 345,
    "db_id": "region_building",
    "nlq": "List the year in which the most buildings are completed.",
    "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT completed_year FROM building GROUP BY completed_year HAVING COUNT(building_id) = (SELECT MAX(counted) FROM (SELECT completed_year, COUNT(*) as counted FROM building GROUP BY completed_year))",
        "SELECT completed_year FROM (SELECT completed_year, COUNT(*) as num FROM building GROUP BY completed_year) ORDER BY num DESC LIMIT 1",
        "SELECT B.completed_year FROM (SELECT completed_year, COUNT(*) as total FROM building GROUP BY completed_year) B ORDER BY total DESC LIMIT 1",
        "SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(building_id) DESC LIMIT 1",
        "WITH YearCount AS (SELECT completed_year, COUNT(*) as Quantity FROM building GROUP BY completed_year) SELECT completed_year FROM YearCount ORDER BY Quantity DESC LIMIT 1",
        "SELECT MIN(completed_year) FROM building WHERE building_id IN (SELECT building_id FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT completed_year AS YearMax FROM building WHERE completed_year IN (SELECT completed_year FROM (SELECT completed_year, COUNT(*) AS num_buildings FROM building GROUP BY completed_year ORDER BY num_buildings DESC LIMIT 1))",
        "WITH RankedYears AS (SELECT completed_year, RANK() OVER (ORDER BY COUNT(*) DESC) as rk FROM building GROUP BY completed_year) SELECT completed_year FROM RankedYears WHERE rk = 1",
        "SELECT completed_year FROM (SELECT completed_year, COUNT(*) AS buildings_count FROM building GROUP BY completed_year ORDER BY buildings_count DESC LIMIT 1) AS MostBuildingsYear"
      ]
    ]
  },
  {
    "id": 346,
    "db_id": "region_building",
    "nlq": "In which year did the most building constructions complete?",
    "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY COUNT(b.building_id) DESC LIMIT 1",
        "SELECT MAX(c.completed_year) FROM (SELECT completed_year, COUNT(*) AS count FROM building GROUP BY completed_year) AS c WHERE c.count = (SELECT MAX(count) FROM (SELECT completed_year, COUNT(*) AS count FROM building GROUP BY completed_year))",
        "SELECT completed_year FROM (SELECT completed_year, COUNT(building_id) AS total FROM building GROUP BY completed_year) t ORDER BY total DESC LIMIT 1",
        "WITH YearlyCount AS (SELECT completed_year, COUNT(*) AS TotalCount FROM building GROUP BY completed_year) SELECT completed_year FROM YearlyCount WHERE TotalCount = (SELECT MAX(TotalCount) FROM YearlyCount)",
        "SELECT b.completed_year FROM (SELECT completed_year, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM building GROUP BY completed_year) b WHERE rank = 1",
        "SELECT completed_year FROM building WHERE completed_year IN (SELECT completed_year FROM building GROUP BY completed_year ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.year FROM (SELECT completed_year as year, COUNT(building_id) as built FROM building GROUP BY completed_year ORDER BY built DESC LIMIT 1) c"
      ]
    ]
  },
  {
    "id": 347,
    "db_id": "region_building",
    "nlq": "List the names of regions that do not have any buildings.",
    "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
    "infer_predictions": [
      [
        "SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)",
        "SELECT name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.region_id = r.region_id)",
        "SELECT r.name FROM region r LEFT JOIN building b ON r.region_id = b.region_id WHERE b.region_id IS NULL",
        "SELECT region.name FROM region LEFT JOIN building ON region.region_id = building.region_id WHERE building.region_id IS NULL",
        "SELECT region.name FROM region WHERE region.region_id NOT IN (SELECT DISTINCT region_id FROM building)",
        "SELECT r.name FROM region AS r WHERE NOT EXISTS (SELECT NULL FROM building AS b WHERE b.region_id = r.region_id)",
        "SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT region_id FROM building WHERE building.region_id = r.region_id)"
      ]
    ]
  },
  {
    "id": 348,
    "db_id": "region_building",
    "nlq": "What are the names of regions in which there are no buildings?",
    "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
    "infer_predictions": [
      [
        "SELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)",
        "SELECT r.name FROM region r LEFT JOIN building b ON r.region_id = b.region_id WHERE b.region_id IS NULL",
        "SELECT name FROM region WHERE NOT EXISTS (SELECT 1 FROM building WHERE building.region_id = region.region_id)",
        "SELECT r.name FROM region r WHERE r.region_id NOT IN (SELECT b.region_id FROM building b)",
        "SELECT region.name FROM region LEFT OUTER JOIN building ON region.region_id = building.region_id WHERE building.region_id IS NULL",
        "SELECT r.name FROM region AS r WHERE NOT EXISTS (SELECT * FROM building AS b WHERE b.region_id = r.region_id)",
        "SELECT name FROM region r WHERE r.region_id NOT IN (SELECT DISTINCT region_id FROM building)",
        "SELECT r.name FROM region AS r LEFT JOIN building AS b ON r.region_id = b.region_id WHERE b.building_id IS NULL"
      ]
    ]
  },
  {
    "id": 349,
    "db_id": "region_building",
    "nlq": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT b1.completed_year FROM building b1 WHERE b1.number_of_stories > 20 AND b1.completed_year IN (SELECT b2.completed_year FROM building b2 WHERE b2.number_of_stories < 15)",
        "SELECT DISTINCT high.completed_year FROM building high JOIN building low ON high.completed_year = low.completed_year WHERE high.number_of_stories > 20 AND low.number_of_stories < 15",
        "SELECT high.completed_year FROM (SELECT * FROM building WHERE number_of_stories > 20) high INNER JOIN (SELECT * FROM building WHERE number_of_stories < 15) low ON high.completed_year = low.completed_year GROUP BY high.completed_year",
        "SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories < 15",
        "SELECT b.completed_year FROM building b WHERE EXISTS (SELECT 1 FROM building b1 WHERE b1.completed_year = b.completed_year AND b1.number_of_stories > 20) AND EXISTS (SELECT 1 FROM building b2 WHERE b2.completed_year = b.completed_year AND b2.number_of_stories < 15)",
        "SELECT completed_years FROM (SELECT completed_year AS completed_years FROM building WHERE number_of_stories > 20) a WHERE completed_years IN (SELECT completed_year FROM building WHERE number_of_stories < 15)",
        "SELECT a.completed_year FROM building a WHERE a.number_of_stories > 20 AND a.completed_year IN (SELECT b.completed_year FROM building b WHERE b.number_of_stories < 15)",
        "SELECT DISTINCT b.completed_year FROM building b WHERE (SELECT COUNT(*) FROM building WHERE building.completed_year = b.completed_year AND building.number_of_stories < 15) > 0 AND b.number_of_stories > 20",
        "SELECT year FROM (SELECT completed_year AS year FROM building WHERE number_of_stories > 20 UNION ALL SELECT completed_year AS year FROM building WHERE number_of_stories < 15) WHERE year IN (SELECT completed_year FROM building WHERE number_of_stories < 15)",
        "SELECT b.completed_year FROM building b JOIN (SELECT completed_year FROM building WHERE number_of_stories < 15 GROUP BY completed_year) lowYears ON b.completed_year = lowYears.completed_year WHERE b.number_of_stories > 20 GROUP BY b.completed_year"
      ]
    ]
  },
  {
    "id": 350,
    "db_id": "region_building",
    "nlq": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT b1.completed_year FROM building b1 WHERE b1.number_of_stories > 20 AND EXISTS (SELECT 1 FROM building b2 WHERE b2.number_of_stories < 15 AND b1.completed_year = b2.completed_year)",
        "SELECT completed_year FROM building WHERE number_of_stories > 20 INTERSECT SELECT completed_year FROM building WHERE number_of_stories < 15",
        "SELECT completed_year FROM building WHERE number_of_stories > 20 AND completed_year IN (SELECT completed_year FROM building WHERE number_of_stories < 15)",
        "SELECT year FROM (SELECT DISTINCT completed_year AS year, number_of_stories FROM building ORDER BY completed_year) WHERE number_of_stories > 20 INTERSECT SELECT year FROM (SELECT DISTINCT completed_year AS year, number_of_stories FROM building ORDER BY completed_year) WHERE number_of_stories < 15",
        "SELECT b1.completed_year FROM building b1 JOIN building b2 ON b1.completed_year = b2.completed_year WHERE b1.number_of_stories > 20 AND b2.number_of_stories < 15",
        "SELECT DISTINCT completed_year FROM building WHERE (number_of_stories > 20 OR number_of_stories < 15) GROUP BY completed_year HAVING COUNT(DISTINCT CASE WHEN number_of_stories > 20 THEN 1 ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN number_of_stories < 15 THEN 1 ELSE NULL END) > 0",
        "WITH High AS (SELECT DISTINCT completed_year FROM building WHERE number_of_stories > 20), Low AS (SELECT DISTINCT completed_year FROM building WHERE number_of_stories < 15) SELECT High.completed_year FROM High JOIN Low ON High.completed_year = Low.completed_year",
        "SELECT DISTINCT completed_year FROM building WHERE number_of_stories > 20 AND completed_year IN (SELECT DISTINCT completed_year FROM building WHERE number_of_stories < 15)",
        "SELECT DISTINCT a.completed_year FROM building a, building b WHERE a.number_of_stories > 20 AND b.number_of_stories < 15 AND a.completed_year = b.completed_year"
      ]
    ]
  },
  {
    "id": 351,
    "db_id": "region_building",
    "nlq": "Show the distinct addresses of buildings.",
    "gold": "SELECT DISTINCT Address FROM building",
    "infer_predictions": [
      [
        "SELECT DISTINCT address FROM building",
        "SELECT address FROM building GROUP BY address",
        "SELECT address FROM (SELECT DISTINCT address FROM building)",
        "SELECT DISTINCT b.address FROM building b",
        "SELECT address FROM (SELECT DISTINCT address FROM building) AS UniqueAddresses",
        "SELECT UniqAddr.address FROM (SELECT DISTINCT address FROM building) UniqAddr",
        "SELECT * FROM (SELECT DISTINCT address FROM building)",
        "SELECT DISTINCT addr.address FROM building addr"
      ]
    ]
  },
  {
    "id": 352,
    "db_id": "region_building",
    "nlq": "Give me a list of distinct building addresses.",
    "gold": "SELECT DISTINCT Address FROM building",
    "infer_predictions": [
      [
        "SELECT DISTINCT address FROM building;",
        "SELECT address FROM building GROUP BY address;",
        "SELECT DISTINCT b.address FROM building b;",
        "SELECT b.address FROM building b GROUP BY b.address;",
        "SELECT address FROM (SELECT DISTINCT address FROM building);",
        "SELECT DISTINCT address FROM building ORDER BY address;",
        "SELECT b.address FROM (SELECT DISTINCT address FROM building) AS b;",
        "SELECT address FROM (SELECT address FROM building GROUP BY address) AS UniqueAddresses;"
      ]
    ]
  },
  {
    "id": 353,
    "db_id": "region_building",
    "nlq": "Show the completed years of buildings in descending order of the number of stories.",
    "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
    "infer_predictions": [
      [
        "SELECT completed_year FROM building ORDER BY number_of_stories DESC",
        "SELECT b.completed_year FROM building b ORDER BY b.number_of_stories DESC",
        "SELECT completed_year FROM building ORDER BY number_of_stories DESC, building_id ASC",
        "SELECT b.completed_year FROM building b ORDER BY b.number_of_stories DESC, b.building_id ASC",
        "SELECT DISTINCT b.completed_year FROM building b ORDER BY b.number_of_stories DESC",
        "SELECT completed_year FROM building GROUP BY completed_year ORDER BY MAX(number_of_stories) DESC",
        "SELECT b.completed_year FROM building b GROUP BY b.completed_year ORDER BY MAX(b.number_of_stories) DESC",
        "SELECT completed_year FROM building ORDER BY number_of_stories DESC LIMIT 1000",
        "SELECT b.completed_year FROM building b ORDER BY b.number_of_stories DESC LIMIT 1000"
      ]
    ]
  },
  {
    "id": 354,
    "db_id": "region_building",
    "nlq": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
    "infer_predictions": [
      [
        "SELECT completed_year FROM building ORDER BY number_of_stories DESC",
        "SELECT completed_year FROM building GROUP BY building_id, completed_year, number_of_stories ORDER BY number_of_stories DESC",
        "SELECT completed_year FROM (SELECT completed_year, number_of_stories FROM building) ORDER BY number_of_stories DESC",
        "SELECT completed_year FROM (SELECT * FROM building) ORDER BY number_of_stories DESC",
        "SELECT building.completed_year, building.number_of_stories FROM building ORDER BY building.number_of_stories DESC LIMIT (SELECT COUNT(building_id) FROM building)",
        "SELECT completed_year FROM building WHERE EXISTS (SELECT building_id FROM building) ORDER BY number_of_stories DESC",
        "SELECT building.completed_year AS year_completed FROM building AS building ORDER BY building.number_of_stories DESC"
      ]
    ]
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "nlq": "List details of all the channel in alphabetical order .",
    "gold": "select channel_details from channels order by channel_details",
    "infer_predictions": [
      [
        "SELECT channel_details FROM channels ORDER BY channel_details ASC",
        "SELECT channel_details AS details FROM channels ORDER BY details ASC",
        "SELECT C.channel_details FROM channels C ORDER BY C.channel_details ASC",
        "SELECT channel_details FROM channels GROUP BY channel_details ORDER BY channel_details",
        "SELECT channel_details FROM channels WHERE channel_id IS NOT NULL ORDER BY channel_details",
        "SELECT channel_details FROM (SELECT * FROM channels) ORDER BY channel_details ASC",
        "SELECT channel_details FROM channels ORDER BY LOWER(channel_details) ASC"
      ]
    ]
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "nlq": "What is the list of channel details ordered alphabetically ?",
    "gold": "select channel_details from channels order by channel_details",
    "infer_predictions": [
      [
        "SELECT channel_details FROM channels ORDER BY channel_details ASC",
        "SELECT channel_details FROM channels ORDER BY 1",
        "SELECT channel_details FROM channels GROUP BY channel_details ORDER BY channel_details",
        "SELECT c.channel_details FROM channels c ORDER BY c.channel_details ASC"
      ]
    ]
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "nlq": "How many services are there?",
    "gold": "SELECT count(*) FROM services",
    "infer_predictions": [
      [
        "SELECT COUNT(service_id) FROM services",
        "SELECT COUNT(*) FROM (SELECT service_id FROM services)",
        "SELECT COUNT(DISTINCT s.service_id) FROM services s",
        "SELECT COUNT(*) FROM (SELECT DISTINCT service_id FROM services s)",
        "SELECT (SELECT COUNT(service_id) FROM services) AS total_services",
        "SELECT (SELECT COUNT(*) FROM services) AS service_count",
        "SELECT COUNT(*) FROM services s WHERE exists (SELECT 1 FROM services where service_id = s.service_id)",
        "SELECT (SELECT COUNT(s1.service_id) FROM services s1) as TotalServices FROM services s2 LIMIT 1"
      ]
    ]
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "nlq": "Count the number of services.",
    "gold": "SELECT count(*) FROM services",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM services",
        "SELECT COUNT(service_id) FROM services",
        "SELECT COUNT(service_details) FROM services WHERE service_details IS NOT NULL",
        "SELECT COUNT(1) FROM services",
        "SELECT COUNT(service_id) AS num_services FROM services",
        "SELECT COUNT(*) AS TotalServices FROM services",
        "SELECT COUNT(DISTINCT service_id) AS UniqueServiceCount FROM services",
        "SELECT COUNT(*) FROM (SELECT DISTINCT service_id FROM services)",
        "SELECT COUNT(service_id) FROM services WHERE service_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "nlq": "What is the most common analytical layer type code?",
    "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT al.analytical_layer_type_code FROM analytical_layer AS al GROUP BY al.analytical_layer_type_code ORDER BY COUNT(al.analytical_layer_type_code) DESC LIMIT 1",
        "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code HAVING COUNT(analytical_layer_type_code) = (SELECT MAX(count_type) FROM (SELECT COUNT(analytical_layer_type_code) AS count_type FROM analytical_layer GROUP BY analytical_layer_type_code))",
        "SELECT al.analytical_layer_type_code FROM analytical_layer AS al WHERE al.analytical_layer_type_code IS NOT NULL GROUP BY al.analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH CountedTypes AS (SELECT analytical_layer_type_code, COUNT(*) AS cnt FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM CountedTypes ORDER BY cnt DESC LIMIT 1",
        "SELECT analytical_layer_type_code FROM analytical_layer WHERE analytical_layer_type_code IN (SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH TypeRank AS (SELECT analytical_layer_type_code, RANK() OVER(ORDER BY COUNT(*) DESC) AS rank FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM TypeRank WHERE rank = 1",
        "SELECT analytical_layer_type_code FROM (SELECT analytical_layer_type_code, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS rn FROM analytical_layer GROUP BY analytical_layer_type_code) tmp WHERE rn = 1"
      ]
    ]
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "nlq": "Find the analytical layer type code that appears most often.",
    "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT AL.analytical_layer_type_code FROM analytical_layer AL GROUP BY AL.analytical_layer_type_code ORDER BY COUNT(AL.analytical_layer_type_code) DESC LIMIT 1",
        "SELECT analytical_layer_type_code, COUNT(*) AS frequency FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY frequency DESC LIMIT 1",
        "WITH TypeFrequency AS (SELECT analytical_layer_type_code, COUNT(*) AS Count FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM TypeFrequency WHERE Count = (SELECT MAX(Count) FROM TypeFrequency)",
        "SELECT analytical_layer_type_code FROM (SELECT analytical_layer_type_code, COUNT(*) AS freq FROM analytical_layer GROUP BY analytical_layer_type_code) a ORDER BY freq DESC LIMIT 1",
        "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code HAVING COUNT(*) = (SELECT MAX(a.count) FROM (SELECT COUNT(*) as count FROM analytical_layer GROUP BY analytical_layer_type_code) a)",
        "SELECT AL.analytical_layer_type_code FROM analytical_layer AL WHERE AL.analytical_layer_type_code = (SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH RankedTypes AS (SELECT analytical_layer_type_code, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM analytical_layer GROUP BY analytical_layer_type_code) SELECT analytical_layer_type_code FROM RankedTypes WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "nlq": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
    "infer_predictions": [
      [
        "SELECT s.service_id FROM services s JOIN customers_and_services cas ON s.service_id = cas.service_id JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch'",
        "SELECT services.service_id FROM services, customers_and_services, customers WHERE customers.customer_details = 'Hardy Kutch' AND customers_and_services.customer_id = customers.customer_id AND services.service_id = customers_and_services.service_id",
        "SELECT DISTINCT service_id FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customer_details = 'Hardy Kutch')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
        "SELECT s.service_id FROM services s WHERE EXISTS (SELECT 1 FROM customers_and_services cas INNER JOIN customers c ON c.customer_id = cas.customer_id WHERE c.customer_details = 'Hardy Kutch' AND cas.service_id = s.service_id)",
        "SELECT service_id FROM services WHERE service_id IN (SELECT cas.service_id FROM customers_and_services cas, customers c WHERE cas.customer_id = c.customer_id AND c.customer_details = 'Hardy Kutch')",
        "SELECT services.service_id FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id JOIN services ON customers_and_services.service_id = services.service_id WHERE customers.customer_details = 'Hardy Kutch'",
        "SELECT s.service_id FROM services s INNER JOIN customers_and_services cas ON cas.service_id = s.service_id INNER JOIN customers c ON c.customer_id = cas.customer_id WHERE c.customer_details = 'Hardy Kutch'",
        "SELECT service_details FROM services WHERE EXISTS (SELECT * FROM customers INNER JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND services.service_id = customers_and_services.service_id)"
      ]
    ]
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "nlq": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
    "infer_predictions": [
      [
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
        "SELECT DISTINCT S.service_details FROM services S INNER JOIN customers_and_services CS ON S.service_id = CS.service_id JOIN customers C ON C.customer_id = CS.customer_id WHERE C.customer_details = 'Hardy Kutch'",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customers.customer_details = 'Hardy Kutch')",
        "SELECT S.service_details FROM services S, customers_and_services CS, customers C WHERE S.service_id = CS.service_id AND CS.customer_id = C.customer_id AND C.customer_details = 'Hardy Kutch'",
        "SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customers_and_services CS INNER JOIN customers C ON CS.customer_id = C.customer_id WHERE CS.service_id = S.service_id AND C.customer_details = 'Hardy Kutch')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT CS.service_id FROM customers_and_services AS CS WHERE CS.customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
        "SELECT S.service_details FROM services S WHERE EXISTS (SELECT * FROM customers_and_services CS JOIN customers C ON CS.customer_id = C.customer_id WHERE S.service_id = CS.service_id AND C.customer_details = 'Hardy Kutch')",
        "SELECT service_details FROM services WHERE EXISTS (SELECT * FROM customers_and_services WHERE services.service_id = customers_and_services.service_id AND customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch'))",
        "SELECT service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services.customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')"
      ]
    ]
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "nlq": "Find the details of the services that have been used by more than 3 times .",
    "gold": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
    "infer_predictions": [
      [
        "SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.customers_and_services_id) > 3)",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(*) > 3)",
        "SELECT S.service_details FROM services S INNER JOIN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(customers_and_services_id) > 3) AS C ON S.service_id = C.service_id",
        "SELECT service_details FROM services WHERE EXISTS (SELECT NULL FROM customers_and_services WHERE services.service_id = customers_and_services.service_id GROUP BY customers_and_services.service_id HAVING COUNT(customers_and_services_id) > 3)",
        "SELECT DISTINCT service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id GROUP BY customers_and_services.service_id HAVING COUNT(customers_and_services_id) > 3",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(DISTINCT customer_id) > 3)",
        "SELECT DISTINCT S.service_details FROM services AS S JOIN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(customers_and_services_id) > 3) AS Sub ON S.service_id = Sub.service_id",
        "SELECT S1.service_details FROM services AS S1 WHERE (SELECT COUNT(*) FROM customers_and_services AS S2 WHERE S1.service_id = S2.service_id GROUP BY S2.service_id) > 3",
        "SELECT service_details FROM services INNER JOIN (SELECT service_id, COUNT(*) AS c FROM customers_and_services GROUP BY service_id HAVING c > 3) AS A ON services.service_id = A.service_id",
        "SELECT details.service_details FROM services details JOIN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(customers_and_services_id) > 3) AS usage ON details.service_id = usage.service_id"
      ]
    ]
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "nlq": "Which services were used by customers by more than 3 times? Give me the service details.",
    "gold": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
    "infer_predictions": [
      [
        "SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT c.service_id FROM customer_interactions c GROUP BY c.service_id HAVING COUNT(*) > 3)",
        "SELECT s.service_details FROM services s JOIN (SELECT service_id FROM customer_interactions GROUP BY service_id HAVING COUNT(customer_id) > 3) AS counted ON counted.service_id = s.service_id",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customer_interactions GROUP BY service_id HAVING COUNT(customer_id) > 3)",
        "SELECT services.service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id GROUP BY services.service_id HAVING COUNT(DISTINCT customer_interactions.customer_id) > 3",
        "SELECT service_details FROM services WHERE EXISTS (SELECT NULL FROM customer_interactions WHERE customer_interactions.service_id = services.service_id GROUP BY service_id HAVING COUNT(*) > 3)",
        "SELECT service_details FROM services AS s INNER JOIN (SELECT service_id FROM customer_interactions GROUP BY service_id HAVING COUNT(customer_id) > 3) AS ci ON ci.service_id = s.service_id",
        "SELECT DISTINCT ser.service_details FROM services ser INNER JOIN customer_interactions ci ON ser.service_id = ci.service_id GROUP BY ser.service_id HAVING COUNT(ci.customer_id) > 3",
        "SELECT ser.service_details FROM services ser WHERE (SELECT COUNT(*) FROM customer_interactions ci WHERE ci.service_id = ser.service_id GROUP BY ci.service_id) > 3",
        "SELECT service_details FROM services JOIN (SELECT service_id FROM customer_interactions GROUP BY service_id HAVING COUNT(customer_id) > 3) tmp ON tmp.service_id = services.service_id",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM (SELECT service_id, COUNT(*) as interaction_count FROM customer_interactions GROUP BY service_id HAVING interaction_count > 3))"
      ]
    ]
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "nlq": "Find the details of the customer who has used services the most times.",
    "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.customer_details FROM customers c WHERE c.customer_id = (SELECT customer_id FROM customer_interactions GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions GROUP BY customer_id ORDER BY COUNT(customer_id) DESC LIMIT 1)",
        "SELECT c.customer_details FROM customers c JOIN (SELECT customer_id, COUNT(*) as interactions FROM customer_interactions GROUP BY customer_id ORDER BY interactions DESC LIMIT 1) ci ON c.customer_id = ci.customer_id",
        "SELECT customer_details FROM customers WHERE customer_id = (SELECT ci.customer_id FROM customer_interactions ci GROUP BY ci.customer_id ORDER BY COUNT(ci.customer_id) DESC LIMIT 1)",
        "SELECT c.customer_details FROM (SELECT customer_id FROM customer_interactions GROUP BY customer_id ORDER BY COUNT(customer_id) DESC LIMIT 1) TopCustomer JOIN customers c ON TopCustomer.customer_id = c.customer_id",
        "SELECT (SELECT customer_details FROM customers WHERE customer_id = CustomerCounts.customer_id) FROM (SELECT customer_id, COUNT(*) AS TotalInteractions FROM customer_interactions GROUP BY customer_id ORDER BY TotalInteractions DESC LIMIT 1) CustomerCounts",
        "SELECT (SELECT customer_details FROM customers WHERE customer_id = svc.customer_id) FROM (SELECT customer_id FROM customer_interactions GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1) svc",
        "SELECT top_c.customer_details FROM customers top_c JOIN (SELECT customer_id, COUNT(customer_id) as most_used FROM customer_interactions GROUP BY customer_id ORDER BY most_used DESC LIMIT 1) mia ON mia.customer_id = top_c.customer_id",
        "SELECT details_of_highest.customer_details FROM customers details_of_highest WHERE details_of_highest.customer_id = (SELECT customer_use.customer_id FROM customer_interactions customer_use GROUP BY customer_use.customer_id ORDER BY COUNT(customer_use.service_id) DESC LIMIT 1)",
        "SELECT details.customer_details FROM customers details WHERE details.customer_id = (SELECT customer FROM (SELECT customer_id AS customer, COUNT(*) AS times_used FROM customer_interactions GROUP BY customer_id ORDER BY times_used DESC LIMIT 1) most_often)"
      ]
    ]
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "nlq": "return the details of the customer with largest count of used services.",
    "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(service_id) DESC LIMIT 1)",
        "SELECT C.customer_details FROM customers C WHERE C.customer_id = (SELECT CAS.customer_id FROM customers_and_services CAS GROUP BY CAS.customer_id ORDER BY COUNT(CAS.service_id) DESC LIMIT 1)",
        "SELECT customers.customer_details FROM customers JOIN (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id ORDER BY service_count DESC LIMIT 1) AS TopCustomer ON customers.customer_id = TopCustomer.customer_id",
        "SELECT C.customer_details FROM (SELECT customer_id, customer_details FROM customers) AS C JOIN (SELECT customer_id, COUNT(service_id) AS num_services FROM customers_and_services GROUP BY customer_id ORDER BY num_services DESC LIMIT 1) T ON C.customer_id = T.customer_id",
        "SELECT C.customer_details FROM customers AS C WHERE C.customer_id = (SELECT customer_id FROM (SELECT customer_id, COUNT(service_id) AS service_count FROM customers_and_services GROUP BY customer_id) TEMP ORDER BY service_count DESC LIMIT 1)",
        "SELECT C.customer_details FROM customers C WHERE C.customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT (SELECT customer_details FROM customers WHERE customer_id = TEMP.customer_id) FROM (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(service_id) DESC LIMIT 1) AS TEMP",
        "SELECT customer_details FROM (SELECT customer_id, customer_details FROM customers) as cu WHERE cu.customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(service_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "nlq": "Find the name of the customer who has used the most types of services .",
    "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(DISTINCT service_id) DESC LIMIT 1)",
        "SELECT C.customer_details FROM customers C WHERE C.customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(DISTINCT service_id) DESC LIMIT 1)",
        "SELECT C.customer_details FROM customers C JOIN (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(DISTINCT service_id) DESC LIMIT 1) AS CS ON C.customer_id = CS.customer_id",
        "WITH ServiceCount AS (SELECT customer_id, COUNT(DISTINCT service_id) AS TotalServices FROM customers_and_services GROUP BY customer_id) SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM ServiceCount ORDER BY TotalServices DESC LIMIT 1)",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY customer_id HAVING COUNT(DISTINCT service_id) = (SELECT MAX(CountServices) FROM (SELECT COUNT(DISTINCT service_id) AS CountServices FROM customers_and_services GROUP BY customer_id)))",
        "SELECT (SELECT customer_details FROM customers WHERE customer_id = SC.customer_id) FROM (SELECT customer_id, COUNT(DISTINCT service_id) AS services_used FROM customers_and_services GROUP BY customer_id ORDER BY services_used DESC LIMIT 1) AS SC",
        "WITH RankedCustomers AS (SELECT customer_id, RANK() OVER (ORDER BY COUNT(DISTINCT service_id) DESC) AS rank FROM customers_and_services GROUP BY customer_id) SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM RankedCustomers WHERE rank = 1)",
        "SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM (SELECT customer_id, COUNT(DISTINCT service_id) AS service_count FROM customers_and_services GROUP BY customer_id ORDER BY service_count DESC LIMIT 1) AS MostServices)",
        "WITH CountServices AS (SELECT customer_id, COUNT(DISTINCT service_id) AS num_services FROM customers_and_services GROUP BY customer_id) SELECT customers.customer_details FROM customers JOIN CountServices ON customers.customer_id = CountServices.customer_id WHERE num_services = (SELECT MAX(num_services) FROM CountServices)"
      ]
    ]
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "nlq": "Which customer has used the most types of services ? Give me the customer details .",
    "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(DISTINCT service_id) DESC LIMIT 1)",
        "SELECT c.customer_details FROM customers c INNER JOIN (SELECT customer_id, COUNT(DISTINCT service_id) AS srv_count FROM customers_and_services GROUP BY customer_id) t ON c.customer_id = t.customer_id ORDER BY t.srv_count DESC LIMIT 1",
        "SELECT cu.customer_details FROM customers cu WHERE cu.customer_id IN (SELECT ca.customer_id FROM customers_and_services ca GROUP BY ca.customer_id HAVING COUNT(DISTINCT ca.service_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT service_id) cnt FROM customers_and_services GROUP BY customer_id)))",
        "SELECT top_customer.customer_details FROM (SELECT cs.customer_id FROM customers_and_services cs GROUP BY cs.customer_id ORDER BY COUNT(DISTINCT cs.service_id) DESC LIMIT 1) AS top INNER JOIN customers top_customer ON top.customer_id = top_customer.customer_id",
        "SELECT c.customer_details FROM (SELECT DISTINCT customer_id FROM customers_and_services GROUP BY customer_id ORDER BY COUNT(DISTINCT service_id) DESC LIMIT 1) m JOIN customers c ON m.customer_id = c.customer_id",
        "SELECT C.customer_details FROM customers C WHERE C.customer_id = (SELECT CS.customer_id FROM customers_and_services CS GROUP BY CS.customer_id ORDER BY COUNT(DISTINCT CS.service_id) DESC LIMIT 1)",
        "SELECT first_customer.customer_details FROM customers AS first_customer WHERE first_customer.customer_id IN (SELECT cs.customer_id FROM customers_and_services cs GROUP BY cs.customer_id HAVING MAX(cs.service_id))"
      ]
    ]
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "nlq": "Find the details of the customer who has never used any services .",
    "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services)",
        "SELECT customer_details FROM customers EXCEPT SELECT customers.customer_details FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id",
        "SELECT customer_details FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customers_and_services cas WHERE cas.customer_id = c.customer_id)",
        "SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.customer_id IS NULL",
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customers_and_services)",
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services WHERE customers_and_services.customer_id IS NOT NULL)",
        "SELECT c.customer_details FROM customers c WHERE c.customer_id NOT IN (SELECT cas.customer_id FROM customers_and_services cas)",
        "SELECT DISTINCT c.customer_details FROM customers c LEFT OUTER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id IS NULL",
        "SELECT customer_details FROM customers c WHERE c.customer_id NOT IN (SELECT cas.customer_id FROM customers_and_services cas WHERE cas.customer_id = c.customer_id)",
        "SELECT c.customer_details FROM customers c WHERE NOT EXISTS (SELECT NULL FROM customers_and_services cas WHERE cas.customer_id = c.customer_id)"
      ]
    ]
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "nlq": "Which customers never used any services ? Give me the customer details .",
    "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services)",
        "SELECT c.customer_details FROM customers c LEFT JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.customer_id IS NULL",
        "SELECT customer_details FROM customers WHERE NOT EXISTS (SELECT customer_id FROM customers_and_services WHERE customers.customer_id = customers_and_services.customer_id)",
        "SELECT c.customer_details FROM customers c WHERE c.customer_id NOT IN (SELECT cas.customer_id FROM customers_and_services cas)",
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customers_and_services)",
        "SELECT c.customer_details FROM customers c LEFT OUTER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.customer_id IS NULL",
        "SELECT DISTINCT c.customer_details FROM customers c WHERE NOT EXISTS (SELECT 1 FROM customers_and_services cas WHERE cas.customer_id = c.customer_id)",
        "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT DISTINCT cas.customer_id FROM customers_and_services cas)",
        "SELECT c.customer_details FROM customers c WHERE c.customer_id NOT IN (SELECT DISTINCT customer_id FROM customers_and_services WHERE customer_id IS NOT NULL)",
        "SELECT DISTINCT c.customer_details FROM customers c LEFT JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.customer_id IS NULL"
      ]
    ]
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "nlq": "Find the details of the customers who have used the least-used service .",
    "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services WHERE service_id = (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1))",
        "SELECT c.customer_details FROM customers c INNER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT cas.customer_id FROM customers_and_services cas WHERE cas.service_id = (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(service_id) ASC LIMIT 1))",
        "SELECT c.customer_details FROM customers c WHERE EXISTS (SELECT NULL FROM customers_and_services cas JOIN (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1) least_used_service ON cas.service_id = least_used_service.service_id AND cas.customer_id = c.customer_id)",
        "SELECT c.customer_details FROM customers c WHERE EXISTS (SELECT 1 FROM customers_and_services cas WHERE cas.customer_id = c.customer_id AND cas.service_id = (SELECT sq.service_id FROM (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC) as sq LIMIT 1))"
      ]
    ]
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "nlq": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.customer_details FROM customers c JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id = (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT DISTINCT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services WHERE service_id = (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(service_id) ASC LIMIT 1))",
        "SELECT DISTINCT c.customer_details FROM customers c WHERE EXISTS (SELECT 1 FROM customers_and_services cas WHERE cas.customer_id = c.customer_id AND cas.service_id = (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) LIMIT 1))",
        "SELECT DISTINCT customer_details FROM customers WHERE customer_id IN (SELECT cas.customer_id FROM customers_and_services cas JOIN (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1) as least_used ON cas.service_id = least_used.service_id)",
        "SELECT DISTINCT c.customer_details FROM customers c, customers_and_services cas WHERE c.customer_id = cas.customer_id AND cas.service_id = (SELECT MIN(service_id) FROM (SELECT service_id FROM customers_and_services GROUP BY service_id ORDER BY COUNT(*) ASC) AS Minimum_Used)",
        "SELECT DISTINCT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_and_services GROUP BY service_id HAVING COUNT(service_id) = (SELECT MIN(count) FROM (SELECT COUNT(service_id) count FROM customers_and_services GROUP BY service_id) tmp))",
        "SELECT DISTINCT c.customer_details FROM customers c INNER JOIN customers_and_services cas ON c.customer_id = cas.customer_id WHERE cas.service_id IN (SELECT s.service_id FROM services s WHERE s.service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) count FROM customers_and_services GROUP BY service_id) tmp)))",
        "SELECT DISTINCT c.customer_details FROM customers c WHERE c.customer_id IN (SELECT cas.customer_id FROM customers_and_services cas GROUP BY cas.service_id HAVING COUNT(cas.service_id) = (SELECT MIN(count) FROM (SELECT COUNT(service_id) count FROM customers_and_services GROUP BY service_id) tmp))",
        "SELECT DISTINCT c.customer_details FROM customers c JOIN customers_and_services cas ON c.customer_id = cas.customer_id AND cas.service_id IN (SELECT service_id FROM customers_and_services GROUP BY service_id HAVING COUNT(customer_id) = (SELECT MIN(count) FROM (SELECT COUNT(customer_id) count FROM customers_and_services GROUP BY service_id) Tab))"
      ]
    ]
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "nlq": "How many distinct customer and services details are there?",
    "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_details, service_details FROM customers INNER JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id INNER JOIN services ON customers_and_services.service_id = services.service_id)",
        "SELECT COUNT(DISTINCT ct.customer_details || ' - ' || sv.service_details) FROM customers_and_services cs LEFT JOIN customers ct ON cs.customer_id = ct.customer_id LEFT JOIN services sv ON cs.service_id = sv.service_id",
        "SELECT COUNT(*) FROM (SELECT customer_details, service_details FROM customers, customers_and_services, services WHERE customers.customer_id = customers_and_services.customer_id AND customers_and_services.service_id = services.service_id GROUP BY customer_details, service_details)"
      ]
    ]
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "nlq": "Count the total number of available customers and services details.",
    "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM (SELECT customer_details FROM customers UNION SELECT service_details FROM services)",
        "SELECT COUNT(DISTINCT details) FROM (SELECT customer_details AS details FROM customers UNION SELECT service_details FROM services)",
        "SELECT (SELECT COUNT(customer_details) FROM customers) + (SELECT COUNT(service_details) FROM services) AS total_count",
        "SELECT SUM(count) FROM (SELECT COUNT(customer_details) AS count FROM customers UNION ALL SELECT COUNT(service_details) FROM services)",
        "SELECT COUNT(*) FROM (SELECT customer_details FROM customers UNION ALL SELECT service_details FROM services WHERE service_details NOT IN (SELECT customer_details FROM customers))",
        "SELECT COUNT(*) FROM (SELECT customer_details as detail FROM customers UNION SELECT service_details AS detail FROM services)",
        "SELECT COUNT(DISTINCT detail) FROM (SELECT customer_details AS detail FROM customers UNION SELECT service_details AS detail FROM services)",
        "SELECT COUNT(detail) FROM (SELECT customer_details AS detail FROM customers UNION ALL SELECT service_details AS detail FROM services)",
        "SELECT COUNT(*) FROM (SELECT distinct customer_details AS details FROM customers UNION SELECT DISTINCT service_details FROM services)"
      ]
    ]
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "nlq": "Find all the customers whose name contains \"Kutch\".",
    "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%'",
        "SELECT c.customer_details FROM customers c WHERE c.customer_details LIKE '%Kutch%'",
        "SELECT * FROM customers WHERE customer_details LIKE '%Kutch%'",
        "SELECT customer_details FROM customers WHERE INSTR(customer_details, 'Kutch') > 0",
        "SELECT customer_details FROM customers WHERE customer_details GLOB '*Kutch*'",
        "SELECT DISTINCT c.customer_details FROM customers AS c WHERE c.customer_details GLOB '*Kutch*'"
      ]
    ]
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "nlq": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
    "infer_predictions": [
      [
        "SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%'",
        "SELECT c.customer_details FROM customers c WHERE c.customer_details LIKE '%Kutch%'",
        "SELECT customer_details FROM customers WHERE INSTR(customer_details, 'Kutch') > 0",
        "SELECT c.customer_details FROM customers c WHERE c.customer_details LIKE 'Kutch%' OR c.customer_details LIKE '% Kutch%'",
        "SELECT customer_details FROM customers WHERE customer_details LIKE '%Kutch%' ESCAPE '\\'",
        "SELECT c.customer_details FROM customers c WHERE EXISTS (SELECT 1 FROM customers x WHERE x.customer_details LIKE '%Kutch%' AND x.customer_id = c.customer_id)",
        "SELECT customer_details FROM customers WHERE customer_details GLOB '*Kutch*'"
      ]
    ]
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "nlq": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch') OR s.service_id IN (SELECT ci.service_id FROM customer_interactions ci WHERE ci.services_and_channels_details = 'good')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) OR service_id IN (SELECT service_id FROM customer_interactions WHERE services_and_channels_details = 'good')",
        "SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cas ON s.service_id = cas.service_id JOIN customers c ON cas.customer_id = c.customer_id LEFT JOIN customer_interactions ci ON s.service_id = ci.service_id WHERE c.customer_details = 'Hardy Kutch' OR ci.services_and_channels_details = 'good'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers WHERE customer_details = 'Hardy Kutch' UNION SELECT service_id FROM customer_interactions WHERE services_and_channels_details = 'good')",
        "SELECT DISTINCT s.service_details FROM services s JOIN customer_interactions ci ON s.service_id = ci.service_id WHERE ci.services_and_channels_details = 'good' UNION SELECT s.service_details FROM services s JOIN customers_and_services cas ON s.service_id = cas.service_id JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch'",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) UNION SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customer_interactions WHERE services_and_channels_details = 'good')",
        "SELECT DISTINCT s.service_details FROM services s LEFT JOIN customers_and_services cas ON s.service_id = cas.service_id LEFT JOIN customers c ON cas.customer_id = c.customer_id LEFT JOIN customer_interactions ci ON s.service_id = ci.service_id WHERE c.customer_details = 'Hardy Kutch' OR ci.services_and_channels_details = 'good'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customer_details = 'Hardy Kutch') OR service_id IN (SELECT service_id FROM customer_interactions WHERE services_and_channels_details = 'good')",
        "SELECT DISTINCT s.service_details FROM services s, customers_and_services cas, customers c WHERE s.service_id = cas.service_id AND cas.customer_id = c.customer_id AND c.customer_details = 'Hardy Kutch' UNION SELECT DISTINCT s.service_details FROM services s, customer_interactions ci WHERE s.service_id = ci.service_id AND ci.services_and_channels_details = 'good'",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services, customers WHERE services.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch') OR EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.services_and_channels_details = 'good')"
      ]
    ]
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "nlq": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cas ON s.service_id = cas.service_id JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch' OR EXISTS (SELECT 1 FROM customer_interactions ci WHERE ci.service_id = s.service_id AND ci.status_code = 'good')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) OR service_id IN (SELECT service_id FROM customer_interactions WHERE status_code = 'good')",
        "SELECT DISTINCT s.service_details FROM services s WHERE EXISTS (SELECT 1 FROM customers_and_services WHERE service_id = s.service_id AND customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) OR EXISTS (SELECT 1 FROM customer_interactions WHERE service_id = s.service_id AND status_code = 'good')",
        "SELECT s.service_details FROM services s INNER JOIN customers_and_services cas ON s.service_id = cas.service_id INNER JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch' UNION SELECT s.service_details FROM services s INNER JOIN customer_interactions ci ON s.service_id = ci.service_id WHERE ci.status_code = 'good'",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers WHERE customer_details = 'Hardy Kutch' INTERSECT SELECT service_id FROM customer_interactions WHERE status_code = 'good')",
        "SELECT service_details FROM services WHERE EXISTS (SELECT * FROM customers_and_services INNER JOIN customers ON customers_and_services.customer_id = customers.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND services.service_id = customers_and_services.service_id) OR service_id IN (SELECT service_id FROM customer_interactions WHERE status_code = 'good')",
        "SELECT services.service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id LEFT JOIN customers ON customers_and_services.customer_id = customers.customer_id LEFT JOIN customer_interactions ON services.service_id = customer_interactions.service_id WHERE customers.customer_details = 'Hardy Kutch' OR customer_interactions.status_code = 'good'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM (SELECT service_id FROM customers JOIN customers_and_services ON customers.customer_id = customers_and_services.customer_id WHERE customers.customer_details = 'Hardy Kutch' UNION ALL SELECT service_id FROM customer_interactions WHERE status_code = 'good'))",
        "SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cas.service_id FROM customers_and_services cas JOIN customers c ON cas.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch') OR s.service_id IN (SELECT ci.service_id FROM customer_interactions ci WHERE ci.status_code = 'good')"
      ]
    ]
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "nlq": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
    "infer_predictions": [
      [
        "SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customers c ON cs.customer_id = c.customer_id JOIN customer_interactions ci ON ci.customer_id = c.customer_id AND ci.service_id = s.service_id WHERE c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) AND service_id IN (SELECT service_id FROM customer_interactions WHERE status_code = 'bad')",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services cs JOIN customers c ON cs.customer_id = c.customer_id JOIN customer_interactions ci ON ci.customer_id = cs.customer_id WHERE cs.service_id = services.service_id AND c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad')",
        "SELECT s.service_details FROM services s, customers c, customers_and_services cs, customer_interactions ci WHERE s.service_id = cs.service_id AND cs.customer_id = c.customer_id AND c.customer_details = 'Hardy Kutch' AND ci.customer_id = cs.customer_id AND ci.service_id = cs.service_id AND ci.status_code = 'bad'",
        "SELECT s.service_details FROM services s INNER JOIN customers_and_services cs ON s.service_id = cs.service_id INNER JOIN customers c ON cs.customer_id = c.customer_id INNER JOIN customer_interactions ci ON ci.service_id = cs.service_id AND ci.customer_id = cs.customer_id WHERE c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad'",
        "SELECT s.service_details FROM services s, customers c WHERE EXISTS (SELECT NULL FROM customers_and_services cs, customer_interactions ci WHERE cs.service_id = s.service_id AND cs.customer_id = c.customer_id AND c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad' AND ci.service_id = s.service_id AND ci.customer_id = c.customer_id)",
        "SELECT Svc.service_details FROM services Svc JOIN customers_and_services CSvc ON Svc.service_id = CSvc.service_id WHERE CSvc.customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch') AND EXISTS (SELECT * FROM customer_interactions WHERE service_id = Svc.service_id AND status_code = 'bad' AND customer_id = CSvc.customer_id)",
        "SELECT DISTINCT s.service_details FROM services s WHERE EXISTS (SELECT * FROM customers_and_services cs INNER JOIN customers c ON cs.customer_id = c.customer_id WHERE cs.service_id = s.service_id AND c.customer_details = 'Hardy Kutch') AND EXISTS (SELECT * FROM customer_interactions ci WHERE ci.service_id = s.service_id AND ci.status_code = 'bad')",
        "SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cs.service_id FROM customers_and_services cs JOIN customers c ON cs.customer_id = c.customer_id WHERE c.customer_details = 'Hardy Kutch') AND s.service_id IN (SELECT ci.service_id FROM customer_interactions ci WHERE ci.status_code = 'bad')",
        "SELECT DISTINCT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customer_interactions ci ON ci.service_id = s.service_id WHERE EXISTS (SELECT 1 FROM customers WHERE customer_details = 'Hardy Kutch' AND customer_id = cs.customer_id) AND ci.status_code = 'bad'"
      ]
    ]
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "nlq": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
    "infer_predictions": [
      [
        "SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id JOIN customers c ON cs.customer_id = c.customer_id JOIN customer_interactions ci ON ci.customer_id = c.customer_id AND ci.service_id = s.service_id WHERE c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')) AND service_id IN (SELECT service_id FROM customer_interactions WHERE status_code = 'bad')",
        "SELECT service_details FROM services INNER JOIN customer_interactions ON services.service_id = customer_interactions.service_id WHERE customer_interactions.status_code = 'bad' AND customer_interactions.customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch')",
        "SELECT service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id JOIN customers ON customers.customer_id = customer_interactions.customer_id WHERE customers.customer_details = 'Hardy Kutch' AND customer_interactions.status_code = 'bad'",
        "SELECT services.service_details FROM services, customer_interactions, customers_and_services, customers WHERE services.service_id = customer_interactions.service_id AND customer_interactions.service_id = customers_and_services.service_id AND customers_and_services.customer_id = customers.customer_id AND customers.customer_details = 'Hardy Kutch' AND customer_interactions.status_code = 'bad'",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services JOIN customer_interactions ON customers_and_services.service_id = customer_interactions.service_id AND customers_and_services.customer_id = customer_interactions.customer_id WHERE customers_and_services.customer_id = (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch') AND customer_interactions.status_code = 'bad')",
        "SELECT DISTINCT s.service_details FROM services AS s JOIN customers_and_services AS cs ON s.service_id = cs.service_id JOIN customer_interactions AS ci ON ci.service_id = cs.service_id AND ci.customer_id = cs.customer_id WHERE EXISTS (SELECT * FROM customers WHERE customer_details = 'Hardy Kutch' AND cs.customer_id = customer_id) AND ci.status_code = 'bad'",
        "SELECT s.service_details FROM services s, customers_and_services cs, customer_interactions ci, customers c WHERE s.service_id = cs.service_id AND cs.customer_id = c.customer_id AND ci.service_id = s.service_id AND ci.customer_id = c.customer_id AND c.customer_details = 'Hardy Kutch' AND ci.status_code = 'bad'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT cs.service_id FROM customers_and_services cs JOIN customer_interactions ci ON cs.service_id = ci.service_id WHERE ci.status_code = 'bad' AND cs.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.customer_details = 'Hardy Kutch'))",
        "SELECT s.service_details FROM services s WHERE EXISTS (SELECT 1 FROM customer_interactions ci JOIN customers_and_services cs ON ci.service_id = s.service_id AND ci.service_id = cs.service_id WHERE cs.customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'Hardy Kutch') AND ci.status_code = 'bad')"
      ]
    ]
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "nlq": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "gold": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.service_details FROM services S JOIN customer_interactions CI ON S.service_id = CI.service_id JOIN channels C ON CI.channel_id = C.channel_id WHERE C.channel_details = '15 ij'",
        "SELECT S.service_details FROM services S WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE CI.service_id = S.service_id AND C.channel_details = '15 ij')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customer_interactions WHERE channel_id = (SELECT channel_id FROM channels WHERE channel_details = '15 ij'))",
        "SELECT service_details FROM services WHERE service_id IN (SELECT CI.service_id FROM customer_interactions CI INNER JOIN channels C ON C.channel_id = CI.channel_id WHERE C.channel_details = '15 ij')",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT CI.service_id FROM customer_interactions CI, channels C WHERE CI.channel_id = C.channel_id AND channel_details = '15 ij')",
        "SELECT service_details FROM services INNER JOIN (SELECT DISTINCT service_id FROM customer_interactions WHERE channel_id = (SELECT channel_id FROM channels WHERE channel_details = '15 ij')) AS SubQuery ON services.service_id = SubQuery.service_id",
        "SELECT S.service_details FROM services S, customer_interactions CI, channels C WHERE S.service_id = CI.service_id AND CI.channel_id = C.channel_id AND C.channel_details = '15 ij'",
        "SELECT DISTINCT S.service_details FROM services AS S INNER JOIN customer_interactions AS CI ON S.service_id = CI.service_id WHERE CI.channel_id IN (SELECT channel_id FROM channels WHERE channel_details = '15 ij')",
        "SELECT DISTINCT service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE channels.channel_details = '15 ij'",
        "SELECT S.service_details FROM services AS S WHERE EXISTS (SELECT NULL FROM customer_interactions AS CI INNER JOIN channels AS C ON CI.channel_id = C.channel_id WHERE S.service_id = CI.service_id AND C.channel_details = '15 ij')"
      ]
    ]
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "nlq": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.service_details FROM services S JOIN customer_interactions CI ON S.service_id = CI.service_id JOIN channels C ON CI.channel_id = C.channel_id WHERE C.channel_details = '15 ij'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customer_interactions WHERE channel_id = (SELECT channel_id FROM channels WHERE channel_details = '15 ij'))",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.channel_id = (SELECT channel_id FROM channels WHERE channel_details = '15 ij'))",
        "SELECT DISTINCT services.service_details FROM services INNER JOIN customer_interactions ON services.service_id = customer_interactions.service_id INNER JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE channels.channel_details = '15 ij'",
        "SELECT DISTINCT S.service_details FROM services AS S, customer_interactions AS CI, channels AS C WHERE S.service_id = CI.service_id AND CI.channel_id = C.channel_id AND C.channel_details = '15 ij'",
        "SELECT services.service_details FROM services JOIN customer_interactions ON services.service_id = customer_interactions.service_id JOIN channels ON channels.channel_id = customer_interactions.channel_id WHERE channels.channel_details = '15 ij' GROUP BY services.service_id",
        "SELECT S.service_details FROM services S JOIN customer_interactions CI ON S.service_id = CI.service_id WHERE CI.channel_id IN (SELECT channel_id FROM channels WHERE channel_details = '15 ij')",
        "SELECT service_details FROM services WHERE service_id IN (SELECT CI.service_id FROM customer_interactions CI JOIN channels C ON CI.channel_id = C.channel_id WHERE C.channel_details = '15 ij')",
        "SELECT DISTINCT S.service_details FROM services S, channels C, customer_interactions CI WHERE S.service_id = CI.service_id AND C.channel_id = CI.channel_id AND C.channel_details = '15 ij'",
        "SELECT services.service_details FROM services, channels, customer_interactions WHERE services.service_id = customer_interactions.service_id AND customer_interactions.channel_id = channels.channel_id AND channels.channel_details = '15 ij'"
      ]
    ]
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "nlq": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "gold": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
    "infer_predictions": [
      [
        "SELECT cu.* FROM customers cu JOIN customer_interactions ci ON cu.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.service_id JOIN channels ch ON ci.channel_id = ch.channel_id WHERE ci.status_code = 'Stuck' AND s.service_details = 'bad' AND ch.channel_details = 'bad'",
        "SELECT DISTINCT customers.* FROM customers INNER JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id INNER JOIN services ON customer_interactions.service_id = services.service_id INNER JOIN channels ON customer_interactions.channel_id = channels.channel_id WHERE customer_interactions.status_code = 'Stuck' AND services.service_details = 'bad' AND channels.channel_details = 'bad'",
        "SELECT cust.* FROM customers cust, customer_interactions interact, services svc, channels chnl WHERE cust.customer_id = interact.customer_id AND interact.service_id = svc.service_id AND interact.channel_id = chnl.channel_id AND interact.status_code = 'Stuck' AND svc.service_details = 'bad' AND chnl.channel_details = 'bad'",
        "SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND service_id IN (SELECT service_id FROM services WHERE service_details = 'bad') AND channel_id IN (SELECT channel_id FROM channels WHERE channel_details = 'bad'))",
        "SELECT cu.* FROM customers AS cu JOIN (SELECT customer_id FROM customer_interactions NATURAL JOIN channels NATURAL JOIN services WHERE status_code = 'Stuck' AND service_details = 'bad' AND channel_details = 'bad') AS result ON cu.customer_id = result.customer_id",
        "SELECT customers.customer_id, customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN channels ON customer_interactions.channel_id = channels.channel_id JOIN services ON channels.channel_id = services.service_id WHERE customer_interactions.status_code = 'Stuck' AND services.service_details = 'bad' AND channels.channel_details = 'bad'",
        "SELECT customers.* FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions JOIN services USING (service_id) JOIN channels USING (channel_id) WHERE customer_interactions.customer_id = customers.customer_id AND customer_interactions.status_code = 'Stuck' AND services.service_details = 'bad' AND channels.channel_details = 'bad')",
        "SELECT c.* FROM customers c, customer_interactions ci, services s, channels ch WHERE c.customer_id = ci.customer_id AND ci.service_id = s.service_id AND ci.channel_id = ch.channel_id AND ci.status_code = 'Stuck' AND s.service_details = 'bad' AND ch.channel_details = 'bad'"
      ]
    ]
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "nlq": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT cus.customer_details FROM customers cus JOIN customer_interactions ci ON cus.customer_id = ci.customer_id WHERE ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad'",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND services_and_channels_details = 'bad')",
        "SELECT DISTINCT c.customer_details FROM customers c, customer_interactions ci WHERE c.customer_id = ci.customer_id AND ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad'",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT ci.customer_id FROM customer_interactions ci WHERE ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad')",
        "SELECT c.customer_details FROM customers c INNER JOIN customer_interactions ci ON c.customer_id = ci.customer_id WHERE ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad'",
        "SELECT DISTINCT cus.customer_details FROM customer_interactions ci INNER JOIN customers cus ON ci.customer_id = cus.customer_id WHERE ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad'",
        "SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions WHERE customer_id = customers.customer_id AND status_code = 'Stuck' AND services_and_channels_details = 'bad')",
        "SELECT DISTINCT customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id WHERE customers.customer_id IN (SELECT customer_id FROM customer_interactions WHERE status_code = 'Stuck' AND services_and_channels_details = 'bad')",
        "SELECT customer_details FROM customers cus JOIN customer_interactions ci ON cus.customer_id = ci.customer_id AND ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad'",
        "SELECT c.customer_details FROM customers c WHERE EXISTS (SELECT 1 FROM customer_interactions ci WHERE ci.customer_id = c.customer_id AND ci.status_code = 'Stuck' AND ci.services_and_channels_details = 'bad')"
      ]
    ]
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "nlq": "How many integration platforms are successful?",
    "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT integration_platform.integration_platform_id) FROM integration_platform JOIN customer_interactions ON integration_platform.customer_interaction_id = customer_interactions.customer_interaction_id WHERE customer_interactions.status_code = 'successful'",
        "SELECT COUNT(DISTINCT ip.integration_platform_id) FROM integration_platform ip INNER JOIN customer_interactions ci ON ip.customer_interaction_id = ci.customer_interaction_id AND ci.status_code = 'successful'",
        "SELECT COUNT(DISTINCT ip.integration_platform_id) FROM integration_platform ip, customer_interactions ci WHERE ip.customer_interaction_id = ci.customer_interaction_id AND ci.status_code = 'successful'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ip.integration_platform_id FROM integration_platform ip JOIN customer_interactions ci ON ip.customer_interaction_id = ci.customer_interaction_id WHERE ci.status_code = 'successful')",
        "SELECT COUNT(DISTINCT ip.integration_platform_id) FROM integration_platform ip JOIN customer_interactions ci ON ci.customer_interaction_id = ip.customer_interaction_id AND ci.status_code = 'successful'",
        "SELECT COUNT(DISTINCT integration_platform_id) FROM integration_platform WHERE customer_interaction_id IN (SELECT customer_interaction_id FROM customer_interactions WHERE status_code = 'successful')",
        "SELECT COUNT(*) FROM (SELECT ip.integration_platform_id FROM integration_platform ip, customer_interactions ci WHERE ip.customer_interaction_id = ci.customer_interaction_id AND ci.status_code = 'successful' GROUP BY ip.integration_platform_id)",
        "SELECT COUNT(DISTINCT ip.integration_platform_id) FROM integration_platform ip WHERE EXISTS (SELECT NULL FROM customer_interactions ci WHERE ci.customer_interaction_id = ip.customer_interaction_id AND ci.status_code = 'successful')"
      ]
    ]
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "nlq": "Count the number of integration platforms that have \"Success\" in the details.",
    "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM integration_platform WHERE integration_platform_details LIKE '%Success%'",
        "SELECT COUNT(integration_platform_id) FROM integration_platform WHERE integration_platform_details LIKE '%Success%'",
        "SELECT COUNT(1) FROM integration_platform WHERE integration_platform_details LIKE '%Success%'",
        "SELECT COUNT(*) FROM integration_platform WHERE instr(integration_platform_details, 'Success') > 0",
        "SELECT COUNT(integration_platform_id) FROM integration_platform WHERE UPPER(integration_platform_details) LIKE UPPER('%Success%')",
        "SELECT COUNT(*) FROM integration_platform WHERE EXISTS (SELECT 1 FROM integration_platform as ip WHERE ip.integration_platform_details LIKE '%Success%' AND ip.integration_platform_id = integration_platform.integration_platform_id)",
        "SELECT COUNT(*) FROM integration_platform ip WHERE ip.integration_platform_details LIKE '%Success%'",
        "SELECT COUNT(ip.integration_platform_id) FROM integration_platform ip WHERE ip.integration_platform_details LIKE '%Success%'"
      ]
    ]
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "nlq": "List the details of all the customers who are associated with a failed integration platform .",
    "gold": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT cust.customer_details FROM customers cust JOIN customer_interactions ci ON ci.customer_id = cust.customer_id JOIN integration_platform ip ON ip.customer_interaction_id = ci.customer_interaction_id WHERE ip.integration_platform_details = 'failed'",
        "SELECT customers.customer_details FROM customers INNER JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id INNER JOIN integration_platform ON customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id WHERE integration_platform.integration_platform_details = 'failed'",
        "SELECT DISTINCT customers.customer_details FROM customers, customer_interactions, integration_platform WHERE customers.customer_id = customer_interactions.customer_id AND customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id AND integration_platform.integration_platform_details = 'failed'",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE customer_interaction_id IN (SELECT customer_interaction_id FROM integration_platform WHERE integration_platform_details = 'failed'))",
        "SELECT customer_details FROM customers c WHERE EXISTS (SELECT 1 FROM customer_interactions ci INNER JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ci.customer_id = c.customer_id AND ip.integration_platform_details = 'failed')",
        "SELECT DISTINCT c.customer_details FROM customers c, customer_interactions ci, integration_platform ip WHERE c.customer_id = ci.customer_id AND ci.customer_interaction_id = ip.customer_interaction_id AND ip.integration_platform_details LIKE 'failed'",
        "SELECT customers.customer_details FROM customers JOIN customer_interactions ON customers.customer_id = customer_interactions.customer_id JOIN integration_platform ON customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id WHERE integration_platform.integration_platform_details LIKE '%failed%'",
        "SELECT DISTINCT customer_details FROM customers WHERE EXISTS (SELECT customer_interaction_id FROM integration_platform WHERE integration_platform_details = 'failed' AND customer_interaction_id IN (SELECT customer_interaction_id FROM customer_interactions WHERE customer_id = customers.customer_id))",
        "SELECT customer_details FROM customers c WHERE c.customer_id IN (SELECT ci.customer_id FROM customer_interactions ci JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details = 'failed')",
        "SELECT DISTINCT customer_details FROM customers WHERE customer_id IN (SELECT ci.customer_id FROM customer_interactions ci JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details = 'failed')"
      ]
    ]
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "nlq": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "gold": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT Cust.customer_details FROM customers Cust INNER JOIN customer_interactions CI ON Cust.customer_id = CI.customer_id INNER JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE IP.integration_platform_details = 'Fail'",
        "SELECT DISTINCT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_interactions WHERE customer_interaction_id IN (SELECT customer_interaction_id FROM integration_platform WHERE integration_platform_details = 'Fail'))",
        "SELECT customer_details FROM customers WHERE EXISTS (SELECT 1 FROM customer_interactions CI JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE CI.customer_id = customers.customer_id AND IP.integration_platform_details = 'Fail')",
        "SELECT customer_details FROM customers C WHERE C.customer_id IN (SELECT CI.customer_id FROM customer_interactions CI INNER JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE IP.integration_platform_details = 'Fail')",
        "SELECT DISTINCT C.customer_details FROM customers C, customer_interactions CI, integration_platform IP WHERE C.customer_id = CI.customer_id AND CI.customer_interaction_id = IP.customer_interaction_id AND IP.integration_platform_details = 'Fail'",
        "SELECT customer_details FROM customers WHERE customer_id IN (SELECT CI.customer_id FROM customer_interactions CI, integration_platform IP WHERE CI.customer_interaction_id = IP.customer_interaction_id AND IP.integration_platform_details = 'Fail')",
        "SELECT DISTINCT cus.customer_details FROM customers cus WHERE EXISTS (SELECT NULL FROM customer_interactions ci INNER JOIN integration_platform ip ON ci.customer_interaction_id = ip.customer_interaction_id WHERE ip.integration_platform_details = 'Fail' AND ci.customer_id = cus.customer_id)",
        "SELECT C.customer_details FROM customers C JOIN customer_interactions CI ON C.customer_id = CI.customer_id JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE IP.integration_platform_details = 'Fail' GROUP BY C.customer_details",
        "SELECT DISTINCT customer_details FROM customers WHERE EXISTS (SELECT * FROM integration_platform IP JOIN customer_interactions CI ON CI.customer_interaction_id = IP.customer_interaction_id WHERE customers.customer_id = CI.customer_id AND IP.integration_platform_details = 'Fail')",
        "SELECT DISTINCT C.customer_details AS details FROM customers C INNER JOIN customer_interactions CI ON C.customer_id = CI.customer_id INNER JOIN integration_platform IP ON CI.customer_interaction_id = IP.customer_interaction_id WHERE IP.integration_platform_details = 'Fail'"
      ]
    ]
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "nlq": "Which service ( s ) has never been used by any customer ? List their details .",
    "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
    "infer_predictions": [
      [
        "SELECT * FROM services WHERE service_id NOT IN (SELECT service_id FROM customers_and_services)",
        "SELECT service_details FROM services s LEFT JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.service_id IS NULL",
        "SELECT * FROM services WHERE NOT EXISTS (SELECT 1 FROM customers_and_services WHERE customers_and_services.service_id = services.service_id)",
        "SELECT s.service_id, s.service_details FROM services s WHERE s.service_id NOT IN (SELECT DISTINCT service_id FROM customers_and_services)",
        "SELECT s.* FROM services s LEFT OUTER JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customer_id IS NULL",
        "SELECT s.service_id, s.service_details FROM services s EXCEPT SELECT cs.service_id, s.service_details FROM customers_and_services cs INNER JOIN services s ON cs.service_id = s.service_id",
        "SELECT services.service_id, services.service_details FROM services WHERE services.service_id NOT IN (SELECT DISTINCT service_id FROM customers_and_services cs)",
        "SELECT servi.service_details FROM services servi LEFT JOIN customers_and_services custserv ON servi.service_id = custserv.service_id WHERE custserv.service_id IS NUll",
        "SELECT DISTINCT s.service_details FROM services s WHERE NOT EXISTS (SELECT NULL FROM customers_and_services cs WHERE cs.service_id = s.service_id)",
        "SELECT s.* FROM services AS s WHERE s.service_id NOT IN (SELECT service_id FROM customers_and_services cs WHERE cs.service_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "nlq": "Find details of the services that no customer has ever used . Return the service details .",
    "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
    "infer_predictions": [
      [
        "SELECT service_details FROM services WHERE service_id NOT IN (SELECT service_id FROM customers_and_services)",
        "SELECT S.service_details FROM services S LEFT JOIN customers_and_services CAS ON S.service_id = CAS.service_id WHERE CAS.service_id IS NULL",
        "SELECT services.service_details FROM services WHERE NOT EXISTS (SELECT 1 FROM customers_and_services WHERE customers_and_services.service_id = services.service_id)",
        "SELECT S.service_details FROM services S WHERE S.service_id NOT IN (SELECT service_id FROM customers_and_services)",
        "SELECT S.service_details FROM services S WHERE NOT EXISTS (SELECT NULL FROM customers_and_services CAS WHERE CAS.service_id = S.service_id)",
        "SELECT service_details FROM services EXCEPT SELECT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id",
        "SELECT DISTINCT service_details FROM services LEFT JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services.service_id IS NULL",
        "SELECT S.service_details FROM services S LEFT OUTER JOIN customers_and_services CAS ON S.service_id = CAS.service_id WHERE CAS.service_id IS NULL"
      ]
    ]
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "nlq": "Find all the layer type codes with their corresponding usage count.",
    "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
    "infer_predictions": [
      [
        "SELECT analytical_layer_type_code, COUNT(*) AS usage_count FROM analytical_layer GROUP BY analytical_layer_type_code",
        "SELECT al.analytical_layer_type_code, COUNT(al.analytical_layer_type_code) AS usage_count FROM analytical_layer al GROUP BY al.analytical_layer_type_code",
        "SELECT AL.analytical_layer_type_code, COUNT(AL.analytical_layer_type_code) AS usage_count FROM analytical_layer AL GROUP BY AL.analytical_layer_type_code",
        "SELECT DISTINCT analytical_layer.analytical_layer_type_code, COUNT(analytical_layer.analytical_layer_type_code) OVER (PARTITION BY analytical_layer.analytical_layer_type_code) as usage_count FROM analytical_layer",
        "SELECT a.analytical_layer_type_code, COUNT(*) AS usage_count FROM analytical_layer a GROUP BY a.analytical_layer_type_code",
        "SELECT analytical_layer.analytical_layer_type_code, COUNT(*) AS COUNT FROM analytical_layer GROUP BY analytical_layer.analytical_layer_type_code",
        "SELECT DISTINCT al.analytical_layer_type_code, COUNT(al.analytical_layer_type_code) OVER (PARTITION BY al.analytical_layer_type_code) AS usage_count FROM analytical_layer al",
        "SELECT A.analytical_layer_type_code, COUNT(A.analytical_layer_type_code) AS usage_count FROM analytical_layer A GROUP BY A.analytical_layer_type_code",
        "SELECT analytical_layer.analytical_layer_type_code, COUNT(analytical_id) AS usage_count FROM analytical_layer GROUP BY analytical_layer_type_code",
        "SELECT a.analytical_layer_type_code, COUNT(a.analytical_id) AS usage_count FROM analytical_layer a GROUP BY a.analytical_layer_type_code"
      ]
    ]
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "nlq": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
    "infer_predictions": [
      [
        "SELECT analytical_layer_type_code, COUNT(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "SELECT al.analytical_layer_type_code, COUNT(al.analytical_id) FROM analytical_layer al GROUP BY al.analytical_layer_type_code",
        "SELECT analytical_layer.analytical_layer_type_code, COUNT(analytical_layer.analytical_id) AS usage_count FROM analytical_layer GROUP BY analytical_layer.analytical_layer_type_code",
        "SELECT al.analytical_layer_type_code, COUNT(*) AS count FROM analytical_layer al GROUP BY al.analytical_layer_type_code",
        "SELECT analytical_layer_type_code, COUNT(analytical_layer_type_code) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "SELECT A.analytical_layer_type_code, COUNT(A.analytical_layer_type_code) FROM analytical_layer A GROUP BY A.analytical_layer_type_code",
        "SELECT analytical_layer_type_code, COUNT(analytical_id) FROM analytical_layer GROUP BY analytical_layer_type_code",
        "SELECT AL.analytical_layer_type_code, COUNT(AL.analytical_id) FROM analytical_layer AL GROUP BY AL.analytical_layer_type_code",
        "SELECT analytical_layer_type_code, COUNT(1) FROM analytical_layer GROUP BY analytical_layer_type_code"
      ]
    ]
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "nlq": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "gold": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
    "infer_predictions": [
      [
        "SELECT S.service_details FROM services S JOIN customers_and_services CS ON S.service_id = CS.service_id WHERE CS.customers_and_services_details = 'Unsatisfied'",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'Unsatisfied')",
        "SELECT DISTINCT services.service_details FROM services INNER JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services.customers_and_services_details LIKE 'Unsatisfied'",
        "SELECT svc.service_details FROM services svc JOIN customers_and_services cust_svc ON svc.service_id = cust_svc.service_id WHERE cust_svc.customers_and_services_details LIKE 'Unsatisfied'",
        "SELECT S.service_details FROM services AS S WHERE EXISTS (SELECT 1 FROM customers_and_services AS CS WHERE CS.service_id = S.service_id AND CS.customers_and_services_details LIKE 'Unsatisfied')",
        "SELECT S.service_details FROM services AS S, customers_and_services AS CS WHERE S.service_id = CS.service_id AND CS.customers_and_services_details = 'Unsatisfied'",
        "SELECT DISTINCT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details LIKE 'Unsatisfied')",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services WHERE service_id = services.service_id AND customers_and_services_details = 'Unsatisfied')",
        "SELECT svc.service_details FROM services svc, customers_and_services cs WHERE svc.service_id = cs.service_id AND cs.customers_and_services_details = 'Unsatisfied'",
        "SELECT S.service_details FROM services S, customers_and_services CS WHERE S.service_id = CS.service_id AND CS.customers_and_services_details = 'Unsatisfied'"
      ]
    ]
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "nlq": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
    "infer_predictions": [
      [
        "SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details = 'Unsatisfied'",
        "SELECT service_details FROM services WHERE service_id IN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'Unsatisfied')",
        "SELECT DISTINCT s.service_details FROM services s, customers_and_services cs WHERE s.service_id = cs.service_id AND cs.customers_and_services_details = 'Unsatisfied'",
        "SELECT s.service_details FROM services s INNER JOIN customers_and_services cs ON s.service_id = cs.service_id WHERE cs.customers_and_services_details LIKE 'Unsatisfied'",
        "SELECT service_details FROM services WHERE EXISTS (SELECT 1 FROM customers_and_services WHERE services.service_id = customers_and_services.service_id AND customers_and_services_details = 'Unsatisfied')",
        "SELECT s.service_details FROM services s WHERE s.service_id IN (SELECT cs.service_id FROM customers_and_services cs WHERE cs.customers_and_services_details = 'Unsatisfied')",
        "SELECT s.service_details FROM services s JOIN customers_and_services cs ON s.service_id = cs.service_id AND cs.customers_and_services_details = 'Unsatisfied'",
        "SELECT DISTINCT service_details FROM services JOIN customers_and_services ON services.service_id = customers_and_services.service_id WHERE customers_and_services_details = 'Unsatisfied'",
        "SELECT services.service_details FROM services INNER JOIN (SELECT service_id FROM customers_and_services WHERE customers_and_services_details = 'Unsatisfied') AS cs ON services.service_id = cs.service_id"
      ]
    ]
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "nlq": "How many vehicles do we have?",
    "gold": "SELECT count(*) FROM vehicles",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM vehicles",
        "SELECT COUNT(vehicles.id) FROM vehicles",
        "SELECT COUNT(*) FROM vehicles GROUP BY type_of_powertrain",
        "SELECT COUNT(vehicles.id) AS total_vehicles FROM vehicles",
        "SELECT COUNT(*) AS NumberOfVehicles FROM vehicles",
        "SELECT COUNT(DISTINCT vehicles.id) AS VehicleCount FROM vehicles",
        "SELECT COUNT(id) FROM vehicles WHERE id IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT id FROM vehicles)"
      ]
    ]
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "nlq": "Count the number of vehicles.",
    "gold": "SELECT count(*) FROM vehicles",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM vehicles",
        "SELECT COUNT(id) FROM vehicles",
        "SELECT COUNT(*) FROM (SELECT * FROM vehicles)",
        "SELECT COUNT(vehicles.id) as Total_Vehicles FROM vehicles",
        "SELECT COUNT(id) as Vehicle_Count FROM vehicles",
        "SELECT COUNT(*) as TotalNumber FROM vehicles",
        "SELECT COUNT(DISTINCT id) as VehicleCount FROM vehicles"
      ]
    ]
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "nlq": "Show names for all vehicles in descending order of model year.",
    "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
    "infer_predictions": [
      [
        "SELECT name FROM vehicles ORDER BY model_year DESC",
        "SELECT name FROM vehicles v ORDER BY v.model_year DESC",
        "SELECT v.name FROM vehicles v ORDER BY v.model_year DESC",
        "SELECT name FROM vehicles ORDER BY model_year DESC, id",
        "SELECT vehicles.name AS 'Vehicle Name' FROM vehicles ORDER BY vehicles.model_year DESC",
        "SELECT name AS VehicleName FROM vehicles ORDER BY model_year DESC"
      ]
    ]
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "nlq": "What are the names of all vehicles, ordered by model year descending?",
    "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
    "infer_predictions": [
      [
        "SELECT name FROM vehicles ORDER BY model_year DESC",
        "SELECT v.name FROM vehicles v ORDER BY v.model_year DESC",
        "SELECT veh.name FROM vehicles veh ORDER BY veh.model_year DESC",
        "SELECT vehicles.name FROM vehicles AS vehicles ORDER BY vehicles.model_year DESC",
        "SELECT name FROM (SELECT * FROM vehicles) ORDER BY model_year DESC",
        "SELECT name FROM (SELECT name, model_year FROM vehicles) ORDER BY model_year DESC",
        "SELECT * FROM (SELECT name FROM vehicles ORDER BY model_year DESC)"
      ]
    ]
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "nlq": "List all distinct types of powertrain of vehicles.",
    "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
    "infer_predictions": [
      [
        "SELECT DISTINCT type_of_powertrain FROM vehicles;",
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain;",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v;",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain FROM vehicles) GROUP BY type_of_powertrain;",
        "SELECT type_of_powertrain FROM vehicles WHERE type_of_powertrain IS NOT NULL GROUP BY type_of_powertrain;",
        "SELECT DISTINCT vtp.type_of_powertrain FROM vehicles vtp WHERE vtp.type_of_powertrain IS NOT NULL;",
        "SELECT * FROM (SELECT DISTINCT type_of_powertrain FROM vehicles) tbl;",
        "SELECT type_of_powertrain FROM vehicles v WHERE EXISTS (SELECT 1 FROM vehicles vi WHERE vi.type_of_powertrain = v.type_of_powertrain) GROUP BY v.type_of_powertrain;"
      ]
    ]
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "nlq": "What are the different types of powertrains?",
    "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
    "infer_predictions": [
      [
        "SELECT DISTINCT type_of_powertrain FROM vehicles;",
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain;",
        "SELECT v.type_of_powertrain FROM vehicles v GROUP BY v.type_of_powertrain;",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v;",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain FROM vehicles) GROUP BY type_of_powertrain;",
        "SELECT DISTINCT type_of_powertrain FROM vehicles ORDER BY type_of_powertrain;",
        "SELECT type_of_powertrain FROM vehicles v WHERE type_of_powertrain IS NOT NULL GROUP BY v.type_of_powertrain;",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v WHERE v.type_of_powertrain IS NOT NULL;",
        "SELECT type_of_powertrain FROM vehicles UNION SELECT type_of_powertrain FROM vehicles;",
        "SELECT DISTINCT v1.type_of_powertrain FROM vehicles v1 WHERE v1.type_of_powertrain IN (SELECT v2.type_of_powertrain FROM vehicles v2)"
      ]
    ]
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "nlq": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
    "infer_predictions": [
      [
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014)",
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year = 2013 OR model_year = 2014",
        "SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year BETWEEN 2013 AND 2014",
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE vehicles.model_year IN (2013, 2014)",
        "SELECT vehicles.name, vehicles.type_of_powertrain, vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year <= 2014 AND vehicles.model_year >= 2013",
        "SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year = '2013' OR v.model_year = '2014'",
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE (model_year = 2013 OR model_year = 2014)",
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year = 2013 UNION SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year = 2014"
      ]
    ]
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "nlq": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
    "infer_predictions": [
      [
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014)",
        "SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM vehicles v WHERE v.model_year = 2013 OR v.model_year = 2014",
        "SELECT vehicles.name, vehicles.type_of_powertrain, vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year BETWEEN 2013 AND 2014",
        "SELECT DISTINCT vehicles.name, vehicles.type_of_powertrain, vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year IN (2013, 2014)",
        "SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year = 2013 UNION SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year = 2014",
        "SELECT v.name AS vehicle_name, v.type_of_powertrain AS powertrain_type, v.annual_fuel_cost FROM vehicles v WHERE v.model_year IN (2013, 2014)",
        "SELECT vehicles.name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE EXISTS (SELECT 1 FROM vehicles AS v WHERE (v.model_year = 2013 OR v.model_year = 2014) AND v.id = vehicles.id)",
        "SELECT name AS 'Vehicle Name', type_of_powertrain AS 'Powertrain Type', annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014)",
        "SELECT vehicles.name, vehicles.type_of_powertrain, vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year = 2013 UNION ALL SELECT vehicles.name, vehicles.type_of_powertrain, vehicles.annual_fuel_cost FROM vehicles WHERE vehicles.model_year = 2014"
      ]
    ]
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "nlq": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
    "infer_predictions": [
      [
        "SELECT DISTINCT type_of_powertrain FROM vehicles WHERE model_year IN (2013, 2014) AND type_of_powertrain IN (SELECT type_of_powertrain FROM vehicles WHERE model_year IN (2013, 2014) GROUP BY type_of_powertrain HAVING COUNT(DISTINCT model_year) > 1)",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v JOIN vehicles w ON v.type_of_powertrain = w.type_of_powertrain WHERE v.model_year = 2014 AND w.model_year = 2013",
        "SELECT V.type_of_powertrain FROM vehicles V WHERE V.model_year = 2014 AND EXISTS (SELECT 1 FROM vehicles W WHERE W.type_of_powertrain = V.type_of_powertrain AND W.model_year = 2013)",
        "SELECT V.type_of_powertrain FROM vehicles V, vehicles W WHERE V.type_of_powertrain = W.type_of_powertrain AND ((V.model_year = 2014 AND W.model_year = 2013) OR (V.model_year = 2013 AND W.model_year = 2014)) GROUP BY V.type_of_powertrain",
        "SELECT DISTINCT V1.type_of_powertrain FROM vehicles V1 WHERE EXISTS (SELECT 1 FROM vehicles V2 WHERE V2.type_of_powertrain = V1.type_of_powertrain AND V2.model_year = 2014) AND EXISTS (SELECT 1 FROM vehicles V3 WHERE V3.type_of_powertrain = V1.type_of_powertrain AND V3.model_year = 2013)",
        "WITH vehicles_twelve AS (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014), vehicles_thirteen AS (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013) SELECT type_of_powertrain FROM vehicles_twelve INTERSECT SELECT type_of_powertrain FROM vehicles_thirteen",
        "WITH CTE AS (SELECT type_of_powertrain, COUNT(DISTINCT model_year) AS distinct_years FROM vehicles WHERE model_year IN (2013, 2014) GROUP BY type_of_powertrain) SELECT type_of_powertrain FROM CTE WHERE distinct_years = 2",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain, GROUP_CONCAT(DISTINCT model_year) AS years FROM vehicles WHERE model_year IN (2013, 2014) GROUP BY type_of_powertrain) WHERE years LIKE '%2013%' AND years LIKE '%2014%'",
        "SELECT DISTINCT first_type.type_of_powertrain FROM vehicles AS first_type JOIN vehicles AS second_type ON first_type.type_of_powertrain = second_type.type_of_powertrain WHERE first_type.model_year = 2014 AND second_type.model_year = 2013",
        "WITH Year2014 AS (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014), Year2013 AS (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013) SELECT Year2014.type_of_powertrain FROM Year2014 JOIN Year2013 ON Year2014.type_of_powertrain = Year2013.type_of_powertrain"
      ]
    ]
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "nlq": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
    "infer_predictions": [
      [
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id WHERE v.model_year IN (2013, 2014) GROUP BY v.type_of_powertrain HAVING COUNT(DISTINCT v.model_year) = 2",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain, model_year FROM vehicles GROUP BY type_of_powertrain, model_year) AS sub WHERE model_year IN (2013, 2014) GROUP BY type_of_powertrain HAVING COUNT(DISTINCT model_year) = 2",
        "SELECT type_of_powertrain FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history WHERE vehicles_id IN (SELECT id FROM vehicles WHERE model_year = 2013) INTERSECT SELECT vehicles_id FROM renting_history WHERE vehicles_id IN (SELECT id FROM vehicles WHERE model_year = 2014)) GROUP BY type_of_powertrain",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v WHERE EXISTS (SELECT 1 FROM vehicles WHERE model_year = 2013 AND type_of_powertrain = v.type_of_powertrain) AND EXISTS (SELECT 1 FROM vehicles WHERE model_year = 2014 AND type_of_powertrain = v.type_of_powertrain)",
        "SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014",
        "SELECT v.type_of_powertrain FROM vehicles v WHERE v.model_year = 2013 AND v.type_of_powertrain IN (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014)",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain FROM vehicles WHERE model_year = 2013 UNION ALL SELECT type_of_powertrain FROM vehicles WHERE model_year = 2014) GROUP BY type_of_powertrain HAVING COUNT(*) > 1",
        "WITH V_Years AS (SELECT type_of_powertrain FROM vehicles WHERE model_year IN (2013) UNION SELECT type_of_powertrain FROM vehicles WHERE model_year IN (2014)) SELECT type_of_powertrain FROM V_Years GROUP BY type_of_powertrain HAVING COUNT(*) = 2",
        "SELECT v.type_of_powertrain FROM vehicles v WHERE v.model_year IN (2013, 2014) GROUP BY v.type_of_powertrain HAVING MIN(v.model_year) != MAX(v.model_year)",
        "SELECT DISTINCT v.type_of_powertrain FROM vehicles v JOIN (SELECT id FROM vehicles WHERE model_year = 2013) AS V2013 ON v.id = V2013.id JOIN (SELECT id FROM vehicles WHERE model_year = 2014) AS V2014 ON v.id = V2014.id"
      ]
    ]
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "nlq": "Show all types of powertrain and the number of vehicles in each type.",
    "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain, COUNT(id) FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(*) FROM vehicles AS v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, COUNT(vehicles.id) AS count_of_vehicles FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(v.id) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, COUNT(*) AS vehicle_count FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(v.id) AS vehicle_count FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(DISTINCT v.id) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(v.id) FROM vehicles v WHERE v.type_of_powertrain IS NOT NULL GROUP BY v.type_of_powertrain"
      ]
    ]
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "nlq": "How many vehicles have each type of powertrain?",
    "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain, COUNT(id) FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(v.id) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, COUNT(*) AS vehicle_count FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(*) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, COUNT(1) FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, COUNT(DISTINCT v.id) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, SUM(CASE WHEN v.id IS NOT NULL THEN 1 ELSE 0 END) FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, COUNT(id) as TotalVehicles FROM vehicles GROUP BY type_of_powertrain ORDER BY TotalVehicles",
        "SELECT v.type_of_powertrain AS PowertrainType, COUNT(v.id) AS NumberOfVehicles FROM vehicles v GROUP BY v.type_of_powertrain"
      ]
    ]
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "nlq": "What is the type of powertrain with most number of vehicles.",
    "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(id) DESC LIMIT 1",
        "SELECT v.type_of_powertrain FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.id) DESC LIMIT 1",
        "SELECT v.type_of_powertrain FROM (SELECT type_of_powertrain, COUNT(*) AS freq FROM vehicles GROUP BY type_of_powertrain) v ORDER BY v.freq DESC LIMIT 1",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain, COUNT(id) count FROM vehicles GROUP BY type_of_powertrain) AS frequency ORDER BY count DESC LIMIT 1",
        "SELECT v.type_of_powertrain FROM (SELECT type_of_powertrain, COUNT(type_of_powertrain) AS num FROM vehicles GROUP BY type_of_powertrain ORDER BY num DESC) AS v LIMIT 1",
        "WITH VehicleCounts AS (SELECT type_of_powertrain, COUNT(*) as Total FROM vehicles GROUP BY type_of_powertrain) SELECT type_of_powertrain FROM VehicleCounts ORDER BY Total DESC LIMIT 1",
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) = (SELECT MAX(count) FROM (SELECT COUNT(id) count FROM vehicles GROUP BY type_of_powertrain))",
        "SELECT v.type_of_powertrain FROM vehicles v LEFT JOIN vehicles ON v.type_of_powertrain = vehicles.type_of_powertrain GROUP BY v.type_of_powertrain ORDER BY COUNT(vehicles.type_of_powertrain) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "nlq": "Which type of powertrain is most common?",
    "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT v.type_of_powertrain FROM vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.id) DESC LIMIT 1",
        "SELECT type_of_powertrain FROM (SELECT type_of_powertrain, COUNT(type_of_powertrain) AS cnt FROM vehicles GROUP BY type_of_powertrain) ORDER BY cnt DESC LIMIT 1",
        "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(type_of_powertrain) = (SELECT MAX(cnt) FROM (SELECT COUNT(type_of_powertrain) AS cnt FROM vehicles GROUP BY type_of_powertrain))",
        "SELECT type_of_powertrain FROM vehicles v WHERE v.id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(vehicles_id) DESC LIMIT 1)",
        "SELECT v.type_of_powertrain FROM vehicles v JOIN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) r ON v.id = r.vehicles_id",
        "WITH Type_Count AS (SELECT type_of_powertrain, COUNT(*) as num FROM vehicles GROUP BY type_of_powertrain) SELECT type_of_powertrain FROM Type_Count WHERE num = (SELECT MAX(num) FROM Type_Count)",
        "SELECT v.type_of_powertrain FROM vehicles v INNER JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.type_of_powertrain ORDER BY COUNT(r.vehicles_id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "nlq": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
    "infer_predictions": [
      [
        "SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles",
        "SELECT MIN(v.annual_fuel_cost) AS MinCost, MAX(v.annual_fuel_cost) AS MaxCost, AVG(v.annual_fuel_cost) AS AvgCost FROM vehicles v",
        "SELECT MIN(annual_fuel_cost) 'Minimum Fuel Cost', MAX(annual_fuel_cost) 'Maximum Fuel Cost', AVG(annual_fuel_cost) 'Average Fuel Cost' FROM vehicles",
        "SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles GROUP BY 'All Vehicles'",
        "SELECT MINIMUM, MAXIMUM, AVERAGE FROM (SELECT MIN(annual_fuel_cost) AS MINIMUM, MAX(annual_fuel_cost) AS MAXIMUM, AVG(annual_fuel_cost) AS AVERAGE FROM vehicles)",
        "SELECT (SELECT MIN(annual_fuel_cost) FROM vehicles) AS MinimumCost, (SELECT MAX(annual_fuel_cost) FROM vehicles) AS MaximumCost, (SELECT AVG(annual_fuel_cost) FROM vehicles) AS AverageCost",
        "SELECT a.Minimum, a.Maximum, a.Average FROM (SELECT MIN(annual_fuel_cost) AS Minimum, MAX(annual_fuel_cost) AS Maximum, AVG(annual_fuel_cost) AS Average FROM vehicles) a",
        "SELECT vehicles_stats.MinCost, vehicles_stats.MaxCost, vehicles_stats.AvgCost FROM (SELECT MIN(annual_fuel_cost) as MinCost, MAX(annual_fuel_cost) as MaxCost, AVG(annual_fuel_cost) as AvgCost FROM vehicles) vehicles_stats",
        "SELECT agg.min_n, agg.max_n, agg.avg_n FROM (SELECT MIN(annual_fuel_cost) as min_n, MAX(annual_fuel_cost) as max_n, AVG(annual_fuel_cost) avg_n FROM vehicles) agg"
      ]
    ]
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "nlq": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
    "infer_predictions": [
      [
        "SELECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles;",
        "SELECT MIN(vehicles.annual_fuel_cost) AS min_cost, MAX(vehicles.annual_fuel_cost) AS max_cost, AVG(vehicles.annual_fuel_cost) AS avg_cost FROM vehicles;",
        "SELECT MIN(annual_fuel_cost) 'Minimum Cost', MAX(annual_fuel_cost) 'Maximum Cost', AVG(annual_fuel_cost) 'Average Cost' FROM vehicles;",
        "SELECT MIN(v.annual_fuel_cost) as MinFuelCost, MAX(v.annual_fuel_cost) as MaxFuelCost, AVG(v.annual_fuel_cost) as AvgFuelCost FROM vehicles v;",
        "SELECT MIN(annual_fuel_cost) Min, MAX(annual_fuel_cost) Max, AVG(annual_fuel_cost) Avg FROM vehicles;",
        "SELECT MIN(vehicles.annual_fuel_cost) minCost, MAX(vehicles.annual_fuel_cost) maxCost, AVG(vehicles.annual_fuel_cost) averageCost FROM vehicles;",
        "SELECT aggregate_function, result FROM (SELECT 'Minimum' AS aggregate_function, MIN(annual_fuel_cost) AS result FROM vehicles UNION ALL SELECT 'Maximum', MAX(annual_fuel_cost) FROM vehicles UNION ALL SELECT 'Average', AVG(annual_fuel_cost) FROM vehicles) subquery;",
        "SELECT case when ('min' is not null) then MIN(annual_fuel_cost) end as Min, case when ('max' is not null) then MAX(annual_fuel_cost) end as Max, case when ('avg' is not null) then AVG(annual_fuel_cost) end as Avg FROM vehicles;",
        "SELECT MIN(annual_fuel_cost) || ' / ' || MAX(annual_fuel_cost) || ' / ' || AVG(annual_fuel_cost) as Results FROM vehicles;"
      ]
    ]
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "nlq": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
    "infer_predictions": [
      [
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ORDER BY name",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ORDER BY model_year DESC",
        "SELECT name, model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate AND v.name IS NOT NULL",
        "SELECT v.name AS vehicle_name, v.model_year AS vehicle_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate GROUP BY name, model_year",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate LIMIT 100",
        "SELECT VEH.name, VEH.model_year FROM vehicles VEH WHERE VEH.city_fuel_economy_rate <= VEH.highway_fuel_economy_rate"
      ]
    ]
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "nlq": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
    "infer_predictions": [
      [
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ORDER BY name",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ORDER BY model_year",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.model_year",
        "SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ORDER BY id",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.id"
      ]
    ]
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "nlq": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) average_fuel_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(*) > 1",
        "SELECT type_of_powertrain, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2",
        "SELECT type_of_powertrain, AVG(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) > 1",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) FROM vehicles AS v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) as average_cost FROM vehicles v WHERE v.id IN (SELECT v2.id FROM vehicles v2 GROUP BY v2.type_of_powertrain HAVING COUNT(v2.id) >= 2) GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) average_annual_cost FROM vehicles v WHERE v.type_of_powertrain IN (SELECT v2.type_of_powertrain FROM vehicles v2 GROUP BY v2.type_of_powertrain HAVING COUNT(v2.type_of_powertrain) > 1) GROUP BY v.type_of_powertrain",
        "SELECT DISTINCT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel FROM vehicles v WHERE EXISTS (SELECT NULL FROM vehicles v2 WHERE v2.type_of_powertrain = v.type_of_powertrain GROUP BY v2.type_of_powertrain HAVING COUNT(v2.id) > 1) GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) FROM vehicles v JOIN (SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(*) > 1) v2 ON v.type_of_powertrain = v2.type_of_powertrain GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, AVG(annual_fuel_cost) AS avg_fuel_cost FROM vehicles WHERE id IN (SELECT id FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(type_of_powertrain) >= 2) GROUP BY type_of_powertrain"
      ]
    ]
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "nlq": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain, AVG(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(id) >= 2",
        "SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_cost FROM vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2",
        "SELECT t.type_of_powertrain, AVG(t.annual_fuel_cost) AS average_fuel_cost FROM (SELECT * FROM vehicles) t GROUP BY t.type_of_powertrain HAVING COUNT(*) >= 2",
        "SELECT p.type_of_powertrain, AVG(p.annual_fuel_cost) FROM (SELECT type_of_powertrain, annual_fuel_cost FROM vehicles) p GROUP BY p.type_of_powertrain HAVING COUNT(p.type_of_powertrain) > 1",
        "SELECT vehicle_type, AVG(fuel_cost) FROM (SELECT type_of_powertrain AS vehicle_type, annual_fuel_cost AS fuel_cost FROM vehicles) GROUP BY vehicle_type HAVING COUNT(vehicle_type) >= 2",
        "SELECT powetrain_type, average_cost FROM (SELECT type_of_powertrain AS powetrain_type, AVG(annual_fuel_cost) AS average_cost FROM vehicles GROUP BY type_of_powertrain) sub WHERE sub.average_cost IS NOT NULL AND (SELECT COUNT(*) FROM vehicles v WHERE v.type_of_powertrain = sub.powetrain_type) >= 2",
        "SELECT DISTINCT v1.type_of_powertrain, AVG(v1.annual_fuel_cost) OVER (PARTITION BY v1.type_of_powertrain ORDER BY v1.type_of_powertrain) FROM vehicles v1 JOIN vehicles v2 ON v1.type_of_powertrain = v2.type_of_powertrain GROUP BY v1.type_of_powertrain HAVING COUNT(v1.type_of_powertrain) > 1",
        "SELECT F.type_of_powertrain, F.avg_fuel_cost FROM (SELECT type_of_powertrain, AVG(annual_fuel_cost) AS avg_fuel_cost, COUNT(id) AS type_count FROM vehicles GROUP BY type_of_powertrain) F WHERE F.type_count > 1",
        "WITH vehicle_counts AS (SELECT type_of_powertrain, COUNT(*) AS COUNT FROM vehicles GROUP BY type_of_powertrain HAVING COUNT(*) >= 2) SELECT vehicle_counts.type_of_powertrain, (SELECT SUM(v.annual_fuel_cost) / COUNT(v.id) FROM vehicles v WHERE v.type_of_powertrain = vehicle_counts.type_of_powertrain GROUP BY v.type_of_powertrain) AS avg_cost FROM vehicle_counts"
      ]
    ]
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "nlq": "Show the name, age, membership credit for all customers?",
    "gold": "SELECT name ,  age ,  membership_credit FROM customers",
    "infer_predictions": [
      [
        "SELECT name, age, membership_credit FROM customers",
        "SELECT c.name, c.age, c.membership_credit FROM customers c",
        "SELECT name AS CustomerName, age AS CustomerAge, membership_credit AS Credit FROM customers",
        "SELECT * FROM (SELECT name, age, membership_credit FROM customers)",
        "SELECT name, age, membership_credit FROM customers WHERE id IS NOT NULL",
        "SELECT customers.name, customers.age, customers.membership_credit FROM customers WHERE EXISTS (SELECT 1 FROM customers WHERE customers.id = id)",
        "SELECT name, age, membership_credit FROM customers ORDER BY name"
      ]
    ]
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "nlq": "What are the names, ages, and membership credits for all customers?",
    "gold": "SELECT name ,  age ,  membership_credit FROM customers",
    "infer_predictions": [
      [
        "SELECT name, age, membership_credit FROM customers",
        "SELECT c.name AS CustomerName, c.age AS CustomerAge, c.membership_credit AS Credit FROM customers c",
        "SELECT customers.name, customers.age, membership_credit FROM customers ORDER BY name",
        "SELECT name, age, membership_credit FROM customers GROUP BY id",
        "SELECT * FROM (SELECT name, age, membership_credit FROM customers) AS subquery",
        "SELECT name, age, membership_credit FROM (SELECT * FROM customers) AS all_customers",
        "SELECT c1.name, c1.age, c1.membership_credit FROM customers c1 WHERE c1.id IN (SELECT c2.id FROM customers c2)"
      ]
    ]
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "nlq": "Show the name and age of the customer with maximum membership credit.",
    "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)",
        "SELECT c.name, c.age FROM customers c ORDER BY c.membership_credit DESC LIMIT 1",
        "SELECT c1.name, c1.age FROM customers c1 JOIN (SELECT id FROM customers ORDER BY membership_credit DESC LIMIT 1) c2 ON c1.id = c2.id",
        "SELECT name, age FROM customers WHERE membership_credit IN (SELECT MAX(membership_credit) FROM customers)",
        "SELECT c.name, c.age FROM (SELECT * FROM customers ORDER BY membership_credit DESC) c LIMIT 1",
        "SELECT name, age FROM customers WHERE id = (SELECT id FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers))",
        "SELECT c.name, c.age FROM customers c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM customers WHERE id = c.id)",
        "SELECT name, age FROM customers WHERE id = (SELECT id FROM customers ORDER BY membership_credit DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "nlq": "What is the name and age of the customer with the most membership credit?",
    "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.name, c.age FROM customers c ORDER BY c.membership_credit DESC LIMIT 1",
        "SELECT name, age FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers)",
        "SELECT c.name, c.age FROM customers c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM customers WHERE id = c.id)",
        "SELECT c1.name, c1.age FROM customers c1 JOIN (SELECT MAX(membership_credit) AS max_credit FROM customers) c2 ON c1.membership_credit = c2.max_credit",
        "SELECT name, age FROM customers WHERE id = (SELECT id FROM customers ORDER BY membership_credit DESC LIMIT 1)",
        "SELECT c.name, c.age FROM (SELECT * FROM customers ORDER BY membership_credit DESC) c LIMIT 1",
        "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY membership_credit DESC) rank FROM customers) WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "nlq": "What is the average age for customers with a membership credit above the average?",
    "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
    "infer_predictions": [
      [
        "SELECT AVG(customers.age) FROM customers WHERE customers.membership_credit > (SELECT AVG(membership_credit) FROM customers)",
        "SELECT AVG(c.age) AS average_age FROM customers c WHERE c.membership_credit > (SELECT AVG(c2.membership_credit) FROM customers c2)",
        "SELECT AVG(age) AS AverageAge FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers AS sub)",
        "SELECT AVG(c.age) FROM customers c WHERE c.membership_credit > (SELECT AVG(customers.membership_credit) FROM customers)",
        "SELECT AVG(c.age) FROM customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM customers c2)",
        "SELECT AVG(c.age) AS average_age FROM customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM customers subQ)",
        "SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers c WHERE c.id = customers.id)"
      ]
    ]
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "nlq": "Return the average age for customers who have membership above the average across all customers.",
    "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
    "infer_predictions": [
      [
        "SELECT AVG(customers.age) FROM customers WHERE customers.membership_credit > (SELECT AVG(membership_credit) FROM customers)",
        "SELECT AVG(c.age) FROM customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM customers)",
        "SELECT AVG(c.age) AS AverageAge FROM customers c WHERE c.membership_credit > (SELECT AVG(customers.membership_credit) FROM customers)",
        "SELECT AVG(customers.age) AS Average_Age FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers)",
        "SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers c WHERE c.id = customers.id)",
        "SELECT AVG(c.age) FROM customers c WHERE c.membership_credit > (SELECT AVG(customers.membership_credit) FROM customers)"
      ]
    ]
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "nlq": "Show all information for all discounts.",
    "gold": "SELECT * FROM discount",
    "infer_predictions": [
      [
        "SELECT * FROM discount",
        "SELECT discount.* FROM discount",
        "SELECT id, name, membership_credit FROM discount",
        "SELECT d.* FROM discount d",
        "SELECT d.id, d.name, d.membership_credit FROM discount d",
        "SELECT id AS DiscountID, name AS DiscountName, membership_credit AS MembershipCredit FROM discount",
        "SELECT ALL id, name, membership_credit FROM discount",
        "SELECT discount.id, discount.name, discount.membership_credit FROM discount discount",
        "SELECT d.id AS 'Discount ID', d.name AS 'Discount Name', d.membership_credit AS 'Membership Credit' FROM discount d"
      ]
    ]
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "nlq": "Return all information about discounts.",
    "gold": "SELECT * FROM discount",
    "infer_predictions": [
      [
        "SELECT * FROM discount",
        "SELECT discount.* FROM discount",
        "SELECT id, name, membership_credit FROM discount",
        "SELECT d.* FROM discount d",
        "SELECT d.id, d.name, d.membership_credit FROM discount d",
        "SELECT d.id AS DiscountID, d.name AS DiscountName, d.membership_credit AS MembershipCredit FROM discount d",
        "SELECT discount.id, discount.name, discount.membership_credit FROM discount ORDER BY discount.id"
      ]
    ]
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "nlq": "Show the name and total hours of renting for each vehicle.",
    "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
    "infer_predictions": [
      [
        "SELECT vehicles.name, SUM(renting_history.total_hours) FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name",
        "SELECT vehicles.name, SUM(renting_history.total_hours) AS total_hours FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name",
        "SELECT v.name, SUM(r.total_hours) AS total_hours FROM vehicles v INNER JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name",
        "SELECT name, SUM(total_hours) FROM vehicles, renting_history WHERE vehicles.id = renting_history.vehicles_id GROUP BY name",
        "SELECT v.name, SUM(r.total_hours) FROM vehicles v JOIN renting_history r ON v.id = r.vehicles_id GROUP BY v.name",
        "SELECT vehicles.name, TOTAL(renting_history.total_hours) FROM vehicles INNER JOIN renting_history USING(id) GROUP BY vehicles.name",
        "SELECT v.name, SUM(r.total_hours) FROM vehicles AS v, renting_history AS r WHERE v.id = r.vehicles_id GROUP BY v.name",
        "SELECT name, SUM(total_hours) FROM vehicles LEFT JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name",
        "SELECT name, TOTAL(total_hours) FROM vehicles LEFT JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY name"
      ]
    ]
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "nlq": "What are the names and total rental hours for each vehicle?",
    "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
    "infer_predictions": [
      [
        "SELECT vehicles.name, SUM(renting_history.total_hours) AS total_hours FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.id",
        "SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM vehicles v INNER JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name",
        "SELECT v.name, total_hours_sum FROM (SELECT vehicles_id, SUM(total_hours) AS total_hours_sum FROM renting_history GROUP BY vehicles_id) AS totalHours JOIN vehicles v ON totalHours.vehicles_id = v.id",
        "SELECT a.name, b.total_hours FROM vehicles a LEFT JOIN (SELECT vehicles_id, SUM(total_hours) AS total_hours FROM renting_history GROUP BY vehicles_id) b ON a.id = b.vehicles_id",
        "SELECT v.name AS VehicleName, SUM(r.total_hours) AS TotalRentalHours FROM renting_history r JOIN vehicles v ON r.vehicles_id = v.id GROUP BY v.name",
        "SELECT name, SUM(total_hours) FROM vehicles NATURAL JOIN renting_history GROUP BY name",
        "SELECT vehicles.name, TOTAL(renting_history.total_hours) FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name",
        "SELECT name, SUM(rh.total_hours) FROM vehicles INNER JOIN renting_history rh ON vehicles.id = rh.vehicles_id GROUP BY vehicles.name"
      ]
    ]
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "nlq": "Show the name of vehicles with no renting history.",
    "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
    "infer_predictions": [
      [
        "SELECT v.name FROM vehicles v WHERE NOT EXISTS (SELECT * FROM renting_history rh WHERE rh.vehicles_id = v.id)",
        "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
        "SELECT v.name FROM vehicles v LEFT JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.vehicles_id IS NULL",
        "SELECT name FROM vehicles EXCEPT SELECT v.name FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id",
        "SELECT v.name FROM vehicles v WHERE v.id NOT IN (SELECT DISTINCT vehicles_id FROM renting_history)",
        "SELECT vehicles.name FROM vehicles LEFT JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.id IS NULL",
        "SELECT vehicles.name FROM vehicles WHERE vehicles.id NOT IN (SELECT rh.vehicles_id FROM renting_history rh)",
        "SELECT v.name FROM vehicles v WHERE NOT EXISTS (SELECT vehicles_id FROM renting_history WHERE vehicles_id = v.id)",
        "SELECT name FROM vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM renting_history rh WHERE rh.vehicles_id IS NOT NULL)",
        "SELECT name FROM vehicles AS v LEFT JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.vehicles_id IS NULL"
      ]
    ]
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "nlq": "What are the names of vehicles that have never been rented?",
    "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
    "infer_predictions": [
      [
        "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
        "SELECT v.name FROM vehicles v LEFT JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.vehicles_id IS NULL",
        "SELECT vehicles.name FROM vehicles WHERE NOT EXISTS (SELECT 1 FROM renting_history WHERE vehicles_id = vehicles.id)",
        "SELECT name FROM vehicles EXCEPT SELECT name FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history)",
        "SELECT v.name FROM vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM renting_history rh)",
        "SELECT v.name FROM vehicles AS v WHERE NOT EXISTS (SELECT NULL FROM renting_history AS rh WHERE rh.vehicles_id = v.id)",
        "SELECT name FROM vehicles WHERE id NOT IN (SELECT DISTINCT vehicles_id FROM renting_history)",
        "SELECT v.name FROM vehicles v WHERE v.id NOT IN (SELECT vehicles_id FROM renting_history WHERE vehicles_id IS NOT NULL)",
        "SELECT v.name FROM vehicles v LEFT OUTER JOIN renting_history rh ON v.id = rh.vehicles_id WHERE rh.id IS NULL",
        "SELECT name FROM vehicles v WHERE NOT EXISTS (SELECT * FROM renting_history rh WHERE rh.vehicles_id = v.id)"
      ]
    ]
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "nlq": "Show the name of customer with at least two renting history records.",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)",
        "SELECT c.name FROM customers c JOIN renting_history rh ON c.id = rh.customer_id GROUP BY c.id HAVING COUNT(rh.id) >= 2",
        "SELECT c.name FROM customers c WHERE EXISTS (SELECT 1 FROM renting_history rh WHERE rh.customer_id = c.id GROUP BY rh.customer_id HAVING COUNT(rh.id) >= 2)",
        "SELECT DISTINCT c.name FROM customers c INNER JOIN renting_history rh ON c.id = rh.customer_id GROUP BY c.id HAVING COUNT(rh.id) >= 2",
        "SELECT c.name FROM customers c, renting_history rh WHERE c.id = rh.customer_id GROUP BY c.id, c.name HAVING COUNT(distinct rh.id) >= 2",
        "SELECT DISTINCT name FROM (SELECT c.name, count(rh.id) AS rental_count FROM customers c JOIN renting_history rh ON c.id = rh.customer_id GROUP BY c.id) WHERE rental_count >= 2",
        "SELECT c.name FROM customers c WHERE c.id IN (SELECT rh.customer_id FROM renting_history rh GROUP BY rh.customer_id HAVING COUNT(rh.customer_id) >= 2)",
        "SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)",
        "SELECT c.name FROM customers c WHERE (SELECT count(rh.id) FROM renting_history rh WHERE rh.customer_id = c.id) >= 2",
        "SELECT name FROM (SELECT name FROM customers AS c JOIN renting_history AS rh ON c.id = rh.customer_id GROUP BY c.id HAVING COUNT(rh.id) >= 2) AS filtered_customers"
      ]
    ]
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "nlq": "What are the names of customers who have two or more records of rental history?",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)",
        "SELECT c.name FROM customers c JOIN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(id) >= 2) rh ON c.id = rh.customer_id",
        "SELECT c.name FROM customers c INNER JOIN renting_history rh ON c.id = rh.customer_id GROUP BY c.id, c.name HAVING COUNT(rh.id) >= 2",
        "SELECT name FROM customers WHERE id IN (SELECT customer_id FROM renting_history GROUP BY customer_id HAVING COUNT(*) >= 2)",
        "SELECT DISTINCT customers.name FROM customers JOIN renting_history ON customers.id = renting_history.customer_id GROUP BY customers.id HAVING COUNT(renting_history.id) >= 2",
        "SELECT name FROM customers c WHERE EXISTS (SELECT 1 FROM renting_history rh WHERE rh.customer_id = c.id GROUP BY rh.customer_id HAVING COUNT(rh.id) >= 2)",
        "SELECT customers.name FROM customers, renting_history WHERE customers.id = renting_history.customer_id GROUP BY customers.id HAVING COUNT(renting_history.id) >= 2",
        "SELECT c.name FROM customers c WHERE (SELECT COUNT(*) FROM renting_history rh WHERE rh.customer_id = c.id) >= 2",
        "SELECT name FROM customers WHERE id IN (SELECT customer_id FROM (SELECT customer_id, COUNT(*) as rentals_count FROM renting_history GROUP BY customer_id) WHERE rentals_count >= 2)"
      ]
    ]
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "nlq": "Show the name and model year of the vehicle with most number of renting history records.",
    "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.id = (SELECT rh.vehicles_id FROM renting_history rh GROUP BY rh.vehicles_id ORDER BY COUNT(rh.id) DESC LIMIT 1)",
        "SELECT name, model_year FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(id) = (SELECT MAX(cnt) FROM (SELECT COUNT(id) AS cnt FROM renting_history GROUP BY vehicles_id)))",
        "SELECT vehicles.name, vehicles.model_year FROM vehicles JOIN (SELECT vehicles_id, COUNT(*) as cnt FROM renting_history GROUP BY vehicles_id ORDER BY cnt DESC LIMIT 1) subq ON vehicles.id = subq.vehicles_id",
        "SELECT name, model_year FROM vehicles WHERE id = (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT v.name, v.model_year FROM vehicles v INNER JOIN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(id) DESC LIMIT 1) vh ON vh.vehicles_id = v.id",
        "SELECT v.name, v.model_year FROM (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(id) DESC LIMIT 1) t JOIN vehicles v ON t.vehicles_id = v.id",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.id = (SELECT rh.vehicles_id FROM renting_history rh GROUP BY rh.vehicles_id HAVING COUNT(rh.id) = (SELECT MAX(cnt) FROM (SELECT vehicles_id, COUNT(id) as cnt FROM renting_history GROUP BY vehicles_id) sub))",
        "SELECT name, model_year FROM vehicles WHERE EXISTS (SELECT NULL FROM renting_history WHERE vehicles.id = renting_history.vehicles_id GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "nlq": "What is the name and model year of the vehicle which has been rented the most times?",
    "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT v.name, v.model_year FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.id ORDER BY COUNT(rh.id) DESC LIMIT 1",
        "SELECT name, model_year FROM vehicles WHERE id = (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT name, model_year FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT vehicles.name, vehicles.model_year FROM vehicles INNER JOIN (SELECT vehicles_id, COUNT(*) AS cnt FROM renting_history GROUP BY vehicles_id ORDER BY cnt DESC LIMIT 1) sub ON vehicles.id = sub.vehicles_id",
        "SELECT name, model_year FROM (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1) AS most_rented JOIN vehicles ON most_rented.vehicles_id = vehicles.id",
        "SELECT v.name, v.model_year FROM vehicles AS v WHERE v.id = (SELECT rh.vehicles_id FROM renting_history AS rh GROUP BY rh.vehicles_id ORDER BY COUNT(rh.id) DESC LIMIT 1)",
        "SELECT v.name, v.model_year FROM vehicles v WHERE v.id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING COUNT(vehicles_id) = (SELECT MAX(ccount) FROM (SELECT COUNT(vehicles_id) AS ccount FROM renting_history GROUP BY vehicles_id)))",
        "SELECT v.name, v.model_year FROM vehicles v JOIN (SELECT vehicles_id, COUNT(id) num FROM renting_history GROUP BY vehicles_id ORDER BY num DESC LIMIT 1) v_count ON v.id = v_count.vehicles_id"
      ]
    ]
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "nlq": "Show the vehicle name with a descending order of total hours of renting.",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
    "infer_predictions": [
      [
        "SELECT vehicles.name FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.id ORDER BY SUM(renting_history.total_hours) DESC",
        "SELECT v.name FROM vehicles v INNER JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.id ORDER BY SUM(rh.total_hours) DESC",
        "SELECT name FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
        "SELECT v.name FROM vehicles AS v JOIN (SELECT vehicles_id, SUM(total_hours) AS total FROM renting_history GROUP BY vehicles_id) AS rh ON v.id = rh.vehicles_id ORDER BY rh.total DESC",
        "SELECT v.name FROM vehicles v WHERE EXISTS (SELECT NULL FROM renting_history rh WHERE rh.vehicles_id = v.id) GROUP BY v.id ORDER BY (SELECT SUM(rh.total_hours) FROM renting_history rh WHERE rh.vehicles_id = v.id) DESC",
        "SELECT name FROM (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC) AS rh JOIN vehicles ON id = vehicles_id",
        "SELECT v.name FROM (SELECT vehicles_id, SUM(total_hours) AS total FROM renting_history GROUP BY vehicles_id ORDER BY total DESC) rh JOIN vehicles v ON v.id = rh.vehicles_id",
        "SELECT v.name FROM vehicles v JOIN renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name ORDER BY SUM(rh.total_hours) DESC",
        "SELECT vehicles.name FROM vehicles, renting_history WHERE vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name ORDER BY SUM(renting_history.total_hours) DESC",
        "SELECT v.name FROM vehicles v, renting_history rh WHERE v.id = rh.vehicles_id GROUP BY v.name HAVING SUM(rh.total_hours) > 0 ORDER BY SUM(rh.total_hours) DESC"
      ]
    ]
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "nlq": "What are the names of vehicles, sorted descending by total hours of renting?",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
    "infer_predictions": [
      [
        "SELECT vehicles.name FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.name ORDER BY SUM(renting_history.total_hours) DESC",
        "SELECT name FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC)",
        "SELECT V.name FROM vehicles V INNER JOIN (SELECT vehicles_id, SUM(total_hours) as total_hours_sum FROM renting_history GROUP BY vehicles_id) R ON V.id = R.vehicles_id ORDER BY R.total_hours_sum DESC",
        "SELECT V.name FROM vehicles V, renting_history R WHERE V.id = R.vehicles_id GROUP BY V.name ORDER BY SUM(R.total_hours) DESC",
        "SELECT name FROM (SELECT vehicles.name, SUM(renting_history.total_hours) as total FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id GROUP BY vehicles.name) ORDER BY total DESC",
        "SELECT vehicles.name AS vehicle_name FROM renting_history JOIN vehicles ON renting_history.vehicles_id = vehicles.id GROUP BY vehicle_name ORDER BY SUM(renting_history.total_hours) DESC",
        "SELECT vehicle_name FROM (SELECT name as vehicle_name FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY name ORDER BY SUM(renting_history.total_hours) DESC)",
        "SELECT (SELECT name FROM vehicles WHERE id = vehicles_id) FROM renting_history GROUP BY vehicles_id ORDER BY SUM(total_hours) DESC"
      ]
    ]
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "nlq": "What is the discount name with most number of renting history records?",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.name FROM discount d JOIN renting_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM discount WHERE id = (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(id) DESC LIMIT 1)",
        "SELECT name FROM (SELECT d.name, COUNT(rh.id) AS total FROM discount d INNER JOIN renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY total DESC LIMIT 1)",
        "SELECT (SELECT name FROM discount WHERE id = rh.discount_id) AS name FROM renting_history rh GROUP BY rh.discount_id ORDER BY COUNT(rh.id) DESC LIMIT 1",
        "SELECT d.name FROM discount d WHERE d.id IN (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT name FROM discount WHERE id = (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT top_name FROM (SELECT d.name AS top_name FROM discount d LEFT JOIN renting_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY COUNT(rh.id) DESC LIMIT 1)",
        "SELECT name FROM discount WHERE id = (SELECT rh.discount_id FROM renting_history rh GROUP BY rh.discount_id ORDER BY COUNT(rh.id) DESC LIMIT 1)",
        "SELECT d.name FROM discount AS d JOIN (SELECT discount_id, COUNT(id) AS total FROM renting_history GROUP BY discount_id ORDER BY total DESC LIMIT 1) AS top_discount ON d.id = top_discount.discount_id",
        "SELECT name FROM (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1) AS subquery JOIN discount d ON d.id = subquery.discount_id"
      ]
    ]
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "nlq": "Return the name of the discount that corresponds to the most rental history records.",
    "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT discount.name FROM discount JOIN renting_history ON discount.id = renting_history.discount_id GROUP BY discount.id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT d.name FROM discount d INNER JOIN renting_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY COUNT(rh.discount_id) DESC LIMIT 1",
        "SELECT d.name FROM discount d WHERE d.id IN (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT (SELECT name FROM discount WHERE id = rh.discount_id) AS discount_name FROM renting_history rh GROUP BY rh.discount_id ORDER BY COUNT(rh.discount_id) DESC LIMIT 1",
        "SELECT name FROM discount WHERE id = (SELECT discount_id FROM renting_history GROUP BY discount_id ORDER BY COUNT(discount_id) DESC LIMIT 1)",
        "SELECT name FROM discount WHERE id = (SELECT top.discount_id FROM (SELECT discount_id, COUNT(*) as cnt FROM renting_history GROUP BY discount_id) as top ORDER BY top.cnt DESC LIMIT 1)",
        "SELECT d.name FROM discount d, renting_history rh WHERE d.id = rh.discount_id GROUP BY d.id HAVING COUNT(rh.discount_id) = (SELECT MAX(COUNTed) FROM (SELECT discount_id, COUNT(*) AS COUNTed FROM renting_history GROUP BY discount_id) count_max)",
        "SELECT name FROM (SELECT d.name, COUNT(rh.discount_id) as usage_count FROM discount d LEFT JOIN renting_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY usage_count DESC LIMIT 1) as most_used_discount",
        "SELECT d.name FROM discount d JOIN (SELECT discount_id, COUNT(*) as total FROM renting_history GROUP BY discount_id ORDER BY COUNT(*) DESC LIMIT 1) top_discount ON d.id = top_discount.discount_id"
      ]
    ]
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "nlq": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
    "infer_predictions": [
      [
        "SELECT DISTINCT V.name, V.type_of_powertrain FROM vehicles V JOIN renting_history RH ON V.id = RH.vehicles_id WHERE RH.total_hours > 30",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V WHERE V.id IN (SELECT vehicles_id FROM renting_history WHERE total_hours > 30)",
        "SELECT vehicles.name, vehicles.type_of_powertrain FROM vehicles INNER JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.total_hours > 30 GROUP BY vehicles.name, vehicles.type_of_powertrain",
        "SELECT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
        "SELECT V.name AS vehicle_name, V.type_of_powertrain AS powertrain_type FROM vehicles AS V, renting_history AS RH WHERE V.id = RH.vehicles_id AND RH.total_hours > 30",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V WHERE EXISTS (SELECT 1 FROM renting_history RH WHERE RH.vehicles_id = V.id AND RH.total_hours > 30)",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V JOIN (SELECT vehicles_id FROM renting_history WHERE total_hours > 30) AS RH_V ON V.id = RH_V.vehicles_id",
        "SELECT DISTINCT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history WHERE total_hours > 30)",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V INNER JOIN renting_history RH ON V.id = RH.vehicles_id GROUP BY V.name, V.type_of_powertrain HAVING MAX(RH.total_hours) > 30",
        "SELECT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT RH.vehicles_id FROM renting_history RH WHERE RH.total_hours > 30 GROUP BY RH.vehicles_id)"
      ]
    ]
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "nlq": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
    "infer_predictions": [
      [
        "SELECT V.name, V.type_of_powertrain FROM vehicles V WHERE V.id IN (SELECT R.vehicles_id FROM renting_history R GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30)",
        "SELECT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
        "SELECT DISTINCT V.name, V.type_of_powertrain FROM vehicles V INNER JOIN renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V, renting_history R WHERE V.id = R.vehicles_id GROUP BY V.id HAVING SUM(R.total_hours) > 30",
        "SELECT name, type_of_powertrain FROM vehicles WHERE EXISTS (SELECT NULL FROM renting_history WHERE vehicles_id = id GROUP BY vehicles_id HAVING SUM(total_hours) > 30)",
        "SELECT vehicles.name, vehicles.type_of_powertrain FROM vehicles JOIN (SELECT vehicles_id, SUM(total_hours) AS hours FROM renting_history GROUP BY vehicles_id HAVING hours > 30) AS SubQuery ON vehicles.id = SubQuery.vehicles_id",
        "SELECT name, type_of_powertrain FROM vehicles WHERE id IN (SELECT R.vehicles_id FROM renting_history R WHERE R.total_hours > 30 GROUP BY R.vehicles_id)",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V JOIN renting_history R ON V.id = R.vehicles_id GROUP BY V.id HAVING MAX(R.total_hours) > 30",
        "SELECT V.name, V.type_of_powertrain FROM vehicles V WHERE EXISTS (SELECT 1 FROM renting_history R WHERE R.vehicles_id = V.id GROUP BY R.vehicles_id HAVING SUM(R.total_hours) > 30)"
      ]
    ]
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "nlq": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel, AVG(highway_fuel_economy_rate) AS avg_highway_fuel FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city, AVG(v.highway_fuel_economy_rate) AS avg_highway FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, AVG(city_fuel_economy_rate) as AverageCityFuel, AVG(highway_fuel_economy_rate) as AverageHighwayFuel FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(city_fuel_economy_rate) as Avg_City_Fuel, AVG(highway_fuel_economy_rate) as Avg_Highway_Fuel FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(city_fuel_economy_rate) average_city_fuel, AVG(highway_fuel_economy_rate) average_highway_fuel FROM vehicles v GROUP BY type_of_powertrain",
        "SELECT vehicles.type_of_powertrain, AVG(vehicles.city_fuel_economy_rate) AS AVG_CITY, AVG(vehicles.highway_fuel_economy_rate) AS AVG_HIGHWAY FROM vehicles GROUP BY vehicles.type_of_powertrain",
        "SELECT vehicles.type_of_powertrain, AVG(vehicles.city_fuel_economy_rate) average_city_fuel, AVG(vehicles.highway_fuel_economy_rate) average_highway_fuel FROM vehicles GROUP BY vehicles.type_of_powertrain",
        "SELECT type_of_powertrain, ROUND(AVG(city_fuel_economy_rate), 2) AS AvgCityFuel, ROUND(AVG(highway_fuel_economy_rate), 2) AS AvgHighwayFuel FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) as AverageOfCity, AVG(v.highway_fuel_economy_rate) as AverageOfHighway FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT vehicles.type_of_powertrain, AVG(vehicles.city_fuel_economy_rate) AS Avg_City_FE, AVG(vehicles.highway_fuel_economy_rate) AS Avg_Highway_FE FROM vehicles GROUP BY vehicles.type_of_powertrain"
      ]
    ]
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "nlq": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
    "infer_predictions": [
      [
        "SELECT type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_rate, AVG(highway_fuel_economy_rate) AS avg_highway_rate FROM vehicles GROUP BY type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS AverageCityFuelRate, AVG(v.highway_fuel_economy_rate) AS AverageHighwayFuelRate FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT type_of_powertrain, AVG(city_fuel_economy_rate), AVG(highway_fuel_economy_rate) FROM vehicles GROUP BY type_of_powertrain",
        "WITH AggregatedData AS (SELECT type_of_powertrain, AVG(city_fuel_economy_rate) as AvgCity, AVG(highway_fuel_economy_rate) as AvgHighway FROM vehicles GROUP BY type_of_powertrain) SELECT type_of_powertrain, AvgCity, AvgHighway FROM AggregatedData",
        "SELECT t.type_of_powertrain, AVG(t.city_fuel_economy_rate) AS average_city, AVG(t.highway_fuel_economy_rate) AS average_highway FROM vehicles t GROUP BY t.type_of_powertrain",
        "SELECT type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city, AVG(v.highway_fuel_economy_rate) AS avg_highway FROM vehicles v GROUP BY v.type_of_powertrain",
        "SELECT DISTINCT type_of_powertrain, (SELECT AVG(city_fuel_economy_rate) FROM vehicles WHERE type_of_powertrain = v.type_of_powertrain) AS AvgCity, (SELECT AVG(highway_fuel_economy_rate) FROM vehicles WHERE type_of_powertrain = v.type_of_powertrain) AS AvgHighway FROM vehicles v",
        "SELECT t.type_of_powertrain, AVG(city_fuel_economy_rate) as AvgCityFuel, AVG(highway_fuel_economy_rate) as AvgHighwayFuel FROM vehicles t GROUP BY t.type_of_powertrain",
        "SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate), AVG(v.highway_fuel_economy_rate) FROM vehicles v GROUP BY v.type_of_powertrain"
      ]
    ]
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the average amount of a student loan?",
    "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
    "infer_predictions": [
      [
        "SELECT AVG(amount_of_loan) FROM student_loans",
        "SELECT AVG(amount_of_loan) AS average_loan FROM student_loans",
        "SELECT AVG(A.amount_of_loan) FROM student_loans A",
        "SELECT AVG(sl.amount_of_loan) FROM student_loans sl",
        "SELECT AVG(loan_amount) FROM (SELECT amount_of_loan AS loan_amount FROM student_loans)",
        "SELECT AVG(sloan.amount_of_loan) AS average_amount FROM student_loans sloan",
        "SELECT amount_of_loan / COUNT(amount_of_loan) FROM (SELECT SUM(amount_of_loan) as amount_of_loan, COUNT(amount_of_loan) FROM student_loans)",
        "SELECT total_amount / loan_count FROM (SELECT SUM(amount_of_loan) AS total_amount, COUNT(amount_of_loan) AS loan_count FROM student_loans)"
      ]
    ]
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Compute the average amount of student loans.",
    "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
    "infer_predictions": [
      [
        "SELECT AVG(amount_of_loan) FROM student_loans",
        "SELECT AVG(student_loans.amount_of_loan) AS average_loan FROM student_loans",
        "SELECT AVG(amount_of_loan) AS average_amount FROM student_loans",
        "SELECT average_amount FROM (SELECT AVG(amount_of_loan) AS average_amount FROM student_loans)",
        "SELECT AVG(sl.amount_of_loan) as AvgLoan FROM student_loans sl",
        "SELECT AVG(amount_of_loan) FROM student_loans WHERE amount_of_loan IS NOT NULL",
        "SELECT (SUM(amount_of_loan) / COUNT(student_loan_id)) FROM student_loans",
        "SELECT (SUM(sl.amount_of_loan) / COUNT(sl.student_loan_id)) AS LoanAverage FROM student_loans sl",
        "SELECT (TOTAL(amount_of_loan) / COUNT(*)) as AverageLoan FROM student_loans WHERE amount_of_loan IS NOT NULL"
      ]
    ]
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.bio_data FROM students s WHERE s.student_id IN (SELECT c.student_id FROM classes c GROUP BY c.student_id HAVING COUNT(*) >= 2) AND s.student_id NOT IN (SELECT d.student_id FROM detention d GROUP BY d.student_id HAVING COUNT(*) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s JOIN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2) as cls ON s.student_id = cls.student_id LEFT JOIN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) >= 2) as det ON s.student_id = det.student_id WHERE det.student_id IS NULL",
        "SELECT students.student_id, students.bio_data FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2) AND student_id NOT IN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s WHERE EXISTS (SELECT 1 FROM classes c WHERE c.student_id = s.student_id GROUP BY c.student_id HAVING COUNT(*) >= 2) AND NOT EXISTS (SELECT 1 FROM detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(*) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT c.class_id) >= 2 EXCEPT SELECT s.student_id, s.bio_data FROM students s JOIN detention d on s.student_id = d.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT d.detention_id) >= 2",
        "SELECT student_id, bio_data FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(*) >= 2) AND NOT EXISTS (SELECT student_id FROM detention WHERE student_id = students.student_id GROUP BY student_id HAVING COUNT(*) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s LEFT JOIN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(*) >= 2) det ON s.student_id = det.student_id, (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(*) >= 2) cls WHERE s.student_id = cls.student_id AND det.student_id IS NULL",
        "SELECT bio_data, s.student_id FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 AND (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2",
        "SELECT distinct s.student_id, s.bio_data FROM students s INNER JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data HAVING COUNT(c.class_id) >= 2 AND NOT EXISTS (SELECT 1 FROM detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(distinct class_id) FROM classes WHERE student_id = s.student_id) >= 2 AND (SELECT COUNT(distinct detention_id) FROM detention WHERE student_id = s.student_id) < 2"
      ]
    ]
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) >= 2 OR (SELECT COUNT(*) FROM detention d WHERE d.student_id = s.student_id) < 2",
        "SELECT s.student_id, s.bio_data FROM students s LEFT JOIN classes c ON s.student_id = c.student_id LEFT JOIN detention d ON s.student_id = d.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT c.class_id) >= 2 OR COUNT(d.detention_id) < 2",
        "SELECT s.student_id, s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2) OR s.student_id NOT IN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s LEFT JOIN (SELECT student_id, COUNT(*) as num_classes FROM classes GROUP BY student_id) as c ON s.student_id = c.student_id LEFT JOIN (SELECT student_id, COUNT(*) as num_detentions FROM detention GROUP BY student_id) as d ON s.student_id = d.student_id WHERE IFNULL(c.num_classes, 0) >= 2 OR IFNULL(d.num_detentions, 0) < 2",
        "SELECT s.student_id, s.bio_data FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(c.class_id) >= 2 UNION SELECT s.student_id, s.bio_data FROM students s WHERE s.student_id NOT IN (SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(*) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s JOIN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(class_id) >= 2 UNION SELECT student_id FROM detention GROUP BY student_id HAVING COUNT(detention_id) < 2) x ON s.student_id = x.student_id",
        "SELECT s.student_id, s.bio_data FROM students s WHERE EXISTS (SELECT 1 FROM classes c WHERE c.student_id = s.student_id GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) OR NOT EXISTS (SELECT 1 FROM detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) >= 2)",
        "SELECT s.student_id, s.bio_data FROM students s WHERE (SELECT COUNT(class_id) FROM classes WHERE student_id = s.student_id GROUP BY student_id) >= 2 OR (SELECT COUNT(detention_id) FROM detention WHERE student_id = s.student_id GROUP BY student_id) < 2",
        "SELECT s.student_id, s.bio_data FROM students s WHERE s.student_id IN (SELECT c.student_id FROM classes c GROUP BY c.student_id HAVING COUNT(*) >= 2) OR s.student_id NOT IN (SELECT d.student_id FROM detention d GROUP BY d.student_id HAVING COUNT(*) >= 2)"
      ]
    ]
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
    "infer_predictions": [
      [
        "SELECT DISTINCT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT DISTINCT t.teacher_details FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%' AND t.teacher_id NOT IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT DISTINCT t.teacher_details FROM teachers t WHERE EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE 'net%')",
        "SELECT DISTINCT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE '%data%') EXCEPT SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE '%data%') AND teacher_id NOT IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE 'net%') GROUP BY teacher_id",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE '%data%') EXCEPT SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE 'net%')",
        "SELECT DISTINCT t1.teacher_details FROM teachers t1 CROSS JOIN classes c1 WHERE t1.teacher_id = c1.teacher_id AND c1.class_details LIKE '%data%' AND NOT EXISTS (SELECT 1 FROM classes c2 WHERE c2.teacher_id = t1.teacher_id AND c2.class_details LIKE 'net%')",
        "SELECT t.teacher_details FROM teachers t JOIN (SELECT DISTINCT teacher_id FROM classes WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM classes WHERE class_details LIKE 'net%') c ON t.teacher_id = c.teacher_id",
        "SELECT t.teacher_details FROM teachers t WHERE EXISTS (SELECT 1 FROM classes WHERE teacher_id = t.teacher_id AND class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT DISTINCT teacher_details FROM (SELECT * FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes WHERE teacher_id = teachers.teacher_id AND class_details LIKE 'net%'))"
      ]
    ]
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
    "infer_predictions": [
      [
        "SELECT DISTINCT t.teacher_details FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%' AND t.teacher_id NOT IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT t.teacher_details FROM teachers t WHERE EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes c2 WHERE c2.teacher_id = t.teacher_id AND c2.class_details LIKE 'net%')",
        "SELECT DISTINCT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT DISTINCT t1.teacher_details FROM teachers t1 INNER JOIN classes c1 ON t1.teacher_id = c1.teacher_id WHERE c1.class_details LIKE '%data%' AND t1.teacher_id NOT IN (SELECT c2.teacher_id FROM classes c2 WHERE c2.class_details LIKE 'net%')",
        "SELECT t.teacher_details FROM teachers t WHERE t.teacher_id IN (SELECT c.teacher_id FROM classes c WHERE c.class_details LIKE '%data%') AND NOT EXISTS (SELECT 1 FROM classes c WHERE c.teacher_id = t.teacher_id AND c.class_details LIKE 'net%')",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM classes WHERE class_details LIKE 'net%')",
        "SELECT t.teacher_details FROM teachers t WHERE EXISTS (SELECT NULL FROM classes c1 WHERE c1.teacher_id = t.teacher_id AND c1.class_details LIKE '%data%') AND NOT EXISTS (SELECT NULL FROM classes c2 WHERE c2.teacher_id = t.teacher_id AND c2.class_details LIKE 'net%')",
        "SELECT DISTINCT teacher_details FROM teachers AS t JOIN classes AS c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%' AND NOT EXISTS (SELECT * FROM classes c2 WHERE c2.teacher_id = t.teacher_id AND c2.class_details LIKE 'net%')",
        "SELECT teacher_details FROM teachers t WHERE t.teacher_id IN (SELECT DISTINCT teacher_id FROM classes WHERE class_details LIKE '%data%') AND t.teacher_id NOT IN (SELECT DISTINCT teacher_id FROM classes WHERE class_details LIKE 'net%')"
      ]
    ]
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the biographical data of the students who never had a detention or student loan .",
    "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
    "infer_predictions": [
      [
        "SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention UNION SELECT student_id FROM student_loans)",
        "SELECT bio_data FROM students s WHERE NOT EXISTS (SELECT 1 FROM detention d WHERE s.student_id = d.student_id) AND NOT EXISTS (SELECT 1 FROM student_loans l WHERE s.student_id = l.student_id)",
        "SELECT s.bio_data FROM students s LEFT JOIN detention d ON s.student_id = d.student_id LEFT JOIN student_loans l ON s.student_id = l.student_id WHERE d.student_id IS NULL AND l.student_id IS NULL",
        "SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention UNION ALL SELECT student_id FROM student_loans)",
        "SELECT s.bio_data FROM students s WHERE NOT EXISTS (SELECT NULL FROM detention d WHERE d.student_id = s.student_id) AND NOT EXISTS (SELECT NULL FROM student_loans l WHERE l.student_id = s.student_id)",
        "SELECT s.bio_data FROM students s WHERE s.student_id NOT IN (SELECT student_id FROM detention) AND s.student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT DISTINCT s.bio_data FROM students s LEFT JOIN detention d ON s.student_id = d.student_id LEFT JOIN student_loans l ON s.student_id = l.student_id WHERE d.student_id IS NULL AND l.student_id IS NULL",
        "SELECT bio_data FROM students WHERE student_id NOT IN (SELECT d.student_id FROM detention d UNION SELECT l.student_id FROM student_loans l)"
      ]
    ]
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students never had a detention or student loan ? Find their biographical data .",
    "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
    "infer_predictions": [
      [
        "SELECT bio_data FROM students WHERE student_id NOT IN (SELECT student_id FROM detention) AND student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT s.bio_data FROM students s LEFT JOIN detention d ON s.student_id = d.student_id LEFT JOIN student_loans sl ON s.student_id = sl.student_id WHERE d.student_id IS NULL AND sl.student_id IS NULL",
        "SELECT bio_data FROM students WHERE NOT EXISTS (SELECT 1 FROM detention WHERE student_id = students.student_id) AND NOT EXISTS (SELECT 1 FROM student_loans WHERE student_id = students.student_id)",
        "SELECT bio_data FROM students s WHERE s.student_id NOT IN (SELECT DISTINCT student_id FROM detention UNION ALL SELECT DISTINCT student_id FROM student_loans)",
        "SELECT DISTINCT s.bio_data FROM students s WHERE s.student_id NOT IN (SELECT student_id FROM detention UNION SELECT student_id FROM student_loans)",
        "SELECT bio_data FROM students EXCEPT SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM detention UNION SELECT student_id FROM student_loans)",
        "SELECT bio_data FROM students s WHERE NOT EXISTS (SELECT NULL FROM detention d WHERE d.student_id = s.student_id) AND NOT EXISTS (SELECT NULL FROM student_loans sl WHERE sl.student_id = s.student_id)",
        "WITH NoDetentionOrLoan AS (SELECT student_id FROM students EXCEPT SELECT student_id FROM detention EXCEPT SELECT student_id FROM student_loans) SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM NoDetentionOrLoan)",
        "SELECT s.bio_data FROM students s WHERE NOT EXISTS (SELECT * FROM detention WHERE student_id = s.student_id) AND NOT EXISTS (SELECT * FROM student_loans WHERE student_id = s.student_id)"
      ]
    ]
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
    "infer_predictions": [
      [
        "SELECT sl.date_of_loan, sl.amount_of_loan FROM student_loans sl JOIN students s ON sl.student_id = s.student_id WHERE sl.student_id IN (SELECT a.student_id FROM achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2)",
        "SELECT sl.amount_of_loan, sl.date_of_loan FROM student_loans sl WHERE EXISTS (SELECT 1 FROM achievements a WHERE a.student_id = sl.student_id GROUP BY a.student_id HAVING COUNT(a.achievement_id) > 1)",
        "SELECT loan.amount_of_loan, loan.date_of_loan FROM student_loans loan WHERE loan.student_id IN (SELECT ach.student_id FROM achievements ach GROUP BY ach.student_id HAVING COUNT(ach.achievement_id) >= 2)",
        "SELECT dl.amount_of_loan, dl.date_of_loan FROM student_loans dl INNER JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) achiev ON achiev.student_id = dl.student_id",
        "SELECT date_of_loan, amount_of_loan FROM student_loans WHERE student_id IN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(*) > 1)",
        "SELECT f.amount_of_loan, f.date_of_loan FROM student_loans f JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) q ON f.student_id = q.student_id",
        "SELECT distinct result.amount_of_loan, result.date_of_loan FROM (SELECT l.student_id, l.date_of_loan, l.amount_of_loan FROM student_loans l JOIN achievements a ON l.student_id = a.student_id) result GROUP BY result.student_id HAVING COUNT(result.student_id) > 1",
        "SELECT dt.date_of_loan, dt.amount_of_loan FROM student_loans dt JOIN (SELECT achi.student_id FROM achievements achi GROUP BY achi.student_id HAVING COUNT(achi.achievement_id) > 1) studs_achi ON dt.student_id = studs_achi.student_id",
        "SELECT s_loans.amount_of_loan, s_loans.date_of_loan FROM student_loans AS s_loans INNER JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(*) >= 2) achievs ON s_loans.student_id = achievs.student_id",
        "SELECT amount_of_loan, date_of_loan FROM student_loans WHERE student_id IN (SELECT stu_id FROM (SELECT student_id AS stu_id, COUNT(*) AS c FROM achievements GROUP BY student_id) WHERE c >= 2)"
      ]
    ]
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the amount and date of loan for the students who have two or more achievements.",
    "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
    "infer_predictions": [
      [
        "SELECT amount_of_loan, date_of_loan FROM student_loans WHERE student_id IN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
        "SELECT sl.amount_of_loan, sl.date_of_loan FROM student_loans sl JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(*) >= 2) a ON sl.student_id = a.student_id",
        "SELECT s_l.amount_of_loan, s_l.date_of_loan FROM student_loans s_l WHERE EXISTS (SELECT 1 FROM achievements a WHERE a.student_id = s_l.student_id GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2)",
        "SELECT al.amount_of_loan, al.date_of_loan FROM student_loans al INNER JOIN achievements ac ON al.student_id = ac.student_id GROUP BY ac.student_id HAVING COUNT(ac.achievement_id) >= 2",
        "SELECT amount_of_loan, date_of_loan FROM student_loans SL WHERE SL.student_id IN (SELECT achievements.student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2)",
        "SELECT sl.amount_of_loan, sl.date_of_loan FROM student_loans sl WHERE sl.student_id IN (SELECT sts.student_id FROM achievements sts GROUP BY sts.student_id HAVING COUNT(sts.achievement_id) >= 2)",
        "SELECT student_loans.amount_of_loan, student_loans.date_of_loan FROM student_loans JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) qualifying_students ON student_loans.student_id = qualifying_students.student_id",
        "SELECT sl.amount_of_loan, sl.date_of_loan FROM student_loans sl WHERE EXISTS (SELECT 1 FROM achievements ac WHERE sl.student_id = ac.student_id GROUP BY ac.student_id HAVING COUNT(ac.achievement_id) >= 2)"
      ]
    ]
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the detail and id of the teacher who teaches the most courses.",
    "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id = (SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1)",
        "SELECT T.teacher_details, T.teacher_id FROM teachers T JOIN classes C ON T.teacher_id = C.teacher_id GROUP BY C.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1",
        "SELECT T.teacher_details, T.teacher_id FROM teachers T WHERE T.teacher_id = (SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes GROUP BY teacher_id HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM classes GROUP BY teacher_id)))",
        "SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id = (SELECT C.teacher_id FROM classes C GROUP BY C.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1)",
        "SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1)",
        "SELECT teacher_id, teacher_details FROM (SELECT teachers.teacher_id, teachers.teacher_details, COUNT(classes.class_id) AS course_count FROM teachers LEFT JOIN classes ON teachers.teacher_id = classes.teacher_id GROUP BY teachers.teacher_id ORDER BY course_count DESC LIMIT 1)",
        "SELECT T.teacher_details, T.teacher_id FROM teachers T JOIN (SELECT teacher_id, COUNT(*) AS num_courses FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1) C ON T.teacher_id = C.teacher_id"
      ]
    ]
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT T.teacher_details, T.teacher_id FROM teachers T JOIN classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(DISTINCT C.class_id) DESC LIMIT 1",
        "SELECT teacher_details, teacher_id FROM teachers WHERE teacher_id = (SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1)",
        "SELECT t1.teacher_details, t1.teacher_id FROM teachers t1 WHERE t1.teacher_id = (SELECT t2.teacher_id FROM classes t2 GROUP BY t2.teacher_id HAVING COUNT(t2.class_id) = (SELECT MAX(class_count) FROM (SELECT COUNT(class_id) AS class_count FROM classes GROUP BY teacher_id)))",
        "SELECT t.teacher_details, t.teacher_id FROM teachers t INNER JOIN (SELECT teacher_id, COUNT(*) AS total FROM classes GROUP BY teacher_id ORDER BY total DESC LIMIT 1) tc ON t.teacher_id = tc.teacher_id",
        "SELECT t.teacher_details, t.teacher_id FROM ( SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1) top_teacher JOIN teachers t ON top_teacher.teacher_id = t.teacher_id",
        "SELECT t.teacher_details, t.teacher_id FROM (SELECT c.teacher_id AS tid, COUNT(*) AS num_classes FROM classes c GROUP BY c.teacher_id ORDER BY num_classes DESC LIMIT 1) AS most_classes JOIN teachers t ON most_classes.tid = t.teacher_id",
        "SELECT teachers.teacher_details, teachers.teacher_id FROM teachers JOIN (SELECT teacher_id FROM classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1) top_c ON teachers.teacher_id = top_c.teacher_id",
        "SELECT t.teacher_details, t.teacher_id FROM classes c JOIN teachers t ON c.teacher_id = t.teacher_id GROUP BY c.teacher_id HAVING COUNT(c.class_id) = (SELECT MAX(total_classes) FROM (SELECT teacher_id, COUNT(class_id) AS total_classes FROM classes GROUP BY teacher_id) sub)",
        "SELECT A.teacher_details, A.teacher_id FROM (SELECT T.teacher_details, C.teacher_id FROM teachers T JOIN classes C ON T.teacher_id = C.teacher_id GROUP BY T.teacher_id ORDER BY COUNT(C.class_id) DESC LIMIT 1) A"
      ]
    ]
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the distinct descriptions of all the detentions which have ever happened?",
    "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
    "infer_predictions": [
      [
        "SELECT DISTINCT rt.detention_type_description FROM detention d JOIN ref_detention_type rt ON d.detention_type_code = rt.detention_type_code",
        "SELECT DISTINCT detention_type_description FROM ref_detention_type WHERE detention_type_code IN (SELECT DISTINCT detention_type_code FROM detention)",
        "SELECT DISTINCT d_type.detention_type_description FROM ref_detention_type d_type INNER JOIN detention d ON d_type.detention_type_code = d.detention_type_code",
        "SELECT DISTINCT description.detention_type_description FROM ref_detention_type description, detention WHERE description.detention_type_code = detention.detention_type_code",
        "SELECT ref_detention_type.detention_type_description FROM ref_detention_type WHERE EXISTS (SELECT 1 FROM detention WHERE detention.detention_type_code = ref_detention_type.detention_type_code)",
        "SELECT DISTINCT dt.detention_type_description FROM detention d, ref_detention_type dt WHERE d.detention_type_code = dt.detention_type_code",
        "SELECT DISTINCT detention_type_description FROM ref_detention_type dt WHERE detention_type_code IN (SELECT detention_type_code FROM detention d WHERE d.detention_type_code = dt.detention_type_code)",
        "SELECT DISTINCT type_description.detention_type_description FROM ref_detention_type AS type_description JOIN detention AS det ON type_description.detention_type_code = det.detention_type_code",
        "SELECT DISTINCT description FROM (SELECT detention_type_description AS description FROM ref_detention_type d_type JOIN detention d ON d_type.detention_type_code = d.detention_type_code)",
        "SELECT DISTINCT desc_table.detention_type_description FROM ref_detention_type AS desc_table INNER JOIN (SELECT DISTINCT detention_type_code FROM detention) AS used_codes ON desc_table.detention_type_code = used_codes.detention_type_code"
      ]
    ]
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Return the distinct descriptions of all the detentions that have happened.",
    "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
    "infer_predictions": [
      [
        "SELECT DISTINCT ref_detention_type.detention_type_description FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code",
        "SELECT DISTINCT dt.detention_type_description FROM detention d INNER JOIN ref_detention_type dt ON d.detention_type_code = dt.detention_type_code",
        "SELECT DISTINCT description.detention_type_description FROM detention, ref_detention_type AS description WHERE detention.detention_type_code = description.detention_type_code",
        "SELECT DISTINCT rdt.detention_type_description FROM ref_detention_type rdt WHERE rdt.detention_type_code IN (SELECT detention_type_code FROM detention)",
        "SELECT DISTINCT detention_type_description FROM ref_detention_type WHERE detention_type_code IN (SELECT detention_type_code FROM detention)",
        "SELECT DISTINCT ref_detention_type.detention_type_description FROM ref_detention_type, detention WHERE ref_detention_type.detention_type_code = detention.detention_type_code",
        "SELECT DISTINCT dt_description.detention_type_description FROM detention det JOIN ref_detention_type dt_description ON det.detention_type_code = dt_description.detention_type_code",
        "SELECT DISTINCT detention_type_description FROM ref_detention_type INNER JOIN detention ON ref_detention_type.detention_type_code = detention.detention_type_code",
        "SELECT DISTINCT det_type_desc.detention_type_description FROM ref_detention_type det_type_desc INNER JOIN detention det ON det_type_desc.detention_type_code = det.detention_type_code"
      ]
    ]
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the personal details and the address type descriptions of all the students.",
    "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
    "infer_predictions": [
      [
        "SELECT s.student_details, r.address_type_description FROM students s JOIN students_addresses sa ON s.student_id = sa.student_id JOIN ref_address_types r ON sa.address_type_code = r.address_type_code",
        "SELECT student_details, address_type_description FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code",
        "SELECT sts.student_details, rat.address_type_description FROM students sts INNER JOIN students_addresses sa ON sts.student_id = sa.student_id INNER JOIN ref_address_types rat ON sa.address_type_code = rat.address_type_code",
        "SELECT A.student_details, B.address_type_description FROM students AS A INNER JOIN students_addresses AS C ON A.student_id = C.student_id INNER JOIN ref_address_types AS B ON C.address_type_code = B.address_type_code",
        "SELECT student_details, address_type_description FROM students, students_addresses, ref_address_types WHERE students.student_id = students_addresses.student_id AND students_addresses.address_type_code = ref_address_types.address_type_code",
        "SELECT stus.student_details, addt.address_type_description FROM students stus, students_addresses addrs, ref_address_types addt WHERE stus.student_id = addrs.student_id AND addrs.address_type_code = addt.address_type_code",
        "SELECT st.student_details as 'Student Details', rt.address_type_description as 'Address Discription' FROM students AS st LEFT JOIN students_addresses AS sat ON st.student_id = sat.student_id LEFT JOIN ref_address_types AS rt ON sat.address_type_code = rt.address_type_code"
      ]
    ]
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the personal details and the address type descriptions of each student?",
    "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
    "infer_predictions": [
      [
        "SELECT s.student_details, r.address_type_description FROM students s JOIN students_addresses sa ON s.student_id = sa.student_id JOIN ref_address_types r ON sa.address_type_code = r.address_type_code",
        "SELECT student_details, address_type_description FROM students JOIN students_addresses USING (student_id) JOIN ref_address_types USING (address_type_code)",
        "SELECT student_details, address_type_description FROM students, students_addresses, ref_address_types WHERE students.student_id = students_addresses.student_id AND students_addresses.address_type_code = ref_address_types.address_type_code",
        "SELECT SD.student_details, ATD.address_type_description FROM students AS SD JOIN students_addresses AS SA ON SD.student_id = SA.student_id JOIN ref_address_types AS ATD ON SA.address_type_code = ATD.address_type_code",
        "SELECT student_details, address_type_description FROM students NATURAL JOIN students_addresses NATURAL JOIN ref_address_types",
        "SELECT s.student_details, r.address_type_description FROM students s, students_addresses sa, ref_address_types r WHERE s.student_id = sa.student_id AND sa.address_type_code = r.address_type_code",
        "SELECT distinct s.student_details, r.address_type_description FROM students s INNER JOIN students_addresses sa ON s.student_id = sa.student_id INNER JOIN ref_address_types r ON sa.address_type_code = r.address_type_code",
        "SELECT student_details, address_type_description FROM students INNER JOIN (students_addresses JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code) ON students.student_id = students_addresses.student_id",
        "SELECT S1.student_details, R1.address_type_description FROM students S1 JOIN students_addresses SA1 ON S1.student_id = SA1.student_id JOIN ref_address_types R1 ON SA1.address_type_code = R1.address_type_code",
        "SELECT students.student_details AS 'Student Details', ref_address_types.address_type_description AS 'Address Type Description' FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code"
      ]
    ]
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the the address details and the biographical information of the students.",
    "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "infer_predictions": [
      [
        "SELECT a.address_details, s.bio_data FROM addresses a JOIN students_addresses sa ON a.address_id = sa.address_id JOIN students s ON sa.student_id = s.student_id",
        "SELECT address_details, bio_data FROM addresses INNER JOIN students_addresses ON addresses.address_id = students_addresses.address_id INNER JOIN students ON students_addresses.student_id = students.student_id",
        "SELECT addresses.address_details, students.bio_data FROM addresses, students_addresses, students WHERE addresses.address_id = students_addresses.address_id AND students_addresses.student_id = students.student_id",
        "SELECT DISTINCT ad.address_details, st.bio_data FROM addresses ad JOIN students_addresses sa ON ad.address_id = sa.address_id JOIN students st ON sa.student_id = st.student_id",
        "SELECT ad.address_details, sd.bio_data FROM addresses AS ad INNER JOIN students_addresses AS sa ON ad.address_id = sa.address_id INNER JOIN students AS sd ON sa.student_id = sd.student_id",
        "SELECT addr.address_details, stud.bio_data FROM addresses addr, students_addresses st_addrs, students stud WHERE addr.address_id = st_addrs.address_id AND st_addrs.student_id = stud.student_id",
        "SELECT address_details, bio_data FROM addresses a, students_addresses sa, students s WHERE a.address_id = sa.address_id AND sa.student_id = s.student_id",
        "SELECT ad.address_details AS Address, st.bio_data AS BioData FROM addresses ad JOIN students_addresses sta ON ad.address_id = sta.address_id JOIN students st ON st.student_id = sta.student_id",
        "SELECT DISTINCT a.address_details, s.bio_data FROM addresses a INNER JOIN students_addresses sa INNER JOIN students s ON a.address_id = sa.address_id AND sa.student_id = s.student_id",
        "SELECT a.address_details, st.bio_data FROM addresses a JOIN students_addresses sta ON sta.address_id = a.address_id LEFT JOIN students st ON st.student_id = sta.student_id"
      ]
    ]
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the address details and biographical information of each student?",
    "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "infer_predictions": [
      [
        "SELECT bio_data, address_details FROM students JOIN students_addresses ON students.student_id = students_addresses.student_id JOIN addresses ON students_addresses.address_id = addresses.address_id",
        "SELECT S.bio_data, A.address_details FROM students S INNER JOIN students_addresses SA ON S.student_id = SA.student_id INNER JOIN addresses A ON SA.address_id = A.address_id",
        "SELECT bio_data, address_details FROM students, addresses, students_addresses WHERE students.student_id = students_addresses.student_id AND students_addresses.address_id = addresses.address_id",
        "SELECT bio_data, address_details FROM students CROSS JOIN students_addresses ON students.student_id = students_addresses.student_id CROSS JOIN addresses ON students_addresses.address_id = addresses.address_id",
        "SELECT S.bio_data, A.address_details FROM students S, addresses A, students_addresses SA WHERE S.student_id = SA.student_id AND A.address_id = SA.address_id",
        "SELECT (SELECT bio_data FROM students WHERE student_id = SA.student_id) AS bio_data, (SELECT address_details FROM addresses WHERE address_id = SA.address_id) AS address_details FROM students_addresses SA",
        "SELECT (SELECT bio_data FROM students S WHERE S.student_id = SA.student_id) AS bio, (SELECT address_details FROM addresses A WHERE A.address_id = SA.address_id) AS addr FROM students_addresses SA",
        "SELECT bio_data, address_details FROM students S LEFT JOIN students_addresses SA ON S.student_id = SA.student_id LEFT JOIN addresses A ON SA.address_id = A.address_id",
        "SELECT students.bio_data, addresses.address_details FROM students INNER JOIN students_addresses ON students.student_id = students_addresses.student_id INNER JOIN addresses ON students_addresses.address_id = addresses.address_id"
      ]
    ]
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the biographical data and the date of the transcript of all the students.",
    "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT students.bio_data, transcripts.date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id",
        "SELECT s.bio_data, t.date_of_transcript FROM students s, transcripts t WHERE s.student_id = t.student_id",
        "SELECT bio_data, date_of_transcript FROM students INNER JOIN transcripts USING(student_id)",
        "SELECT s.bio_data, t.date_of_transcript FROM students AS s INNER JOIN transcripts AS t ON s.student_id = t.student_id",
        "SELECT s.bio_data, t.date_of_transcript FROM students s JOIN transcripts t ON s.student_id = t.student_id",
        "SELECT students.bio_data, transcripts.date_of_transcript FROM students, transcripts WHERE students.student_id = transcripts.student_id",
        "SELECT s.bio_data, t.date_of_transcript FROM students s CROSS JOIN transcripts t WHERE s.student_id = t.student_id",
        "SELECT bio_data, date_of_transcript FROM students NATURAL JOIN transcripts",
        "SELECT s.bio_data, t.date_of_transcript FROM students s LEFT JOIN transcripts t ON s.student_id = t.student_id",
        "SELECT bio_data, date_of_transcript FROM students INNER JOIN transcripts ON students.student_id = transcripts.student_id"
      ]
    ]
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the biographical data and the date of transcript issuance of each student?",
    "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT bio_data, date_of_transcript FROM students JOIN transcripts ON students.student_id = transcripts.student_id",
        "SELECT s.bio_data, t.date_of_transcript FROM students s INNER JOIN transcripts t ON s.student_id = t.student_id",
        "SELECT students.bio_data, transcripts.date_of_transcript FROM students, transcripts WHERE students.student_id = transcripts.student_id",
        "SELECT s.bio_data, t.date_of_transcript FROM students s JOIN transcripts t ON s.student_id = t.student_id",
        "SELECT bio_data, date_of_transcript FROM students INNER JOIN transcripts USING(student_id)",
        "SELECT s.bio_data, t.date_of_transcript FROM students s CROSS JOIN transcripts t WHERE s.student_id = t.student_id",
        "SELECT S.bio_data, T.date_of_transcript FROM students AS S, transcripts AS T WHERE S.student_id = T.student_id",
        "SELECT bio_data, date_of_transcript FROM students NATURAL JOIN transcripts",
        "SELECT b.bio_data, c.date_of_transcript FROM students b JOIN transcripts c ON b.student_id = c.student_id",
        "SELECT students.bio_data AS BioData, transcripts.date_of_transcript AS IssuanceDate FROM students LEFT JOIN transcripts ON students.student_id = transcripts.student_id"
      ]
    ]
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT bm.student_id) AS student_count, bm.behaviour_monitoring_details FROM behaviour_monitoring bm GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT(bm.student_id) DESC LIMIT 1",
        "SELECT COUNT(DISTINCT bm.student_id) AS NumberOfStudents, bm.behaviour_monitoring_details FROM behaviour_monitoring bm WHERE bm.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY bm.behaviour_monitoring_details",
        "WITH MostCommon AS (SELECT behaviour_monitoring_details, COUNT(student_id) AS count_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY count_details DESC LIMIT 1) SELECT COUNT(*) AS TotalStudents, behaviour_monitoring_details FROM behaviour_monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM MostCommon) GROUP BY behaviour_monitoring_details",
        "WITH PopularResult AS (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1) SELECT COUNT(DISTINCT bm.student_id) AS StudentCount, bm.behaviour_monitoring_details FROM behaviour_monitoring bm JOIN PopularResult pr ON bm.behaviour_monitoring_details = pr.behaviour_monitoring_details GROUP BY bm.behaviour_monitoring_details",
        "SELECT COUNT(*) AS StudentCount, sub.behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details, COUNT(student_id) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1) sub INNER JOIN behaviour_monitoring b ON b.behaviour_monitoring_details = sub.behaviour_monitoring_details GROUP BY sub.behaviour_monitoring_details",
        "SELECT bm.behaviour_monitoring_details, COUNT(DISTINCT bm.student_id) FROM behaviour_monitoring bm WHERE bm.behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1) GROUP BY bm.behaviour_monitoring_details",
        "SELECT ( SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1), COUNT(DISTINCT student_id) FROM behaviour_monitoring WHERE behaviour_monitoring_details = ( SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(student_id) DESC LIMIT 1)",
        "WITH ResultDetails AS (SELECT behaviour_monitoring_details, COUNT(*) as ResultCount FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) SELECT MAX(ResultDetails.ResultCount), ResultDetails.behaviour_monitoring_details FROM ResultDetails GROUP BY ResultDetails.behaviour_monitoring_details ORDER by ResultDetails.ResultCount DESC"
      ]
    ]
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT behaviour_monitoring_details, COUNT(*) AS count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1",
        "SELECT COUNT(behaviour_monitoring_details) AS total, behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY total DESC LIMIT 1",
        "SELECT b.behaviour_monitoring_details, COUNT(*) AS occurrence FROM behaviour_monitoring b GROUP BY b.behaviour_monitoring_details ORDER BY occurrence DESC LIMIT 1",
        "SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1",
        "SELECT MAX(r.c) as count, r.behaviour_monitoring_details FROM (SELECT behaviour_monitoring_details, COUNT(*) as c FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) r",
        "SELECT (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_detail, (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) tally) AS max_count",
        "WITH RankedResults AS (SELECT behaviour_monitoring_details, RANK() OVER (ORDER BY COUNT(behaviour_monitoring_details) DESC) AS rank FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) SELECT behaviour_monitoring_details, COUNT(behaviour_monitoring_details) FROM RankedResults WHERE rank = 1",
        "SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
    "infer_predictions": [
      [
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT b.student_id FROM behaviour_monitoring b GROUP BY b.behaviour_monitoring_details HAVING COUNT(b.behaviour_monitoring_details) = 3 AND COUNT(b.behaviour_monitoring_details) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) as cnt FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) c))",
        "SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 AND COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) temp))",
        "SELECT DISTINCT s.bio_data, s.student_details FROM students s WHERE EXISTS (SELECT 1 FROM behaviour_monitoring b WHERE s.student_id = b.student_id GROUP BY b.behaviour_monitoring_details HAVING COUNT(*) = 3 AND COUNT(*) = (SELECT MAX(num) FROM (SELECT behaviour_monitoring_details, COUNT(*) as num FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) subgroup))",
        "SELECT s.bio_data, s.student_details FROM (SELECT student_id, COUNT(*) as total FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING total = 3 AND total = (SELECT COUNT(*) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)) a JOIN students s ON s.student_id = a.student_id",
        "SELECT DISTINCT s.bio_data, s.student_details FROM behaviour_monitoring b JOIN students s ON s.student_id = b.student_id WHERE (SELECT COUNT(*) FROM behaviour_monitoring bm WHERE bm.behaviour_monitoring_details = b.behaviour_monitoring_details) = 3 AND (SELECT COUNT(*) FROM behaviour_monitoring bm WHERE bm.behaviour_monitoring_details = b.behaviour_monitoring_details) = (SELECT COUNT(*) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT b.student_id FROM behaviour_monitoring b JOIN (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = 3 AND COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) most_common)) most_common_b ON b.behaviour_monitoring_details = most_common_b.behaviour_monitoring_details)",
        "SELECT s.bio_data, s.student_details FROM students s WHERE EXISTS (SELECT b.student_id FROM behaviour_monitoring b WHERE s.student_id = b.student_id GROUP BY b.behaviour_monitoring_details HAVING COUNT(b.behaviour_monitoring_details) = 3 AND COUNT(b.behaviour_monitoring_details) = (SELECT MAX(c.records) FROM (SELECT behaviour_monitoring_details, COUNT(*) as records FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) c))",
        "SELECT s.bio_data, s.student_details FROM students s JOIN behaviour_monitoring b ON s.student_id = b.student_id GROUP BY b.behaviour_monitoring_details HAVING COUNT(DISTINCT b.student_id) = 3 AND COUNT(DISTINCT b.student_id) = (SELECT MAX(c.count) FROM (SELECT COUNT(DISTINCT student_id) as count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) c)"
      ]
    ]
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
    "infer_predictions": [
      [
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT b.student_id FROM behaviour_monitoring b GROUP BY b.student_id HAVING COUNT(b.student_id) = 3 AND COUNT(*) = (SELECT COUNT(*) FROM (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(student_id) IN (3)) AS x))",
        "SELECT s.bio_data, s.student_details FROM students s JOIN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(student_id) = 3) b ON s.student_id = b.student_id WHERE (SELECT COUNT(*) FROM behaviour_monitoring WHERE student_id = b.student_id) = (SELECT MAX(count) FROM (SELECT student_id, COUNT(*) as count FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(student_id) = 3) GROUP BY student_id)",
        "WITH FilteredMonitor AS (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(*) = 3), MaxCountMonitor AS (SELECT student_id, COUNT(student_id) AS cnt FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(student_id) = 3 ORDER BY cnt DESC LIMIT 1) SELECT bio_data, student_details FROM students JOIN FilteredMonitor ON students.student_id = FilteredMonitor.student_id JOIN MaxCountMonitor ON FilteredMonitor.student_id = MaxCountMonitor.student_id",
        "SELECT s.bio_data, s.student_details FROM students s WHERE EXISTS (SELECT 1 FROM behaviour_monitoring b WHERE b.student_id = s.student_id GROUP BY b.student_id HAVING COUNT(*) = 3 AND COUNT(*) = (SELECT MAX(cnt) FROM (SELECT student_id, COUNT(*) AS cnt FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(*) = 3) tmp))",
        "WITH StudentCount AS (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(*) = 3), MaxStudentCount AS (SELECT student_id FROM StudentCount GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM StudentCount)) SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM MaxStudentCount)",
        "SELECT s.bio_data, s.student_details FROM students s INNER JOIN (SELECT b.student_id FROM behaviour_monitoring b WHERE EXISTS (SELECT NULL FROM behaviour_monitoring WHERE student_id = b.student_id GROUP BY student_id HAVING COUNT(student_id) = 3) AND (SELECT COUNT(*) FROM (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING COUNT(student_id) = 3) k) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM behaviour_monitoring GROUP BY student_id) a) GROUP BY b.student_id) bm ON s.student_id = bm.student_id",
        "SELECT s.bio_data, s.student_details FROM students s JOIN behaviour_monitoring b ON s.student_id = b.student_id GROUP BY s.student_id HAVING COUNT(b.student_id) = 3 AND COUNT(*) = (SELECT MAX(counts.count) FROM (SELECT COUNT(*) AS count, student_id FROM behaviour_monitoring GROUP BY student_id) counts)",
        "SELECT DISTINCT s.bio_data, s.student_details FROM students s, behaviour_monitoring b WHERE s.student_id = b.student_id AND (SELECT COUNT(*) FROM behaviour_monitoring b1 WHERE b1.student_id = b.student_id) = 3 AND (SELECT COUNT(*) FROM behaviour_monitoring b2 WHERE b2.student_id = b.student_id) = (SELECT MAX(a.c) FROM (SELECT COUNT(*) AS c, student_id FROM behaviour_monitoring GROUP BY student_id) a)"
      ]
    ]
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s JOIN behaviour_monitoring bm ON s.student_id = bm.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1 AND bm.behaviour_monitoring_details = (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING MIN(behaviour_monitoring_details) = MAX(behaviour_monitoring_details) AND MIN(behaviour_monitoring_details) = (SELECT behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
        "SELECT s.bio_data FROM students s WHERE EXISTS (SELECT 1 FROM behaviour_monitoring bm WHERE s.student_id = bm.student_id GROUP BY bm.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1 AND MAX(bm.behaviour_monitoring_details) = (SELECT MAX(bm2.behaviour_monitoring_details) FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(bm2.student_id) DESC LIMIT 1))",
        "SELECT bio_data FROM students s WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY student_id HAVING SUM(CASE WHEN behaviour_monitoring_details = (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(bm2.behaviour_monitoring_details) DESC LIMIT 1) THEN 1 ELSE 0 END) = COUNT(*))",
        "SELECT s.bio_data FROM students s JOIN (SELECT student_id, behaviour_monitoring_details FROM behaviour_monitoring GROUP BY student_id, behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM behaviour_monitoring bm2 GROUP BY bm2.student_id ORDER BY COUNT(*) DESC LIMIT 1)) bm ON s.student_id = bm.student_id",
        "SELECT s.bio_data FROM students s WHERE NOT EXISTS (SELECT * FROM behaviour_monitoring bm1 WHERE s.student_id = bm1.student_id AND bm1.behaviour_monitoring_details != (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))",
        "SELECT s.bio_data FROM (SELECT * FROM students) s JOIN (SELECT * FROM behaviour_monitoring) bm ON s.student_id = bm.student_id GROUP BY s.student_id HAVING SUM(CASE WHEN bm.behaviour_monitoring_details = (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1) THEN 1 ELSE -1 END) > 0",
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT bm.student_id FROM behaviour_monitoring bm GROUP BY bm.student_id HAVING MIN(bm.behaviour_monitoring_details) AND bm.behaviour_monitoring_details = (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details HAVING COUNT(*) = MAX((SELECT COUNT(*) FROM behaviour_monitoring bm3 GROUP BY bm3.behaviour_monitoring_details))))",
        "SELECT s.bio_data FROM students s, behaviour_monitoring bm WHERE s.student_id = bm.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1 AND (bm.behaviour_monitoring_details) = (SELECT bm2.behaviour_monitoring_details FROM behaviour_monitoring bm2 GROUP BY bm2.behaviour_monitoring_details ORDER BY COUNT(bm2.behaviour_monitoring_details) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "gold": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT bm.student_id FROM behaviour_monitoring bm GROUP BY bm.behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(sub.cnt) FROM (SELECT COUNT(*) AS cnt FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) sub))",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT bio_data FROM students WHERE EXISTS (SELECT 1 FROM behaviour_monitoring WHERE students.student_id = behaviour_monitoring.student_id GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_details) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) sub))",
        "SELECT s.bio_data FROM students s JOIN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_id) = (SELECT MAX(count) FROM (SELECT COUNT(behaviour_monitoring_id) AS count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) as counts)) bm ON s.student_id = bm.student_id",
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM (SELECT student_id, behaviour_monitoring_details FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_details) DESC LIMIT 1) a)",
        "SELECT s.bio_data FROM students s JOIN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) b)) c ON s.student_id = c.student_id",
        "SELECT s.bio_data FROM students s, (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(*) = (SELECT COUNT(*) FROM behaviour_monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1)) t WHERE s.student_id = t.student_id",
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT bm.student_id FROM behaviour_monitoring bm GROUP BY bm.behaviour_monitoring_details ORDER BY COUNT(bm.behaviour_monitoring_id) DESC LIMIT 1)",
        "SELECT s.bio_data FROM students s INNER JOIN (SELECT student_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_details HAVING COUNT(behaviour_monitoring_details) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM behaviour_monitoring GROUP BY behaviour_monitoring_details) counts)) bm ON s.student_id = bm.student_id"
      ]
    ]
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students have gone through any event? List the students' biographical data and event date.",
    "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT s.bio_data, se.event_date FROM students AS s JOIN student_events AS se ON s.student_id = se.student_id",
        "SELECT bio_data, event_date FROM students, student_events WHERE students.student_id = student_events.student_id",
        "SELECT s.bio_data, se.event_date FROM students s INNER JOIN student_events se ON s.student_id = se.student_id",
        "SELECT DISTINCT s.bio_data, se.event_date FROM students s, student_events se WHERE s.student_id = se.student_id",
        "SELECT s.bio_data, se.event_date FROM students s, student_events se WHERE s.student_id = se.student_id GROUP BY s.student_id, se.event_date",
        "SELECT bio_data, event_date FROM students JOIN student_events USING(student_id)",
        "SELECT s.bio_data, se.event_date FROM students s INNER JOIN student_events se WHERE s.student_id = se.student_id",
        "SELECT s.bio_data, se.event_date FROM students AS s, student_events AS se WHERE s.student_id = se.student_id AND se.event_type_code IS NOT NULL",
        "SELECT s.bio_data, se.event_date FROM students s LEFT JOIN student_events se ON s.student_id = se.student_id WHERE se.student_id IS NOT NULL",
        "SELECT s.bio_data, MAX(se.event_date) FROM students s JOIN student_events se ON s.student_id = se.student_id GROUP BY s.bio_data"
      ]
    ]
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the biographical data and event date for students who participated in any events.",
    "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT students.bio_data, student_events.event_date FROM students JOIN student_events ON students.student_id = student_events.student_id",
        "SELECT s.bio_data, se.event_date FROM students s INNER JOIN student_events se ON s.student_id = se.student_id",
        "SELECT bio_data, event_date FROM students, student_events WHERE students.student_id = student_events.student_id",
        "SELECT bio_data, event_date FROM students INNER JOIN student_events USING (student_id)",
        "SELECT S.bio_data, SE.event_date FROM students AS S, student_events AS SE WHERE S.student_id = SE.student_id",
        "SELECT DISTINCT s.bio_data, se.event_date FROM students s, student_events se WHERE s.student_id = se.student_id",
        "SELECT bio_data, event_date FROM students JOIN student_events ON students.student_id = student_events.student_id GROUP BY students.student_id, student_events.event_date",
        "SELECT bio_data, event_date FROM students a JOIN student_events b ON a.student_id = b.student_id WHERE EXISTS (SELECT student_id FROM student_events WHERE student_id = a.student_id)",
        "SELECT * FROM (SELECT students.bio_data, student_events.event_date FROM students JOIN student_events ON students.student_id = student_events.student_id) AS student_event_info"
      ]
    ]
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT student_id), E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code WHERE E.event_type_code = (SELECT event_type_code FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY E.event_type_code, R.event_type_description",
        "SELECT COUNT(DISTINCT E.student_id) AS student_count, E.event_type_code, T.event_type_description FROM student_events E INNER JOIN ref_event_types T ON E.event_type_code = T.event_type_code GROUP BY E.event_type_code, T.event_type_description HAVING E.event_type_code = (SELECT event_type_code FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH MostFrequentEventType AS (SELECT event_type_code FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1) SELECT COUNT(DISTINCT SE.student_id), SE.event_type_code, RET.event_type_description FROM student_events SE JOIN ref_event_types RET ON SE.event_type_code = RET.event_type_code WHERE SE.event_type_code IN (SELECT event_type_code FROM MostFrequentEventType) GROUP BY SE.event_type_code, RET.event_type_description",
        "SELECT COUNT(DISTINCT student_id), event_type_code, event_type_description FROM (SELECT student_id, E.event_type_code, R.event_type_description FROM student_events E JOIN ref_event_types R ON E.event_type_code = R.event_type_code) AS JoinedTable WHERE event_type_code = (SELECT event_type_code FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY event_type_code, event_type_description",
        "SELECT COUNT(DISTINCT student_id), sub.event_type_code, ref_event_types.event_type_description FROM student_events JOIN (SELECT event_type_code FROM student_events GROUP BY event_type_code ORDER BY COUNT(*) DESC LIMIT 1) sub ON student_events.event_type_code = sub.event_type_code JOIN ref_event_types ON student_events.event_type_code = ref_event_types.event_type_code GROUP BY sub.event_type_code, ref_event_types.event_type_description"
      ]
    ]
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT sub.event_type_code, e.event_type_description, sub.num_students FROM (SELECT event_type_code, COUNT(DISTINCT student_id) as num_students FROM student_events GROUP BY event_type_code ORDER BY num_students DESC LIMIT 1) sub JOIN ref_event_types e ON sub.event_type_code = e.event_type_code",
        "SELECT e.event_type_description, SE.event_type_code, COUNT(DISTINCT student_id) as num_students FROM student_events SE JOIN ref_event_types e ON SE.event_type_code = e.event_type_code GROUP BY e.event_type_description, SE.event_type_code ORDER BY num_students DESC LIMIT 1",
        "WITH EventCounts AS (SELECT event_type_code, COUNT(DISTINCT student_id) AS num_students FROM student_events GROUP BY event_type_code) SELECT e.event_type_description, EC.event_type_code, EC.num_students FROM EventCounts EC JOIN ref_event_types e ON EC.event_type_code = e.event_type_code ORDER BY EC.num_students DESC LIMIT 1",
        "SELECT * FROM (SELECT ref_event_types.event_type_description, student_events.event_type_code, COUNT(DISTINCT student_events.student_id) AS num_students FROM student_events JOIN ref_event_types ON student_events.event_type_code = ref_event_types.event_type_code GROUP BY student_events.event_type_code, ref_event_types.event_type_description) sub_query ORDER BY num_students DESC LIMIT 1",
        "WITH ParticipantCount AS (SELECT event_type_code, COUNT(DISTINCT student_id) AS TotalParticipants FROM student_events GROUP BY event_type_code) SELECT r.event_type_description, p.event_type_code, p.TotalParticipants FROM ParticipantCount p INNER JOIN ref_event_types r ON p.event_type_code = r.event_type_code ORDER BY TotalParticipants DESC LIMIT 1",
        "SELECT COUNT(DISTINCT student_events.student_id) AS Participants, student_events.event_type_code, ref_event_types.event_type_description FROM student_events LEFT JOIN ref_event_types ON student_events.event_type_code = ref_event_types.event_type_code GROUP BY student_events.event_type_code, ref_event_types.event_type_description ORDER BY Participants DESC LIMIT 1",
        "WITH StudentCounts AS (SELECT event_type_code, COUNT(DISTINCT student_id) AS num_students FROM student_events GROUP BY event_type_code) SELECT e.event_type_description, s.event_type_code, s.num_students FROM StudentCounts s JOIN ref_event_types e ON s.event_type_code = e.event_type_code ORDER BY s.num_students DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How are all the achievements described? List the achievement detail and the type description.",
    "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
    "infer_predictions": [
      [
        "SELECT a.achievement_details, r.achievement_type_description FROM achievements a JOIN ref_achievement_type r ON a.achievement_type_code = r.achievement_type_code",
        "SELECT achievement_details, achievement_type_description FROM achievements INNER JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
        "SELECT achievements.achievement_details, ref_achievement_type.achievement_type_description FROM achievements, ref_achievement_type WHERE achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
        "SELECT a.achievement_details AS detail, r.achievement_type_description AS description FROM achievements a, ref_achievement_type r WHERE a.achievement_type_code = r.achievement_type_code",
        "SELECT detail.achievement_details, type.achievement_type_description FROM achievements AS detail JOIN ref_achievement_type AS type ON detail.achievement_type_code = type.achievement_type_code",
        "SELECT achievement_details, achievement_type_description FROM achievements JOIN ref_achievement_type USING(achievement_type_code)",
        "SELECT a.achievement_details, r.achievement_type_description FROM achievements a INNER JOIN ref_achievement_type r WHERE a.achievement_type_code = r.achievement_type_code",
        "SELECT achievement_details as AD, achievement_type_description as ATD FROM achievements JOIN ref_achievement_type USING (achievement_type_code)"
      ]
    ]
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the achievement detail and the type description of each achievements?",
    "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
    "infer_predictions": [
      [
        "SELECT a.achievement_details, r.achievement_type_description FROM achievements a JOIN ref_achievement_type r ON a.achievement_type_code = r.achievement_type_code",
        "SELECT achievement_details, achievement_type_description FROM achievements INNER JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
        "SELECT a1.achievement_details, r1.achievement_type_description FROM achievements AS a1 INNER JOIN ref_achievement_type AS r1 ON a1.achievement_type_code = r1.achievement_type_code",
        "SELECT a.achievement_details, r.achievement_type_description FROM achievements a, ref_achievement_type r WHERE a.achievement_type_code = r.achievement_type_code",
        "SELECT achievement_details, achievement_type_description FROM achievements a JOIN ref_achievement_type r USING (achievement_type_code)",
        "SELECT ac.achievement_details, rt.achievement_type_description FROM achievements ac LEFT JOIN ref_achievement_type rt ON ac.achievement_type_code = rt.achievement_type_code",
        "SELECT DISTINCT a.achievement_details, r.achievement_type_description FROM achievements a JOIN ref_achievement_type r ON a.achievement_type_code = r.achievement_type_code",
        "SELECT a.achievement_details, r.achievement_type_description FROM achievements a CROSS JOIN ref_achievement_type r ON a.achievement_type_code = r.achievement_type_code",
        "SELECT achievement_details, achievement_type_description FROM achievements, ref_achievement_type WHERE achievements.achievement_type_code = ref_achievement_type.achievement_type_code"
      ]
    ]
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many teachers have taught a student who has not won any achievements?",
    "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t JOIN students s ON t.teacher_id = s.student_id LEFT JOIN achievements a ON s.student_id = a.student_id WHERE a.achievement_id IS NULL",
        "SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN (SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM achievements))",
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t WHERE t.teacher_id IN (SELECT s.student_id FROM students s LEFT JOIN achievements a ON s.student_id = a.student_id WHERE a.achievement_id IS NULL)",
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers AS t INNER JOIN students AS s ON t.teacher_id = s.student_id LEFT OUTER JOIN achievements AS a ON s.student_id = a.student_id WHERE a.student_id IS NULL",
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t WHERE NOT EXISTS (SELECT NULL FROM students s INNER JOIN achievements a ON s.student_id = a.student_id WHERE s.student_id = t.teacher_id)",
        "SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN (SELECT student_id FROM students EXCEPT SELECT student_id FROM achievements)",
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t WHERE EXISTS (SELECT s.student_id FROM students s LEFT JOIN achievements a ON s.student_id = a.student_id WHERE a.achievement_id IS NULL AND s.student_id = t.teacher_id)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT teacher_id FROM teachers WHERE teacher_id IN (SELECT student_id FROM students WHERE student_id NOT IN (SELECT distinct student_id from achievements)))"
      ]
    ]
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Count the number of teachers who have taught students who have never won an achievement.",
    "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id LEFT JOIN achievements a ON c.student_id = a.student_id WHERE a.student_id IS NULL",
        "SELECT COUNT(*) FROM (SELECT DISTINCT teachers.teacher_id FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id LEFT JOIN achievements ON classes.student_id = achievements.student_id WHERE achievements.student_id IS NULL)",
        "SELECT COUNT(DISTINCT teacher_id) FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes LEFT JOIN achievements ON classes.student_id = achievements.student_id WHERE achievements.student_id IS NULL)",
        "SELECT COUNT(teacher_id) FROM (SELECT DISTINCT classes.teacher_id FROM classes LEFT JOIN achievements ON classes.student_id = achievements.student_id GROUP BY classes.teacher_id HAVING SUM(CASE WHEN achievements.achievement_id IS NOT NULL THEN 1 ELSE 0 END) = 0)",
        "WITH NoWins AS (SELECT student_id FROM students EXCEPT SELECT student_id FROM achievements) SELECT COUNT(DISTINCT teachers.teacher_id) FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN NoWins ON classes.student_id = NoWins.student_id",
        "SELECT COUNT(DISTINCT teachers.teacher_id) FROM teachers INNER JOIN classes ON teachers.teacher_id = classes.teacher_id WHERE NOT EXISTS (SELECT 1 FROM achievements WHERE achievements.student_id = classes.student_id)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT t.teacher_id FROM teachers t INNER JOIN classes c ON t.teacher_id = c.teacher_id WHERE NOT EXISTS (SELECT * FROM achievements a WHERE a.student_id = c.student_id))",
        "SELECT COUNT(distinct T.teacher_id) FROM teachers T, classes C WHERE T.teacher_id = C.teacher_id AND C.student_id NOT IN (SELECT student_id FROM achievements)",
        "SELECT COUNT(DISTINCT t.teacher_id) FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT student_id FROM achievements)"
      ]
    ]
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the date of the transcripts and the transcript details.",
    "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
    "infer_predictions": [
      [
        "SELECT date_of_transcript, transcript_details FROM transcripts",
        "SELECT t.date_of_transcript, t.transcript_details FROM transcripts t",
        "SELECT date_of_transcript AS Date, transcript_details AS Details FROM transcripts",
        "SELECT t.date_of_transcript AS Transcript_Date, t.transcript_details AS Transcript_Details FROM transcripts t",
        "SELECT T.date_of_transcript, T.transcript_details FROM transcripts T",
        "SELECT transcripts.date_of_transcript as \"Date of Transcript\", transcripts.transcript_details as \"Details of Transcript\" FROM transcripts"
      ]
    ]
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the date and detail of each transcript?",
    "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
    "infer_predictions": [
      [
        "SELECT date_of_transcript, transcript_details FROM transcripts",
        "SELECT t.date_of_transcript, t.transcript_details FROM transcripts t",
        "SELECT transcripts.date_of_transcript, transcripts.transcript_details FROM transcripts transcripts",
        "SELECT t.date_of_transcript AS Transcript_Date, t.transcript_details AS Transcript_Details FROM transcripts AS t",
        "SELECT transcripts_table.date_of_transcript, transcripts_table.transcript_details FROM transcripts transcripts_table",
        "SELECT DATE(transcripts.date_of_transcript) AS Date, transcripts.transcript_details FROM transcripts"
      ]
    ]
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the achievement type code, achievement details and the date of the achievements.",
    "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
    "infer_predictions": [
      [
        "SELECT achievement_type_code, achievement_details, date_achievement FROM achievements",
        "SELECT a.achievement_type_code AS Code, a.achievement_details AS Details, a.date_achievement AS Date FROM achievements a",
        "SELECT achs.achievement_type_code, achs.achievement_details, achs.date_achievement FROM achievements achs",
        "SELECT ach.achievement_type_code, ach.achievement_details, ach.date_achievement FROM achievements ach WHERE achievement_type_code IN (SELECT achievement_type_code FROM ref_achievement_type)",
        "SELECT achievement_type_code, achievement_details, date_achievement FROM achievements ORDER BY date_achievement",
        "SELECT * FROM (SELECT achievement_type_code, achievement_details, date_achievement FROM achievements) AS subquery"
      ]
    ]
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the type code, details, and date of each achievement?",
    "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
    "infer_predictions": [
      [
        "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM achievements a",
        "SELECT achievement_type_code, achievement_details, date_achievement FROM achievements",
        "SELECT achievements.achievement_type_code AS Type_Code, achievements.achievement_details AS Details, achievements.date_achievement AS Date FROM achievements",
        "SELECT ach.achievement_type_code, ach.achievement_details, ach.date_achievement FROM achievements ach",
        "SELECT * FROM (SELECT achievement_type_code, achievement_details, date_achievement FROM achievements)",
        "SELECT achievement_type_code, achievement_details, date_achievement FROM achievements GROUP BY achievement_id",
        "SELECT DISTINCT ach.achievement_type_code, ach.achievement_details, ach.date_achievement FROM achievements ach",
        "SELECT first.achievement_type_code, first.achievement_details, first.date_achievement FROM achievements first",
        "SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM achievements a ORDER BY a.date_achievement ASC"
      ]
    ]
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Show the detention start time and end time of the detentions.",
    "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
    "infer_predictions": [
      [
        "SELECT datetime_detention_start, datetime_detention_end FROM detention",
        "SELECT d.datetime_detention_start, d.datetime_detention_end FROM detention d",
        "SELECT datetime_detention_start AS start_time, datetime_detention_end AS end_time FROM detention",
        "SELECT datetime_detention_start, datetime_detention_end FROM detention ORDER BY datetime_detention_start",
        "SELECT d1.datetime_detention_start, d1.datetime_detention_end FROM detention d1",
        "SELECT * FROM (SELECT datetime_detention_start, datetime_detention_end FROM detention) AS subquery",
        "SELECT * FROM detention WHERE datetime_detention_start IS NOT NULL AND datetime_detention_end IS NOT NULL",
        "SELECT datetime_detention_start, datetime_detention_end FROM detention WHERE detention.datetime_detention_start <= detention.datetime_detention_end"
      ]
    ]
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the starting time and ending time of each detention record?",
    "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
    "infer_predictions": [
      [
        "SELECT datetime_detention_start, datetime_detention_end FROM detention;",
        "SELECT d.datetime_detention_start, d.datetime_detention_end FROM detention d;",
        "SELECT datetime_detention_start AS Start, datetime_detention_end AS End FROM detention;",
        "SELECT d.datetime_detention_start AS start_time, d.datetime_detention_end AS end_time FROM detention d;",
        "SELECT datetime_detention_start, datetime_detention_end FROM detention ORDER BY datetime_detention_start;",
        "SELECT datetime_detention_start, datetime_detention_end FROM detention WHERE datetime_detention_end IS NOT NULL;",
        "SELECT * FROM (SELECT datetime_detention_start, datetime_detention_end FROM detention) sub;",
        "SELECT datetime_detention_start AS Detention_Start, datetime_detention_end AS Detention_End FROM detention WHERE datetime_detention_start IS NOT NULL;",
        "SELECT d1.datetime_detention_start, d1.datetime_detention_end FROM detention d1;"
      ]
    ]
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
    "infer_predictions": [
      [
        "SELECT bio_data FROM students WHERE student_details LIKE '%Suite%'",
        "SELECT s.bio_data FROM students s WHERE s.student_details LIKE '%Suite%'",
        "SELECT bio_data FROM students WHERE instr(student_details, 'Suite') > 0",
        "SELECT s.bio_data FROM students s WHERE instr(s.student_details, 'Suite') > 0",
        "SELECT bio_data FROM students WHERE substr(student_details, 1) LIKE '%Suite%'",
        "SELECT s.bio_data FROM students AS s WHERE instr(s.student_details, 'Suite') != 0",
        "SELECT bio_data FROM students WHERE student_details COLLATE NOCASE LIKE '%Suite%'"
      ]
    ]
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s WHERE s.student_details LIKE '%Suite%'",
        "SELECT bio_data FROM students WHERE student_details LIKE '%Suite%'",
        "SELECT s.bio_data FROM students s WHERE instr(s.student_details, 'Suite') > 0",
        "SELECT bio_data FROM students WHERE LOWER(student_details) LIKE '%suite%'",
        "SELECT s.bio_data FROM students s INNER JOIN students_addresses sa ON s.student_id = sa.student_id WHERE s.student_details LIKE '%Suite%'",
        "SELECT DISTINCT s.bio_data FROM students s WHERE s.student_details LIKE '%Suite%'",
        "SELECT s.bio_data FROM students s WHERE s.student_details LIKE '%Suite%' GROUP BY s.student_id",
        "SELECT bio_data FROM (SELECT * FROM students WHERE student_details LIKE '%Suite%')",
        "SELECT bio_data FROM students WHERE 'Suite' IN (SELECT substr(student_details, instr(student_details, 'Suite'), 5) FROM students WHERE student_details LIKE '%Suite%')"
      ]
    ]
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the details for all the pairs of teachers and students who are in the same class.",
    "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "infer_predictions": [
      [
        "SELECT teachers.teacher_details, students.bio_data FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id JOIN students ON classes.student_id = students.student_id",
        "SELECT T.teacher_details, S.bio_data FROM teachers T INNER JOIN classes C ON T.teacher_id = C.teacher_id INNER JOIN students S ON C.student_id = S.student_id",
        "SELECT teachers.teacher_details, students.bio_data FROM teachers, students, classes WHERE teachers.teacher_id = classes.teacher_id AND classes.student_id = students.student_id",
        "SELECT teacher_details, bio_data FROM teachers, students WHERE EXISTS (SELECT 1 FROM classes WHERE classes.teacher_id = teachers.teacher_id AND classes.student_id = students.student_id)",
        "SELECT DISTINCT T.teacher_details, S.bio_data FROM teachers T, students S JOIN classes C ON T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
        "SELECT T.teacher_details, S.bio_data FROM classes C, teachers T, students S WHERE C.teacher_id = T.teacher_id AND C.student_id = S.student_id",
        "SELECT T.teacher_details, S.bio_data FROM teachers T JOIN classes C JOIN students S ON T.teacher_id = C.teacher_id AND S.student_id = C.student_id",
        "SELECT A.teacher_details, B.bio_data FROM (SELECT teacher_id, teacher_details FROM teachers) A JOIN (SELECT student_id, bio_data FROM students) B, classes C WHERE A.teacher_id = C.teacher_id AND B.student_id = C.student_id",
        "SELECT T.teacher_details, S.bio_data FROM (teachers T JOIN classes C ON T.teacher_id = C.teacher_id) JOIN students S ON C.student_id = S.student_id"
      ]
    ]
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "infer_predictions": [
      [
        "SELECT teachers.teacher_details, students.student_details FROM teachers INNER JOIN classes ON teachers.teacher_id = classes.teacher_id INNER JOIN students ON classes.student_id = students.student_id",
        "SELECT t.teacher_details, s.student_details FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id JOIN students s ON c.student_id = s.student_id",
        "SELECT T.teacher_details, S.student_details FROM teachers AS T, classes AS C, students AS S WHERE T.teacher_id = C.teacher_id AND C.student_id = S.student_id",
        "SELECT teacher.teacher_details, student.student_details FROM teachers AS teacher, students AS student WHERE EXISTS (SELECT 1 FROM classes WHERE classes.teacher_id = teacher.teacher_id AND classes.student_id = student.student_id)",
        "SELECT DISTINCT a.teacher_details, b.student_details FROM teachers a JOIN classes x ON a.teacher_id = x.teacher_id JOIN students b ON x.student_id = b.student_id",
        "SELECT teacher_details, student_details FROM teachers, students WHERE students.student_id IN (SELECT student_id FROM classes WHERE teacher_id = teachers.teacher_id)",
        "SELECT t1.teacher_details, s1.student_details FROM (SELECT teacher_id, teacher_details FROM teachers) AS t1 JOIN (SELECT student_id, student_details FROM students) s1, classes c WHERE t1.teacher_id = c.teacher_id AND s1.student_id = c.student_id",
        "SELECT distinct_for_teachers.teacher_details, distinct_for_students.student_details FROM teachers as distinct_for_teachers CROSS JOIN students as distinct_for_students INNER JOIN classes on distinct_for_teachers.teacher_id = classes.teacher_id AND distinct_for_students.student_id = classes.student_id",
        "SELECT A.teacher_details, B.student_details FROM (SELECT * FROM teachers) A JOIN classes C ON A.teacher_id = C.teacher_id JOIN (SELECT * FROM students) B ON C.student_id = B.student_id",
        "SELECT teacher_info.teacher_details, student_info.student_details FROM (SELECT teacher_id, teacher_details FROM teachers) teacher_info, (SELECT student_id, student_details FROM students) student_info JOIN classes cl ON cl.student_id = student_info.student_id WHERE cl.teacher_id = teacher_info.teacher_id"
      ]
    ]
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MAX(course_count) AS max_courses, teacher_id FROM (SELECT teacher_id, COUNT(DISTINCT class_id) AS course_count FROM classes GROUP BY teacher_id) GROUP BY teacher_id ORDER BY max_courses DESC LIMIT 1;",
        "SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;",
        "SELECT T.teacher_id, COUNT(DISTINCT C.class_id) AS total_courses FROM classes C INNER JOIN teachers T ON C.teacher_id = T.teacher_id GROUP BY C.teacher_id ORDER BY total_courses DESC LIMIT 1;",
        "WITH CourseCounts AS (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) SELECT teacher_id, num_courses FROM CourseCounts WHERE num_courses = (SELECT MAX(num_courses) FROM CourseCounts);",
        "SELECT teacher_id, num_courses FROM (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) WHERE num_courses = (SELECT MAX(num_courses) FROM (SELECT COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id));",
        "SELECT teacher_id FROM (SELECT teacher_id, COUNT(DISTINCT class_id) AS course_count FROM classes GROUP BY teacher_id ORDER BY course_count DESC LIMIT 1);",
        "WITH RankedTeachers AS (SELECT teacher_id, RANK() OVER (ORDER BY COUNT(DISTINCT class_id) DESC) as rank FROM classes GROUP BY teacher_id) SELECT teacher_id FROM RankedTeachers WHERE rank = 1;",
        "SELECT teacher_id FROM classes GROUP BY teacher_id HAVING COUNT(DISTINCT class_id) = (SELECT MAX(courses) FROM (SELECT COUNT(DISTINCT class_id) AS courses FROM classes GROUP BY teacher_id) AS MaxCourses);",
        "SELECT teacher_id, MAX(num_courses) AS max_courses FROM (SELECT teacher_id, COUNT(DISTINCT class_id) AS num_courses FROM classes GROUP BY teacher_id) AS CourseCountGroup GROUP BY teacher_id ORDER BY max_courses DESC LIMIT 1;"
      ]
    ]
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT teacher_id, COUNT(class_id) AS num_courses FROM classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1",
        "SELECT t.teacher_id, COUNT(c.class_id) FROM teachers t JOIN classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY COUNT(c.class_id) DESC LIMIT 1",
        "SELECT teacher_id, COUNT(*) AS courses_count FROM classes GROUP BY teacher_id ORDER BY courses_count DESC LIMIT 1",
        "SELECT c.teacher_id, COUNT(c.class_id) AS total_classes FROM classes c GROUP BY c.teacher_id ORDER BY total_classes DESC LIMIT 1",
        "SELECT teacher, COUNT(course) FROM (SELECT teacher_id AS teacher, class_id AS course FROM classes) GROUP BY teacher ORDER BY COUNT(course) DESC LIMIT 1",
        "SELECT tch_id, MAX(cls_count) FROM (SELECT teacher_id AS tch_id, COUNT(class_id) AS cls_count FROM classes GROUP BY teacher_id) GROUPED_TCH",
        "SELECT c.teacher_id AS id_of_teacher, COUNT(DISTINCT c.class_id) AS class_count FROM classes c GROUP BY c.teacher_id ORDER BY class_count DESC, id_of_teacher ASC LIMIT 1",
        "SELECT t_id, MAX(num_c) FROM (SELECT teacher_id AS t_id, COUNT(class_id) AS num_c FROM classes GROUP BY teacher_id) tmp_table",
        "SELECT p.teacher_id, p.total_classes FROM (SELECT c.teacher_id, COUNT(c.class_id) AS total_classes FROM classes c GROUP BY c.teacher_id ORDER BY total_classes DESC) p LIMIT 1"
      ]
    ]
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT student_id, COUNT(class_id) AS num_courses FROM classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1",
        "SELECT MAX(course_count) AS max_courses, student_id FROM (SELECT student_id, COUNT(class_id) AS course_count FROM classes GROUP BY student_id) GROUP BY student_id ORDER BY max_courses DESC LIMIT 1",
        "SELECT student_id, COUNT(*) AS course_count FROM classes GROUP BY student_id HAVING course_count = (SELECT MAX(course_count) FROM (SELECT student_id, COUNT(*) AS course_count FROM classes GROUP BY student_id) temp)",
        "SELECT S.student_id, COUNT(C.class_id) AS total_courses FROM classes C JOIN students S ON S.student_id = C.student_id GROUP BY S.student_id ORDER BY total_courses DESC LIMIT 1",
        "SELECT T1.student_id, T1.max_course_count FROM (SELECT student_id, COUNT(class_id) AS max_course_count FROM classes GROUP BY student_id) T1 JOIN (SELECT MAX(num_classes) AS max_num_courses FROM (SELECT student_id, COUNT(class_id) AS num_classes FROM classes GROUP BY student_id) T2) T3 ON T1.max_course_count = T3.max_num_courses LIMIT 1",
        "SELECT student_id, course_amount FROM (SELECT student_id, COUNT(class_id) AS course_amount FROM classes GROUP BY student_id) AS course_counts ORDER BY course_amount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT student_id, COUNT(*) as course_count FROM classes GROUP BY student_id ORDER BY course_count DESC LIMIT 1",
        "SELECT t1.student_id, t1.num_courses FROM (SELECT student_id, COUNT(class_id) as num_courses FROM classes GROUP BY student_id) t1 ORDER BY t1.num_courses DESC LIMIT 1",
        "SELECT c.student_id, COUNT(c.class_id) as num_courses FROM classes c GROUP BY c.student_id ORDER BY num_courses DESC LIMIT 1",
        "SELECT top1.student_id, top1.courses_taken FROM (SELECT student_id, COUNT(class_id) as courses_taken FROM classes GROUP BY student_id ORDER BY courses_taken DESC) top1 LIMIT 1",
        "WITH StudentCourseCount AS (SELECT student_id, COUNT(class_id) as total_courses FROM classes GROUP BY student_id) SELECT student_id, total_courses FROM StudentCourseCount ORDER BY total_courses DESC LIMIT 1",
        "SELECT student_id, COUNT(class_id) as courses FROM classes GROUP BY student_id ORDER BY courses DESC LIMIT 1",
        "WITH CourseCounts AS (SELECT student_id, COUNT(class_id) as course_count FROM classes GROUP BY student_id) SELECT student_id, course_count FROM CourseCounts ORDER BY course_count DESC LIMIT 1",
        "SELECT student_id, MAX(course_count) as max_courses FROM (SELECT student_id, COUNT(class_id) as course_count FROM classes GROUP BY student_id) WHERE course_count = (SELECT MAX(course_count) FROM (SELECT COUNT(class_id) as course_count FROM classes GROUP BY student_id))",
        "SELECT c.student_id, COUNT(*) as tot_courses FROM classes c GROUP BY c.student_id HAVING tot_courses = (SELECT MAX(count_classes) FROM (SELECT COUNT(class_id) as count_classes FROM classes GROUP BY student_id))",
        "SELECT c.student_id, MAX(num_courses) FROM (SELECT student_id, COUNT(class_id) as num_courses FROM classes GROUP BY student_id) c GROUP BY c.student_id ORDER BY num_courses DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students take 2 courses? List student id and details.",
    "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.student_details FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(c.class_id) = 2",
        "SELECT student_id, student_details FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(*) = 2)",
        "SELECT s.student_id, s.student_details FROM students AS s WHERE s.student_id IN (SELECT c.student_id FROM classes AS c GROUP BY c.student_id HAVING COUNT(DISTINCT c.class_id) = 2)",
        "SELECT s.student_id, s.student_details FROM students s WHERE EXISTS (SELECT 1 FROM classes c WHERE s.student_id = c.student_id GROUP BY c.student_id HAVING COUNT(c.class_id) = 2)",
        "SELECT s.student_id, s.student_details FROM students s WHERE (SELECT COUNT(*) FROM classes c WHERE c.student_id = s.student_id) = 2",
        "SELECT s.student_id, s.student_details FROM students s INNER JOIN (SELECT c.student_id FROM classes c GROUP BY c.student_id HAVING COUNT(*) = 2) temp ON s.student_id = temp.student_id",
        "SELECT students.student_id, students.student_details FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT classes.class_id) = 2",
        "SELECT students.student_id, students.student_details FROM students, classes WHERE students.student_id = classes.student_id GROUP BY students.student_id, students.student_details HAVING COUNT(classes.class_id) = 2",
        "SELECT DISTINCT s.student_id, s.student_details FROM students s, classes c WHERE s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT c.class_id) = 2"
      ]
    ]
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the ids and details of the students who take 2 courses?",
    "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.student_details FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT c.class_id) = 2",
        "SELECT s.student_id, s.student_details FROM students s WHERE s.student_id IN (SELECT c.student_id FROM classes c GROUP BY c.student_id HAVING COUNT(DISTINCT c.class_id) = 2)",
        "SELECT student_id, student_details FROM students WHERE student_id IN (SELECT student_id FROM classes GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2)",
        "SELECT s.student_id, s.student_details FROM students s, classes c WHERE s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT c.class_id) = 2",
        "WITH student_class_counts AS (SELECT student_id, COUNT(DISTINCT class_id) as class_count FROM classes GROUP BY student_id) SELECT s.student_id, s.student_details FROM students s JOIN student_class_counts c ON s.student_id = c.student_id WHERE c.class_count = 2",
        "SELECT student_id, student_details FROM students WHERE EXISTS (SELECT 1 FROM classes WHERE classes.student_id = students.student_id GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2)",
        "SELECT s.student_id, s.student_details FROM students s JOIN (SELECT student_id FROM classes c GROUP BY student_id HAVING COUNT(DISTINCT class_id) = 2) as course_counts ON s.student_id = course_counts.student_id",
        "SELECT DISTINCT s.student_id, s.student_details FROM students s INNER JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT c.class_id) = 2",
        "WITH class_count AS (SELECT student_id, COUNT(DISTINCT class_id) AS classes_count FROM classes GROUP BY student_id) SELECT s.student_id, s.student_details FROM students s INNER JOIN class_count cc ON s.student_id = cc.student_id WHERE cc.classes_count = 2",
        "SELECT s.student_id, s.student_details FROM students s WHERE (SELECT COUNT(DISTINCT class_id) FROM classes WHERE student_id = s.student_id) = 2"
      ]
    ]
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the least common detention type? Show the type code and the description.",
    "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.detention_type_code, r.detention_type_description FROM ref_detention_type r WHERE r.detention_type_code = (SELECT d.detention_type_code FROM detention d GROUP BY d.detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT rt.detention_type_code, rt.detention_type_description FROM ref_detention_type rt JOIN (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(detention_type_code) ASC LIMIT 1) AS MinD ON rt.detention_type_code = MinD.detention_type_code",
        "SELECT ref_detention_type.detention_type_code, ref_detention_type.detention_type_description FROM ref_detention_type INNER JOIN (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) det ON ref_detention_type.detention_type_code = det.detention_type_code",
        "WITH DetentionCounts AS (SELECT detention_type_code, COUNT(*) AS Cnt FROM detention GROUP BY detention_type_code) SELECT ref_detention_type.detention_type_code, detention_type_description FROM ref_detention_type JOIN DetentionCounts ON DetentionCounts.detention_type_code = ref_detention_type.detention_type_code WHERE DetentionCounts.Cnt = (SELECT MIN(Cnt) FROM DetentionCounts)",
        "SELECT A.detention_type_code, B.detention_type_description FROM (SELECT detention_type_code, COUNT(*) as count FROM detention GROUP BY detention_type_code ORDER BY count ASC LIMIT 1) A JOIN ref_detention_type B ON A.detention_type_code = B.detention_type_code",
        "WITH Counts AS (SELECT detention_type_code, COUNT(*) AS Total FROM detention GROUP BY detention_type_code), Least AS (SELECT detention_type_code FROM Counts WHERE Total = (SELECT MIN(Total) FROM Counts)) SELECT ref_detention_type.detention_type_code, ref_detention_type.detention_type_description FROM ref_detention_type JOIN Least ON ref_detention_type.detention_type_code = Least.detention_type_code",
        "SELECT detention_type_code, detention_type_description FROM ref_detention_type WHERE detention_type_code = (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT r1.detention_type_code, r1.detention_type_description FROM ref_detention_type r1 LEFT JOIN detention d1 ON r1.detention_type_code = d1.detention_type_code GROUP BY r1.detention_type_code HAVING COUNT(d1.detention_id) = (SELECT MIN(Ct) FROM (SELECT detention_type_code, COUNT(detention_id) AS Ct FROM detention GROUP BY detention_type_code) tmp2)",
        "SELECT ref_detention_type.detention_type_code, ref_detention_type.detention_type_description FROM detention JOIN ref_detention_type ON detention.detention_type_code = ref_detention_type.detention_type_code GROUP BY detention.detention_type_code ORDER BY COUNT(detention.detention_type_code) ASC LIMIT 1",
        "SELECT DTC.detention_type_code, DTC.detention_type_description FROM ref_detention_type DTC INNER JOIN (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(detention_type_code) ASC LIMIT 1) MIN_DTC ON DTC.detention_type_code = MIN_DTC.detention_type_code"
      ]
    ]
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Give me the type code and description of the least common detention type.",
    "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.detention_type_code, r.detention_type_description FROM ref_detention_type r JOIN (SELECT detention_type_code, COUNT(*) as freq FROM detention GROUP BY detention_type_code ORDER BY freq ASC LIMIT 1) x ON r.detention_type_code = x.detention_type_code",
        "SELECT dt.detention_type_code, dt.detention_type_description FROM ref_detention_type dt WHERE detention_type_code = (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT a.detention_type_code, b.detention_type_description FROM (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) a INNER JOIN ref_detention_type b ON a.detention_type_code = b.detention_type_code",
        "SELECT r.detention_type_code, r.detention_type_description FROM ref_detention_type r WHERE detention_type_code IN (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1)",
        "WITH RankedDetType AS (SELECT detention_type_code, RANK() OVER (ORDER BY COUNT(*) ASC) AS rk FROM detention GROUP BY detention_type_code) SELECT dt.detention_type_code, dt.detention_type_description FROM RankedDetType rdt INNER JOIN ref_detention_type dt ON dt.detention_type_code = rdt.detention_type_code WHERE rk = 1",
        "WITH CTE AS (SELECT detention_type_code FROM detention GROUP BY detention_type_code ORDER BY COUNT(*) ASC LIMIT 1) SELECT detention_type_code, (SELECT detention_type_description FROM ref_detention_type WHERE detention_type_code = CTE.detention_type_code) AS detention_type_description FROM CTE",
        "SELECT dtc.detention_type_code, rdt.detention_type_description FROM (SELECT detention_type_code, MIN(freq) FROM (SELECT detention_type_code, COUNT(*) AS freq FROM detention GROUP BY detention_type_code) x) dtc JOIN ref_detention_type rdt ON rdt.detention_type_code = dtc.detention_type_code",
        "SELECT r.detention_type_code, r.detention_type_description FROM ref_detention_type r WHERE r.detention_type_code = (SELECT d.detention_type_code FROM detention d GROUP BY d.detention_type_code ORDER BY COUNT(d.detention_type_code) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
    "infer_predictions": [
      [
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT s.bio_data, s.student_details FROM students s JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)",
        "SELECT s.bio_data, s.student_details FROM students s WHERE EXISTS (SELECT 1 FROM student_loans sl WHERE sl.student_id = s.student_id AND sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT DISTINCT s.bio_data, s.student_details FROM students s, student_loans sl WHERE s.student_id = sl.student_id AND sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)",
        "SELECT s.bio_data, s.student_details FROM students s, (SELECT student_id FROM student_loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)) AS subquery WHERE s.student_id = subquery.student_id",
        "SELECT s.bio_data, s.student_details FROM students s INNER JOIN student_loans sl ON s.student_id = sl.student_id GROUP BY s.student_id, s.bio_data, s.student_details HAVING sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)",
        "SELECT s.bio_data, s.student_details FROM (SELECT student_id, bio_data, student_details FROM students) s JOIN (SELECT student_id, amount_of_loan FROM student_loans) sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)",
        "SELECT s.bio_data, s.student_details FROM students s LEFT JOIN student_loans sl ON sl.student_id = s.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)"
      ]
    ]
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the biographical data and details for students whose student loan is above the average amount.",
    "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
    "infer_predictions": [
      [
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT s.bio_data, s.student_details FROM students s JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans sl2)",
        "SELECT bio_data, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_loans GROUP BY student_id HAVING amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT s.bio_data, s.student_details FROM students s WHERE EXISTS (SELECT 1 FROM student_loans sl WHERE sl.student_id = s.student_id AND sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT s.bio_data, s.student_details FROM students s INNER JOIN (SELECT student_id FROM student_loans WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans)) sl ON s.student_id = sl.student_id",
        "SELECT s.bio_data, s.student_details FROM students s WHERE s.student_id IN (SELECT sl.student_id FROM student_loans sl WHERE sl.amount_of_loan > (SELECT AVG(sl2.amount_of_loan) FROM student_loans sl2))",
        "SELECT bio_data, student_details FROM students WHERE EXISTS (SELECT NULL FROM student_loans WHERE student_id = students.student_id AND amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans))",
        "SELECT bio_data, student_details FROM students s LEFT JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(sl2.amount_of_loan) FROM student_loans sl2) AND sl.student_id IS NOT NULL",
        "SELECT s.bio_data, s.student_details FROM students s CROSS JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM student_loans sl2)"
      ]
    ]
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "When was the earliest date of loan?",
    "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MIN(date_of_loan) FROM student_loans",
        "SELECT date_of_loan FROM student_loans ORDER BY date_of_loan ASC LIMIT 1",
        "SELECT * FROM (SELECT date_of_loan FROM student_loans ORDER BY date_of_loan) LIMIT 1",
        "WITH earliest AS (SELECT date_of_loan FROM student_loans) SELECT MIN(date_of_loan) FROM earliest",
        "SELECT date_of_loan FROM student_loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM student_loans)",
        "SELECT date_of_loan FROM student_loans GROUP BY date_of_loan ORDER BY date_of_loan ASC LIMIT 1",
        "WITH ordered_loans AS (SELECT date_of_loan FROM student_loans ORDER BY date_of_loan) SELECT date_of_loan FROM ordered_loans LIMIT 1",
        "SELECT MIN(date_of_loan) FROM student_loans WHERE date_of_loan IN (SELECT date_of_loan FROM student_loans)"
      ]
    ]
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Return the earliest date of loan in the record.",
    "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MIN(date_of_loan) FROM student_loans",
        "SELECT date_of_loan FROM student_loans ORDER BY date_of_loan ASC LIMIT 1",
        "SELECT * FROM (SELECT date_of_loan FROM student_loans ORDER BY date_of_loan) LIMIT 1",
        "SELECT date_of_loan FROM student_loans WHERE date_of_loan = (SELECT MIN(date_of_loan) FROM student_loans)",
        "SELECT date_of_loan FROM student_loans GROUP BY date_of_loan ORDER BY date_of_loan ASC LIMIT 1",
        "SELECT MIN(date) FROM (SELECT date_of_loan AS date FROM student_loans)",
        "SELECT date_of_loan FROM student_loans WHERE date_of_loan IN (SELECT MIN(date_of_loan) FROM student_loans)"
      ]
    ]
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which student has the loan with the minimum value? List the student's biographical information.",
    "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)",
        "SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans))",
        "SELECT students.bio_data FROM students, student_loans WHERE students.student_id = student_loans.student_id AND student_loans.amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)",
        "SELECT S.bio_data FROM students AS S INNER JOIN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)) AS L ON S.student_id = L.student_id",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans GROUP BY student_id))",
        "SELECT S.bio_data FROM students AS S, student_loans AS SL WHERE S.student_id = SL.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans AS SL2)",
        "SELECT SQ.bio_data FROM (SELECT student_id, bio_data FROM students) SQ JOIN student_loans ON SQ.student_id = student_loans.student_id WHERE student_loans.amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)",
        "SELECT bio_data FROM students S WHERE EXISTS (SELECT 1 FROM student_loans SL WHERE SL.student_id = S.student_id AND SL.amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans))",
        "SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan ASC LIMIT 1)",
        "SELECT bio_data FROM students INNER JOIN (SELECT minimal.student_id FROM student_loans minimal WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans)) AS LoansMin ON students.student_id = LoansMin.student_id"
      ]
    ]
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the biographical information of the student with the smallest student loan.",
    "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s JOIN student_loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1",
        "SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan LIMIT 1)",
        "WITH SmallestLoan AS (SELECT student_id FROM student_loans ORDER BY amount_of_loan ASC LIMIT 1) SELECT bio_data FROM students WHERE student_id IN (SELECT student_id FROM SmallestLoan)",
        "SELECT bio_data FROM students s, student_loans sl WHERE s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1",
        "SELECT s.bio_data FROM students s WHERE s.student_id = (SELECT sl.student_id FROM student_loans sl ORDER BY sl.amount_of_loan ASC LIMIT 1)",
        "SELECT bio_data FROM students WHERE student_id = (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MIN(amount_of_loan) FROM student_loans))",
        "SELECT s.bio_data FROM students s WHERE EXISTS (SELECT 1 FROM student_loans sl WHERE s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1)",
        "SELECT s.bio_data FROM students s INNER JOIN (SELECT student_id FROM student_loans ORDER BY amount_of_loan ASC LIMIT 1) AS tmp ON s.student_id = tmp.student_id"
      ]
    ]
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "When was the transcript issued for the student with loan of maximum value?",
    "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT date_of_transcript FROM transcripts WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1)",
        "SELECT T.date_of_transcript FROM transcripts T JOIN student_loans S ON T.student_id = S.student_id ORDER BY S.amount_of_loan DESC LIMIT 1",
        "SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1)",
        "SELECT transcripts.date_of_transcript FROM transcripts INNER JOIN (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1) AS max_loan ON transcripts.student_id = max_loan.student_id",
        "SELECT T.date_of_transcript FROM transcripts AS T INNER JOIN (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1) AS SL ON T.student_id = SL.student_id",
        "SELECT T.date_of_transcript FROM transcripts T, (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1) AS S WHERE T.student_id = S.student_id",
        "SELECT T.date_of_transcript FROM transcripts T WHERE EXISTS (SELECT 1 FROM student_loans S WHERE S.student_id = T.student_id ORDER BY S.amount_of_loan DESC LIMIT 1)",
        "SELECT T.date_of_transcript FROM (SELECT * FROM transcripts) T JOIN (SELECT student_id, amount_of_loan FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1) SL ON T.student_id = SL.student_id",
        "SELECT T.date_of_transcript FROM transcripts T WHERE T.student_id = (SELECT SL.student_id FROM student_loans SL ORDER BY SL.amount_of_loan DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the transcript issuance date for the student with the largest amount of loan?",
    "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT date_of_transcript FROM transcripts WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1)",
        "SELECT T.date_of_transcript FROM transcripts T JOIN (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1) SL ON T.student_id = SL.student_id",
        "SELECT T.date_of_transcript FROM transcripts T WHERE T.student_id IN (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC LIMIT 1)",
        "SELECT date_of_transcript FROM transcripts WHERE student_id = (SELECT student_id FROM student_loans ORDER BY amount_of_loan DESC, student_loan_id ASC LIMIT 1)",
        "SELECT T.date_of_transcript FROM transcripts T INNER JOIN (SELECT MAX(amount_of_loan) AS max_loan, student_id FROM student_loans GROUP BY student_id ORDER BY max_loan DESC LIMIT 1) S ON S.student_id = T.student_id",
        "SELECT T1.date_of_transcript FROM transcripts T1 WHERE T1.student_id = (SELECT S.student_id FROM student_loans S WHERE S.amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans))",
        "SELECT date_of_transcript FROM transcripts WHERE student_id IN (SELECT student_id FROM student_loans WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans))",
        "SELECT T.date_of_transcript FROM transcripts T, (SELECT student_id FROM student_loans GROUP BY student_id ORDER BY MAX(amount_of_loan) DESC LIMIT 1) M WHERE T.student_id = M.student_id",
        "SELECT date_of_transcript FROM transcripts WHERE student_id = (SELECT student_id FROM student_loans GROUP BY student_id ORDER BY SUM(amount_of_loan) DESC LIMIT 1)",
        "SELECT T.date_of_transcript FROM transcripts T, (SELECT student_id, MAX(amount_of_loan) as MaxLoan FROM student_loans GROUP BY student_id) as SL WHERE T.student_id = SL.student_id AND SL.MaxLoan = (SELECT MAX(amount_of_loan) FROM student_loans) LIMIT 1"
      ]
    ]
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM transcripts WHERE student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
        "SELECT DISTINCT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM transcripts WHERE student_id IN (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM transcripts tr1 WHERE tr1.date_of_transcript = (SELECT MIN(tr2.date_of_transcript) FROM transcripts tr2))"
      ]
    ]
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
        "SELECT T.teacher_details FROM teachers T INNER JOIN classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript LIMIT 1)",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT teacher_id FROM classes WHERE student_id = (SELECT t.student_id FROM transcripts t ORDER BY t.date_of_transcript ASC LIMIT 1))",
        "SELECT DISTINCT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id = (SELECT MIN(student_id) FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))",
        "SELECT teacher_details FROM teachers WHERE teacher_id IN (SELECT C.teacher_id FROM classes C JOIN transcripts TR ON C.student_id = TR.student_id ORDER BY TR.date_of_transcript LIMIT 1)",
        "SELECT DISTINCT teacher_details FROM teachers, classes WHERE teachers.teacher_id = classes.teacher_id AND classes.student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC) LIMIT 1",
        "SELECT T.teacher_details FROM teachers T JOIN classes C ON T.teacher_id = C.teacher_id WHERE C.student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC LIMIT 1)",
        "SELECT teacher_details FROM teachers WHERE EXISTS (SELECT * FROM classes WHERE teachers.teacher_id = classes.teacher_id AND classes.student_id = (SELECT student_id FROM transcripts ORDER BY date_of_transcript ASC LIMIT 1))",
        "SELECT T.teacher_details FROM teachers T WHERE EXISTS (SELECT 1 FROM classes C WHERE C.teacher_id = T.teacher_id AND C.student_id IN (SELECT student_id FROM transcripts WHERE date_of_transcript = (SELECT MIN(date_of_transcript) FROM transcripts)))"
      ]
    ]
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How much total loan does each student have ? List the student ids and the amounts .",
    "gold": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id",
    "infer_predictions": [
      [
        "SELECT student_loans.student_id, SUM(amount_of_loan) AS total_loan_amount FROM student_loans GROUP BY student_loans.student_id",
        "SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan FROM students s JOIN student_loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
        "SELECT students.student_id, TOTAL(amount_of_loan) AS total_loan FROM students JOIN student_loans ON students.student_id = student_loans.student_id GROUP BY students.student_id",
        "SELECT student_id, SUM(amount_of_loan) FROM student_loans GROUP BY student_id",
        "SELECT stud.student_id, SUM(loan.amount_of_loan) FROM student_loans loan JOIN students stud on loan.student_id = stud.student_id GROUP BY stud.student_id",
        "SELECT SL.student_id, SUM(SL.amount_of_loan) AS total_loan_amount FROM student_loans SL GROUP BY SL.student_id",
        "SELECT st.student_id, SUM(ln.amount_of_loan) AS total_loans FROM student_loans ln INNER JOIN students st ON ln.student_id = st.student_id GROUP BY st.student_id",
        "SELECT DISTINCT student_loans.student_id, (SELECT SUM(amount_of_loan) FROM student_loans WHERE student_id = student_loans.student_id) AS total_loan FROM student_loans",
        "SELECT id_list.student_id, (SELECT SUM(amount_of_loan) FROM student_loans sl WHERE sl.student_id = id_list.student_id) AS total_loan_amount FROM (SELECT student_id FROM student_loans GROUP BY student_id) AS id_list",
        "SELECT main_tbl.student_id, SUM(main_tbl.amount_of_loan) AS total_loaned FROM (SELECT student_id, amount_of_loan FROM student_loans) AS main_tbl GROUP BY main_tbl.student_id"
      ]
    ]
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "For each student, find the student id and the total amount of loan he or she has.",
    "gold": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
    "infer_predictions": [
      [
        "SELECT s.student_id, SUM(sl.amount_of_loan) FROM students s JOIN student_loans sl ON s.student_id = sl.student_id GROUP BY s.student_id",
        "SELECT student_id, TOTAL(amount_of_loan) AS total_loan FROM student_loans GROUP BY student_id",
        "SELECT sl.student_id, SUM(sl.amount_of_loan) AS total_amount FROM student_loans sl GROUP BY sl.student_id",
        "SELECT student_id, SUM(amount_of_loan) FROM student_loans GROUP BY student_id",
        "SELECT sl.student_id, TOTAL(sl.amount_of_loan) FROM student_loans sl GROUP BY sl.student_id",
        "SELECT s.student_id, total_amount FROM students s INNER JOIN (SELECT student_id, SUM(amount_of_loan) AS total_amount FROM student_loans GROUP BY student_id) AS tl ON s.student_id = tl.student_id",
        "SELECT distinct student_id, (SELECT SUM(amount_of_loan) FROM student_loans WHERE student_id = loans.student_id) AS total_loan FROM student_loans loans",
        "SELECT student_ID, (SELECT TOTAL(amount_of_loan) FROM student_loans sl WHERE sl.student_id = s.student_id) AS Total_loans FROM students s",
        "SELECT student_loans.student_id, SUM(amount_of_loan) FROM student_loans JOIN students ON student_loans.student_id = students.student_id GROUP BY student_loans.student_id",
        "SELECT students.student_id, (SELECT SUM(sl.amount_of_loan) FROM student_loans sl WHERE sl.student_id = students.student_id) FROM students GROUP BY students.student_id"
      ]
    ]
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS course_count FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data",
        "SELECT student_id, bio_data, (SELECT COUNT(*) FROM classes WHERE student_id = students.student_id) AS course_count FROM students",
        "SELECT student_id, bio_data, COUNT(class_id) AS courses FROM classes INNER JOIN students USING (student_id) GROUP BY student_id, bio_data",
        "SELECT students.student_id, bio_data, COUNT(classes.class_id) AS course_count FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id, students.bio_data",
        "SELECT students.student_id, students.bio_data, (SELECT COUNT(*) FROM classes WHERE classes.student_id = students.student_id) FROM students GROUP BY students.student_id",
        "SELECT s.student_id, s.bio_data, COUNT(c.class_id) FROM students s LEFT JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data",
        "SELECT DISTINCT students.student_id, students.bio_data, (SELECT COUNT(class_id) FROM classes WHERE student_id = students.student_id) AS course_count FROM students",
        "SELECT s.student_id, s.bio_data, COUNT(c.CLASS_id) FROM students AS s JOIN classes AS c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data",
        "SELECT s.student_id, bio_data, COUNT(*) AS course_count FROM students s, classes c WHERE s.student_id = c.student_id GROUP BY s.student_id, s.bio_data"
      ]
    ]
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
    "infer_predictions": [
      [
        "SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_courses FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id",
        "SELECT students.student_id, students.bio_data, COUNT(classes.class_id) AS num_courses FROM students INNER JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id",
        "SELECT s.student_id, s.bio_data, (SELECT COUNT(*) FROM classes WHERE classes.student_id = s.student_id) AS num_courses FROM students s",
        "SELECT student_id, bio_data, (SELECT COUNT(class_id) FROM classes WHERE students.student_id = classes.student_id) AS num_courses FROM students",
        "SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_courses FROM students s, classes c WHERE s.student_id = c.student_id GROUP BY s.student_id, s.bio_data",
        "SELECT DISTINCT s.student_id, s.bio_data, COUNT(c.class_id) FROM students s JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id",
        "SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS courses_count FROM students s LEFT JOIN classes c ON s.student_id = c.student_id GROUP BY s.student_id",
        "SELECT student_id, bio_data, (SELECT COUNT(*) FROM classes WHERE classes.student_id = students.student_id) AS num_of_courses FROM students",
        "SELECT students.student_id, students.bio_data, COUNT(DISTINCT classes.class_id) AS total_classes FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY students.student_id, students.bio_data"
      ]
    ]
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "How many students have gone through a detention?",
    "gold": "SELECT count(DISTINCT student_id) FROM Detention",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT student_id) FROM detention;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM detention);",
        "SELECT COUNT(*) FROM (SELECT student_id FROM detention GROUP BY student_id);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT d.student_id FROM detention d);",
        "SELECT COUNT(*) FROM (SELECT d.student_id FROM detention d GROUP BY d.student_id);",
        "SELECT COUNT(*) FROM (SELECT 1 FROM detention GROUP BY student_id);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM detention WHERE student_id IS NOT NULL);"
      ]
    ]
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Count the number of students who have a detention record.",
    "gold": "SELECT count(DISTINCT student_id) FROM Detention",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT student_id) FROM detention",
        "SELECT COUNT(*) FROM (SELECT DISTINCT student_id FROM detention)",
        "SELECT COUNT(DISTINCT d.student_id) FROM detention d",
        "SELECT COUNT(*) FROM (SELECT DISTINCT d.student_id FROM detention d)",
        "SELECT TOTAL(DISTINCT student_id) FROM detention",
        "SELECT COUNT(ALL student_id) FROM (SELECT DISTINCT student_id FROM detention)"
      ]
    ]
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the code and description of the most common student address type?",
    "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r JOIN students_addresses s ON r.address_type_code = s.address_type_code GROUP BY s.address_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE r.address_type_code = (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC LIMIT 1)",
        "SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT ref_address_types.address_type_code, ref_address_types.address_type_description FROM students_addresses INNER JOIN ref_address_types ON students_addresses.address_type_code = ref_address_types.address_type_code GROUP BY students_addresses.address_type_code ORDER BY COUNT(students_addresses.student_id) DESC LIMIT 1",
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE EXISTS (SELECT 1 FROM students_addresses WHERE students_addresses.address_type_code = r.address_type_code GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT top_address_type.address_type_code, ref_address_types.address_type_description FROM (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) as top_address_type JOIN ref_address_types ON top_address_type.address_type_code = ref_address_types.address_type_code",
        "SELECT r.address_type_code, r.address_type_description FROM (SELECT address_type_code, COUNT(*) as count FROM students_addresses GROUP BY address_type_code ORDER BY count DESC LIMIT 1) c JOIN ref_address_types r ON c.address_type_code = r.address_type_code",
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r, (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS t WHERE r.address_type_code = t.address_type_code",
        "WITH most_common_address AS (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) SELECT r.address_type_code, r.address_type_description FROM ref_address_types r JOIN most_common_address m ON m.address_type_code = r.address_type_code",
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r JOIN (SELECT address_type_code, COUNT(*) FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) sa ON r.address_type_code = sa.address_type_code"
      ]
    ]
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What is the most common student address type? Give me the code and description of the address type.",
    "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r JOIN (SELECT address_type_code, COUNT(*) as cnt FROM students_addresses GROUP BY address_type_code ORDER BY cnt DESC LIMIT 1) s ON r.address_type_code = s.address_type_code",
        "SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code = (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT r.address_type_code, r.address_type_description FROM ref_address_types r WHERE address_type_code IN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM students_addresses GROUP BY address_type_code)))",
        "SELECT r.address_type_code, address_type_description FROM ref_address_types r WHERE r.address_type_code = (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(address_type_code) DESC LIMIT 1)",
        "SELECT ref_address_types.address_type_code, ref_address_types.address_type_description FROM ref_address_types JOIN students_addresses ON ref_address_types.address_type_code = students_addresses.address_type_code GROUP BY ref_address_types.address_type_code, ref_address_types.address_type_description ORDER BY COUNT(students_addresses.student_id) DESC LIMIT 1",
        "SELECT ref_address_types.address_type_code, ref_address_types.address_type_description FROM ref_address_types INNER JOIN (SELECT address_type_code FROM students_addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1) AS most_common ON ref_address_types.address_type_code = most_common.address_type_code",
        "SELECT address_type_code, address_type_description FROM ref_address_types WHERE address_type_code = (SELECT s.address_type_code FROM students_addresses s GROUP BY s.address_type_code ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT s.bio_data FROM students s JOIN student_events se ON s.student_id = se.student_id LEFT JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT DISTINCT student_id FROM student_events) AND student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT DISTINCT bio_data FROM students AS s WHERE EXISTS (SELECT 1 FROM student_events AS se WHERE se.student_id = s.student_id) AND NOT EXISTS (SELECT 1 FROM student_loans AS sl WHERE sl.student_id = s.student_id)",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT se.student_id FROM student_events se LEFT JOIN student_loans sl ON se.student_id = sl.student_id WHERE sl.student_id IS NULL)",
        "SELECT bio_data FROM students s LEFT JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL AND EXISTS (SELECT 1 FROM student_events se WHERE se.student_id = s.student_id)",
        "SELECT DISTINCT s.bio_data FROM students s INNER JOIN student_events se ON s.student_id = se.student_id WHERE s.student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT s.bio_data FROM students s WHERE EXISTS (SELECT student_id FROM student_events se WHERE se.student_id = s.student_id) AND NOT EXISTS (SELECT student_id FROM student_loans sl WHERE sl.student_id = s.student_id)",
        "SELECT s.bio_data FROM students s JOIN student_events se ON s.student_id = se.student_id WHERE s.student_id NOT IN (SELECT sl.student_id FROM student_loans sl)"
      ]
    ]
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
    "infer_predictions": [
      [
        "SELECT s.bio_data FROM students s WHERE s.student_id IN (SELECT student_id FROM student_events) AND s.student_id NOT IN (SELECT student_id FROM student_loans)",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT se.student_id FROM student_events se) AND student_id NOT IN (SELECT sl.student_id FROM student_loans sl)",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT student_events.student_id FROM student_events) EXCEPT SELECT bio_data FROM students WHERE student_id IN (SELECT student_loans.student_id FROM student_loans)",
        "SELECT s.bio_data FROM students s JOIN student_events se ON s.student_id = se.student_id LEFT JOIN student_loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL",
        "SELECT DISTINCT s.bio_data FROM students s INNER JOIN student_events se ON s.student_id = se.student_id WHERE NOT EXISTS (SELECT 1 FROM student_loans sl WHERE sl.student_id = s.student_id)",
        "SELECT bio_data FROM students WHERE EXISTS (SELECT 1 FROM student_events WHERE student_events.student_id = students.student_id) AND NOT EXISTS (SELECT 1 FROM student_loans WHERE student_loans.student_id = students.student_id)",
        "SELECT bio_data FROM students s1 WHERE EXISTS (SELECT student_id FROM student_events s2 WHERE s1.student_id = s2.student_id) AND NOT EXISTS (SELECT student_id FROM student_loans s3 WHERE s1.student_id = s3.student_id)",
        "SELECT bio_data FROM students WHERE student_id IN (SELECT s.student_id FROM student_events s) AND student_id NOT IN (SELECT l.student_id FROM student_loans l)",
        "SELECT s.bio_data FROM students s LEFT OUTER JOIN student_loans l ON s.student_id = l.student_id WHERE s.student_id IN (SELECT student_id FROM student_events) AND l.student_id IS NULL",
        "SELECT s.bio_data FROM students s WHERE EXISTS (SELECT student_id FROM student_events WHERE student_events.student_id = s.student_id) AND student_id NOT IN (SELECT student_id FROM student_loans)"
      ]
    ]
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
    "infer_predictions": [
      [
        "SELECT sa.date_from, sa.date_to FROM students_addresses sa JOIN students s ON s.student_id = sa.student_id WHERE EXISTS (SELECT 1 FROM transcripts t WHERE t.student_id = s.student_id GROUP BY t.student_id HAVING COUNT(*) = 2)",
        "SELECT date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
        "SELECT B.date_from, B.date_to FROM students_addresses B INNER JOIN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2) A ON A.student_id = B.student_id",
        "SELECT sa.date_from, sa.date_to FROM students_addresses sa WHERE sa.student_id IN (SELECT t.student_id FROM transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) = 2)",
        "SELECT a.date_from, a.date_to FROM students_addresses a JOIN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2) b ON a.student_id = b.student_id",
        "SELECT date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
        "SELECT sa.date_from, sa.date_to FROM students_addresses sa INNER JOIN (SELECT t.student_id FROM transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) = 2) tmp ON sa.student_id = tmp.student_id",
        "SELECT student_address_id, date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
        "SELECT sa.date_from, sa.date_to FROM students_addresses sa WHERE EXISTS (SELECT 1 FROM transcripts t WHERE t.student_id = sa.student_id GROUP BY t.student_id HAVING COUNT(t.transcript_id) = 2)"
      ]
    ]
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
    "infer_predictions": [
      [
        "SELECT SA.date_from, SA.date_to FROM students_addresses SA WHERE SA.student_id IN (SELECT T.student_id FROM transcripts T GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
        "SELECT date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2)",
        "SELECT SA.date_from, SA.date_to FROM students_addresses AS SA JOIN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2) AS SUB ON SA.student_id = SUB.student_id",
        "SELECT date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(transcript_id) AS cnt FROM transcripts GROUP BY student_id) WHERE cnt = 2019)",
        "SELECT start.date_from, start.date_to FROM students_addresses start INNER JOIN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_details) = 2) filter ON start.student_id = filter.student_id",
        "SELECT A.date_from, A.date_to FROM students_addresses A WHERE EXISTS (SELECT 1 FROM transcripts T WHERE T.student_id = A.student_id GROUP BY T.student_id HAVING COUNT(T.transcript_id) = 2)",
        "SELECT date_from, date_to FROM students_addresses WHERE student_id IN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2)",
        "SELECT SA.date_from, SA.date_to FROM (SELECT student_id, date_from, date_to FROM students_addresses) SA JOIN (SELECT TD.student_id FROM transcripts TD GROUP BY TD.student_id HAVING COUNT(*) = 2) AS ST ON SA.student_id = ST.student_id",
        "SELECT SA.date_from, SA.date_to FROM students_addresses SA INNER JOIN (SELECT student_id FROM transcripts GROUP BY student_id HAVING COUNT(*) = 2) as SubGroup ON SA.student_id = SubGroup.student_id"
      ]
    ]
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "When did all the detentions start?",
    "gold": "SELECT datetime_detention_start FROM Detention",
    "infer_predictions": [
      [
        "SELECT datetime_detention_start FROM detention",
        "SELECT d.datetime_detention_start FROM detention d",
        "SELECT datetime_detention_start FROM detention ORDER BY datetime_detention_start",
        "SELECT datetime_detention_start FROM detention GROUP BY datetime_detention_start",
        "SELECT datetime_detention_start FROM detention WHERE datetime_detention_start IS NOT NULL",
        "SELECT datetime_detention_start FROM (SELECT * FROM detention)",
        "SELECT * FROM (SELECT datetime_detention_start FROM detention)"
      ]
    ]
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "nlq": "Give me the detention start date for all the detention records.",
    "gold": "SELECT datetime_detention_start FROM Detention",
    "infer_predictions": [
      [
        "SELECT datetime_detention_start FROM detention",
        "SELECT d.datetime_detention_start FROM detention d",
        "SELECT datetime_detention_start FROM detention ORDER BY detention_id",
        "SELECT datetime_detention_start FROM detention GROUP BY detention_id",
        "SELECT datetime_detention_start AS Detention_Start FROM detention",
        "SELECT DATETIME(datetime_detention_start) FROM detention",
        "SELECT d.datetime_detention_start FROM detention d WHERE d.datetime_detention_start IS NOT NULL"
      ]
    ]
  },
  {
    "id": 515,
    "db_id": "book_1",
    "nlq": "List all the author names.",
    "gold": "SELECT name FROM Author",
    "infer_predictions": [
      [
        "SELECT DISTINCT name FROM author",
        "SELECT name FROM author GROUP BY name",
        "SELECT a.name FROM author a",
        "SELECT DISTINCT a.name FROM author a",
        "SELECT name FROM author WHERE idauthor IS NOT NULL",
        "SELECT DISTINCT name FROM (SELECT name FROM author)",
        "SELECT name FROM author WHERE idauthor IN (SELECT idauthor FROM author)",
        "SELECT name FROM (SELECT DISTINCT name FROM author) AS unique_authors",
        "SELECT a.name FROM author a WHERE EXISTS (SELECT 1 FROM author WHERE idauthor = a.idauthor)"
      ]
    ]
  },
  {
    "id": 516,
    "db_id": "book_1",
    "nlq": "What are the names of all the authors?",
    "gold": "SELECT name FROM Author",
    "infer_predictions": [
      [
        "SELECT name FROM author",
        "SELECT name FROM author GROUP BY name",
        "SELECT a.name FROM author a",
        "SELECT a.name FROM author a GROUP BY a.name",
        "SELECT DISTINCT a.name FROM author a",
        "SELECT name FROM author ORDER BY name",
        "SELECT name FROM author WHERE name IS NOT NULL",
        "SELECT name FROM author WHERE idauthor > 0",
        "SELECT a.name FROM author a WHERE a.idauthor IN (SELECT idauthor FROM author)"
      ]
    ]
  },
  {
    "id": 517,
    "db_id": "book_1",
    "nlq": "Show all Client names and their addresses.",
    "gold": "SELECT name ,  address FROM Client",
    "infer_predictions": [
      [
        "SELECT name, address FROM client",
        "SELECT c.name, c.address FROM client c",
        "SELECT client.name AS Name, client.address AS Address FROM client",
        "SELECT name AS client_name, address AS client_address FROM client",
        "SELECT c.name AS ClientName, c.address AS ClientAddress FROM client c",
        "SELECT name || ' ' AS name, address FROM client"
      ]
    ]
  },
  {
    "id": 518,
    "db_id": "book_1",
    "nlq": "What are the names and addressed of all clients?",
    "gold": "SELECT name ,  address FROM Client",
    "infer_predictions": [
      [
        "SELECT name, address FROM client",
        "SELECT name AS client_name, address AS client_address FROM client",
        "SELECT c.name, c.address FROM client c",
        "SELECT c.name AS client_name, c.address AS client_address FROM client c",
        "SELECT client.name, client.address FROM client WHERE client.name IS NOT NULL AND client.address IS NOT NULL",
        "SELECT name, address FROM client GROUP BY name, address",
        "SELECT name, address FROM client WHERE EXISTS (SELECT 1 FROM client AS c2 WHERE c2.idclient = client.idclient)"
      ]
    ]
  },
  {
    "id": 519,
    "db_id": "book_1",
    "nlq": "List all Book titles, ISBNs, and sale prices.",
    "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
    "infer_predictions": [
      [
        "SELECT title, isbn, saleprice FROM book",
        "SELECT b.title, b.isbn, b.saleprice FROM book b",
        "SELECT book.title AS Title, book.isbn AS ISBN, book.saleprice AS SalePrice FROM book",
        "SELECT title, isbn, saleprice FROM book ORDER BY title",
        "SELECT b.title, b.isbn, b.saleprice FROM book AS b ORDER BY b.isbn",
        "SELECT * FROM (SELECT title, isbn, saleprice FROM book)",
        "SELECT b.title, b.isbn, b.saleprice FROM book b WHERE b.isbn IS NOT NULL",
        "SELECT title, isbn, saleprice FROM book WHERE isbn IN (SELECT isbn FROM books_order)"
      ]
    ]
  },
  {
    "id": 520,
    "db_id": "book_1",
    "nlq": "What are the titles, ISBNs, and sale prices for all books?",
    "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
    "infer_predictions": [
      [
        "SELECT title, isbn, saleprice FROM book",
        "SELECT b.title, b.isbn, b.saleprice FROM book b",
        "SELECT title, isbn, saleprice FROM book ORDER BY title",
        "SELECT title, isbn, saleprice FROM book ORDER BY saleprice DESC",
        "SELECT title, isbn, saleprice FROM book GROUP BY isbn",
        "SELECT title, isbn, saleprice FROM book WHERE saleprice IS NOT NULL",
        "SELECT title AS BookTitle, isbn AS BookISBN, saleprice AS SalePrice FROM book",
        "SELECT * FROM book WHERE title IS NOT NULL AND isbn IS NOT NULL AND saleprice IS NOT NULL"
      ]
    ]
  },
  {
    "id": 521,
    "db_id": "book_1",
    "nlq": "How many books do we have?",
    "gold": "SELECT count(*) FROM Book",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM book",
        "SELECT COUNT(isbn) FROM book",
        "SELECT COUNT(1) FROM book",
        "SELECT COUNT(book.isbn) AS TotalBooks FROM book",
        "SELECT COUNT(*) AS Total FROM book",
        "SELECT COUNT(DISTINCT isbn) AS BookCount FROM book",
        "SELECT COUNT(isbn) AS CountOfBooks FROM book"
      ]
    ]
  },
  {
    "id": 522,
    "db_id": "book_1",
    "nlq": "Count the number of books.",
    "gold": "SELECT count(*) FROM Book",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM book",
        "SELECT COUNT(isbn) FROM book",
        "SELECT COUNT(DISTINCT book.isbn) AS NumberOfBooks FROM book",
        "SELECT COUNT(*) AS TotalBooks FROM book",
        "SELECT COUNT(book.isbn) AS Total FROM book",
        "SELECT COUNT(*) FROM (SELECT isbn FROM book) AS UniqueBooks",
        "SELECT COUNT(DISTINCT b.isbn) FROM book b"
      ]
    ]
  },
  {
    "id": 523,
    "db_id": "book_1",
    "nlq": "How many authors are there?",
    "gold": "SELECT count(*) FROM Author",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT idauthor) FROM author",
        "SELECT COUNT(*) FROM (SELECT DISTINCT idauthor FROM author)",
        "SELECT COUNT(DISTINCT author.idauthor) AS total_authors FROM author",
        "SELECT COUNT(author.idauthor) FROM author GROUP BY author.idauthor HAVING COUNT(*) >= 1",
        "SELECT COUNT(*) FROM (SELECT idauthor FROM author GROUP BY idauthor)",
        "SELECT COUNT( DISTINCT A.idauthor) FROM author A",
        "SELECT COUNT(DISTINCT A.idauthor) FROM author A WHERE A.idauthor IS NOT NULL",
        "SELECT COUNT(idauthor) FROM (SELECT idauthor FROM author GROUP BY idauthor) AS unique_authors",
        "SELECT sum(cnt) FROM (SELECT COUNT(idauthor) as cnt FROM author GROUP BY idauthor)"
      ]
    ]
  },
  {
    "id": 524,
    "db_id": "book_1",
    "nlq": "Count the number of authors.",
    "gold": "SELECT count(*) FROM Author",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT idauthor) FROM author",
        "SELECT COUNT(*) FROM (SELECT DISTINCT idauthor FROM author)",
        "SELECT COUNT(DISTINCT author) FROM author_book",
        "SELECT COUNT(1) FROM (SELECT DISTINCT author FROM author_book)",
        "SELECT COUNT(author) AS NumberOfAuthors FROM (SELECT DISTINCT author FROM author_book)",
        "SELECT COUNT(DISTINCT a.idauthor) FROM author a",
        "SELECT COUNT(DISTINCT ab.author) FROM author_book ab",
        "SELECT COUNT(DISTINCT author_id) FROM (SELECT idauthor AS author_id FROM author)",
        "SELECT COUNT(author_id) FROM (SELECT DISTINCT author AS author_id FROM author_book)",
        "SELECT COUNT(DISTINCT id) FROM (SELECT idauthor AS id FROM author)"
      ]
    ]
  },
  {
    "id": 525,
    "db_id": "book_1",
    "nlq": "How many clients are there?",
    "gold": "SELECT count(*) FROM Client",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM client",
        "SELECT COUNT(idclient) FROM client",
        "SELECT COUNT(1) FROM client",
        "SELECT COUNT(*) AS TotalClients FROM client",
        "SELECT COUNT(idclient) AS TotalClients FROM client",
        "SELECT COUNT(DISTINCT idclient) AS NumberOfClients FROM client",
        "WITH ClientCount AS (SELECT COUNT(*) AS Cnt FROM client) SELECT Cnt FROM ClientCount",
        "SELECT (COUNT(*)) FROM (SELECT idclient FROM client)"
      ]
    ]
  },
  {
    "id": 526,
    "db_id": "book_1",
    "nlq": "Return the number of clients.",
    "gold": "SELECT count(*) FROM Client",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM client",
        "SELECT COUNT(idclient) FROM client",
        "SELECT COUNT(1) FROM client",
        "SELECT COUNT(all idclient) FROM client",
        "SELECT (COUNT(*)) FROM client",
        "SELECT COUNT(client.idclient) FROM client as client",
        "SELECT COUNT(*) FROM (SELECT * FROM client)"
      ]
    ]
  },
  {
    "id": 527,
    "db_id": "book_1",
    "nlq": "List names and addresses of all clients in alphabetical order by their names.",
    "gold": "SELECT name ,  address FROM Client ORDER BY name",
    "infer_predictions": [
      [
        "SELECT name, address FROM client ORDER BY name ASC;",
        "SELECT c.name AS ClientName, c.address AS ClientAddress FROM client c ORDER BY ClientName;",
        "SELECT c.name AS Name, c.address AS Address FROM client c ORDER BY c.name ASC;",
        "SELECT name, address FROM client GROUP BY name, address ORDER BY name ASC;"
      ]
    ]
  },
  {
    "id": 528,
    "db_id": "book_1",
    "nlq": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "gold": "SELECT name ,  address FROM Client ORDER BY name",
    "infer_predictions": [
      [
        "SELECT name, address FROM client ORDER BY name ASC",
        "SELECT DISTINCT client.name AS client_name, client.address AS client_address FROM client ORDER BY client_name ASC",
        "SELECT name, address FROM client GROUP BY name, address ORDER BY name",
        "SELECT c.name, c.address FROM client c ORDER BY c.name ASC",
        "SELECT client.name || '', client.address FROM client ORDER BY client.name ASC"
      ]
    ]
  },
  {
    "id": 529,
    "db_id": "book_1",
    "nlq": "Show all book titles and corresponding author names.",
    "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
    "infer_predictions": [
      [
        "SELECT b.title, a.name FROM book b JOIN author_book ab ON ab.isbn = b.isbn JOIN author a ON a.idauthor = ab.author",
        "SELECT b.title, a.name FROM book b, author a, author_book ab WHERE b.isbn = ab.isbn AND ab.author = a.idauthor",
        "SELECT title, name FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author_book.author = author.idauthor",
        "SELECT title, name FROM book, author INNER JOIN author_book ON book.isbn = author_book.isbn AND author_book.author = author.idauthor",
        "SELECT book.title, author.name FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author.idauthor = author_book.author",
        "SELECT book.title AS Title, author.name AS Author FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author.idauthor = author_book.author",
        "SELECT b.title, a.name FROM book as b, author as a INNER JOIN author_book as ab ON b.isbn = ab.isbn WHERE ab.author = a.idauthor",
        "SELECT Title, Name FROM (SELECT book.title AS Title, author_book.author FROM book INNER JOIN author_book ON book.isbn = author_book.isbn) AS Subquery INNER JOIN author ON author.idauthor = Subquery.author",
        "SELECT book.title, author.name FROM author INNER JOIN author_book ON author.idauthor = author_book.author INNER JOIN book ON book.isbn = author_book.isbn",
        "SELECT title, name FROM book b CROSS JOIN author a ON a.idauthor IN (SELECT author FROM author_book WHERE isbn = b.isbn)"
      ]
    ]
  },
  {
    "id": 530,
    "db_id": "book_1",
    "nlq": "What are the names of all books and their corresponding authors?",
    "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
    "infer_predictions": [
      [
        "SELECT book.title, author.name FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor",
        "SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor",
        "SELECT b.title AS BookTitle, a.name AS AuthorName FROM book b INNER JOIN author_book ab ON b.isbn = ab.isbn INNER JOIN author a ON ab.author = a.idauthor",
        "SELECT title, name FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author_book.author = author.idauthor",
        "SELECT book.title, author.name FROM book, author, author_book WHERE book.isbn = author_book.isbn AND author_book.author = author.idauthor",
        "SELECT title, name FROM book, author INNER JOIN author_book ON book.isbn = author_book.isbn AND author.idauthor = author_book.author",
        "SELECT Title, Name FROM book AS Book JOIN author_book AS AuthorBook ON Book.isbn = AuthorBook.ISBN JOIN author AS Author ON AuthorBook.author = Author.idauthor",
        "SELECT DISTINCT b.title, a.name FROM book b, author_book ab, author a WHERE b.isbn = ab.isbn AND ab.author = a.idauthor"
      ]
    ]
  },
  {
    "id": 531,
    "db_id": "book_1",
    "nlq": "Show all order ids and their client names.",
    "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT orders.idorder, client.name FROM orders JOIN client ON orders.idclient = client.idclient",
        "SELECT o.idorder, c.name FROM orders o, client c WHERE o.idclient = c.idclient",
        "SELECT o.idorder AS OrderID, c.name AS ClientName FROM orders o INNER JOIN client c ON o.idclient = c.idclient",
        "SELECT idorder, name FROM orders INNER JOIN client ON orders.idclient = client.idclient",
        "SELECT OrderID, ClientName FROM (SELECT orders.idorder AS OrderID, client.name AS ClientName, orders.idclient, client.idclient AS clientID FROM orders, client WHERE orders.idclient = client.idclient)",
        "SELECT o.idorder, c.name FROM orders o JOIN client c ON o.idclient = c.idclient",
        "SELECT orders.idorder, name FROM orders, client WHERE orders.idclient = client.idclient",
        "SELECT o.idorder, c.name FROM orders o INNER JOIN client c ON o.idclient = c.idclient",
        "SELECT orders.idorder AS OrderID, client.name AS ClientName FROM orders JOIN client ON orders.idclient = client.idclient"
      ]
    ]
  },
  {
    "id": 532,
    "db_id": "book_1",
    "nlq": "What are the ids of all orders and the corresponding client names?",
    "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT orders.idorder, client.name FROM orders JOIN client ON orders.idclient = client.idclient",
        "SELECT o.idorder, c.name FROM orders o INNER JOIN client c ON o.idclient = c.idclient",
        "SELECT idorder, name FROM orders JOIN client USING (idclient)",
        "SELECT o.idorder, c.name FROM orders AS o, client AS c WHERE o.idclient = c.idclient",
        "SELECT orders.idorder, client.name FROM orders, client WHERE orders.idclient = client.idclient",
        "SELECT a.idorder, b.name FROM orders a LEFT JOIN client b ON a.idclient = b.idclient",
        "SELECT a.idorder, b.name FROM orders a, client b WHERE a.idclient = b.idclient",
        "SELECT o.idorder, c.name FROM orders o JOIN client c ON o.idclient = c.idclient",
        "SELECT orders.idorder, client.name FROM orders INNER JOIN client ON orders.idclient = client.idclient",
        "SELECT idorder, name FROM orders, client WHERE orders.idclient = client.idclient"
      ]
    ]
  },
  {
    "id": 533,
    "db_id": "book_1",
    "nlq": "Show all author names and the numbers of books each has written.",
    "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
    "infer_predictions": [
      [
        "SELECT a.name, COUNT(ab.isbn) AS NumberOfBooks FROM author a JOIN author_book ab ON a.idauthor = ab.author GROUP BY a.idauthor",
        "SELECT a.name, COUNT(*) AS NumberOfBooks FROM author a INNER JOIN author_book ab ON a.idauthor = ab.author GROUP BY a.idauthor",
        "SELECT name, COUNT(isbn) FROM author LEFT JOIN author_book ON idauthor = author GROUP BY name",
        "SELECT a.name, COUNT(ab.author) AS BooksCount FROM author a, author_book ab WHERE a.idauthor = ab.author GROUP BY a.idauthor",
        "SELECT a.name as author_name, COUNT(ab.isbn) as total_books FROM author a, author_book ab WHERE a.idauthor = ab.author GROUP BY a.name",
        "SELECT author.name AS AuthorName, COUNT(author_book.isbn) AS BookCount FROM author JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor",
        "SELECT DISTINCT name, (SELECT COUNT(*) FROM author_book WHERE author = author.idauthor) AS NumOfBooks FROM author",
        "SELECT a.name, (SELECT COUNT(*) FROM author_book WHERE author = a.idauthor) AS TotalBooks FROM author a GROUP BY a.name"
      ]
    ]
  },
  {
    "id": 534,
    "db_id": "book_1",
    "nlq": "What are the names of all the authors, and how many books has each written?",
    "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
    "infer_predictions": [
      [
        "SELECT a.name, COUNT(ab.isbn) FROM author a JOIN author_book ab ON a.idauthor = ab.author GROUP BY a.idauthor",
        "SELECT name, COUNT(*) AS book_count FROM author JOIN author_book ON idauthor = author GROUP BY idauthor",
        "SELECT author.name, COUNT(ab.isbn) AS num_books FROM author INNER JOIN author_book ab ON author.idauthor = ab.author GROUP BY author.idauthor",
        "SELECT author.name, COUNT(author_book.author) FROM author LEFT JOIN author_book ON author.idauthor = author_book.author GROUP BY author.idauthor",
        "SELECT a.name, book_total.total FROM author a LEFT JOIN (SELECT author, COUNT(isbn) total FROM author_book GROUP BY author) book_total ON a.idauthor = book_total.author",
        "SELECT name, COUNT(book.isbn) FROM author LEFT JOIN author_book ON idauthor = author_book.author JOIN book ON author_book.isbn = book.isbn GROUP BY idauthor",
        "SELECT author.name, IFNULL(book_counts.total_books, 0) FROM author LEFT JOIN (SELECT author, COUNT(isbn) AS total_books FROM author_book GROUP BY author) book_counts ON author.idauthor = book_counts.author",
        "SELECT a.name, COALESCE(b.book_count, 0) FROM author a LEFT JOIN (SELECT author, COUNT(*) AS book_count FROM author_book GROUP BY author) b ON a.idauthor = b.author",
        "SELECT author.name AS author_name, COUNT(ab.isbn) AS books_written FROM author, author_book ab WHERE author.idauthor = ab.author GROUP BY author.idauthor",
        "SELECT author_name.name, COUNT(author_name_books.isbn) FROM (SELECT name, idauthor FROM author) author_name LEFT JOIN (SELECT isbn, author FROM author_book) author_name_books ON author_name.idauthor = author_name_books.author GROUP BY author_name.idauthor"
      ]
    ]
  },
  {
    "id": 535,
    "db_id": "book_1",
    "nlq": "Show all book isbns and the numbers of orders for each.",
    "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
    "infer_predictions": [
      [
        "SELECT b.isbn, COUNT(o.idorder) FROM book b JOIN books_order bo ON b.isbn = bo.isbn JOIN orders o ON o.idorder = bo.idorder GROUP BY b.isbn",
        "SELECT book.isbn, COUNT(DISTINCT orders.idorder) FROM book INNER JOIN books_order ON book.isbn = books_order.isbn INNER JOIN orders ON books_order.idorder = orders.idorder GROUP BY book.isbn",
        "SELECT b.isbn, COUNT(o.idorder) AS OrderCount FROM book AS b JOIN books_order AS bo ON b.isbn = bo.isbn JOIN orders AS o ON bo.idorder = o.idorder GROUP BY b.isbn",
        "SELECT book.isbn, COUNT(DISTINCT orders.idorder) AS order_counts FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder GROUP BY book.isbn",
        "SELECT books_order.isbn, COUNT(orders.idorder) FROM books_order JOIN orders ON orders.idorder = books_order.idorder GROUP BY books_order.isbn",
        "SELECT b.isbn, COUNT(*) FROM books_order bo JOIN book b ON bo.isbn = b.isbn LEFT JOIN orders o ON bo.idorder = o.idorder GROUP BY b.isbn",
        "SELECT book.isbn, COUNT(orders.idorder) FROM book, books_order, orders WHERE book.isbn = books_order.isbn AND books_order.idorder = orders.idorder GROUP BY book.isbn",
        "SELECT b.isbn, COUNT(o.idorder) AS TotalOrders FROM book b, books_order bo, orders o WHERE b.isbn = bo.isbn AND bo.idorder = o.idorder GROUP BY b.isbn"
      ]
    ]
  },
  {
    "id": 536,
    "db_id": "book_1",
    "nlq": "What are all isbns for each book, and how many times has each been ordered?",
    "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
    "infer_predictions": [
      [
        "SELECT book.isbn, COUNT(books_order.isbn) AS order_count FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn",
        "SELECT b.isbn, IFNULL(COUNT(o.isbn), 0) AS ordered_times FROM book b LEFT JOIN books_order o ON b.isbn = o.isbn GROUP BY b.isbn",
        "SELECT b.isbn, COUNT(o.isbn) FROM book b LEFT JOIN books_order o ON b.isbn = o.isbn GROUP BY b.isbn",
        "SELECT b.isbn, IFNULL(COUNT(o.isbn), 0) FROM book AS b LEFT JOIN books_order AS o ON b.isbn = o.isbn GROUP BY b.isbn",
        "SELECT isbn, (SELECT COUNT(isbn) FROM books_order WHERE books_order.isbn = book.isbn) AS total_orders FROM book",
        "SELECT b.isbn, (SELECT COUNT(isbn) FROM books_order o WHERE o.isbn = b.isbn) AS order_total FROM book b",
        "SELECT b.isbn, COUNT(o.isbn) AS total_orders FROM book b LEFT OUTER JOIN books_order o ON b.isbn = o.isbn GROUP BY b.isbn",
        "SELECT book.isbn, COUNT(books_order.isbn) AS num_orders FROM book LEFT JOIN books_order ON books_order.isbn = book.isbn GROUP BY book.isbn"
      ]
    ]
  },
  {
    "id": 537,
    "db_id": "book_1",
    "nlq": "Show all book isbns and the total amount ordered for each.",
    "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
    "infer_predictions": [
      [
        "SELECT books_order.isbn, SUM(books_order.amount) AS total_amount FROM books_order GROUP BY books_order.isbn",
        "SELECT b.isbn, SUM(bo.amount) AS total_amount FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn",
        "SELECT ISBN, SUM(Amount) FROM books_order GROUP BY ISBN",
        "SELECT isbn, TOTAL(amount) AS total_ordered FROM books_order GROUP BY isbn",
        "SELECT DISTINCT bo.isbn, (SELECT SUM(amount) FROM books_order WHERE isbn = bo.isbn) AS total_amount FROM books_order bo",
        "SELECT books_order.isbn, SUM(books_order.amount) AS total_amount_ordered FROM books_order INNER JOIN book ON book.isbn = books_order.isbn GROUP BY books_order.isbn",
        "SELECT BO.isbn, SUM(BO.amount) AS total_amount FROM book B INNER JOIN books_order BO ON B.isbn = BO.isbn GROUP BY BO.isbn",
        "SELECT books_order.isbn, (SELECT SUM(amount) FROM books_order AS B WHERE B.isbn = books_order.isbn) AS total_amount FROM books_order GROUP BY books_order.isbn",
        "SELECT b.isbn, SUM(o.amount) FROM book b JOIN books_order o ON b.isbn = o.isbn GROUP BY b.isbn"
      ]
    ]
  },
  {
    "id": 538,
    "db_id": "book_1",
    "nlq": "What are the isbns for all books, and what is the total amount ordered for each?",
    "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
    "infer_predictions": [
      [
        "SELECT b.isbn, SUM(bo.amount) AS total_amount FROM book b LEFT JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn",
        "SELECT book.isbn, TOTAL(books_order.amount) FROM book INNER JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.isbn",
        "SELECT isbn, SUM(amount) FROM books_order GROUP BY isbn",
        "SELECT b.isbn, SUM(bo.amount) as total_amount FROM books_order bo INNER JOIN book b ON bo.isbn = b.isbn GROUP BY bo.isbn",
        "SELECT books_order.isbn, SUM(books_order.amount) AS total_amount FROM books_order JOIN book ON book.isbn = books_order.isbn GROUP BY books_order.isbn",
        "SELECT isbn, IFNULL(SUM(amount), 0) FROM books_order GROUP BY isbn",
        "SELECT books_order.isbn, COALESCE(SUM(amount),0) AS total_amount FROM books_order LEFT JOIN book ON books_order.isbn = book.isbn GROUP BY books_order.isbn",
        "SELECT book.isbn, IFNULL(TOTAL(books_order.amount), 0) AS totalOrders FROM book LEFT JOIN books_order ON books_order.isbn = book.isbn GROUP BY book.isbn",
        "SELECT bo.isbn, IFNULL(SUM(bo.amount), 0) AS ordered_total_amount FROM book b LEFT JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.isbn"
      ]
    ]
  },
  {
    "id": 539,
    "db_id": "book_1",
    "nlq": "Show the book title corresponding to the book with the most number of orders.",
    "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(isbn) DESC LIMIT 1)",
        "SELECT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn GROUP BY bo.isbn ORDER BY COUNT(bo.isbn) DESC LIMIT 1",
        "SELECT b.title FROM book b WHERE b.isbn = (SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT b.title FROM book b INNER JOIN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(*) DESC LIMIT 1) AS top_book ON b.isbn = top_book.isbn",
        "SELECT title FROM book WHERE isbn = (SELECT isbn FROM (SELECT isbn, COUNT(*) AS order_count FROM books_order GROUP BY isbn) ORDER BY order_count DESC LIMIT 1)",
        "SELECT book.title FROM book, books_order WHERE book.isbn = books_order.isbn GROUP BY books_order.isbn ORDER BY COUNT(books_order.idorder) DESC LIMIT 1",
        "SELECT b1.title FROM book b1 WHERE b1.isbn = (SELECT bo1.isbn FROM books_order bo1 GROUP BY bo1.isbn HAVING COUNT(bo1.isbn) = (SELECT MAX(cnt) FROM (SELECT COUNT(isbn) AS cnt FROM books_order GROUP BY isbn)))",
        "SELECT b.title FROM book b, (SELECT isbn, COUNT(*) AS total_orders FROM books_order GROUP BY isbn) AS summary WHERE b.isbn = summary.isbn ORDER BY summary.total_orders DESC LIMIT 1",
        "SELECT title FROM (SELECT b.title, COUNT(bo.isbn) AS total_orders FROM book b LEFT JOIN books_order bo ON b.isbn = bo.isbn GROUP BY bo.isbn ORDER BY total_orders DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 540,
    "db_id": "book_1",
    "nlq": "What is the title of the book that has been ordered the greatest number of times?",
    "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE isbn = (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1)",
        "SELECT B.title FROM book B INNER JOIN (SELECT isbn, SUM(amount) AS total FROM books_order GROUP BY isbn ORDER BY total DESC LIMIT 1) BO ON B.isbn = BO.isbn",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(isbn) DESC LIMIT 1)",
        "SELECT title FROM book WHERE isbn = (SELECT isbn FROM books_order GROUP BY isbn ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT (SELECT title FROM book WHERE isbn = BO.isbn) AS title FROM books_order BO GROUP BY BO.isbn ORDER BY SUM(BO.amount) DESC LIMIT 1",
        "SELECT B.title FROM book B WHERE B.isbn = (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC, isbn LIMIT 1)",
        "SELECT title FROM (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1) AS BestSelling JOIN book ON book.isbn = BestSelling.isbn",
        "SELECT B.title FROM (SELECT isbn, SUM(amount) AS TotalAmount FROM books_order GROUP BY isbn) AS OrderData JOIN book B ON B.isbn = OrderData.isbn ORDER BY OrderData.TotalAmount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 541,
    "db_id": "book_1",
    "nlq": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT book.title, book.purchaseprice FROM book JOIN books_order ON book.isbn = books_order.isbn ORDER BY books_order.amount DESC LIMIT 1",
        "SELECT b.title, b.purchaseprice FROM book b INNER JOIN books_order o ON b.isbn = o.isbn ORDER BY o.amount DESC LIMIT 1",
        "SELECT title, purchaseprice FROM book WHERE isbn = (SELECT isbn FROM books_order ORDER BY amount DESC LIMIT 1)",
        "SELECT t1.title, t1.purchaseprice FROM book t1 WHERE EXISTS (SELECT 1 FROM books_order t2 WHERE t2.isbn = t1.isbn ORDER BY t2.amount DESC LIMIT 1)",
        "SELECT title, purchaseprice FROM book WHERE isbn IN (SELECT isbn FROM books_order ORDER BY amount DESC LIMIT 1)",
        "SELECT b.title, b.purchaseprice FROM book b WHERE b.isbn = (SELECT o.isbn FROM books_order o GROUP BY o.isbn ORDER BY SUM(o.amount) DESC LIMIT 1)",
        "SELECT t1.title, t1.purchaseprice FROM book AS t1 JOIN (SELECT isbn FROM books_order ORDER BY amount DESC LIMIT 1) AS t2 ON t1.isbn = t2.isbn",
        "SELECT B.title, B.purchaseprice FROM book AS B JOIN books_order AS O ON B.isbn = O.isbn WHERE O.amount = (SELECT MAX(amount) FROM books_order)",
        "SELECT t1.title, t1.purchaseprice FROM book t1 WHERE t1.isbn = (SELECT t2.isbn FROM books_order t2 ORDER BY t2.amount DESC LIMIT 1)",
        "SELECT MIN(title), MIN(purchaseprice) FROM book GROUP BY isbn HAVING isbn = (SELECT isbn FROM books_order ORDER BY amount DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 542,
    "db_id": "book_1",
    "nlq": "What is the title and purchase price of the book that has the highest total order amount?",
    "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT book.title, book.purchaseprice FROM book WHERE book.isbn = (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1)",
        "SELECT title, purchaseprice FROM book JOIN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1) maxOrdered ON book.isbn = maxOrdered.isbn",
        "SELECT b.title, b.purchaseprice FROM book b INNER JOIN (SELECT isbn, SUM(amount) as total_amount FROM books_order GROUP BY isbn ORDER BY total_amount DESC LIMIT 1) bo ON b.isbn = bo.isbn",
        "SELECT b.title, b.purchaseprice FROM book b WHERE b.isbn IN (SELECT isbn FROM books_order GROUP BY isbn ORDER BY SUM(amount) DESC LIMIT 1)",
        "SELECT t1.title, t1.purchaseprice FROM book t1, (SELECT isbn, SUM(amount) AS total FROM books_order GROUP BY isbn ORDER BY total DESC LIMIT 1) t2 WHERE t1.isbn = t2.isbn",
        "SELECT b.title, b.purchaseprice FROM book AS b JOIN (SELECT iso.isbn FROM books_order AS iso GROUP BY iso.isbn ORDER BY SUM(iso.amount) DESC LIMIT 1) AS max_order ON b.isbn = max_order.isbn",
        "SELECT t.title, t.purchaseprice FROM book t JOIN (SELECT isbn FROM books_order GROUP BY isbn HAVING SUM(amount) = (SELECT MAX(total_amount) FROM (SELECT SUM(amount) AS total_amount FROM books_order GROUP BY isbn))) t2 ON t.isbn = t2.isbn",
        "SELECT Title, PurchasePrice FROM (SELECT b.Title, b.PurchasePrice, bo.TotalAmount FROM Book b JOIN (SELECT ISBN, SUM(Amount) AS TotalAmount FROM Books_Order GROUP BY ISBN) bo ON b.ISBN = bo.ISBN ORDER BY bo.TotalAmount DESC LIMIT 1)",
        "SELECT title, purchaseprice FROM book WHERE isbn = (SELECT isbn FROM (SELECT isbn, SUM(amount) AS amount FROM books_order GROUP BY isbn ORDER BY amount DESC LIMIT 1) temp)"
      ]
    ]
  },
  {
    "id": 543,
    "db_id": "book_1",
    "nlq": "Show the titles of books that have been ordered.",
    "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "infer_predictions": [
      [
        "SELECT DISTINCT book.title FROM book JOIN books_order ON book.isbn = books_order.isbn;",
        "SELECT book.title FROM book WHERE EXISTS (SELECT 1 FROM books_order WHERE books_order.isbn = book.isbn);",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order);",
        "SELECT book.title FROM book INNER JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.title;",
        "SELECT DISTINCT b.title FROM book b, books_order bo WHERE b.isbn = bo.isbn;",
        "SELECT DISTINCT title FROM book WHERE EXISTS (SELECT * FROM books_order WHERE books_order.isbn = book.isbn);",
        "SELECT DISTINCT title FROM (SELECT title, isbn FROM book) AS b INNER JOIN books_order ON b.isbn = books_order.isbn;",
        "SELECT book.title FROM book LEFT JOIN books_order ON book.isbn = books_order.isbn WHERE books_order.isbn IS NOT NULL;",
        "SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 544,
    "db_id": "book_1",
    "nlq": "What are the different titles of books that have been ordered in the past?",
    "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "infer_predictions": [
      [
        "SELECT DISTINCT book.title FROM book JOIN books_order ON book.isbn = books_order.isbn",
        "SELECT book.title FROM book INNER JOIN books_order ON book.isbn = books_order.isbn GROUP BY book.title",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM books_order)",
        "SELECT DISTINCT title FROM book WHERE EXISTS (SELECT 1 FROM books_order WHERE books_order.isbn = book.isbn)",
        "SELECT DISTINCT b.title FROM book b, books_order bo WHERE b.isbn = bo.isbn",
        "SELECT b.title FROM book b INNER JOIN books_order bo ON b.isbn = bo.isbn GROUP BY b.title",
        "SELECT title FROM book WHERE isbn IN (SELECT DISTINCT isbn FROM books_order)",
        "SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn",
        "SELECT distinct_title FROM (SELECT DISTINCT book.title AS distinct_title FROM book JOIN books_order ON book.isbn = books_order.isbn)"
      ]
    ]
  },
  {
    "id": 545,
    "db_id": "book_1",
    "nlq": "Show the names of clients who have ordered at least once.",
    "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT DISTINCT client.name FROM client JOIN orders ON client.idclient = orders.idclient;",
        "SELECT name FROM client WHERE EXISTS (SELECT 1 FROM orders WHERE orders.idclient = client.idclient);",
        "SELECT client.name FROM client WHERE client.idclient IN (SELECT orders.idclient FROM orders);",
        "SELECT DISTINCT c.name FROM client c INNER JOIN orders o ON c.idclient = o.idclient;",
        "SELECT DISTINCT name FROM client, orders WHERE client.idclient = orders.idclient;",
        "SELECT c.name FROM client c WHERE EXISTS (SELECT NULL FROM orders o WHERE o.idclient = c.idclient);",
        "SELECT DISTINCT client.name FROM client, orders WHERE client.idclient = orders.idclient;",
        "SELECT name FROM client WHERE client.idclient IN (SELECT DISTINCT orders.idclient FROM orders);",
        "SELECT DISTINCT c.name FROM client c JOIN orders o ON c.idclient = o.idclient;"
      ]
    ]
  },
  {
    "id": 546,
    "db_id": "book_1",
    "nlq": "What are the names of the different clients who have made an order?",
    "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT DISTINCT client.name FROM client JOIN orders ON client.idclient = orders.idclient",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders)",
        "SELECT client.name FROM client WHERE EXISTS (SELECT 1 FROM orders WHERE orders.idclient = client.idclient)",
        "SELECT DISTINCT c.name FROM client c INNER JOIN orders o ON c.idclient = o.idclient",
        "SELECT name FROM client WHERE idclient IN (SELECT DISTINCT idclient FROM orders)",
        "SELECT DISTINCT name FROM (SELECT client.name, orders.idorder FROM client JOIN orders ON client.idclient = orders.idclient)",
        "SELECT name FROM (SELECT DISTINCT client.name FROM client, orders WHERE client.idclient = orders.idclient)",
        "SELECT c.name FROM client c WHERE EXISTS (SELECT NULL FROM orders o WHERE o.idclient = c.idclient)",
        "SELECT DISTINCT name FROM client WHERE EXISTS (SELECT * FROM orders WHERE orders.idclient = client.idclient)",
        "SELECT DISTINCT cl.name FROM client cl, orders ord WHERE cl.idclient = ord.idclient"
      ]
    ]
  },
  {
    "id": 547,
    "db_id": "book_1",
    "nlq": "Show all client names and the number of orders each has made.",
    "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
    "infer_predictions": [
      [
        "SELECT client.name, COUNT(orders.idorder) FROM client JOIN orders ON client.idclient = orders.idclient GROUP BY client.name",
        "SELECT c.name, COUNT(*) FROM client c LEFT JOIN orders o ON c.idclient = o.idclient GROUP BY c.name",
        "SELECT c.name, COALESCE(COUNT(o.idorder), 0) FROM client c LEFT OUTER JOIN orders o ON c.idclient = o.idclient GROUP BY c.name",
        "SELECT cl.name, (SELECT COUNT(*) FROM orders ords WHERE ords.idclient = cl.idclient) FROM client cl",
        "SELECT distinct c.name, (SELECT COUNT(o.idorder) FROM orders o WHERE o.idclient = c.idclient) AS number_of_orders FROM client c",
        "SELECT DISTINCT client.name, COUNT(order_grouping.idorder) FROM client LEFT JOIN (SELECT idclient, idorder FROM orders) AS order_grouping ON client.idclient = order_grouping.idclient GROUP BY client.name",
        "SELECT client.name, COUNT(order_list.idorder) AS OrderCount FROM client JOIN (SELECT idclient, idorder FROM orders) AS order_list ON client.idclient = order_list.idclient GROUP BY client.name"
      ]
    ]
  },
  {
    "id": 548,
    "db_id": "book_1",
    "nlq": "What are the names of all the clients, and how many times has each of them ordered?",
    "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
    "infer_predictions": [
      [
        "SELECT c.name, COUNT(o.idorder) FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.name",
        "SELECT name, COUNT(DISTINCT orders.idorder) FROM client INNER JOIN orders ON client.idclient = orders.idclient GROUP BY client.name",
        "SELECT name, COUNT(*) AS num_orders FROM client, orders WHERE client.idclient = orders.idclient GROUP BY client.name",
        "SELECT client.name, COUNT(order_table.idorder) AS total_orders FROM client JOIN (SELECT idorder, idclient FROM orders) order_table ON client.idclient = order_table.idclient GROUP BY client.name",
        "SELECT cl.name, COUNT(ord.idorder) FROM client cl LEFT JOIN orders ord ON ord.idclient = cl.idclient GROUP BY cl.name",
        "SELECT c1.name, COALESCE(order_count.count, 0) AS order_number FROM client c1 LEFT JOIN (SELECT idclient, COUNT(idorder) AS count FROM orders GROUP BY idclient) order_count ON c1.idclient = order_count.idclient",
        "SELECT c.name, IFNULL(o.order_count, 0) FROM client c LEFT JOIN (SELECT idclient, COUNT(idorder) AS order_count FROM orders GROUP BY idclient) o ON c.idclient = o.idclient",
        "SELECT name, (SELECT COUNT(*) FROM orders WHERE orders.idclient = client.idclient) AS total_orders FROM client",
        "SELECT client.name AS RegisteredName, (SELECT COUNT(idorder) FROM orders WHERE orders.idclient = client.idclient) AS OrderCount FROM client"
      ]
    ]
  },
  {
    "id": 549,
    "db_id": "book_1",
    "nlq": "What is the name of the client with the most number of orders?",
    "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.name FROM client c JOIN (SELECT idclient, COUNT(*) AS num_orders FROM orders GROUP BY idclient ORDER BY num_orders DESC LIMIT 1) o ON c.idclient = o.idclient",
        "SELECT c.name FROM client c WHERE c.idclient = (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(idorder) DESC LIMIT 1)",
        "SELECT c.name FROM client AS c WHERE c.idclient IN (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(idorder) DESC LIMIT 1)",
        "SELECT name FROM client WHERE idclient = (SELECT o.idclient FROM orders o GROUP BY o.idclient ORDER BY COUNT(o.idorder) DESC LIMIT 1)",
        "SELECT name FROM client WHERE idclient = (SELECT top.idclient FROM (SELECT idclient, COUNT(*) as total_orders FROM orders GROUP BY idclient ORDER BY total_orders DESC LIMIT 1) top)",
        "SELECT c.name FROM client AS c INNER JOIN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(total_orders) FROM (SELECT idclient, COUNT(*) as total_orders FROM orders GROUP BY idclient) tmp)) AS max_orders ON c.idclient = max_orders.idclient",
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(order_count) FROM (SELECT idclient, COUNT(idorder) as order_count FROM orders GROUP BY idclient) as order_counts))"
      ]
    ]
  },
  {
    "id": 550,
    "db_id": "book_1",
    "nlq": "Give the name of the client who has made the most orders.",
    "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT c.name FROM client c INNER JOIN (SELECT idclient, COUNT(*) as order_count FROM orders GROUP BY idclient ORDER BY order_count DESC LIMIT 1) oc ON c.idclient = oc.idclient",
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(idorder) DESC LIMIT 1)",
        "SELECT c.name FROM client c WHERE c.idclient = (SELECT o.idclient FROM orders o GROUP BY o.idclient ORDER BY COUNT(o.idorder) DESC LIMIT 1)",
        "SELECT (SELECT name FROM client WHERE idclient = ord.idclient) FROM (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(*) DESC LIMIT 1) ord",
        "SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.idclient ORDER BY COUNT(o.idorder) DESC LIMIT 1",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders GROUP BY idclient HAVING COUNT(idorder) = (SELECT MAX(order_count) FROM (SELECT idclient, COUNT(idorder) AS order_count FROM orders GROUP BY idclient) temp))",
        "SELECT client.name FROM client JOIN (SELECT idclient FROM orders GROUP BY idclient ORDER BY COUNT(idorder) DESC LIMIT 1) most_orders ON client.idclient = most_orders.idclient",
        "SELECT top_name.name FROM (SELECT c.name, COUNT(*) as ord_count FROM client c JOIN orders o ON c.idclient = o.idclient GROUP BY c.idclient ORDER BY ord_count DESC LIMIT 1) AS top_name",
        "SELECT c.name FROM client c WHERE c.idclient = (SELECT top_ord.idclient FROM (SELECT idclient, COUNT(*) AS total_orders FROM orders GROUP BY idclient ORDER BY total_orders DESC LIMIT 1) top_ord)"
      ]
    ]
  },
  {
    "id": 551,
    "db_id": "book_1",
    "nlq": "Show the client names and their total amounts of books ordered.",
    "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
    "infer_predictions": [
      [
        "SELECT c.name, SUM(bo.amount) FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.name",
        "SELECT c.name, TOTAL(bo.amount) FROM client c INNER JOIN orders o ON c.idclient = o.idclient INNER JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.name",
        "SELECT client.name, SUM(books_order.amount) AS total_amount FROM client INNER JOIN orders ON client.idclient = orders.idclient INNER JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name",
        "SELECT name, SUM(amount) FROM client JOIN orders USING (idclient) JOIN books_order USING (idorder) GROUP BY name",
        "SELECT c.name, SUM(bo.amount) AS TotalBooksOrdered FROM client AS c, orders AS o, books_order AS bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.name",
        "SELECT DISTINCT c.name, (SELECT SUM(amount) FROM orders JOIN books_order ON orders.idorder = books_order.idorder WHERE orders.idclient = c.idclient) AS TotalOrdered FROM client c",
        "SELECT X.name, Y.SumAmount FROM (SELECT idclient, name FROM client) X JOIN (SELECT idclient, SUM(amount) AS SumAmount FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) Y ON X.idclient = Y.idclient",
        "SELECT client.name, TOTAL(books_order.amount) FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name"
      ]
    ]
  },
  {
    "id": 552,
    "db_id": "book_1",
    "nlq": "What are the names of all the clients, and the total amount of books ordered by each?",
    "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
    "infer_predictions": [
      [
        "SELECT client.name, SUM(books_order.amount) AS TotalBooks FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name",
        "SELECT c.name, SUM(bo.amount) AS TotalBooks FROM client c INNER JOIN orders o ON c.idclient = o.idclient INNER JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.name",
        "SELECT c.name, TOTAL(bo.amount) AS TotalBooks FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.name",
        "SELECT c.name, SUM(bo.amount) FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.name",
        "SELECT c.name AS ClientName, SUM(bo.amount) AS TotalOrderedBooks FROM client AS c LEFT JOIN orders AS o ON c.idclient = o.idclient LEFT JOIN books_order AS bo ON o.idorder = bo.idorder GROUP BY ClientName",
        "SELECT c.name, SUM(bo.amount) FROM client AS c LEFT JOIN orders AS o ON c.idclient = o.idclient LEFT JOIN books_order AS bo ON o.idorder = bo.idorder GROUP BY c.name HAVING SUM(bo.amount) IS NOT NULL",
        "SELECT c.name AS client_name, SUM(bo.amount) AS total_books_ordered FROM client c INNER JOIN orders o ON c.idclient = o.idclient INNER JOIN books_order bo ON o.idorder = bo.idorder GROUP BY client_name ORDER BY client_name",
        "SELECT name, COUNT(amount) AS BooksOrdered FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY name",
        "SELECT client.name, SUM(books_order.amount) AS total_amount_books FROM client, orders, books_order WHERE client.idclient = orders.idclient AND orders.idorder = books_order.idorder GROUP BY client.name"
      ]
    ]
  },
  {
    "id": 553,
    "db_id": "book_1",
    "nlq": "Show the client name who has the most total amount of books ordered.",
    "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.idclient ORDER BY SUM(bo.amount) DESC LIMIT 1",
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient ORDER BY SUM(amount) DESC LIMIT 1)",
        "SELECT c.name FROM client c WHERE c.idclient IN (SELECT o.idclient FROM orders o JOIN books_order bo ON o.idorder = bo.idorder GROUP BY o.idclient ORDER BY SUM(bo.amount) DESC LIMIT 1)",
        "SELECT (SELECT name FROM client WHERE idclient = sub.idclient) as MaxBooksOrderedClient FROM (SELECT idclient, SUM(amount) as TotalBooks FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient ORDER BY TotalBooks DESC LIMIT 1) sub",
        "SELECT name FROM client WHERE idclient = (SELECT o.idclient FROM orders o INNER JOIN books_order bo ON o.idorder = bo.idorder GROUP BY o.idclient ORDER BY SUM(bo.amount) DESC LIMIT 1)",
        "SELECT (SELECT name FROM client WHERE idclient = MaxBooks.idclient) as name FROM (SELECT idclient FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient ORDER BY SUM(amount) DESC LIMIT 1) MaxBooks",
        "SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient HAVING SUM(bo.amount) = (SELECT MAX(Total) FROM (SELECT SUM(amount) AS Total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) totals)",
        "SELECT name FROM client WHERE idclient = (SELECT top.idclient FROM (SELECT idclient, SUM(amount) as totalAmount FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient ORDER BY totalAmount DESC LIMIT 1) top)",
        "SELECT client.name FROM client JOIN (SELECT orders.idclient FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY orders.idclient ORDER BY SUM(books_order.amount) DESC LIMIT 1) max_id on client.idclient = max_id.idclient"
      ]
    ]
  },
  {
    "id": 554,
    "db_id": "book_1",
    "nlq": "What is the name of the client who has ordered the greatest total amount of books?",
    "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.idclient ORDER BY SUM(books_order.amount) DESC LIMIT 1",
        "SELECT c.name FROM client c INNER JOIN orders o ON c.idclient = o.idclient INNER JOIN books_order bo ON o.idorder = bo.idorder GROUP BY c.idclient ORDER BY SUM(bo.amount) DESC LIMIT 1",
        "SELECT name FROM (SELECT client.name, SUM(books_order.amount) as total FROM client JOIN orders ON client.idclient = orders.idclient JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.name) ORDER BY total DESC LIMIT 1",
        "SELECT c.name FROM client c, orders o, books_order bo WHERE c.idclient = o.idclient AND o.idorder = bo.idorder GROUP BY c.idclient ORDER BY SUM(bo.amount) DESC LIMIT 1",
        "SELECT name FROM client WHERE idclient IN (SELECT orders.idclient FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY orders.idclient ORDER BY SUM(books_order.amount) DESC LIMIT 1)",
        "SELECT c.name FROM client c JOIN (SELECT idclient, SUM(amount) as total FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient) grouped_orders ON c.idclient = grouped_orders.idclient ORDER BY total DESC LIMIT 1",
        "SELECT name FROM client WHERE idclient = (SELECT idclient FROM orders JOIN books_order ON orders.idorder = books_order.idorder GROUP BY idclient ORDER BY SUM(amount) DESC LIMIT 1)",
        "SELECT client.name FROM client INNER JOIN orders ON client.idclient = orders.idclient INNER JOIN books_order ON orders.idorder = books_order.idorder GROUP BY client.idclient HAVING SUM(books_order.amount) = (SELECT MAX(total) FROM (SELECT SUM(books_order.amount) AS total FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder GROUP BY orders.idclient) temp)"
      ]
    ]
  },
  {
    "id": 555,
    "db_id": "book_1",
    "nlq": "Show all book titles for books that have no orders.",
    "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)",
        "SELECT title FROM book b WHERE b.isbn NOT IN (SELECT isbn FROM books_order)",
        "SELECT title FROM book AS b WHERE NOT EXISTS (SELECT 1 FROM books_order bo WHERE bo.isbn = b.isbn)",
        "SELECT title FROM book WHERE NOT EXISTS (SELECT 1 FROM books_order WHERE isbn = book.isbn)",
        "SELECT b.title FROM book b LEFT JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL",
        "SELECT book.title FROM book LEFT JOIN books_order ON books_order.isbn = book.isbn WHERE books_order.isbn IS NULL",
        "SELECT DISTINCT b.title FROM book b LEFT OUTER JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL",
        "SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT bo.isbn FROM books_order bo)",
        "SELECT book.title FROM book WHERE isbn NOT IN (SELECT DISTINCT isbn FROM books_order)"
      ]
    ]
  },
  {
    "id": 556,
    "db_id": "book_1",
    "nlq": "What are the titles of books that have never been ordered?",
    "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)",
        "SELECT b.title FROM book b LEFT JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.isbn IS NULL",
        "SELECT title FROM book EXCEPT SELECT title FROM book JOIN books_order ON book.isbn = books_order.isbn",
        "SELECT book.title FROM book LEFT OUTER JOIN books_order ON book.isbn = books_order.isbn WHERE books_order.isbn IS NULL",
        "SELECT title FROM book b WHERE NOT EXISTS (SELECT 1 FROM books_order bo WHERE bo.isbn = b.isbn)",
        "SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT isbn FROM books_order bo WHERE bo.isbn = b.isbn)",
        "SELECT title FROM book WHERE NOT EXISTS (SELECT isbn FROM books_order WHERE books_order.isbn = book.isbn)"
      ]
    ]
  },
  {
    "id": 557,
    "db_id": "book_1",
    "nlq": "Show all client names for clients who have not made orders.",
    "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)",
        "SELECT name FROM client EXCEPT SELECT name FROM client JOIN orders ON client.idclient = orders.idclient",
        "SELECT name FROM client c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.idclient = c.idclient)",
        "SELECT c.name FROM client c LEFT JOIN orders o ON c.idclient = o.idclient WHERE o.idclient IS NULL",
        "SELECT client.name FROM client LEFT JOIN orders ON client.idclient = orders.idclient WHERE orders.idclient IS NULL",
        "SELECT DISTINCT c.name FROM client c WHERE c.idclient NOT IN (SELECT o.idclient FROM orders o)",
        "SELECT DISTINCT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders GROUP BY idclient)",
        "SELECT c.name FROM client c WHERE NOT EXISTS (SELECT NULL FROM orders o WHERE o.idclient = c.idclient)",
        "SELECT client.name FROM client LEFT OUTER JOIN orders ON client.idclient = orders.idclient WHERE orders.idclient IS NULL"
      ]
    ]
  },
  {
    "id": 558,
    "db_id": "book_1",
    "nlq": "What are the names of clients who have never made an order?",
    "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "infer_predictions": [
      [
        "SELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)",
        "SELECT c.name FROM client c LEFT JOIN orders o ON c.idclient = o.idclient WHERE o.idclient IS NULL",
        "SELECT name FROM client c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.idclient = c.idclient)",
        "SELECT c.name FROM client c WHERE c.idclient NOT IN (SELECT o.idclient FROM orders o)",
        "SELECT c.name FROM client c LEFT OUTER JOIN orders o ON c.idclient = o.idclient WHERE o.idorder IS NULL",
        "SELECT DISTINCT c.name FROM client c WHERE c.idclient NOT IN (SELECT idclient FROM orders)",
        "SELECT c.name FROM client c EXCEPT SELECT c.name FROM client c, orders o WHERE c.idclient = o.idclient",
        "SELECT name FROM client WHERE idclient NOT IN (SELECT DISTINCT idclient FROM orders)",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM client EXCEPT SELECT idclient FROM orders)",
        "SELECT name FROM client c WHERE NOT EXISTS (SELECT * FROM orders o WHERE o.idclient = c.idclient)"
      ]
    ]
  },
  {
    "id": 559,
    "db_id": "book_1",
    "nlq": "What is the maximum and the minimum sale price?",
    "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT MAX(saleprice) AS MaxSalePrice, MIN(saleprice) AS MinSalePrice FROM book;",
        "SELECT MAX(b.saleprice) AS MaximumSalePrice, MIN(b.saleprice) AS MinimumSalePrice FROM book b;",
        "SELECT (SELECT MAX(saleprice) FROM book) AS MaxPrice, (SELECT MIN(saleprice) FROM book) AS MinPrice;",
        "SELECT MAX(book.saleprice) AS Maximum, MIN(book.saleprice) AS Minimum FROM book;",
        "SELECT (SELECT MAX(book.saleprice)) AS HighestPrice, (SELECT MIN(book.saleprice)) AS LowestPrice FROM book;",
        "SELECT MAX(book.saleprice), MIN(book.saleprice) FROM book;",
        "SELECT MAX(saleprice) || ' / ' || MIN(saleprice) AS Prices FROM book;",
        "WITH MaxMinPrices AS (SELECT MAX(saleprice) AS MaxPrice, MIN(saleprice) AS MinPrice FROM book) SELECT * FROM MaxMinPrices;",
        "SELECT * FROM (SELECT MAX(saleprice) AS MaximumSalePrice, MIN(saleprice) AS MinimumSalePrice FROM book) AS TempTable;"
      ]
    ]
  },
  {
    "id": 560,
    "db_id": "book_1",
    "nlq": "Give the maximum and minimum sale price of books.",
    "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT MAX(saleprice) AS MaxSalePrice, MIN(saleprice) AS MinSalePrice FROM book",
        "SELECT MAX(book.saleprice) AS MaximumSalePrice, MIN(book.saleprice) AS MinimumSalePrice FROM book",
        "SELECT MAX(B.saleprice) AS HighestSalePrice, MIN(B.saleprice) AS LowestSalePrice FROM book B",
        "SELECT (SELECT MAX(saleprice) FROM book) AS MaxPrice, (SELECT MIN(saleprice) FROM book) AS MinPrice",
        "SELECT (SELECT MAX(B.saleprice) FROM book B) AS HighestPrice, (SELECT MIN(B.saleprice) FROM book B) AS LowestPrice",
        "SELECT Highest.saleprice AS MaxSalePrice, Lowest.saleprice AS MinSalePrice FROM (SELECT MAX(saleprice) AS saleprice FROM book) AS Highest, (SELECT MIN(saleprice) AS saleprice FROM book) AS Lowest",
        "SELECT MAX(B1.saleprice) AS Max_Price, MIN(B1.saleprice) AS Min_Price FROM book B1",
        "SELECT MAX(price) AS MaximumPrice, MIN(price) AS MinimumPrice FROM (SELECT saleprice AS price FROM book) B2",
        "SELECT MAX(s.price) AS Max_Price, MIN(s.price) AS Min_Price FROM (SELECT saleprice AS price FROM book) s"
      ]
    ]
  },
  {
    "id": 561,
    "db_id": "book_1",
    "nlq": "What is the average purchase price and the average sale price?",
    "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT AVG(purchaseprice) AS AvgPurchasePrice, AVG(saleprice) AS AvgSalePrice FROM book",
        "SELECT AVG(b.purchaseprice) AS AvgPurchasePrice, AVG(b.saleprice) AS AvgSalePrice FROM book b",
        "SELECT AVG(book.purchaseprice), AVG(book.saleprice) FROM book",
        "SELECT (SELECT AVG(purchaseprice) FROM book) AS AveragePurchasePrice, (SELECT AVG(saleprice) FROM book) AS AverageSalePrice",
        "SELECT (SELECT AVG(purchaseprice) FROM book) AS AvgPurchase, (SELECT AVG(saleprice) FROM book) AS AvgSale",
        "SELECT AVG(book.purchaseprice) AS AveragePurchasePrice, AVG(book.saleprice) AS AverageSalePrice FROM book",
        "SELECT AVG(purchaseprice), AVG(saleprice) FROM (SELECT purchaseprice, saleprice FROM book)",
        "SELECT AVG(purchase_price), AVG(sale_price) FROM (SELECT purchaseprice AS purchase_price, saleprice AS sale_price FROM book)",
        "SELECT AVG(purchaseprice) AS AveragePP, AVG(saleprice) AS AverageSP FROM (SELECT * FROM book)"
      ]
    ]
  },
  {
    "id": 562,
    "db_id": "book_1",
    "nlq": "Give the average purchase price and average sale price for books.",
    "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT AVG(purchaseprice) AS AveragePurchasePrice, AVG(saleprice) AS AverageSalePrice FROM book",
        "SELECT AVG(book.purchaseprice), AVG(book.saleprice) FROM book",
        "SELECT AVG(b.purchaseprice) as AvgPurchasePrice, AVG(b.saleprice) as AvgSalePrice FROM book b",
        "SELECT AVG(purchaseprice) AS AvgPurchase, AVG(saleprice) AS AvgSale FROM book",
        "SELECT (SELECT AVG(purchaseprice) FROM book) AS AveragePurchasePrice, (SELECT AVG(saleprice) FROM book) AS AverageSalePrice",
        "SELECT b1.AvgPurchasePrice, b1.AvgSalePrice FROM (SELECT AVG(purchaseprice) AS AvgPurchasePrice, AVG(saleprice) AS AvgSalePrice FROM book) b1",
        "SELECT AVG(b.purchaseprice) AS Avg_Purchase_Price, AVG(b.saleprice) AS Avg_Sale_Price FROM book b",
        "SELECT AVG(book.purchaseprice) as AvgPurchPrice, AVG(book.saleprice) as AvgSalesPrice FROM book",
        "SELECT (SELECT AVG(purchaseprice) FROM book) as AVERAGE_PURCHASE_PRICE, (SELECT AVG(saleprice) FROM book) as AVERAGE_SALE_PRICE",
        "SELECT book.NewAvgPurchase, book.NewAvgSale FROM (SELECT AVG(purchaseprice) AS NewAvgPurchase, AVG(saleprice) AS NewAvgSale FROM book) book"
      ]
    ]
  },
  {
    "id": 563,
    "db_id": "book_1",
    "nlq": "What is the maximum difference between the sale price and purchase price?",
    "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT MAX(saleprice - purchaseprice) FROM book",
        "SELECT MAX(difference) FROM (SELECT (saleprice - purchaseprice) AS difference FROM book)",
        "SELECT MAX(result) FROM (SELECT saleprice - purchaseprice AS result FROM book)",
        "SELECT MAX(price_diff) FROM (SELECT saleprice - purchaseprice AS price_diff FROM book b)",
        "SELECT (MAX(saleprice) - MIN(purchaseprice)) FROM book",
        "SELECT MAX(sub.diff) FROM (SELECT (b.saleprice - b.purchaseprice) AS diff FROM book b) sub",
        "SELECT MAX(sale_price_minus_purchase_price) FROM (SELECT (saleprice - purchaseprice) AS sale_price_minus_purchase_price FROM book)",
        "SELECT MAX(saleprice - purchaseprice) AS max_diff FROM book"
      ]
    ]
  },
  {
    "id": 564,
    "db_id": "book_1",
    "nlq": "Return the largest difference in sale price and purchase price.",
    "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
    "infer_predictions": [
      [
        "SELECT MAX(saleprice - purchaseprice) FROM book",
        "SELECT MAX(difference) FROM (SELECT saleprice - purchaseprice AS difference FROM book)",
        "SELECT MAX(saleprice - purchaseprice) AS max_difference FROM book",
        "SELECT MAX(difference) FROM (SELECT (saleprice - purchaseprice) AS difference FROM book)",
        "SELECT MAX(difference) FROM (SELECT book.saleprice - book.purchaseprice AS difference FROM book)",
        "SELECT MAX(book.saleprice - book.purchaseprice) AS max_difference FROM book",
        "SELECT MAX(difference) FROM (SELECT (book.saleprice - book.purchaseprice) AS difference FROM book)",
        "WITH DifferenceTable AS (SELECT saleprice - purchaseprice AS difference FROM book) SELECT MAX(difference) FROM DifferenceTable",
        "WITH Diff AS (SELECT (saleprice - purchaseprice) AS diff FROM book) SELECT MAX(diff) FROM Diff"
      ]
    ]
  },
  {
    "id": 565,
    "db_id": "book_1",
    "nlq": "List all book titles which have sale prices higher than the average.",
    "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE saleprice > (SELECT AVG(saleprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(saleprice) FROM book)",
        "SELECT b1.title FROM book b1 WHERE b1.saleprice > (SELECT AVG(b2.saleprice) FROM book b2)",
        "SELECT title FROM book WHERE saleprice > (SELECT AVG(b.saleprice) FROM book b)",
        "SELECT book.title FROM book WHERE book.saleprice > (SELECT AVG(b.saleprice) FROM book b)",
        "SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2)",
        "SELECT b.title FROM book AS b WHERE b.saleprice > (SELECT AVG(ba.saleprice) FROM book ba)"
      ]
    ]
  },
  {
    "id": 566,
    "db_id": "book_1",
    "nlq": "What are the titles of books with sale prices above the average sale price across all books?",
    "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
    "infer_predictions": [
      [
        "SELECT book.title FROM book WHERE book.saleprice > (SELECT AVG(book.saleprice) FROM book);",
        "SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(saleprice) FROM book);",
        "SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(saleprice) FROM book b2 WHERE b2.isbn = b.isbn);",
        "SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);",
        "SELECT b.title FROM book AS b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book AS b2 WHERE b2.isbn = b.isbn);",
        "SELECT title FROM book WHERE saleprice > (SELECT AVG(saleprice) FROM book b WHERE isbn = book.isbn);",
        "SELECT B.title FROM book B WHERE B.saleprice > (SELECT AVG(saleprice) FROM book);"
      ]
    ]
  },
  {
    "id": 567,
    "db_id": "book_1",
    "nlq": "List all book titles which have the lowest sale price .",
    "gold": "select title from book order by saleprice asc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book)",
        "SELECT title FROM book WHERE saleprice IN (SELECT MIN(saleprice) FROM book)",
        "SELECT b1.title FROM book AS b1 JOIN (SELECT MIN(saleprice) AS MinPrice FROM book) AS b2 ON b1.saleprice = b2.MinPrice",
        "SELECT title FROM book b WHERE b.saleprice = (SELECT MIN(saleprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(b2.saleprice) FROM book b2)",
        "SELECT title FROM (SELECT title, saleprice, RANK() OVER (ORDER BY saleprice ASC) AS rnk FROM book) WHERE rnk = 1"
      ]
    ]
  },
  {
    "id": 568,
    "db_id": "book_1",
    "nlq": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "gold": "select title from book order by saleprice asc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(saleprice) FROM book)",
        "SELECT title FROM book WHERE saleprice = (SELECT MIN(b.saleprice) FROM book b)",
        "SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(saleprice) FROM book AS b2)",
        "SELECT b.title FROM book as b JOIN (SELECT MIN(saleprice) AS min_price FROM book) tmp ON b.saleprice = tmp.min_price",
        "SELECT title FROM book WHERE saleprice IN (SELECT MIN(saleprice) FROM book b GROUP BY b.saleprice)",
        "SELECT b.title FROM book b WHERE b.saleprice IN (SELECT MIN(b2.saleprice) FROM book b2)",
        "SELECT title FROM book b1 WHERE b1.saleprice = (SELECT MIN(saleprice) FROM book b2)",
        "SELECT b.title FROM book b CROSS JOIN (SELECT MIN(b2.saleprice) AS min_price FROM book b2) m WHERE b.saleprice = m.min_price"
      ]
    ]
  },
  {
    "id": 569,
    "db_id": "book_1",
    "nlq": "List all book titles which have highest purchase prices .",
    "gold": "select title from book order by purchaseprice  desc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(purchaseprice) FROM book)",
        "SELECT title FROM book WHERE purchaseprice IN (SELECT MAX(purchaseprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.purchaseprice IN (SELECT MAX(b2.purchaseprice) FROM book b2)",
        "SELECT title FROM book b WHERE b.purchaseprice = (SELECT MAX(purchaseprice) FROM book b2)",
        "SELECT DISTINCT title FROM book b WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book)"
      ]
    ]
  },
  {
    "id": 570,
    "db_id": "book_1",
    "nlq": "What are the titles of books with the highest purchase price across all books ?",
    "gold": "select title from book order by purchaseprice  desc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE purchaseprice = (SELECT MAX(purchaseprice) FROM book)",
        "SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(purchaseprice) FROM book)",
        "SELECT TITLE FROM BOOK WHERE PURCHASEPRICE IN (SELECT MAX(PURCHASEPRICE) FROM BOOK)",
        "SELECT b.title FROM book b JOIN (SELECT MAX(purchaseprice) AS maxprice FROM book) m ON b.purchaseprice = m.maxprice",
        "SELECT book.title FROM book WHERE book.purchaseprice = (SELECT MAX(purchaseprice) FROM book b WHERE b.purchaseprice = book.purchaseprice)",
        "SELECT title FROM book WHERE purchaseprice = (SELECT MAX(b.purchaseprice) FROM book b)",
        "SELECT title FROM (SELECT title, purchaseprice, RANK() OVER (ORDER BY purchaseprice DESC) AS rk FROM book) WHERE rk = 1",
        "SELECT b.title FROM book b WHERE EXISTS (SELECT 1 FROM book b2 GROUP BY b2.purchaseprice HAVING MAX(b2.purchaseprice) = b.purchaseprice)",
        "SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(book.purchaseprice) FROM book)"
      ]
    ]
  },
  {
    "id": 571,
    "db_id": "book_1",
    "nlq": "What is the average sale price of books written by George Orwell?",
    "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
    "infer_predictions": [
      [
        "SELECT AVG(b.saleprice) FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'George Orwell'",
        "SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell'))",
        "SELECT AVG(book.saleprice) FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell'",
        "SELECT AVG(B.saleprice) FROM book AS B WHERE EXISTS (SELECT 1 FROM author_book AS AB JOIN author AS A ON AB.author = A.idauthor WHERE AB.isbn = B.isbn AND A.name = 'George Orwell')",
        "SELECT AVG(B.saleprice) FROM book AS B, author_book AS AB, author AS A WHERE B.isbn = AB.isbn AND AB.author = A.idauthor AND A.name = 'George Orwell'",
        "SELECT AVG(saleprice) AS AverageSalePrice FROM book WHERE isbn IN (SELECT AB.isbn FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell')",
        "SELECT AVG(B.saleprice) FROM book B JOIN author_book AB ON B.isbn = AB.isbn JOIN author A ON A.idauthor = AB.author AND A.name = 'George Orwell'",
        "SELECT AVG(saleprice) FROM (SELECT B.saleprice FROM book B INNER JOIN author_book AB ON B.isbn = AB.isbn INNER JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell')",
        "SELECT AVG(B.saleprice) FROM book B JOIN (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell')) AB ON B.isbn = AB.isbn",
        "SELECT AVG(B.saleprice) FROM (SELECT saleprice FROM book JOIN author_book ON book.isbn = author_book.isbn WHERE author_book.author IN (SELECT idauthor FROM author WHERE name = 'George Orwell')) AS B"
      ]
    ]
  },
  {
    "id": 572,
    "db_id": "book_1",
    "nlq": "Give the average sale price of books authored by George Orwell.",
    "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
    "infer_predictions": [
      [
        "SELECT AVG(B.saleprice) FROM book B JOIN author_book AB ON B.isbn = AB.isbn JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell'",
        "SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell'))",
        "SELECT AVG(saleprice) FROM (SELECT saleprice FROM book INNER JOIN author_book ON book.isbn = author_book.isbn WHERE author_book.author = (SELECT idauthor FROM author WHERE name = 'George Orwell'))",
        "SELECT AVG(book.saleprice) AS AveragePrice FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell'",
        "SELECT AVG(saleprice) FROM book WHERE isbn IN (SELECT isbn FROM author_book JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')",
        "SELECT AVG(saleprice) FROM book B, author_book AB, author A WHERE B.isbn = AB.isbn AND AB.author = A.idauthor AND A.name = 'George Orwell'",
        "SELECT AVG(B.saleprice) FROM book B WHERE EXISTS (SELECT 1 FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE AB.isbn = B.isbn AND A.name = 'George Orwell')",
        "SELECT AVG(B.saleprice) FROM book B INNER JOIN author_book AB ON B.isbn = AB.isbn INNER JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell'",
        "SELECT AVG(book.saleprice) FROM book, author_book, author WHERE book.isbn = author_book.isbn AND author_book.author = author.idauthor AND author.name = 'George Orwell'",
        "SELECT AVG(saleprice) AS AveragePrice FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author.idauthor = author_book.author WHERE author.name = 'George Orwell'"
      ]
    ]
  },
  {
    "id": 573,
    "db_id": "book_1",
    "nlq": "What are sale prices of books written by Plato?",
    "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
    "infer_predictions": [
      [
        "SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato'",
        "SELECT saleprice FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato'))",
        "SELECT book.saleprice FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'Plato'",
        "SELECT saleprice FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author.idauthor = author_book.author WHERE author.name = 'Plato'",
        "SELECT SP.saleprice FROM book SP JOIN (SELECT AB.isbn FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE A.name = 'Plato') X ON SP.isbn = X.isbn",
        "SELECT SP FROM (SELECT b.saleprice AS SP, a.name AS AN FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor) WHERE AN = 'Plato'",
        "SELECT b.saleprice FROM book b, author_book ab, author a WHERE b.isbn = ab.isbn AND ab.author = a.idauthor AND a.name = 'Plato'",
        "SELECT DISTINCT b.saleprice FROM book AS b WHERE EXISTS (SELECT 1 FROM author_book AS ab JOIN author AS a ON ab.author = a.idauthor WHERE ab.isbn = b.isbn AND a.name = 'Plato')",
        "SELECT DISTINCT saleprice FROM book WHERE isbn IN (SELECT isbn FROM author_book JOIN author ON idauthor = author WHERE name = 'Plato')"
      ]
    ]
  },
  {
    "id": 574,
    "db_id": "book_1",
    "nlq": "Return the sale prices of books authored by Plato.",
    "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
    "infer_predictions": [
      [
        "SELECT book.saleprice FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'Plato'",
        "SELECT b.saleprice FROM book b INNER JOIN author_book ab ON b.isbn = ab.isbn INNER JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato'",
        "SELECT saleprice FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name = 'Plato'))",
        "SELECT b.saleprice FROM book AS b WHERE EXISTS (SELECT 1 FROM author_book AS ab JOIN author AS a ON ab.author = a.idauthor WHERE ab.isbn = b.isbn AND a.name = 'Plato')",
        "SELECT DISTINCT b.saleprice FROM book b, author_book ab, author a WHERE b.isbn = ab.isbn AND ab.author = a.idauthor AND a.name = 'Plato'",
        "SELECT first.saleprice FROM book first, author_book sec, author third WHERE first.isbn = sec.isbn AND sec.author = third.idauthor AND third.name = 'Plato'",
        "SELECT saleprice FROM book INNER JOIN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AS PlatoBooks ON book.isbn = PlatoBooks.isbn",
        "SELECT b.saleprice FROM book AS b JOIN (author_book AB JOIN author A ON AB.author = A.idauthor) ON b.isbn = AB.isbn WHERE A.name = 'Plato'",
        "SELECT DISTINCT saleprice FROM book, author_book, author WHERE book.isbn = author_book.isbn AND author_book.author = author.idauthor AND author.name = 'Plato'",
        "SELECT saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato' GROUP BY b.isbn"
      ]
    ]
  },
  {
    "id": 575,
    "db_id": "book_1",
    "nlq": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
    "infer_predictions": [
      [
        "SELECT B.title FROM book B JOIN author_book AB ON B.isbn = AB.isbn JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell' ORDER BY B.saleprice LIMIT 1",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell')) ORDER BY saleprice ASC LIMIT 1",
        "SELECT title FROM book WHERE isbn = (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell')) ORDER BY saleprice ASC LIMIT 1",
        "SELECT title FROM book WHERE author = (SELECT idauthor FROM author WHERE name = 'George Orwell') ORDER BY saleprice ASC LIMIT 1",
        "WITH LowestPrice AS (SELECT isbn FROM book WHERE saleprice = (SELECT MIN(saleprice) FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'George Orwell')) SELECT title FROM book WHERE isbn IN (SELECT isbn FROM LowestPrice)",
        "SELECT B.title FROM book B WHERE B.isbn IN (SELECT AB.isbn FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE A.name = 'George Orwell') ORDER BY B.saleprice LIMIT 1"
      ]
    ]
  },
  {
    "id": 576,
    "db_id": "book_1",
    "nlq": "Give the title of book by George Orwell that has the lowest saleprice.",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
    "infer_predictions": [
      [
        "SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON a.idauthor = ab.author WHERE a.name = 'George Orwell' ORDER BY b.saleprice LIMIT 1",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'George Orwell')) ORDER BY saleprice ASC LIMIT 1",
        "SELECT b.title FROM book b, author a, author_book ab WHERE b.isbn = ab.isbn AND ab.author = a.idauthor AND a.name = 'George Orwell' ORDER BY b.saleprice ASC LIMIT 1",
        "SELECT MIN(selectedBooks.title) FROM (SELECT b.title, b.saleprice FROM book b INNER JOIN author_book ab ON b.isbn = ab.isbn INNER JOIN author a ON a.idauthor = ab.author WHERE a.name = 'George Orwell' ORDER BY b.saleprice) AS selectedBooks",
        "SELECT title FROM (SELECT b.title, b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON a.idauthor = ab.author WHERE a.name = 'George Orwell' ORDER BY b.saleprice) LIMIT 1"
      ]
    ]
  },
  {
    "id": 577,
    "db_id": "book_1",
    "nlq": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
    "infer_predictions": [
      [
        "SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book AS b WHERE EXISTS (SELECT 1 FROM author_book AS ab JOIN author AS a ON ab.author = a.idauthor WHERE a.name = 'Plato' AND ab.isbn = b.isbn) AND b.saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT b1.title FROM book b1 INNER JOIN author_book ab1 ON b1.isbn = ab1.isbn INNER JOIN author a1 ON a1.idauthor = ab1.author WHERE a1.name = 'Plato' AND b1.saleprice < (SELECT AVG(b2.saleprice) FROM book b2)",
        "SELECT title FROM book WHERE isbn IN (SELECT ab.isbn FROM author_book ab INNER JOIN author a ON a.idauthor = ab.author WHERE a.name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON a.idauthor = ab.author WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(book.saleprice) FROM book)",
        "SELECT title FROM book WHERE isbn IN (SELECT ab.isbn FROM author a, author_book ab WHERE a.idauthor = ab.author AND a.name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM (SELECT * FROM book WHERE saleprice < (SELECT AVG(saleprice) FROM book)) b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON a.idauthor = ab.author WHERE a.name = 'Plato'",
        "SELECT DISTINCT title FROM book b INNER JOIN author_book ab ON b.isbn = ab.isbn INNER JOIN author a ON ab.author = a.idauthor WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(b2.saleprice) FROM book b2)",
        "SELECT title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON a.idauthor = ab.author WHERE a.name = 'Plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book b3)"
      ]
    ]
  },
  {
    "id": 578,
    "db_id": "book_1",
    "nlq": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
    "infer_predictions": [
      [
        "SELECT B.title FROM book B JOIN author_book AB ON B.isbn = AB.isbn JOIN author A ON AB.author = A.idauthor WHERE A.name = 'Plato' AND B.saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT book.title FROM book INNER JOIN author_book ON book.isbn = author_book.isbn INNER JOIN author ON author_book.author = author.idauthor WHERE author.name = 'Plato' AND book.saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT B.title FROM book AS B, author_book AS AB, author AS A WHERE B.isbn = AB.isbn AND AB.author = A.idauthor AND A.name = 'Plato' AND B.saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book JOIN author ON author.idauthor = author_book.author WHERE author.name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book WHERE isbn IN (SELECT AB.isbn FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE A.name = 'Plato') AND saleprice < (SELECT AVG(book.saleprice) FROM book)",
        "SELECT title FROM (SELECT * FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name = 'Plato') AS PlatoBooks WHERE saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT title FROM book WHERE author IN (SELECT idauthor FROM author WHERE name = 'Plato') AND saleprice < (SELECT AVG(saleprice) FROM book)",
        "SELECT B.title FROM book B WHERE B.saleprice < (SELECT AVG(saleprice) FROM book) AND EXISTS (SELECT 1 FROM author_book AB JOIN author A ON AB.author = A.idauthor WHERE A.name = 'Plato' AND AB.isbn = B.isbn)",
        "SELECT DISTINCT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name = 'Plato')) AND saleprice < (SELECT AVG(saleprice) FROM book)"
      ]
    ]
  },
  {
    "id": 579,
    "db_id": "book_1",
    "nlq": "Who is the author of the book \"Pride and Prejudice\"?",
    "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a JOIN author_book ab ON a.idauthor = ab.author JOIN book b ON ab.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT author.name FROM author INNER JOIN author_book ON author.idauthor = author_book.author INNER JOIN book ON author_book.isbn = book.isbn WHERE book.title = 'Pride and Prejudice'",
        "SELECT A.name FROM author A, author_book AB, book B WHERE A.idauthor = AB.author AND AB.isbn = B.isbn AND B.title = 'Pride and Prejudice'",
        "SELECT a.name FROM author a, book b, author_book ab WHERE a.idauthor = ab.author AND ab.isbn = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT a.name FROM author AS a INNER JOIN author_book AS ab ON a.idauthor = ab.author INNER JOIN book AS b ON ab.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE b.title = 'Pride and Prejudice'"
      ]
    ]
  },
  {
    "id": 580,
    "db_id": "book_1",
    "nlq": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a JOIN author_book ab ON a.idauthor = ab.author JOIN book b ON ab.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT author.name FROM author INNER JOIN author_book ON author.idauthor = author_book.author INNER JOIN book ON author_book.isbn = book.isbn WHERE book.title = 'Pride and Prejudice'",
        "SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT auth.name FROM author auth JOIN author_book ab ON auth.idauthor = ab.author JOIN book bk ON ab.isbn = bk.isbn WHERE bk.title = 'Pride and Prejudice'",
        "SELECT a.name FROM author a, author_book ab, book b WHERE a.idauthor = ab.author AND ab.isbn = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT name FROM author WHERE idauthor IN (SELECT author FROM author_book WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT a.name FROM author a JOIN author_book ab ON a.idauthor = ab.author WHERE ab.isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')",
        "SELECT auth.name FROM author auth, author_book ab, book bk WHERE auth.idauthor = ab.author AND ab.isbn = bk.isbn AND bk.title = 'Pride and Prejudice'",
        "SELECT author.name FROM author, author_book, book WHERE author.idauthor = author_book.author AND author_book.isbn = book.isbn AND book.title = 'Pride and Prejudice'",
        "SELECT name FROM author JOIN author_book ON idauthor = author AND isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')"
      ]
    ]
  },
  {
    "id": 581,
    "db_id": "book_1",
    "nlq": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))",
        "SELECT B.title FROM book B JOIN author_book AB ON B.isbn = AB.isbn JOIN author A ON AB.author = A.idauthor WHERE A.name LIKE '%Plato%'",
        "SELECT B.title FROM book B, author_book AB, author A WHERE B.isbn = AB.isbn AND AB.author = A.idauthor AND A.name LIKE '%Plato%'",
        "SELECT title FROM book WHERE EXISTS (SELECT 1 FROM author_book WHERE book.isbn = author_book.isbn AND author_book.author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))",
        "SELECT B.title FROM book AS B INNER JOIN author_book AS AB ON B.isbn = AB.isbn INNER JOIN author AS A ON AB.author = A.idauthor WHERE A.name LIKE '%Plato%'",
        "SELECT DISTINCT B.title FROM book B, author_book AB, author A WHERE B.isbn = AB.isbn AND AB.author = A.idauthor AND A.name LIKE '%Plato%'",
        "SELECT B.title FROM book AS B WHERE EXISTS (SELECT 1 FROM author_book AS AB JOIN author AS A ON AB.author = A.idauthor WHERE AB.isbn = B.isbn AND A.name LIKE '%Plato%')",
        "SELECT title FROM book WHERE isbn IN (SELECT AB.isbn FROM author_book AB, author A WHERE AB.author = A.idauthor AND A.name LIKE '%Plato%')",
        "SELECT B.title FROM book B WHERE B.isbn IN (SELECT isbn FROM author_book WHERE author = (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))",
        "SELECT DISTINCT B.title FROM book AS B JOIN author_book AS AB ON AB.isbn = B.isbn INNER JOIN author AS A ON AB.author = A.idauthor WHERE A.name LIKE '%Plato%'"
      ]
    ]
  },
  {
    "id": 582,
    "db_id": "book_1",
    "nlq": "What are the titles of all books written by an author with a name that contains Plato?",
    "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
    "infer_predictions": [
      [
        "SELECT book.title FROM book JOIN author_book ON book.isbn = author_book.isbn JOIN author ON author_book.author = author.idauthor WHERE author.name LIKE '%Plato%'",
        "SELECT b.title FROM book b INNER JOIN author_book ab ON b.isbn = ab.isbn INNER JOIN author a ON ab.author = a.idauthor WHERE a.name LIKE '%Plato%'",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author_book WHERE author IN (SELECT idauthor FROM author WHERE name LIKE '%Plato%'))",
        "SELECT b.title FROM book b, author_book ab, author a WHERE b.isbn = ab.isbn AND ab.author = a.idauthor AND a.name LIKE '%Plato%'",
        "SELECT title FROM book b WHERE EXISTS (SELECT 1 FROM author_book ab JOIN author a ON ab.author = a.idauthor WHERE ab.isbn = b.isbn AND a.name LIKE '%Plato%')",
        "SELECT b.title FROM author_book ab JOIN book b ON ab.isbn = b.isbn, author a WHERE ab.author = a.idauthor AND a.name LIKE '%Plato%'",
        "SELECT DISTINCT title FROM book WHERE isbn IN (SELECT ab.isbn FROM author_book ab JOIN author a ON ab.author = a.idauthor WHERE a.name LIKE '%Plato%')",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM author a JOIN author_book ab ON a.idauthor = ab.author WHERE a.name LIKE '%Plato%')",
        "SELECT title FROM (SELECT b.title, a.name FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor) AS sub WHERE name LIKE '%Plato%'"
      ]
    ]
  },
  {
    "id": 583,
    "db_id": "book_1",
    "nlq": "How many orders do we have for \"Pride and Prejudice\"?",
    "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT orders.idorder) FROM book JOIN books_order ON book.isbn = books_order.isbn JOIN orders ON books_order.idorder = orders.idorder WHERE book.title = 'Pride and Prejudice'",
        "SELECT COUNT(DISTINCT idorder) FROM orders WHERE idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT COUNT(*) FROM (SELECT DISTINCT orders.idorder FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice')",
        "SELECT COUNT(*) FROM orders WHERE EXISTS (SELECT 1 FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE books_order.idorder = orders.idorder AND book.title = 'Pride and Prejudice')",
        "SELECT COUNT(DISTINCT o.idorder) FROM orders o, books_order bo, book b WHERE o.idorder = bo.idorder AND bo.isbn = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT COUNT(1) FROM (SELECT 1 FROM orders o INNER JOIN books_order bo ON o.idorder = bo.idorder INNER JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice' GROUP BY o.idorder)",
        "SELECT COUNT(DISTINCT orders.idorder) FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice'",
        "SELECT COUNT(o.idorder) FROM orders o WHERE EXISTS (SELECT bo.isbn FROM books_order bo INNER JOIN book b ON bo.isbn = b.isbn WHERE bo.idorder = o.idorder AND b.title = 'Pride and Prejudice') GROUP BY o.idorder"
      ]
    ]
  },
  {
    "id": 584,
    "db_id": "book_1",
    "nlq": "Return the number of orders received for Pride and Prejudice.",
    "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT COUNT(o.idorder) FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT COUNT(*) FROM orders WHERE idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT COUNT(DISTINCT bo.idorder) FROM books_order bo INNER JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT COUNT(orders.idorder) FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice'",
        "SELECT COUNT(*) FROM (SELECT o.idorder FROM orders o LEFT JOIN books_order bo ON o.idorder = bo.idorder LEFT JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice')",
        "SELECT COUNT(DISTINCT o.idorder) FROM orders o, books_order bo, book b WHERE o.idorder = bo.idorder AND bo.isbn = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT COUNT(o.idorder) FROM orders AS o JOIN books_order AS bo ON o.idorder = bo.idorder JOIN book AS b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT COUNT(1) FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT COUNT(o.idorder) FROM orders AS o INNER JOIN books_order AS bo ON o.idorder = bo.idorder INNER JOIN book AS b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT COUNT(*) FROM orders o WHERE EXISTS (SELECT 1 FROM books_order bo JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice' AND bo.idorder = o.idorder)"
      ]
    ]
  },
  {
    "id": 585,
    "db_id": "book_1",
    "nlq": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
    "infer_predictions": [
      [
        "SELECT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.idorder HAVING COUNT(DISTINCT b.title) = 2",
        "SELECT DISTINCT o.idorder FROM orders as o INNER JOIN books_order as bo ON o.idorder = bo.idorder WHERE bo.isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice' OR title = 'The Little Prince') GROUP BY o.idorder HAVING COUNT(DISTINCT (SELECT title FROM book WHERE isbn = bo.isbn)) = 2",
        "SELECT orders.idorder FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice' OR book.title = 'The Little Prince' GROUP BY orders.idorder HAVING COUNT(DISTiNCT book.title) = 2",
        "SELECT o.idorder FROM orders o WHERE EXISTS (SELECT 1 FROM books_order bo JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice' AND bo.idorder = o.idorder) AND EXISTS (SELECT 1 FROM books_order bo JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'The Little Prince' AND bo.idorder = o.idorder)",
        "SELECT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn GROUP BY o.idorder HAVING SUM(CASE WHEN b.title IN ('Pride and Prejudice', 'The Little Prince') THEN 1 ELSE 0 END) = 2",
        "SELECT DISTINCT o.idorder FROM orders o INNER JOIN books_order bo ON o.idorder = bo.idorder INNER JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'Pride and Prejudice' INTERSECT SELECT DISTINCT o.idorder FROM orders o INNER JOIN books_order bo ON o.idorder = bo.idorder INNER JOIN book b ON bo.isbn = b.isbn WHERE b.title = 'The Little Prince'",
        "WITH Titles AS (SELECT idorder, COUNT(DISTINCT title) AS cnt FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY idorder) SELECT idorder FROM Titles WHERE cnt = 2",
        "SELECT o.idorder FROM orders o, books_order bo, book b WHERE o.idorder = bo.idorder AND bo.isbn = b.isbn AND b.title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.idorder HAVING COUNT(DISTINCT b.title) = 2"
      ]
    ]
  },
  {
    "id": 586,
    "db_id": "book_1",
    "nlq": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
    "infer_predictions": [
      [
        "SELECT o1.idorder FROM orders o1 JOIN books_order bo1 ON o1.idorder = bo1.idorder JOIN book b1 ON bo1.isbn = b1.isbn WHERE b1.title = 'Pride and Prejudice' AND EXISTS (SELECT 1 FROM books_order bo2 JOIN book b2 ON bo2.isbn = b2.isbn WHERE b2.title = 'The Little Prince' AND bo2.idorder = o1.idorder)",
        "SELECT DISTINCT orders.idorder FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice' INTERSECT SELECT orders.idorder FROM orders INNER JOIN books_order ON orders.idorder = books_order.idorder INNER JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'The Little Prince'",
        "SELECT bo1.idorder FROM books_order bo1, books_order bo2 WHERE bo1.isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice') AND bo2.isbn = (SELECT isbn FROM book WHERE title = 'The Little Prince') AND bo1.idorder = bo2.idorder",
        "SELECT idorder FROM orders WHERE idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')) AND idorder IN (SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'The Little Prince'))",
        "SELECT DISTINCT o.idorder FROM orders o JOIN books_order bo ON o.idorder = bo.idorder JOIN book b ON bo.isbn = b.isbn WHERE b.title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.idorder HAVING COUNT(DISTINCT b.title) = 2",
        "SELECT o.idorder FROM orders o WHERE EXISTS (SELECT 1 FROM books_order WHERE idorder = o.idorder AND isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')) AND EXISTS (SELECT 1 FROM books_order WHERE idorder = o.idorder AND isbn = (SELECT isbn FROM book WHERE title = 'The Little Prince'))",
        "SELECT DISTINCT idorder FROM (SELECT idorder FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE title = 'Pride and Prejudice' UNION ALL SELECT idorder FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE title = 'The Little Prince') AS sub GROUP BY idorder HAVING COUNT(*) > 1",
        "WITH T1 AS (SELECT idorder FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'Pride and Prejudice'), T2 AS (SELECT idorder FROM books_order JOIN book ON books_order.isbn = book.isbn WHERE book.title = 'The Little Prince') SELECT T1.idorder FROM T1 JOIN T2 ON T1.idorder = T2.idorder",
        "SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice') INTERSECT SELECT idorder FROM books_order WHERE isbn IN (SELECT isbn FROM book WHERE title = 'The Little Prince')",
        "SELECT first_order.idorder FROM (SELECT idorder FROM books_order WHERE isbn = (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')) AS first_order JOIN (SELECT idorder FROM books_order WHERE isbn = (SELECT isbn FROM book WHERE title = 'The Little Prince')) AS second_order ON first_order.idorder = second_order.idorder"
      ]
    ]
  },
  {
    "id": 587,
    "db_id": "book_1",
    "nlq": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.isbn FROM book B JOIN orders O ON O.idorder = B.isbn JOIN client C ON C.idclient = O.idclient WHERE C.name IN ('James Smith', 'Peter Doe') GROUP BY B.isbn HAVING COUNT(DISTINCT C.name) = 2",
        "SELECT isbn FROM book WHERE isbn IN (SELECT O2.idorder FROM orders O2 JOIN client C2 ON O2.idclient = C2.idclient WHERE C2.name = 'James Smith') INTERSECT SELECT isbn FROM book WHERE isbn IN (SELECT O3.idorder FROM orders O3 JOIN client C3 ON O3.idclient = C3.idclient WHERE C3.name = 'Peter Doe')",
        "SELECT isbn FROM book AS B WHERE EXISTS (SELECT 1 FROM orders AS O JOIN client AS CL ON O.idclient = CL.idclient WHERE CL.name = 'James Smith' AND B.isbn = O.idorder) AND EXISTS (SELECT 1 FROM orders AS O JOIN client AS CL ON O.idclient = CL.idclient WHERE CL.name = 'Peter Doe' AND B.isbn = O.idorder)",
        "SELECT B.isbn FROM book B WHERE B.isbn IN (SELECT O.idorder FROM orders O JOIN client C ON C.idclient = O.idclient WHERE C.name = 'James Smith') AND B.isbn IN (SELECT O.idorder FROM orders O JOIN client C ON C.idclient = O.idclient WHERE C.name = 'Peter Doe')",
        "WITH OrderedByJames AS (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'James Smith'), OrderedByPeter AS (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'Peter Doe') SELECT DISTINCT isbn FROM book WHERE isbn IN (SELECT idorder FROM OrderedByJames) AND isbn IN (SELECT idorder FROM OrderedByPeter)",
        "SELECT isbn FROM (SELECT B.isbn, COUNT(DISTINCT C.name) AS both_clients FROM book B JOIN orders O ON B.isbn = O.idorder JOIN client C ON C.idclient = O.idclient WHERE C.name IN ('James Smith', 'Peter Doe') GROUP BY B.isbn) AS Subquery WHERE both_clients = 2",
        "SELECT B.isbn FROM book B JOIN (SELECT idorder FROM orders JOIN client ON orders.idclient = client.idclient GROUP BY idorder HAVING SUM(CASE WHEN name = 'James Smith' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN name = 'Peter Doe' THEN 1 ELSE 0 END) > 0) SharedOrders ON B.isbn = SharedOrders.idorder"
      ]
    ]
  },
  {
    "id": 588,
    "db_id": "book_1",
    "nlq": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.isbn FROM book B JOIN orders O ON B.isbn = O.idorder JOIN client C ON O.idclient = C.idclient WHERE C.name IN ('James Smith', 'Peter Doe') GROUP BY B.isbn HAVING COUNT(DISTINCT C.name) = 2",
        "SELECT DISTINCT B.isbn FROM book B, orders O, client C WHERE B.isbn = O.idorder AND O.idclient = C.idclient AND C.name = 'James Smith' INTERSECT SELECT DISTINCT B.isbn FROM book B, orders O, client C WHERE B.isbn = O.idorder AND O.idclient = C.idclient AND C.name = 'Peter Doe'",
        "SELECT B.isbn FROM book B INNER JOIN orders O ON B.isbn = O.idorder WHERE EXISTS (SELECT 1 FROM client WHERE idclient = O.idclient AND name = 'James Smith') AND EXISTS (SELECT 1 FROM client WHERE idclient = O.idclient AND name = 'Peter Doe') GROUP BY B.isbn",
        "SELECT B.isbn FROM book B WHERE EXISTS (SELECT 1 FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'James Smith' AND O.idorder = B.isbn) AND EXISTS (SELECT 1 FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'Peter Doe' AND O.idorder = B.isbn)",
        "SELECT isbn FROM book WHERE isbn IN (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'James Smith' GROUP BY O.idorder HAVING COUNT(*) > 0) AND isbn IN (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'Peter Doe' GROUP BY O.idorder HAVING COUNT(*) > 0)",
        "SELECT isbn FROM (SELECT isbn FROM book B JOIN orders O ON B.isbn = O.idorder JOIN client C ON O.idclient = C.idclient GROUP BY isbn, C.name HAVING C.name = 'James Smith' OR C.name = 'Peter Doe') GROUP BY isbn HAVING COUNT(*) = 2",
        "SELECT B1.isbn FROM book B1, book B2, orders O1, orders O2, client C1, client C2 WHERE B1.isbn = O1.idorder AND O1.idclient = C1.idclient AND C1.name = 'James Smith' AND B2.isbn = O2.idorder AND O2.idclient = C2.idclient AND C2.name = 'Peter Doe' AND B1.isbn = B2.isbn",
        "SELECT isbn FROM book WHERE isbn IN (SELECT O.idorder FROM orders O WHERE O.idclient IN (SELECT idclient FROM client WHERE name = 'James Smith')) INTERSECT SELECT isbn FROM book WHERE isbn IN (SELECT O.idorder FROM orders O WHERE O.idclient IN (SELECT idclient FROM client WHERE name = 'Peter Doe'))"
      ]
    ]
  },
  {
    "id": 589,
    "db_id": "book_1",
    "nlq": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
    "infer_predictions": [
      [
        "SELECT bo.title FROM book bo JOIN orders o ON bo.isbn = o.idorder JOIN client c ON c.idclient = o.idclient WHERE c.name = 'Peter Doe' AND bo.title NOT IN (SELECT b.title FROM book b JOIN orders o ON b.isbn = o.idorder JOIN client cl ON cl.idclient = o.idclient WHERE cl.name = 'James Smith')",
        "SELECT title FROM book WHERE title IN (SELECT title FROM book JOIN orders ON book.isbn = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND title NOT IN (SELECT title FROM book JOIN orders ON book.isbn = orders.idorder JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith')",
        "SELECT DISTINCT book.title FROM book INNER JOIN orders ON book.isbn = orders.idorder INNER JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe' AND NOT EXISTS(SELECT 1 FROM orders o JOIN client cl ON o.idclient = cl.idclient WHERE cl.name = 'James Smith' AND o.idorder = orders.idorder)",
        "SELECT title FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND isbn NOT IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith')",
        "SELECT book.title FROM book, orders, client WHERE book.isbn = orders.idorder AND orders.idclient = client.idclient AND client.name = 'Peter Doe' EXCEPT SELECT book.title FROM book, orders, client WHERE book.isbn = orders.idorder AND orders.idclient = client.idclient AND client.name = 'James Smith'",
        "SELECT DISTINCT title FROM book WHERE EXISTS (SELECT 1 FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe' AND orders.idorder = book.isbn) AND NOT EXISTS (SELECT 1 FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith' AND orders.idorder = book.isbn)",
        "SELECT title FROM (SELECT title FROM book JOIN orders ON book.isbn = orders.idorder JOIN client ON client.idclient = orders.idclient WHERE client.name = 'Peter Doe') AS DoeBooks WHERE title NOT IN (SELECT title FROM book JOIN orders ON book.isbn = orders.idorder JOIN client ON client.idclient = orders.idclient WHERE client.name = 'James Smith')",
        "SELECT title FROM book WHERE EXISTS(SELECT * FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe' AND book.isbn = orders.idorder) AND NOT EXISTS(SELECT * FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith' AND book.isbn = orders.idorder)",
        "SELECT b.title FROM book AS b WHERE b.isbn IN (SELECT o.idorder FROM orders o INNER JOIN client c ON o.idclient = c.idclient WHERE c.name = 'Peter Doe') AND b.isbn NOT IN (SELECT o.idorder FROM orders o INNER JOIN client c ON o.idclient = c.idclient WHERE c.name = 'James Smith')",
        "SELECT B.title FROM book B WHERE EXISTS (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'Peter Doe' AND B.isbn = O.idorder) AND NOT EXISTS (SELECT O.idorder FROM orders O JOIN client C ON O.idclient = C.idclient WHERE C.name = 'James Smith' AND B.isbn = O.idorder)"
      ]
    ]
  },
  {
    "id": 590,
    "db_id": "book_1",
    "nlq": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT book.title FROM book JOIN orders ON orders.idorder IN (SELECT orders.idorder FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') AND book.isbn NOT IN (SELECT book.isbn FROM book JOIN orders ON orders.idorder IN (SELECT orders.idorder FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith'))",
        "SELECT book.title FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'Peter Doe') EXCEPT SELECT book.title FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON orders.idclient = client.idclient WHERE client.name = 'James Smith')",
        "SELECT book.title FROM book INNER JOIN orders ON orders.idorder IN (SELECT idorder FROM orders INNER JOIN client ON client.idclient = orders.idclient WHERE client.name = 'Peter Doe') LEFT JOIN orders AS odjAMES ON orders.idorder = odjAMES.idorder AND odjAMES.idclient IN (SELECT idclient FROM client WHERE name = 'James Smith') WHERE odjAMES.idorder IS NULL",
        "SELECT DISTINCT b.title FROM book b WHERE EXISTS (SELECT 1 FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name = 'Peter Doe' AND o.idorder IN (SELECT idorder FROM orders WHERE isbn = b.isbn)) AND NOT EXISTS (SELECT 1 FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name = 'James Smith' AND o.idorder IN (SELECT idorder FROM orders WHERE isbn = b.isbn))",
        "SELECT DISTINCT title FROM book WHERE isbn IN (SELECT isbn FROM orders, client WHERE orders.idclient = client.idclient AND client.name = 'Peter Doe') AND isbn NOT IN (SELECT isbn FROM orders, client WHERE orders.idclient = client.idclient AND client.name = 'James Smith')",
        "SELECT DISTINCT title FROM book WHERE isbn IN (SELECT isbn FROM orders JOIN client ON client.idclient = orders.idclient WHERE client.name = 'Peter Doe') AND isbn NOT IN (SELECT isbn FROM orders JOIN client ON client.idclient = orders.idclient WHERE client.name = 'James Smith')"
      ]
    ]
  },
  {
    "id": 591,
    "db_id": "book_1",
    "nlq": "Show all client names who have orders for \"Pride and Prejudice\".",
    "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT client.name FROM client JOIN orders ON client.idclient = orders.idclient JOIN book ON book.title = 'Pride and Prejudice' WHERE orders.idorder = book.isbn",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT DISTINCT c.name FROM client c INNER JOIN orders o ON c.idclient = o.idclient INNER JOIN book b ON o.idorder = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT cl.name FROM client AS cl WHERE EXISTS (SELECT 1 FROM orders AS ord INNER JOIN book AS bk ON ord.idorder = bk.isbn WHERE bk.title = 'Pride and Prejudice' AND ord.idclient = cl.idclient)",
        "SELECT c.name FROM client c, orders o, book b WHERE c.idclient = o.idclient AND o.idorder = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT client.name FROM client, orders, book WHERE client.idclient = orders.idclient AND orders.idorder = book.isbn AND book.title = 'Pride and Prejudice'",
        "SELECT DISTINCT name FROM client NATURAL JOIN orders NATURAL JOIN book WHERE title = 'Pride and Prejudice'",
        "SELECT c.name FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book b ON o.idorder = b.isbn WHERE b.title = 'Pride and Prejudice'",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders JOIN book ON isbn = idorder WHERE title = 'Pride and Prejudice')",
        "SELECT DISTINCT name FROM client WHERE EXISTS (SELECT * FROM orders JOIN book ON orders.idorder = book.isbn WHERE book.title = 'Pride and Prejudice' AND client.idclient = orders.idclient)"
      ]
    ]
  },
  {
    "id": 592,
    "db_id": "book_1",
    "nlq": "What are the names of clients who have ordered Pride and Prejudice?",
    "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.name FROM client c JOIN orders o ON c.idclient = o.idclient JOIN book b ON b.title = 'Pride and Prejudice' WHERE b.isbn IN (SELECT isbn FROM orders WHERE idclient = o.idclient)",
        "SELECT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT idorder FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT c.name FROM client c WHERE EXISTS (SELECT 1 FROM orders o JOIN book b ON b.title = 'Pride and Prejudice' AND b.isbn = o.idorder WHERE o.idclient = c.idclient)",
        "SELECT c.name FROM client c INNER JOIN orders o ON c.idclient = o.idclient WHERE o.idorder IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')",
        "SELECT DISTINCT c.name FROM client c, orders o, book b WHERE c.idclient = o.idclient AND o.idorder = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT DISTINCT name FROM client WHERE idclient IN (SELECT idclient FROM orders WHERE idorder IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice'))",
        "SELECT c.name FROM client c WHERE c.idclient IN (SELECT o.idclient FROM orders o INNER JOIN book b ON b.isbn = o.idorder WHERE b.title = 'Pride and Prejudice')",
        "SELECT c.name FROM client c, orders o, book b WHERE c.idclient = o.idclient AND o.idorder = b.isbn AND b.title = 'Pride and Prejudice'",
        "SELECT name FROM client WHERE EXISTS (SELECT * FROM orders INNER JOIN book ON orders.idorder = book.isbn WHERE client.idclient = orders.idclient AND book.title = 'Pride and Prejudice')",
        "SELECT DISTINCT client.name FROM client INNER JOIN orders ON client.idclient = orders.idclient WHERE orders.idorder IN (SELECT isbn FROM book WHERE title = 'Pride and Prejudice')"
      ]
    ]
  },
  {
    "id": 593,
    "db_id": "book_review",
    "nlq": "How many books are there?",
    "gold": "SELECT count(*) FROM book",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM book",
        "SELECT COUNT(book_id) FROM book",
        "SELECT COUNT(1) FROM book",
        "SELECT COUNT(book_id) FROM (SELECT book_id FROM book)",
        "SELECT COUNT(*) FROM (SELECT * FROM book)",
        "SELECT COUNT(*) AS total_books FROM book",
        "SELECT SUM(1) FROM book",
        "SELECT COUNT(DISTINCT book_id) AS TotalCount FROM book"
      ]
    ]
  },
  {
    "id": 594,
    "db_id": "book_review",
    "nlq": "List the titles of books in ascending alphabetical order.",
    "gold": "SELECT Title FROM book ORDER BY Title ASC",
    "infer_predictions": [
      [
        "SELECT title FROM book ORDER BY title ASC",
        "SELECT B.title FROM book B ORDER BY B.title ASC",
        "SELECT DISTINCT B.title FROM book B ORDER BY B.title ASC",
        "SELECT title FROM book GROUP BY title ORDER BY title ASC",
        "SELECT title FROM book WHERE title IS NOT NULL ORDER BY title ASC"
      ]
    ]
  },
  {
    "id": 595,
    "db_id": "book_review",
    "nlq": "List the titles of books in descending order of pages.",
    "gold": "SELECT Title FROM book ORDER BY Pages DESC",
    "infer_predictions": [
      [
        "SELECT title FROM book ORDER BY pages DESC",
        "SELECT b.title FROM book b ORDER BY b.pages DESC",
        "SELECT title FROM (SELECT title, pages FROM book) ORDER BY pages DESC",
        "SELECT title FROM (SELECT title, pages FROM book ORDER BY pages DESC)"
      ]
    ]
  },
  {
    "id": 596,
    "db_id": "book_review",
    "nlq": "What are the types and release dates of books?",
    "gold": "SELECT TYPE ,  Release FROM book",
    "infer_predictions": [
      [
        "SELECT type, release FROM book;",
        "SELECT type, MAX(release) FROM book GROUP BY type;",
        "SELECT type, MIN(release) FROM book GROUP BY type;",
        "SELECT type, release FROM book ORDER BY release DESC;",
        "SELECT type, release FROM book WHERE type IS NOT NULL AND release IS NOT NULL;",
        "SELECT type, release FROM book GROUP BY type, release HAVING COUNT(*) >= 1;"
      ]
    ]
  },
  {
    "id": 597,
    "db_id": "book_review",
    "nlq": "What are the maximum and minimum number of chapters for each book?",
    "gold": "SELECT max(Chapters) ,  min(Chapters) FROM book",
    "infer_predictions": [
      [
        "SELECT book.title, MAX(book.chapters) as max_chapters, MIN(book.chapters) as min_chapters FROM book GROUP BY book.book_id",
        "SELECT title, MAX(chapters) as maximum_chapters, MIN(chapters) as minimum_chapters FROM book GROUP BY book_id",
        "SELECT b.title, MAX(b.chapters) as Max_Chapters, MIN(b.chapters) as Min_Chapters FROM book b GROUP BY b.book_id",
        "SELECT book_id, MAX(chapters), MIN(chapters) FROM book GROUP BY book_id",
        "SELECT B.title, MAX(B.chapters), MIN(B.chapters) FROM book B GROUP BY B.book_id",
        "SELECT BK.title, (SELECT MAX(t.chapters) FROM book t WHERE BK.book_id = t.book_id), (SELECT MIN(s.chapters) FROM book s WHERE BK.book_id = s.book_id) FROM book BK GROUP BY BK.book_id",
        "SELECT title, MAX(chapters) as max_ch, MIN(chapters) as min_ch FROM book GROUP BY book_id",
        "SELECT book.title AS BookTitle, (SELECT MAX(chapters) FROM book b2 WHERE b2.book_id = book.book_id) AS MaximumChapters, (SELECT MIN(chapters) FROM book b3 WHERE b3.book_id = book.book_id) AS MinimumChapters FROM book"
      ]
    ]
  },
  {
    "id": 598,
    "db_id": "book_review",
    "nlq": "What are the titles of books that are not \"Poet\"?",
    "gold": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE type != 'Poet'",
        "SELECT title FROM book WHERE NOT type = 'Poet'",
        "SELECT title FROM book WHERE type <> 'Poet'",
        "SELECT title FROM book WHERE type IS NOT 'Poet'",
        "SELECT B.title FROM book B WHERE B.type != 'Poet'",
        "SELECT B.title FROM book B WHERE B.type <> 'Poet'",
        "SELECT title FROM book WHERE ('Poet' != type)",
        "SELECT B.title FROM book AS B WHERE NOT B.type = 'Poet'",
        "SELECT title FROM book WHERE NOT(type = 'Poet')"
      ]
    ]
  },
  {
    "id": 599,
    "db_id": "book_review",
    "nlq": "What is the average rating in reviews?",
    "gold": "SELECT avg(Rating) FROM review",
    "infer_predictions": [
      [
        "SELECT AVG(rating) FROM review",
        "SELECT AVG(r.rating) AS average_rating FROM review r",
        "SELECT AVG(review.rating) AS avg_rating FROM review",
        "SELECT (SUM(rating) * 1.0 / COUNT(rating)) FROM review",
        "SELECT (SUM(r.rating) * 1.0 / COUNT(r.rating)) FROM review AS r",
        "SELECT AVG(r.rating) FROM (SELECT rating FROM review) AS r",
        "SELECT AVG(review.rating) FROM (SELECT * FROM review) as review",
        "SELECT (SUM(review.rating) * 1.0 / COUNT(review.rating)) FROM review"
      ]
    ]
  },
  {
    "id": 600,
    "db_id": "book_review",
    "nlq": "What are the titles and ratings of books?",
    "gold": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
    "infer_predictions": [
      [
        "SELECT book.title, review.rating FROM book JOIN review ON book.book_id = review.book_id",
        "SELECT b.title, r.rating FROM book b, review r WHERE b.book_id = r.book_id",
        "SELECT t.title, rt.rating FROM book AS t INNER JOIN review AS rt ON t.book_id = rt.book_id",
        "SELECT title, rating FROM book INNER JOIN review USING (book_id)",
        "SELECT title, rating FROM book b CROSS JOIN review r WHERE b.book_id = r.book_id",
        "SELECT (title), (rating) FROM book JOIN review USING (book_id)",
        "SELECT tbl1.title, tbl2.rating FROM book tbl1 JOIN review tbl2 ON tbl1.book_id = tbl2.book_id",
        "SELECT title, r.rating FROM book JOIN review r ON book.book_id = r.book_id",
        "SELECT title, rating FROM book NATURAL JOIN review"
      ]
    ]
  },
  {
    "id": 601,
    "db_id": "book_review",
    "nlq": "What is the rating of the book with the largest number of chapters?",
    "gold": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.rating FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.chapters = (SELECT MAX(chapters) FROM book)",
        "SELECT rating FROM review WHERE book_id IN (SELECT book_id FROM book WHERE chapters = (SELECT MAX(chapters) FROM book))",
        "SELECT r.rating FROM review AS r INNER JOIN book AS b ON r.book_id = b.book_id WHERE b.chapters = (SELECT MAX(chapters) FROM book)",
        "SELECT rating FROM review, book WHERE review.book_id = book.book_id AND book.chapters = (SELECT MAX(chapters) FROM book)",
        "SELECT review.rating FROM review JOIN book ON review.book_id = book.book_id WHERE book.chapters = (SELECT MAX(chapters) FROM book)",
        "SELECT MAX(rating) FROM review WHERE book_id = (SELECT book_id FROM book ORDER BY chapters DESC LIMIT 1)",
        "SELECT r.rating FROM review AS r WHERE r.book_id = (SELECT book_id FROM book WHERE chapters = (SELECT MAX(chapters) FROM book))"
      ]
    ]
  },
  {
    "id": 602,
    "db_id": "book_review",
    "nlq": "What is the rank of the book with the smallest number of pages?",
    "gold": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.rank FROM review r JOIN book b ON r.book_id = b.book_id WHERE b.pages = (SELECT MIN(pages) FROM book)",
        "SELECT rank FROM review WHERE book_id IN (SELECT book_id FROM book WHERE pages = (SELECT MIN(pages) FROM book))",
        "SELECT rank FROM review WHERE book_id = (SELECT book_id FROM book ORDER BY pages ASC LIMIT 1)",
        "SELECT r.rank FROM review r INNER JOIN (SELECT book_id FROM book ORDER BY pages ASC LIMIT 1) AS min_book ON r.book_id = min_book.book_id",
        "SELECT R.rank FROM review AS R, book AS B WHERE B.book_id = R.book_id AND B.pages = (SELECT MIN(pages) FROM book)",
        "SELECT rank FROM review WHERE book_id = (SELECT book_id FROM book WHERE pages = (SELECT MIN(pages) FROM book))",
        "SELECT review.rank FROM review JOIN book ON review.book_id = book.book_id WHERE book.pages = (SELECT MIN(pages) FROM book)",
        "SELECT review.rank FROM review, book WHERE review.book_id = book.book_id AND book.pages = (SELECT MIN(pages) FROM book)",
        "SELECT rank FROM review AS R WHERE R.book_id = (SELECT B.book_id FROM book B WHERE B.pages = (SELECT MIN(pages) FROM book))"
      ]
    ]
  },
  {
    "id": 603,
    "db_id": "book_review",
    "nlq": "What is the title of the book with the highest rank in the review?",
    "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM book WHERE book_id = (SELECT book_id FROM review ORDER BY rank DESC LIMIT 1)",
        "SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rank LIMIT 1",
        "SELECT title FROM book WHERE book_id IN (SELECT book_id FROM review ORDER BY rank DESC LIMIT 1)",
        "SELECT b.title FROM book b, review r WHERE b.book_id = r.book_id ORDER BY r.rank DESC LIMIT 1",
        "SELECT title FROM book WHERE book_id = (SELECT book_id FROM review WHERE rank = (SELECT MIN(rank) FROM review))",
        "SELECT title FROM book WHERE book_id = (SELECT r.book_id FROM review r ORDER BY r.rank ASC LIMIT 1)",
        "SELECT (SELECT title FROM book WHERE book_id = r.book_id) FROM review r ORDER BY rank LIMIT 1",
        "SELECT title FROM book WHERE EXISTS (SELECT NULL FROM review WHERE book.book_id = review.book_id ORDER BY rank DESC LIMIT 1)",
        "SELECT title FROM book b WHERE b.book_id = (SELECT r.book_id FROM review r WHERE r.rank = (SELECT MIN(rank) FROM review))"
      ]
    ]
  },
  {
    "id": 604,
    "db_id": "book_review",
    "nlq": "What is the average number of readers for books of type \"Novel\"?",
    "gold": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
    "infer_predictions": [
      [
        "SELECT AVG(R.readers_in_million) FROM review R JOIN book B ON R.book_id = B.book_id WHERE B.type = 'Novel'",
        "SELECT AVG(readers_in_million) FROM review WHERE book_id IN (SELECT book_id FROM book WHERE type = 'Novel')",
        "SELECT AVG(review.readers_in_million) AS average_readers FROM review INNER JOIN book ON review.book_id = book.book_id WHERE book.type = 'Novel'",
        "SELECT (SELECT AVG(readers_in_million) FROM review WHERE book_id = book.book_id) FROM book WHERE type = 'Novel'",
        "SELECT AVG(R.readers_in_million) FROM book B, review R WHERE B.book_id = R.book_id AND B.type = 'Novel'",
        "SELECT (SELECT AVG(R.readers_in_million) FROM review R WHERE R.book_id = B.book_id) FROM book B WHERE B.type = 'Novel'",
        "SELECT AVG(reader_count) FROM (SELECT readers_in_million AS reader_count FROM review JOIN book ON review.book_id = book.book_id WHERE book.type = 'Novel')",
        "SELECT AVG(readers_in_million) FROM review JOIN book ON review.book_id = book.book_id WHERE book.type = 'Novel'",
        "SELECT AVG(R.readers_in_million) FROM review R WHERE EXISTS (SELECT 1 FROM book B WHERE B.type = 'Novel' AND B.book_id = R.book_id)"
      ]
    ]
  },
  {
    "id": 605,
    "db_id": "book_review",
    "nlq": "For each book type return the type and the number of books of that type.",
    "gold": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
    "infer_predictions": [
      [
        "SELECT type, COUNT(book_id) AS number_of_books FROM book GROUP BY type",
        "SELECT b.type, COUNT(b.book_id) AS number_of_books FROM book AS b GROUP BY b.type",
        "SELECT type, COUNT(*) AS number_of_books FROM book GROUP BY type",
        "SELECT book.type, COUNT(book.book_id) FROM book GROUP BY book.type",
        "SELECT b.type, COUNT(DISTINCT b.book_id) FROM book b GROUP BY b.type",
        "SELECT book.type, COUNT(1) FROM book GROUP BY book.type",
        "SELECT book.type, COUNT(book.book_id) AS number_of_books FROM book GROUP BY book.type",
        "SELECT book.type, Sum(Case When book.book_id IS NOT NULL THEN 1 ELSE 0 END) AS number_of_books FROM book GROUP BY book.type"
      ]
    ]
  },
  {
    "id": 606,
    "db_id": "book_review",
    "nlq": "What is the most common type of books?",
    "gold": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT type FROM book GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT b.type FROM book b GROUP BY b.type ORDER BY COUNT(b.type) DESC LIMIT 1",
        "SELECT type FROM (SELECT type, COUNT(*) AS cnt FROM book GROUP BY type) ORDER BY cnt DESC LIMIT 1",
        "SELECT type FROM book GROUP BY type HAVING COUNT(type) = (SELECT MAX(count) FROM (SELECT type, COUNT(*) AS count FROM book GROUP BY type))",
        "SELECT type FROM book WHERE book_id IN (SELECT book_id FROM book GROUP BY type ORDER BY COUNT(type) DESC LIMIT 1)",
        "SELECT b.type FROM (SELECT type, COUNT(*) AS count FROM book GROUP BY type) b ORDER BY b.count DESC LIMIT 1",
        "SELECT type, COUNT(*) AS total FROM book GROUP BY type ORDER BY total DESC LIMIT 1",
        "WITH TypeCounts AS (SELECT type, COUNT(*) as Cnt FROM book GROUP BY type) SELECT type FROM TypeCounts ORDER BY Cnt DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 607,
    "db_id": "book_review",
    "nlq": "What are the types of books that have at least three books belonging to?",
    "gold": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3",
        "SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(*) >= 3",
        "SELECT DISTINCT type FROM book WHERE type IN (SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3)",
        "SELECT b.type FROM (SELECT type, COUNT(book_id) AS count_of_books FROM book GROUP BY type) b WHERE b.count_of_books >= 3",
        "SELECT type FROM (SELECT b.type FROM book b GROUP BY b.type) AS grouped WHERE (SELECT COUNT(*) FROM book WHERE type = grouped.type) >= 3",
        "SELECT b.type FROM book b JOIN (SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3) AS valid_types ON b.type = valid_types.type GROUP BY b.type",
        "SELECT DISTINCT b.type FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE type = b.type GROUP BY type HAVING COUNT(book_id) >= 3)",
        "SELECT DISTINCT b.type FROM book AS b INNER JOIN (SELECT type FROM book GROUP BY type HAVING COUNT(book_id) >= 3) AS temp ON b.type = temp.type"
      ]
    ]
  },
  {
    "id": 608,
    "db_id": "book_review",
    "nlq": "List the titles of books in ascending order of the ratings in review?",
    "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
    "infer_predictions": [
      [
        "SELECT B.title FROM book B JOIN review R ON B.book_id = R.book_id ORDER BY R.rating ASC;",
        "SELECT title FROM book WHERE book_id IN (SELECT book_id FROM review ORDER BY rating ASC);",
        "SELECT title FROM book AS B, review AS R WHERE B.book_id = R.book_id ORDER BY R.rating;",
        "SELECT book.title FROM book INNER JOIN review ON book.book_id = review.book_id ORDER BY review.rating;",
        "SELECT B.title FROM book B INNER JOIN (SELECT book_id, rating FROM review ORDER BY rating ASC) AS R ON B.book_id = R.book_id;",
        "SELECT B.title FROM (SELECT title, book_id FROM book) AS B JOIN (SELECT rating, book_id FROM review ORDER BY rating ASC) AS R ON B.book_id = R.book_id;",
        "SELECT title FROM (SELECT book_id, title FROM book) WHERE book_id IN (SELECT book_id FROM review ORDER BY rating ASC);",
        "SELECT B.title FROM book B, review R WHERE B.book_id = R.book_id ORDER BY R.rating ASC;",
        "SELECT (SELECT title FROM book WHERE book_id = R.book_id) AS Title FROM review R ORDER BY R.rating ASC;",
        "SELECT title FROM book WHERE EXISTS (SELECT 1 FROM review WHERE book.book_id = review.book_id ORDER BY rating ASC);"
      ]
    ]
  },
  {
    "id": 609,
    "db_id": "book_review",
    "nlq": "List the title and audio length for all the books in descending order of the number of readers.",
    "gold": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
    "infer_predictions": [
      [
        "SELECT book.title, book.audio FROM book JOIN review ON book.book_id = review.book_id GROUP BY book.title, book.audio ORDER BY SUM(review.readers_in_million) DESC",
        "SELECT b.title, b.audio FROM book b INNER JOIN review r ON b.book_id = r.book_id GROUP BY b.title, b.audio ORDER BY SUM(r.readers_in_million) DESC",
        "SELECT title, audio FROM book WHERE book_id IN (SELECT book_id FROM review GROUP BY book_id ORDER BY SUM(readers_in_million) DESC) GROUP BY title, audio",
        "SELECT title, audio FROM book WHERE exists (SELECT 1 FROM review WHERE review.book_id = book.book_id) GROUP BY book_id ORDER BY (SELECT SUM(readers_in_million) FROM review WHERE review.book_id = book.book_id) DESC",
        "SELECT b.title AS Title, b.audio AS Audiolen FROM book b JOIN (SELECT book_id, SUM(readers_in_million) AS Total_Readers FROM review GROUP BY book_id) AS revSUM ON b.book_id = revSUM.book_id ORDER BY revSUM.Total_Readers DESC",
        "SELECT book.title, book.audio FROM book, review WHERE book.book_id = review.book_id GROUP BY book.title, book.audio ORDER BY TOTAL(review.readers_in_million) DESC",
        "SELECT b.title, b.audio FROM review r JOIN book b ON r.book_id = b.book_id GROUP BY b.title, b.audio ORDER BY SUM(r.readers_in_million) DESC",
        "SELECT title, audio FROM book AS b JOIN (SELECT book_id FROM review GROUP BY book_id ORDER BY SUM(readers_in_million) DESC) AS r USING(book_id)",
        "SELECT title, audio FROM book JOIN (SELECT book_id, SUM(readers_in_million) as readers_total FROM review GROUP BY book_id ORDER BY readers_total DESC) SubQuery ON book.book_id = SubQuery.book_id"
      ]
    ]
  },
  {
    "id": 610,
    "db_id": "book_review",
    "nlq": "How many books do not have reviews?",
    "gold": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review)",
        "SELECT COUNT(book.book_id) FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.book_id IS NULL",
        "SELECT COUNT(*) FROM book WHERE NOT EXISTS (SELECT 1 FROM review WHERE review.book_id = book.book_id)",
        "SELECT COUNT(*) FROM book b WHERE b.book_id NOT IN (SELECT r.book_id FROM review r)",
        "SELECT COUNT(book.book_id) FROM book WHERE book_id NOT IN (SELECT DISTINCT book_id FROM review)",
        "SELECT COUNT(*) FROM book AS b LEFT OUTER JOIN review AS r ON b.book_id = r.book_id WHERE r.book_id IS NULL",
        "SELECT (COUNT(*) - COUNT(review.book_id)) FROM book LEFT JOIN review ON book.book_id = review.book_id",
        "SELECT COUNT(*) FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.review_id IS NULL",
        "SELECT COUNT(b.book_id) FROM book b WHERE NOT EXISTS (SELECT NULL FROM review r WHERE r.book_id = b.book_id)"
      ]
    ]
  },
  {
    "id": 611,
    "db_id": "book_review",
    "nlq": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "gold": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
    "infer_predictions": [
      [
        "SELECT DISTINCT b1.type FROM book b1 JOIN book b2 ON b1.type = b2.type WHERE b1.chapters > 75 AND b2.chapters < 50",
        "SELECT type FROM book WHERE chapters > 75 INTERSECT SELECT type FROM book WHERE chapters < 50",
        "SELECT b.type FROM book b WHERE EXISTS (SELECT 1 FROM book WHERE type = b.type AND chapters > 75) AND EXISTS (SELECT 1 FROM book WHERE type = b.type AND chapters < 50)",
        "SELECT DISTINCT b.type FROM book b, book b2 WHERE b.type = b2.type AND b.chapters > 75 AND b2.chapters < 50",
        "SELECT DISTINCT type FROM (SELECT type FROM book WHERE chapters > 75 UNION ALL SELECT type FROM book WHERE chapters < 50) WHERE type IN (SELECT type FROM book GROUP BY type HAVING COUNT(type) > 1)",
        "SELECT type FROM (SELECT type, MAX(chapters) AS max_chapters, MIN(chapters) AS min_chapters FROM book GROUP BY type) WHERE max_chapters > 75 AND min_chapters < 50",
        "SELECT DISTINCT type FROM book WHERE book_id IN (SELECT book_id FROM book WHERE chapters > 75 UNION ALL SELECT book_id FROM book WHERE chapters < 50)",
        "SELECT b.type FROM book b WHERE (SELECT COUNT(*) FROM book WHERE type = b.type AND chapters > 75) > 0 AND (SELECT COUNT(*) FROM book WHERE type = b.type AND chapters < 50) > 0",
        "SELECT b.type FROM book b JOIN book b2 ON b.type = b2.type WHERE b.chapters > 75 GROUP BY b.type HAVING MIN(b2.chapters) < 50",
        "SELECT DISTINCT b.type FROM book b WHERE (SELECT MIN(chapters) FROM book WHERE type = b.type) < 50 AND (SELECT MAX(chapters) FROM book WHERE type = b.type) > 75"
      ]
    ]
  },
  {
    "id": 612,
    "db_id": "book_review",
    "nlq": "How many distinct types of book are there?",
    "gold": "SELECT count(DISTINCT TYPE) FROM book",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT type) FROM book",
        "SELECT COUNT(*) FROM (SELECT DISTINCT type FROM book)",
        "SELECT SUM(1) FROM (SELECT DISTINCT type FROM book)",
        "SELECT COUNT(DISTINCT type) AS num_types FROM book",
        "SELECT SUM(1) AS num_types FROM (SELECT DISTINCT type FROM book)"
      ]
    ]
  },
  {
    "id": 613,
    "db_id": "book_review",
    "nlq": "What are the type and title of the books that are not rated?",
    "gold": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
    "infer_predictions": [
      [
        "SELECT book.type, book.title FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.rating IS NULL",
        "SELECT type, title FROM book WHERE book_id NOT IN (SELECT book_id FROM review WHERE rating IS NOT NULL)",
        "SELECT type, title FROM book EXCEPT SELECT book.type, book.title FROM book JOIN review ON book.book_id = review.book_id WHERE review.rating IS NOT NULL",
        "SELECT type, title FROM book b WHERE NOT EXISTS (SELECT 1 FROM review r WHERE r.book_id = b.book_id AND r.rating IS NOT NULL)",
        "SELECT book.type, book.title FROM book LEFT OUTER JOIN review ON book.book_id = review.book_id WHERE review.rating IS NULL",
        "SELECT type, title FROM book WHERE book_id NOT IN (SELECT DISTINCT book_id FROM review WHERE rating > 0)",
        "SELECT DISTINCT book.type, book.title FROM book LEFT JOIN review ON book.book_id = review.book_id WHERE review.rating IS NULL",
        "SELECT book.type, book.title FROM book WHERE book.book_id NOT IN (SELECT review.book_id FROM review WHERE review.rating IS NOT NULL)",
        "SELECT b.type, b.title FROM book b LEFT JOIN review r ON r.book_id = b.book_id WHERE r.rating IS NULL",
        "SELECT b.type, b.title FROM book b WHERE NOT EXISTS (SELECT NULL FROM review WHERE review.book_id = b.book_id AND rating IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "nlq": "How many customers are there?",
    "gold": "SELECT count(*) FROM customer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customer",
        "SELECT COUNT(customer_id) FROM customer",
        "SELECT COUNT(1) FROM customer",
        "SELECT COUNT(*) AS total_customers FROM customer",
        "SELECT COUNT(customer_id) AS customer_count FROM customer",
        "SELECT total_count FROM (SELECT COUNT(*) AS total_count FROM customer)",
        "SELECT customer_count FROM (SELECT COUNT(DISTINCT customer_id) AS customer_count FROM customer)"
      ]
    ]
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "nlq": "Count the number of customers.",
    "gold": "SELECT count(*) FROM customer",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM customer",
        "SELECT COUNT(customer_id) FROM customer",
        "SELECT COUNT(1) FROM customer",
        "SELECT COUNT(*) AS total_customers FROM customer",
        "SELECT COUNT(customer_id) AS customer_count FROM customer",
        "SELECT COUNT(*) FROM (SELECT * FROM customer)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT customer_id FROM customer)"
      ]
    ]
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "nlq": "List the names of customers in ascending order of level of membership.",
    "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
    "infer_predictions": [
      [
        "SELECT name FROM customer ORDER BY level_of_membership ASC",
        "SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC",
        "SELECT name FROM (SELECT * FROM customer) ORDER BY level_of_membership ASC",
        "SELECT name FROM (SELECT name, level_of_membership FROM customer) ORDER BY level_of_membership ASC"
      ]
    ]
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "nlq": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
    "infer_predictions": [
      [
        "SELECT name FROM customer ORDER BY level_of_membership ASC",
        "SELECT name FROM customer GROUP BY level_of_membership, name ORDER BY level_of_membership",
        "SELECT name FROM customer WHERE level_of_membership IS NOT NULL ORDER BY level_of_membership",
        "SELECT c.name FROM customer c ORDER BY c.level_of_membership ASC",
        "SELECT name FROM customer WHERE level_of_membership IN (SELECT DISTINCT level_of_membership FROM customer) ORDER BY level_of_membership",
        "SELECT name FROM customer ORDER BY level_of_membership, customer_id ASC",
        "SELECT name FROM customer WHERE level_of_membership BETWEEN 0 AND 100 ORDER BY level_of_membership ASC",
        "SELECT name FROM (SELECT * FROM customer ORDER BY level_of_membership ASC) ORDER BY level_of_membership ASC"
      ]
    ]
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "nlq": "What are the nationalities and card credits of customers?",
    "gold": "SELECT Nationality ,  Card_Credit FROM customer",
    "infer_predictions": [
      [
        "SELECT nationality, card_credit FROM customer",
        "SELECT c.nationality, c.card_credit FROM customer c",
        "SELECT customer.nationality AS Nation, customer.card_credit AS Credit FROM customer",
        "SELECT customer.nationality, customer.card_credit FROM customer GROUP BY customer.nationality, customer.card_credit",
        "SELECT c.nationality, c.card_credit FROM customer c WHERE c.nationality IS NOT NULL AND c.card_credit IS NOT NULL",
        "SELECT DISTINCT nationality, card_credit FROM customer WHERE nationality IS NOT NULL ORDER BY nationality, card_credit",
        "SELECT nationality AS Nationality, card_credit AS CreditCard FROM customer ORDER BY Nationality"
      ]
    ]
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "nlq": "Find the nationality and card credit of each customer.",
    "gold": "SELECT Nationality ,  Card_Credit FROM customer",
    "infer_predictions": [
      [
        "SELECT nationality, card_credit FROM customer",
        "SELECT fc.nationality, fc.card_credit FROM customer fc",
        "SELECT nationality, card_credit FROM customer WHERE customer_id IN (SELECT customer_id FROM customer)",
        "SELECT cd.nationality, cd.card_credit FROM customer cd WHERE EXISTS (SELECT 1 FROM customer WHERE customer_id = cd.customer_id)",
        "SELECT ns.nationality, ns.card_credit FROM customer ns GROUP BY ns.nationality, ns.card_credit",
        "SELECT nty.nationality, nty.card_credit FROM customer nty ORDER BY nty.card_credit DESC"
      ]
    ]
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "nlq": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
    "infer_predictions": [
      [
        "SELECT name FROM customer WHERE nationality IN ('Australia', 'England')",
        "SELECT DISTINCT name FROM customer WHERE nationality = 'Australia' OR nationality = 'England'",
        "SELECT name FROM customer WHERE nationality = 'Australia' UNION SELECT name FROM customer WHERE nationality = 'England'",
        "SELECT customer.name FROM customer WHERE customer.nationality IN ('Australia', 'England')",
        "SELECT c.name FROM customer c WHERE c.nationality IN ('England', 'Australia')",
        "SELECT DISTINCT c.name FROM customer c WHERE c.nationality IN ('England', 'Australia')",
        "SELECT name FROM customer WHERE nationality = 'Australia' UNION ALL SELECT name FROM customer WHERE nationality = 'England' AND name NOT IN (SELECT name FROM customer WHERE nationality = 'Australia')",
        "SELECT name FROM customer WHERE nationality LIKE 'England' OR nationality LIKE 'Australia'",
        "SELECT DISTINCT(name) FROM customer WHERE nationality IN ('Australia', 'England')"
      ]
    ]
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "nlq": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
    "infer_predictions": [
      [
        "SELECT name FROM customer WHERE nationality IN ('Australia', 'England')",
        "SELECT name FROM customer WHERE nationality = 'Australia' OR nationality = 'England'",
        "SELECT c.name FROM customer c WHERE c.nationality = 'Australia' OR c.nationality = 'England'",
        "SELECT c.name FROM customer AS c WHERE c.nationality IN ('Australia', 'England')",
        "SELECT DISTINCT c.name FROM customer c WHERE c.nationality = 'England' OR c.nationality = 'Australia'",
        "SELECT name FROM customer WHERE nationality IN (SELECT nationality FROM customer WHERE nationality = 'England' OR nationality = 'Australia')",
        "SELECT c.name FROM customer AS c WHERE c.nationality IN (SELECT distinct nationality FROM customer WHERE nationality IN ('Australia', 'England'))",
        "SELECT name FROM customer WHERE nationality = 'Australia' UNION SELECT name FROM customer WHERE nationality = 'England'",
        "SELECT customer.name FROM customer WHERE customer.nationality IN ('England', 'Australia')"
      ]
    ]
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "nlq": "What is the average card credit of customers with membership level higher than 1?",
    "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
    "infer_predictions": [
      [
        "SELECT AVG(card_credit) FROM customer WHERE level_of_membership > 1",
        "SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1",
        "SELECT AVG(card_credit) AS average_credit FROM customer WHERE level_of_membership > 1",
        "SELECT AVG(card_credit) FROM customer c WHERE c.level_of_membership > 1",
        "SELECT AVG(customer.card_credit) AS average_credit FROM customer WHERE customer.level_of_membership > 1",
        "SELECT AVG(c.card_credit) AS AvgCredit FROM customer c WHERE c.level_of_membership > '1'",
        "SELECT AVG(card_credit) FROM (SELECT card_credit FROM customer WHERE level_of_membership > 1) AS temp"
      ]
    ]
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "nlq": "Find the average card credit customers whose membership level is above 1.",
    "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
    "infer_predictions": [
      [
        "SELECT AVG(card_credit) FROM customer WHERE level_of_membership > 1;",
        "SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > 1;",
        "SELECT AVG(card_credit) AS average_credit FROM customer WHERE level_of_membership > 1;",
        "SELECT AVG(c.card_credit) AS average_credit FROM customer AS c WHERE c.level_of_membership > 1;",
        "SELECT AVG(card_credit) FROM customer WHERE level_of_membership > 1 GROUP BY level_of_membership;",
        "SELECT AVG(c.card_credit) FROM customer c WHERE c.level_of_membership > '1';",
        "SELECT AVG(card_credit) AS avg_credit FROM customer GROUP BY level_of_membership HAVING level_of_membership > 1;",
        "SELECT AVG(card_credit) FROM (SELECT card_credit FROM customer WHERE level_of_membership > 1) AS sub;"
      ]
    ]
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "nlq": "What is the card credit of the customer with the highest membership level?",
    "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer);",
        "SELECT card_credit FROM customer WHERE level_of_membership IN (SELECT MAX(level_of_membership) FROM customer);",
        "SELECT c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(level_of_membership) FROM customer);",
        "SELECT c.card_credit FROM customer c ORDER BY c.level_of_membership DESC LIMIT 1;",
        "SELECT card_credit FROM customer ORDER BY level_of_membership DESC LIMIT 1;",
        "SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(c.level_of_membership) FROM customer c);",
        "SELECT card_credit FROM customer c1 WHERE c1.level_of_membership = (SELECT MAX(c2.level_of_membership) FROM customer c2);",
        "SELECT MAX(c.card_credit) FROM customer c JOIN (SELECT MAX(level_of_membership) AS max_level FROM customer) cm ON c.level_of_membership = cm.max_level;",
        "SELECT c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(level_of_membership) FROM customer c2)"
      ]
    ]
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "nlq": "Find the customer with the highest membership level and return his or her card credit.",
    "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer);",
        "SELECT c.card_credit FROM customer c ORDER BY c.level_of_membership DESC LIMIT 1;",
        "SELECT card_credit FROM customer WHERE level_of_membership = (SELECT MAX(level_of_membership) FROM customer LIMIT 1);",
        "SELECT c.card_credit FROM customer c WHERE c.level_of_membership = (SELECT MAX(level_of_membership) FROM customer) LIMIT 1;",
        "SELECT card_credit FROM (SELECT card_credit, RANK() OVER (ORDER BY level_of_membership DESC) as rk FROM customer) WHERE rk = 1;",
        "SELECT card_credit FROM customer WHERE level_of_membership IN (SELECT DISTINCT MAX(level_of_membership) FROM customer);",
        "SELECT card_credit FROM customer c1 WHERE NOT EXISTS (SELECT 1 FROM customer c2 WHERE c2.level_of_membership > c1.level_of_membership);",
        "SELECT card_credit FROM customer WHERE level_of_membership = (SELECT level_of_membership FROM customer ORDER BY level_of_membership DESC LIMIT 1);"
      ]
    ]
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "nlq": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
    "infer_predictions": [
      [
        "SELECT nationality, COUNT(customer_id) as num_customers FROM customer GROUP BY nationality",
        "SELECT c.nationality, COUNT(c.customer_id) as num_customers FROM customer c GROUP BY c.nationality",
        "SELECT NATIONALITY, COUNT(DISTINCT customer_id) FROM customer GROUP BY nationality",
        "SELECT c.nationality, COUNT(DISTINCT c.customer_id) FROM customer c GROUP BY c.nationality",
        "SELECT nationality, COUNT(*) FROM customer GROUP BY nationality",
        "SELECT c.nationality, COUNT(*) as total FROM customer c GROUP BY c.nationality",
        "SELECT c.nationality, COUNT(c.customer_id) FROM customer c GROUP BY c.nationality ORDER BY c.nationality",
        "SELECT customer.nationality, COUNT(*) FROM customer GROUP BY customer.nationality ORDER BY nationality DESC"
      ]
    ]
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "nlq": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
    "infer_predictions": [
      [
        "SELECT nationality, COUNT(customer_id) FROM customer GROUP BY nationality",
        "SELECT nationality, COUNT(DISTINCT customer_id) AS number_of_customers FROM customer GROUP BY nationality",
        "SELECT nationality, COUNT(*) AS count FROM customer GROUP BY nationality",
        "SELECT c.nationality, COUNT(c.customer_id) FROM customer c GROUP BY c.nationality",
        "SELECT nationality, COUNT(1) FROM customer GROUP BY nationality",
        "SELECT nationality, COUNT(customer.customer_id) AS total_customers FROM customer GROUP BY nationality",
        "SELECT c.nationality, COUNT(DISTINCT c.customer_id) FROM customer c GROUP BY c.nationality",
        "SELECT c.nationality, COUNT(c.customer_id) AS customer_count FROM customer c GROUP BY c.nationality",
        "SELECT nationality, COUNT(*) FROM customer GROUP BY nationality",
        "SELECT nationality, COUNT(*) FROM customer GROUP BY nationality HAVING COUNT(*) > 0"
      ]
    ]
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "nlq": "Show the most common nationality of customers.",
    "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT nationality, COUNT(*) AS frequency FROM customer GROUP BY nationality ORDER BY frequency DESC LIMIT 1",
        "SELECT nationality FROM (SELECT nationality, COUNT(nationality) as cnt FROM customer GROUP BY nationality) ORDER BY cnt DESC LIMIT 1",
        "SELECT nationality FROM customer GROUP BY nationality HAVING COUNT(nationality) = (SELECT MAX(cnt) FROM (SELECT nationality, COUNT(*) as cnt FROM customer GROUP BY nationality) subquery)",
        "SELECT nationality FROM customer WHERE nationality IS NOT NULL GROUP BY nationality ORDER BY COUNT(customer_id) DESC LIMIT 1",
        "SELECT nationality, COUNT(nationality) as total FROM customer GROUP BY nationality ORDER BY total DESC LIMIT 1",
        "SELECT SUBSTR(nationality,1, LENGTH(nationality)) AS most_common_nationality FROM customer GROUP BY most_common_nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "nlq": "Which nationality does the most customers have?",
    "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.nationality FROM customer c GROUP BY c.nationality ORDER BY COUNT(c.customer_id) DESC LIMIT 1",
        "SELECT nationality FROM (SELECT nationality, COUNT(customer_id) as num_customers FROM customer GROUP BY nationality) ORDER BY num_customers DESC LIMIT 1",
        "SELECT nationality, COUNT(*) as total FROM customer GROUP BY nationality ORDER BY total DESC LIMIT 1",
        "WITH nationality_counts AS (SELECT nationality, COUNT(*) AS total_customers FROM customer GROUP BY nationality) SELECT nationality FROM nationality_counts ORDER BY total_customers DESC LIMIT 1",
        "WITH RankedNationalities AS (SELECT nationality, RANK() OVER (ORDER BY COUNT(customer_id) DESC) as rank FROM customer GROUP BY nationality) SELECT nationality FROM RankedNationalities WHERE rank = 1",
        "SELECT nationality FROM customer WHERE nationality = (SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT n.nationality FROM (SELECT nationality FROM customer GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1) as n"
      ]
    ]
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "nlq": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
    "infer_predictions": [
      [
        "SELECT DISTINCT c1.nationality FROM customer c1 WHERE EXISTS (SELECT 1 FROM customer c2 WHERE c2.nationality = c1.nationality AND c2.card_credit < 50) AND EXISTS (SELECT 1 FROM customer c3 WHERE c3.nationality = c1.nationality AND c3.card_credit > 75)",
        "SELECT nationality FROM customer WHERE card_credit < 50 INTERSECT SELECT nationality FROM customer WHERE card_credit > 75",
        "SELECT DISTINCT nationality FROM customer c WHERE (SELECT MIN(card_credit) FROM customer WHERE nationality = c.nationality) < 50 AND (SELECT MAX(card_credit) FROM customer WHERE nationality = c.nationality) > 75",
        "SELECT c.nationality FROM customer c JOIN (SELECT nationality, MIN(card_credit) AS min_credit, MAX(card_credit) AS max_credit FROM customer GROUP BY nationality) AS t ON c.nationality = t.nationality WHERE t.min_credit < 50 AND t.max_credit > 75",
        "SELECT nationality FROM customer GROUP BY nationality HAVING MIN(card_credit) < 50 AND MAX(card_credit) > 75",
        "WITH Credit_Extremes AS (SELECT nationality, MIN(card_credit) AS MinCredit, MAX(card_credit) AS MaxCredit FROM customer GROUP BY nationality) SELECT nationality FROM Credit_Extremes WHERE MinCredit < 50 AND MaxCredit > 75",
        "SELECT DISTINCT first.nationality FROM customer first, customer second WHERE first.nationality = second.nationality AND first.card_credit < 50 AND second.card_credit > 75",
        "SELECT DISTINCT nationality FROM customer AS c1 WHERE card_credit < 50 AND nationality IN (SELECT nationality FROM customer AS c2 WHERE card_credit > 75)",
        "SELECT nationality FROM (SELECT nationality, CASE WHEN card_credit < 50 THEN 'low' WHEN card_credit > 75 THEN 'high' ELSE 'medium' END AS credit_range FROM customer) GROUP BY nationality HAVING COUNT(DISTINCT credit_range) > 1",
        "WITH Low_Credits AS (SELECT nationality FROM customer WHERE card_credit < 50), High_Credits AS (SELECT nationality FROM customer WHERE card_credit > 75) SELECT DISTINCT Low_Credits.nationality FROM Low_Credits JOIN High_Credits ON Low_Credits.nationality = High_Credits.nationality"
      ]
    ]
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "nlq": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
    "infer_predictions": [
      [
        "SELECT DISTINCT c1.nationality FROM customer c1 JOIN customer c2 ON c1.nationality = c2.nationality WHERE c1.card_credit > 50 AND c2.card_credit < 75",
        "SELECT nationality FROM customer WHERE card_credit > 50 INTERSECT SELECT nationality FROM customer WHERE card_credit < 75",
        "SELECT a.nationality FROM (SELECT nationality FROM customer WHERE card_credit > 50) a JOIN (SELECT nationality FROM customer WHERE card_credit < 75) b ON a.nationality = b.nationality",
        "SELECT DISTINCT nationality FROM customer c WHERE EXISTS (SELECT 1 FROM customer c1 WHERE c1.nationality = c.nationality AND c1.card_credit > 50) AND EXISTS (SELECT 1 FROM customer c2 WHERE c2.nationality = c.nationality AND c2.card_credit < 75)",
        "SELECT x.nationality FROM (SELECT DISTINCT nationality FROM customer WHERE card_credit > 50) x, (SELECT DISTINCT nationality FROM customer WHERE card_credit < 75) y WHERE x.nationality = y.nationality",
        "SELECT nationality FROM customer WHERE card_credit > 50 GROUP BY nationality HAVING MIN(card_credit) < 75",
        "SELECT c.nationality FROM customer c WHERE (SELECT COUNT(*) FROM customer c1 WHERE c1.nationality = c.nationality AND c1.card_credit > 50) > 0 AND (SELECT COUNT(*) FROM customer c2 WHERE c2.nationality = c.nationality AND c2.card_credit < 75) > 0",
        "SELECT a.nationality FROM (SELECT nationality FROM customer WHERE card_credit > 50) AS a INNER JOIN (SELECT nationality FROM customer WHERE card_credit < 75) AS b ON a.nationality = b.nationality",
        "SELECT DISTINCT nationality FROM customer GROUP BY nationality HAVING MAX(card_credit) > 50 AND MIN(card_credit) < 75"
      ]
    ]
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "nlq": "Show the names of customers and names of dishes they order.",
    "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
    "infer_predictions": [
      [
        "SELECT customer.name, customer_order.dish_name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id",
        "SELECT c.name, co.dish_name FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id",
        "SELECT customer.name AS Customer_Name, customer_order.dish_name AS Dish_Name FROM customer, customer_order WHERE customer.customer_id = customer_order.customer_id",
        "SELECT DISTINCT c.name, co.dish_name FROM customer AS c, customer_order AS co WHERE c.customer_id = co.customer_id",
        "SELECT c.name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY c.name",
        "SELECT name, dish_name FROM customer JOIN customer_order USING(customer_id)",
        "SELECT cname, dname FROM (SELECT name as cname, customer_id FROM customer) cu JOIN (SELECT dish_name as dname, customer_id FROM customer_order) co ON cu.customer_id = co.customer_id",
        "SELECT c.name AS Customer, co.dish_name AS Dish FROM customer c CROSS JOIN customer_order co ON c.customer_id = co.customer_id",
        "SELECT c.name, co.dish_name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name, co.dish_name",
        "SELECT c.name AS customer_name, co.dish_name as order_dish FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id"
      ]
    ]
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "nlq": "For each order, return the customer name and the dish name.",
    "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
    "infer_predictions": [
      [
        "SELECT customer.name, customer_order.dish_name FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id",
        "SELECT c.name, o.dish_name FROM customer_order AS o INNER JOIN customer AS c ON o.customer_id = c.customer_id",
        "SELECT name, dish_name FROM customer_order, customer WHERE customer_order.customer_id = customer.customer_id",
        "SELECT name, dish_name FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id",
        "SELECT (SELECT name FROM customer WHERE customer_id = customer_order.customer_id), dish_name FROM customer_order",
        "SELECT c.name, co.dish_name FROM customer AS c, customer_order AS co WHERE c.customer_id = co.customer_id",
        "SELECT customer.name AS CustomerName, customer_order.dish_name AS DishName FROM customer_order LEFT JOIN customer ON customer_order.customer_id = customer.customer_id",
        "SELECT cust.name, ord.dish_name FROM customer_order ord JOIN customer cust ON ord.customer_id = cust.customer_id",
        "SELECT customer.name, customer_order.dish_name FROM customer_order, customer WHERE customer_order.customer_id = customer.customer_id"
      ]
    ]
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "nlq": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
    "infer_predictions": [
      [
        "SELECT customer.name, customer_order.dish_name FROM customer_order INNER JOIN customer ON customer_order.customer_id = customer.customer_id ORDER BY customer_order.quantity DESC",
        "SELECT c.name, co.dish_name FROM customer_order co JOIN customer c ON co.customer_id = c.customer_id ORDER BY co.quantity DESC",
        "SELECT name, dish_name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id ORDER BY quantity DESC",
        "SELECT (SELECT name FROM customer WHERE customer_id = co.customer_id) AS name, dish_name FROM customer_order co ORDER BY quantity DESC",
        "SELECT cu.name, ord.dish_name FROM customer cu JOIN customer_order ord ON cu.customer_id = ord.customer_id ORDER BY ord.quantity DESC",
        "SELECT C.name AS CustomerName, CO.dish_name AS DishName FROM customer C INNER JOIN customer_order CO ON C.customer_id = CO.customer_id ORDER BY CO.quantity DESC",
        "SELECT cust.name, order_tbl.dish_name FROM customer_order order_tbl JOIN customer cust ON order_tbl.customer_id = cust.customer_id ORDER BY order_tbl.quantity DESC",
        "SELECT (SELECT c.name FROM customer c WHERE c.customer_id = o.customer_id), o.dish_name FROM customer_order o ORDER BY o.quantity DESC"
      ]
    ]
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "nlq": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
    "infer_predictions": [
      [
        "SELECT c.name, co.dish_name FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id ORDER BY co.quantity DESC",
        "SELECT customer.name, customer_order.dish_name FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id ORDER BY customer_order.quantity DESC",
        "SELECT customer.name AS customer_name, customer_order.dish_name AS ordered_dish FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id ORDER BY customer_order.quantity DESC",
        "SELECT name, dish_name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id ORDER BY quantity DESC",
        "SELECT customer.name, customer_order.dish_name FROM customer, customer_order WHERE customer.customer_id = customer_order.customer_id ORDER BY customer_order.quantity DESC",
        "SELECT name AS customer_name, dish_name AS dish_ordered FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id ORDER BY quantity DESC",
        "SELECT C.name, CO.dish_name FROM customer C JOIN customer_order CO ON C.customer_id = CO.customer_id ORDER BY CO.quantity DESC",
        "SELECT C.name AS customer_name, CO.dish_name FROM customer C, customer_order CO WHERE C.customer_id = CO.customer_id ORDER BY CO.quantity DESC",
        "SELECT name, dish_name FROM customer_order INNER JOIN customer ON customer_order.customer_id = customer.customer_id ORDER BY customer_order.quantity DESC"
      ]
    ]
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "nlq": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "gold": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
    "infer_predictions": [
      [
        "SELECT name, SUM(quantity) AS total_quantity FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id",
        "SELECT c.name, TOTAL(co.quantity) AS total_quantity FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id",
        "SELECT name, SUM(quantity) FROM customer AS c JOIN customer_order AS co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.name",
        "SELECT c.name, SUM(co.quantity) AS total_quantity FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY name",
        "SELECT c.name, TOTAL(co.quantity) AS TotalOrders FROM customer c, customer_order co WHERE c.customer_id = co.customer_id GROUP BY c.name",
        "SELECT c.name, SUM(co.quantity) FROM customer c, customer_order co WHERE c.customer_id = co.customer_id GROUP BY c.name",
        "SELECT name, TOTAL(quantity) AS total_quantity FROM customer NATURAL JOIN customer_order GROUP BY customer_id",
        "SELECT c.name, SUM(quantity) AS total_orders FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.name",
        "SELECT c.name, SUM(co.quantity) TotalOrders FROM customer AS c LEFT JOIN customer_order AS co ON c.customer_id = co.customer_id GROUP BY c.name",
        "SELECT name, TOTAL(quantity) FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id, name"
      ]
    ]
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "nlq": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "gold": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
    "infer_predictions": [
      [
        "SELECT customer.name, SUM(customer_order.quantity) FROM customer_order JOIN customer ON customer_order.customer_id = customer.customer_id GROUP BY customer_order.customer_id",
        "SELECT name, SUM(quantity) AS total_quantity FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id",
        "SELECT c.name, SUM(co.quantity) FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id",
        "SELECT c.name, TOTAL(co.quantity) AS total FROM customer c, customer_order co WHERE c.customer_id = co.customer_id GROUP BY co.customer_id",
        "SELECT name, TOTAL(quantity) FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer_order.customer_id",
        "SELECT customer.name, SUM(customer_order.quantity) AS TotalQuantities FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id",
        "SELECT c.name, SUM(co.quantity) TOTAL FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id",
        "SELECT name, SUM(quantity) AS QuantityTotal FROM customer, customer_order WHERE customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id",
        "SELECT c.name, SUM(co.quantity) total_ordered_qnty FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id"
      ]
    ]
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "nlq": "Show the customers with total quantity of order bigger than 1.",
    "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
    "infer_predictions": [
      [
        "SELECT c.customer_id, c.name FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1",
        "SELECT customer.customer_id, customer.name FROM customer INNER JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id HAVING TOTAL(customer_order.quantity) > 1",
        "SELECT c.customer_id, c.name FROM customer c, customer_order co WHERE c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1",
        "SELECT name, customer_id FROM customer WHERE customer_id IN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING SUM(quantity) > 1)",
        "SELECT distinct c.name, c.customer_id FROM customer c JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1",
        "SELECT c.name, c.customer_id FROM customer c WHERE EXISTS (SELECT NULL FROM customer_order co WHERE co.customer_id = c.customer_id GROUP BY co.customer_id HAVING SUM(co.quantity) > 1)",
        "SELECT name, customer_id FROM (SELECT customer.name, customer_order.customer_id, SUM(customer_order.quantity) AS total_quantity FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer_order.customer_id) WHERE total_quantity > 1",
        "SELECT customer.name, customer.customer_id FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id GROUP BY customer.customer_id HAVING SUM(customer_order.quantity) > 1",
        "SELECT c.name, c.customer_id FROM customer c JOIN (SELECT customer_id, SUM(quantity) as total_quantity FROM customer_order GROUP BY customer_id) co ON c.customer_id = co.customer_id WHERE co.total_quantity > 1",
        "SELECT customer.name, customer.customer_id FROM customer, customer_order WHERE customer.customer_id = customer_order.customer_id GROUP BY customer.name, customer_order.customer_id HAVING SUM(customer_order.quantity) > 1"
      ]
    ]
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "nlq": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
    "infer_predictions": [
      [
        "SELECT c.name FROM customer c WHERE c.customer_id IN (SELECT co.customer_id FROM customer_order co GROUP BY co.customer_id HAVING SUM(co.quantity) > 1)",
        "SELECT c.name FROM customer c JOIN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING SUM(quantity) > 1) AS q ON c.customer_id = q.customer_id",
        "SELECT name FROM customer WHERE customer_id IN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING SUM(quantity) > 1)",
        "SELECT DISTINCT c.name FROM customer c, customer_order co WHERE c.customer_id = co.customer_id GROUP BY co.customer_id HAVING SUM(co.quantity) > 1",
        "SELECT name FROM customer WHERE EXISTS (SELECT NULL FROM customer_order WHERE customer.customer_id = customer_order.customer_id GROUP BY customer_order.customer_id HAVING SUM(quantity) > 1)",
        "SELECT DISTINCT c.name FROM customer c INNER JOIN customer_order co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1",
        "SELECT c.name FROM customer c WHERE c.customer_id IN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING TOTAL(quantity) > 1)",
        "SELECT name FROM customer WHERE customer_id IN (SELECT customer_id FROM customer_order GROUP BY customer_id HAVING COUNT(*) > 1 AND SUM(quantity) > 1)",
        "SELECT c.name FROM customer AS c JOIN customer_order AS co ON c.customer_id = co.customer_id GROUP BY c.customer_id HAVING SUM(co.quantity) > 1"
      ]
    ]
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "nlq": "Show distinct managers of branches.",
    "gold": "SELECT DISTINCT Manager FROM branch",
    "infer_predictions": [
      [
        "SELECT DISTINCT manager FROM branch",
        "SELECT manager FROM branch GROUP BY manager",
        "SELECT b.manager FROM branch b GROUP BY b.manager",
        "SELECT DISTINCT b.manager FROM branch b WHERE b.manager IS NOT NULL",
        "SELECT manager FROM branch WHERE manager IN (SELECT DISTINCT manager FROM branch)",
        "SELECT DISTINCT manager FROM branch WHERE branch_id IS NOT NULL",
        "SELECT DISTINCT manager FROM branch b WHERE EXISTS (SELECT 1 FROM branch WHERE branch.manager = b.manager)",
        "SELECT manager FROM (SELECT DISTINCT manager FROM branch) AS unique_managers",
        "SELECT DISTINCT manager FROM branch WHERE manager LIKE '%'"
      ]
    ]
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "nlq": "Who are the distinct managers of branches?",
    "gold": "SELECT DISTINCT Manager FROM branch",
    "infer_predictions": [
      [
        "SELECT DISTINCT manager FROM branch",
        "SELECT manager FROM branch GROUP BY manager",
        "SELECT b.manager FROM branch b GROUP BY b.manager",
        "SELECT DISTINCT b.manager FROM branch b",
        "SELECT DISTINCT manager FROM branch ORDER BY manager",
        "SELECT b.manager FROM branch b WHERE b.manager IS NOT NULL GROUP BY b.manager",
        "SELECT DISTINCT manager FROM (SELECT manager FROM branch) AS ManagerList",
        "SELECT manager FROM (SELECT DISTINCT manager FROM branch) AS UniqueManagers",
        "SELECT DISTINCT(b.manager) FROM branch b",
        "SELECT DISTINCT manager FROM branch WHERE manager <> ''"
      ]
    ]
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "nlq": "List the names of customers that do not have any order.",
    "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
    "infer_predictions": [
      [
        "SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)",
        "SELECT name FROM customer EXCEPT SELECT name FROM customer JOIN customer_order ON customer.customer_id = customer_order.customer_id",
        "SELECT c.name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
        "SELECT c.name FROM customer c WHERE NOT EXISTS (SELECT 1 FROM customer_order co WHERE co.customer_id = c.customer_id)",
        "SELECT name FROM customer WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_order)",
        "SELECT DISTINCT name FROM customer c WHERE c.customer_id NOT IN (SELECT customer_id FROM customer_order)",
        "SELECT name FROM customer c WHERE NOT EXISTS (SELECT NULL FROM customer_order co WHERE co.customer_id = c.customer_id)",
        "SELECT c.name FROM customer c WHERE NOT EXISTS (SELECT * FROM customer_order co WHERE c.customer_id = co.customer_id)",
        "SELECT name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
        "SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order WHERE customer_order.customer_id = customer.customer_id)"
      ]
    ]
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "nlq": "Which customers do not have any order? Give me the customer names.",
    "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
    "infer_predictions": [
      [
        "SELECT name FROM customer WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM customer_order)",
        "SELECT name FROM customer WHERE NOT EXISTS (SELECT 1 FROM customer_order WHERE customer.customer_id = customer_order.customer_id)",
        "SELECT name FROM customer LEFT JOIN customer_order ON customer.customer_id = customer_order.customer_id WHERE customer_order.customer_id IS NULL",
        "SELECT customer.name FROM customer WHERE customer.customer_id NOT IN (SELECT customer_order.customer_id FROM customer_order)",
        "SELECT customer.name FROM customer LEFT OUTER JOIN customer_order ON customer.customer_id = customer_order.customer_id WHERE customer_order.customer_id IS NULL",
        "SELECT name FROM customer c WHERE NOT EXISTS (SELECT * FROM customer_order co WHERE co.customer_id = c.customer_id)",
        "SELECT c.name FROM customer c LEFT JOIN customer_order co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL",
        "SELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_order.customer_id FROM customer_order WHERE customer_order.customer_id = customer.customer_id)",
        "SELECT c.name FROM customer c WHERE NOT EXISTS (SELECT 1 FROM customer_order co WHERE co.customer_id = c.customer_id)",
        "SELECT name FROM customer a WHERE NOT EXISTS (SELECT 1 FROM customer_order b WHERE b.customer_id = a.customer_id)"
      ]
    ]
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "nlq": "How many members are there?",
    "gold": "SELECT count(*) FROM member",
    "infer_predictions": [
      [
        "SELECT COUNT(member_id) FROM member",
        "SELECT COUNT(*) FROM member",
        "SELECT COUNT(1) FROM member",
        "SELECT SUM(1) FROM member",
        "SELECT COUNT(member_id) AS member_count FROM member",
        "SELECT COUNT(member.member_id) AS total_members FROM member",
        "SELECT (SELECT COUNT(*) FROM member)",
        "SELECT COUNT(*) FROM (SELECT member_id FROM member)"
      ]
    ]
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "nlq": "List the names of members in ascending order of age.",
    "gold": "SELECT Name FROM member ORDER BY Age ASC",
    "infer_predictions": [
      [
        "SELECT name FROM member ORDER BY age ASC",
        "SELECT m.name FROM member m ORDER BY m.age",
        "SELECT name AS nm FROM member ORDER BY age ASC",
        "SELECT mbr.name FROM member mbr ORDER BY mbr.age ASC"
      ]
    ]
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "nlq": "What are the names and nationalities of the members?",
    "gold": "SELECT Name ,  Nationality FROM member",
    "infer_predictions": [
      [
        "SELECT name, nationality FROM member",
        "SELECT m.name, m.nationality FROM member m",
        "SELECT DISTINCT m.name, m.nationality FROM member m",
        "SELECT name AS MemberName, nationality AS MemberNationality FROM member",
        "SELECT m.name AS MemberName, m.nationality AS MemberNationality FROM member m",
        "SELECT member.name AS MemberName, member.nationality AS MemberNationality FROM member",
        "SELECT name, nationality FROM member ORDER BY name",
        "SELECT m.name, m.nationality FROM member m ORDER BY m.name DESC"
      ]
    ]
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "nlq": "List the names of members whose nationality is not `` England '' .",
    "gold": "select name from member where nationality != \"england\"",
    "infer_predictions": [
      [
        "SELECT name FROM member WHERE nationality != 'England'",
        "SELECT name FROM member WHERE NOT nationality = 'England'",
        "SELECT m.name FROM member m WHERE m.nationality != 'England'",
        "SELECT member.name FROM member WHERE member.nationality <> 'England'",
        "SELECT m.name FROM member m WHERE m.nationality NOT LIKE 'England'",
        "SELECT DISTINCT name FROM member WHERE nationality <> 'England'",
        "SELECT name FROM member WHERE nationality NOT IN ('England')",
        "SELECT m.name FROM member m WHERE NOT (m.nationality = 'England')",
        "SELECT DISTINCT m.name FROM member m WHERE m.nationality NOT LIKE 'England'",
        "SELECT name FROM member WHERE (nationality <> 'England')"
      ]
    ]
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "nlq": "Show the names of members whose age is either 19 or 20.",
    "gold": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
    "infer_predictions": [
      [
        "SELECT name FROM member WHERE age IN (19, 20)",
        "SELECT name FROM member WHERE age = 19 OR age = 20",
        "SELECT m.name FROM member m WHERE m.age BETWEEN 19 AND 20",
        "SELECT m.name FROM member m WHERE m.age = 19 OR m.age = 20",
        "SELECT name FROM member WHERE age >= 19 AND age <= 20",
        "SELECT m.name FROM member AS m WHERE m.age IN (19, 20)",
        "SELECT m.name FROM member AS m WHERE m.age = 19 UNION SELECT m.name FROM member AS m WHERE m.age = 20",
        "SELECT member.name FROM member WHERE member.age IN (19,20)",
        "SELECT m.name FROM member m WHERE m.age IN (SELECT age FROM member WHERE age = 19 UNION SELECT age FROM member WHERE age = 20)"
      ]
    ]
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "nlq": "What is the name of the oldest member?",
    "gold": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM member WHERE age = (SELECT MAX(age) FROM member)",
        "SELECT M.name FROM member M ORDER BY M.age DESC LIMIT 1",
        "SELECT name FROM member WHERE age = (SELECT age FROM member ORDER BY age DESC LIMIT 1)",
        "SELECT name FROM member WHERE age IN (SELECT MAX(age) FROM member)",
        "SELECT M.name FROM (SELECT name, age FROM member ORDER BY age DESC) M LIMIT 1",
        "SELECT name FROM member m1 WHERE NOT EXISTS (SELECT 1 FROM member m2 WHERE m2.age > m1.age)",
        "SELECT M.name FROM member M WHERE M.age = (SELECT MAX(age) FROM member)",
        "SELECT M.name FROM member M WHERE M.age = (SELECT age FROM member M2 WHERE M2.age = (SELECT MAX(age) FROM member))"
      ]
    ]
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "nlq": "Show different nationalities along with the number of members of each nationality.",
    "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
    "infer_predictions": [
      [
        "SELECT nationality, COUNT(member_id) AS count FROM member GROUP BY nationality",
        "SELECT m.nationality, COUNT(m.member_id) FROM member m GROUP BY m.nationality",
        "SELECT nationality, COUNT(*) FROM member GROUP BY nationality",
        "SELECT m.nationality, COUNT(*) AS total_members FROM member m GROUP BY m.nationality",
        "SELECT nationality, COUNT(member_id) AS num_members FROM member GROUP BY nationality",
        "SELECT DISTINCT nationality, COUNT(member_id) OVER (PARTITION BY nationality) AS members_count FROM member",
        "SELECT m.nationality, COUNT(DISTINCT m.member_id) AS count FROM member m GROUP BY m.nationality",
        "SELECT nationality, COUNT(*) AS count_of_members FROM member GROUP BY nationality",
        "SELECT nationality, COUNT(1) FROM member GROUP BY nationality",
        "SELECT nationality, COUNT(member_id) FROM member GROUP BY 1"
      ]
    ]
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "nlq": "Please show the most common nationality of members.",
    "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT nationality FROM member GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT M.nationality FROM member M GROUP BY M.nationality ORDER BY COUNT(M.nationality) DESC LIMIT 1",
        "SELECT M.nationality FROM member M GROUP BY M.nationality HAVING COUNT(M.nationality) = (SELECT MAX(count) FROM (SELECT COUNT(M2.nationality) as count FROM member M2 GROUP BY M2.nationality))",
        "SELECT nationality FROM (SELECT nationality, COUNT(*) as num FROM member GROUP BY nationality) ORDER BY num DESC LIMIT 1",
        "SELECT nationality FROM member WHERE nationality IN (SELECT nationality FROM member GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT M.nationality FROM (SELECT nationality, COUNT(nationality) AS count FROM member GROUP BY nationality) M ORDER BY M.count DESC LIMIT 1",
        "SELECT M1.nationality FROM member M1 WHERE NOT EXISTS (SELECT 1 FROM member M2 WHERE M2.nationality != M1.nationality GROUP BY M2.nationality HAVING COUNT(*) > (SELECT COUNT(*) FROM member M3 WHERE M3.nationality = M1.nationality)) LIMIT 1",
        "SELECT nationality, COUNT(nationality) AS Popularity FROM member GROUP BY nationality ORDER BY Popularity DESC LIMIT 1",
        "WITH NatCounts AS (SELECT nationality, COUNT(*) as count FROM member GROUP BY nationality) SELECT nationality FROM NatCounts ORDER BY count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "nlq": "Show the nations that have at least two members.",
    "gold": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2",
        "SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(m.member_id) >= 2",
        "SELECT nationality FROM (SELECT nationality, COUNT(*) AS num_members FROM member GROUP BY nationality) WHERE num_members >= 2",
        "SELECT m.nationality FROM member m WHERE m.nationality IS NOT NULL GROUP BY m.nationality HAVING COUNT(*) >= 2",
        "SELECT DISTINCT m.nationality FROM member m JOIN (SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2) AS subq ON m.nationality = subq.nationality",
        "SELECT m.nationality FROM (SELECT nationality, COUNT(member_id) AS total FROM member GROUP BY nationality) m WHERE m.total >= 2",
        "SELECT DISTINCT nationality FROM member WHERE nationality IN (SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2)",
        "SELECT m.nationality FROM (SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2) m",
        "SELECT m.nationality FROM member m GROUP BY m.nationality HAVING COUNT(DISTINCT m.member_id) >= 2",
        "SELECT m.nationality FROM member m WHERE m.nationality IN (SELECT nationality FROM member GROUP BY nationality HAVING COUNT(member_id) >= 2)"
      ]
    ]
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "nlq": "Show the names of club leaders and the names of clubs they joined.",
    "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
    "infer_predictions": [
      [
        "SELECT m.name, c.club_name FROM club_leader cl JOIN member m ON cl.member_id = m.member_id JOIN club c ON cl.club_id = c.club_id",
        "SELECT member.name AS LeaderName, club.club_name AS ClubName FROM member INNER JOIN club_leader ON member.member_id = club_leader.member_id INNER JOIN club ON club_leader.club_id = club.club_id",
        "SELECT name, club_name FROM member, club, club_leader WHERE member.member_id = club_leader.member_id AND club.club_id = club_leader.club_id",
        "SELECT Leader.name, Club.club_name FROM club AS Club JOIN club_leader AS cl ON Club.club_id = cl.club_id JOIN member AS Leader ON cl.member_id = Leader.member_id",
        "SELECT m.name, c.club_name FROM club_leader INNER JOIN member m ON club_leader.member_id = m.member_id INNER JOIN club c ON club_leader.club_id = c.club_id",
        "SELECT DISTINCT m.name, c.club_name FROM club_leader cl LEFT JOIN member m ON cl.member_id = m.member_id LEFT JOIN club c ON cl.club_id = c.club_id",
        "SELECT m1.name, c1.club_name FROM club_leader AS cl1 INNER JOIN member AS m1 ON m1.member_id = cl1.member_id INNER JOIN club AS c1 ON c1.club_id = cl1.club_id",
        "SELECT (SELECT name FROM member WHERE member_id = cl.member_id) AS LeaderName, (SELECT club_name FROM club WHERE club_id = cl.club_id) AS ClubName FROM club_leader cl",
        "SELECT name, club_name FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id",
        "SELECT m.name AS LeaderName, c.club_name AS ClubName FROM member m CROSS JOIN club_leader cl ON m.member_id = cl.member_id CROSS JOIN club c ON cl.club_id = c.club_id"
      ]
    ]
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "nlq": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
    "infer_predictions": [
      [
        "SELECT member.name FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id WHERE club.overall_ranking > 100",
        "SELECT m.name FROM member m INNER JOIN club_leader cl ON m.member_id = cl.member_id INNER JOIN club c ON cl.club_id = c.club_id WHERE c.overall_ranking > 100",
        "SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE club_id IN (SELECT club_id FROM club WHERE overall_ranking > 100))",
        "SELECT DISTINCT name FROM member m, club_leader cl, club c WHERE m.member_id = cl.member_id AND cl.club_id = c.club_id AND c.overall_ranking > 100",
        "SELECT name FROM member WHERE EXISTS (SELECT 1 FROM club_leader JOIN club ON club_leader.club_id = club.club_id WHERE club_leader.member_id = member.member_id AND club.overall_ranking > 100)",
        "SELECT nm.name FROM club_leader cl LEFT JOIN member nm ON cl.member_id = nm.member_id LEFT JOIN club cb ON cl.club_id = cb.club_id WHERE cb.overall_ranking > 100",
        "SELECT nm.name AS leader_name FROM member nm JOIN club_leader cl ON nm.member_id = cl.member_id JOIN club cb ON cl.club_id = cb.club_id WHERE cb.overall_ranking > 100",
        "SELECT m.name FROM club c JOIN club_leader cl ON c.club_id = cl.club_id JOIN member m ON cl.member_id = m.member_id WHERE c.overall_ranking > 100",
        "SELECT nm.name FROM club_leader cl, member nm INNER JOIN club ON cl.club_id = club.club_id WHERE cl.member_id = nm.member_id AND club.overall_ranking > 100",
        "SELECT name FROM member WHERE member_id IN (SELECT cl.member_id FROM club_leader cl INNER JOIN club cb ON cl.club_id = cb.club_id WHERE cb.overall_ranking > 100)"
      ]
    ]
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "nlq": "Show the names of club leaders that joined their club before 2018.",
    "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
    "infer_predictions": [
      [
        "SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < 2018",
        "SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE year_join < 2018)",
        "SELECT m.name FROM member m, club_leader cl WHERE m.member_id = cl.member_id AND cl.year_join < 2018",
        "SELECT m.name FROM member m INNER JOIN club_leader cl ON m.member_id = cl.member_id AND cl.year_join < 2018",
        "SELECT DISTINCT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < 2018",
        "SELECT m.name FROM member AS m JOIN club_leader AS cl ON m.member_id = cl.member_id WHERE cl.year_join < 2018",
        "SELECT m.name FROM member m WHERE EXISTS (SELECT 1 FROM club_leader cl WHERE cl.member_id = m.member_id AND cl.year_join < 2018)",
        "SELECT m.name FROM member m WHERE m.member_id IN (SELECT cl.member_id FROM club_leader cl WHERE cl.year_join < 2018)",
        "SELECT name FROM member WHERE EXISTS (SELECT member_id FROM club_leader WHERE member_id = member.member_id AND year_join < 2018)",
        "SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id WHERE cl.year_join < '2018'"
      ]
    ]
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "nlq": "Show the name of the leader of the club named \"Houston\".",
    "gold": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
    "infer_predictions": [
      [
        "SELECT m.name FROM member m JOIN club_leader cl ON m.member_id = cl.member_id JOIN club c ON cl.club_id = c.club_id WHERE c.club_name = 'Houston'",
        "SELECT name FROM member WHERE member_id IN (SELECT member_id FROM club_leader WHERE club_id = (SELECT club_id FROM club WHERE club_name = 'Houston'))",
        "SELECT member.name FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id AND club.club_name = 'Houston'",
        "SELECT m.name FROM member m, club_leader cl, club c WHERE m.member_id = cl.member_id AND cl.club_id = c.club_id AND c.club_name = 'Houston'",
        "SELECT name FROM member WHERE member_id = (SELECT member_id FROM club_leader WHERE club_id = (SELECT club_id FROM club WHERE club_name = 'Houston'))",
        "SELECT m.name FROM member m INNER JOIN club_leader cl ON m.member_id = cl.member_id INNER JOIN club c ON cl.club_id = c.club_id AND c.club_name = 'Houston'",
        "SELECT name FROM member m WHERE m.member_id = (SELECT cl.member_id FROM club_leader cl INNER JOIN club c ON cl.club_id = c.club_id WHERE c.club_name = 'Houston')",
        "SELECT (SELECT name FROM member WHERE member_id = cl.member_id) FROM club_leader cl JOIN club c ON cl.club_id = c.club_id WHERE c.club_name = 'Houston'",
        "SELECT (SELECT name FROM member m WHERE m.member_id = cl.member_id) FROM club_leader cl JOIN club c ON cl.club_id = c.club_id WHERE c.club_name = 'Houston'"
      ]
    ]
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "nlq": "List the names of members that are not club leaders.",
    "gold": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
    "infer_predictions": [
      [
        "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM club_leader)",
        "SELECT M.name FROM member M LEFT JOIN club_leader CL ON M.member_id = CL.member_id WHERE CL.member_id IS NULL",
        "SELECT M.name FROM member M WHERE NOT EXISTS (SELECT 1 FROM club_leader CL WHERE CL.member_id = M.member_id)",
        "SELECT name FROM member WHERE member_id NOT IN (SELECT DISTINCT member_id FROM club_leader)",
        "SELECT name FROM member EXCEPT SELECT name FROM member, club_leader WHERE member.member_id = club_leader.member_id",
        "SELECT name FROM member as M WHERE NOT EXISTS (SELECT 1 FROM club_leader as CL WHERE CL.member_id = M.member_id)",
        "SELECT M.name FROM member M WHERE M.member_id NOT IN (SELECT member_id FROM club_leader)",
        "SELECT DISTINCT M.name FROM member M LEFT JOIN club_leader CL ON M.member_id = CL.member_id WHERE CL.member_id IS NULL",
        "SELECT name FROM member WHERE member_id NOT IN (SELECT CL.member_id FROM club_leader CL)"
      ]
    ]
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "nlq": "Show the nations that have both members older than 22 and members younger than 19.",
    "gold": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
    "infer_predictions": [
      [
        "SELECT DISTINCT nationality FROM member AS m1 WHERE EXISTS (SELECT 1 FROM member AS m2 WHERE m2.age > 22 AND m2.nationality = m1.nationality) AND EXISTS (SELECT 1 FROM member AS m3 WHERE m3.age < 19 AND m3.nationality = m1.nationality)",
        "SELECT m.nationality FROM member m GROUP BY m.nationality HAVING SUM(CASE WHEN m.age > 22 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN m.age < 19 THEN 1 ELSE 0 END) > 0",
        "SELECT nationality FROM member WHERE age > 22 INTERSECT SELECT nationality FROM member WHERE age < 19",
        "SELECT DISTINCT m1.nationality FROM member m1 JOIN member m2 ON m1.nationality = m2.nationality WHERE m1.age > 22 AND m2.age < 19",
        "SELECT nationality FROM (SELECT nationality, MIN(age) AS min_age, MAX(age) AS max_age FROM member GROUP BY nationality) AS ages WHERE min_age < 19 AND max_age > 22",
        "SELECT DISTINCT nationality FROM member WHERE age < 19 AND nationality IN (SELECT DISTINCT nationality FROM member WHERE age > 22)",
        "SELECT DISTINCT a.nationality FROM member a, member b WHERE a.nationality = b.nationality AND a.age < 19 AND b.age > 22",
        "SELECT m1.nationality FROM member m1 WHERE EXISTS (SELECT nationality FROM member WHERE age > 22 AND nationality = m1.nationality) AND EXISTS (SELECT nationality FROM member WHERE age < 19 AND nationality = m1.nationality)",
        "WITH old_members AS (SELECT DISTINCT nationality FROM member WHERE age > 22), young_members AS (SELECT DISTINCT nationality FROM member WHERE age < 19) SELECT nationality FROM old_members JOIN young_members USING (nationality)",
        "SELECT DISTINCT m.nationality FROM member m JOIN member n ON m.nationality = n.nationality WHERE m.age > 22 AND n.age < 19"
      ]
    ]
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "nlq": "What is the average age of all the club leaders?",
    "gold": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
    "infer_predictions": [
      [
        "SELECT AVG(m.age) AS avg_age FROM member m JOIN club_leader cl ON m.member_id = cl.member_id",
        "SELECT AVG(age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader)",
        "SELECT AVG(age) FROM member m WHERE EXISTS (SELECT 1 FROM club_leader cl WHERE cl.member_id = m.member_id)",
        "SELECT AVG(m.age) FROM club_leader cl INNER JOIN member m ON cl.member_id = m.member_id",
        "SELECT AVG(member.age) FROM member INNER JOIN club_leader ON member.member_id = club_leader.member_id",
        "SELECT AVG(member.age) AS average_age FROM member WHERE member_id IN (SELECT club_leader.member_id FROM club_leader)",
        "SELECT AVG(m.age) AS average_leader_age FROM member m INNER JOIN club_leader cl ON m.member_id = cl.member_id",
        "SELECT (SELECT AVG(age) FROM member WHERE member_id IN (SELECT member_id FROM club_leader)) AS avg_age",
        "SELECT AVG(sub.age) FROM (SELECT m.age FROM member m JOIN club_leader cl ON m.member_id = cl.member_id) sub",
        "SELECT AVG(age) AS average_age_of_leaders FROM member WHERE member_id IN (SELECT DISTINCT member_id FROM club_leader)"
      ]
    ]
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "nlq": "Which club name contains the string 'state'?",
    "gold": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
    "infer_predictions": [
      [
        "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
        "SELECT c.club_name FROM club c WHERE c.club_name LIKE '%state%'",
        "SELECT lower(club.club_name) FROM club WHERE lower(club_name) LIKE lower('%state%')",
        "SELECT club_name FROM club WHERE instr(club_name, 'state') > 0",
        "SELECT club_name FROM club WHERE club_name LIKE '_%state%' escape '_'",
        "SELECT club_name FROM club WHERE exists (SELECT 1 FROM club as c WHERE c.club_name = club.club_name AND c.club_name LIKE '%state%')",
        "SELECT club.club_name FROM club WHERE club.club_name like '%state%' GROUP BY club.club_name",
        "SELECT DISTINCT c.club_name FROM club c WHERE c.club_name COLLATE NOCASE LIKE '%state%'"
      ]
    ]
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all collections' subset. List the subsets' names.",
    "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
    "infer_predictions": [
      [
        "SELECT collection_subset_name FROM collection_subsets",
        "SELECT collection_subset_name FROM collection_subsets cs ORDER BY cs.collection_subset_name",
        "SELECT collection_subsets.collection_subset_name FROM collection_subsets ORDER BY collection_subsets.collection_subset_name",
        "SELECT DISTINCT cs.collection_subset_name FROM collection_subsets cs",
        "SELECT collection_subset_name FROM collection_subsets GROUP BY collection_subset_name"
      ]
    ]
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the collection susbset names?",
    "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
    "infer_predictions": [
      [
        "SELECT collection_subset_name FROM collection_subsets",
        "SELECT cs.collection_subset_name FROM collection_subsets cs",
        "SELECT DISTINCT cs.collection_subset_name FROM collection_subsets cs",
        "SELECT collection_subset_name FROM collection_subsets ORDER BY collection_subset_name",
        "SELECT collection_subset_name FROM collection_subsets GROUP BY collection_subset_name",
        "SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IS NOT NULL",
        "SELECT DISTINCT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id > 0",
        "SELECT collection_subset_name FROM collection_subsets WHERE collection_subset_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is detail of collection subset with name 'Top collection'?",
    "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
    "infer_predictions": [
      [
        "SELECT collecrtion_subset_details FROM collection_subsets WHERE collection_subset_name = 'Top collection'",
        "SELECT CS.collecrtion_subset_details FROM collection_subsets CS WHERE CS.collection_subset_name = 'Top collection'",
        "SELECT * FROM (SELECT collecrtion_subset_details FROM collection_subsets WHERE collection_subset_name = 'Top collection')",
        "SELECT D.collecrtion_subset_details FROM collection_subsets D WHERE D.collection_subset_name = 'Top collection'",
        "SELECT SQ.collecrtion_subset_details FROM (SELECT * FROM collection_subsets) SQ WHERE SQ.collection_subset_name = 'Top collection'",
        "SELECT (SELECT collection_subsets.collecrtion_subset_details FROM collection_subsets WHERE collection_subsets.collection_subset_name = 'Top collection')"
      ]
    ]
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What collection details are there on the subset named 'Top collection'?",
    "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
    "infer_predictions": [
      [
        "SELECT c.collection_name, c.collection_description FROM collections c JOIN collection_subset_members m ON m.collection_id = c.collection_id JOIN collection_subsets s ON s.collection_subset_id = m.collection_subset_id WHERE s.collection_subset_name = 'Top collection'",
        "SELECT collection_name, collection_description FROM collections WHERE collection_id IN (SELECT collection_id FROM collection_subset_members WHERE collection_subset_id = (SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name = 'Top collection'))",
        "SELECT collections.collection_name, collections.collection_description FROM collections INNER JOIN collection_subset_members ON collections.collection_id = collection_subset_members.collection_id INNER JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collection_subsets.collection_subset_name = 'Top collection'",
        "SELECT c.collection_name, c.collection_description FROM collections AS c WHERE EXISTS (SELECT 1 FROM collection_subset_members AS m INNER JOIN collection_subsets AS s ON m.collection_subset_id = s.collection_subset_id WHERE m.collection_id = c.collection_id AND s.collection_subset_name = 'Top collection')",
        "SELECT DISTINCT collections.collection_name, collections.collection_description FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.collection_id JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collection_subsets.collection_subset_name = 'Top collection'",
        "SELECT c.collection_name, c.collection_description FROM collection_subsets s, collection_subset_members m, collections c WHERE s.collection_subset_id = m.collection_subset_id AND m.collection_id = c.collection_id AND s.collection_subset_name = 'Top collection'",
        "WITH SubsetCollections AS (SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name = 'Top collection') SELECT collection_name, collection_description FROM collections WHERE collection_id IN (SELECT collection_id FROM collection_subset_members WHERE collection_subset_id IN (SELECT collection_subset_id FROM SubsetCollections))",
        "SELECT c.collection_name, c.collection_description FROM collections c WHERE c.collection_id IN (SELECT collection_id FROM collection_subset_members WHERE collection_subset_id = (SELECT collection_subset_id FROM collection_subsets WHERE collection_subset_name = 'Top collection'))",
        "SELECT collection_name, collection_description FROM collections WHERE collection_id IN (SELECT m.collection_id FROM collection_subset_members m JOIN collection_subsets s ON m.collection_subset_id = s.collection_subset_id WHERE s.collection_subset_name = 'Top collection')",
        "SELECT collection_name, collection_description FROM collections WHERE EXISTS (SELECT * FROM collection_subset_members JOIN collection_subsets ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id WHERE collection_subset_name = 'Top collection' AND collections.collection_id = collection_subset_members.collection_id)"
      ]
    ]
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all documents's subset. List the subset's name.",
    "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
    "infer_predictions": [
      [
        "SELECT ds.document_subset_name FROM document_subsets ds;",
        "SELECT DISTINCT document_subset_name FROM document_subsets;",
        "SELECT document_subset_name FROM document_subsets GROUP BY document_subset_name;",
        "SELECT document_subset_name AS name FROM document_subsets;",
        "SELECT * FROM (SELECT document_subset_name FROM document_subsets);",
        "SELECT document_subset_name FROM document_subsets ORDER BY document_subset_name;",
        "SELECT ds.document_subset_name FROM document_subsets ds ORDER BY ds.document_subset_name;",
        "SELECT DISTINCT ds.document_subset_name FROM document_subsets ds;",
        "SELECT ds.document_subset_name FROM document_subsets ds WHERE ds.document_subset_id IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the document subset names?",
    "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
    "infer_predictions": [
      [
        "SELECT document_subset_name FROM document_subsets",
        "SELECT ds.document_subset_name FROM document_subsets ds",
        "SELECT document_subset_name FROM document_subsets ORDER BY document_subset_name",
        "SELECT ds.document_subset_name FROM document_subsets ds ORDER BY ds.document_subset_name",
        "SELECT document_subset_name FROM document_subsets GROUP BY document_subset_name",
        "SELECT UPPER(document_subset_name) FROM document_subsets",
        "SELECT document_subset_name FROM (SELECT * FROM document_subsets)",
        "SELECT document_subset_name FROM document_subsets WHERE document_subset_id IS NOT NULL",
        "SELECT DISTINCT document_subset_name FROM document_subsets WHERE document_subset_name IS NOT NULL ORDER BY document_subset_name"
      ]
    ]
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the detail of document subset with name 'Best for 2000'?",
    "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
    "infer_predictions": [
      [
        "SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000'",
        "SELECT ds.document_subset_details FROM document_subsets ds WHERE ds.document_subset_name = 'Best for 2000'",
        "SELECT document_subset_details FROM document_subsets WHERE document_subset_name LIKE 'Best for 2000'",
        "SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name LIKE 'Best for 2000'",
        "SELECT document_subset_details FROM document_subsets ds WHERE ds.document_subset_name LIKE 'Best for 2000'",
        "SELECT ds.document_subset_details AS Subset_Details FROM document_subsets ds WHERE ds.document_subset_name = 'Best for 2000'"
      ]
    ]
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the details on the document subsets that are named 'Best for 2000'?",
    "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
    "infer_predictions": [
      [
        "SELECT d.document_subset_details FROM document_subsets d WHERE d.document_subset_name = 'Best for 2000'",
        "SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000'",
        "SELECT document_subset_details FROM document_subsets d WHERE d.document_subset_name LIKE 'Best for 2000'",
        "SELECT ds.document_subset_details FROM document_subsets ds WHERE ds.document_subset_name = 'Best for 2000'",
        "SELECT document_subset_details FROM document_subsets WHERE document_subset_name = 'Best for 2000' COLLATE NOCASE",
        "SELECT ds.document_subset_details FROM document_subsets ds WHERE ds.document_subset_name LIKE 'Best for 2000' ESCAPE '!'",
        "SELECT * FROM document_subsets WHERE document_subset_name = 'Best for 2000' AND document_subset_name IS NOT NULL",
        "SELECT document_subset_details FROM (SELECT * FROM document_subsets) WHERE document_subset_name = 'Best for 2000'"
      ]
    ]
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List document id of all documents.",
    "gold": "SELECT Document_Object_ID FROM Document_Objects;",
    "infer_predictions": [
      [
        "SELECT document_object_id FROM document_objects",
        "SELECT document_objects.document_object_id AS document_object_id FROM document_objects",
        "SELECT DISTINCT document_objects.document_object_id AS document_object_id FROM document_objects",
        "SELECT doc.document_object_id FROM document_objects doc",
        "SELECT doc.document_object_id AS document_object_id FROM document_objects doc",
        "SELECT doc.document_object_id FROM document_objects doc ORDER BY doc.document_object_id",
        "SELECT D.document_object_id FROM document_objects D",
        "SELECT doc_id.document_object_id FROM document_objects doc_id"
      ]
    ]
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the object id of the document objects?",
    "gold": "SELECT Document_Object_ID FROM Document_Objects;",
    "infer_predictions": [
      [
        "SELECT document_object_id FROM document_objects;",
        "SELECT doc.document_object_id FROM document_objects doc;",
        "SELECT document_object_id FROM document_objects ORDER BY document_object_id;",
        "SELECT document_object_id FROM document_objects WHERE document_object_id IS NOT NULL;",
        "SELECT d.document_object_id FROM document_objects d ORDER BY d.document_object_id;",
        "SELECT doc.document_object_id FROM document_objects doc WHERE doc.document_object_id IS NOT NULL;",
        "SELECT DISTINCT d.document_object_id FROM document_objects AS d WHERE d.document_object_id IS NOT NULL ORDER BY d.document_object_id;"
      ]
    ]
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the parent document of document owned by Marlin? List the document id.",
    "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "infer_predictions": [
      [
        "SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin' AND parent_document_object_id IS NOT NULL",
        "SELECT d.parent_document_object_id FROM document_objects d WHERE d.owner = 'Marlin'",
        "SELECT document_object_id FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin')",
        "SELECT parent.document_object_id AS parent_id FROM document_objects doc INNER JOIN document_objects parent ON doc.parent_document_object_id = parent.document_object_id WHERE doc.owner = 'Marlin'",
        "SELECT d1.parent_document_object_id FROM document_objects d1 WHERE d1.owner = 'Marlin' AND d1.parent_document_object_id IS NOT NULL",
        "SELECT (SELECT d.parent_document_object_id FROM document_objects d WHERE d.document_object_id = doc.parent_document_object_id) AS parent_id FROM document_objects doc WHERE doc.owner = 'Marlin'",
        "SELECT p.document_object_id FROM document_objects p INNER JOIN document_objects c ON p.document_object_id = c.parent_document_object_id WHERE c.owner = 'Marlin'",
        "WITH Parent AS (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin') SELECT document_object_id FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM Parent)",
        "SELECT document_object_id FROM document_objects WHERE document_object_id = (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin')"
      ]
    ]
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the document object ids of the objects owned by Marlin?",
    "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "infer_predictions": [
      [
        "SELECT document_object_id FROM document_objects WHERE owner = 'Marlin'",
        "SELECT doc_obj.document_object_id FROM document_objects doc_obj WHERE doc_obj.owner = 'Marlin'",
        "SELECT document_object_id FROM document_objects WHERE owner = 'Marlin' GROUP BY document_object_id",
        "SELECT do.document_object_id FROM document_objects do WHERE do.owner = 'Marlin'",
        "SELECT document_object_id FROM document_objects WHERE owner LIKE 'Marlin' AND owner IS NOT NULL",
        "SELECT document_object_id FROM (SELECT * FROM document_objects WHERE owner = 'Marlin') AS filtered",
        "SELECT document_object_id FROM document_objects WHERE \"owner\" = 'Marlin'"
      ]
    ]
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the owner of document with the Description 'Braeden Collection'?",
    "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "infer_predictions": [
      [
        "SELECT owner FROM document_objects WHERE description = 'Braeden Collection'",
        "SELECT d_o.owner FROM document_objects d_o WHERE d_o.description = 'Braeden Collection'",
        "SELECT doc_objects.owner FROM document_objects doc_objects WHERE doc_objects.description = 'Braeden Collection'",
        "SELECT owner FROM document_objects WHERE description LIKE 'Braeden Collection'",
        "SELECT do.owner FROM document_objects do WHERE do.description LIKE 'Braeden Collection'",
        "SELECT do.owner FROM document_objects AS do WHERE TRIM(do.description) = 'Braeden Collection'",
        "SELECT doc_objects.owner FROM document_objects doc_objects WHERE doc_objects.description = TRIM('Braeden Collection')"
      ]
    ]
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "infer_predictions": [
      [
        "SELECT owner FROM document_objects WHERE description = 'Braeden Collection'",
        "SELECT d.owner FROM document_objects d WHERE d.description = 'Braeden Collection'",
        "SELECT owner FROM document_objects WHERE description LIKE 'Braeden Collection'",
        "SELECT owner FROM document_objects WHERE TRIM(description) = 'Braeden Collection'",
        "SELECT owner FROM document_objects d WHERE d.description = 'Braeden Collection'",
        "SELECT owner FROM document_objects WHERE description = 'Braeden Collection' AND document_object_id IS NOT NULL",
        "SELECT d.owner FROM document_objects d WHERE d.description = 'Braeden Collection' AND d.document_object_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the owner of the parent document of document owned by 'Marlin'?",
    "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "infer_predictions": [
      [
        "SELECT parent.owner FROM document_objects AS child JOIN document_objects AS parent ON child.parent_document_object_id = parent.document_object_id WHERE child.owner = 'Marlin'",
        "SELECT d2.owner FROM document_objects d1 INNER JOIN document_objects d2 ON d1.parent_document_object_id = d2.document_object_id WHERE d1.owner = 'Marlin'",
        "SELECT parent.owner FROM document_objects AS parent WHERE parent.document_object_id IN (SELECT child.parent_document_object_id FROM document_objects AS child WHERE child.owner = 'Marlin')",
        "SELECT owner FROM document_objects WHERE document_object_id = (SELECT parent_document_object_id FROM document_objects WHERE owner = 'Marlin')",
        "SELECT docObjects2.owner FROM document_objects AS docObjects1, document_objects AS docObjects2 WHERE docObjects1.owner = 'Marlin' AND docObjects1.parent_document_object_id = docObjects2.document_object_id",
        "SELECT (SELECT owner FROM document_objects WHERE document_object_id = sub.parent_document_object_id) FROM document_objects AS sub WHERE sub.owner = 'Marlin'",
        "SELECT parent.owner FROM document_objects AS child, document_objects AS parent WHERE child.owner = 'Marlin' AND child.parent_document_object_id = parent.document_object_id",
        "SELECT dst.owner FROM document_objects src JOIN document_objects dst ON src.parent_document_object_id = dst.document_object_id WHERE src.owner = 'Marlin'"
      ]
    ]
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "infer_predictions": [
      [
        "SELECT do.owner FROM document_objects AS do JOIN document_objects AS child ON do.document_object_id = child.parent_document_object_id WHERE child.owner = 'Marlin'",
        "SELECT parent.owner FROM document_objects AS parent, document_objects AS child WHERE parent.document_object_id = child.parent_document_object_id AND child.owner = 'Marlin'",
        "SELECT do.owner FROM document_objects do INNER JOIN document_objects child ON do.document_object_id = child.parent_document_object_id WHERE child.owner = 'Marlin'",
        "SELECT parent.owner FROM document_objects child, document_objects parent WHERE child.parent_document_object_id = parent.document_object_id AND child.owner = 'Marlin'",
        "SELECT o.owner FROM document_objects o WHERE o.document_object_id IN (SELECT p.parent_document_object_id FROM document_objects p WHERE p.owner = 'Marlin')",
        "SELECT do.owner FROM document_objects do WHERE exists (SELECT 1 FROM document_objects child WHERE child.parent_document_object_id = do.document_object_id AND child.owner = 'Marlin')",
        "SELECT (SELECT do.owner FROM document_objects do WHERE do.document_object_id = child.parent_document_object_id) FROM document_objects child WHERE child.owner = 'Marlin'",
        "SELECT do1.owner FROM document_objects do1 JOIN document_objects do2 ON do1.document_object_id = do2.parent_document_object_id WHERE do2.owner = 'Marlin'",
        "SELECT do1.owner FROM document_objects do1 WHERE do1.document_object_id IN (SELECT do2.parent_document_object_id FROM document_objects do2 WHERE do2.owner = 'Marlin')",
        "SELECT DISTINCT parent.owner FROM document_objects parent JOIN document_objects child ON child.parent_document_object_id = parent.document_object_id WHERE child.owner = 'Marlin'"
      ]
    ]
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different descriptions of all the parent documents?",
    "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
    "infer_predictions": [
      [
        "SELECT DISTINCT parent.description FROM document_objects AS doc INNER JOIN document_objects AS parent ON doc.parent_document_object_id = parent.document_object_id",
        "SELECT DISTINCT d2.description FROM document_objects AS d1 JOIN document_objects AS d2 ON d1.parent_document_object_id = d2.document_object_id",
        "SELECT description FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects)",
        "SELECT DISTINCT description FROM document_objects WHERE document_object_id IN (SELECT DISTINCT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT DISTINCT parent.description FROM document_objects child, document_objects parent WHERE child.parent_document_object_id = parent.document_object_id",
        "SELECT DISTINCT parentDO.description FROM document_objects childDO JOIN document_objects parentDO ON childDO.parent_document_object_id = parentDO.document_object_id",
        "SELECT description FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT DISTINCT d.description FROM document_objects d INNER JOIN document_objects p ON d.document_object_id = p.parent_document_object_id",
        "SELECT DISTINCT d.description FROM document_objects AS d JOIN (SELECT DISTINCT parent_document_object_id FROM document_objects) AS p ON d.document_object_id = p.parent_document_object_id",
        "SELECT DISTINCT d.document_description FROM (SELECT parent_document_object_id, description AS document_description FROM document_objects) AS d WHERE d.parent_document_object_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the unique description of every parent document?",
    "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
    "infer_predictions": [
      [
        "SELECT DISTINCT d1.description FROM document_objects d1 WHERE EXISTS (SELECT 1 FROM document_objects d2 WHERE d2.parent_document_object_id = d1.document_object_id)",
        "SELECT description FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL) GROUP BY description",
        "SELECT DISTINCT a.description FROM document_objects a JOIN document_objects b ON a.document_object_id = b.parent_document_object_id",
        "SELECT description FROM document_objects WHERE document_object_id IN (SELECT DISTINCT parent_document_object_id FROM document_objects)",
        "SELECT d.description FROM document_objects d WHERE d.document_object_id IN (SELECT DISTINCT p.parent_document_object_id FROM document_objects p)",
        "SELECT DISTINCT description FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects)",
        "SELECT d.description FROM document_objects d INNER JOIN (SELECT parent_document_object_id FROM document_objects) p ON d.document_object_id = p.parent_document_object_id",
        "SELECT DISTINCT description FROM document_objects WHERE EXISTS (SELECT NULL FROM document_objects d WHERE document_objects.document_object_id = d.parent_document_object_id)",
        "SELECT description FROM document_objects AS d WHERE (SELECT COUNT(*) FROM document_objects AS d1 WHERE d1.parent_document_object_id = d.document_object_id) > 0"
      ]
    ]
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many documents owned by Marlin?",
    "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(document_object_id) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(1) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(*) FROM (SELECT document_object_id FROM document_objects WHERE owner = 'Marlin')",
        "SELECT COUNT(*) FROM document_objects DO WHERE DO.owner = 'Marlin'",
        "SELECT SUM(1) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT (SELECT COUNT(*) FROM document_objects WHERE owner = 'Marlin') AS count"
      ]
    ]
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the count of documents owned by Marlin?",
    "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(document_object_id) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(1) FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(*) AS document_count FROM document_objects WHERE owner = 'Marlin'",
        "SELECT COUNT(*) FROM document_objects d WHERE d.owner = 'Marlin'",
        "SELECT COUNT(document_object_id) FROM document_objects d WHERE d.owner = 'Marlin'",
        "SELECT COUNT(*) FROM document_objects WHERE owner = 'Marlin' AND document_object_id IS NOT NULL",
        "SELECT COUNT(DISTINCT d.document_object_id) FROM document_objects d WHERE d.owner = 'Marlin'",
        "SELECT COUNT(document_object_id) AS TotalDocuments FROM document_objects WHERE owner = 'Marlin'"
      ]
    ]
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all documents ids that are not the parent of other documents.",
    "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
    "infer_predictions": [
      [
        "SELECT doc.document_object_id FROM document_objects AS doc WHERE NOT EXISTS (SELECT 1 FROM document_objects AS subdoc WHERE subdoc.parent_document_object_id = doc.document_object_id)",
        "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT d1.document_object_id FROM document_objects d1 LEFT JOIN document_objects d2 ON d1.document_object_id = d2.parent_document_object_id WHERE d2.parent_document_object_id IS NULL",
        "SELECT doc.document_object_id FROM document_objects AS doc LEFT OUTER JOIN document_objects AS related_doc ON doc.document_object_id = related_doc.parent_document_object_id WHERE related_doc.parent_document_object_id IS NULL",
        "SELECT do.document_object_id FROM document_objects do WHERE do.document_object_id NOT IN (SELECT DISTINCT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT DISTINCT parent_document_object_id FROM document_objects)",
        "SELECT d.document_object_id FROM document_objects d WHERE NOT EXISTS (SELECT * FROM document_objects WHERE parent_document_object_id = d.document_object_id)",
        "SELECT DISTINCT d1.document_object_id FROM document_objects d1 WHERE d1.document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT dobj.document_object_id FROM document_objects dobj LEFT JOIN document_objects dchild ON dobj.document_object_id = dchild.parent_document_object_id WHERE dchild.parent_document_object_id IS NULL",
        "SELECT main_doc.document_object_id FROM document_objects main_doc WHERE main_doc.document_object_id NOT IN (SELECT child_doc.parent_document_object_id FROM document_objects child_doc WHERE child_doc.parent_document_object_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the ids of the documents that are not parent documents?",
    "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
    "infer_predictions": [
      [
        "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT do.document_object_id FROM document_objects do LEFT JOIN document_objects pdo ON do.document_object_id = pdo.parent_document_object_id WHERE pdo.parent_document_object_id IS NULL",
        "SELECT DISTINCT doc.document_object_id FROM document_objects doc WHERE NOT EXISTS (SELECT 1 FROM document_objects WHERE parent_document_object_id = doc.document_object_id)",
        "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT DISTINCT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL)",
        "SELECT do.document_object_id FROM document_objects do WHERE do.document_object_id NOT IN (SELECT pdo.parent_document_object_id FROM document_objects pdo WHERE pdo.parent_document_object_id IS NOT NULL)",
        "SELECT DISTINCT doc.document_object_id FROM document_objects doc LEFT JOIN document_objects pdo ON doc.document_object_id = pdo.parent_document_object_id WHERE pdo.parent_document_object_id IS NULL",
        "SELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects)",
        "SELECT do.document_object_id FROM document_objects do WHERE NOT EXISTS (SELECT NULL FROM document_objects pdo WHERE pdo.parent_document_object_id = do.document_object_id)",
        "SELECT DISTINCT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT DISTINCT parent_document_object_id FROM document_objects)",
        "SELECT do.document_object_id FROM document_objects do LEFT OUTER JOIN document_objects sub ON do.document_object_id = sub.parent_document_object_id WHERE sub.parent_document_object_id IS NULL"
      ]
    ]
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many child documents does each parent document has? List the document id and the number.",
    "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
    "infer_predictions": [
      [
        "SELECT d.parent_document_object_id, COUNT(d.document_object_id) AS child_count FROM document_objects AS d WHERE d.parent_document_object_id IS NOT NULL GROUP BY d.parent_document_object_id",
        "SELECT parent_document_object_id, COUNT(*) AS child_count FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id",
        "SELECT parent_document_object_id, COUNT(document_object_id) AS num_children FROM document_objects GROUP BY parent_document_object_id HAVING parent_document_object_id IS NOT NULL",
        "SELECT d1.document_object_id AS parent_id, COUNT(d2.document_object_id) AS child_count FROM document_objects AS d1 JOIN document_objects AS d2 ON d1.document_object_id = d2.parent_document_object_id GROUP BY d1.document_object_id",
        "SELECT parent_document_object_id, COUNT(document_object_id) FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id",
        "SELECT d.parent_document_object_id, COUNT(d.document_object_id) FROM document_objects d WHERE d.parent_document_object_id IS NOT NULL GROUP BY d.parent_document_object_id",
        "SELECT parent_document_object_id, COUNT(*) FROM document_objects GROUP BY parent_document_object_id HAVING parent_document_object_id IS NOT NULL",
        "SELECT p.document_object_id, (SELECT COUNT(c.document_object_id) FROM document_objects c WHERE c.parent_document_object_id = p.document_object_id) AS child_count FROM document_objects p WHERE EXISTS (SELECT 1 FROM document_objects WHERE parent_document_object_id = p.document_object_id)",
        "SELECT d1.document_object_id, COUNT(d2.parent_document_object_id) AS children FROM document_objects d1 LEFT JOIN document_objects d2 ON d1.document_object_id = d2.parent_document_object_id WHERE d1.parent_document_object_id IS NULL GROUP BY d1.document_object_id",
        "SELECT document_objects.parent_document_object_id, COUNT(document_objects_child.document_object_id) AS num_children FROM document_objects JOIN document_objects AS document_objects_child ON document_objects.document_object_id = document_objects_child.parent_document_object_id GROUP BY document_objects.parent_document_object_id"
      ]
    ]
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
    "infer_predictions": [
      [
        "SELECT parent_document_object_id, COUNT(document_object_id) AS child_count FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id;",
        "SELECT d.parent_document_object_id, COUNT(d.document_object_id) AS num_children FROM document_objects AS d WHERE d.parent_document_object_id IS NOT NULL GROUP BY d.parent_document_object_id;",
        "SELECT parent_document_object_id, COUNT(*) AS children_count FROM document_objects GROUP BY parent_document_object_id HAVING parent_document_object_id IS NOT NULL;",
        "SELECT d1.parent_document_object_id, COUNT(d2.document_object_id) AS child_count FROM document_objects AS d1 JOIN document_objects AS d2 ON d1.document_object_id = d2.parent_document_object_id GROUP BY d1.parent_document_object_id;",
        "SELECT d.parent_document_object_id, COUNT(*) FROM document_objects AS d WHERE d.parent_document_object_id IN (SELECT document_object_id FROM document_objects) GROUP BY d.parent_document_object_id;",
        "SELECT d1.parent_document_object_id, COUNT(d2.document_object_id) FROM document_objects d1 INNER JOIN document_objects d2 ON d1.document_object_id = d2.parent_document_object_id GROUP BY d1.parent_document_object_id;",
        "SELECT parent_document_object_id, COUNT(document_object_id) FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id ORDER BY parent_document_object_id;",
        "SELECT parent_document_object_id, COUNT(document_object_id) AS Num_O_Children FROM document_objects where parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id;",
        "SELECT main.parent_document_object_id, COUNT(sub.document_object_id) AS child_documents FROM document_objects AS main LEFT JOIN document_objects AS sub ON main.document_object_id = sub.parent_document_object_id WHERE main.parent_document_object_id IS NOT NULL GROUP BY main.parent_document_object_id;",
        "SELECT p.parent_document_object_id, ChildNumber.ChildCount FROM document_objects AS p JOIN (SELECT parent_document_object_id, COUNT(*) AS ChildCount FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id) AS ChildNumber ON p.document_object_id = ChildNumber.parent_document_object_id GROUP BY p.parent_document_object_id;"
      ]
    ]
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List the name of all collections.",
    "gold": "SELECT Collection_Name FROM Collections;",
    "infer_predictions": [
      [
        "SELECT collection_name FROM collections;",
        "SELECT c.collection_name FROM collections c;",
        "SELECT collection_name FROM collections c ORDER BY collection_name;",
        "SELECT collection_name FROM collections GROUP BY collection_name;",
        "SELECT collection_name FROM collections c WHERE collection_id IS NOT NULL;",
        "SELECT collection_name FROM collections WHERE collection_name IS NOT NULL;",
        "SELECT DISTINCT c.collection_name FROM collections c ORDER BY c.collection_name;",
        "SELECT c.collection_name FROM collections c WHERE c.collection_id IN (SELECT collection_id FROM collections);",
        "SELECT collection_name FROM collections WHERE EXISTS (SELECT 1 FROM collections c2 WHERE c2.collection_id = collections.collection_id);"
      ]
    ]
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "nlq": "what are the collection names?",
    "gold": "SELECT Collection_Name FROM Collections;",
    "infer_predictions": [
      [
        "SELECT collection_name FROM collections;",
        "SELECT c.collection_name FROM collections c;",
        "SELECT DISTINCT c.collection_name FROM collections c;",
        "SELECT collection_name FROM collections ORDER BY collection_name;",
        "SELECT c.collection_name FROM collections c ORDER BY c.collection_name;",
        "SELECT DISTINCT c.collection_name FROM collections c ORDER BY c.collection_name;",
        "SELECT collection_name FROM collections GROUP BY collection_name;"
      ]
    ]
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the description of collection named Best?",
    "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT collection_description FROM collections WHERE collection_name = 'Best'",
        "SELECT C.collection_description FROM collections C WHERE C.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the collection descriptions that are named as 'Best'?",
    "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT collection_description FROM collections WHERE collection_name = 'Best'",
        "SELECT c.collection_description FROM collections c WHERE c.collection_name = 'Best'",
        "SELECT collection_description FROM collections WHERE collection_name LIKE 'Best'",
        "SELECT c.collection_description FROM collections c WHERE c.collection_name LIKE 'Best'",
        "SELECT collection_description FROM collections WHERE UPPER(collection_name) = UPPER('Best')",
        "SELECT c.collection_description FROM collections c WHERE UPPER(c.collection_name) = 'BEST'",
        "SELECT collection_description FROM collections WHERE LOWER(collection_name) = lower('Best')"
      ]
    ]
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the name of the parent collection of the collection named Nice?",
    "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
    "infer_predictions": [
      [
        "SELECT parent.collection_name FROM collections child JOIN collections parent ON child.parent_collection_id = parent.collection_id WHERE child.collection_name = 'Nice'",
        "SELECT p.collection_name FROM collections AS c INNER JOIN collections AS p ON c.parent_collection_id = p.collection_id WHERE c.collection_name = 'Nice'",
        "SELECT (SELECT collections.collection_name FROM collections WHERE collections.collection_id = p.parent_collection_id) FROM collections AS p WHERE p.collection_name = 'Nice'",
        "SELECT parent.collection_name FROM collections child, collections parent WHERE child.parent_collection_id = parent.collection_id AND child.collection_name = 'Nice'",
        "SELECT collection_name FROM collections WHERE collection_id = (SELECT parent_collection_id FROM collections WHERE collection_name = 'Nice')",
        "SELECT collections.collection_name FROM collections WHERE collection_id IN (SELECT parent_collection_id FROM collections WHERE collection_name = 'Nice')",
        "SELECT (SELECT p.collection_name FROM collections p WHERE p.collection_id = c.parent_collection_id) AS parent_name FROM collections c WHERE c.collection_name = 'Nice'",
        "SELECT c2.collection_name FROM collections c1 JOIN collections c2 ON c1.parent_collection_id = c2.collection_id WHERE c1.collection_name = 'Nice'",
        "SELECT p.collection_name FROM collections c JOIN collections p ON c.parent_collection_id = p.collection_id WHERE c.collection_name = 'Nice'"
      ]
    ]
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the names of all parent collections of the collection named Nice?",
    "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
    "infer_predictions": [
      [
        "SELECT par.collection_name FROM collections child JOIN collections par ON child.parent_collection_id = par.collection_id WHERE child.collection_name = 'Nice'",
        "SELECT p.collection_name FROM collections AS c INNER JOIN collections AS p ON c.parent_collection_id = p.collection_id WHERE c.collection_name = 'Nice'",
        "SELECT (SELECT coll.collection_name FROM collections coll WHERE coll.collection_id = c.parent_collection_id) AS parent_name FROM collections c WHERE c.collection_name = 'Nice'",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT parent_collection_id FROM collections WHERE collection_name = 'Nice')",
        "SELECT parent.collection_name FROM collections AS child, collections AS parent WHERE child.parent_collection_id = parent.collection_id AND child.collection_name = 'Nice'",
        "SELECT c2.collection_name FROM collections c1 JOIN collections c2 ON c1.parent_collection_id = c2.collection_id WHERE c1.collection_name = 'Nice'",
        "SELECT collections.collection_name FROM collections WHERE collections.collection_id = (SELECT collections.parent_collection_id FROM collections WHERE collections.collection_name = 'Nice')",
        "SELECT parent_name.collection_name FROM collections child INNER JOIN collections parent_name ON child.parent_collection_id = parent_name.collection_id WHERE child.collection_name = 'Nice'",
        "SELECT top_level.collection_name FROM collections top_level WHERE top_level.collection_id IN (SELECT down_level.parent_collection_id FROM collections down_level WHERE down_level.collection_name = 'Nice')",
        "SELECT parent_coll.collection_name FROM collections child_coll JOIN collections parent_coll ON child_coll.parent_collection_id = parent_coll.collection_id WHERE child_coll.collection_name = 'Nice'"
      ]
    ]
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which collection is not the parent of other collection? List the collection's name.",
    "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
    "infer_predictions": [
      [
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)",
        "SELECT c.collection_name FROM collections c LEFT JOIN collections p ON c.collection_id = p.parent_collection_id WHERE p.parent_collection_id IS NULL",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT DISTINCT parent_collection_id FROM collections)",
        "SELECT c.collection_name FROM collections c WHERE NOT EXISTS (SELECT 1 FROM collections pc WHERE pc.parent_collection_id = c.collection_id)",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT distinct parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)",
        "SELECT collection_name FROM collections AS c WHERE NOT EXISTS (SELECT 1 FROM collections AS pc WHERE pc.parent_collection_id = c.collection_id)",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT IFNULL(parent_collection_id, 0) FROM collections)",
        "SELECT collection_name FROM collections AS c WHERE c.collection_id NOT IN (SELECT COALESCE(parent_collection_id, 0) FROM collections as children)",
        "SELECT c.collection_name FROM collections c WHERE c.collection_id NOT IN (SELECT sub.parent_collection_id FROM collections sub WHERE sub.parent_collection_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the names of the collections that are not the parent of the other collections?",
    "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
    "infer_predictions": [
      [
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)",
        "SELECT C.collection_name FROM collections C LEFT JOIN collections P ON C.collection_id = P.parent_collection_id WHERE P.parent_collection_id IS NULL",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT DISTINCT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)",
        "SELECT C.collection_name FROM collections C WHERE NOT EXISTS (SELECT 1 FROM collections P WHERE P.parent_collection_id = C.collection_id)",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT p.parent_collection_id FROM collections p WHERE p.parent_collection_id IS NOT NULL)",
        "SELECT collection_name FROM collections C WHERE C.collection_id NOT IN (SELECT P.parent_collection_id FROM collections P WHERE P.parent_collection_id IS NOT NULL)",
        "SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT DISTINCT P.parent_collection_id FROM collections P WHERE P.parent_collection_id IS NOT NULL)",
        "SELECT collection_name FROM collections C WHERE NOT EXISTS (SELECT 1 FROM collections P WHERE C.collection_id = P.parent_collection_id AND P.parent_collection_id IS NOT NULL)",
        "SELECT C.collection_name FROM collections C WHERE C.collection_id NOT IN (SELECT parent_collection_id FROM collections WHERE parent_collection_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List document that have more than one child. List the document id.",
    "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
    "infer_predictions": [
      [
        "SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING COUNT(document_object_id) > 1",
        "SELECT p.parent_document_object_id FROM document_objects p GROUP BY p.parent_document_object_id HAVING COUNT(p.document_object_id) > 1",
        "SELECT d1.parent_document_object_id FROM document_objects d1 JOIN document_objects d2 ON d1.parent_document_object_id = d2.parent_document_object_id GROUP BY d1.parent_document_object_id HAVING COUNT(d2.document_object_id) > 1",
        "SELECT d1.parent_document_object_id FROM document_objects AS d1 WHERE EXISTS (SELECT 1 FROM document_objects AS d2 WHERE d1.parent_document_object_id = d2.parent_document_object_id GROUP BY d2.parent_document_object_id HAVING COUNT(d2.document_object_id) > 1)",
        "SELECT DISTINCT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING COUNT(*) > 1",
        "SELECT parent_document_object_id FROM (SELECT parent_document_object_id, COUNT(*) AS ChildCount FROM document_objects GROUP BY parent_document_object_id) WHERE ChildCount > 1",
        "SELECT d1.parent_document_object_id FROM document_objects d1 WHERE (SELECT COUNT(*) FROM document_objects d2 WHERE d1.parent_document_object_id = d2.parent_document_object_id) > 1 GROUP BY d1.parent_document_object_id",
        "SELECT document_objects.parent_document_object_id FROM document_objects WHERE ((SELECT COUNT(document_objects.document_object_id) FROM document_objects GROUP BY document_objects.parent_document_object_id) > 1)",
        "SELECT document_object_id FROM document_objects WHERE document_object_id IN (SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING COUNT(document_object_id) > 1)"
      ]
    ]
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the ids of the documents that have more than one child?",
    "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
    "infer_predictions": [
      [
        "SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING COUNT(document_object_id) > 1",
        "SELECT d.parent_document_object_id FROM document_objects d GROUP BY d.parent_document_object_id HAVING COUNT(d.document_object_id) > 1",
        "SELECT p.parent_document_object_id FROM document_objects p WHERE p.document_object_id IN (SELECT c.parent_document_object_id FROM document_objects c GROUP BY c.parent_document_object_id HAVING COUNT(*) > 1)",
        "SELECT DISTINCT parent_document_object_id FROM document_objects WHERE parent_document_object_id IN (SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING COUNT(*) > 1)",
        "SELECT parent_doc_id FROM (SELECT parent_document_object_id AS parent_doc_id, COUNT(document_object_id) AS num_children FROM document_objects GROUP BY parent_document_object_id) WHERE num_children > 1",
        "SELECT p_doi FROM (SELECT parent_document_object_id AS p_doi, COUNT(document_object_id) AS c_count FROM document_objects GROUP BY parent_document_object_id HAVING c_count > 1)",
        "SELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING SUM(1) > 1",
        "SELECT doc.parent_document_object_id FROM document_objects doc WHERE (SELECT COUNT(*) FROM document_objects WHERE parent_document_object_id = doc.parent_document_object_id) > 1 GROUP BY doc.parent_document_object_id",
        "SELECT parent_document_object_id FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id HAVING COUNT(document_object_id) > 1"
      ]
    ]
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many child collection does the collection named Best has?",
    "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT collection_id) FROM collections WHERE parent_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(collection_id) FROM collections c1 WHERE EXISTS (SELECT 1 FROM collections c2 WHERE c2.collection_name = 'Best' AND c1.parent_collection_id = c2.collection_id)",
        "SELECT COUNT(DISTINCT c.collection_id) FROM collections c JOIN collections p ON c.parent_collection_id = p.collection_id WHERE p.collection_name = 'Best'",
        "SELECT COUNT(*) FROM collections c INNER JOIN (SELECT collection_id FROM collections WHERE collection_name = 'Best') p ON c.parent_collection_id = p.collection_id",
        "SELECT COUNT(c1.collection_id) FROM collections c1, collections c2 WHERE c1.parent_collection_id = c2.collection_id AND c2.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT c.collection_id) FROM collections c WHERE c.parent_collection_id = (SELECT c2.collection_id FROM collections c2 WHERE c2.collection_name = 'Best')",
        "SELECT COUNT(DISTINCT c.collection_id) FROM collections AS c JOIN collections AS p ON c.parent_collection_id = p.collection_id WHERE p.collection_name = 'Best'",
        "SELECT COUNT(*) FROM collections AS c INNER JOIN collections AS p ON c.parent_collection_id = p.collection_id WHERE p.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the number of child collections belonging to the collection named Best?",
    "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(c.collection_id) FROM collections AS c JOIN collections AS p ON c.parent_collection_id = p.collection_id WHERE p.collection_name = 'Best'",
        "SELECT COUNT(c.collection_id) FROM collections c WHERE c.parent_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(collection_id) FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(1) FROM collections INNER JOIN collections AS parent ON collections.parent_collection_id = parent.collection_id WHERE parent.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT collections.collection_id) FROM collections JOIN collections p ON collections.parent_collection_id = p.collection_id WHERE p.collection_name = 'Best'",
        "SELECT (SELECT COUNT(*) FROM collections c WHERE c.parent_collection_id = collections.collection_id) AS ChildCount FROM collections WHERE collection_name = 'Best'",
        "SELECT (COUNT(collections.collection_id)) AS Number_of_Children FROM collections WHERE collections.parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM collections WHERE EXISTS (SELECT 1 FROM collections p WHERE collections.parent_collection_id = p.collection_id AND p.collection_name = 'Best')",
        "SELECT COUNT(c.collection_id) FROM collections c WHERE exists (SELECT 1 FROM collections p WHERE p.collection_id = c.parent_collection_id AND p.collection_name = 'Best')"
      ]
    ]
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all document which is related to document owned by Ransom . List the document id .",
    "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.document_object_id FROM document_objects d JOIN document_subset_members dsm ON d.document_object_id = dsm.related_document_object_id JOIN document_objects do ON do.document_object_id = dsm.document_object_id WHERE do.owner = 'Ransom'",
        "SELECT DISTINCT d.document_object_id FROM document_objects d WHERE EXISTS (SELECT 1 FROM document_subset_members dsm JOIN document_objects do ON dsm.document_object_id = do.document_object_id WHERE do.owner = 'Ransom' AND dsm.related_document_object_id = d.document_object_id)",
        "SELECT DISTINCT d.document_object_id FROM document_objects d INNER JOIN document_subset_members dsm ON d.document_object_id = dsm.related_document_object_id WHERE dsm.document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom')",
        "SELECT DISTINCT dsm.related_document_object_id FROM document_subset_members dsm JOIN document_objects d ON dsm.document_object_id = d.document_object_id WHERE d.owner = 'Ransom'",
        "SELECT DISTINCT related_document_object_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom')",
        "SELECT DISTINCT related_document_object_id FROM document_subset_members dsm WHERE EXISTS (SELECT 1 FROM document_objects d WHERE dsm.document_object_id = d.document_object_id AND d.owner = 'Ransom')",
        "SELECT DISTINCT x1.related_document_object_id FROM document_subset_members x1 WHERE EXISTS (SELECT x2.document_object_id FROM document_objects x2 WHERE x2.document_object_id = x1.document_object_id AND x2.owner = 'Ransom')",
        "SELECT DISTINCT related_document_object_id FROM document_subset_members dsm WHERE dsm.document_object_id IN (SELECT d.document_object_id FROM document_objects d WHERE d.owner = 'Ransom')",
        "SELECT DISTINCT doc_related.document_object_id FROM document_objects doc_related JOIN document_subset_members dsm ON doc_related.document_object_id = dsm.related_document_object_id JOIN document_objects doc ON doc.document_object_id = dsm.document_object_id AND doc.owner = 'Ransom'",
        "SELECT DISTINCT doc_asm.related_document_object_id FROM document_subset_members doc_asm JOIN document_objects doc_owner ON doc_owner.document_object_id = doc_asm.document_object_id WHERE doc_owner.owner = 'Ransom'"
      ]
    ]
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the document object ids of the related to the document owned by Ransom ?",
    "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "infer_predictions": [
      [
        "SELECT DISTINCT dsm.related_document_object_id FROM document_objects do INNER JOIN document_subset_members dsm ON do.document_object_id = dsm.document_object_id WHERE do.owner = 'Ransom'",
        "SELECT dsm.related_document_object_id FROM document_objects INNER JOIN document_subset_members dsm ON document_objects.document_object_id = dsm.document_object_id WHERE document_objects.owner = 'Ransom'",
        "SELECT DISTINCT rel_obj.related_document_object_id FROM document_objects as d, document_subset_members as rel_obj WHERE d.document_object_id = rel_obj.document_object_id AND d.owner = 'Ransom'",
        "SELECT DISTINCT related_document_object_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom')",
        "SELECT DISTINCT rdo.related_document_object_id FROM document_subset_members as rdo JOIN document_objects as do ON do.document_object_id = rdo.document_object_id WHERE do.owner = 'Ransom'",
        "SELECT DISTINCT r.document_object_id FROM document_subset_members dsm JOIN document_objects r ON dsm.related_document_object_id = r.document_object_id JOIN document_objects do ON dsm.document_object_id = do.document_object_id WHERE do.owner = 'Ransom'",
        "SELECT DISTINCT related_document_object_id FROM document_subset_members WHERE EXISTS (SELECT 1 FROM document_objects WHERE document_subset_members.document_object_id = document_object_id AND owner = 'Ransom')",
        "SELECT dsm.related_document_object_id FROM document_objects do LEFT JOIN document_subset_members dsm ON do.document_object_id = dsm.document_object_id WHERE do.owner = 'Ransom'",
        "SELECT rm.related_document_object_id FROM (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom') as ids JOIN document_subset_members rm ON ids.document_object_id = rm.document_object_id",
        "SELECT dsm.related_document_object_id FROM document_subset_members dsm, document_objects do WHERE dsm.document_object_id = do.document_object_id AND do.owner = 'Ransom'"
      ]
    ]
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List collection subset id, name and number of collections in each subset.",
    "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
    "infer_predictions": [
      [
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS number_of_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name",
        "SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(collection_id) AS number_of_collections FROM collection_subsets JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, (SELECT COUNT(*) FROM collection_subset_members WHERE collection_subset_members.collection_subset_id = cs.collection_subset_id) AS number_of_collections FROM collection_subsets cs",
        "SELECT collection_subset_id, collection_subset_name, (SELECT COUNT(related_collection_id) FROM collection_subset_members WHERE collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id) AS number_of_collections FROM collection_subsets",
        "SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(DISTINCT collection_subset_members.collection_id) AS number_of_collections FROM collection_subsets LEFT JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id",
        "SELECT A.collection_subset_id, A.collection_subset_name, COUNT(B.collection_id) AS number_of_collections FROM collection_subsets A INNER JOIN collection_subset_members B ON A.collection_subset_id = B.collection_subset_id GROUP BY A.collection_subset_id, A.collection_subset_name",
        "SELECT collection_subset_id, collection_subset_name, (SELECT COUNT(*) FROM collection_subset_members csm WHERE csm.collection_subset_id = collection_subsets.collection_subset_id) AS number_of_collections FROM collection_subsets",
        "SELECT sub.collection_subset_id, sub.collection_subset_name, COUNT(mem.collection_id) AS number_of_collections FROM collection_subsets sub LEFT JOIN collection_subset_members mem ON sub.collection_subset_id = mem.collection_subset_id GROUP BY sub.collection_subset_id, sub.collection_subset_name",
        "SELECT a.collection_subset_id, a.collection_subset_name, COUNT(b.collection_id) AS number_of_collections FROM collection_subsets a LEFT JOIN collection_subset_members b ON a.collection_subset_id = b.collection_subset_id GROUP BY a.collection_subset_id, a.collection_subset_name",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(DISTINCT csm.collection_id) AS counts FROM collection_subsets cs JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name"
      ]
    ]
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the collection subset ids, names, and number of collections for each subset?",
    "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
    "infer_predictions": [
      [
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS num_collections FROM collection_subsets cs LEFT JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name",
        "SELECT collection_subsets.collection_subset_id, collection_subsets.collection_subset_name, COUNT(collection_subset_members.collection_id) AS collection_count FROM collection_subsets INNER JOIN collection_subset_members ON collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id GROUP BY collection_subsets.collection_subset_id, collection_subsets.collection_subset_name",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(DISTINCT csm.collection_id) FROM collection_subsets AS cs JOIN collection_subset_members AS csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(*) AS num_collections FROM collection_subsets cs, collection_subset_members csm WHERE cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id",
        "SELECT A.collection_subset_id, A.collection_subset_name, B.total_collections FROM collection_subsets A LEFT JOIN (SELECT collection_subset_id, COUNT(*) AS total_collections FROM collection_subset_members GROUP BY collection_subset_id) B ON A.collection_subset_id = B.collection_subset_id",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, (SELECT COUNT(*) FROM collection_subset_members WHERE collection_subset_id = cs.collection_subset_id) AS count_of_collections FROM collection_subsets cs",
        "SELECT A.collection_subset_id, A.collection_subset_name, IFNULL(B.collection_count, 0) AS collection_count FROM (SELECT * FROM collection_subsets) A LEFT JOIN (SELECT collection_subset_id, COUNT(*) AS collection_count FROM collection_subset_members GROUP BY collection_subset_id) B ON A.collection_subset_id = B.collection_subset_id",
        "WITH subset_member_counts AS (SELECT collection_subset_id, COUNT(collection_id) AS num_collections FROM collection_subset_members GROUP BY collection_subset_id) SELECT cs.collection_subset_id, cs.collection_subset_name, smc.num_collections FROM collection_subsets cs LEFT JOIN subset_member_counts smc ON cs.collection_subset_id = smc.collection_subset_id",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, COUNT(csm.collection_id) AS num_collections FROM collection_subsets cs LEFT OUTER JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id GROUP BY cs.collection_subset_id, cs.collection_subset_name",
        "SELECT cs.collection_subset_id, cs.collection_subset_name, (SELECT COUNT(*) FROM collection_subset_members csm WHERE csm.collection_subset_id = cs.collection_subset_id) AS collection_number_count FROM collection_subsets cs"
      ]
    ]
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which document has most of child? List the document id and the number of child.",
    "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT parent_document_object_id, COUNT(*) AS child_count FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY parent_document_object_id ORDER BY child_count DESC LIMIT 1",
        "SELECT d.parent_document_object_id, COUNT(d.document_object_id) AS num_children FROM document_objects d WHERE d.parent_document_object_id IS NOT NULL GROUP BY d.parent_document_object_id ORDER BY num_children DESC LIMIT 1",
        "SELECT do.parent_document_object_id, COUNT(*) FROM document_objects do GROUP BY do.parent_document_object_id HAVING do.parent_document_object_id IS NOT NULL ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT parent, COUNT(*) as children FROM (SELECT parent_document_object_id as parent FROM document_objects) GROUP BY parent HAVING parent IS NOT NULL ORDER BY children DESC LIMIT 1",
        "SELECT p.parent_document_object_id, COUNT(p.document_object_id) AS total_children FROM document_objects p WHERE p.parent_document_object_id IS NOT NULL GROUP BY p.parent_document_object_id ORDER BY total_children DESC LIMIT 1",
        "SELECT t1.parent_document_object_id, COUNT(t1.document_object_id) as ChildCount FROM document_objects t1 WHERE t1.parent_document_object_id IS NOT NULL GROUP BY t1.parent_document_object_id ORDER BY ChildCount DESC, t1.parent_document_object_id DESC LIMIT 1",
        "SELECT dt.parent_document_object_id, COUNT(dt.document_object_id) as NumberOfChildren FROM document_objects dt GROUP BY dt.parent_document_object_id HAVING NumberOfChildren > 0 ORDER BY NumberOfChildren DESC LIMIT 1",
        "SELECT document_objects.parent_document_object_id, COUNT(document_objects.document_object_id) AS count_of_children FROM document_objects GROUP BY document_objects.parent_document_object_id HAVING document_objects.parent_document_object_id IS NOT NULL ORDER BY count_of_children DESC LIMIT 1",
        "SELECT doc.parent_document_object_id, COUNT(*) count FROM document_objects doc WHERE EXISTS (SELECT 1 FROM document_objects WHERE parent_document_object_id = doc.parent_document_object_id) GROUP BY doc.parent_document_object_id ORDER BY count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For each document object id, how many children do they have?",
    "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT parent.document_object_id, COUNT(child.document_object_id) AS child_count FROM document_objects AS parent LEFT JOIN document_objects AS child ON parent.document_object_id = child.parent_document_object_id GROUP BY parent.document_object_id",
        "SELECT doc_obj.document_object_id, (SELECT COUNT(*) FROM document_objects WHERE parent_document_object_id = doc_obj.document_object_id) AS children_count FROM document_objects AS doc_obj",
        "SELECT parent.document_object_id, COALESCE(SUM(CASE WHEN child.document_object_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS children_count FROM document_objects AS parent LEFT JOIN document_objects AS child ON parent.document_object_id = child.parent_document_object_id GROUP BY parent.document_object_id",
        "SELECT parent.document_object_id, IFNULL(children.child_count, 0) AS child_count FROM document_objects AS parent LEFT JOIN (SELECT parent_document_object_id, COUNT(*) AS child_count FROM document_objects GROUP BY parent_document_object_id) AS children ON parent.document_object_id = children.parent_document_object_id",
        "SELECT parent.document_object_id, COUNT(child.document_object_id) FROM document_objects AS parent LEFT JOIN document_objects AS child ON parent.document_object_id = child.parent_document_object_id GROUP BY parent.document_object_id",
        "SELECT doc_obj.document_object_id, (SELECT COUNT(parent_document_object_id) FROM document_objects WHERE parent_document_object_id = doc_obj.document_object_id) FROM document_objects AS doc_obj",
        "SELECT document_object_id, (SELECT COUNT(*) FROM document_objects AS sub WHERE sub.parent_document_object_id = doc_obj.document_object_id) AS number_of_children FROM document_objects AS doc_obj",
        "SELECT document_object_id, COUNT(document_objects.parent_document_object_id) FROM document_objects GROUP BY parent_document_object_id"
      ]
    ]
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which document has least number of related documents? List the document id and the number of related documents.",
    "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT document_object_id, COUNT(related_document_object_id) AS related_count FROM document_subset_members GROUP BY document_object_id ORDER BY related_count ASC LIMIT 1",
        "SELECT d.document_object_id, COUNT(r.related_document_object_id) AS CountRelated FROM document_objects d LEFT JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id ORDER BY CountRelated ASC LIMIT 1",
        "SELECT top.document_object_id, MIN(sub.cnt) AS min_related_documents FROM document_objects top JOIN (SELECT document_object_id, COUNT(*) AS cnt FROM document_subset_members GROUP BY document_object_id) sub ON top.document_object_id = sub.document_object_id GROUP BY top.document_object_id ORDER BY min_related_documents ASC LIMIT 1",
        "SELECT ds.document_object_id, COALESCE(COUNT(ds.related_document_object_id), 0) AS related_docs_count FROM document_objects DO LEFT JOIN document_subset_members ds ON DO.document_object_id = ds.document_object_id GROUP BY ds.document_object_id ORDER BY related_docs_count ASC LIMIT 1",
        "SELECT DOC_ID, MIN(RELATED_COUNT) AS MIN_RELATED FROM (SELECT document_object_id AS DOC_ID, COUNT(related_document_object_id) AS RELATED_COUNT FROM document_subset_members GROUP BY document_object_id) GROUP BY DOC_ID ORDER BY MIN_RELATED LIMIT 1",
        "WITH DocumentRelations AS (SELECT document_object_id, COUNT(*) AS RelatedDocumentCount FROM document_subset_members GROUP BY document_object_id) SELECT document_object_id, RelatedDocumentCount FROM DocumentRelations ORDER BY RelatedDocumentCount ASC LIMIT 1",
        "SELECT d.document_object_id, IFNULL(SUM(case when ds.related_document_object_id is not null then 1 else 0 end), 0) as related_documents_count FROM document_objects d LEFT JOIN document_subset_members ds ON d.document_object_id = ds.document_object_id GROUP BY d.document_object_id ORDER BY related_documents_count ASC LIMIT 1",
        "SELECT t.document_object_id, t.count_related FROM (SELECT document_object_id, COUNT(related_document_object_id) as count_related FROM document_subset_members GROUP BY document_object_id) t ORDER BY t.count_related ASC LIMIT 1",
        "SELECT x.document_object_id, x.total_related FROM (SELECT d.document_object_id, COUNT(r.related_document_object_id) as total_related FROM document_objects d JOIN document_subset_members r ON d.document_object_id = r.document_object_id GROUP BY d.document_object_id) x ORDER BY x.total_related ASC LIMIT 1",
        "SELECT document_object_id, total_related FROM (SELECT document_object_id, COUNT(related_document_object_id) as total_related FROM document_subset_members GROUP BY document_object_id) WHERE total_related = (SELECT MIN(related_docs) FROM (SELECT COUNT(related_document_object_id) as related_docs FROM document_subset_members GROUP BY document_object_id)) LIMIT 1"
      ]
    ]
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the document object id with the least number of documents ?",
    "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
    "infer_predictions": [
      [
        "SELECT document_object_id FROM documents_in_collections GROUP BY document_object_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT a.document_object_id FROM documents_in_collections AS a GROUP BY a.document_object_id ORDER BY COUNT(a.document_object_id) ASC LIMIT 1",
        "SELECT doc_id FROM (SELECT document_object_id AS doc_id, COUNT(document_object_id) AS doc_count FROM documents_in_collections GROUP BY document_object_id) ORDER BY doc_count ASC LIMIT 1",
        "SELECT tmp.document_object_id FROM (SELECT document_object_id, COUNT(document_object_id) as document_count FROM documents_in_collections GROUP BY document_object_id) AS tmp ORDER BY tmp.document_count ASC LIMIT 1",
        "SELECT document_object_id FROM documents_in_collections GROUP BY document_object_id HAVING COUNT(document_object_id) = (SELECT MIN(count) FROM (SELECT document_object_id, COUNT(document_object_id) AS count FROM documents_in_collections GROUP BY document_object_id)) LIMIT 1",
        "SELECT document_object_id FROM documents_in_collections ORDER BY COUNT(document_object_id) OVER (PARTITION BY document_object_id) ASC LIMIT 1",
        "WITH DocCount AS (SELECT document_object_id, COUNT(*) AS num_docs FROM documents_in_collections GROUP BY document_object_id) SELECT document_object_id FROM DocCount ORDER BY num_docs ASC LIMIT 1",
        "WITH OrderedDocs AS (SELECT document_object_id, COUNT(*) AS doc_amount FROM documents_in_collections GROUP BY document_object_id ORDER BY COUNT(*) ASC) SELECT document_object_id FROM OrderedDocs LIMIT 1",
        "SELECT first_value(document_object_id) OVER (ORDER BY COUNT(document_object_id) ASC) as least_docs FROM documents_in_collections GROUP BY document_object_id LIMIT 1"
      ]
    ]
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;",
    "infer_predictions": [
      [
        "SELECT doc.document_object_id, COUNT(rel_doc.related_document_object_id) AS RelatedDocCount FROM document_objects AS doc LEFT JOIN document_subset_members AS rel_doc ON doc.document_object_id = rel_doc.document_object_id GROUP BY doc.document_object_id HAVING RelatedDocCount BETWEEN 2 AND 4",
        "SELECT D.document_object_id, COUNT(R.related_document_object_id) AS Qty FROM document_objects D JOIN document_subset_members R ON D.document_object_id = R.document_object_id GROUP BY D.document_object_id HAVING Qty >= 2 AND Qty <= 4",
        "SELECT document_object_id, COUNT(related_document_object_id) FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) >= 2 AND COUNT(related_document_object_id) <= 4",
        "SELECT d.document_object_id, COUNT(ds.related_document_object_id) AS total_related FROM document_objects d INNER JOIN document_subset_members ds ON d.document_object_id = ds.document_object_id GROUP BY d.document_object_id HAVING total_related > 1 AND total_related < 5",
        "SELECT A.document_object_id, COUNT(B.related_document_object_id) AS RelatedDocuments FROM document_objects A LEFT JOIN document_subset_members B ON A.document_object_id = B.document_object_id GROUP BY A.document_object_id HAVING RelatedDocuments BETWEEN 2 AND 4",
        "SELECT document_objects.document_object_id, COUNT(document_subset_members.related_document_object_id) FROM document_objects INNER JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id GROUP BY document_objects.document_object_id HAVING COUNT(document_subset_members.related_document_object_id) > 1 AND COUNT(document_subset_members.related_document_object_id) < 5",
        "SELECT d.document_object_id, COUNT(r.document_object_id) FROM document_objects AS d, document_subset_members AS r WHERE d.document_object_id = r.document_object_id GROUP BY d.document_object_id HAVING COUNT(r.document_object_id) BETWEEN 2 AND 4",
        "SELECT main_doc.document_object_id, (SELECT COUNT(related_docsi.related_document_object_id) FROM document_subset_members related_docsi WHERE main_doc.document_object_id = related_docsi.document_object_id) AS count_of_related_docs FROM document_objects main_doc WHERE (SELECT COUNT(related_docs.related_document_object_id) FROM document_subset_members related_docs WHERE related_docs.document_object_id = main_doc.document_object_id) BETWEEN 2 AND 4",
        "WITH RelatedCounts AS (SELECT document_object_id, COUNT(related_document_object_id) AS totalDocs FROM document_subset_members GROUP BY document_object_id) SELECT document_object_id, totalDocs FROM RelatedCounts WHERE totalDocs BETWEEN 2 AND 4"
      ]
    ]
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
    "infer_predictions": [
      [
        "SELECT dsm.document_object_id, COUNT(dsm.related_document_object_id) AS related_count FROM document_subset_members dsm GROUP BY dsm.document_object_id HAVING related_count BETWEEN 2 AND 4",
        "SELECT dsm.document_object_id, COUNT(*) AS related_count FROM document_subset_members dsm GROUP BY dsm.document_object_id HAVING COUNT(*) BETWEEN 2 AND 4",
        "SELECT dsm.document_object_id, COUNT(dsm.related_document_object_id) FROM document_subset_members dsm GROUP BY dsm.document_object_id HAVING COUNT(dsm.related_document_object_id) BETWEEN 2 AND 4",
        "SELECT document_object_id, COUNT(related_document_object_id) AS num_related FROM document_subset_members GROUP BY document_object_id HAVING num_related >= 2 AND num_related <= 4",
        "SELECT document_object_id, COUNT(*) FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4) GROUP BY document_object_id",
        "SELECT document_object_id, related_count FROM (SELECT document_object_id, COUNT(related_document_object_id) AS related_count FROM document_subset_members GROUP BY document_object_id) AS counts WHERE related_count BETWEEN 2 AND 4",
        "SELECT distinct(dsm1.document_object_id), COUNT(dsm2.related_document_object_id) FROM document_subset_members dsm1 INNER JOIN document_subset_members dsm2 ON dsm1.document_object_id = dsm2.document_object_id GROUP BY dsm1.document_object_id HAVING COUNT(dsm2.related_document_object_id) BETWEEN 2 AND 4",
        "WITH CountRelated AS (SELECT document_object_id, COUNT(related_document_object_id) AS related_count FROM document_subset_members GROUP BY document_object_id) SELECT document_object_id, related_count FROM CountRelated WHERE related_count BETWEEN 2 AND 4",
        "SELECT ReturnType.document_object_id, ReturnType.related_count FROM (SELECT document_object_id, COUNT(related_document_object_id) AS related_count FROM document_subset_members GROUP BY document_object_id) AS ReturnType WHERE ReturnType.related_count BETWEEN 2 AND 4",
        "SELECT document_object_id, related_count FROM (SELECT document_object_id, COUNT(related_document_object_id) AS related_count FROM document_subset_members GROUP BY document_object_id HAVING COUNT(related_document_object_id) BETWEEN 2 AND 4) AS ResultTable"
      ]
    ]
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all owner of documents that is related to documents owned by Braeden.",
    "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "infer_predictions": [
      [
        "SELECT DISTINCT doc.owner FROM document_objects AS doc JOIN document_subset_members AS members ON doc.document_object_id = members.related_document_object_id JOIN document_objects AS parent_doc ON members.document_object_id = parent_doc.document_object_id WHERE parent_doc.owner = 'Braeden'",
        "SELECT DISTINCT owner FROM document_objects WHERE document_object_id IN (SELECT related_document_object_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden'))",
        "SELECT DISTINCT other.owner FROM document_objects AS other, document_objects AS owned JOIN document_subset_members ON owned.document_object_id = document_subset_members.document_object_id WHERE document_subset_members.related_document_object_id = other.document_object_id AND owned.owner = 'Braeden'",
        "SELECT DISTINCT owner FROM document_objects WHERE document_object_id IN (SELECT related_document_object_id FROM document_subset_members JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Braeden')",
        "SELECT owner FROM document_objects WHERE document_object_id IN (SELECT related_document_object_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden')) GROUP BY owner",
        "SELECT d.owner FROM document_objects AS d JOIN document_subset_members AS m ON d.document_object_id = m.related_document_object_id WHERE EXISTS (SELECT 1 FROM document_objects WHERE owner = 'Braeden' AND document_object_id = m.document_object_id)",
        "SELECT uniq.owner FROM document_objects as uniq WHERE EXISTS (SELECT document_object_id FROM document_subset_members WHERE related_document_object_id = uniq.document_object_id AND EXISTS (SELECT document_object_id FROM document_objects WHERE document_object_id = document_subset_members.document_object_id AND owner = 'Braeden'))",
        "SELECT DISTINCT d1.owner FROM document_objects d1 INNER JOIN document_subset_members ds ON d1.document_object_id = ds.related_document_object_id INNER JOIN document_objects d2 ON ds.document_object_id = d2.document_object_id WHERE d2.owner = 'Braeden'",
        "SELECT DISTINCT owner FROM document_objects WHERE document_object_id IN (SELECT DISTINCT related_document_object_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden'))",
        "SELECT owner FROM document_objects WHERE document_object_id IN (SELECT ds.related_document_object_id FROM document_subset_members ds WHERE EXISTS (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden' AND document_object_id = ds.document_object_id))"
      ]
    ]
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different owners of documents that are related to ones owned by Braeden?",
    "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "infer_predictions": [
      [
        "SELECT DISTINCT do.owner FROM document_objects AS do INNER JOIN document_objects AS braeden_docs ON do.document_object_id = braeden_docs.parent_document_object_id WHERE braeden_docs.owner = 'Braeden'",
        "SELECT DISTINCT owner FROM document_objects WHERE parent_document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden')",
        "SELECT DISTINCT o.owner FROM document_objects o, document_objects b WHERE o.parent_document_object_id = b.document_object_id AND b.owner = 'Braeden'",
        "SELECT DISTINCT do2.owner FROM document_objects AS do1 JOIN document_objects AS do2 ON do1.document_object_id = do2.parent_document_object_id WHERE do1.owner = 'Braeden'",
        "SELECT DISTINCT foo.owner FROM document_objects AS foo WHERE EXISTS (SELECT 1 FROM document_objects AS bar WHERE bar.owner = 'Braeden' AND foo.parent_document_object_id = bar.document_object_id)",
        "SELECT DISTINCT derived.owner FROM (SELECT * FROM document_objects WHERE owner != 'Braeden') AS derived INNER JOIN document_objects AS original ON derived.parent_document_object_id = original.document_object_id WHERE original.owner = 'Braeden'",
        "SELECT DISTINCT o.owner FROM document_objects o JOIN document_objects b ON o.parent_document_object_id = b.document_object_id WHERE b.owner = 'Braeden' AND o.owner != 'Braeden'",
        "SELECT DISTINCT d.owner FROM document_objects d WHERE d.parent_document_object_id IN (SELECT d2.document_object_id FROM document_objects d2 WHERE d2.owner = 'Braeden') AND d.owner != 'Braeden'",
        "SELECT DISTINCT owners.owner FROM document_objects owners JOIN document_objects parents ON owners.parent_document_object_id = parents.document_object_id WHERE parents.owner = 'Braeden' AND owners.owner != 'Braeden'"
      ]
    ]
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "infer_predictions": [
      [
        "SELECT DISTINCT document_subsets.document_subset_name FROM document_objects JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_objects.owner = 'Braeden'",
        "SELECT DISTINCT ds.document_subset_name FROM document_objects AS do INNER JOIN document_subset_members AS dsm ON do.document_object_id = dsm.document_object_id INNER JOIN document_subsets AS ds ON dsm.document_subset_id = ds.document_subset_id WHERE do.owner = 'Braeden'",
        "SELECT document_subsets.document_subset_name FROM document_subsets WHERE document_subset_id IN (SELECT document_subset_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden')) GROUP BY document_subset_name",
        "SELECT DISTINCT d_subset_name FROM (SELECT dsm.document_object_id, ds.document_subset_name AS d_subset_name FROM document_subsets AS ds JOIN document_subset_members AS dsm ON ds.document_subset_id = dsm.document_subset_id JOIN document_objects AS dor ON dor.document_object_id = dsm.document_object_id WHERE dor.owner = 'Braeden')",
        "SELECT DISTINCT s.document_subset_name FROM document_subsets s WHERE EXISTS (SELECT 1 FROM document_subset_members m JOIN document_objects o ON m.document_object_id = o.document_object_id WHERE o.owner = 'Braeden' AND s.document_subset_id = m.document_subset_id)",
        "SELECT DISTINCT SUB.document_subset_name FROM document_objects DOCS JOIN document_subset_members DSM ON DOCS.document_object_id = DSM.document_object_id JOIN document_subsets SUB ON DSM.document_subset_id = SUB.document_subset_id WHERE DOCS.owner = 'Braeden'",
        "SELECT DISTINCT SUBSET_NAME FROM (SELECT ds.document_subset_name AS SUBSET_NAME FROM document_subsets ds, document_subset_members dsm, document_objects do WHERE ds.document_subset_id = dsm.document_subset_id AND dsm.document_object_id = do.document_object_id AND do.owner = 'Braeden')",
        "SELECT document_subset_name FROM document_subsets WHERE document_subset_id IN (SELECT document_subset_id FROM document_subset_members JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Braeden') GROUP BY document_subset_name"
      ]
    ]
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different subset names of all documents owned by Braeden?",
    "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "infer_predictions": [
      [
        "SELECT DISTINCT ds.document_subset_name FROM document_objects do JOIN document_subset_members dsm ON do.document_object_id = dsm.document_object_id JOIN document_subsets ds ON ds.document_subset_id = dsm.document_subset_id WHERE do.owner = 'Braeden'",
        "SELECT DISTINCT ds.document_subset_name FROM document_objects INNER JOIN document_subset_members ON document_objects.document_object_id = document_subset_members.document_object_id INNER JOIN document_subsets ds on ds.document_subset_id = document_subset_members.document_subset_id WHERE document_objects.owner = 'Braeden'",
        "SELECT document_subset_name FROM document_subsets WHERE document_subset_id IN (SELECT document_subset_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden'))",
        "SELECT document_subsets.document_subset_name FROM document_subsets JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id JOIN document_objects ON document_subset_members.document_object_id = document_objects.document_object_id WHERE document_objects.owner = 'Braeden' GROUP BY document_subsets.document_subset_name",
        "SELECT DISTINCT document_subset_name FROM document_subsets, document_subset_members, document_objects WHERE document_subsets.document_subset_id = document_subset_members.document_subset_id AND document_subset_members.document_object_id = document_objects.document_object_id AND document_objects.owner = 'Braeden'",
        "SELECT document_subset_name FROM document_subsets ds WHERE EXISTS (SELECT 1 FROM document_subset_members dsm JOIN document_objects do ON dsm.document_object_id = do.document_object_id WHERE dsm.document_subset_id = ds.document_subset_id AND do.owner = 'Braeden')",
        "SELECT DISTINCT ds.document_subset_name FROM document_subsets ds INNER JOIN (SELECT dsm.document_subset_id FROM document_subset_members dsm JOIN document_objects do ON dsm.document_object_id = do.document_object_id WHERE do.owner = 'Braeden') t ON ds.document_subset_id = t.document_subset_id",
        "SELECT DISTINCT document_subset_name FROM document_subsets CROSS JOIN document_subset_members USING (document_subset_id) INNER JOIN document_objects USING (document_object_id) WHERE document_objects.owner = 'Braeden'",
        "SELECT DISTINCT ds.document_subset_name FROM document_subsets ds WHERE ds.document_subset_id IN (SELECT document_subset_id FROM document_subset_members WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Braeden'))",
        "SELECT DISTINCT nm.document_subset_name FROM document_subsets nm, document_subset_members mb, document_objects ob WHERE nm.document_subset_id = mb.document_subset_id AND mb.document_object_id = ob.document_object_id AND ob.owner = 'Braeden'"
      ]
    ]
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List subset id, name and number of different documents in each subset.",
    "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
    "infer_predictions": [
      [
        "SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) AS num_documents FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id, ds.document_subset_name",
        "SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS num_documents FROM document_subsets INNER JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id, document_subsets.document_subset_name",
        "SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.document_object_id) FROM document_subsets d INNER JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name",
        "SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) FROM document_subsets ds INNER JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id, ds.document_subset_name",
        "SELECT A.document_subset_id, A.document_subset_name, COUNT(DISTINCT B.document_object_id) FROM document_subsets A JOIN document_subset_members B ON A.document_subset_id = B.document_subset_id GROUP BY A.document_subset_id, A.document_subset_name",
        "SELECT doc_sub.document_subset_id, doc_sub.document_subset_name, (SELECT COUNT(DISTINCT doc_mem.document_object_id) FROM document_subset_members doc_mem WHERE doc_mem.document_subset_id = doc_sub.document_subset_id) AS doc_count FROM document_subsets doc_sub",
        "SELECT sub.document_subset_id, sub.document_subset_name, (SELECT COUNT(DISTINCT member.document_object_id) FROM document_subset_members member WHERE member.document_subset_id = sub.document_subset_id) AS document_count FROM document_subsets sub",
        "SELECT subset.document_subset_id, subset.document_subset_name, (SELECT COUNT(DISTINCT members.document_object_id) FROM document_subset_members members WHERE members.document_subset_id = subset.document_subset_id) AS total_documents FROM document_subsets subset",
        "SELECT subsets.document_subset_id, subsets.document_subset_name, COUNT(DISTINCT memberships.document_object_id) AS number_of_documents FROM document_subsets subsets JOIN document_subset_members memberships ON subsets.document_subset_id = memberships.document_subset_id GROUP BY subsets.document_subset_id, subsets.document_subset_name"
      ]
    ]
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the subset id, name, and number of different documents for each subset?",
    "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
    "infer_predictions": [
      [
        "SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dmo.document_object_id) FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id JOIN document_objects dmo ON dsm.document_object_id = dmo.document_object_id GROUP BY ds.document_subset_id, ds.document_subset_name",
        "SELECT document_subset_id, document_subset_name, COUNT(DISTINCT document_object_id) as doc_count FROM document_subsets JOIN document_subset_members USING(document_subset_id) JOIN document_objects USING(document_object_id) GROUP BY document_subset_id, document_subset_name",
        "SELECT document_subsets.document_subset_id, document_subset_name, (SELECT COUNT(DISTINCT document_object_id) FROM document_subset_members WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id) FROM document_subsets",
        "SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT do.document_object_id) FROM document_subsets d INNER JOIN document_subset_members dsm ON d.document_subset_id = dsm.document_subset_id INNER JOIN document_objects do ON dsm.document_object_id = do.document_object_id GROUP BY d.document_subset_id, d.document_subset_name",
        "WITH DocumentCount AS (SELECT document_subset_id, COUNT(DISTINCT document_object_id) AS Total FROM document_subset_members GROUP BY document_subset_id) SELECT document_subsets.document_subset_id, document_subset_name, Total FROM document_subsets JOIN DocumentCount ON document_subsets.document_subset_id = DocumentCount.document_subset_id",
        "SELECT document_subsets.document_subset_id, document_subset_name, (SELECT COUNT(DISTINCT document_object_id) FROM document_subset_members WHERE document_subset_id = document_subsets.document_subset_id) AS NumberOfDocuments FROM document_subsets",
        "SELECT document_subsets.document_subset_id, document_subset_name, (SELECT COUNT(DISTINCT document_subset_members.document_object_id) FROM document_subset_members WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id) AS NumberOfDocuments FROM document_subsets",
        "SELECT ds.document_subset_id, ds.document_subset_name, (SELECT COUNT(DISTINCT dsm.document_object_id) FROM document_subset_members dsm WHERE dsm.document_subset_id = ds.document_subset_id) FROM document_subsets ds"
      ]
    ]
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
    "infer_predictions": [
      [
        "SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) as num_docs FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id, ds.document_subset_name ORDER BY num_docs DESC LIMIT 1",
        "SELECT document_subset_id, document_subset_name, COUNT(DISTINCT document_object_id) as num_docs FROM document_subsets NATURAL JOIN document_subset_members GROUP BY document_subset_id ORDER BY num_docs DESC LIMIT 1",
        "SELECT ds.document_subset_id, ds.document_subset_name, COUNT(DISTINCT dsm.document_object_id) FROM document_subsets ds INNER JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id GROUP BY ds.document_subset_id ORDER BY COUNT(DISTINCT dsm.document_object_id) DESC LIMIT 1",
        "SELECT document_subset_id, document_subset_name, COUNT(DISTINCT document_object_id) as document_count FROM document_subsets JOIN document_subset_members USING (document_subset_id) GROUP BY document_subset_id, document_subset_name ORDER BY document_count DESC LIMIT 1",
        "SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.document_object_id) FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id ORDER BY COUNT(DISTINCT m.document_object_id) DESC LIMIT 1",
        "SELECT s.document_subset_id, s.document_subset_name, c.num_docs FROM document_subsets s JOIN (SELECT document_subset_id, COUNT(DISTINCT document_object_id) as num_docs FROM document_subset_members GROUP BY document_subset_id) c ON s.document_subset_id = c.document_subset_id ORDER BY c.num_docs DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
    "infer_predictions": [
      [
        "SELECT DS.document_subset_id, DS.document_subset_name, COUNT(DISTINCT DSM.document_object_id) AS document_count FROM document_subsets DS JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id GROUP BY DS.document_subset_id, DS.document_subset_name ORDER BY document_count DESC LIMIT 1",
        "SELECT document_subsets.document_subset_id, document_subsets.document_subset_name, COUNT(DISTINCT document_subset_members.document_object_id) AS num_documents FROM document_subsets INNER JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id GROUP BY document_subsets.document_subset_id ORDER BY num_documents DESC LIMIT 1",
        "SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT m.document_object_id) AS doc_count FROM document_subsets d, document_subset_members m WHERE d.document_subset_id = m.document_subset_id GROUP BY d.document_subset_id, d.document_subset_name ORDER BY doc_count DESC LIMIT 1",
        "SELECT d.document_subset_id, d.document_subset_name, COUNT(DISTINCT p.document_object_id) AS TotalCount FROM document_subsets d JOIN document_subset_members p ON d.document_subset_id = p.document_subset_id GROUP BY d.document_subset_id ORDER BY TotalCount DESC LIMIT 1",
        "SELECT DS.document_subset_id, DS.document_subset_name, COUNT(DISTINCT DM.document_object_id) FROM document_subsets DS LEFT JOIN document_subset_members DM ON DS.document_subset_id = DM.document_subset_id GROUP BY DS.document_subset_id, DS.document_subset_name ORDER BY COUNT(DISTINCT DM.document_object_id) DESC LIMIT 1",
        "SELECT x.document_subset_id, x.document_subset_name, u.count_docs FROM document_subsets x JOIN (SELECT document_subset_id, COUNT(DISTINCT document_object_id) AS count_docs FROM document_subset_members GROUP BY document_subset_id) u ON x.document_subset_id = u.document_subset_id ORDER BY u.count_docs DESC LIMIT 1",
        "SELECT s.document_subset_id, s.document_subset_name, COUNT(DISTINCT v.document_object_id) AS document_count FROM document_subsets s LEFT OUTER JOIN document_subset_members v ON s.document_subset_id = v.document_subset_id GROUP BY s.document_subset_id, s.document_subset_name ORDER BY document_count DESC LIMIT 1",
        "SELECT a.document_subset_id, a.document_subset_name, COUNT(DISTINCT b.document_object_id) AS document_count FROM document_subsets a INNER JOIN document_subset_members b ON a.document_subset_id = b.document_subset_id GROUP BY a.document_subset_id HAVING document_count = (SELECT MAX(c.countdoc) FROM (SELECT COUNT(DISTINCT document_object_id) AS countdoc FROM document_subset_members GROUP BY document_subset_id) c)"
      ]
    ]
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
    "infer_predictions": [
      [
        "SELECT distinct DSM.document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
        "SELECT distinct document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')",
        "SELECT D.document_object_id FROM document_objects D WHERE D.document_object_id IN (SELECT DSM.document_object_id FROM document_subset_members DSM INNER JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000')",
        "SELECT distinct DSM.document_object_id FROM document_subset_members DSM, document_subsets DS WHERE DSM.document_subset_id = DS.document_subset_id AND DS.document_subset_name = 'Best for 2000'",
        "SELECT DSM.document_object_id FROM document_subset_members DSM WHERE DSM.document_subset_id = (SELECT DS.document_subset_id FROM document_subsets DS WHERE DS.document_subset_name = 'Best for 2000')",
        "SELECT distinct A.document_object_id FROM document_subset_members A JOIN document_subsets B ON A.document_subset_id = B.document_subset_id WHERE B.document_subset_name = 'Best for 2000'",
        "SELECT distinct DSM.document_object_id FROM document_subsets DS INNER JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
        "SELECT document_object_id FROM document_subset_members WHERE EXISTS (SELECT 1 FROM document_subsets WHERE document_subsets.document_subset_id = document_subset_members.document_subset_id AND document_subset_name = 'Best for 2000')",
        "SELECT document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'",
        "SELECT document_object_id FROM document_subset_members DSM WHERE DSM.document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')"
      ]
    ]
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
    "infer_predictions": [
      [
        "SELECT dsm.related_document_object_id FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id WHERE ds.document_subset_name = 'Best for 2000'",
        "SELECT document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')",
        "SELECT document_subset_members.related_document_object_id FROM document_subset_members INNER JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subsets.document_subset_name = 'Best for 2000'",
        "SELECT related_document_object_id FROM document_subset_members, document_subsets WHERE document_subset_members.document_subset_id = document_subsets.document_subset_id AND document_subsets.document_subset_name = 'Best for 2000'",
        "SELECT DISTINCT dsm.related_document_object_id FROM document_subset_members AS dsm JOIN document_subsets AS ds ON dsm.document_subset_id = ds.document_subset_id WHERE ds.document_subset_name = 'Best for 2000'",
        "SELECT dsm.related_document_object_id FROM document_subsets ds, document_subset_members dsm WHERE ds.document_subset_id = dsm.document_subset_id AND ds.document_subset_name = 'Best for 2000'",
        "WITH SubsetID AS (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') SELECT document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM SubsetID)",
        "SELECT related_document_object_id AS DocumentID FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')",
        "SELECT dsm.related_document_object_id FROM document_subsets ds INNER JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id WHERE ds.document_subset_name LIKE 'Best for 2000'",
        "SELECT main.member_id FROM (SELECT related_document_object_id AS member_id FROM document_subset_members dsmb JOIN document_subsets dsub ON dsub.document_subset_id = dsmb.document_subset_id WHERE dsub.document_subset_name = 'Best for 2000') main"
      ]
    ]
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "gold": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
    "infer_predictions": [
      [
        "SELECT DS.document_subset_name, DSM.document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id",
        "SELECT document_subset_name, document_object_id FROM document_subsets INNER JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id",
        "SELECT DS.document_subset_name, DSM.document_object_id FROM document_subset_members DSM, document_subsets DS WHERE DSM.document_subset_id = DS.document_subset_id",
        "SELECT D.document_subset_name, M.document_object_id FROM document_subsets D, document_subset_members M WHERE D.document_subset_id = M.document_subset_id",
        "SELECT document_subset_name, D.document_object_id FROM document_subsets JOIN document_subset_members AS D ON document_subsets.document_subset_id = D.document_subset_id",
        "SELECT DS.document_subset_name AS Subset_Name, DSM.document_object_id AS Document_ID FROM document_subset_members DSM INNER JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id",
        "SELECT document_subset_name AS SubsetName, document_object_id AS DocumentID FROM document_subsets JOIN document_subset_members USING (document_subset_id)",
        "SELECT DISTINCT DS.document_subset_name, DSM.document_object_id FROM document_subsets DS JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id",
        "SELECT A.document_subset_name, B.document_object_id FROM document_subsets A INNER JOIN document_subset_members B ON A.document_subset_id = B.document_subset_id",
        "SELECT DS.document_subset_name, DSM.document_object_id FROM document_subsets AS DS INNER JOIN document_subset_members AS DSM ON DS.document_subset_id = DSM.document_subset_id"
      ]
    ]
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "gold": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id",
    "infer_predictions": [
      [
        "SELECT ds.document_subset_name, dsm.document_object_id FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id",
        "SELECT document_subset_name, document_object_id FROM document_subsets INNER JOIN document_subset_members ON document_subsets.document_subset_id = document_subset_members.document_subset_id",
        "SELECT d.document_subset_name, m.document_object_id FROM document_subset_members m, document_subsets d WHERE m.document_subset_id = d.document_subset_id",
        "SELECT ds.document_subset_name AS 'Subset Name', dsm.document_object_id AS 'Document ID' FROM document_subsets AS ds INNER JOIN document_subset_members AS dsm ON ds.document_subset_id = dsm.document_subset_id",
        "SELECT document_subsets.document_subset_name, dsm.document_object_id FROM document_subset_members AS dsm, document_subsets WHERE dsm.document_subset_id = document_subsets.document_subset_id",
        "SELECT D.document_subset_name, M.document_object_id FROM document_subsets D INNER JOIN document_subset_members M ON D.document_subset_id = M.document_subset_id",
        "SELECT ds.document_subset_name, dsm.document_object_id FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id WHERE ds.document_subset_name IS NOT NULL",
        "SELECT d.document_subset_name AS Subset, m.document_object_id AS DocID FROM document_subsets d JOIN document_subset_members m ON d.document_subset_id = m.document_subset_id WHERE NOT d.document_subset_name IS NULL"
      ]
    ]
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "gold": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
    "infer_predictions": [
      [
        "SELECT c.collection_name FROM collections c JOIN documents_in_collections dc ON c.collection_id = dc.collection_id JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom'",
        "SELECT DISTINCT collection_name FROM collections WHERE collection_id IN (SELECT collection_id FROM documents_in_collections WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom'))",
        "SELECT collection_name FROM collections INNER JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id INNER JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id AND document_objects.owner = 'Ransom'",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT collection_id FROM documents_in_collections JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE owner = 'Ransom')",
        "SELECT DISTINCT c.collection_name FROM collections c, documents_in_collections dic, document_objects do WHERE c.collection_id = dic.collection_id AND dic.document_object_id = do.document_object_id AND do.owner = 'Ransom'",
        "SELECT DISTINCT c.collection_name FROM document_objects AS d CROSS JOIN documents_in_collections AS dc CROSS JOIN collections AS c WHERE d.document_object_id = dc.document_object_id AND dc.collection_id = c.collection_id AND d.owner = 'Ransom'",
        "SELECT c.collection_name FROM collections AS c JOIN documents_in_collections AS dc ON c.collection_id = dc.collection_id WHERE dc.document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom')",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT dc.collection_id FROM documents_in_collections dc LEFT JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom')"
      ]
    ]
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the collection name of a document owned by 'Ransom'?",
    "gold": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "infer_predictions": [
      [
        "SELECT c.collection_name FROM document_objects d INNER JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id INNER JOIN collections c ON dc.collection_id = c.collection_id WHERE d.owner = 'Ransom'",
        "SELECT collections.collection_name FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id JOIN document_objects ON document_objects.document_object_id = documents_in_collections.document_object_id WHERE document_objects.owner = 'Ransom'",
        "SELECT distinct c.collection_name FROM collections c, documents_in_collections dc, document_objects d WHERE c.collection_id = dc.collection_id AND dc.document_object_id = d.document_object_id AND d.owner = 'Ransom'",
        "SELECT c.collection_name FROM collections c JOIN documents_in_collections dc ON c.collection_id = dc.collection_id JOIN document_objects d ON dc.document_object_id = d.document_object_id WHERE d.owner = 'Ransom'",
        "SELECT c.collection_name FROM collections AS c INNER JOIN (documents_in_collections AS dc INNER JOIN document_objects AS d ON dc.document_object_id = d.document_object_id) ON dc.collection_id = c.collection_id WHERE d.owner = 'Ransom'",
        "SELECT name.collection_name FROM (SELECT collection_name FROM collections WHERE collection_id IN (SELECT collection_id FROM documents_in_collections WHERE document_object_id IN (SELECT document_object_id FROM document_objects WHERE owner = 'Ransom'))) AS name",
        "SELECT c.collection_name FROM collections AS c WHERE EXISTS (SELECT 1 FROM documents_in_collections AS dc JOIN document_objects AS d ON dc.document_object_id = d.document_object_id AND d.owner = 'Ransom' WHERE dc.collection_id = c.collection_id)",
        "SELECT c.collection_name FROM document_objects d INNER JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id INNER JOIN collections c ON dc.collection_id = c.collection_id WHERE d.owner = 'Ransom' GROUP BY c.collection_name",
        "SELECT C.collection_name FROM collections C, documents_in_collections DC, document_objects DO WHERE C.collection_id = DC.collection_id AND DC.document_object_id = DO.document_object_id AND DO.owner = 'Ransom'"
      ]
    ]
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many collections does each document belong to? List the count and the document id.",
    "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
    "infer_predictions": [
      [
        "SELECT document_object_id, COUNT(collection_id) AS collection_count FROM documents_in_collections GROUP BY document_object_id",
        "SELECT doc_id AS document_object_id, COUNT(coll_id) AS collection_count FROM (SELECT document_object_id AS doc_id, collection_id AS coll_id FROM documents_in_collections) GROUP BY doc_id",
        "SELECT d.document_object_id, COUNT(d.collection_id) AS collection_count FROM documents_in_collections AS d GROUP BY d.document_object_id",
        "SELECT d.document_object_id, COUNT(*) AS collection_count FROM documents_in_collections d GROUP BY d.document_object_id",
        "SELECT document_object_id, COUNT(DISTINCT collection_id) AS collection_count FROM documents_in_collections GROUP BY document_object_id",
        "SELECT id AS document_object_id, COUNT(cid) AS collection_count FROM (SELECT document_object_id AS id, collection_id AS cid FROM documents_in_collections) GROUP BY id",
        "SELECT doc_id, COUNT(coll_id) FROM (SELECT document_object_id AS doc_id, collection_id AS coll_id FROM documents_in_collections) GROUP BY doc_id COLLATE NOCASE",
        "SELECT document_object_id, COUNT(collection_id) FROM documents_in_collections GROUP BY document_object_id ORDER BY document_object_id",
        "SELECT document_object_id, COUNT(1) FROM documents_in_collections GROUP BY document_object_id",
        "SELECT document_object_id, SUM(1) AS collection_count FROM documents_in_collections GROUP BY document_object_id"
      ]
    ]
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For each document object id, how many collections does it belong to?",
    "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
    "infer_predictions": [
      [
        "SELECT doc_obj.document_object_id, COUNT(distinct doc_col.collection_id) FROM document_objects doc_obj JOIN documents_in_collections doc_col ON doc_obj.document_object_id = doc_col.document_object_id GROUP BY doc_obj.document_object_id",
        "SELECT d.document_object_id, COUNT(c.collection_id) AS total_collections FROM document_objects d LEFT JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id LEFT JOIN collections c ON dc.collection_id = c.collection_id GROUP BY d.document_object_id",
        "SELECT document_object_id, COUNT(collection_id) AS count_of_collections FROM documents_in_collections GROUP BY document_object_id",
        "SELECT a.document_object_id, (SELECT COUNT(*) FROM documents_in_collections WHERE document_object_id = a.document_object_id) as numOfCollections FROM document_objects a",
        "SELECT document_objects.document_object_id, (SELECT COUNT(*) FROM documents_in_collections WHERE documents_in_collections.document_object_id = document_objects.document_object_id) AS collections_count FROM document_objects",
        "SELECT document_object_id, COUNT(*) AS collection_count FROM documents_in_collections GROUP BY document_object_id",
        "SELECT d.document_object_id, IFNULL(SUM(CASE WHEN dc.collection_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS collection_count FROM document_objects d LEFT JOIN documents_in_collections dc ON dc.document_object_id = d.document_object_id GROUP BY d.document_object_id",
        "SELECT dbo.document_object_id, COUNT(DISTINCT coll.collection_id) AS number_of_collections FROM document_objects dbo LEFT JOIN documents_in_collections doccol ON dbo.document_object_id = doccol.document_object_id LEFT JOIN collections coll ON doccol.collection_id = coll.collection_id GROUP BY dbo.document_object_id",
        "SELECT document_object_id, COUNT(collection_id) FROM documents_in_collections WHERE document_object_id IN (SELECT document_object_id FROM document_objects) GROUP BY document_object_id",
        "SELECT document_objects.document_object_id AS ObjID, COUNT(*) AS CollectionsCount FROM document_objects INNER JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id GROUP BY document_objects.document_object_id"
      ]
    ]
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many documents does collection named 'Best' has?",
    "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(doc.document_object_id) FROM document_objects AS doc JOIN documents_in_collections AS doc_col ON doc.document_object_id = doc_col.document_object_id JOIN collections AS col ON col.collection_id = doc_col.collection_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(*) FROM document_objects WHERE document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(DISTINCT doc.document_object_id) FROM collections col INNER JOIN documents_in_collections doc_col ON col.collection_id = doc_col.collection_id INNER JOIN document_objects doc ON doc_col.document_object_id = doc.document_object_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(document_object_id) FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(doc.document_object_id) FROM document_objects AS doc LEFT JOIN documents_in_collections AS doc_col ON doc.document_object_id = doc_col.document_object_id LEFT JOIN collections AS col ON col.collection_id = doc_col.collection_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT doc_col.document_object_id) FROM collections AS col JOIN documents_in_collections AS doc_col ON col.collection_id = doc_col.collection_id WHERE collection_name = 'Best'",
        "SELECT COUNT(*) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(doc_col.document_object_id) FROM documents_in_collections as doc_col JOIN collections as col ON col.collection_id = doc_col.collection_id WHERE col.collection_name = 'Best' GROUP BY col.collection_name",
        "SELECT COUNT(1) FROM documents_in_collections di WHERE EXISTS (SELECT 1 FROM collections WHERE collection_name = 'Best' AND collection_id = di.collection_id)",
        "SELECT COUNT(distinct(documents_in_collections.document_object_id)) FROM documents_in_collections LEFT JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the number of documents in the collection named 'Best'?",
    "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(doc.document_object_id) FROM collections col JOIN documents_in_collections docinc ON col.collection_id = docinc.collection_id JOIN document_objects doc ON docinc.document_object_id = doc.document_object_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT document_object_id) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(documents_in_collections.document_object_id) FROM documents_in_collections JOIN collections ON collections.collection_id = documents_in_collections.collection_id WHERE collections.collection_name = 'Best'",
        "SELECT COUNT(*) FROM document_objects WHERE document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(1) FROM documents_in_collections dic INNER JOIN collections c ON dic.collection_id = c.collection_id AND c.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections dic JOIN collections c ON dic.collection_id = c.collection_id JOIN document_objects doc ON dic.document_object_id = doc.document_object_id WHERE c.collection_name = 'Best'",
        "SELECT COUNT(*) FROM (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(ALL document_object_id) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM document_objects WHERE EXISTS (SELECT 1 FROM documents_in_collections JOIN collections ON collections.collection_id = documents_in_collections.collection_id WHERE document_objects.document_object_id = documents_in_collections.document_object_id AND collections.collection_name = 'Best')"
      ]
    ]
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List the document id of all documents in collection named Best.",
    "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT doc.document_object_id FROM document_objects AS doc JOIN documents_in_collections AS dc ON doc.document_object_id = dc.document_object_id JOIN collections AS col ON dc.collection_id = col.collection_id WHERE col.collection_name = 'Best'",
        "SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT document_objects.document_object_id FROM document_objects INNER JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id WHERE documents_in_collections.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT DISTINCT document_objects.document_object_id FROM document_objects, documents_in_collections, collections WHERE document_objects.document_object_id = documents_in_collections.document_object_id AND documents_in_collections.collection_id = collections.collection_id AND collections.collection_name = 'Best'",
        "SELECT d.document_object_id FROM document_objects d JOIN documents_in_collections dc ON d.document_object_id = dc.document_object_id JOIN collections c ON dc.collection_id = c.collection_id WHERE c.collection_name = 'Best'",
        "SELECT DO.document_object_id FROM document_objects AS DO WHERE DO.document_object_id IN (SELECT DIC.document_object_id FROM documents_in_collections AS DIC JOIN collections AS C ON DIC.collection_id = C.collection_id WHERE C.collection_name = 'Best')",
        "SELECT documents_in_collections.document_object_id FROM documents_in_collections INNER JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Best'",
        "SELECT doc_ob_id FROM (SELECT document_objects.document_object_id AS doc_ob_id FROM document_objects JOIN documents_in_collections ON document_objects.document_object_id = documents_in_collections.document_object_id JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Best')",
        "SELECT document_objects.document_object_id FROM document_objects JOIN (SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')) AS docs_in_col_best ON document_objects.document_object_id = docs_in_col_best.document_object_id"
      ]
    ]
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What is the number of document object ids in the collection named Best?",
    "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT doc.document_object_id) FROM documents_in_collections AS doc JOIN collections AS col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(*) FROM document_objects WHERE document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(unico.document_object_id) FROM (SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')) unico",
        "SELECT COUNT(document_object_id) AS TotalDocs FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT documents_in_collections.document_object_id) FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id AND collections.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT document_object_id) FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(1) FROM document_objects WHERE document_object_id IN (SELECT doc.document_object_id FROM documents_in_collections doc JOIN collections col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best')",
        "SELECT COUNT(DOC.document_object_id) FROM documents_in_collections AS DOC, collections AS COL WHERE DOC.collection_id = COL.collection_id AND COL.collection_name = 'Best'",
        "SELECT COUNT(*) FROM (SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best') GROUP BY document_object_id)"
      ]
    ]
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which collection have most number of documents? List collection name, id and number of documents.",
    "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT collections.collection_name, collections.collection_id, COUNT(documents_in_collections.document_object_id) AS num_documents FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id GROUP BY collections.collection_id ORDER BY num_documents DESC LIMIT 1",
        "SELECT C.collection_name, C.collection_id, COUNT(D.document_object_id) AS document_count FROM collections C INNER JOIN documents_in_collections D ON C.collection_id = D.collection_id GROUP BY C.collection_id ORDER BY document_count DESC LIMIT 1",
        "SELECT collection_name, collection_id, (SELECT COUNT(*) FROM documents_in_collections WHERE documents_in_collections.collection_id = collections.collection_id) AS doc_count FROM collections ORDER BY doc_count DESC LIMIT 1",
        "SELECT C.collection_name, C.collection_id, num_docs FROM collections C LEFT JOIN (SELECT collection_id, COUNT(*) AS num_docs FROM documents_in_collections GROUP BY collection_id) D ON C.collection_id = D.collection_id ORDER BY D.num_docs DESC LIMIT 1",
        "SELECT C.collection_name, C.collection_id, CNT.cnt FROM collections C JOIN (SELECT collection_id, COUNT(document_object_id) AS cnt FROM documents_in_collections GROUP BY collection_id) CNT ON C.collection_id = CNT.collection_id ORDER BY CNT.cnt DESC LIMIT 1",
        "SELECT collections.collection_name, collections.collection_id, document_count FROM collections JOIN (SELECT collection_id, COUNT(document_object_id) AS document_count FROM documents_in_collections GROUP BY collection_id) AS DocumentCounts ON collections.collection_id = DocumentCounts.collection_id ORDER BY document_count DESC LIMIT 1",
        "SELECT C.collection_name, C.collection_id, COUNT(OfDocs.document_object_id) AS NumOfDocs FROM collections C LEFT JOIN documents_in_collections OfDocs ON C.collection_id = OfDocs.collection_id GROUP BY C.collection_id ORDER BY NumOfDocs DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "nlq": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT collections.collection_name, collections.collection_id, COUNT(documents_in_collections.document_object_id) AS doc_count FROM collections JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id WHERE collections.collection_name = 'Best' GROUP BY collections.collection_id ORDER BY doc_count DESC LIMIT 1",
        "SELECT collections.collection_name, collections.collection_id, COUNT(docs.document_object_id) AS doc_count FROM collections INNER JOIN documents_in_collections AS docs ON collections.collection_id = docs.collection_id WHERE collections.collection_name = 'Best' GROUP BY collections.collection_id ORDER BY doc_count DESC LIMIT 1",
        "SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total FROM collections AS c JOIN documents_in_collections AS d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id ORDER BY total DESC LIMIT 1",
        "SELECT c.collection_name, c.collection_id, COUNT(*) AS document_count FROM collections AS c INNER JOIN documents_in_collections AS d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id ORDER BY document_count DESC LIMIT 1",
        "SELECT c.collection_name, c.collection_id, c.parent_collection_id, COUNT(d.document_object_id) AS doc_count FROM collections AS c JOIN documents_in_collections AS d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING doc_count = (SELECT MAX(counted) FROM (SELECT COUNT(document_object_id) AS counted FROM documents_in_collections GROUP BY collection_id))",
        "SELECT collection_name, collection_id, (SELECT COUNT(document_object_id) FROM documents_in_collections WHERE documents_in_collections.collection_id = collections.collection_id) AS doc_total FROM collections WHERE collection_name = 'Best' ORDER BY doc_total DESC LIMIT 1",
        "SELECT collection_name, collection_id, MAX(doc_count) FROM (SELECT collection_name, collections.collection_id, COUNT(document_object_id) AS doc_count FROM collections LEFT JOIN documents_in_collections ON collections.collection_id = documents_in_collections.collection_id WHERE collection_name = 'Best' GROUP BY collections.collection_id) GROUPED_RESULTS",
        "SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS total_docs FROM collections c JOIN documents_in_collections d ON c.collection_id = d.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id HAVING total_docs = (SELECT MAX(doc_counts) FROM (SELECT COUNT(document_object_id) AS doc_counts FROM documents_in_collections GROUP BY collection_id))",
        "SELECT c.collection_name, c.collection_id, COUNT(d.document_object_id) AS doc_count FROM collections AS c LEFT JOIN documents_in_collections AS d ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best' GROUP BY c.collection_id ORDER BY doc_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT dsm.document_object_id FROM document_subset_members AS dsm JOIN document_subsets AS ds ON dsm.document_subset_id = ds.document_subset_id JOIN documents_in_collections AS dic ON dsm.document_object_id = dic.document_object_id JOIN collections AS c ON dic.collection_id = c.collection_id WHERE ds.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best'",
        "SELECT DISTINCT dsm.document_object_id FROM document_subset_members dsm INNER JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id INNER JOIN documents_in_collections dic ON dsm.document_object_id = dic.document_object_id INNER JOIN collections c ON dic.collection_id = c.collection_id WHERE ds.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best'",
        "SELECT dsm.document_object_id FROM document_subset_members dsm, document_subsets ds, documents_in_collections dic, collections c WHERE dsm.document_subset_id = ds.document_subset_id AND dsm.document_object_id = dic.document_object_id AND dic.collection_id = c.collection_id AND ds.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best'",
        "SELECT dsm.document_object_id FROM document_subset_members dsm JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id JOIN documents_in_collections dic ON dsm.document_object_id = dic.document_object_id JOIN collections c ON dic.collection_id = c.collection_id WHERE ds.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best'",
        "SELECT DISTINCT dsm.document_object_id FROM document_subset_members AS dsm, document_subsets AS ds, documents_in_collections AS dic, collections AS c WHERE dsm.document_subset_id = ds.document_subset_id AND dsm.document_object_id = dic.document_object_id AND dic.collection_id = c.collection_id AND ds.document_subset_name = 'Best for 2000' AND c.collection_name = 'Best'",
        "SELECT DISTINCT document_object_id FROM document_subset_members dsm WHERE dsm.document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') AND dsm.document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') AND document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') INTERSECT SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT document_object_id FROM (SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') INTERSECT SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')) AS subset_docs"
      ]
    ]
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT dsm.document_object_id FROM document_subsets ds JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id JOIN documents_in_collections dic ON dsm.document_object_id = dic.document_object_id WHERE ds.document_subset_name = 'Best for 2000' AND dic.collection_id IN (SELECT collection_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM documents_in_collections JOIN document_objects ON documents_in_collections.document_object_id = document_objects.document_object_id WHERE description = 'Best'))",
        "SELECT dsm.document_object_id FROM document_subsets ds INNER JOIN document_subset_members dsm ON ds.document_subset_id = dsm.document_subset_id, documents_in_collections dic INNER JOIN document_objects dob ON dic.document_object_id = dob.document_object_id WHERE ds.document_subset_name = 'Best for 2000' AND dob.description = 'Best'",
        "SELECT dsm.document_object_id FROM document_subset_members AS dsm WHERE dsm.related_document_object_id IN (SELECT dbo.document_object_id FROM document_objects AS dbo WHERE dbo.owner = (SELECT owner FROM document_objects WHERE description = 'Best') AND dbo.document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT COALESCE(collection_id,'Best') FROM documents_in_collections))) AND dsm.document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')",
        "SELECT document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') AND related_document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM documents_in_collections, document_objects WHERE document_objects.document_object_id = documents_in_collections.document_object_id AND document_objects.description = 'Best'))",
        "SELECT DISTINCT dsm.document_object_id FROM document_subsets AS ds JOIN document_subset_members AS dsm ON ds.document_subset_id = dsm.document_subset_id INNER JOIN documents_in_collections dic ON dsm.document_object_id = dic.document_object_id WHERE ds.document_subset_name = 'Best for 2000' AND EXISTS (SELECT 1 FROM document_objects WHERE document_objects.description = 'Best' AND document_objects.document_object_id = dsm.related_document_object_id)",
        "SELECT document_object_id FROM document_subset_members dsm WHERE dsm.document_subset_id = (SELECT ds.document_subset_id FROM document_subsets ds WHERE ds.document_subset_name = 'Best for 2000') INTERSECT SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT dc.collection_id FROM documents_in_collections dc, document_objects dobj WHERE dc.document_object_id = dobj.document_object_id AND dobj.description = 'Best')",
        "SELECT y.document_object_id FROM (SELECT document_object_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')) y INNER JOIN (SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM document_objects WHERE description = 'Best')) z ON y.document_object_id = z.document_object_id",
        "SELECT document_object_id FROM (SELECT document_object_id, document_subset_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000')) AS subset_members NATURAL JOIN documents_in_collections WHERE collection_id = (SELECT document_object_id FROM document_objects WHERE description = 'Best')"
      ]
    ]
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
    "infer_predictions": [
      [
        "SELECT doc.document_object_id FROM documents_in_collections doc INNER JOIN collections col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best' AND doc.document_object_id NOT IN (SELECT ds.document_object_id FROM document_subset_members ds WHERE ds.document_subset_id = 2000)",
        "SELECT d.document_object_id FROM documents_in_collections d JOIN collections c ON d.collection_id = c.collection_id WHERE c.collection_name = 'Best' AND NOT EXISTS (SELECT 1 FROM document_subset_members ds WHERE ds.document_object_id = d.document_object_id AND ds.document_subset_id = 2000)",
        "SELECT document_objects.document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id JOIN document_objects ON document_objects.document_object_id = documents_in_collections.document_object_id WHERE collections.collection_name = 'Best' AND document_objects.document_object_id NOT IN (SELECT document_subset_members.document_object_id FROM document_subset_members WHERE document_subset_members.document_subset_id = 2000)",
        "SELECT DISTINCT doc.document_object_id FROM documents_in_collections AS doc LEFT JOIN document_subset_members AS ds ON doc.document_object_id = ds.document_object_id AND ds.document_subset_id = 2000 JOIN collections AS col ON doc.collection_id = col.collection_id WHERE col.collection_name = 'Best' AND ds.document_object_id IS NULL",
        "SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best') AND document_object_id NOT IN (SELECT document_subset_members.document_object_id FROM document_subset_members WHERE document_subset_id = 2000)",
        "SELECT d.document_object_id FROM documents_in_collections d WHERE d.collection_id = (SELECT c.collection_id FROM collections c WHERE c.collection_name = 'Best') AND NOT EXISTS (SELECT * FROM document_subset_members ds WHERE ds.document_object_id = d.document_object_id AND ds.document_subset_id = 2000)",
        "SELECT docs.document_object_id FROM documents_in_collections docs, collections coll WHERE docs.collection_id = coll.collection_id AND coll.collection_name = 'Best' AND docs.document_object_id NOT IN (SELECT rel.document_object_id FROM document_subset_members rel WHERE rel.document_subset_id = 2000)"
      ]
    ]
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT doc.document_object_id FROM document_objects doc JOIN documents_in_collections dcol ON doc.document_object_id = dcol.document_object_id JOIN collections col ON dcol.collection_id = col.collection_id LEFT JOIN document_subset_members dsm ON doc.document_object_id = dsm.document_object_id WHERE col.collection_name = 'Best' AND (dsm.document_subset_id != (SELECT document_subset_id FROM document_subset_members WHERE related_document_object_id IN (SELECT document_object_id FROM document_objects WHERE description = 'Best for 2000')) OR dsm.document_subset_id IS NULL)",
        "SELECT doc.document_object_id FROM document_objects doc INNER JOIN documents_in_collections dc ON dc.document_object_id = doc.document_object_id INNER JOIN collections col ON col.collection_id = dc.collection_id WHERE col.collection_name = 'Best' AND doc.document_object_id NOT IN (SELECT dsm.document_object_id FROM document_subset_members dsm JOIN document_objects do ON dsm.related_document_object_id = do.document_object_id WHERE do.description = 'Best for 2000')",
        "SELECT do.document_object_id FROM document_objects do WHERE EXISTS (SELECT 1 FROM documents_in_collections dic WHERE dic.document_object_id = do.document_object_id AND dic.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')) AND NOT EXISTS (SELECT 1 FROM document_subset_members dsm WHERE dsm.document_object_id = do.document_object_id AND dsm.document_subset_id = (SELECT document_subset_id FROM document_subset_members JOIN document_objects ON document_subset_members.related_document_object_id = document_objects.document_object_id WHERE document_objects.description = 'Best for 2000'))",
        "SELECT DISTINCT dc.document_object_id FROM documents_in_collections dc, collections c WHERE dc.collection_id = c.collection_id AND c.collection_name = 'Best' AND dc.document_object_id NOT IN (SELECT dsm.document_object_id FROM document_subset_members dsm, document_objects do WHERE dsm.related_document_object_id = do.document_object_id AND do.description = 'Best for 2000')",
        "SELECT docobject.document_object_id FROM collections col LEFT JOIN documents_in_collections dictcol ON col.collection_id = dictcol.collection_id LEFT JOIN document_objects docobject ON dictcol.document_object_id = docobject.document_object_id LEFT JOIN document_subset_members dsm ON docobject.document_object_id = dsm.document_object_id AND dsm.document_subset_id = (SELECT dsme.document_subset_id FROM document_subset_members dsme INNER JOIN document_objects dbo ON dsme.related_document_object_id = dbo.document_object_id WHERE dbo.description = 'Best for 2000') WHERE col.collection_name = 'Best' AND dsm.document_subset_id IS NULL"
      ]
    ]
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT doc_member.related_document_object_id FROM document_subset_members doc_member JOIN document_subsets doc_subset ON doc_member.document_subset_id = doc_subset.document_subset_id WHERE doc_subset.document_subset_name = 'Best for 2000' UNION SELECT documents_in_collections.document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collections.collection_name = 'Best'",
        "SELECT DISTINCT doc_member.related_document_object_id FROM document_subset_members doc_member WHERE doc_member.document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT DISTINCT dsm.related_document_object_id FROM document_subset_members dsm LEFT JOIN document_subsets ds ON ds.document_subset_id = dsm.document_subset_id WHERE ds.document_subset_name = 'Best for 2000' UNION ALL SELECT dic.document_object_id FROM documents_in_collections dic LEFT JOIN collections c ON c.collection_id = dic.collection_id WHERE c.collection_name = 'Best'",
        "SELECT doc_member.related_document_object_id FROM document_subset_members doc_member JOIN document_subsets doc_subset ON doc_member.document_subset_id = doc_subset.document_subset_id AND doc_subset.document_subset_name = 'Best for 2000' UNION SELECT doc_col.document_object_id FROM documents_in_collections doc_col JOIN collections col ON doc_col.collection_id = col.collection_id AND col.collection_name = 'Best'",
        "SELECT related_document_object_id FROM document_subset_members WHERE document_subset_id = (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id FROM documents_in_collections WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "WITH BestSubset AS (SELECT related_document_object_id FROM document_subset_members JOIN document_subsets ON document_subset_members.document_subset_id = document_subsets.document_subset_id WHERE document_subset_name = 'Best for 2000'), BestCollection AS (SELECT document_object_id FROM documents_in_collections JOIN collections ON documents_in_collections.collection_id = collections.collection_id WHERE collection_name = 'Best') SELECT related_document_object_id FROM BestSubset UNION SELECT document_object_id FROM BestCollection",
        "SELECT item FROM (SELECT dsm.related_document_object_id AS item FROM document_subset_members dsm INNER JOIN document_subsets ds ON dsm.document_subset_id = ds.document_subset_id WHERE ds.document_subset_name = 'Best for 2000' UNION ALL SELECT dic.document_object_id AS item FROM documents_in_collections dic INNER JOIN collections c ON dic.collection_id = c.collection_id WHERE c.collection_name = 'Best')",
        "SELECT field FROM (SELECT related_document_object_id AS field FROM (SELECT * FROM document_subset_members JOIN document_subsets ON document_subsets.document_subset_id = document_subset_members.document_subset_id WHERE document_subsets.document_subset_name = 'Best for 2000') UNION SELECT document_object_id AS field FROM (SELECT * FROM documents_in_collections JOIN collections ON collections.collection_id = documents_in_collections.collection_id WHERE collections.collection_name = 'Best'))",
        "SELECT doc_id FROM (SELECT related_document_object_id AS doc_id FROM document_subset_members WHERE document_subset_id IN (SELECT document_subset_id FROM document_subsets WHERE document_subset_name = 'Best for 2000') UNION SELECT document_object_id AS doc_id FROM documents_in_collections WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best'))"
      ]
    ]
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT DSM.document_object_id FROM document_subsets DS JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id WHERE DS.document_subset_name = 'Best for 2000' UNION SELECT DIC.document_object_id FROM documents_in_collections DIC JOIN document_objects DO ON DIC.document_object_id = DO.document_object_id WHERE DO.description = 'Best'",
        "SELECT DO.document_object_id FROM document_objects DO LEFT JOIN document_subset_members DSM ON DO.document_object_id = DSM.document_object_id LEFT JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id LEFT JOIN documents_in_collections DIC ON DO.document_object_id = DIC.document_object_id WHERE DS.document_subset_name = 'Best for 2000' OR DO.description = 'Best' GROUP BY DO.document_object_id",
        "SELECT DISTINCT document_object_id FROM document_objects WHERE document_object_id IN (SELECT DSM.document_object_id FROM document_subsets DS JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id WHERE document_subset_name = 'Best for 2000') OR document_object_id IN (SELECT document_object_id FROM documents_in_collections WHERE description = 'Best')",
        "SELECT DISTINCT DSM.document_object_id FROM document_subsets DS JOIN document_subset_members DSM ON DS.document_subset_id = DSM.document_subset_id WHERE DS.document_subset_name = 'Best for 2000' UNION ALL SELECT DIC.document_object_id FROM documents_in_collections DIC WHERE DIC.collection_id IN (SELECT collection_id FROM document_objects WHERE description = 'Best')",
        "WITH Subset_Docs AS (SELECT DSM.document_object_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000'), Collection_Docs AS (SELECT DIC.document_object_id FROM documents_in_collections DIC JOIN document_objects DO ON DIC.document_object_id = DO.document_object_id WHERE DO.description = 'Best') SELECT DISTINCT document_object_id FROM (SELECT document_object_id FROM Subset_Docs UNION SELECT document_object_id FROM Collection_Docs)",
        "WITH Combined_Docs AS (SELECT DSM.document_object_id AS doc_id FROM document_subset_members DSM JOIN document_subsets DS ON DSM.document_subset_id = DS.document_subset_id WHERE DS.document_subset_name = 'Best for 2000' UNION SELECT DIC.document_object_id AS doc_id FROM documents_in_collections DIC JOIN document_objects DO ON DIC.document_object_id = DO.document_object_id WHERE DO.description = 'Best') SELECT DISTINCT doc_id FROM Combined_Docs"
      ]
    ]
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "nlq": "List all name of collections that are related to collection named Best.",
    "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT col.collection_name FROM collections col JOIN collection_subset_members csm ON col.collection_id = csm.related_collection_id JOIN collections parent ON parent.collection_id = csm.collection_id WHERE parent.collection_name = 'Best'",
        "SELECT col.collection_name FROM collections col, collection_subset_members csm, collections parent WHERE col.collection_id = csm.related_collection_id AND parent.collection_id = csm.collection_id AND parent.collection_name = 'Best'",
        "SELECT DISTINCT col.collection_name FROM collections col INNER JOIN collection_subset_members csm ON col.collection_id = csm.related_collection_id WHERE csm.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT col.collection_name FROM collections col WHERE col.collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT col.collection_name FROM collections col INNER JOIN collection_subset_members csm ON csm.related_collection_id = col.collection_id INNER JOIN collections parent ON parent.collection_id = csm.collection_id AND parent.collection_name = 'Best'",
        "SELECT DISTINCT collection_name FROM collections WHERE collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT csm.related_collection_id FROM collection_subset_members csm JOIN collections coll ON csm.collection_id = coll.collection_id WHERE coll.collection_name = 'Best')",
        "SELECT DISTINCT c1.collection_name FROM collections c1 JOIN collection_subset_members csm ON csm.related_collection_id = c1.collection_id WHERE EXISTS (SELECT 1 FROM collections c2 WHERE c2.collection_name = 'Best' AND csm.collection_id = c2.collection_id)",
        "SELECT DISTINCT collection_name FROM collections INNER JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id WHERE collection_subset_members.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')"
      ]
    ]
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the names of the collections that are related to the collection named Best?",
    "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT cl.collection_name FROM collections cl JOIN collection_subset_members cm ON cl.collection_id = cm.related_collection_id WHERE cm.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT collection_name FROM collections WHERE collection_id IN (SELECT related_collection_id FROM collection_subset_members JOIN collections ON collection_subset_members.collection_id = collections.collection_id WHERE collections.collection_name = 'Best')",
        "SELECT DISTINCT c.collection_name FROM collections c INNER JOIN collection_subset_members cs ON c.collection_id = cs.related_collection_id WHERE cs.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT DISTINCT c2.collection_name FROM collections c1 JOIN collection_subset_members cm ON c1.collection_id = cm.collection_id JOIN collections c2 ON c2.collection_id = cm.related_collection_id WHERE c1.collection_name = 'Best'",
        "SELECT collections.collection_name FROM collections JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id WHERE collection_subset_members.collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT c2.collection_name FROM collection_subset_members csm JOIN collections c1 ON csm.collection_id = c1.collection_id JOIN collections c2 ON csm.related_collection_id = c2.collection_id WHERE c1.collection_name = 'Best'",
        "SELECT DISTINCT cols.collection_name FROM collections cols INNER JOIN collection_subset_members subs ON cols.collection_id = subs.related_collection_id WHERE subs.collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT collections.collection_name FROM collections INNER JOIN collection_subset_members ON collections.collection_id = collection_subset_members.related_collection_id JOIN collections AS parents ON parents.collection_id = collection_subset_members.collection_id WHERE parents.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many collections that are related to collection named Best?",
    "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT c.collection_id) FROM collections c JOIN collection_subset_members cm ON c.collection_id = cm.related_collection_id JOIN collections cp ON cp.collection_id = c.parent_collection_id WHERE cp.collection_name = 'Best'",
        "SELECT COUNT(*) FROM (SELECT collection_id FROM collections WHERE collection_id IN (SELECT related_collection_id FROM collection_subset_members WHERE collection_subset_id IN (SELECT collection_subset_id FROM collection_subsets)) AND parent_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(DISTINCT a.collection_id) FROM collections a JOIN collection_subset_members b ON a.collection_id = b.collection_id WHERE a.parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT x.collection_id FROM collections x WHERE x.parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(1) FROM collections col1 WHERE col1.parent_collection_id = (SELECT col2.collection_id FROM collections col2 WHERE col2.collection_name = 'Best')",
        "SELECT COUNT(DISTINCT csub.collection_id) FROM collection_subset_members csub WHERE csub.related_collection_id IN (SELECT col.collection_id FROM collections col WHERE col.collection_name = 'Best')",
        "SELECT COUNT(DISTINCT col3.parent_collection_id) FROM collections col3 WHERE EXISTS (SELECT NULL FROM collections col2 WHERE col3.parent_collection_id = col2.collection_id AND col2.collection_name = 'Best')",
        "SELECT COUNT(*) FROM collection_subset_members WHERE related_collection_id IN (SELECT collection_id FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(*) FROM collection_subset_members cms JOIN collections cls ON cms.related_collection_id = cls.collection_id WHERE cls.parent_collection_id = (SELECT collection_id FROM collections WHERE collections.collection_name = 'Best')",
        "SELECT COUNT(DISTINCT related_collection_id) FROM collection_subset_members WHERE related_collection_id IN (SELECT collection_id FROM collections WHERE parent_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))"
      ]
    ]
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "nlq": "How many different collections are related to the one named 'Best'?",
    "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT c.collection_id) FROM collections c JOIN collection_subset_members m ON c.collection_id = m.collection_id WHERE m.related_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(DISTINCT collection_id) FROM collection_subset_members WHERE related_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT collection_id FROM collection_subset_members WHERE related_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT COUNT(DISTINCT m.collection_id) FROM collection_subset_members m INNER JOIN collections col ON m.related_collection_id = col.collection_id WHERE col.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT m.collection_id) FROM collections c, collection_subset_members m WHERE c.collection_name = 'Best' AND c.collection_id = m.related_collection_id",
        "SELECT COUNT(DISTINCT collection_id) AS CountOfCollections FROM collection_subset_members WHERE related_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')",
        "SELECT COUNT(DISTINCT collection_id) FROM (SELECT collection_id FROM collection_subset_members WHERE related_collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best')) a",
        "SELECT COUNT(DISTINCT m.collection_id) FROM collection_subset_members m JOIN collections col ON m.related_collection_id = col.collection_id AND col.collection_name = 'Best'",
        "SELECT COUNT(DISTINCT collection_id) FROM collection_subset_members WHERE related_collection_id IN (SELECT collection_id FROM collections WHERE collection_name = 'Best')"
      ]
    ]
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "nlq": "Which collection subset does collection name Best in? List collection subset name.",
    "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT css.collection_subset_name FROM collections c JOIN collection_subset_members csm ON csm.collection_id = c.collection_id JOIN collection_subsets css ON css.collection_subset_id = csm.collection_subset_id WHERE c.collection_name = 'Best'",
        "SELECT css.collection_subset_name FROM collection_subsets css, collection_subset_members csm, collections c WHERE c.collection_id = csm.collection_id AND csm.collection_subset_id = css.collection_subset_id AND c.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collections co INNER JOIN collection_subset_members csm ON co.collection_id = csm.collection_id INNER JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id WHERE co.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collection_subsets cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members csm WHERE csm.collection_id IN (SELECT c.collection_id FROM collections c WHERE c.collection_name = 'Best'))",
        "SELECT DISTINCT cs.collection_subset_name FROM collections co, collection_subset_members csm, collection_subsets cs WHERE co.collection_id = csm.collection_id AND cs.collection_subset_id = csm.collection_subset_id AND co.collection_name = 'Best'",
        "SELECT css.collection_subset_name FROM collections AS c LEFT JOIN collection_subset_members AS csm ON c.collection_id = csm.collection_id LEFT JOIN collection_subsets AS css ON csm.collection_subset_id = css.collection_subset_id WHERE c.collection_name = 'Best'",
        "SELECT collection_subset_name FROM collection_subsets WHERE collection_subset_id = (SELECT collection_subset_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT collection_subset_name FROM collection_subsets WHERE collection_subset_id IN (SELECT collection_subset_id FROM collection_subset_members WHERE collection_id = (SELECT collection_id FROM collections WHERE collection_name = 'Best'))",
        "SELECT DISTINCT(cs.collection_subset_name) FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.collection_id JOIN collection_subsets cs ON cs.collection_subset_id = csm.collection_subset_id WHERE c.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "nlq": "What are the collection subsets that the collection named 'Best' in?",
    "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "infer_predictions": [
      [
        "SELECT cs.collection_subset_name FROM collections c JOIN collection_subset_members csm ON c.collection_id = csm.collection_id JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id WHERE c.collection_name = 'Best'",
        "SELECT DISTINCT cs.collection_subset_name FROM collections c, collection_subset_members csm, collection_subsets cs WHERE c.collection_id = csm.collection_id AND csm.collection_subset_id = cs.collection_subset_id AND c.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collections AS c INNER JOIN collection_subset_members AS csm ON c.collection_id = csm.collection_id INNER JOIN collection_subsets AS cs ON csm.collection_subset_id = cs.collection_subset_id WHERE c.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collection_subsets AS cs WHERE cs.collection_subset_id IN (SELECT csm.collection_subset_id FROM collection_subset_members AS csm WHERE csm.collection_id = (SELECT c.collection_id FROM collections AS c WHERE c.collection_name = 'Best'))",
        "SELECT cs.collection_subset_name FROM collections c LEFT JOIN collection_subset_members csm ON c.collection_id = csm.collection_id LEFT JOIN collection_subsets cs ON csm.collection_subset_id = cs.collection_subset_id WHERE c.collection_name = 'Best'",
        "SELECT collection_subsets.collection_subset_name FROM collections INNER JOIN collection_subset_members ON collections.collection_id = collection_subset_members.collection_id INNER JOIN collection_subsets ON collection_subset_members.collection_subset_id = collection_subsets.collection_subset_id WHERE collections.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collection_subsets cs JOIN collection_subset_members csm ON cs.collection_subset_id = csm.collection_subset_id JOIN collections c ON c.collection_id = csm.collection_id WHERE c.collection_name = 'Best'",
        "SELECT collection_subset_name FROM collection_subsets, collections, collection_subset_members WHERE collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id AND collections.collection_id = collection_subset_members.collection_id AND collections.collection_name = 'Best'",
        "SELECT cs.collection_subset_name FROM collection_subsets AS cs, collection_subset_members AS csm, collections AS c WHERE cs.collection_subset_id = csm.collection_subset_id AND csm.collection_id = c.collection_id AND c.collection_name = 'Best'"
      ]
    ]
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "nlq": "How many songs contain \"Love\" in their names?",
    "gold": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'",
        "SELECT COUNT(id) FROM songs WHERE name LIKE '%Love%'",
        "SELECT COUNT(name) FROM songs WHERE name LIKE '%Love%'",
        "SELECT COUNT(name) AS total FROM songs WHERE INSTR(name, 'Love') > 0",
        "SELECT COUNT(1) FROM songs WHERE name GLOB '*Love*'",
        "SELECT COUNT(*) AS 'Total Songs with Love' FROM songs WHERE UPPER(name) like '%LOVE%'"
      ]
    ]
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "nlq": "List the name of the songs in ascending, lexicographical order.",
    "gold": "SELECT name FROM songs ORDER BY name",
    "infer_predictions": [
      [
        "SELECT name FROM songs ORDER BY name ASC",
        "SELECT s.name FROM songs s ORDER BY s.name ASC",
        "SELECT DISTINCT s.name FROM songs s ORDER BY s.name ASC",
        "SELECT name FROM songs GROUP BY name ORDER BY name ASC",
        "SELECT s.name FROM songs s WHERE s.name IS NOT NULL ORDER BY s.name ASC",
        "SELECT name FROM (SELECT name FROM songs) ORDER BY name ASC",
        "SELECT songs.name FROM songs WHERE songs.id IN (SELECT id FROM songs) ORDER BY songs.name ASC"
      ]
    ]
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "nlq": "List the names and languages of the songs .",
    "gold": "select name , language from songs",
    "infer_predictions": [
      [
        "SELECT name, language FROM songs",
        "SELECT s.name, s.language FROM songs s",
        "SELECT s.name AS SongName, s.language AS Language FROM songs s",
        "SELECT songs.name, songs.language FROM songs ORDER BY songs.name",
        "SELECT name, language FROM songs ORDER BY language DESC",
        "SELECT * FROM (SELECT name, language FROM songs)",
        "SELECT name, language FROM songs GROUP BY name, language",
        "SELECT name, language FROM songs WHERE songs.id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "nlq": "What are the maximum and minimum voice sound quality score of the performances?",
    "gold": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
    "infer_predictions": [
      [
        "SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score",
        "SELECT MAX(ps.voice_sound_quality) AS max_quality, MIN(ps.voice_sound_quality) AS min_quality FROM performance_score ps",
        "SELECT (SELECT MAX(voice_sound_quality) FROM performance_score) AS max_score, (SELECT MIN(voice_sound_quality) FROM performance_score) AS min_score",
        "SELECT MAX(score) AS max_quality, MIN(score) AS min_quality FROM (SELECT voice_sound_quality AS score FROM performance_score)",
        "SELECT MAX(voice_sound_quality) AS Maximum_Quality, MIN(voice_sound_quality) AS Minimum_Quality FROM performance_score",
        "WITH VQS AS (SELECT voice_sound_quality FROM performance_score) SELECT MAX(voice_sound_quality) AS High, MIN(voice_sound_quality) AS Low FROM VQS",
        "SELECT MAX(voice_sound_quality) FROM performance_score UNION ALL SELECT MIN(voice_sound_quality) FROM performance_score",
        "SELECT (SELECT MAX(voice_sound_quality) FROM performance_score), (SELECT MIN(voice_sound_quality) FROM performance_score)"
      ]
    ]
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "nlq": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "gold": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "infer_predictions": [
      [
        "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score AS ps JOIN participants AS p ON ps.participant_id = p.id WHERE p.name = 'Freeway'",
        "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id = (SELECT id FROM participants WHERE name = 'Freeway')",
        "SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score AS ps, participants AS p WHERE ps.participant_id = p.id AND p.name = 'Freeway'",
        "SELECT ps1.voice_sound_quality, ps1.rhythm_tempo, ps1.stage_presence FROM performance_score AS ps1 INNER JOIN participants AS p1 ON ps1.participant_id = p1.id WHERE p1.name = 'Freeway'",
        "SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway'",
        "SELECT A.voice_sound_quality, A.rhythm_tempo, A.stage_presence FROM performance_score A INNER JOIN participants B ON A.participant_id = B.id WHERE B.name = 'Freeway'",
        "SELECT (SELECT voice_sound_quality FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway') as VoiceSoundQuality, (SELECT rhythm_tempo FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway') as RhythmTempo, (SELECT stage_presence FROM performance_score, participants WHERE performance_score.participant_id = participants.id AND participants.name = 'Freeway') as StagePresence",
        "SELECT sub.voice_sound_quality, sub.rhythm_tempo, sub.stage_presence FROM (SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence, p.name FROM performance_score AS ps JOIN participants AS p ON ps.participant_id = p.id) sub WHERE sub.name = 'Freeway'"
      ]
    ]
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "nlq": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "gold": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
    "infer_predictions": [
      [
        "SELECT id, language, original_artist FROM songs WHERE name != 'Love'",
        "SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE songs.name <> 'Love'",
        "SELECT id, language, original_artist FROM songs WHERE NOT name = 'Love'",
        "SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name NOT LIKE 'Love'",
        "SELECT songs.id AS id, songs.language AS language, songs.original_artist AS original_artist FROM songs WHERE name != 'Love'",
        "SELECT id, language, original_artist FROM songs WHERE UPPER(name) NOT IN ('LOVE')",
        "SELECT songs.id, songs.language, songs.original_artist FROM songs WHERE NOT (songs.name = 'Love')",
        "SELECT id, language, original_artist FROM songs WHERE name NOT GLOB 'Love'",
        "SELECT s.id, s.language, s.original_artist FROM songs s WHERE 'Love' NOT LIKE s.name"
      ]
    ]
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "nlq": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "gold": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
    "infer_predictions": [
      [
        "SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'",
        "SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation = 'All the streets of love'",
        "SELECT name, original_artist FROM songs WHERE 'All the streets of love' = english_translation",
        "SELECT name, original_artist FROM songs WHERE lower(english_translation) = lower('All the streets of love')",
        "SELECT name, original_artist FROM songs WHERE english_translation LIKE 'All the streets of love'",
        "SELECT s.name, s.original_artist FROM songs s WHERE s.english_translation LIKE 'All the streets of love'",
        "SELECT name AS song_name, original_artist AS artist FROM songs WHERE english_translation = 'All the streets of love'",
        "SELECT name, original_artist FROM songs WHERE TRIM(english_translation) = 'All the streets of love'"
      ]
    ]
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "nlq": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "gold": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps.stage_presence FROM performance_score ps INNER JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'",
        "SELECT DISTINCT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English')",
        "SELECT DISTINCT stage_presence FROM performance_score JOIN songs ON songs_id = songs.id WHERE songs.language = 'English'",
        "SELECT stage_presence FROM (SELECT DISTINCT stage_presence FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')",
        "SELECT DISTINCT ps.stage_presence FROM performance_score AS ps INNER JOIN songs AS s ON ps.songs_id = s.id WHERE s.language = 'English'",
        "SELECT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English') GROUP BY stage_presence",
        "SELECT DISTINCT sp.stage_presence FROM performance_score sp, songs so WHERE sp.songs_id = so.id AND so.language = 'English'",
        "SELECT DISTINCT sp.stage_presence FROM performance_score sp JOIN songs so ON sp.songs_id = so.id WHERE so.language = 'English' GROUP BY sp.stage_presence"
      ]
    ]
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "nlq": "What are the ids and names of the participants who have performed at least two songs?",
    "gold": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id HAVING COUNT(ps.songs_id) >= 2",
        "SELECT participants.id, participants.name FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2)",
        "SELECT p.id, p.name FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps WHERE ps.participant_id = p.id GROUP BY ps.participant_id HAVING COUNT(ps.songs_id) >= 2)",
        "SELECT id, name FROM participants p WHERE (SELECT COUNT(*) FROM performance_score WHERE participant_id = p.id) >= 2",
        "WITH PerformanceCounts AS (SELECT participant_id, COUNT(songs_id) as num_songs FROM performance_score GROUP BY participant_id) SELECT p.id, p.name FROM participants p JOIN PerformanceCounts pc ON p.id = pc.participant_id WHERE pc.num_songs >= 2",
        "SELECT DISTINCT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE (SELECT COUNT(songs_id) FROM performance_score WHERE participant_id = p.id) >= 2",
        "SELECT A.id, A.name FROM participants A, performance_score B WHERE A.id = B.participant_id GROUP BY A.id HAVING COUNT(DISTINCT B.songs_id) >= 2",
        "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(DISTINCT ps.songs_id) >= 2",
        "SELECT A.id, A.name FROM participants A WHERE (SELECT COUNT(*) FROM (SELECT participant_id FROM performance_score GROUP BY participant_id, songs_id HAVING participant_id = A.id) sub) >= 2"
      ]
    ]
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "nlq": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "gold": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
    "infer_predictions": [
      [
        "SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC",
        "SELECT participants.id, participants.name, participants.popularity FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY COUNT(performance_score.songs_id) DESC",
        "SELECT id, name, popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score GROUP BY participant_id ORDER BY COUNT(songs_id) DESC)",
        "SELECT p.id, p.name, p.popularity FROM participants p, performance_score ps WHERE p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC",
        "SELECT participants.id, participants.name, participants.popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id HAVING COUNT(performance_score.songs_id) > 0 ORDER BY COUNT(performance_score.songs_id) DESC",
        "SELECT part.id, part.name, part.popularity FROM (SELECT participant_id, COUNT(songs_id) AS song_count FROM performance_score GROUP BY participant_id) as summary JOIN participants part ON part.id = summary.participant_id ORDER BY summary.song_count DESC",
        "WITH SongCount AS (SELECT participant_id, COUNT(songs_id) as count FROM performance_score GROUP BY participant_id) SELECT participants.id, participants.name, participants.popularity FROM participants JOIN SongCount ON participants.id = SongCount.participant_id ORDER BY SongCount.count DESC",
        "SELECT part.id, part.name, part.popularity FROM participants part WHERE EXISTS (SELECT 1 FROM performance_score WHERE participant_id = part.id GROUP BY participant_id ORDER BY COUNT(songs_id)) ORDER BY (SELECT COUNT(songs_id) FROM performance_score WHERE participant_id = part.id GROUP BY participant_id) DESC",
        "SELECT p.id, p.name, p.popularity FROM participants p WHERE p.id IN (SELECT participant_id FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) > 0 ORDER BY COUNT(songs_id) DESC)",
        "WITH Performance AS (SELECT participant_id, COUNT(songs_id) AS TotalSongs FROM performance_score GROUP BY participant_id) SELECT p.id, p.name, p.popularity FROM participants p JOIN Performance ON p.id = Performance.participant_id ORDER BY Performance.TotalSongs DESC"
      ]
    ]
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "nlq": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "gold": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
    "infer_predictions": [
      [
        "SELECT participants.id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5",
        "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5",
        "SELECT DISTINCT p.id, p.name FROM participants p, performance_score ps WHERE p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
        "SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
        "SELECT p.id, p.name FROM participants p WHERE EXISTS (SELECT 1 FROM performance_score ps WHERE ps.participant_id = p.id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5))",
        "SELECT p.id, p.name FROM participants p INNER JOIN performance_score ps ON p.id = ps.participant_id AND (ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5)",
        "SELECT participants.id, participants.name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5)",
        "SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING MAX(ps.voice_sound_quality) = 5 OR MAX(ps.rhythm_tempo) = 5",
        "SELECT DISTINCT participant_id AS id, p.name FROM performance_score JOIN participants p ON participant_id = p.id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5",
        "SELECT p.id, p.name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps WHERE ps.voice_sound_quality = 5 UNION ALL SELECT ps.participant_id FROM performance_score ps WHERE ps.rhythm_tempo = 5)"
      ]
    ]
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "nlq": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "gold": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
    "infer_predictions": [
      [
        "SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
        "SELECT voice_sound_quality FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE name = 'The Balkan Girls' AND language = 'English')",
        "SELECT performance_score.voice_sound_quality FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'",
        "SELECT DISTINCT p.voice_sound_quality FROM performance_score p JOIN songs s ON p.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
        "SELECT ps.voice_sound_quality FROM performance_score as ps INNER JOIN songs as s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
        "SELECT voice_sound_quality FROM performance_score, songs WHERE performance_score.songs_id = songs.id AND songs.name = 'The Balkan Girls' AND songs.language = 'English'",
        "SELECT ps.voice_sound_quality FROM performance_score ps, songs s WHERE ps.songs_id = s.id AND s.name = 'The Balkan Girls' AND s.language = 'English'",
        "SELECT DISTINCT(ps.voice_sound_quality) FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English'",
        "SELECT voice_sound_quality FROM performance_score ps WHERE EXISTS (SELECT 1 FROM songs s WHERE s.id = ps.songs_id AND s.name = 'The Balkan Girls' AND s.language = 'English')",
        "SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = 'The Balkan Girls' AND songs.language = 'English'"
      ]
    ]
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "nlq": "What are the id and name of the song sung by the most participants?",
    "gold": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id ORDER BY COUNT(distinct performance_score.participant_id) DESC LIMIT 1",
        "SELECT s.id, s.name FROM songs s WHERE s.id = (SELECT ps.songs_id FROM performance_score ps GROUP BY ps.songs_id ORDER BY COUNT(DISTINCT ps.participant_id) DESC LIMIT 1)",
        "SELECT s.id, s.name FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name HAVING COUNT(DISTINCT ps.participant_id) = (SELECT MAX(participant_count) FROM (SELECT COUNT(DISTINCT ps.participant_id) AS participant_count FROM performance_score ps GROUP BY ps.songs_id) t)",
        "SELECT s.id, s.name FROM songs s JOIN (SELECT ps.songs_id, COUNT(DISTINCT ps.participant_id) as total_participants FROM performance_score ps GROUP BY ps.songs_id) as song_participants ON s.id = song_participants.songs_id ORDER BY song_participants.total_participants DESC LIMIT 1",
        "SELECT s.id, s.name FROM songs s JOIN (SELECT ps.songs_id FROM performance_score ps GROUP BY ps.songs_id ORDER BY count(distinct ps.participant_id) DESC LIMIT 1) max_songs ON max_songs.songs_id = s.id",
        "SELECT s.id, s.name FROM songs s, performance_score ps WHERE s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(distinct ps.participant_id) DESC LIMIT 1",
        "SELECT songs.id, songs.name FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id ORDER BY COUNT(DISTINCT performance_score.participant_id) DESC, songs.name ASC LIMIT 1",
        "SELECT top_song.id, top_song.name FROM (SELECT s.id, s.name, COUNT(DISTINCT ps.participant_id) AS participants_count FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id) AS top_song ORDER BY top_song.participants_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "nlq": "How many performances have a stage presence score less than 7 or higher than 9?",
    "gold": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
        "SELECT COUNT(*) AS Total FROM performance_score WHERE stage_presence NOT BETWEEN 7 AND 9",
        "SELECT COUNT(performance_score.participant_id) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
        "SELECT SUM(CASE WHEN stage_presence < 7 OR stage_presence > 9 THEN 1 ELSE 0 END) FROM performance_score",
        "SELECT COUNT(*) FROM (SELECT * FROM performance_score WHERE stage_presence < 7 UNION ALL SELECT * FROM performance_score WHERE stage_presence > 9)",
        "SELECT COUNT(1) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9",
        "WITH ScoreRange AS (SELECT * FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9) SELECT COUNT(*) FROM ScoreRange",
        "SELECT COUNT(stage_presence) FROM performance_score WHERE stage_presence IN (SELECT stage_presence FROM performance_score WHERE stage_presence < 7 UNION ALL SELECT stage_presence FROM performance_score WHERE stage_presence > 9)"
      ]
    ]
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "nlq": "How many songs listed are not performed?",
    "gold": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)",
        "SELECT COUNT(s.name) FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL",
        "SELECT COUNT(*) FROM songs EXCEPT SELECT COUNT(*) FROM songs WHERE id IN (SELECT DISTINCT songs_id FROM performance_score)",
        "SELECT COUNT(DISTINCT s.id) FROM songs s WHERE s.id NOT IN (SELECT DISTINCT ps.songs_id FROM performance_score ps)",
        "SELECT (SELECT COUNT(*) FROM songs) - (SELECT COUNT(DISTINCT songs_id) FROM performance_score)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT name FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score))",
        "SELECT COUNT(*) FROM songs WHERE NOT EXISTS (SELECT null FROM performance_score WHERE songs_id = songs.id)",
        "SELECT COUNT(songs.id) FROM songs LEFT OUTER JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.songs_id IS NULL",
        "SELECT COUNT(*) FROM songs s WHERE s.id NOT IN (SELECT songs_id FROM performance_score ps WHERE ps.songs_id IS NOT NULL)",
        "SELECT COUNT(*) - COUNT(ps.songs_id) FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id"
      ]
    ]
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "nlq": "What are the average rhythm scores for the songs in each different language?",
    "gold": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
    "infer_predictions": [
      [
        "SELECT s.language, AVG(ps.rhythm_tempo) AS AverageRhythm FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language",
        "SELECT language, AVG(rhythm_tempo) FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY language",
        "SELECT language, AVG(rhythm_tempo) AS avg_rhythm_tempo FROM songs INNER JOIN performance_score WHERE songs.id = performance_score.songs_id GROUP BY language",
        "SELECT language, AVG(ps.rhythm_tempo) FROM songs s, performance_score ps WHERE s.id = ps.songs_id GROUP BY s.language",
        "SELECT s.language AS SongLanguage, AVG(ps.rhythm_tempo) AS AvgRhythm FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language",
        "SELECT language, AVG(rhythm_tempo) AS Average_Rhythm_Score FROM performance_score JOIN songs ON songs.id = performance_score.songs_id GROUP BY songs.language",
        "SELECT s.language AS Language, AVG(performance_score.rhythm_tempo) AS AverageRhythmScore FROM songs s JOIN performance_score ON s.id = performance_score.songs_id GROUP BY s.language",
        "SELECT language, AVG(rhythm_tempo) FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.language"
      ]
    ]
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "nlq": "What are the distinct names of the participants who have sung a song in 'English'?",
    "gold": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English'",
        "SELECT DISTINCT participants.name FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English'",
        "SELECT p.name FROM participants p, performance_score ps, songs s WHERE p.id = ps.participant_id AND ps.songs_id = s.id AND s.language = 'English' GROUP BY p.name",
        "SELECT DISTINCT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))",
        "SELECT DISTINCT name FROM participants WHERE EXISTS (SELECT 1 FROM performance_score, songs WHERE performance_score.participant_id = participants.id AND performance_score.songs_id = songs.id AND songs.language = 'English')",
        "SELECT DISTINCT p.name FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English')",
        "SELECT DISTINCT name FROM (SELECT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON songs.id = performance_score.songs_id WHERE songs.language = 'English')",
        "SELECT DISTINCT participants.name FROM participants, performance_score, songs WHERE participants.id = performance_score.participant_id AND performance_score.songs_id = songs.id AND songs.language = 'English'",
        "SELECT DISTINCT name FROM participants p WHERE EXISTS (SELECT NULL FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE ps.participant_id = p.id AND s.language = 'English')",
        "SELECT name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English')) GROUP BY name HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "nlq": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "gold": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian' AND EXISTS (SELECT 1 FROM performance_score ps2 JOIN songs s2 ON ps2.songs_id = s2.id WHERE s2.language = 'English' AND ps2.participant_id = p.id)",
        "SELECT DISTINCT p.name, p.popularity FROM participants p WHERE p.id IN (SELECT ps.participant_id FROM performance_score ps JOIN songs s ON s.id = ps.songs_id WHERE s.language = 'Croatian') AND p.id IN (SELECT ps.participant_id FROM performance_score ps JOIN songs s ON s.id = ps.songs_id WHERE s.language = 'English')",
        "SELECT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'Croatian' AND ps.participant_id = p.id) AND EXISTS (SELECT 1 FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE s.language = 'English' AND ps.participant_id = p.id)",
        "SELECT p.name, p.popularity FROM participants p WHERE p.id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'Croatian')) AND p.id IN (SELECT participant_id FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English'))",
        "SELECT DISTINCT p.name, p.popularity FROM participants p, performance_score ps, songs s WHERE p.id = ps.participant_id AND ps.songs_id = s.id AND s.language = 'Croatian' AND EXISTS (SELECT 1 FROM performance_score ps2, songs s2 WHERE ps2.participant_id = p.id AND ps2.songs_id = s2.id AND s2.language = 'English')",
        "WITH Croatian AS (SELECT participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'Croatian'), English AS (SELECT participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English') SELECT DISTINCT p.name, p.popularity FROM participants p WHERE p.id IN (SELECT participant_id FROM Croatian) AND p.id IN (SELECT participant_id FROM English)",
        "SELECT DISTINCT participants.name, participants.popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id GROUP BY participants.name, participants.popularity HAVING SUM(CASE WHEN songs.language = 'Croatian' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN songs.language = 'English' THEN 1 ELSE 0 END) > 0",
        "SELECT p.name, p.popularity FROM participants p JOIN (SELECT participant_id FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language in ('Croatian', 'English') GROUP BY participant_id HAVING count(distinct s.language) = 2) eligible ON p.id = eligible.participant_id",
        "SELECT DISTINCT p.name, p.popularity FROM participants p WHERE EXISTS (SELECT * FROM performance_score ps JOIN songs s ON ps.songs_id = s.id AND s.language = 'Croatian' WHERE ps.participant_id = p.id) AND EXISTS (SELECT * FROM performance_score ps JOIN songs s ON ps.songs_id = s.id AND s.language = 'English' WHERE ps.participant_id = p.id)",
        "SELECT participants.name, participants.popularity FROM participants WHERE id IN (SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'Croatian' INTERSECT SELECT participant_id FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English')"
      ]
    ]
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "nlq": "Which song names have the substring \"Is\"?",
    "gold": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
    "infer_predictions": [
      [
        "SELECT name FROM songs WHERE name LIKE '%Is%'",
        "SELECT s.name FROM songs s WHERE s.name LIKE '%Is%'",
        "SELECT name FROM songs WHERE INSTR(name, 'Is') > 0",
        "SELECT DISTINCT s.name FROM songs s WHERE INSTR(s.name, 'Is') > 0",
        "SELECT s.name FROM songs s WHERE s.name LIKE '_%Is%'",
        "SELECT name FROM songs WHERE name LIKE 'Is%' OR name LIKE '%Is' OR name LIKE '%Is%'",
        "SELECT s.name FROM songs s WHERE s.name LIKE 'Is%' OR s.name LIKE '%Is' OR s.name LIKE '%Is%'",
        "SELECT name FROM songs WHERE name GLOB '*Is*'",
        "SELECT DISTINCT s.name FROM songs s WHERE s.name GLOB '*Is*'"
      ]
    ]
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "nlq": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "gold": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.original_artist FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT original_artist FROM songs WHERE id IN (SELECT songs_id FROM performance_score WHERE rhythm_tempo > 5) ORDER BY (SELECT voice_sound_quality FROM performance_score WHERE songs.id = songs_id) DESC",
        "SELECT s.original_artist FROM songs s, performance_score ps WHERE s.id = ps.songs_id AND ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT original_artist FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT DISTINCT s.original_artist FROM songs s INNER JOIN performance_score ps ON s.id = ps.songs_id AND ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT s.original_artist FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT s.original_artist FROM songs as s JOIN performance_score as ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC",
        "SELECT original_artist FROM songs INNER JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC",
        "SELECT original_artist FROM (SELECT s.original_artist, ps.voice_sound_quality FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5) AS results ORDER BY results.voice_sound_quality DESC"
      ]
    ]
  },
  {
    "id": 761,
    "db_id": "address_1",
    "nlq": "How many cities do we have?",
    "gold": "SELECT count(*) FROM City",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM city",
        "SELECT COUNT(city_code) FROM city",
        "SELECT SUM(1) FROM city",
        "SELECT COUNT(*) AS total_cities FROM city",
        "SELECT COUNT(city_code) AS count_of_cities FROM city",
        "SELECT COUNT(*) FROM (SELECT DISTINCT city_code FROM city)",
        "SELECT COUNT(city_code) FROM city GROUP BY city_code HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 762,
    "db_id": "address_1",
    "nlq": "Count the number of cities.",
    "gold": "SELECT count(*) FROM City",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM city",
        "SELECT COUNT(city_code) FROM city",
        "SELECT COUNT(city_code) FROM city GROUP BY country",
        "SELECT COUNT(*) FROM (SELECT DISTINCT city_code FROM city)",
        "SELECT COUNT(city_name) FROM city",
        "SELECT COUNT(*) FROM city WHERE city_code IS NOT NULL",
        "SELECT COUNT(city_code) FROM (SELECT city_code FROM city WHERE city_code IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 763,
    "db_id": "address_1",
    "nlq": "List all different states .",
    "gold": "select distinct state from city",
    "infer_predictions": [
      [
        "SELECT DISTINCT state FROM city;",
        "SELECT state FROM city GROUP BY state;",
        "SELECT c.state FROM city c GROUP BY c.state;",
        "SELECT state FROM (SELECT DISTINCT state FROM city);",
        "SELECT DISTINCT state FROM (SELECT state FROM city);",
        "SELECT c.state FROM city AS c WHERE state IN (SELECT DISTINCT state FROM city);",
        "SELECT state FROM city WHERE state IS NOT NULL GROUP BY state;",
        "SELECT DISTINCT state FROM city WHERE state <> '';",
        "SELECT state FROM (SELECT DISTINCT state FROM city) AS unique_states;"
      ]
    ]
  },
  {
    "id": 764,
    "db_id": "address_1",
    "nlq": "What are all the distinct states?",
    "gold": "SELECT DISTINCT state FROM City",
    "infer_predictions": [
      [
        "SELECT DISTINCT state FROM city",
        "SELECT state FROM city GROUP BY state",
        "SELECT DISTINCT state FROM city WHERE state IS NOT NULL",
        "SELECT state FROM (SELECT DISTINCT state FROM city) AS unique_states",
        "SELECT DISTINCT Case When state IS NOT NULL THEN state END FROM city",
        "SELECT DISTINCT c.state FROM city c WHERE c.state IS NOT NULL",
        "SELECT city.state FROM city WHERE city.state IS NOT NULL GROUP BY city.state",
        "SELECT DISTINCT sub.state FROM (SELECT state FROM city) AS sub"
      ]
    ]
  },
  {
    "id": 765,
    "db_id": "address_1",
    "nlq": "How many countries do we have?",
    "gold": "SELECT count(DISTINCT country) FROM City",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country) FROM city",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM city)",
        "SELECT COUNT(*) FROM (SELECT country FROM city GROUP BY country)",
        "SELECT COUNT(*) FROM (SELECT 1 FROM city GROUP BY country)",
        "SELECT COUNT(country) FROM (SELECT DISTINCT country FROM city c)",
        "SELECT COUNT(country) FROM (SELECT country FROM city GROUP BY country)"
      ]
    ]
  },
  {
    "id": 766,
    "db_id": "address_1",
    "nlq": "Count the number of coutries.",
    "gold": "SELECT count(DISTINCT country) FROM City",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT country) FROM city",
        "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM city)",
        "SELECT COUNT(country) FROM (SELECT country FROM city GROUP BY country)",
        "SELECT COUNT(*) FROM (SELECT country FROM city GROUP BY country HAVING COUNT(*) >= 1)",
        "SELECT COUNT(country) FROM city GROUP BY country",
        "SELECT COUNT(DISTINCT C.country) FROM city C",
        "SELECT COUNT(*) FROM (SELECT DISTINCT C.country FROM city C)",
        "SELECT COUNT(C.country) FROM city C GROUP BY C.country"
      ]
    ]
  },
  {
    "id": 767,
    "db_id": "address_1",
    "nlq": "Show names, codes, states, countries for all cities.",
    "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
    "infer_predictions": [
      [
        "SELECT city_name, city_code, state, country FROM city;",
        "SELECT c.city_name, c.city_code, c.state, c.country FROM city c;",
        "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM city;",
        "SELECT * FROM city;",
        "SELECT city_name, city_code, state, country FROM city WHERE city_code IS NOT NULL;",
        "SELECT city.city_name, city.city_code, city.state, city.country FROM city WHERE city_code IN (SELECT city_code FROM city);",
        "SELECT city_name, city_code, state, country FROM city ORDER BY city_name;",
        "SELECT city_name, city_code, state, country FROM city WHERE 1 = 1;",
        "SELECT city_name AS 'City Name', city_code AS 'City Code', state AS 'State', country AS 'Country' FROM city;"
      ]
    ]
  },
  {
    "id": 768,
    "db_id": "address_1",
    "nlq": "What are the names, codes, states, and countries for all cities?",
    "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
    "infer_predictions": [
      [
        "SELECT city_name, city_code, state, country FROM city",
        "SELECT c.city_name, c.city_code, c.state, c.country FROM city c",
        "SELECT * FROM city",
        "SELECT city.* FROM city",
        "SELECT city_name AS Name, city_code AS Code, state AS State, country AS Country FROM city",
        "SELECT city_name, city_code, state, country FROM city WHERE city_code IS NOT NULL",
        "SELECT city.city_name, city.city_code, city.state, city.country FROM city WHERE 1 = 1"
      ]
    ]
  },
  {
    "id": 769,
    "db_id": "address_1",
    "nlq": "What is the latitude and longitude for Baltimore?",
    "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
    "infer_predictions": [
      [
        "SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore'",
        "SELECT c.latitude, c.longitude FROM city c WHERE c.city_name = 'Baltimore'",
        "SELECT latitude, longitude FROM city WHERE city_name LIKE 'Baltimore'",
        "SELECT latitude AS lat, longitude AS long FROM city WHERE city_name = 'Baltimore'",
        "SELECT latitude, longitude FROM city WHERE city_name GLOB 'Baltimore'",
        "SELECT c.latitude, c.longitude FROM city c WHERE c.city_name LIKE 'Baltimore'",
        "SELECT city.latitude AS Latitude, city.longitude AS Longitude FROM city WHERE city.city_name = 'Baltimore'"
      ]
    ]
  },
  {
    "id": 770,
    "db_id": "address_1",
    "nlq": "What latitude and longitude correspond to Baltimore?",
    "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
    "infer_predictions": [
      [
        "SELECT latitude, longitude FROM city WHERE city_name = 'Baltimore'",
        "SELECT latitude, longitude FROM city WHERE city_name LIKE 'Baltimore'",
        "SELECT latitude AS lat, longitude AS lng FROM city WHERE city_name = 'Baltimore'",
        "SELECT latitude, longitude FROM city c WHERE c.city_name = 'Baltimore'",
        "SELECT latitude AS Latitude, longitude AS Longitude FROM city WHERE city.city_name LIKE 'Baltimore'",
        "SELECT (latitude) as Lat, (longitude) as Lon FROM city CITY WHERE CITY.city_name = 'Baltimore'"
      ]
    ]
  },
  {
    "id": 771,
    "db_id": "address_1",
    "nlq": "Show names for all cities in state PA.",
    "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE state = 'PA'",
        "SELECT C.city_name FROM city C WHERE C.state = 'PA'",
        "SELECT city_name FROM city WHERE state = 'PA' AND country LIKE '%'",
        "SELECT city_name FROM city WHERE state = 'PA' GROUP BY city_name",
        "SELECT city.city_name FROM city WHERE city.state LIKE 'PA'",
        "SELECT city.city_name FROM city WHERE city.state = 'PA' ORDER BY city.city_name",
        "SELECT city_name FROM city WHERE state = 'PA' AND city_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 772,
    "db_id": "address_1",
    "nlq": "What are the names of all cities in PA?",
    "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE state = 'PA'",
        "SELECT city_name FROM city WHERE state LIKE 'PA'",
        "SELECT c.city_name FROM city c WHERE c.state = 'PA'",
        "SELECT city_name FROM city WHERE city.state = 'PA' AND country NOT NULL",
        "SELECT c1.city_name FROM city c1 WHERE c1.state = 'PA'",
        "SELECT city_name FROM city WHERE city.state = 'PA' AND country IS NOT NULL"
      ]
    ]
  },
  {
    "id": 773,
    "db_id": "address_1",
    "nlq": "How many cities are in Canada?",
    "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM city WHERE country = 'CANADA';",
        "SELECT COUNT(city_code) FROM city WHERE country = 'CANADA';",
        "SELECT COUNT(city_name) FROM city WHERE country = 'CANADA';",
        "SELECT COUNT(*) FROM (SELECT * FROM city WHERE country = 'CANADA');",
        "SELECT COUNT(1) FROM city WHERE country = 'CANADA';",
        "SELECT COUNT(city_code) AS CanadaCityCount FROM city WHERE country = 'CANADA';"
      ]
    ]
  },
  {
    "id": 774,
    "db_id": "address_1",
    "nlq": "Count the number of cities in Canada.",
    "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM city WHERE country = 'CANADA'",
        "SELECT COUNT(city_code) FROM city WHERE country = 'CANADA'",
        "SELECT COUNT(city_name) FROM city WHERE country = 'CANADA'",
        "SELECT COUNT(1) FROM city WHERE country = 'CANADA'",
        "SELECT COUNT(*) FROM (SELECT 1 FROM city WHERE country = 'CANADA')"
      ]
    ]
  },
  {
    "id": 775,
    "db_id": "address_1",
    "nlq": "Show names for all USA city ordered by latitude.",
    "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude ASC;",
        "SELECT c.city_name FROM city c WHERE c.country = 'USA' ORDER BY c.latitude;",
        "SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude ASC, city_name;",
        "SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude DESC;",
        "SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude ASC, state;"
      ]
    ]
  },
  {
    "id": 776,
    "db_id": "address_1",
    "nlq": "What are all the city names for cities in the USA, ordered by latitude?",
    "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE country = 'USA' ORDER BY latitude",
        "SELECT c.city_name FROM city c WHERE c.country = 'USA' ORDER BY c.latitude",
        "SELECT city.city_name AS City_Names FROM city WHERE city.country = 'USA' ORDER BY city.latitude",
        "SELECT City.city_name FROM city AS City WHERE City.country = 'USA' ORDER BY City.latitude"
      ]
    ]
  },
  {
    "id": 777,
    "db_id": "address_1",
    "nlq": "Show all states and number of cities in each state.",
    "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
    "infer_predictions": [
      [
        "SELECT state, COUNT(city_name) AS number_of_cities FROM city GROUP BY state",
        "SELECT state, COUNT(*) AS number_of_cities FROM city GROUP BY state",
        "SELECT state, COUNT(city_name) AS number_of_cities FROM city GROUP BY state ORDER BY state",
        "SELECT state, COUNT(city.city_name) AS number_of_cities FROM city GROUP BY state",
        "SELECT c.state, COUNT(c.city_name) AS number_of_cities FROM city AS c GROUP BY c.state",
        "SELECT c.state, COUNT(*) AS number_of_cities FROM city AS c GROUP BY c.state",
        "SELECT state, COUNT(city_name) FROM city GROUP BY state",
        "SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM city c GROUP BY c.state",
        "SELECT state, COUNT(city_code) AS number_of_cities FROM city GROUP BY state",
        "SELECT state, COUNT(city_name) FROM city GROUP BY state HAVING COUNT(city_name) > 0"
      ]
    ]
  },
  {
    "id": 778,
    "db_id": "address_1",
    "nlq": "How many cities are in each state?",
    "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
    "infer_predictions": [
      [
        "SELECT state, COUNT(city_name) AS total_cities FROM city GROUP BY state",
        "SELECT state, COUNT(*) AS city_count FROM city GROUP BY state",
        "SELECT state, COUNT(city_code) FROM city GROUP BY state",
        "SELECT state, COUNT(DISTINCT city_name) FROM city GROUP BY state",
        "SELECT c.state, COUNT(c.city_name) AS num_cities FROM city c GROUP BY c.state",
        "SELECT c.state, COUNT(*) FROM city c GROUP BY c.state",
        "SELECT state, COUNT(city_code) AS count_of_cities FROM city GROUP BY state",
        "SELECT state, COUNT(city_code) total FROM city GROUP BY state ORDER BY state",
        "SELECT state, COUNT(city_code) AS cities_in_state FROM city WHERE state IS NOT NULL GROUP BY state",
        "SELECT state, COUNT(DISTINCT city_code) AS num_cities FROM city GROUP BY state"
      ]
    ]
  },
  {
    "id": 779,
    "db_id": "address_1",
    "nlq": "Show all countries and number of cities in each .",
    "gold": "select country ,  count(*) from city group by country",
    "infer_predictions": [
      [
        "SELECT country, COUNT(city_name) FROM city GROUP BY country",
        "SELECT country, COUNT(*) AS NumberOfCities FROM city GROUP BY country",
        "SELECT c.country, COUNT(c.city_code) FROM city c GROUP BY c.country",
        "SELECT c.country, COUNT(c.city_name) FROM city c GROUP BY c.country",
        "SELECT c1.country, COUNT(DISTINCT c1.city_code) FROM city c1 GROUP BY c1.country",
        "SELECT c.country AS Country, COUNT(c.city_code) AS CityCount FROM city c GROUP BY c.country",
        "SELECT country, COUNT(city_name) FROM city GROUP BY country ORDER BY country",
        "SELECT c.country, COUNT(c.city_name) FROM city c GROUP BY c.country ORDER BY COUNT(c.city_name) DESC",
        "SELECT country AS CountryName, COUNT(*) AS CityCount FROM city GROUP BY CountryName",
        "SELECT DISTINCT country, (SELECT COUNT(*) FROM city WHERE country = c.country) AS NumCities FROM city c GROUP BY country"
      ]
    ]
  },
  {
    "id": 780,
    "db_id": "address_1",
    "nlq": "How many cities are there in each country?",
    "gold": "SELECT country ,  count(*) FROM City GROUP BY country",
    "infer_predictions": [
      [
        "SELECT country, COUNT(city_code) FROM city GROUP BY country",
        "SELECT country, COUNT(DISTINCT city_code) AS city_count FROM city GROUP BY country",
        "SELECT country, COUNT(*) FROM city GROUP BY country",
        "SELECT c.country, COUNT(c.city_code) FROM city c GROUP BY c.country",
        "SELECT country, COUNT(city_code) AS TotalCities FROM city GROUP BY country ORDER BY country",
        "SELECT (country) AS nationality, COUNT(city_code) AS number_of_cities FROM city GROUP BY country",
        "SELECT country AS country_name, COUNT(DISTINCT city_code) AS num_of_cities FROM city GROUP BY country_name",
        "SELECT c.country, COUNT(DISTINCT c.city_code) AS Num_Cities FROM city c GROUP BY c.country ORDER BY Num_Cities DESC",
        "SELECT c.country, COUNT(c.city_name) FROM city c GROUP BY c.country HAVING COUNT(c.city_code) > 0",
        "SELECT country, COUNT(city_code) AS NumberOfCities FROM city GROUP BY country ORDER BY country ASC"
      ]
    ]
  },
  {
    "id": 781,
    "db_id": "address_1",
    "nlq": "List all states with at least two cities.",
    "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT state FROM city GROUP BY state HAVING COUNT(city_name) >= 2",
        "SELECT state FROM (SELECT state, COUNT(city_name) AS num_cities FROM city GROUP BY state) WHERE num_cities >= 2",
        "SELECT state FROM city WHERE city_name IN (SELECT city_name FROM city GROUP BY city_name HAVING COUNT(city_name) > 1) GROUP BY state",
        "SELECT state FROM city c GROUP BY state HAVING COUNT(DISTINCT c.city_name) >= 2",
        "SELECT DISTINCT state FROM city WHERE city_code IN (SELECT city_code FROM city GROUP BY city_code HAVING COUNT(city_code) > 1) GROUP BY state",
        "SELECT c1.state FROM city c1 JOIN city c2 ON c1.city_code != c2.city_code AND c1.state = c2.state GROUP BY c1.state",
        "SELECT state FROM (SELECT state, COUNT(*) as cities_count FROM city GROUP BY state) as derived_table WHERE derived_table.cities_count >= 2",
        "WITH Cities_Count AS (SELECT state, COUNT(city_name) as cnt FROM city GROUP BY state) SELECT state FROM Cities_Count WHERE cnt >= 2",
        "SELECT state FROM city GROUP BY state HAVING COUNT(*) >= 2"
      ]
    ]
  },
  {
    "id": 782,
    "db_id": "address_1",
    "nlq": "Which states have at least two cities?",
    "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT state FROM city GROUP BY state HAVING COUNT(city_name) >= 2",
        "SELECT c.state FROM city c GROUP BY c.state HAVING COUNT(c.city_name) >= 2",
        "SELECT c1.state FROM city c1 GROUP BY c1.state HAVING COUNT(DISTINCT c1.city_name) > 1",
        "SELECT DISTINCT c.state FROM city c WHERE EXISTS (SELECT 1 FROM city c2 WHERE c.state = c2.state GROUP BY c2.state HAVING COUNT(c2.city_name) > 1)",
        "SELECT state FROM (SELECT state, COUNT(city_name) AS city_count FROM city GROUP BY state) WHERE city_count >= 2",
        "SELECT c.state FROM city c JOIN city c2 ON c.state = c2.state WHERE c.city_name <> c2.city_name GROUP BY c.state",
        "WITH StateCityCounts AS (SELECT state, COUNT(city_name) AS CityCount FROM city GROUP BY state) SELECT state FROM StateCityCounts WHERE CityCount > 1",
        "SELECT c.state FROM city c WHERE (SELECT COUNT(*) FROM city WHERE state = c.state) > 1 GROUP BY c.state",
        "SELECT DISTINCT c.state FROM city c INNER JOIN city c2 ON c.state = c2.state WHERE c.city_code != c2.city_code",
        "SELECT c.state FROM (SELECT state FROM city GROUP BY state, city_name HAVING COUNT(city_name) > 1) c GROUP BY c.state HAVING COUNT(c.state) > 1"
      ]
    ]
  },
  {
    "id": 783,
    "db_id": "address_1",
    "nlq": "Which state has most number of cities?",
    "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1",
        "SELECT state AS StateWithMostCities FROM city GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.state FROM city c GROUP BY c.state ORDER BY COUNT(c.city_name) DESC LIMIT 1",
        "SELECT state FROM (SELECT state, COUNT(*) as num_cities FROM city GROUP BY state) ORDER BY num_cities DESC LIMIT 1",
        "SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM city GROUP BY state))",
        "SELECT StateWithMostCities.state FROM (SELECT state, COUNT(city_name) AS CityCount FROM city GROUP BY state) AS StateWithMostCities ORDER BY CityCount DESC LIMIT 1",
        "SELECT state, COUNT(city_name) AS city_count FROM city GROUP BY state ORDER BY city_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 784,
    "db_id": "address_1",
    "nlq": "Give the state that has the most cities.",
    "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC LIMIT 1",
        "SELECT state FROM (SELECT state, COUNT(city_name) AS cnt FROM city GROUP BY state) ORDER BY cnt DESC LIMIT 1",
        "SELECT state FROM city GROUP BY state ORDER BY COUNT(city_name) DESC, state ASC LIMIT 1",
        "SELECT state FROM (SELECT state, RANK() OVER (ORDER BY COUNT(city_name) DESC) AS rnk FROM city GROUP BY state) WHERE rnk = 1 LIMIT 1",
        "SELECT state FROM city GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT state FROM city GROUP BY state HAVING COUNT(city_name) = (SELECT MAX(city_count) FROM (SELECT COUNT(city_name) AS city_count FROM city GROUP BY state))"
      ]
    ]
  },
  {
    "id": 785,
    "db_id": "address_1",
    "nlq": "Which country has fewest number of cities?",
    "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM city GROUP BY country ORDER BY COUNT(city_name) ASC LIMIT 1",
        "SELECT country FROM (SELECT country, COUNT(*) AS num_cities FROM city GROUP BY country) AS count_tab ORDER BY num_cities ASC LIMIT 1",
        "SELECT country FROM city GROUP BY country HAVING COUNT(city_code) = (SELECT MIN(total) FROM (SELECT COUNT(city_code) AS total FROM city GROUP BY country))",
        "WITH CityCounts AS (SELECT country, COUNT(*) AS CountCities FROM city GROUP BY country) SELECT country FROM CityCounts WHERE CountCities = (SELECT MIN(CountCities) FROM CityCounts)",
        "SELECT country FROM city GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT first_value(country) OVER (ORDER BY COUNT(city_code) ASC) FROM city GROUP BY country",
        "SELECT country, COUNT(*) AS NumCities FROM city GROUP BY country ORDER BY NumCities ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 786,
    "db_id": "address_1",
    "nlq": "Give the country with the fewest number of cities.",
    "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM city GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT country FROM (SELECT country, COUNT(city_name) AS num_cities FROM city GROUP BY country) AS Cnt ORDER BY num_cities ASC LIMIT 1",
        "SELECT MIN(grouped_countries.country) AS country FROM (SELECT country, COUNT(city_name) AS cnt FROM city GROUP BY country) grouped_countries WHERE grouped_countries.cnt = (SELECT MIN(num_cities) FROM (SELECT COUNT(city_name) AS num_cities FROM city GROUP BY country))",
        "WITH CityCount AS (SELECT country, COUNT(*) AS count FROM city GROUP BY country) SELECT country FROM CityCount WHERE count = (SELECT MIN(count) FROM CityCount)",
        "SELECT country FROM city GROUP BY country HAVING COUNT(city_name) = (SELECT MIN(TotalCities) FROM (SELECT COUNT(city_name) AS TotalCities FROM city GROUP BY country))",
        "SELECT C1.country FROM (SELECT country, COUNT(city_name) AS total FROM city GROUP BY country) C1 WHERE total = (SELECT MIN(total) FROM (SELECT COUNT(city_name) AS total FROM city GROUP BY country))",
        "WITH CountryCounts AS (SELECT country, COUNT(city_name) AS city_count FROM city GROUP BY country) SELECT country FROM CountryCounts WHERE city_count = (SELECT MIN(city_count) FROM CountryCounts)"
      ]
    ]
  },
  {
    "id": 787,
    "db_id": "address_1",
    "nlq": "Show the first name and the last name for students living in state MD.",
    "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
    "infer_predictions": [
      [
        "SELECT s.fname, s.lname FROM student AS s JOIN city AS c ON s.city_code = c.city_code WHERE c.state = 'MD'",
        "SELECT fname, lname FROM student WHERE city_code IN (SELECT city_code FROM city WHERE state = 'MD')",
        "SELECT s.fname, s.lname FROM student s, city c WHERE s.city_code = c.city_code AND c.state = 'MD'",
        "SELECT s.fname, s.lname FROM student s INNER JOIN city c ON s.city_code = c.city_code AND c.state = 'MD'",
        "SELECT FIRST_NAME, LAST_NAME FROM (SELECT fname AS FIRST_NAME, lname AS LAST_NAME, city_code FROM student) AS STUD WHERE STUD.city_code IN (SELECT city_code FROM city WHERE state = 'MD')",
        "SELECT s.fname, s.lname FROM student s WHERE EXISTS (SELECT 1 FROM city c WHERE c.city_code = s.city_code AND c.state = 'MD')",
        "SELECT s.fname, s.lname FROM student s LEFT JOIN city c ON s.city_code = c.city_code WHERE c.state = 'MD'",
        "SELECT s.fname, s.lname FROM student AS s, city AS c WHERE s.city_code = c.city_code AND c.state = 'MD' GROUP BY s.fname, s.lname"
      ]
    ]
  },
  {
    "id": 788,
    "db_id": "address_1",
    "nlq": "What are the full names of students living in MD?",
    "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
    "infer_predictions": [
      [
        "SELECT fname || ' ' || lname FROM student JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD'",
        "SELECT fname || ' ' || lname AS full_name FROM student, city WHERE student.city_code = city.city_code AND city.state = 'MD'",
        "SELECT fname || ' ' || lname FROM student LEFT JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD'",
        "SELECT fname || ' ' || lname FROM student, city WHERE student.city_code = city.city_code AND city.state = 'MD'",
        "SELECT student.fname || ' ' || student.lname FROM student JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD'",
        "SELECT student.fname || ' ' || student.lname AS full_name FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD'",
        "SELECT student.fname || ' ' || student.lname FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.state = 'MD'",
        "SELECT fname || ' ' || lname AS full_name FROM student WHERE EXISTS (SELECT 1 FROM city WHERE city.city_code = student.city_code AND city.state = 'MD')"
      ]
    ]
  },
  {
    "id": 789,
    "db_id": "address_1",
    "nlq": "How many students live in China?",
    "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM student JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA'",
        "SELECT COUNT(student.stuid) FROM student, city WHERE student.city_code = city.city_code AND city.country = 'CHINA'",
        "SELECT COUNT(DISTINCT student.stuid) FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA'",
        "SELECT COUNT(1) FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country = 'CHINA'",
        "SELECT (SELECT COUNT(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country = 'CHINA'))",
        "SELECT COUNT(*) FROM student WHERE EXISTS (SELECT 1 FROM city WHERE city.country = 'CHINA' AND city.city_code = student.city_code)",
        "SELECT COUNT(stuid) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country = 'CHINA')",
        "SELECT COUNT(student.stuid) FROM city INNER JOIN student ON city.city_code = student.city_code WHERE city.country = 'CHINA'",
        "SELECT COUNT(DISTINCT s.stuid) FROM student s, city c WHERE s.city_code = c.city_code AND c.country = 'CHINA'"
      ]
    ]
  },
  {
    "id": 790,
    "db_id": "address_1",
    "nlq": "Count the number of students living in China.",
    "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM student JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA'",
        "SELECT COUNT(student.stuid) FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA'",
        "SELECT COUNT(DISTINCT student.stuid) FROM student, city WHERE student.city_code = city.city_code AND city.country = 'CHINA'",
        "SELECT COUNT(stuid) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country = 'CHINA')",
        "SELECT COUNT(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country = 'CHINA')",
        "SELECT COUNT(DISTINCT s.stuid) FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE c.country = 'CHINA'",
        "SELECT (SELECT COUNT(*) FROM student WHERE city_code = c.city_code) FROM city c WHERE c.country = 'CHINA'",
        "SELECT COUNT(*) FROM (SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA')",
        "SELECT COUNT(*) FROM (SELECT student.city_code FROM student JOIN city ON student.city_code = city.city_code WHERE city.country = 'CHINA' GROUP BY student.stuid)",
        "SELECT (SELECT COUNT(stuid) FROM student s WHERE s.city_code = city.city_code) AS total_students FROM city WHERE country = 'CHINA'"
      ]
    ]
  },
  {
    "id": 791,
    "db_id": "address_1",
    "nlq": "Return the first name and major of students are living in Baltimore?",
    "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
    "infer_predictions": [
      [
        "SELECT fname, major FROM student JOIN city ON student.city_code = city.city_code WHERE city.city_name = 'Baltimore'",
        "SELECT s.fname, s.major FROM student s, city c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
        "SELECT fname, major FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.city_name = 'Baltimore'",
        "SELECT DISTINCT fname, major FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
        "SELECT fname, major FROM student WHERE city_code IN (SELECT city_code FROM city WHERE city_name = 'Baltimore')",
        "SELECT t.fname, t.major FROM student t JOIN city b ON t.city_code = b.city_code WHERE b.city_name = 'Baltimore'",
        "SELECT s.fname, s.major FROM student AS s INNER JOIN city AS c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
        "SELECT z.fname, z.major FROM student z JOIN city k ON z.city_code = k.city_code WHERE k.city_name LIKE 'Baltimore'",
        "SELECT student.fname, student.major FROM student JOIN city USING(city_code) WHERE city.city_name = 'Baltimore'"
      ]
    ]
  },
  {
    "id": 792,
    "db_id": "address_1",
    "nlq": "What are the first names and majors of students living in Baltimore?",
    "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
    "infer_predictions": [
      [
        "SELECT student.fname, student.major FROM student JOIN city ON student.city_code = city.city_code WHERE city.city_name = 'Baltimore'",
        "SELECT fname, major FROM student, city WHERE student.city_code = city.city_code AND city.city_name = 'Baltimore'",
        "SELECT s.fname, s.major FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE c.city_name = 'Baltimore'",
        "SELECT s.fname, s.major FROM student AS s, city AS c WHERE s.city_code = c.city_code AND c.city_name = 'Baltimore'",
        "SELECT fName, major FROM student JOIN city ON student.city_code = city.city_code AND city.city_name = 'Baltimore'",
        "SELECT student.fname, student.major FROM student, city WHERE student.city_code = city.city_code AND city.city_name = 'Baltimore'",
        "SELECT s.fname, s.major FROM student s INNER JOIN city c ON s.city_code = c.city_code AND c.city_name = 'Baltimore'"
      ]
    ]
  },
  {
    "id": 793,
    "db_id": "address_1",
    "nlq": "Show the number of students living in each country.",
    "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
    "infer_predictions": [
      [
        "SELECT country, COUNT(s.stuid) AS NumberOfStudents FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY country",
        "SELECT country, COUNT(*) AS NumberOfStudents FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT c.country, COUNT(*) FROM student s INNER JOIN city c ON s.city_code = c.city_code GROUP BY c.country",
        "SELECT country, COUNT(stuid) AS NumberOfStudents FROM student s, city c WHERE s.city_code = c.city_code GROUP BY country",
        "SELECT c.country, COUNT(s.stuid) AS student_count FROM city c LEFT JOIN student s ON c.city_code = s.city_code GROUP BY c.country",
        "SELECT country, COUNT(stuid) FROM city JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT country, COUNT(student.stuid) FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT country, COUNT(s.stuid) FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country IS NOT NULL GROUP BY c.country",
        "SELECT country, COUNT(*) as total_students FROM city c LEFT JOIN student s ON c.city_code = s.city_code GROUP BY country",
        "SELECT country as residence_country, COUNT(stuid) FROM student INNER JOIN city ON student.city_code = city.city_code GROUP BY country"
      ]
    ]
  },
  {
    "id": 794,
    "db_id": "address_1",
    "nlq": "How many students live in each country?",
    "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
    "infer_predictions": [
      [
        "SELECT country, COUNT(stuid) AS student_count FROM city JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT city.country, COUNT(student.stuid) FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY city.country",
        "SELECT c.country, COUNT(s.stuid) AS num_students FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY c.country",
        "SELECT country, COUNT(*) FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT COUNT(stuid), country FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT country, COUNT(DISTINCT stuid) FROM city JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT c.country, COUNT(s.stuid) AS total_students FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.country",
        "SELECT country, COUNT(student.stuid) AS num_of_students FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country",
        "SELECT c.country AS nation, COUNT(s.stuid) AS student_total FROM city c JOIN student s WHERE s.city_code = c.city_code GROUP BY c.country"
      ]
    ]
  },
  {
    "id": 795,
    "db_id": "address_1",
    "nlq": "Find the number of students living in each city.",
    "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
    "infer_predictions": [
      [
        "SELECT city.city_name, COUNT(student.stuid) AS num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.city_name",
        "SELECT c.city_name, COUNT(s.stuid) FROM city AS c JOIN student AS s ON c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT city.city_name, COUNT(*) AS student_count FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY city.city_name",
        "SELECT c.city_name, COUNT(s.stuid) AS total_students FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT city.city_name, COUNT(student.stuid) FROM city JOIN student USING(city_code) GROUP BY city.city_name",
        "SELECT c.city_name, COUNT(s.stuid) FROM city AS c INNER JOIN student AS s ON c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT city_name, COUNT(stuid) AS number_of_students FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY city_name",
        "SELECT c.city_name, COUNT(s.stuid) FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT city.city_name, COUNT(student.city_code) FROM city, student WHERE city.city_code = student.city_code GROUP BY city.city_name",
        "SELECT city.city_name, COUNT(student.stuid) FROM student INNER JOIN city ON student.city_code = city.city_code GROUP BY city.city_name"
      ]
    ]
  },
  {
    "id": 796,
    "db_id": "address_1",
    "nlq": "How many students live in each city?",
    "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
    "infer_predictions": [
      [
        "SELECT city.city_name, COUNT(student.stuid) AS student_count FROM student JOIN city ON student.city_code = city.city_code GROUP BY city.city_name",
        "SELECT city.city_name, COUNT(*) FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY city.city_name",
        "SELECT c.city_name, COUNT(s.stuid) AS num_students FROM city AS c LEFT JOIN student AS s ON c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT c.city_name, COUNT(DISTINCT s.stuid) FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.city_name",
        "SELECT COUNT(s.stuid), c.city_name FROM student s, city c WHERE s.city_code = c.city_code GROUP BY c.city_name",
        "SELECT CITY.CITY_NAME, (SELECT COUNT(STUID) FROM STUDENT WHERE CITY_CODE = CITY.CITY_CODE) AS STUDENT_COUNT FROM CITY",
        "SELECT city_name as City, COUNT(stuid) as NumberOfStudents FROM student JOIN city ON student.city_code = city.city_code GROUP BY city_name",
        "SELECT city_name AS City, COUNT(stuid) as Total_Students FROM student LEFT JOIN city ON student.city_code = city.city_code GROUP BY city_name",
        "SELECT COUNT(1), city_name FROM city LEFT OUTER JOIN student ON city.city_code = student.city_code GROUP BY city_name"
      ]
    ]
  },
  {
    "id": 797,
    "db_id": "address_1",
    "nlq": "Which state has most number of students?",
    "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT MAX(state) FROM (SELECT state, COUNT(*) as num_students FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY num_students DESC)",
        "SELECT state FROM (SELECT state, COUNT(*) AS student_count FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY student_count DESC LIMIT 1)",
        "SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.city_code) = (SELECT MAX(c) FROM (SELECT COUNT(student.city_code) AS c FROM city JOIN student ON city.city_code = student.city_code GROUP BY state))",
        "SELECT CS.state FROM (SELECT city.state AS state, COUNT(*) AS total FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.state) AS CS ORDER BY CS.total DESC LIMIT 1",
        "SELECT FIRST_VALUE(state) OVER (ORDER BY COUNT(*) DESC) AS MostStudents FROM city JOIN student ON city.city_code = student.city_code GROUP BY state",
        "SELECT city_state FROM (SELECT city.state AS city_state, COUNT(student.lname) as student_count FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.state ORDER BY student_count DESC LIMIT 1)",
        "SELECT CS.state_state FROM (SELECT city.state as state_state FROM student, city WHERE student.city_code = city.city_code GROUP BY city.state ORDER BY COUNT(student.city_code) DESC LIMIT 1) AS CS"
      ]
    ]
  },
  {
    "id": 798,
    "db_id": "address_1",
    "nlq": "Give the state that has the most students.",
    "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM (SELECT state, COUNT(stuid) AS total_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY total_students DESC LIMIT 1)",
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY COUNT(stuid) DESC LIMIT 1",
        "SELECT state FROM (SELECT state, COUNT(*) AS num_students FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state) ORDER BY num_students DESC LIMIT 1",
        "SELECT state FROM (SELECT c.state, COUNT(s.stuid) AS cnt FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.state ORDER BY cnt DESC LIMIT 1)",
        "WITH student_counts AS (SELECT state, COUNT(stuid) AS count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY state) SELECT state FROM student_counts ORDER BY count DESC LIMIT 1",
        "SELECT SUB.state FROM (SELECT state, COUNT(stuid) as student_count FROM city JOIN student ON city.city_code = student.city_code GROUP BY state ORDER BY student_count DESC) SUB LIMIT 1",
        "SELECT state FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY state ORDER BY COUNT(s.stuid) DESC LIMIT 1",
        "SELECT DISTINCT c.state FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY c.state ORDER BY COUNT(*) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 799,
    "db_id": "address_1",
    "nlq": "Which country has least number of students?",
    "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM city JOIN student ON city.city_code = student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT country FROM (SELECT country, COUNT(stuid) AS num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY country) ORDER BY num_students ASC LIMIT 1",
        "SELECT country FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY country ORDER BY COUNT(student.stuid) ASC LIMIT 1",
        "WITH StudentCount AS (SELECT country, COUNT(*) AS s_count FROM city LEFT JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM StudentCount ORDER BY s_count LIMIT 1",
        "SELECT MIN(country_with_studentcount.country) FROM (SELECT country, COUNT(stuid) AS student_count FROM city JOIN student ON city.city_code = student.city_code GROUP BY country) AS country_with_studentcount ORDER BY country_with_studentcount.student_count ASC LIMIT 1",
        "SELECT MIN(country) FROM city c INNER JOIN student s ON c.city_code = s.city_code GROUP BY country ORDER BY COUNT(s.stuid) ASC LIMIT 1",
        "WITH Counts AS (SELECT country, COUNT(stuid) AS TotalStudents FROM city JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM Counts WHERE TotalStudents = (SELECT MIN(TotalStudents) FROM Counts)"
      ]
    ]
  },
  {
    "id": 800,
    "db_id": "address_1",
    "nlq": "Give the country with the fewest students.",
    "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT country FROM city JOIN student ON city.city_code = student.city_code GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT country FROM (SELECT country, COUNT(*) as c FROM student JOIN city ON student.city_code = city.city_code GROUP BY country) ORDER BY c ASC LIMIT 1",
        "SELECT country FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) = (SELECT MIN(c.cnt) FROM (SELECT COUNT(stuid) AS cnt FROM student GROUP BY city_code) c)) LIMIT 1",
        "SELECT country FROM city c WHERE EXISTS (SELECT NULL FROM student WHERE student.city_code = c.city_code GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(counted) FROM (SELECT COUNT(*) as counted FROM student GROUP BY city_code) subq)) LIMIT 1",
        "SELECT country FROM (SELECT country, COUNT(stuid) as total_students FROM student JOIN city ON student.city_code = city.city_code GROUP BY country ORDER BY total_students ASC LIMIT 1) tally",
        "SELECT DISTINCT subqry.country FROM (SELECT city.country, COUNT(student.stuid) as num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.country) subqry WHERE subqry.num_students = (SELECT MIN(num_students) FROM (SELECT COUNT(student.stuid) as num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY city.country) ns)",
        "WITH Country_Students_Count AS (SELECT country, COUNT(*) as NumStudents FROM city JOIN student ON city.city_code = student.city_code GROUP BY country) SELECT country FROM Country_Students_Count WHERE NumStudents = (SELECT MIN(NumStudents) FROM Country_Students_Count)"
      ]
    ]
  },
  {
    "id": 801,
    "db_id": "address_1",
    "nlq": "Show names for all cities where at least three students live.",
    "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) >= 3)",
        "SELECT c.city_name FROM city c JOIN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) >= 3) s ON c.city_code = s.city_code",
        "SELECT city_name FROM city WHERE EXISTS (SELECT 1 FROM student WHERE city.city_code = student.city_code GROUP BY city_code HAVING COUNT(stuid) >= 3)",
        "SELECT DISTINCT city_name FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY city.city_code HAVING COUNT(DISTINCT student.stuid) >= 3",
        "SELECT DISTINCT c.city_name FROM city c WHERE (SELECT COUNT(stuid) FROM student WHERE student.city_code = c.city_code) >= 3",
        "SELECT DISTINCT city_name FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.city_code HAVING COUNT(s.stuid) >= 3",
        "SELECT city_name FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(DISTINCT stuid) >= 3)",
        "SELECT C1.city_name FROM city C1 JOIN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) >= 3) AS C2 ON C1.city_code = C2.city_code",
        "SELECT city_name FROM city c WHERE (SELECT COUNT(*) FROM student s WHERE s.city_code = c.city_code GROUP BY s.city_code) >= 3",
        "SELECT city_name FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) >= 3)"
      ]
    ]
  },
  {
    "id": 802,
    "db_id": "address_1",
    "nlq": "What are the names of cities with at least three students?",
    "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) >= 3)",
        "SELECT c.city_name FROM city c JOIN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) >= 3) s ON c.city_code = s.city_code",
        "SELECT c.city_name FROM city c WHERE EXISTS (SELECT 1 FROM student s WHERE s.city_code = c.city_code GROUP BY s.city_code HAVING COUNT(s.stuid) >= 3)",
        "SELECT c.city_name FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.city_code, c.city_name HAVING COUNT(s.stuid) >= 3",
        "SELECT city_name FROM city WHERE city_code IN (SELECT DISTINCT s.city_code FROM student s GROUP BY s.city_code HAVING COUNT(s.stuid) >= 3)",
        "SELECT c.city_name FROM city c WHERE (SELECT COUNT(*) FROM student s WHERE s.city_code = c.city_code) >= 3",
        "SELECT c.city_name FROM city c INNER JOIN student s ON c.city_code = s.city_code GROUP BY c.city_code HAVING COUNT(DISTINCT s.stuid) >= 3",
        "SELECT DISTINCT c.city_name FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY c.city_code, c.city_name HAVING COUNT(s.stuid) >= 3",
        "SELECT city_name FROM city WHERE city_code IN (SELECT city_code FROM (SELECT city_code, COUNT(*) as num_students FROM student GROUP BY city_code) WHERE num_students >= 3)",
        "SELECT c.city_name FROM city c WHERE 3 <= (SELECT COUNT(*) FROM student s WHERE s.city_code = c.city_code)"
      ]
    ]
  },
  {
    "id": 803,
    "db_id": "address_1",
    "nlq": "Show all states where more than 5 students live.",
    "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
    "infer_predictions": [
      [
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(stuid) > 5",
        "SELECT state FROM (SELECT state, COUNT(stuid) AS num_students FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state) AS T WHERE T.num_students > 5",
        "SELECT c.state FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5",
        "SELECT DISTINCT c.state FROM city c INNER JOIN student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(DISTINCT s.stuid) > 5",
        "SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(stuid) > 5)",
        "SELECT state FROM city c WHERE EXISTS (SELECT 1 FROM student s WHERE s.city_code = c.city_code GROUP BY s.city_code HAVING COUNT(s.stuid) > 5)",
        "SELECT DISTINCT state FROM (SELECT state FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY state HAVING COUNT(*) > 5) AS student_states",
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state HAVING SUM(CASE WHEN stuid IS NOT NULL THEN 1 ELSE 0 END) > 5"
      ]
    ]
  },
  {
    "id": 804,
    "db_id": "address_1",
    "nlq": "What are the states with more than 5 students?",
    "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
    "infer_predictions": [
      [
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(DISTINCT student.stuid) > 5",
        "SELECT c.state FROM city c INNER JOIN student s ON c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5",
        "SELECT state FROM (SELECT state, COUNT(stuid) AS num_students FROM city JOIN student ON city.city_code = student.city_code GROUP BY state) WHERE num_students > 5",
        "SELECT DISTINCT state FROM city WHERE city_code IN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) > 5)",
        "SELECT c.state FROM student s JOIN city c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(*) > 5",
        "SELECT state FROM city c WHERE EXISTS (SELECT NULL FROM student s WHERE s.city_code = c.city_code GROUP BY s.city_code HAVING COUNT(s.stuid) > 5)",
        "SELECT state FROM city INNER JOIN student ON city.city_code = student.city_code GROUP BY state HAVING COUNT(student.stuid) > 5",
        "SELECT c.state FROM city c INNER JOIN (SELECT city_code FROM student GROUP BY city_code HAVING COUNT(*) > 5) s ON c.city_code = s.city_code",
        "SELECT state FROM (SELECT c.state, COUNT(*) AS student_count FROM city c JOIN student s ON c.city_code = s.city_code GROUP BY c.state) WHERE student_count > 5",
        "SELECT c.state FROM city c, student s WHERE c.city_code = s.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5"
      ]
    ]
  },
  {
    "id": 805,
    "db_id": "address_1",
    "nlq": "Show ids for all students who don't live in USA.",
    "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
    "infer_predictions": [
      [
        "SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE city.country != 'USA'",
        "SELECT student.stuid FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.country != 'USA'",
        "SELECT s.stuid FROM student AS s JOIN city AS c ON s.city_code = c.city_code WHERE c.country <> 'USA'",
        "SELECT s.stuid FROM student s, city c WHERE s.city_code = c.city_code AND c.country <> 'USA'",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND city.country NOT IN ('USA')",
        "SELECT s.stuid FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE c.country != 'USA'",
        "SELECT stuid FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country <> 'USA')",
        "SELECT s.stuid FROM student s WHERE EXISTS (SELECT 1 FROM city c WHERE c.city_code = s.city_code AND c.country <> 'USA')",
        "SELECT s.stuid FROM student s WHERE s.city_code IN (SELECT city_code FROM city WHERE country NOT IN ('USA'))"
      ]
    ]
  },
  {
    "id": 806,
    "db_id": "address_1",
    "nlq": "What the the student ids for students not living in the USA?",
    "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
    "infer_predictions": [
      [
        "SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE city.country != 'USA'",
        "SELECT student.stuid FROM student INNER JOIN city ON student.city_code = city.city_code WHERE city.country <> 'USA'",
        "SELECT stuid FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country <> 'USA')",
        "SELECT stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.country != 'USA'",
        "SELECT stuid FROM student, city WHERE student.city_code = city.city_code AND city.country NOT IN ('USA')",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND city.country != 'USA'",
        "SELECT S.stuid FROM student S INNER JOIN city C ON S.city_code = C.city_code WHERE C.country <> 'USA'",
        "SELECT s.stuid FROM student s INNER JOIN city c ON s.city_code = c.city_code AND c.country != 'USA'",
        "SELECT student.stuid FROM student LEFT JOIN city ON student.city_code = city.city_code WHERE city.country NOT LIKE 'USA'",
        "SELECT S.stuid FROM student S, city C WHERE S.city_code = C.city_code AND C.country NOT IN ('USA')"
      ]
    ]
  },
  {
    "id": 807,
    "db_id": "address_1",
    "nlq": "Show ids for all female (sex is F) students living in state PA.",
    "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
    "infer_predictions": [
      [
        "SELECT student.stuid FROM student JOIN city ON student.city_code = city.city_code WHERE student.sex = 'F' AND city.state = 'PA'",
        "SELECT s.stuid FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA'",
        "SELECT stuid FROM student, city WHERE student.city_code = city.city_code AND sex = 'F' AND state = 'PA'",
        "SELECT stuid FROM student NATURAL JOIN city WHERE sex = 'F' AND state = 'PA'",
        "SELECT stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'F' AND c.state = 'PA'",
        "SELECT DISTINCT student.stuid FROM student LEFT JOIN city ON student.city_code = city.city_code WHERE student.sex = 'F' AND city.state = 'PA'",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND student.sex = 'F' AND city.state = 'PA'",
        "SELECT student.stuid FROM student CROSS JOIN city WHERE student.city_code = city.city_code AND student.sex = 'F' AND city.state = 'PA'",
        "SELECT student.stuid FROM student JOIN city ON student.city_code = city.city_code AND student.sex = 'F' WHERE city.state = 'PA'"
      ]
    ]
  },
  {
    "id": 808,
    "db_id": "address_1",
    "nlq": "What are the student ids for female students in the state of PA?",
    "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
    "infer_predictions": [
      [
        "SELECT student.stuid FROM student JOIN city ON student.city_code = city.city_code WHERE student.sex = 'female' AND city.state = 'PA'",
        "SELECT stuid FROM student WHERE sex = 'female' AND city_code IN (SELECT city_code FROM city WHERE state = 'PA')",
        "SELECT s.stuid FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'female' AND c.state = 'PA'",
        "SELECT s.stuid FROM student s, city c WHERE s.city_code = c.city_code AND s.sex = 'female' AND c.state = 'PA'",
        "SELECT stuid FROM student WHERE sex = 'female' AND EXISTS (SELECT 1 FROM city WHERE state = 'PA' AND city.city_code = student.city_code)",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND student.sex = 'female' AND city.state = 'PA'",
        "SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE c.state = 'PA' AND s.sex = 'female'",
        "SELECT DISTINCT student.stuid FROM student INNER JOIN city ON student.city_code = city.city_code WHERE student.sex = 'female' AND city.state = 'PA'",
        "SELECT s.stuid FROM student s WHERE s.sex = 'female' AND s.city_code IN (SELECT city_code FROM city c WHERE c.state = 'PA')",
        "SELECT student.stuid FROM student INNER JOIN city ON city.city_code = student.city_code WHERE student.sex = 'female' AND city.state = 'PA'"
      ]
    ]
  },
  {
    "id": 809,
    "db_id": "address_1",
    "nlq": "Show ids for all male students living outside of USA.",
    "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
    "infer_predictions": [
      [
        "SELECT s.stuid FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'male' AND c.country != 'USA'",
        "SELECT stuid FROM student WHERE sex = 'male' AND city_code IN (SELECT city_code FROM city WHERE country <> 'USA')",
        "SELECT s.stuid FROM student s, city c WHERE s.city_code = c.city_code AND s.sex = 'male' AND c.country NOT IN ('USA')",
        "SELECT DISTINCT(s.stuid) FROM student s INNER JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'male' AND c.country!= 'USA'",
        "SELECT student.stuid FROM student LEFT JOIN city ON student.city_code = city.city_code WHERE student.sex = 'male' AND city.country NOT LIKE 'USA'",
        "SELECT stuid FROM student WHERE sex = 'male' AND NOT EXISTS (SELECT 1 FROM city WHERE student.city_code = city.city_code AND country = 'USA')",
        "SELECT s.stuid FROM student s WHERE s.sex = 'male' AND EXISTS (SELECT 1 FROM city WHERE city.city_code = s.city_code AND country <> 'USA')",
        "SELECT stuid FROM student WHERE sex = 'male' AND city_code IN (SELECT city_code FROM city WHERE NOT country = 'USA')",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND student.sex = 'male' AND city.country NOT IN ('USA')",
        "SELECT stuid FROM student AS s INNER JOIN city AS c ON s.city_code = c.city_code WHERE s.sex = 'male' AND c.country != 'USA'"
      ]
    ]
  },
  {
    "id": 810,
    "db_id": "address_1",
    "nlq": "What are the ids for male students not in the USA?",
    "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
    "infer_predictions": [
      [
        "SELECT stuid FROM student JOIN city ON student.city_code = city.city_code WHERE sex = 'male' AND country != 'USA'",
        "SELECT st.stuid FROM student st INNER JOIN city c ON st.city_code = c.city_code WHERE st.sex = 'male' AND c.country <> 'USA'",
        "SELECT student.stuid FROM student, city WHERE student.city_code = city.city_code AND student.sex = 'male' AND city.country NOT IN ('USA')",
        "SELECT s.stuid FROM student s, city ci WHERE s.city_code = ci.city_code AND s.sex = 'male' AND ci.country NOT LIKE 'USA'",
        "SELECT s.stuid FROM student s JOIN city ci ON s.city_code = ci.city_code WHERE ci.country <> 'USA' AND s.sex = 'male'",
        "SELECT stuid FROM student WHERE sex = 'male' AND city_code IN (SELECT city_code FROM city WHERE country != 'USA')",
        "SELECT student.stuid FROM student JOIN city ON student.city_code = city.city_code WHERE student.sex = 'male' AND city.country <> 'USA'",
        "SELECT stuid FROM student AS s JOIN city AS c ON s.city_code = c.city_code WHERE s.sex = 'male' AND c.country <> 'USA'",
        "SELECT s.stuid FROM student s CROSS JOIN city c WHERE s.city_code = c.city_code AND s.sex = 'male' AND c.country != 'USA'",
        "SELECT student.stuid FROM student LEFT JOIN city ON student.city_code = city.city_code WHERE student.sex = 'male' AND city.country != 'USA'"
      ]
    ]
  },
  {
    "id": 811,
    "db_id": "address_1",
    "nlq": "What is the distance between BAL and CHI?",
    "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
    "infer_predictions": [
      [
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI'",
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' AND distance IS NOT NULL",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI' AND d.distance > 0",
        "SELECT d.distance FROM direct_distance AS d JOIN city AS c ON d.city2_code = c.city_code WHERE d.city1_code = 'BAL' AND c.city_code = 'CHI'",
        "SELECT MAX(distance) FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'",
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' LIMIT 1",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code in (SELECT city_code FROM city WHERE city_code = 'BAL') AND d.city2_code in (SELECT city_code FROM city WHERE city_code = 'CHI')"
      ]
    ]
  },
  {
    "id": 812,
    "db_id": "address_1",
    "nlq": "Give the distance between BAL and CHI?",
    "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
    "infer_predictions": [
      [
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';",
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' LIMIT 1;",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI' ORDER BY distance ASC LIMIT 1;",
        "SELECT dd.distance FROM direct_distance dd WHERE dd.city1_code = 'BAL' AND dd.city2_code = 'CHI';",
        "SELECT distance FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI' ORDER BY distance DESC LIMIT 1;",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = 'BAL' AND city2_code = 'CHI' LIMIT 1;",
        "SELECT MAX(distance) FROM direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI';"
      ]
    ]
  },
  {
    "id": 813,
    "db_id": "address_1",
    "nlq": "Show me the distance between Boston and Newark.",
    "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
    "infer_predictions": [
      [
        "SELECT distance FROM direct_distance JOIN city AS c1 ON direct_distance.city1_code = c1.city_code JOIN city AS c2 ON direct_distance.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT dd.distance FROM direct_distance dd, city c1, city c2 WHERE dd.city1_code = c1.city_code AND dd.city2_code = c2.city_code AND c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT d.distance FROM direct_distance d INNER JOIN city c1 ON d.city1_code = c1.city_code INNER JOIN city c2 ON d.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT distance FROM direct_distance WHERE city1_code IN (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM city WHERE city_name = 'Newark')",
        "SELECT d.distance FROM direct_distance d, city b, city n WHERE d.city1_code = b.city_code AND d.city2_code = n.city_code AND b.city_name = 'Boston' AND n.city_name = 'Newark'",
        "SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM city WHERE city_name = 'Newark')",
        "SELECT MAX(dd.distance) FROM direct_distance dd JOIN city as b on dd.city1_code = b.city_code JOIN city as n on dd.city2_code = n.city_code WHERE b.city_name = 'Boston' AND n.city_name = 'Newark'",
        "SELECT MIN(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM city WHERE city_name = 'Newark')",
        "SELECT distance FROM (SELECT * FROM direct_distance WHERE city1_code IN (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM city WHERE city_name = 'Newark'))"
      ]
    ]
  },
  {
    "id": 814,
    "db_id": "address_1",
    "nlq": "What is the distance between Boston and Newark?",
    "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
    "infer_predictions": [
      [
        "SELECT dd.distance FROM direct_distance dd JOIN city c1 ON dd.city1_code = c1.city_code JOIN city c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM city WHERE city_name = 'Newark')",
        "SELECT d.distance FROM direct_distance d INNER JOIN city x ON d.city1_code = x.city_code INNER JOIN city y ON d.city2_code = y.city_code WHERE x.city_name = 'Boston' AND y.city_name = 'Newark'",
        "SELECT distance FROM city AS A, city AS B, direct_distance AS C WHERE A.city_name = 'Boston' AND B.city_name = 'Newark' AND A.city_code = C.city1_code AND B.city_code = C.city2_code",
        "SELECT dd.distance FROM direct_distance AS dd, city AS c1, city AS c2 WHERE c1.city_code = dd.city1_code AND c2.city_code = dd.city2_code AND c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT MAX(distance) FROM direct_distance WHERE city1_code IN (SELECT city_code FROM city WHERE city_name = 'Boston') AND city2_code IN (SELECT city_code FROM city WHERE city_name = 'Newark')",
        "SELECT distance FROM direct_distance WHERE exists (SELECT 1 FROM city WHERE city_name = 'Boston' AND city_code = city1_code) AND exists (SELECT 1 FROM city WHERE city_name = 'Newark' AND city_code = city2_code)",
        "SELECT DISTINCT dd.distance FROM direct_distance dd INNER JOIN city c1 ON dd.city1_code = c1.city_code INNER JOIN city c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Boston' AND c2.city_name = 'Newark'",
        "SELECT d.distance FROM direct_distance d WHERE d.city1_code = (SELECT city_code FROM city c WHERE c.city_name = 'Boston') AND d.city2_code = (SELECT city_code FROM city c WHERE c.city_name = 'Newark')",
        "SELECT distance FROM direct_distance, city city1, city city2 WHERE city1.city_name = 'Boston' AND city2.city_name = 'Newark' AND direct_distance.city1_code = city1.city_code AND direct_distance.city2_code = city2.city_code"
      ]
    ]
  },
  {
    "id": 815,
    "db_id": "address_1",
    "nlq": "What is the average, minimum, maximum distance between two cities?",
    "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
    "infer_predictions": [
      [
        "SELECT AVG(distance), MIN(distance), MAX(distance) FROM direct_distance",
        "SELECT MIN(distance) AS MinDistance, MAX(distance) AS MaxDistance, AVG(distance) AS AvgDistance FROM direct_distance",
        "SELECT (SELECT AVG(distance) FROM direct_distance), (SELECT MIN(distance) FROM direct_distance), (SELECT MAX(distance) FROM direct_distance)",
        "SELECT ( SELECT AVG(distance) FROM direct_distance ) AS AverageDistance, ( SELECT MIN(distance) FROM direct_distance ) AS MinimumDistance, ( SELECT MAX(distance) FROM direct_distance ) AS MaximumDistance",
        "SELECT AVG(dd.distance) AS AvgD, MIN(dd.distance) AS MinD, MAX(dd.distance) AS MaxD FROM direct_distance dd",
        "SELECT AVG(d.distance), MIN(d.distance), MAX(d.distance) FROM direct_distance d",
        "SELECT AVG_DISTANCE, MIN_DISTANCE, MAX_DISTANCE FROM (SELECT AVG(distance) AS AVG_DISTANCE, MIN(distance) AS MIN_DISTANCE, MAX(distance) AS MAX_DISTANCE FROM direct_distance)",
        "SELECT DISTANCES.* FROM (SELECT AVG(dd.distance) AS AverageDist, MIN(dd.distance) AS MinimumDist, MAX(dd.distance) AS MaximumDist FROM direct_distance dd) AS DISTANCES",
        "SELECT AVG(d1.distance), MIN(d1.distance), MAX(d1.distance) FROM direct_distance d1"
      ]
    ]
  },
  {
    "id": 816,
    "db_id": "address_1",
    "nlq": "Give the average, minimum, and maximum distances between two cities.",
    "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
    "infer_predictions": [
      [
        "SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM direct_distance",
        "SELECT AVG(distance) average_distance, MIN(distance) minimum_distance, MAX(distance) maximum_distance FROM direct_distance",
        "SELECT AVG(d.distance) AS average, MIN(d.distance) AS minimum, MAX(d.distance) AS maximum FROM direct_distance AS d",
        "SELECT AVG(distance), MIN(distance), MAX(distance) FROM direct_distance",
        "SELECT AVG(DISTINCT distance) AS avg_dist, MIN(distance) AS min_dist, MAX(distance) AS max_dist FROM direct_distance",
        "SELECT AVG(d.distance), MIN(d.distance), MAX(d.distance) FROM direct_distance d",
        "SELECT AVG(distance), MIN(distance), MAX(distance) FROM direct_distance WHERE distance IS NOT NULL",
        "SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM direct_distance",
        "WITH DistanceStats AS (SELECT distance FROM direct_distance) SELECT AVG(distance) AS AvgDistance, MIN(distance) AS MinDistance, MAX(distance) AS MaxDistance FROM DistanceStats",
        "SELECT AVG(dist.distance), MIN(dist.distance), MAX(dist.distance) FROM direct_distance dist"
      ]
    ]
  },
  {
    "id": 817,
    "db_id": "address_1",
    "nlq": "Show me the city code of two cities with maximum distance.",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT city1_code, city2_code FROM direct_distance ORDER BY distance DESC LIMIT 1",
        "SELECT dd.city1_code, dd.city2_code FROM direct_distance dd ORDER BY dd.distance DESC LIMIT 1",
        "SELECT city1, city2 FROM (SELECT city1_code AS city1, city2_code AS city2, distance FROM direct_distance ORDER BY distance DESC) LIMIT 1",
        "SELECT city_code_1, city_code_2 FROM (SELECT city1_code AS city_code_1, city2_code AS city_code_2 FROM direct_distance ORDER BY distance DESC) LIMIT 1",
        "SELECT city_A, city_B FROM (SELECT city1_code AS city_A, city2_code AS city_B, MAX(distance) FROM direct_distance GROUP BY distance) LIMIT 1",
        "SELECT t.city1, t.city2 FROM (SELECT city1_code AS city1, city2_code AS city2, MAX(distance) AS maxD FROM direct_distance GROUP BY distance ORDER BY maxD DESC) t LIMIT 1",
        "SELECT top.city1, top.city2 FROM (SELECT d.city1_code AS city1, d.city2_code AS city2 FROM direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM direct_distance)) top LIMIT 1",
        "SELECT result.city1_code, result.city2_code FROM (SELECT city1_code, city2_code FROM direct_distance ORDER BY distance DESC) result LIMIT 1"
      ]
    ]
  },
  {
    "id": 818,
    "db_id": "address_1",
    "nlq": "What are the city codes of the cities with the maximum distance?",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT city1_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance)",
        "SELECT city1_code FROM direct_distance ORDER BY distance DESC LIMIT 1",
        "SELECT DISTINCT D.city1_code FROM direct_distance D INNER JOIN (SELECT MAX(distance) AS max_distance FROM direct_distance) MD ON D.distance = MD.max_distance",
        "SELECT DISTINCT D.city2_code FROM direct_distance D INNER JOIN (SELECT MAX(distance) AS max_distance FROM direct_distance) MD ON D.distance = MD.max_distance",
        "SELECT city1_code AS city_code FROM direct_distance WHERE distance IN (SELECT MAX(distance) FROM direct_distance UNION ALL SELECT MAX(distance) FROM direct_distance)",
        "SELECT city2_code AS city_code FROM direct_distance WHERE distance IN (SELECT MAX(distance) FROM direct_distance UNION ALL SELECT MAX(distance) FROM direct_distance)"
      ]
    ]
  },
  {
    "id": 819,
    "db_id": "address_1",
    "nlq": "Show me the city code of two cities with a distance greater than the average.",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
    "infer_predictions": [
      [
        "SELECT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM direct_distance);",
        "SELECT city1_code, city2_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance);",
        "SELECT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance > (SELECT AVG(dd.distance) FROM direct_distance dd);",
        "SELECT DISTINCT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM direct_distance dd WHERE dd.city1_code = d.city1_code OR dd.city2_code = d.city2_code);",
        "SELECT DISTINCT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance > (SELECT AVG(d1.distance) FROM direct_distance d1);",
        "SELECT d.city1_code, d.city2_code FROM direct_distance AS d WHERE d.distance > (SELECT AVG(dd.distance) FROM direct_distance dd);",
        "SELECT d.city1_code, d.city2_code FROM direct_distance d CROSS JOIN (SELECT AVG(distance) as avg_distance FROM direct_distance) as sub WHERE d.distance > sub.avg_distance;",
        "SELECT d.city1_code, d.city2_code FROM direct_distance d JOIN (SELECT AVG(distance) as average FROM direct_distance) a ON d.distance > a.average;",
        "SELECT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance > (SELECT AVG(d2.distance) FROM direct_distance d2 WHERE d.distance > d2.distance);"
      ]
    ]
  },
  {
    "id": 820,
    "db_id": "address_1",
    "nlq": "What are the city codes of cities with distance greater than average?",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
    "infer_predictions": [
      [
        "SELECT city1_code AS city_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance > (SELECT AVG(distance) FROM direct_distance)",
        "SELECT D.city1_code FROM direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM direct_distance)",
        "SELECT D.city2_code FROM direct_distance D WHERE D.distance > (SELECT AVG(distance) FROM direct_distance)",
        "SELECT D1.city1_code FROM direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM direct_distance D2)",
        "SELECT D1.city2_code FROM direct_distance D1 WHERE D1.distance > (SELECT AVG(D2.distance) FROM direct_distance D2)",
        "SELECT DISTINCT D.city1_code FROM direct_distance D GROUP BY D.city1_code HAVING D.distance > (SELECT AVG(distance) FROM direct_distance)",
        "SELECT DISTINCT D.city2_code FROM direct_distance D GROUP BY D.city2_code HAVING D.distance > (SELECT AVG(distance) FROM direct_distance)",
        "SELECT D.city1_code FROM direct_distance D JOIN (SELECT AVG(distance) AS avg_distance FROM direct_distance) AV ON D.distance > AV.avg_distance",
        "SELECT D.city2_code FROM direct_distance D JOIN (SELECT AVG(distance) AS avg_distance FROM direct_distance) AV ON D.distance > AV.avg_distance"
      ]
    ]
  },
  {
    "id": 821,
    "db_id": "address_1",
    "nlq": "Show me the city code of two cities with a distance less than 1000.",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
    "infer_predictions": [
      [
        "SELECT dd.city1_code, dd.city2_code FROM direct_distance dd WHERE dd.distance < 1000",
        "SELECT DISTINCT d.city1_code, d.city2_code FROM direct_distance AS d WHERE d.distance < 1000",
        "SELECT city1.city1_code, city2.city2_code FROM direct_distance AS city1 INNER JOIN direct_distance AS city2 ON city1.city1_code = city2.city2_code WHERE city1.distance < 1000",
        "SELECT * FROM (SELECT city1_code, city2_code FROM direct_distance WHERE distance < 1000) AS subquery",
        "SELECT city1_code AS FirstCity, city2_code AS SecondCity FROM direct_distance WHERE distance < 1000",
        "SELECT d.city1_code, d.city2_code FROM direct_distance d WHERE d.distance < 1000 ORDER BY d.city1_code, d.city2_code",
        "SELECT DISTINCT a.city1_code, a.city2_code FROM direct_distance a WHERE a.distance < 1000",
        "SELECT dst.city1_code, dst.city2_code FROM direct_distance dst WHERE dst.distance < 1000 AND dst.city1_code != dst.city2_code"
      ]
    ]
  },
  {
    "id": 822,
    "db_id": "address_1",
    "nlq": "What are the city codes corresponding to cities with distances less than 1000?",
    "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
    "infer_predictions": [
      [
        "SELECT city1_code FROM direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM direct_distance WHERE distance < 1000",
        "SELECT city1_code AS city_code FROM direct_distance WHERE distance < 1000 UNION ALL SELECT city2_code AS city_code FROM direct_distance WHERE distance < 1000",
        "SELECT city_code FROM (SELECT city1_code AS city_code FROM direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM direct_distance WHERE distance < 1000) AS subquery",
        "SELECT DISTINCT code FROM (SELECT city1_code AS code FROM direct_distance WHERE distance < 1000 UNION ALL SELECT city2_code AS code FROM direct_distance WHERE distance < 1000)",
        "WITH filtered_distance AS (SELECT city1_code, city2_code FROM direct_distance WHERE distance < 1000) SELECT city1_code FROM filtered_distance UNION SELECT city2_code FROM filtered_distance",
        "SELECT city_code FROM (SELECT city1_code AS city_code FROM direct_distance WHERE distance < 1000 UNION SELECT city2_code AS city_code FROM direct_distance WHERE distance < 1000) ORDER BY city_code"
      ]
    ]
  },
  {
    "id": 823,
    "db_id": "address_1",
    "nlq": "What is the total distance between city BAL and all other cities.",
    "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
    "infer_predictions": [
      [
        "SELECT SUM(dd.distance) FROM direct_distance dd WHERE dd.city1_code = 'BAL'",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL'",
        "SELECT TOTAL(distance) FROM direct_distance WHERE city1_code = 'BAL'",
        "SELECT SUM(dd.distance) AS total_distance FROM direct_distance dd WHERE dd.city1_code = 'BAL'",
        "SELECT SUM(sub.distance) FROM (SELECT distance FROM direct_distance WHERE city1_code = 'BAL') sub",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' GROUP BY city1_code",
        "SELECT TOTAL(dd.distance) FROM direct_distance dd WHERE dd.city1_code = 'BAL'",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' AND distance IS NOT NULL",
        "SELECT SUM(distance) FROM direct_distance GROUP BY city1_code HAVING city1_code = 'BAL'"
      ]
    ]
  },
  {
    "id": 824,
    "db_id": "address_1",
    "nlq": "What is the sum of distances between BAL and other cities?",
    "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
    "infer_predictions": [
      [
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL'",
        "SELECT SUM(d.distance) FROM direct_distance d WHERE d.city1_code = 'BAL'",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' AND city2_code != 'BAL'",
        "SELECT TOTAL(distance) FROM direct_distance WHERE city1_code = 'BAL'",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' UNION SELECT SUM(distance) FROM direct_distance WHERE city2_code = 'BAL'",
        "SELECT SUM(d.distance) FROM direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code <> 'BAL'",
        "SELECT SUM(distance) FROM direct_distance WHERE city1_code = 'BAL' AND city2_code NOT IN ('BAL')",
        "SELECT SUM(IFNULL(distance,0)) FROM direct_distance WHERE city1_code = 'BAL'",
        "SELECT SUM(d.distance) FROM direct_distance d JOIN city c ON d.city2_code = c.city_code WHERE d.city1_code = 'BAL'",
        "SELECT SUM(CASE WHEN city1_code = 'BAL' THEN distance ELSE 0 END) FROM direct_distance"
      ]
    ]
  },
  {
    "id": 825,
    "db_id": "address_1",
    "nlq": "What is the average distance between Boston and all other cities.",
    "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
    "infer_predictions": [
      [
        "SELECT AVG(distance) FROM direct_distance JOIN city ON city.city_code = direct_distance.city1_code WHERE city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance, city WHERE city.city_code = direct_distance.city1_code AND city.city_name = 'Boston'",
        "SELECT AVG(D.distance) FROM city C, direct_distance D WHERE C.city_code = D.city1_code AND C.city_name = 'Boston'",
        "SELECT AVG(D.distance) FROM direct_distance D INNER JOIN city C ON C.city_code = D.city1_code WHERE C.city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance INNER JOIN city ON city.city_code = direct_distance.city1_code WHERE city.city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance D, city C WHERE D.city1_code = C.city_code AND C.city_name = 'Boston'",
        "SELECT AVG(d.distance) FROM direct_distance d JOIN city c ON c.city_code = d.city1_code WHERE c.city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance INNER JOIN city ON city.city_code = direct_distance.city1_code AND city.city_name = 'Boston'",
        "SELECT AVG(D.distance) AS avg_distance FROM direct_distance D JOIN city AS C ON C.city_code = D.city1_code WHERE C.city_name = 'Boston'"
      ]
    ]
  },
  {
    "id": 826,
    "db_id": "address_1",
    "nlq": "Give the average distance between Boston and other cities.",
    "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
    "infer_predictions": [
      [
        "SELECT AVG(distance) FROM direct_distance JOIN city ON city.city_code = direct_distance.city2_code WHERE city.city_name = 'Boston'",
        "SELECT AVG(Distance) AS AverageDistance FROM direct_distance JOIN city ON direct_distance.city2_code = city.city_code WHERE city.city_name = 'Boston'",
        "SELECT AVG(dd.distance) FROM direct_distance dd INNER JOIN city cd ON dd.city2_code = cd.city_code WHERE cd.city_name = 'Boston'",
        "SELECT AVG(dist.distance) FROM direct_distance AS dist INNER JOIN city AS ct ON dist.city2_code = ct.city_code WHERE ct.city_name = 'Boston'",
        "SELECT AVG(d_dist.distance) FROM direct_distance d_dist JOIN city cty ON d_dist.city2_code = cty.city_code WHERE cty.city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance d JOIN city c ON d.city2_code = c.city_code WHERE c.city_name = 'Boston'",
        "SELECT AVG(distance) FROM direct_distance, city WHERE direct_distance.city2_code = city.city_code AND city.city_name = 'Boston'",
        "SELECT AVG(d.distance) FROM direct_distance AS d INNER JOIN city AS cty ON d.city2_code = cty.city_code AND cty.city_name = 'Boston'",
        "SELECT AVG(d.distance) FROM direct_distance d, city c WHERE d.city2_code = c.city_code AND c.city_name = 'Boston'"
      ]
    ]
  },
  {
    "id": 827,
    "db_id": "address_1",
    "nlq": "What is the name of the city closest to Chicago?",
    "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)",
        "SELECT c.city_name FROM city c JOIN direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY d.distance ASC LIMIT 1",
        "SELECT c.city_name FROM city AS c, direct_distance AS d WHERE c.city_code = d.city2_code AND d.city1_code IN (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY d.distance ASC LIMIT 1",
        "SELECT (SELECT city_name FROM city WHERE city_code = MIN_T.city2_code) AS Nearest_City FROM (SELECT city2_code, MIN(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago')) AS MIN_T",
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE distance = (SELECT MIN(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago')) AND city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago'))",
        "SELECT c.city_name FROM city c INNER JOIN (SELECT city2_code, MIN(distance) AS min_distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') GROUP BY city2_code) d ON c.city_code = d.city2_code",
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance dd INNER JOIN city ci ON dd.city1_code = ci.city_code WHERE ci.city_name = 'Chicago' ORDER BY dd.distance LIMIT 1)",
        "SELECT city_name FROM (SELECT city_name, d.distance FROM city JOIN direct_distance d ON city.city_code = d.city2_code WHERE d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY d.distance LIMIT 1) MERGED_TABLE"
      ]
    ]
  },
  {
    "id": 828,
    "db_id": "address_1",
    "nlq": "Give the name of the nearest city to Chicago.",
    "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.city_name FROM city c JOIN direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY d.distance ASC LIMIT 1",
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY distance LIMIT 1)",
        "SELECT c1.city_name FROM city c1, direct_distance d WHERE c1.city_code = d.city2_code AND d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY d.distance LIMIT 1",
        "SELECT city_name FROM city WHERE city_code IN (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY distance ASC LIMIT 1)",
        "SELECT C.city_name FROM city AS C INNER JOIN direct_distance AS D ON C.city_code = D.city2_code AND D.city1_code = (SELECT city_code FROM city WHERE city_name = 'Chicago') ORDER BY D.distance ASC LIMIT 1",
        "SELECT z.city_name FROM (SELECT c.city_name FROM city c JOIN direct_distance d ON c.city_code = d.city2_code JOIN city cf ON cf.city_code = d.city1_code WHERE cf.city_name = 'Chicago' ORDER BY d.distance LIMIT 1) z",
        "SELECT c.city_name FROM city c, direct_distance dd WHERE c.city_code = dd.city2_code AND dd.city1_code = (SELECT ct.city_code FROM city ct WHERE ct.city_name = 'Chicago') ORDER BY dd.distance LIMIT 1",
        "SELECT city_name FROM city WHERE city_code = (SELECT d.city2_code FROM direct_distance d JOIN city ci ON ci.city_code = d.city1_code WHERE ci.city_name = 'Chicago' ORDER BY d.distance LIMIT 1)"
      ]
    ]
  },
  {
    "id": 829,
    "db_id": "address_1",
    "nlq": "What is the name of the city furthest to Boston?",
    "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.city_name FROM city c JOIN direct_distance d ON d.city2_code = c.city_code WHERE d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1",
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
        "SELECT c.city_name FROM city AS c, direct_distance AS d WHERE c.city_code = d.city2_code AND d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1",
        "SELECT city_name FROM city WHERE city_code IN (SELECT city2_code FROM direct_distance WHERE city1_code IN (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1)",
        "SELECT c.city_name FROM city c WHERE EXISTS (SELECT 1 FROM direct_distance d WHERE d.city2_code = c.city_code AND d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1)",
        "SELECT c.city_name FROM city AS c JOIN (SELECT city2_code, MAX(distance) md FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') GROUP BY city2_code ORDER BY md DESC LIMIT 1) AS d ON c.city_code = d.city2_code",
        "SELECT c.city_name FROM city AS c JOIN direct_distance AS d ON c.city_code = d.city2_code AND d.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston'))"
      ]
    ]
  },
  {
    "id": 830,
    "db_id": "address_1",
    "nlq": "Give the city name of the city with greatest distance from Boston.",
    "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance JOIN city ON city.city_code = direct_distance.city1_code WHERE city_name = 'Boston' ORDER BY distance DESC LIMIT 1)",
        "SELECT c.city_name FROM city c INNER JOIN direct_distance d ON c.city_code = d.city2_code WHERE d.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1",
        "SELECT city.city_name FROM city JOIN direct_distance ON city.city_code = direct_distance.city2_code WHERE direct_distance.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY direct_distance.distance DESC LIMIT 1",
        "SELECT c.city_name FROM city c, direct_distance dd WHERE c.city_code = dd.city2_code AND dd.city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY dd.distance DESC LIMIT 1",
        "WITH BostonCode AS (SELECT city_code FROM city WHERE city_name = 'Boston') SELECT city_name FROM city WHERE city_code = (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM BostonCode) ORDER BY distance DESC LIMIT 1)",
        "SELECT c.city_name FROM city c WHERE c.city_code IN (SELECT d.city2_code FROM direct_distance d WHERE d.city1_code = (SELECT city_code FROM city where city_name = 'Boston') ORDER BY d.distance DESC LIMIT 1)",
        "SELECT city_name FROM city ci INNER JOIN (SELECT city2_code FROM direct_distance WHERE city1_code = (SELECT city_code FROM city WHERE city_name = 'Boston') ORDER BY distance DESC LIMIT 1) dt ON ci.city_code = dt.city2_code"
      ]
    ]
  },
  {
    "id": 831,
    "db_id": "address_1",
    "nlq": "Show all city codes and the total distance to all other cities.",
    "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
    "infer_predictions": [
      [
        "SELECT city1_code, SUM(distance) AS total_distance FROM direct_distance GROUP BY city1_code",
        "SELECT d.city1_code, SUM(d.distance) AS total_distance FROM direct_distance AS d GROUP BY d.city1_code",
        "SELECT city1_code, TOTAL(distance) FROM direct_distance GROUP BY city1_code",
        "SELECT dd.city1_code, SUM(dd.distance) FROM direct_distance dd GROUP BY dd.city1_code",
        "SELECT city1_code, SUM(distance) FROM direct_distance GROUP BY city1_code",
        "SELECT DISTINCT d.city1_code, (SELECT SUM(distance) FROM direct_distance WHERE city1_code = d.city1_code) AS total_distance FROM direct_distance d",
        "SELECT d.city1_code, SUM(d.distance) FROM direct_distance d GROUP BY d.city1_code",
        "SELECT city1_code, SUM(distance) AS TotalDistance FROM direct_distance GROUP BY city1_code",
        "SELECT DISTINCT city1_code, SUM(distance) OVER (PARTITION BY city1_code) AS total_distance FROM direct_distance"
      ]
    ]
  },
  {
    "id": 832,
    "db_id": "address_1",
    "nlq": "For each city, what is the the city code and sum of distances from each?",
    "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
    "infer_predictions": [
      [
        "SELECT dd.city1_code, SUM(dd.distance) FROM direct_distance dd GROUP BY dd.city1_code",
        "SELECT city1_code, SUM(distance) AS total_distance FROM direct_distance GROUP BY city1_code",
        "SELECT d.city1_code, SUM(d.distance) FROM direct_distance d GROUP BY d.city1_code",
        "SELECT tbl.city1_code, SUM(tbl.distance) FROM direct_distance AS tbl GROUP BY tbl.city1_code",
        "SELECT city.city_code, SUM(dd.distance) FROM city JOIN direct_distance dd ON city.city_code = dd.city1_code GROUP BY city.city_code",
        "SELECT c.city_code, SUM(d.distance) FROM city c INNER JOIN direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_code",
        "SELECT city.city_code, SUM(direct_distance.distance) FROM city INNER JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_code"
      ]
    ]
  },
  {
    "id": 833,
    "db_id": "address_1",
    "nlq": "Show all city names and the average distance to all other cities.",
    "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
    "infer_predictions": [
      [
        "SELECT c.city_name, AVG(d.distance) FROM city c JOIN direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name",
        "SELECT city_name, AVG(distance) AS average_distance FROM city INNER JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name",
        "SELECT c1.city_name, AVG(dd.distance) FROM city c1, direct_distance dd WHERE c1.city_code = dd.city1_code GROUP BY c1.city_name",
        "SELECT city_name, AVG(distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name",
        "SELECT c.city_name, AVG(d.distance) FROM city c INNER JOIN direct_distance d ON d.city1_code = c.city_code GROUP BY c.city_name",
        "SELECT city_name, AVG(distance) FROM (SELECT city_name, distance FROM city JOIN direct_distance on city.city_code = direct_distance.city1_code) GROUP BY city_name",
        "SELECT city.city_name, AVG(direct_distance.distance) FROM city LEFT JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_name"
      ]
    ]
  },
  {
    "id": 834,
    "db_id": "address_1",
    "nlq": "What are the city name and average distances from each city?",
    "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
    "infer_predictions": [
      [
        "SELECT city_name, AVG(distance) AS avg_distance FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name",
        "SELECT c.city_name, AVG(d.distance) AS avg_distance FROM city c INNER JOIN direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name",
        "SELECT city_name, AVG(distance) FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city_name",
        "SELECT c.city_name, AVG(d.distance) FROM city c INNER JOIN direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name",
        "SELECT c.city_name, AVG(d.distance) AS avg_distance FROM city AS c JOIN direct_distance AS d ON c.city_code = d.city1_code GROUP BY c.city_name",
        "SELECT city_name, AVG(d.distance) AS average_distance FROM city LEFT JOIN direct_distance AS d ON city.city_code = d.city1_code GROUP BY city_name",
        "SELECT c.city_name, AVG(dd.distance) AS average_distance FROM city c, direct_distance dd WHERE c.city_code = dd.city1_code GROUP BY c.city_name",
        "SELECT c.city_name, AVG(d.distance) AS average_distance FROM city c LEFT JOIN direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name",
        "SELECT city.city_name, AVG(direct_distance.distance) AS avg_distance FROM city JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_name",
        "SELECT city_name, (SELECT AVG(distance) FROM direct_distance WHERE city_code = city1_code) AS average_distance FROM city"
      ]
    ]
  },
  {
    "id": 835,
    "db_id": "address_1",
    "nlq": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
    "infer_predictions": [
      [
        "SELECT dd.distance FROM direct_distance dd JOIN city c1 ON dd.city1_code = c1.city_code JOIN city c2 ON dd.city2_code = c2.city_code JOIN student s1 ON c1.city_code = s1.city_code JOIN student s2 ON c2.city_code = s2.city_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT distance FROM direct_distance WHERE city1_code IN (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') AND city2_code IN (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim')",
        "SELECT dd.distance FROM student s1, student s2, direct_distance dd WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim' AND dd.city1_code = s1.city_code AND dd.city2_code = s2.city_code",
        "SELECT dd.distance FROM student s1 CROSS JOIN student s2 JOIN direct_distance dd ON dd.city1_code = s1.city_code AND dd.city2_code = s2.city_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT MAX(dd.distance) AS DistBetInMiles FROM student s1, student s2, direct_distance dd WHERE dd.city1_code = s1.city_code AND dd.city2_code = s2.city_code AND s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT DISTINCT dd.distance FROM direct_distance AS dd INNER JOIN student AS s1 ON dd.city1_code = s1.city_code INNER JOIN student AS s2 ON dd.city2_code = s2.city_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT DISTINCT(distance) FROM direct_distance dd WHERE EXISTS (SELECT 1 FROM student s WHERE s.fname = 'Linda' AND s.lname = 'Smith' AND s.city_code = dd.city1_code) AND EXISTS (SELECT 1 FROM student s WHERE s.fname = 'Tracy' AND s.lname = 'Kim' AND s.city_code = dd.city2_code)",
        "SELECT dd.distance FROM direct_distance dd, student s1, student s2 WHERE s1.city_code = dd.city1_code AND s2.city_code = dd.city2_code AND s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT dd.distance FROM student as lsk JOIN student as tk JOIN direct_distance dd ON lsk.city_code = dd.city1_code AND tk.city_code = dd.city2_code WHERE lsk.fname = 'Linda' AND lsk.lname = 'Smith' AND tk.fname = 'Tracy' AND tk.lname = 'Kim'",
        "SELECT dd.distance FROM direct_distance dd WHERE dd.city1_code = (SELECT s.city_code FROM student s WHERE s.fname = 'Linda' AND s.lname = 'Smith') AND dd.city2_code = (SELECT s.city_code FROM student s WHERE s.fname = 'Tracy' AND s.lname = 'Kim')"
      ]
    ]
  },
  {
    "id": 836,
    "db_id": "address_1",
    "nlq": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
    "infer_predictions": [
      [
        "SELECT dd.distance FROM direct_distance dd JOIN city c1 ON dd.city1_code = c1.city_code JOIN city c2 ON dd.city2_code = c2.city_code JOIN student s1 ON c1.city_code = s1.city_code JOIN student s2 ON c2.city_code = s2.city_code WHERE s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT dd.distance FROM direct_distance dd, city c1, city c2, student s1, student s2 WHERE dd.city1_code = c1.city_code AND dd.city2_code = c2.city_code AND c1.city_code = s1.city_code AND c2.city_code = s2.city_code AND s1.fname = 'Linda' AND s1.lname = 'Smith' AND s2.fname = 'Tracy' AND s2.lname = 'Kim'",
        "SELECT distance FROM direct_distance WHERE city1_code IN (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') AND city2_code IN (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim')",
        "SELECT d.distance FROM student as ls JOIN city as lcity ON ls.city_code = lcity.city_code JOIN student as tk JOIN city as tcity ON tk.city_code = tcity.city_code JOIN direct_distance as d ON lcity.city_code = d.city1_code AND tcity.city_code = d.city2_code WHERE ls.fname = 'Linda' AND ls.lname = 'Smith' AND tk.fname = 'Tracy' AND tk.lname = 'Kim'",
        "WITH LindaCity AS (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'), TracyCity AS (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim') SELECT distance FROM direct_distance, LindaCity, TracyCity WHERE city1_code = LindaCity.city_code AND city2_code = TracyCity.city_code",
        "SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') AND city2_code = (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim')",
        "SELECT DD.DISTANCE FROM direct_distance DD INNER JOIN (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim') TC ON DD.CITY2_CODE = TC.city_code INNER JOIN (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') LC ON DD.CITY1_CODE = LC.city_code",
        "SELECT (SELECT distance FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') AND city2_code = (SELECT city_code FROM student WHERE fname = 'Tracy' AND lname = 'Kim'))",
        "WITH T AS (SELECT c1_dist.city_code AS c1_code, c2_dist.city_code AS c2_code FROM student s_left JOIN city c1_dist ON s_left.city_code = c1_dist.city_code, student s_right JOIN city c2_dist ON s_right.city_code = c2_dist.city_code WHERE s_left.fname = 'Linda' AND s_left.lname = 'Smith' AND s_right.fname = 'Tracy' AND s_right.lname = 'Kim') SELECT distance FROM direct_distance, T WHERE city1_code = T.c1_code AND city2_code = T.c2_code"
      ]
    ]
  },
  {
    "id": 837,
    "db_id": "address_1",
    "nlq": "What is the first name and last name of the student living furthest to Linda Smith?",
    "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT s.fname, s.lname FROM student s JOIN city c ON s.city_code = c.city_code JOIN direct_distance d ON c.city_code = d.city2_code WHERE d.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))",
        "SELECT s.fname, s.lname FROM student s WHERE s.city_code = (SELECT city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance d INNER JOIN student st ON d.city1_code = st.city_code WHERE st.fname = 'Linda' AND st.lname = 'Smith'))",
        "SELECT s.fname, s.lname FROM student s, city c WHERE s.city_code = c.city_code AND s.city_code = (SELECT d.city2_code FROM direct_distance d WHERE d.distance = (SELECT MAX(dd.distance) FROM direct_distance dd JOIN student st ON dd.city1_code = st.city_code WHERE st.fname = 'Linda' AND st.lname = 'Smith'))",
        "SELECT s.fname, s.lname FROM student s JOIN (SELECT city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))) AS max_dist ON s.city_code = max_dist.city2_code",
        "SELECT st.fname, st.lname FROM student st WHERE st.city_code = (SELECT d.city2_code FROM direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code IN (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith')))",
        "SELECT fname, lname FROM student WHERE city_code IN (SELECT city2_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance JOIN student ON city1_code = student.city_code WHERE fname = 'Linda' AND lname = 'Smith'))",
        "SELECT fn.fname, fn.lname FROM student fn, direct_distance dd, (SELECT st.city_code FROM student st WHERE st.fname = 'Linda' AND st.lname = 'Smith') linda WHERE fn.city_code = dd.city2_code AND dd.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = linda.city_code)",
        "SELECT s.fname, s.lname FROM student s WHERE s.city_code = (SELECT ss.city2_code FROM direct_distance ss WHERE ss.distance = (SELECT MAX(dist.distance) FROM direct_distance dist INNER JOIN student stu ON dist.city1_code = stu.city_code WHERE stu.fname = 'Linda' AND stu.lname = 'Smith'))",
        "SELECT s.fname, s.lname FROM student s WHERE s.city_code IN (SELECT city2_code FROM direct_distance d WHERE distance = (SELECT MAX(distance) FROM direct_distance d2 WHERE d2.city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith')))"
      ]
    ]
  },
  {
    "id": 838,
    "db_id": "address_1",
    "nlq": "What is the full name of the student who lives furthest from Linda Smith?",
    "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT S.fname || ' ' || S.lname FROM student S JOIN city C1 ON S.city_code = C1.city_code JOIN direct_distance D ON C1.city_code = D.city1_code JOIN city C2 ON D.city2_code = C2.city_code JOIN student S2 ON C2.city_code = S2.city_code WHERE S2.fname = 'Linda' AND S2.lname = 'Smith' ORDER BY D.distance DESC LIMIT 1",
        "SELECT S.fname || ' ' || S.lname AS fullname FROM student S JOIN city C ON S.city_code = C.city_code WHERE S.city_code IN (SELECT D.city1_code FROM direct_distance D WHERE D.distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))) LIMIT 1",
        "SELECT fname || ' ' || lname AS fullname FROM student WHERE city_code = (SELECT city1_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance JOIN city ON city_code = city2_code WHERE city_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))) LIMIT 1",
        "SELECT firstname || ' ' || lastname FROM (SELECT fname AS firstname, lname AS lastname, city_code FROM student) JOIN (SELECT city1_code, MAX(distance) AS max_distance FROM direct_distance WHERE city2_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith') GROUP BY city1_code) AS D ON city_code = D.city1_code LIMIT 1",
        "SELECT fname || ' ' || lname FROM student WHERE city_code = (SELECT D.city1_code FROM direct_distance D WHERE D.distance = (SELECT MAX(D.distance) FROM direct_distance D INNER JOIN city C ON D.city2_code = C.city_code WHERE C.city_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))) LIMIT 1",
        "SELECT firstname || ' ' || lastname FROM (SELECT fname as firstname, lname as lastname FROM student WHERE city_code = (SELECT city1_code FROM direct_distance WHERE distance = (SELECT MAX(distance) FROM direct_distance WHERE city1_code = (SELECT city_code FROM student WHERE fname = 'Linda' AND lname = 'Smith'))) LIMIT 1) AS farthest_student"
      ]
    ]
  },
  {
    "id": 839,
    "db_id": "address_1",
    "nlq": "Which state does the student whose first name is Linda live in?",
    "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
    "infer_predictions": [
      [
        "SELECT state FROM city JOIN student ON city.city_code = student.city_code WHERE student.fname = 'Linda'",
        "SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')",
        "SELECT city.state FROM city INNER JOIN student ON city.city_code = student.city_code WHERE student.fname = 'Linda'",
        "SELECT c.state FROM city c INNER JOIN student s ON c.city_code = s.city_code WHERE s.fname = 'Linda'",
        "SELECT state FROM city, student WHERE city.city_code = student.city_code AND student.fname = 'Linda'",
        "SELECT (SELECT state FROM city WHERE city_code = student.city_code) FROM student WHERE fname = 'Linda'",
        "SELECT state FROM city JOIN (SELECT city_code FROM student WHERE fname = 'Linda') AS res ON city.city_code = res.city_code",
        "SELECT DISTINCT state FROM city INNER JOIN student ON city.city_code = student.city_code WHERE student.fname = 'Linda'"
      ]
    ]
  },
  {
    "id": 840,
    "db_id": "address_1",
    "nlq": "Give the state that the student with first name Linda lives in.",
    "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
    "infer_predictions": [
      [
        "SELECT state FROM city WHERE city_code = (SELECT city_code FROM student WHERE fname = 'Linda')",
        "SELECT c.state FROM city AS c INNER JOIN student AS s ON s.city_code = c.city_code WHERE s.fname = 'Linda'",
        "SELECT city.state FROM city JOIN student ON city.city_code = student.city_code WHERE student.fname = 'Linda'",
        "SELECT state FROM city, student WHERE city.city_code = student.city_code AND student.fname = 'Linda'",
        "SELECT state FROM city WHERE city_code IN (SELECT city_code FROM student WHERE fname = 'Linda')",
        "SELECT (SELECT state FROM city WHERE city_code = student.city_code) AS state FROM student WHERE fname = 'Linda'",
        "SELECT c.state FROM city c, student s WHERE c.city_code = s.city_code AND s.fname = 'Linda'",
        "SELECT c.state FROM city c JOIN student s ON c.city_code = s.city_code WHERE s.fname = 'Linda'",
        "WITH StudentCity AS (SELECT city_code FROM student WHERE fname = 'Linda') SELECT state FROM city WHERE city_code IN (SELECT city_code FROM StudentCity)",
        "SELECT c.state FROM city c INNER JOIN (SELECT city_code FROM student WHERE fname = 'Linda') s ON c.city_code = s.city_code"
      ]
    ]
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "nlq": "Return all details of sailors who are older than 30.",
    "gold": "SELECT * FROM Sailors WHERE age  >  30",
    "infer_predictions": [
      [
        "SELECT * FROM sailors WHERE age > 30",
        "SELECT sid, name, age, rating FROM sailors WHERE age > 30",
        "SELECT S.* FROM sailors S WHERE S.age > 30",
        "SELECT sailors.* FROM sailors WHERE sailors.age > 30",
        "SELECT s.sid, s.name, s.age, s.rating FROM sailors s WHERE s.age > 30",
        "SELECT sid, name, age, rating FROM sailors s WHERE s.age > 30"
      ]
    ]
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "nlq": "What can you tell me about sailors who are older than age 30?",
    "gold": "SELECT * FROM Sailors WHERE age  >  30",
    "infer_predictions": [
      [
        "SELECT * FROM sailors WHERE age > 30;",
        "SELECT sid, name, rating FROM sailors WHERE age > 30;",
        "SELECT name FROM sailors WHERE age > 30;",
        "SELECT s.* FROM sailors AS s WHERE s.age > 30;",
        "SELECT sid AS Sailor_ID, name AS Sailor_Name FROM sailors WHERE age > 30;",
        "SELECT name, rating FROM sailors WHERE age > 30 ORDER BY rating DESC;",
        "SELECT name, age FROM sailors WHERE age > 30 ORDER BY age;",
        "SELECT s.name, s.rating FROM sailors s WHERE s.age > 30;"
      ]
    ]
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "nlq": "Return name and age for sailors who are younger than 30.",
    "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
    "infer_predictions": [
      [
        "SELECT s.name, s.age FROM sailors s WHERE s.age < 30",
        "SELECT name, age FROM sailors WHERE age < 30",
        "SELECT DISTINCT s.name, s.age FROM sailors s WHERE s.age < 30",
        "SELECT name, age FROM sailors WHERE age IN (SELECT age FROM sailors WHERE age < 30)",
        "SELECT s.name, s.age FROM sailors s WHERE s.age < 30 ORDER BY s.age",
        "SELECT name, age FROM sailors WHERE age < (SELECT 30)",
        "SELECT sailors.name, sailors.age FROM sailors WHERE sailors.age < (SELECT MIN(30))",
        "SELECT name, age FROM sailors WHERE 30 > age ORDER BY age ASC"
      ]
    ]
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "nlq": "What is the name and age of every sailor who is younger than age 30?",
    "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
    "infer_predictions": [
      [
        "SELECT name, age FROM sailors WHERE age < 30",
        "SELECT name, age FROM sailors WHERE age IS NOT NULL AND age < 30",
        "SELECT name, age FROM sailors WHERE age IN (SELECT age FROM sailors WHERE age < 30)",
        "SELECT s.name, s.age FROM sailors s WHERE s.age < 30",
        "SELECT sailors.name, sailors.age FROM sailors WHERE sailors.age < 30 AND sailors.name IS NOT NULL",
        "SELECT s.name, s.age FROM sailors s INNER JOIN (SELECT sid FROM sailors WHERE age < 30) as sub ON s.sid = sub.sid",
        "SELECT name, age FROM sailors WHERE age BETWEEN 1 AND 29"
      ]
    ]
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "nlq": "Find boats reserved by Sailor with id 1.",
    "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
    "infer_predictions": [
      [
        "SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid = 1;",
        "SELECT b.name FROM boats b INNER JOIN reserves r ON b.bid = r.bid WHERE r.sid = 1;",
        "SELECT name FROM boats WHERE bid IN (SELECT bid FROM reserves WHERE sid = 1);",
        "SELECT boats.name FROM reserves, boats WHERE boats.bid = reserves.bid AND reserves.sid = 1;",
        "SELECT name FROM boats WHERE EXISTS (SELECT 1 FROM reserves WHERE reserves.bid = boats.bid AND reserves.sid = 1);",
        "SELECT DISTINCT boats.name FROM boats, reserves WHERE boats.bid = reserves.bid AND reserves.sid = 1;",
        "SELECT boats.name FROM boats INNER JOIN (SELECT bid FROM reserves WHERE sid = 1) AS reserved ON boats.bid = reserved.bid;",
        "SELECT name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r WHERE r.sid = 1);",
        "SELECT b.name FROM boats b, reserves r WHERE b.bid = r.bid AND r.sid = 1;"
      ]
    ]
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "nlq": "What are the different boat ids reserved by the sailor whose id is 1?",
    "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.bid FROM reserves r WHERE r.sid = 1",
        "SELECT r.bid FROM reserves r WHERE r.sid = 1 GROUP BY r.bid",
        "SELECT DISTINCT bid FROM reserves WHERE sid = 1",
        "SELECT bid FROM (SELECT DISTINCT bid FROM reserves WHERE sid = 1) AS unique_boats",
        "SELECT bid FROM reserves WHERE sid = 1 AND bid IN (SELECT DISTINCT bid FROM reserves)",
        "SELECT DISTINCT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.sid = 1",
        "SELECT DISTINCT b.bid FROM boats b JOIN reserves r ON b.bid = r.bid WHERE r.sid = 1",
        "SELECT r.bid FROM reserves r WHERE r.sid = 1 UNION SELECT r.bid FROM reserves r WHERE r.sid = 1",
        "SELECT r.bid FROM reserves r GROUP BY r.bid HAVING r.sid = 1",
        "SELECT DISTINCT bids.bid FROM (SELECT bid AS bid FROM reserves WHERE sid = 1) AS bids"
      ]
    ]
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "nlq": "Who reserved boat 102?",
    "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
    "infer_predictions": [
      [
        "SELECT s.name FROM sailors AS s JOIN reserves AS r ON s.sid = r.sid WHERE r.bid = 102",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)",
        "SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 102",
        "SELECT DISTINCT sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND reserves.bid = 102",
        "SELECT a.name FROM sailors AS a JOIN reserves AS b ON a.sid = b.sid AND b.bid = 102",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102 AND reserves.sid = sailors.sid)",
        "SELECT s.name FROM sailors s, reserves r WHERE s.sid = r.sid AND r.bid = 102",
        "SELECT name FROM sailors WHERE EXISTS (SELECT 1 FROM reserves WHERE sid = sailors.sid AND bid = 102)",
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid AND r.bid = 102"
      ]
    ]
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "nlq": "What is the name of the sailor who reserved boat 102?",
    "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
    "infer_predictions": [
      [
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE r.bid = 102",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 102)",
        "SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 102",
        "SELECT s.name FROM sailors s, reserves r WHERE s.sid = r.sid AND r.bid = 102",
        "SELECT name FROM sailors WHERE sid = (SELECT sid FROM reserves WHERE bid = 102 LIMIT 1)",
        "SELECT s.name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid AND r.bid = 102)",
        "SELECT DISTINCT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE r.bid = 102",
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid AND r.bid = 102",
        "SELECT sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND reserves.bid = 102"
      ]
    ]
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "nlq": "Return the unique boat ids (bid) of all reserved boats.",
    "gold": "SELECT DISTINCT bid FROM Reserves",
    "infer_predictions": [
      [
        "SELECT DISTINCT bid FROM reserves",
        "SELECT bid FROM reserves GROUP BY bid",
        "SELECT r.bid FROM reserves r GROUP BY r.bid",
        "SELECT r.bid FROM reserves r WHERE r.bid IS NOT NULL GROUP BY r.bid",
        "SELECT DISTINCT r.bid FROM reserves r",
        "SELECT bid FROM (SELECT DISTINCT bid FROM reserves)",
        "SELECT b.bid FROM reserves r INNER JOIN boats b ON r.bid = b.bid GROUP BY b.bid",
        "SELECT DISTINCT r.bid FROM reserves r INNER JOIN boats b ON r.bid = b.bid",
        "SELECT r.bid FROM reserves r WHERE EXISTS (SELECT 1 FROM boats b WHERE b.bid = r.bid)",
        "SELECT DISTINCT r.bid FROM reserves r WHERE r.bid IN (SELECT b.bid FROM boats b)"
      ]
    ]
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "nlq": "What are the ids of all boats that are reserved by someone?",
    "gold": "SELECT DISTINCT bid FROM Reserves",
    "infer_predictions": [
      [
        "SELECT DISTINCT bid FROM reserves",
        "SELECT reserves.bid FROM reserves GROUP BY reserves.bid",
        "SELECT bid FROM reserves WHERE bid IS NOT NULL",
        "SELECT r.bid FROM reserves r",
        "SELECT DISTINCT r.bid FROM reserves r WHERE r.bid IN (SELECT b.bid FROM boats b)",
        "SELECT bid FROM (SELECT DISTINCT bid FROM reserves)",
        "SELECT r.bid FROM reserves r WHERE EXISTS (SELECT 1 FROM boats b WHERE b.bid = r.bid)",
        "SELECT DISTINCT r.bid FROM reserves r INNER JOIN boats b ON r.bid = b.bid",
        "SELECT r.bid FROM reserves r GROUP BY r.bid HAVING COUNT(*) > 0",
        "SELECT DISTINCT r.bid FROM reserves r, boats b WHERE r.bid = b.bid"
      ]
    ]
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "nlq": "What is the name of sailors whose names contain letter e?",
    "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
    "infer_predictions": [
      [
        "SELECT name FROM sailors WHERE name LIKE '%e%'",
        "SELECT s.name FROM sailors s WHERE s.name LIKE '%e%'",
        "SELECT name FROM sailors WHERE INSTR(name, 'e') > 0",
        "SELECT DISTINCT s.name FROM sailors s WHERE s.name LIKE '%e%'",
        "SELECT s.name FROM sailors s WHERE INSTR(s.name, 'e') > 0",
        "SELECT name FROM sailors WHERE name GLOB '*e*'",
        "SELECT DISTINCT name FROM sailors WHERE name GLOB '*e*'",
        "SELECT name FROM sailors s WHERE s.name COLLATE UTF8MB4_BIN LIKE '%e%'",
        "SELECT DISTINCT s.name FROM sailors s WHERE s.name COLLATE UTF8MB4_BIN LIKE '%e%'"
      ]
    ]
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "nlq": "What is the name of every sailor whose name contains the letter e?",
    "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
    "infer_predictions": [
      [
        "SELECT name FROM sailors WHERE name LIKE '%e%'",
        "SELECT name FROM sailors WHERE instr(name, 'e') > 0",
        "SELECT sailors.name FROM sailors WHERE instr(sailors.name, 'e') > 0",
        "SELECT sailors.name FROM sailors WHERE EXISTS (SELECT 1 FROM sailors s WHERE s.name LIKE '%e%' AND sailors.sid = s.sid)",
        "SELECT DISTINCT name FROM sailors WHERE UPPER(name) LIKE '%E%'"
      ]
    ]
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "nlq": "return the unique ids of sailors who are older than any sailors.",
    "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.sid FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 WHERE S2.age > S.age)",
        "SELECT S.sid FROM sailors S LEFT JOIN sailors S2 ON S2.age > S.age WHERE S2.sid IS NULL",
        "SELECT S.sid FROM sailors S WHERE S.age > (SELECT MAX(S2.age) FROM sailors S2 WHERE S2.sid != S.sid)",
        "SELECT S.sid FROM sailors S WHERE NOT EXISTS (SELECT * FROM sailors S2 WHERE S2.age > S.age)",
        "SELECT sid FROM sailors AS S WHERE age = (SELECT MAX(age) FROM sailors)"
      ]
    ]
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "nlq": "What is the different id of every sailor who is not the youngest?",
    "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid FROM sailors s WHERE s.age > (SELECT MIN(age) FROM sailors)",
        "SELECT DISTINCT s.sid FROM sailors AS s WHERE NOT s.age = (SELECT MIN(age) FROM sailors)",
        "SELECT s.sid FROM sailors s WHERE s.age > (SELECT MIN(s2.age) FROM sailors s2)",
        "SELECT sid FROM sailors WHERE age > (SELECT MIN(age) FROM sailors)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM sailors WHERE age = (SELECT MIN(age) FROM sailors))",
        "SELECT sid FROM sailors WHERE age != (SELECT MIN(age) FROM sailors GROUP BY age)",
        "SELECT DISTINCT sid FROM sailors s1 WHERE NOT EXISTS (SELECT NULL FROM sailors s2 WHERE s2.age < s1.age)"
      ]
    ]
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "nlq": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
    "infer_predictions": [
      [
        "SELECT DISTINCT s1.name FROM sailors AS s1 WHERE s1.age > (SELECT MAX(s2.age) FROM sailors AS s2 WHERE s2.rating > 7)",
        "SELECT DISTINCT s.name FROM sailors s WHERE s.age > (SELECT MAX(age) FROM sailors WHERE rating > 7)",
        "SELECT name FROM sailors WHERE age > (SELECT MAX(age) FROM sailors WHERE rating > 7) GROUP BY name",
        "SELECT DISTINCT a.name FROM sailors a WHERE a.age > (SELECT MAX(b.age) FROM sailors b WHERE b.rating > 7)",
        "SELECT name FROM sailors s1 WHERE EXISTS (SELECT 1 FROM sailors s2 WHERE s2.rating > 7 AND s1.age > s2.age)",
        "SELECT name FROM sailors WHERE age > (SELECT MAX(DISTINCT age) FROM sailors WHERE rating > 7)",
        "SELECT DISTINCT s.name FROM sailors s WHERE s.age > (SELECT age FROM sailors WHERE rating > 7 ORDER BY age DESC LIMIT 1)",
        "SELECT s1.name FROM sailors s1 WHERE s1.age > (SELECT MAX(s2.age) FROM sailors s2 WHERE s2.rating > 7) GROUP BY s1.name",
        "SELECT DISTINCT name FROM sailors s WHERE s.age > (SELECT MAX(s.age) FROM sailors s INNER JOIN (SELECT sid, age FROM sailors WHERE rating > 7) t ON s.sid != t.sid)"
      ]
    ]
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "nlq": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
    "infer_predictions": [
      [
        "SELECT DISTINCT s1.name FROM sailors s1 WHERE s1.age > (SELECT s2.age FROM sailors s2 WHERE s2.rating > 7)",
        "SELECT DISTINCT s1.name FROM sailors s1 WHERE EXISTS (SELECT 1 FROM sailors s2 WHERE s2.rating > 7 AND s1.age > s2.age)",
        "SELECT s1.name FROM sailors s1 WHERE s1.age > (SELECT MAX(s2.age) FROM sailors s2 WHERE s2.rating > 7)",
        "SELECT s1.name FROM sailors s1 JOIN sailors s2 ON s1.age > s2.age AND s2.rating > 7 GROUP BY s1.name",
        "SELECT name FROM sailors s1 WHERE age > (SELECT age FROM sailors s2 WHERE s2.rating > 7 ORDER BY age LIMIT 1)",
        "SELECT DISTINCT s1.name FROM sailors s1, sailors s2 WHERE s1.age > s2.age AND s2.rating > 7",
        "SELECT name FROM sailors WHERE age > (SELECT MIN(age) FROM sailors WHERE rating > 7)",
        "SELECT name FROM (SELECT DISTINCT name, age FROM sailors WHERE age > (SELECT age FROM sailors WHERE rating > 7))"
      ]
    ]
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "nlq": "Find the name and id of the sailors who reserved at least one boat?",
    "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT DISTINCT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid",
        "SELECT s.name, s.sid FROM sailors s INNER JOIN reserves r ON s.sid = r.sid GROUP BY s.sid, s.name",
        "SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves)",
        "SELECT sailors.name, sailors.sid FROM sailors, reserves WHERE sailors.sid = reserves.sid GROUP BY sailors.sid",
        "SELECT DISTINCT s.name, s.sid FROM sailors s, reserves r WHERE s.sid = r.sid",
        "SELECT s.name, s.sid FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT s.name, s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NOT NULL",
        "SELECT name, sid FROM sailors WHERE sid IN (SELECT DISTINCT sid FROM reserves)",
        "SELECT s.name, s.sid FROM sailors s INNER JOIN reserves r ON s.sid = r.sid WHERE r.sid IN (SELECT sid FROM reserves)",
        "SELECT DISTINCT s.name, s.sid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid"
      ]
    ]
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "nlq": "What is the name and id of every sailor who reserved one or more boats?",
    "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid",
        "SELECT sailors.sid, sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid",
        "SELECT s.sid, s.name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT s.sid, s.name FROM reserves r, sailors s WHERE r.sid = s.sid GROUP BY s.sid",
        "SELECT s.sid, s.name FROM reserves r, sailors s WHERE r.sid = s.sid AND s.name IS NOT NULL",
        "SELECT sailors.sid, sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND EXISTS (SELECT 1 FROM boats WHERE boats.bid = reserves.bid)",
        "SELECT DISTINCT sailors.sid, sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid",
        "SELECT s.sid, s.name FROM sailors s WHERE s.sid IN (SELECT DISTINCT sid FROM reserves)",
        "SELECT s.sid, s.name FROM sailors s INNER JOIN reserves r ON s.sid = r.sid"
      ]
    ]
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "nlq": "Find the id and name of the sailors who reserved more than one boat.",
    "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT S.sid, S.name FROM sailors S INNER JOIN reserves R ON S.sid = R.sid GROUP BY S.sid, S.name HAVING COUNT(DISTINCT R.bid) > 1",
        "SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1)",
        "SELECT sailors.sid, sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid, sailors.name HAVING COUNT(DISTINCT reserves.bid) > 1",
        "SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(bid) > 1 AND COUNT(DISTINCT bid) > 1)",
        "SELECT S.sid, S.name FROM sailors S WHERE EXISTS (SELECT 1 FROM reserves R WHERE S.sid = R.sid GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) > 1)",
        "SELECT DISTINCT S.sid, S.name FROM sailors S, reserves R WHERE S.sid = R.sid AND R.bid IN (SELECT bid FROM reserves GROUP BY sid, bid HAVING COUNT(*) > 1) GROUP BY S.sid HAVING COUNT(DISTINCT R.bid) > 1",
        "SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves R1 WHERE EXISTS (SELECT 1 FROM reserves R2 WHERE R1.sid = R2.sid AND R1.bid != R2.bid))",
        "SELECT S.sid, S.name FROM sailors S JOIN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(DISTINCT bid) > 1) AS RS ON S.sid = RS.sid",
        "SELECT S.sid, S.name FROM sailors S WHERE S.sid IN (SELECT R.sid FROM reserves R GROUP BY R.sid HAVING COUNT(DISTINCT R.bid) > 1)",
        "SELECT S.sid, S.name FROM sailors S INNER JOIN (SELECT sid FROM reserves R GROUP BY R.sid, R.bid HAVING COUNT(*) > 1) AS RSub ON S.sid = RSub.sid GROUP BY S.sid HAVING COUNT(*) > 1"
      ]
    ]
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "nlq": "What are the different names of sailors who reserved two or more boats ?",
    "gold": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves GROUP BY sid HAVING COUNT(DISTINCT bid) >= 2)",
        "SELECT s.name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid GROUP BY r.sid HAVING COUNT(DISTINCT r.bid) >= 2)",
        "SELECT unique_names.name FROM (SELECT sailors.name, COUNT(DISTINCT reserves.bid) AS boat_count FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid) AS unique_names WHERE unique_names.boat_count >= 2",
        "SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2",
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid GROUP BY s.sid HAVING COUNT(DISTINCT r.bid) >= 2",
        "SELECT DISTINCT s.name FROM sailors s, reserves r WHERE s.sid = r.sid GROUP BY s.sid HAVING COUNT(DISTINCT r.bid) >= 2",
        "SELECT name FROM (SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2) AS result",
        "SELECT DISTINCT sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid GROUP BY sailors.sid HAVING COUNT(DISTINCT reserves.bid) >= 2"
      ]
    ]
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "nlq": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
        "SELECT s.sid FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') AND r.sid = s.sid)",
        "SELECT s.sid FROM sailors s INNER JOIN reserves r ON s.sid = r.sid INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue'",
        "SELECT sid FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red' OR color = 'blue'))",
        "SELECT sid FROM reserves NATURAL JOIN boats WHERE color IN ('red', 'blue') GROUP BY sid",
        "SELECT DISTINCT sailors.sid FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND (boats.color = 'red' OR boats.color = 'blue')",
        "SELECT sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'blue' UNION SELECT sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red'",
        "SELECT sailors.sid FROM sailors WHERE EXISTS (SELECT * FROM reserves, boats WHERE reserves.sid = sailors.sid AND reserves.bid = boats.bid AND boats.color IN ('red', 'blue'))",
        "SELECT DISTINCT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'blue' OR b.color = 'red'",
        "SELECT s.sid FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue')"
      ]
    ]
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "nlq": "What are the sids for sailors who reserved red or blue boats?",
    "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
        "SELECT DISTINCT s.sid FROM sailors s WHERE s.sid IN (SELECT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'))",
        "SELECT reserv.sid FROM reserves reserv INNER JOIN boats boat ON reserv.bid = boat.bid WHERE boat.color = 'blue' OR boat.color = 'red' GROUP BY reserv.sid",
        "SELECT DISTINCT sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' OR boats.color = 'blue'",
        "SELECT reserv.sid FROM reserves reserv, boats boat WHERE reserv.bid = boat.bid AND (boat.color = 'red' OR boat.color = 'blue') GROUP BY reserv.sid",
        "SELECT sid FROM (SELECT DISTINCT sid FROM reserves AS r JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'red' UNION SELECT DISTINCT sid FROM reserves AS r JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'blue')",
        "SELECT DISTINCT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red' OR color = 'blue')",
        "SELECT sid FROM reserves r JOIN boats b ON r.bid = b.bid AND b.color = 'red' UNION SELECT sid FROM reserves r JOIN boats b ON r.bid = b.bid AND b.color = 'blue'",
        "SELECT reserves.sid FROM reserves LEFT JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'blue' OR boats.color = 'red' GROUP BY reserves.sid"
      ]
    ]
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "nlq": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
        "SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color IN ('blue', 'red') GROUP BY s.sid",
        "SELECT s.sid, s.name FROM sailors AS s INNER JOIN reserves AS r ON s.sid = r.sid INNER JOIN boats AS b ON r.bid = b.bid WHERE (b.color = 'red' OR b.color = 'blue')",
        "SELECT distinct_name.sid, distinct_name.name FROM (SELECT DISTINCT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'blue' OR b.color = 'red')) AS distinct_name",
        "SELECT s.sid, s.name FROM boats b, reserves r LEFT JOIN sailors s ON s.sid = r.sid WHERE b.bid = r.bid AND b.color IN ('blue', 'red')",
        "SELECT s.sid, s.name FROM sailors s WHERE EXISTS (SELECT * FROM reserves r JOIN boats b ON r.bid = b.bid WHERE s.sid = r.sid AND b.color IN ('blue', 'red'))",
        "SELECT first.sid, first.name FROM (SELECT s.sid, s.name, b.color FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid) AS first WHERE first.color IN ('red', 'blue')",
        "SELECT unique_sailors.sid, unique_sailors.name FROM (SELECT DISTINCT s.sid, s.name, b.color FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')) as unique_sailors",
        "SELECT sid, name FROM (SELECT DISTINCT s.sid AS sid, s.name AS name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color IN ('red', 'blue'))) AS filtered_sailors",
        "SELECT s.name, s.sid FROM sailors s, boats b, reserves r WHERE r.sid = s.sid AND b.bid = r.bid AND b.color IN ('red', 'blue') GROUP BY s.sid HAVING COUNT(DISTINCT r.bid) = SUM(CASE WHEN b.color IN ('red', 'blue') THEN 1 ELSE 0 END)"
      ]
    ]
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "nlq": "What are the names and ids of sailors who reserved red or blue boats?",
    "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name, s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON b.bid = r.bid WHERE b.color IN ('red', 'blue')",
        "SELECT s.name, s.sid FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'red' OR b.color = 'blue') GROUP BY s.sid",
        "SELECT sailors.name, sailors.sid FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.color IN ('red', 'blue')",
        "SELECT sailors.name, sailors.sid FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND (boats.color = 'blue' OR boats.color = 'red')",
        "SELECT name, sid FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red' OR color = 'blue'))",
        "SELECT DISTINCT name, sid FROM sailors WHERE EXISTS (SELECT 1 FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE sailors.sid = reserves.sid AND boats.color IN ('red', 'blue'))",
        "SELECT DISTINCT s1.name, s1.sid FROM sailors s1 WHERE EXISTS (SELECT * FROM reserves r1 JOIN boats b1 ON r1.bid = b1.bid WHERE b1.color IN ('red', 'blue') AND s1.sid = r1.sid)",
        "SELECT s.name, s.sid FROM sailors s JOIN (SELECT DISTINCT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')) rb ON s.sid = rb.sid",
        "SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid IN (SELECT bid FROM boats WHERE color = 'red' OR color = 'blue')"
      ]
    ]
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "nlq": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' INTERSECT SELECT DISTINCT s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'blue'",
        "SELECT s.sid FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') AND EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'blue')",
        "SELECT s.sid FROM sailors s INNER JOIN (SELECT DISTINCT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'red') reds ON s.sid = reds.sid INNER JOIN (SELECT DISTINCT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'blue') blues ON s.sid = blues.sid",
        "WITH RedSailors AS (SELECT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color = 'red'), BlueSailors AS (SELECT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color = 'blue') SELECT DISTINCT rs.sid FROM RedSailors rs JOIN BlueSailors bs ON rs.sid = bs.sid",
        "SELECT sub.sid FROM (SELECT r.sid, b.color FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY r.sid, b.color HAVING COUNT(DISTINCT b.color) = 2) sub",
        "SELECT rsb.sid FROM (SELECT r.sid, COUNT(DISTINCT b.color) AS MethodCT FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY r.sid HAVING MethodCT = 2) AS rsb",
        "SELECT DISTINCT sid FROM (SELECT sid FROM reserves AS r INNER JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'red' INTERSECT SELECT sid FROM reserves AS r INNER JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'blue') ss",
        "SELECT SID FROM (SELECT SID FROM SAILORS WHERE SID IN (SELECT SID FROM RESERVES JOIN BOATS ON RESERVES.BID = BOATS.BID WHERE COLOR = 'RED') INTERSECT SELECT SID FROM SAILORS WHERE SID IN (SELECT SID FROM RESERVES JOIN BOATS ON RESERVES.BID = BOATS.BID WHERE COLOR = 'BLUE'))",
        "SELECT s.SID FROM SAILORS s WHERE EXISTS (SELECT * FROM RESERVES r INNER JOIN BOATS b ON r.BID = b.BID WHERE r.SID = s.SID AND b.COLOR = 'BLUE') AND EXISTS (SELECT * FROM RESERVES r INNER JOIN BOATS b ON r.BID = b.BID WHERE r.SID = s.SID AND b.COLOR = 'RED')"
      ]
    ]
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "nlq": "What are the ids of sailors who reserved red and blue boats?",
    "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')",
        "SELECT s.sid FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red' INTERSECT SELECT s.sid FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'blue'",
        "SELECT sid FROM (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red') AS RedBoats INTERSECT SELECT sid FROM (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue') AS BlueBoats",
        "SELECT sid FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red') AND sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue')",
        "SELECT DISTINCT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' OR b.color = 'blue' GROUP BY r.sid HAVING COUNT(DISTINCT b.color) = 2",
        "SELECT r.sid FROM reserves r INNER JOIN boats b1 ON r.bid = b1.bid AND b1.color = 'red' INNER JOIN boats b2 ON r.bid = b2.bid AND b2.color = 'blue'",
        "WITH RedReserves AS (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red'), BlueReserves AS (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue') SELECT * FROM RedReserves INTERSECT SELECT * FROM BlueReserves",
        "SELECT r.sid FROM reserves r, boats b WHERE r.bid = b.bid AND b.color = 'red' UNION SELECT r.sid FROM reserves r, boats b WHERE r.bid = b.bid AND b.color = 'blue'",
        "SELECT DISTINCT s.sid FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE EXISTS (SELECT 1 FROM boats WHERE boats.bid = r.bid AND boats.color = 'red') AND EXISTS (SELECT 1 FROM boats WHERE boats.bid = r.bid AND boats.color = 'blue')"
      ]
    ]
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "nlq": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid, s.name FROM sailors AS s JOIN reserves AS r ON s.sid = r.sid JOIN boats AS b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
        "SELECT s.sid, s.name FROM sailors AS s WHERE EXISTS (SELECT 1 FROM reserves AS r JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'red' AND s.sid = r.sid) AND EXISTS (SELECT 1 FROM reserves AS r JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'blue' AND s.sid = r.sid)",
        "WITH ReservedColors AS (SELECT s.sid, s.name, b.color FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid) SELECT sid, name FROM ReservedColors WHERE color = 'blue' INTERSECT SELECT sid, name FROM ReservedColors WHERE color = 'red'",
        "SELECT s.sid, s.name FROM sailors s WHERE 2 = (SELECT COUNT(DISTINCT b.color) FROM reserves r, boats b WHERE r.sid = s.sid AND r.bid = b.bid AND b.color IN ('red', 'blue'))",
        "SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves INNER JOIN boats ON reserves.bid = boats.bid WHERE color = 'blue') AND sid IN (SELECT sid FROM reserves INNER JOIN boats ON reserves.bid = boats.bid WHERE color = 'red')",
        "SELECT si.sid, si.name FROM (SELECT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b on r.bid = b.bid WHERE b.color = 'red' UNION SELECT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b on r.bid = b.bid WHERE b.color = 'blue') AS si GROUP BY si.sid, si.name HAVING COUNT(*) > 1",
        "SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'blue' INTERSECT SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red'",
        "SELECT tx.sid, tx.name FROM (SELECT s.sid, s.name, COUNT(DISTINCT b.color) AS color_count FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid, s.name) AS tx WHERE tx.color_count >= 2",
        "SELECT DISTINCT s.sid, s.name FROM (SELEcT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid AND b.color = 'red' INTERSECT SELECT r.sid FROM reserves r INNER JOIN boats b ON r.bid = b.bid AND b.color = 'blue') AS x JOIN sailors AS s ON x.sid = s.sid",
        "SELECT unique_sailors.sid, unique_sailors.name FROM (SELECT sailors.sid, sailors.name, boats.color FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND boats.color IN ('red', 'blue') GROUP BY sailors.sid, sailors.name HAVING COUNT(DISTINCT boats.color) = 2) AS unique_sailors"
      ]
    ]
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "nlq": "What are the names and ids of sailors who reserved red and blue boats?",
    "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
        "SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red' INTERSECT SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'blue'",
        "SELECT s.sid, s.name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') AND EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'blue')",
        "SELECT s.sid, s.name FROM sailors s WHERE s.sid IN (SELECT r.sid FROM reserves r JOIN boats b ON b.bid = r.bid WHERE b.color = 'blue') AND s.sid IN (SELECT r.sid FROM reserves r JOIN boats b ON b.bid = r.bid WHERE b.color = 'red')",
        "SELECT DISTINCT s.sid, s.name FROM sailors s INNER JOIN reserves r ON s.sid = r.sid WHERE r.bid IN (SELECT bid FROM boats WHERE color = 'blue') AND r.sid IN (SELECT r.sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red')",
        "SELECT DISTINCT s.sid, s.name FROM sailors s WHERE EXISTS (SELECT * FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') AND EXISTS (SELECT * FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'blue')",
        "SELECT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON b.bid = r.bid GROUP BY s.sid, s.name HAVING SUM(CASE WHEN b.color = 'red' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN b.color = 'blue' THEN 1 ELSE 0 END) > 0",
        "SELECT DISTINCT sid, name FROM (SELECT s.sid AS sid, s.name AS name, b.color AS color FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON b.bid = r.bid) WHERE color = 'blue' OR color = 'red' GROUP BY sid, name HAVING COUNT(DISTINCT color) = 2",
        "SELECT s.sid, s.name FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND (b.color = 'blue' OR b.color = 'red') GROUP BY s.sid, s.name HAVING COUNT(DISTINCT b.color) = 2",
        "SELECT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid, s.name HAVING MIN(b.color) <> MAX(b.color)"
      ]
    ]
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "nlq": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
    "infer_predictions": [
      [
        "SELECT s.sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)",
        "SELECT Sailors.sid FROM sailors Sailors LEFT JOIN reserves Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.sid IS NULL",
        "SELECT distinct sid FROM sailors EXCEPT SELECT distinct sid FROM reserves",
        "SELECT s.sid FROM sailors s WHERE s.sid NOT IN (SELECT DISTINCT r.sid FROM reserves r)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT DISTINCT reserves.sid FROM reserves)",
        "SELECT sailors.sid FROM sailors LEFT OUTER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT s.sid FROM sailors s LEFT JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "SELECT sid FROM sailors WHERE NOT EXISTS (SELECT NULL FROM reserves WHERE reserves.sid = sailors.sid)"
      ]
    ]
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "nlq": "What are the ids of sailors who have not reserved a boat?",
    "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
    "infer_predictions": [
      [
        "SELECT s.sid FROM sailors s WHERE s.sid NOT IN (SELECT r.sid FROM reserves r)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)",
        "SELECT sailors.sid FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT DISTINCT s.sid FROM sailors s LEFT OUTER JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves",
        "SELECT s.sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT s.sid FROM sailors s WHERE s.sid NOT IN (SELECT DISTINCT r.sid FROM reserves r)",
        "SELECT sid FROM sailors AS s WHERE NOT EXISTS (SELECT NULL FROM reserves AS r WHERE s.sid = r.sid)",
        "SELECT sailors.sid FROM sailors LEFT OUTER JOIN reserves ON sailors.sid = reserves.sid AND reserves.sid IS NULL"
      ]
    ]
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "nlq": "what is the name and id of sailors who do not have a reservation of a boat?",
    "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT sailors.name, sailors.sid FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT s.name, s.sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT name, sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)",
        "SELECT DISTINCT sailors.name, sailors.sid FROM sailors LEFT OUTER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid IS NULL",
        "SELECT s.name, s.sid FROM sailors s LEFT JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "SELECT name, sid FROM sailors EXCEPT SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid",
        "SELECT s.name, s.sid FROM sailors s WHERE s.sid NOT IN (SELECT DISTINCT sid FROM reserves)",
        "SELECT sailors.name, sailors.sid FROM sailors WHERE NOT EXISTS (SELECT * FROM reserves WHERE reserves.sid = sailors.sid)",
        "SELECT name, sid FROM sailors s WHERE NOT EXISTS (SELECT NULL FROM reserves r WHERE r.sid = s.sid)",
        "SELECT DISTINCT s.name, s.sid FROM sailors s WHERE s.sid NOT IN (SELECT r.sid FROM reserves r)"
      ]
    ]
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "nlq": "What are the names and ids of all sailors who do not have boat reservations?",
    "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT s.name, s.sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)",
        "SELECT name, sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)",
        "SELECT sailors.name, sailors.sid FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT DISTINCT s.name, s.sid FROM sailors s WHERE s.sid NOT IN (SELECT r.sid FROM reserves r)",
        "SELECT s.name, s.sid FROM sailors s WHERE s.sid NOT IN (SELECT sid FROM reserves WHERE reserves.sid = s.sid)",
        "SELECT name, sid FROM sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM reserves)",
        "SELECT name, sid FROM sailors WHERE NOT EXISTS (SELECT * FROM reserves WHERE reserves.sid = sailors.sid)",
        "SELECT s.name, s.sid FROM sailors s LEFT OUTER JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NULL"
      ]
    ]
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "nlq": "Find id for the sailors who do not have a reservation of a boat?",
    "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT reserves.sid FROM reserves)",
        "SELECT sailors.sid FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT sid FROM sailors EXCEPT SELECT sid FROM reserves",
        "SELECT s.sid FROM sailors AS s WHERE NOT EXISTS (SELECT 1 FROM reserves AS r WHERE r.sid = s.sid)",
        "SELECT sailors.sid FROM sailors WHERE sailors.sid NOT IN (SELECT reserves.sid FROM reserves WHERE reserves.sid IS NOT NULL)",
        "SELECT sid FROM sailors WHERE NOT EXISTS (SELECT sid FROM reserves WHERE reserves.sid = sailors.sid)",
        "SELECT s.sid FROM sailors AS s LEFT OUTER JOIN reserves AS r ON s.sid = r.sid WHERE r.sid IS NULL",
        "SELECT sid FROM sailors AS s WHERE s.sid NOT IN (SELECT DISTINCT reserves.sid FROM reserves)",
        "SELECT sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid)"
      ]
    ]
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "nlq": "What is id about sailors who do not have boat reservations?",
    "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "infer_predictions": [
      [
        "SELECT s.sid FROM sailors s WHERE s.sid NOT IN (SELECT r.sid FROM reserves r)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT DISTINCT sid FROM reserves)",
        "SELECT sid FROM sailors s WHERE NOT EXISTS (SELECT sid FROM reserves r WHERE r.sid = s.sid)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves GROUP BY sid)",
        "SELECT s.sid FROM sailors s LEFT JOIN reserves r ON s.sid = r.sid WHERE r.sid IS NULL",
        "SELECT sailors.sid FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL",
        "SELECT DISTINCT sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves r WHERE r.bid IS NOT NULL)",
        "SELECT sid FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid AND r.bid IS NOT NULL)",
        "SELECT sid FROM sailors WHERE sid NOT IN (SELECT r.sid FROM reserves r INNER JOIN sailors s ON s.sid = r.sid)"
      ]
    ]
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "nlq": "What is the name of the sailors who reserved boat with id 103?",
    "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
    "infer_predictions": [
      [
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE r.bid = 103",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)",
        "SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103",
        "SELECT name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid AND r.bid = 103)",
        "SELECT sailors.name AS SailorName FROM sailors JOIN reserves ON sailors.sid = reserves.sid AND reserves.bid = 103",
        "SELECT name FROM sailors s WHERE s.sid IN (SELECT sid FROM reserves WHERE bid = 103)",
        "SELECT Name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND reserves.bid = 103",
        "SELECT distinct sailors.name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND reserves.bid = 103",
        "SELECT Name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103"
      ]
    ]
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "nlq": "Find the name of the sailors who reserved boat with id 103.",
    "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
    "infer_predictions": [
      [
        "SELECT s.name FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE r.bid = 103",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid = 103)",
        "SELECT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103",
        "SELECT s.name FROM sailors s, reserves r WHERE s.sid = r.sid AND r.bid = 103",
        "SELECT distinct sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 103",
        "SELECT s.name FROM sailors s INNER JOIN reserves r ON r.sid = s.sid WHERE r.bid = 103",
        "SELECT s.name FROM reserves r, sailors s WHERE r.sid = s.sid AND r.bid = 103"
      ]
    ]
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "nlq": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "infer_predictions": [
      [
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT distinct(name) FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis' ORDER BY rating DESC LIMIT 1)",
        "SELECT name FROM sailors s1 WHERE rating > (SELECT max(s2.rating) FROM sailors s2 WHERE s2.name = 'Luis')",
        "SELECT s1.name FROM sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM sailors s2 WHERE s2.name = 'Luis')",
        "SELECT DISTINCT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE sailors.name = 'Luis' GROUP BY name)"
      ]
    ]
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "nlq": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "infer_predictions": [
      [
        "SELECT DISTINCT S.name FROM sailors S WHERE S.rating > (SELECT MAX(S2.rating) FROM sailors S2 WHERE S2.name = 'Luis')",
        "SELECT name FROM sailors S1 WHERE rating > (SELECT MAX(rating) FROM sailors S2 WHERE S2.name = 'Luis')",
        "SELECT DISTINCT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT S.name FROM sailors S WHERE S.rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis' ORDER BY rating DESC LIMIT 1)",
        "SELECT DISTINCT s.name FROM sailors s WHERE s.rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT rating FROM sailors WHERE name = 'Luis' ORDER BY rating DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "nlq": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "infer_predictions": [
      [
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT DISTINCT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis' ORDER BY rating DESC LIMIT 1)",
        "SELECT name FROM sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM sailors s2 WHERE s2.name = 'Luis')",
        "SELECT s.name FROM sailors s LEFT JOIN sailors l ON l.name = 'Luis' WHERE s.rating > l.rating GROUP BY l.rating, s.name HAVING l.rating IS NOT NULL",
        "SELECT DISTINCT s.name FROM sailors s, sailors l WHERE s.rating > l.rating AND l.name = 'Luis'",
        "SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors l WHERE l.name = 'Luis' AND l.rating >= s.rating)"
      ]
    ]
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "nlq": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "infer_predictions": [
      [
        "SELECT DISTINCT s1.name FROM sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM sailors s2 WHERE s2.name = 'Luis')",
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = 'Luis')",
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM sailors s2 WHERE s2.name = 'Luis') AND s.name != 'Luis'",
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT rating FROM sailors s2 WHERE s2.name = 'Luis') GROUP BY s.name HAVING COUNT(*) = (SELECT COUNT(*) FROM sailors WHERE name = 'Luis')",
        "SELECT name FROM sailors s1 WHERE NOT EXISTS (SELECT s2.sid FROM sailors s2 WHERE s2.name = 'Luis' AND s1.rating <= s2.rating)",
        "SELECT s.name FROM sailors AS s WHERE s.rating > (SELECT rating FROM sailors WHERE name = 'Luis' ORDER BY rating DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "nlq": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
    "infer_predictions": [
      [
        "SELECT s.sid, s.name FROM sailors s JOIN reserves r ON s.sid = r.sid WHERE s.rating > 2",
        "SELECT s.sid, s.name FROM sailors AS s, reserves AS r WHERE s.sid = r.sid AND s.rating > 2",
        "SELECT sid, name FROM sailors WHERE sid IN (SELECT sid FROM reserves) AND rating > 2",
        "SELECT DISTINCT sailors.sid, sailors.name FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE sailors.rating > 2",
        "SELECT sailors.sid, sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid WHERE sailors.rating > 2",
        "SELECT s.sid, s.name FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r WHERE r.sid = s.sid) AND s.rating > 2",
        "SELECT sailors.sid, name FROM sailors, reserves WHERE sailors.sid = reserves.sid AND sailors.rating > 2",
        "SELECT s.sid, s.name FROM sailors s WHERE s.rating > 2 AND s.sid IN (SELECT r.sid FROM reserves r)",
        "SELECT SQ.sid, SQ.name FROM (SELECT s.sid, s.name FROM sailors s, reserves r WHERE s.sid = r.sid AND s.rating > 2) AS SQ"
      ]
    ]
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "nlq": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE sailors.rating >= 3",
        "SELECT sailors.name, sailors.sid FROM sailors WHERE sid IN (SELECT reserves.sid FROM reserves JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.rating >= 3)",
        "SELECT s.name, s.sid FROM sailors s INNER JOIN reserves r ON s.sid = r.sid WHERE s.rating >= 3",
        "SELECT DISTINCT name, sid FROM sailors WHERE rating >= 3 AND sid IN (SELECT sid FROM reserves)",
        "SELECT DISTINCT sailors.name, sailors.sid FROM reserves, sailors WHERE reserves.sid = sailors.sid AND sailors.rating >= 3",
        "SELECT sailors.name, sailors.sid FROM sailors, reserves WHERE sailors.sid = reserves.sid AND sailors.rating >= 3 GROUP BY sailors.sid",
        "SELECT name, sid FROM sailors WHERE rating >= 3 AND EXISTS (SELECT 1 FROM reserves WHERE sailors.sid = reserves.sid)",
        "SELECT s.name, s.sid FROM sailors s, reserves r WHERE s.sid = r.sid AND s.rating >= 3 GROUP BY s.sid, s.name"
      ]
    ]
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "nlq": "Find the name and age of the oldest sailor.",
    "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
    "infer_predictions": [
      [
        "SELECT name, age FROM sailors WHERE age = (SELECT MAX(age) FROM sailors)",
        "SELECT s.name, s.age FROM sailors s ORDER BY s.age DESC LIMIT 1",
        "SELECT s1.name, s1.age FROM sailors s1 WHERE NOT EXISTS (SELECT 1 FROM sailors s2 WHERE s2.age > s1.age)",
        "SELECT name, age FROM sailors WHERE age IN (SELECT MAX(age) FROM sailors)",
        "SELECT s.name, s.age FROM sailors s JOIN (SELECT MAX(age) AS maxage FROM sailors) m ON s.age = m.maxage",
        "SELECT s.name, s.age FROM sailors s WHERE s.age = (SELECT age FROM sailors ORDER BY age DESC LIMIT 1)",
        "SELECT s.name, s.age FROM (SELECT s.* FROM sailors s ORDER BY age DESC) s LIMIT 1",
        "SELECT name, age FROM sailors WHERE age = (SELECT age FROM sailors s2 ORDER BY s2.age DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "nlq": "What is the name and age of the sailor with maximum age?",
    "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
    "infer_predictions": [
      [
        "SELECT name, age FROM sailors WHERE age = (SELECT MAX(age) FROM sailors)",
        "SELECT s.name, s.age FROM sailors s ORDER BY s.age DESC LIMIT 1",
        "SELECT name, age FROM sailors WHERE age = (SELECT age FROM sailors ORDER BY age DESC LIMIT 1)",
        "SELECT name, age FROM sailors s1 WHERE NOT EXISTS (SELECT 1 FROM sailors s2 WHERE s2.age > s1.age)",
        "SELECT name, age FROM sailors GROUP BY sid HAVING age = MAX(age)",
        "SELECT name, age FROM (SELECT name, age, RANK() OVER (ORDER BY age DESC) AS rk FROM sailors) WHERE rk = 1",
        "SELECT name, age FROM sailors WHERE age = (SELECT MAX(s.age) FROM sailors s)",
        "SELECT name, age FROM sailors s1 WHERE s1.age >= (SELECT MAX(s2.age) FROM sailors s2)"
      ]
    ]
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "nlq": "how many sailors in total?",
    "gold": "SELECT COUNT(*) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT sid) FROM sailors",
        "SELECT COUNT(*) FROM (SELECT DISTINCT sid FROM sailors)",
        "SELECT COUNT(sid) FROM (SELECT sid FROM sailors GROUP BY sid)",
        "SELECT COUNT(DISTINCT s.sid) FROM sailors s",
        "SELECT COUNT(unique_sailors.sid) FROM (SELECT sid FROM sailors GROUP BY sid) AS unique_sailors",
        "SELECT COUNT(*) FROM (SELECT DISTINCT s.sid FROM sailors s)",
        "SELECT COUNT(DISTINCT sid) AS TotalSailors FROM sailors",
        "SELECT COUNT(*) FROM sailors GROUP BY sid HAVING COUNT(sid)>= 1"
      ]
    ]
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "nlq": "How many sailors exist?",
    "gold": "SELECT COUNT(*) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM sailors",
        "SELECT COUNT(sid) FROM sailors",
        "SELECT COUNT(1) FROM sailors",
        "SELECT COUNT(*) FROM (SELECT sid FROM sailors)",
        "SELECT COUNT(*) FROM sailors WHERE sid IS NOT NULL",
        "SELECT COUNT(ss.sid) FROM sailors ss",
        "SELECT COUNT(ALL sid) FROM sailors"
      ]
    ]
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "nlq": "What is the average age of sailors whose rating is 7?",
    "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
    "infer_predictions": [
      [
        "SELECT AVG(age) FROM sailors WHERE rating = 7",
        "SELECT AVG(s.age) AS average_age FROM sailors s WHERE s.rating = 7",
        "SELECT AVG(sailor_age.age) FROM (SELECT age FROM sailors WHERE rating = 7) AS sailor_age",
        "SELECT AVG(age) AS avg_age FROM sailors WHERE rating = 7 GROUP BY rating",
        "SELECT AVG(age) FROM sailors GROUP BY rating HAVING rating = 7",
        "SELECT AVG(age) FROM sailors s WHERE s.rating = 7",
        "SELECT AVG(s.age) FROM sailors s GROUP BY s.rating HAVING s.rating = 7",
        "SELECT AVG (age) FROM (SELECT age FROM sailors WHERE rating = 7)",
        "SELECT AVG(s.age) FROM sailors s WHERE 7 = rating"
      ]
    ]
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "nlq": "What is average age of all sailors who have a rating of 7?",
    "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
    "infer_predictions": [
      [
        "SELECT AVG(age) FROM sailors WHERE rating = 7",
        "SELECT AVG(s.age) AS average_age FROM sailors s WHERE s.rating = 7",
        "SELECT AVG(sailor_age) FROM (SELECT age AS sailor_age FROM sailors WHERE rating = 7)",
        "SELECT AVG(age) AS avg_age FROM sailors WHERE sailors.rating = 7",
        "SELECT AVG(s.age) FROM sailors s WHERE s.rating = 7 GROUP BY s.rating",
        "SELECT AVG(s1.age) FROM sailors s1 WHERE s1.rating = 7"
      ]
    ]
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "nlq": "How many sailors whose name starts with letter D exist ?",
    "gold": "select count(*) from sailors where name like 'd%'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%'",
        "SELECT COUNT(name) FROM sailors WHERE name LIKE 'D%'",
        "SELECT COUNT(DISTINCT sid) FROM sailors WHERE name LIKE 'D%'",
        "SELECT COUNT(1) FROM sailors WHERE name LIKE 'D%'",
        "SELECT COUNT(name) FROM sailors WHERE SUBSTR(name, 1, 1) = 'D'",
        "SELECT COUNT(*) FROM sailors WHERE SUBSTR(name, 1, 1) = 'D'",
        "SELECT COUNT(*) FROM sailors WHERE name GLOB 'D*'",
        "SELECT COUNT(*) FROM sailors WHERE UPPER(name) LIKE 'D%'"
      ]
    ]
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "nlq": "What is the count of the sailors whose name starts with letter D ?",
    "gold": "select count(*) from sailors where name like 'd%'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%'",
        "SELECT COUNT(sailors.sid) FROM sailors WHERE sailors.name LIKE 'D%'",
        "SELECT COUNT(*) FROM sailors WHERE substr(name, 1, 1) = 'D'",
        "SELECT COUNT(sailors.sid) FROM sailors WHERE substr(sailors.name, 1, 1) = 'D'",
        "SELECT COUNT(DISTINCT sailors.sid) FROM sailors WHERE substr(sailors.name, 1, 1) = 'D'",
        "SELECT COUNT(*) FROM sailors s WHERE s.name LIKE 'D%'",
        "SELECT COUNT(DISTINCT s.sid) FROM sailors s WHERE s.name LIKE 'D%'",
        "SELECT COUNT(sid) FROM sailors WHERE UPPER(name) LIKE 'D%'",
        "SELECT COUNT(*) FROM sailors WHERE name GLOB 'D*'"
      ]
    ]
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "nlq": "What are the average rating and max age of all sailors?",
    "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM sailors",
        "SELECT AVG(s.rating), MAX(s.age) FROM sailors s",
        "SELECT (SELECT AVG(rating) FROM sailors), (SELECT MAX(age) FROM sailors)",
        "SELECT AVG(rating) AS avg_rating, (SELECT MAX(age) FROM sailors) AS max_sailor_age FROM sailors",
        "SELECT (SELECT AVG(rating) FROM sailors AS S), MAX(S1.age) FROM sailors AS S1",
        "SELECT AVG(S.rating) average_rating, MAX(S.age) maximum_age FROM sailors S",
        "SELECT (SELECT AVG(rating) FROM sailors) AS average_rating, (SELECT MAX(age) FROM sailors) AS maximum_age",
        "SELECT AVG(s.rating) as average_rating, MAX(s.age) as max_age FROM sailors as s",
        "SELECT AVG(rating) average_rating, MAX(age) max_age FROM sailors WHERE sid IN (SELECT sid FROM sailors)"
      ]
    ]
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "nlq": "Find the average rating and largest age for the sailors",
    "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT AVG(rating) AS AverageRating, MAX(age) AS LargestAge FROM sailors",
        "SELECT AVG(s.rating) as AverageRating, MAX(s.age) as LargestAge FROM sailors s",
        "SELECT AVG(sailors.rating), MAX(sailors.age) FROM sailors",
        "SELECT (SELECT AVG(rating) FROM sailors), (SELECT MAX(age) FROM sailors)",
        "SELECT AVG(S.rating) AS Average_Rating, MAX(S.age) AS Max_Age FROM sailors AS S",
        "SELECT (SELECT AVG(rating) FROM sailors) AS avg_rating, (SELECT MAX(age) FROM sailors) AS max_age",
        "SELECT AVG(sailors.rating) AS AvgRating, (SELECT MAX(age) FROM sailors) AS MaxAge FROM sailors",
        "SELECT (SELECT AVG(sailors.rating) FROM sailors), (SELECT MAX(sailors.age) FROM sailors)",
        "SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM sailors"
      ]
    ]
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "nlq": "Find the number of reservations for each boat.",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
    "infer_predictions": [
      [
        "SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid",
        "SELECT b.bid, COUNT(r.bid) AS reservation_count FROM boats b LEFT JOIN reserves r ON b.bid = r.bid GROUP BY b.bid",
        "SELECT name, COUNT(reserves.bid) as reservation_count FROM boats JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid",
        "SELECT boats.name, COUNT(*) AS reservation_count FROM boats INNER JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.bid",
        "SELECT b.name, COUNT(r.bid) AS num_reservations FROM boats b, reserves r WHERE b.bid = r.bid GROUP BY b.bid",
        "SELECT boats.bid, (SELECT COUNT(*) FROM reserves WHERE reserves.bid = boats.bid) AS reservation_count FROM boats",
        "SELECT b.bid, COUNT(r.sid) AS reservation_count FROM boats b LEFT JOIN reserves r ON b.bid = r.bid GROUP BY b.bid",
        "SELECT boats.name, COUNT(reserves.bid) AS reservation_count FROM reserves INNER JOIN boats ON boats.bid = reserves.bid GROUP BY boats.name",
        "SELECT b.name AS boat_name, COUNT(r.bid) AS reservation_count FROM boats b LEFT JOIN reserves r ON b.bid = r.bid GROUP BY b.name"
      ]
    ]
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "nlq": "How many reservations exist for each boat?",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
    "infer_predictions": [
      [
        "SELECT b.name, COUNT(*) AS reservation_count FROM boats b JOIN reserves r ON b.bid = r.bid GROUP BY b.bid",
        "SELECT b.name, COUNT(r.bid) AS reservation_count FROM boats b INNER JOIN reserves r ON b.bid = r.bid GROUP BY b.bid",
        "SELECT name, COUNT(bid) AS reservation_count FROM boats WHERE bid IN (SELECT bid FROM reserves) GROUP BY bid",
        "SELECT b.name, COUNT(r.sid) AS reservation_count FROM boats b, reserves r WHERE b.bid = r.bid GROUP BY b.bid",
        "SELECT B.name, COUNT(R.sid) FROM boats B LEFT JOIN reserves R ON B.bid = R.bid GROUP BY B.bid",
        "SELECT b.name, (SELECT COUNT(*) FROM reserves r WHERE r.bid = b.bid) AS reservation_count FROM boats b",
        "SELECT boats.name, COUNT(reserves.bid) AS reservation_count FROM reserves, boats WHERE boats.bid = reserves.bid GROUP BY boats.bid"
      ]
    ]
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "nlq": "Find the number of reservations for each boat with id greater than 50.",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
    "infer_predictions": [
      [
        "SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid > 50 GROUP BY boats.bid",
        "SELECT b.bid, COUNT(*) AS total_reservations FROM boats AS b INNER JOIN reserves AS r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.bid",
        "SELECT b.bid, COUNT(r.bid) AS num_reservations FROM boats b, reserves r WHERE b.bid = r.bid AND b.bid > 50 GROUP BY b.bid",
        "SELECT bid, COUNT(bid) FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE bid > 50) GROUP BY bid",
        "SELECT b.bid, COUNT(r.bid) FROM boats b LEFT JOIN reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.bid",
        "SELECT boats.bid, COUNT(reserves.sid) FROM boats JOIN reserves ON boats.bid = reserves.bid AND boats.bid > 50 GROUP BY boats.bid",
        "SELECT COUNT(r.bid) as Number_of_Reservations, r.bid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.bid > 50 GROUP BY r.bid",
        "SELECT R1.bid, COUNT(*) as Reservation_Count FROM reserves R1 WHERE R1.bid > 50 GROUP BY R1.bid",
        "SELECT id AS bid, total_reservations FROM (SELECT boats.bid AS id, COUNT(reserves.sid) AS total_reservations FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid > 50 GROUP BY boats.bid)"
      ]
    ]
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "nlq": "How many reservations exist for each boat with an id greater than 50?",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
    "infer_predictions": [
      [
        "SELECT boats.bid, COUNT(*) AS reservations_count FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE boats.bid > 50 GROUP BY boats.bid",
        "SELECT b.bid, COUNT(r.bid) AS total_reservations FROM boats b INNER JOIN reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.bid",
        "SELECT r.bid, COUNT(*) FROM reserves r WHERE r.bid > 50 GROUP BY r.bid",
        "SELECT bid, COUNT(bid) FROM reserves WHERE bid > 50 GROUP BY bid",
        "SELECT bid, COUNT(*) AS num_reservations FROM reserves WHERE bid > 50 GROUP BY bid",
        "SELECT COUNT(r.bid) AS reservation_count, r.bid FROM reserves r WHERE r.bid > 50 GROUP BY r.bid ORDER BY r.bid",
        "SELECT COUNT(r.bid) AS count, r.bid FROM reserves r JOIN boats b ON b.bid = r.bid WHERE b.bid > 50 GROUP BY r.bid HAVING count > 0",
        "SELECT bid, count(bid) AS total FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE bid > 50) GROUP BY bid",
        "SELECT r.bid, COUNT(*) AS reservations FROM boats b, reserves r WHERE b.bid = r.bid AND b.bid > 50 GROUP BY r.bid",
        "SELECT COUNT(r.bid) num, r.bid FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE b.bid > 50 GROUP BY r.bid ORDER BY num DESC"
      ]
    ]
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "nlq": "Find the number of reservations for each boat with more than 1 reservation.",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT boats.name, COUNT(*) AS reservation_count FROM reserves JOIN boats ON reserves.bid = boats.bid GROUP BY boats.name HAVING COUNT(*) > 1",
        "SELECT B.name, COUNT(R.bid) AS num_reservations FROM reserves R JOIN boats B ON R.bid = B.bid GROUP BY B.name HAVING num_reservations > 1",
        "SELECT name, COUNT(reserves.bid) FROM boats INNER JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.name HAVING COUNT(reserves.bid) > 1",
        "SELECT boats.name, COUNT(*) FROM boats JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.name HAVING COUNT(*) > 1",
        "SELECT name, COUNT(*) AS reservation_count FROM boats, reserves WHERE boats.bid = reserves.bid GROUP BY boats.name HAVING reservation_count > 1",
        "SELECT boats.name, COUNT(reserves.bid) AS total_reservations FROM boats, reserves WHERE boats.bid = reserves.bid GROUP BY boats.name HAVING total_reservations > 1",
        "SELECT name, COUNT(*) FROM (SELECT name FROM boats JOIN reserves ON boats.bid = reserves.bid) GROUP BY name HAVING COUNT(*) > 1",
        "SELECT B.name, COUNT(R.bid) AS reservation_count FROM reserves R JOIN boats B ON B.bid = R.bid GROUP BY B.name HAVING reservation_count > 1",
        "SELECT boats.name, COUNT(reserves.sid) FROM boats LEFT JOIN reserves ON boats.bid = reserves.bid GROUP BY boats.name HAVING COUNT(reserves.sid) > 1"
      ]
    ]
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "nlq": "How many reservations exist for each boat that has more than 1 reservation already?",
    "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT boats.bid, COUNT(reserves.bid) AS reservation_count FROM reserves INNER JOIN boats ON reserves.bid = boats.bid GROUP BY boats.bid HAVING COUNT(reserves.bid) > 1",
        "SELECT b.bid, COUNT(r.bid) AS num_reservations FROM boats b JOIN reserves r ON b.bid = r.bid GROUP BY b.bid HAVING COUNT(r.bid) > 1",
        "SELECT R.bid, COUNT(*) AS total_reservations FROM reserves R JOIN boats B ON R.bid = B.bid GROUP BY R.bid HAVING COUNT(*) > 1",
        "SELECT b.bid, COUNT(r.sid) AS count_reservations FROM reserves AS r JOIN boats AS b ON r.bid = b.bid GROUP BY b.bid HAVING COUNT(r.sid) > 1",
        "SELECT reserve.bid, COUNT(reserve.sid) AS reservation_count FROM reserves reserve JOIN boats boat ON reserve.bid = boat.bid GROUP BY reserve.bid HAVING COUNT(reserve.sid) > 1",
        "SELECT boats.bid, COUNT(DISTINCT reserves.sid) AS reservation_count FROM reserves INNER JOIN boats ON reserves.bid = boats.bid GROUP BY boats.bid HAVING COUNT(DISTINCT reserves.sid) > 1",
        "SELECT R.bid, COUNT(R.sid) FROM reserves R JOIN boats B ON R.bid = B.bid GROUP BY R.bid HAVING COUNT(R.sid) > 1",
        "SELECT boats.bid, COUNT(*) FROM reserves JOIN boats ON reserves.bid = boats.bid GROUP BY boats.bid HAVING COUNT(*) > 1",
        "SELECT B.bid, COUNT(*) AS reservation_total FROM boats B, reserves R WHERE B.bid = R.bid GROUP BY B.bid HAVING COUNT(*) > 1"
      ]
    ]
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "nlq": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
    "infer_predictions": [
      [
        "SELECT boats.bid, boats.name, COUNT(*) AS reservation_count FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE reserves.sid > 1 GROUP BY boats.bid, boats.name",
        "SELECT b.bid, b.name, COUNT(*) AS reservation_count FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.bid, b.name",
        "SELECT ba.bid, ba.name, COUNT(rs.bid) AS reservation_count FROM reserves rs CROSS JOIN boats ba ON rs.bid = ba.bid WHERE rs.sid > 1 GROUP BY ba.bid, ba.name",
        "SELECT boats.bid, boats.name, COUNT(1) AS reservation_count FROM reserves INNER JOIN boats ON reserves.bid = boats.bid WHERE reserves.sid > 1 GROUP BY boats.bid, boats.name",
        "SELECT b.bid, b.name, SUM(CASE WHEN r.sid > 1 THEN 1 ELSE 0 END) AS reservation_count FROM boats b LEFT JOIN reserves r ON b.bid = r.bid GROUP BY b.bid, b.name",
        "SELECT boats.bid, boats.name, (SELECT COUNT(sid) FROM reserves WHERE bid = boats.bid AND sid > 1) AS reservation_count FROM boats",
        "SELECT b.bid, b.name, (SELECT COUNT(*) FROM reserves WHERE bid = b.bid AND sid > 1) AS reservation_count FROM boats b",
        "SELECT b.bid, b.name, (COUNT(r.bid)) AS reservation_count FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.bid, b.name"
      ]
    ]
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "nlq": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
    "infer_predictions": [
      [
        "SELECT boats.name, COUNT(reserves.bid) AS reservation_count FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE reserves.sid > 1 GROUP BY boats.name",
        "SELECT b.name, COUNT(*) AS num_reservations FROM reserves r INNER JOIN boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name",
        "SELECT name, reservation_count FROM (SELECT boats.name, COUNT(reserves.bid) AS reservation_count FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid > 1 GROUP BY boats.name)",
        "SELECT boats_bid_name AS boat_name, COUNT(1) FROM (SELECT b.name AS boats_bid_name FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid > 1) GROUP BY boats_bid_name",
        "SELECT b.name, COUNT(r.bid) AS reservation_amount FROM boats b, reserves r WHERE b.bid = r.bid AND r.sid > 1 GROUP BY b.name",
        "SELECT b.name AS boat_name, COUNT(*) AS reservations_count FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid > 1 GROUP BY b.name",
        "SELECT BoatName, TotalReservations FROM (SELECT boats.name AS BoatName, COUNT(reserves.bid) AS TotalReservations FROM boats JOIN reserves ON boats.bid = reserves.bid WHERE reserves.sid > 1 GROUP BY boats.name)"
      ]
    ]
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "nlq": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
    "infer_predictions": [
      [
        "SELECT s.rating, AVG(s.age) AS average_age FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "SELECT rating, AVG(age) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY rating",
        "SELECT rating, AVG(age) FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY sailors.rating",
        "SELECT s.rating AS Rating, AVG(s.age) AS AverageAge FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND b.bid = r.bid AND b.color = 'red' GROUP BY s.rating",
        "SELECT rating, AVG(age) FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') GROUP BY rating",
        "SELECT rating, AVG(sailors.age) AS avg_age FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY rating",
        "SELECT DISTINCT rating, AVG(age) OVER (PARTITION BY rating) AS Average_Age FROM sailors WHERE sid IN (SELECT sid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE color = 'red')",
        "SELECT r.rating, AVG(a.age) FROM (SELECT sid, rating FROM sailors) r JOIN (SELECT sid, age FROM sailors) a ON r.sid = a.sid JOIN reserves rs ON rs.sid = r.sid JOIN boats b ON rs.bid = b.bid WHERE b.color = 'red' GROUP BY r.rating",
        "SELECT temp.rating, AVG(temp.age) FROM (SELECT sailors.sid, sailors.rating, sailors.age FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON boats.bid = reserves.bid WHERE boats.color = 'red') temp GROUP BY temp.rating",
        "SELECT tmp.rating, AVG(tmp.age) AS avg_age FROM (SELECT s.sid, s.rating, s.age FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON b.bid = r.bid WHERE b.color = 'red') tmp GROUP BY tmp.rating"
      ]
    ]
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "nlq": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
    "infer_predictions": [
      [
        "SELECT sailors.rating, AVG(sailors.age) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY sailors.rating",
        "SELECT RATING, AVG(AGE) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')) GROUP BY RATING",
        "SELECT s.rating, AVG(s.age) AS avg_age FROM sailors s, reserves r, boats b WHERE s.sid = r.sid AND r.bid = b.bid AND b.color = 'red' GROUP BY s.rating",
        "SELECT sailors.rating, AVG(age) AS AverageAge FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red' GROUP BY sailors.rating",
        "SELECT rating, AVG(age) FROM sailors WHERE sid IN (SELECT reserves.sid FROM reserves INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red') GROUP BY rating",
        "SELECT s.rating, AVG(s.age) FROM sailors s WHERE EXISTS (SELECT 1 FROM reserves r JOIN boats b ON r.bid = b.bid WHERE r.sid = s.sid AND b.color = 'red') GROUP BY s.rating",
        "SELECT s.rating, AVG(s.age) FROM sailors s JOIN reserves r ON s.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating",
        "SELECT rating, AVG(age) FROM (SELECT sailors.rating AS rating, sailors.age AS age FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red') AS sub GROUP BY rating",
        "SELECT DISTINCT s.rating, AVG(s.age) FROM sailors s, boats b, reserves r WHERE s.sid = r.sid AND b.bid = r.bid AND b.color = 'red' GROUP BY s.rating",
        "SELECT r.rating, AVG(r.age) FROM (SELECT sailors.rating AS rating, sailors.age AS age FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red') r GROUP BY r.rating"
      ]
    ]
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "nlq": "Find the name, rating and age of all sailors ordered by rating and age.",
    "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
    "infer_predictions": [
      [
        "SELECT name, rating, age FROM sailors ORDER BY rating, age;",
        "SELECT s.name, s.rating, s.age FROM sailors s ORDER BY s.rating, s.age;",
        "SELECT Name AS name, Rating AS rating, Age AS age FROM sailors ORDER BY Rating, Age;",
        "SELECT s.name AS sailor_name, s.rating AS sailor_rating, s.age AS sailor_age FROM sailors s ORDER BY sailor_rating, sailor_age;",
        "SELECT s.name, s.rating, s.age FROM sailors s ORDER BY s.rating ASC, s.age ASC;",
        "SELECT name, rating, age FROM sailors ORDER BY rating DESC, age DESC;",
        "SELECT s.name AS SailorName, s.rating AS SailorRating, s.age AS SailorAge FROM sailors s ORDER BY SailorRating, SailorAge;",
        "SELECT DISTINCT s.name, s.rating, s.age FROM sailors s ORDER BY s.rating Desc, s.age DESC;"
      ]
    ]
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "nlq": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
    "infer_predictions": [
      [
        "SELECT name, rating, age FROM sailors ORDER BY rating, age",
        "SELECT s.name, s.rating, s.age FROM sailors s ORDER BY s.rating, s.age",
        "SELECT * FROM (SELECT name, rating, age FROM sailors) ORDER BY rating, age",
        "SELECT name AS SailorName, rating AS SailorRating, age AS SailorAge FROM sailors ORDER BY rating, age",
        "SELECT name, rating, age FROM sailors ORDER BY 2, 3",
        "SELECT s.name, s.rating, s.age FROM sailors s ORDER BY s.rating ASC, s.age ASC"
      ]
    ]
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "nlq": "Find the total number of boats.",
    "gold": "SELECT count(*) FROM Boats",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM boats",
        "SELECT COUNT(bid) FROM boats",
        "SELECT COUNT(1) FROM boats",
        "SELECT COUNT(bid) AS total_boats FROM boats",
        "SELECT COUNT(ALL bid) FROM boats",
        "SELECT COUNT(*) AS TotalNumberOfBoats FROM boats",
        "SELECT SUM(1) FROM boats",
        "SELECT COUNT(*) FROM (SELECT * FROM boats)",
        "SELECT COUNT(*) FROM (SELECT bid, name, color FROM boats)"
      ]
    ]
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "nlq": "How many boats are there?",
    "gold": "SELECT count(*) FROM Boats",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM boats",
        "SELECT COUNT(boats.bid) FROM boats",
        "SELECT SUM(1) FROM boats",
        "SELECT COUNT(*) AS boat_count FROM boats",
        "SELECT COUNT(bid) AS count_of_boats FROM boats",
        "SELECT COUNT(DISTINCT bid) AS unique_boats FROM boats",
        "SELECT COUNT(1) FROM boats",
        "SELECT COUNT(*) FROM (SELECT DISTINCT bid FROM boats)"
      ]
    ]
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "nlq": "How many boats are red?",
    "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM boats WHERE color = 'red';",
        "SELECT COUNT(bid) FROM boats WHERE color = 'red';",
        "SELECT COUNT(bid) AS count FROM boats WHERE color = 'red';",
        "SELECT COUNT(1) FROM boats WHERE color = 'red';",
        "SELECT COUNT(bid) FROM boats WHERE color = 'red' GROUP BY color;",
        "SELECT COUNT(*) FROM boats b WHERE b.color = 'red';",
        "SELECT COUNT(*) FROM (SELECT * FROM boats WHERE color = 'red');",
        "SELECT COUNT(B.bid) FROM boats B WHERE B.color = 'red';",
        "SELECT SUM(CASE WHEN color = 'red' THEN 1 ELSE 0 END) FROM boats;"
      ]
    ]
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "nlq": "How many red boats exist?",
    "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM boats WHERE color = 'red'",
        "SELECT COUNT(bid) FROM boats WHERE color = 'red'",
        "SELECT COUNT(1) FROM boats WHERE color = 'red'",
        "SELECT COUNT(*) FROM (SELECT * FROM boats WHERE color = 'red')",
        "SELECT COUNT(bid) AS num_of_red_boats FROM boats WHERE color = 'red'",
        "SELECT COUNT(*) AS red_boats_count FROM boats WHERE color = 'red'",
        "SELECT SUM(CASE WHEN color = 'red' THEN 1 ELSE 0 END) FROM boats",
        "SELECT COUNT(*) FROM boats b WHERE b.color = 'red'"
      ]
    ]
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "nlq": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
    "infer_predictions": [
      [
        "SELECT DISTINCT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.age BETWEEN 20 AND 30",
        "SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age >= 20 AND s.age <= 30)",
        "SELECT boats.name FROM boats INNER JOIN (SELECT bid FROM reserves WHERE sid IN (SELECT sid FROM sailors WHERE age > 19 AND age < 31)) AS sub_bids ON boats.bid = sub_bids.bid",
        "SELECT name FROM boats WHERE bid IN (SELECT bid FROM reserves JOIN sailors ON reserves.sid = sailors.sid WHERE age BETWEEN 20 AND 30)",
        "SELECT b.name FROM boats b, reserves r, sailors s WHERE b.bid = r.bid AND r.sid = s.sid AND s.age BETWEEN 20 AND 30",
        "SELECT b.name AS BoatName FROM boats AS b LEFT JOIN reserves AS r ON b.bid = r.bid WHERE r.sid IN (SELECT sid FROM sailors WHERE age > 19 AND age < 31)",
        "SELECT DISTINCT b.name FROM boats AS b JOIN reserves AS r ON b.bid = r.bid WHERE EXISTS (SELECT 1 FROM sailors WHERE age BETWEEN 20 AND 30 AND sid = r.sid)",
        "SELECT DISTINCT boat_name FROM (SELECT b.name AS boat_name FROM boats b INNER JOIN reserves r ON b.bid = r.bid INNER JOIN sailors s ON s.sid = r.sid WHERE s.age >= 20 AND s.age <= 30) AS filtered_boats",
        "SELECT d.name FROM boats d WHERE EXISTS (SELECT 1 FROM reserves r LEFT JOIN sailors s ON r.sid = s.sid WHERE r.bid = d.bid AND s.age BETWEEN 20 AND 30)"
      ]
    ]
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "nlq": "What are the names of the boats booked by people between age 20 and 30?",
    "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.name FROM boats b JOIN reserves r ON b.bid = r.bid JOIN sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30",
        "SELECT b.name FROM boats b WHERE b.bid IN (SELECT r.bid FROM reserves r INNER JOIN sailors s ON r.sid = s.sid WHERE s.age > 20 AND s.age < 30)",
        "SELECT boats.name FROM boats, reserves, sailors WHERE boats.bid = reserves.bid AND reserves.sid = sailors.sid AND sailors.age > 19 AND sailors.age < 31",
        "SELECT DISTINCT b.name FROM boats b WHERE EXISTS (SELECT * FROM reserves r JOIN sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30 AND b.bid = r.bid)",
        "SELECT b.name FROM boats b, reserves r, sailors s WHERE b.bid = r.bid AND r.sid = s.sid AND s.age BETWEEN 20 AND 30 GROUP BY b.name",
        "SELECT b.name FROM boats b INNER JOIN (SELECT DISTINCT r.bid FROM reserves r, sailors s WHERE r.sid = s.sid AND s.age BETWEEN 20 AND 30) AS rb ON b.bid = rb.bid",
        "SELECT b.name FROM boats AS b WHERE EXISTS (SELECT 1 FROM reserves AS r LEFT JOIN sailors AS s ON s.sid = r.sid WHERE s.age BETWEEN 20 AND 30 AND r.bid = b.bid)",
        "SELECT DISTINCT b.name FROM boats AS b JOIN reserves AS r ON b.bid = r.bid LEFT JOIN sailors AS s ON s.sid = r.sid WHERE s.age > 20 AND s.age <= 30"
      ]
    ]
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "nlq": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
    "infer_predictions": [
      [
        "SELECT S.name FROM sailors S WHERE S.rating > (SELECT MAX(sailors.rating) FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red')",
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(S.rating) FROM sailors S JOIN reserves R ON S.sid = R.sid JOIN boats B ON R.bid = B.bid WHERE B.color = 'red')",
        "SELECT sailor.name FROM sailors sailor WHERE sailor.rating > (SELECT MAX(rating) FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE color = 'red')",
        "SELECT S1.name FROM sailors S1 WHERE S1.rating > (SELECT MAX(S2.rating) FROM sailors S2 INNER JOIN reserves ON S2.sid = reserves.sid INNER JOIN boats ON boats.bid = reserves.bid WHERE boats.color = 'red')",
        "SELECT S.name FROM sailors S WHERE NOT EXISTS (SELECT 1 FROM sailors S2 JOIN reserves R ON S2.sid = R.sid JOIN boats B ON B.bid = R.bid WHERE B.color = 'red' AND S2.rating >= S.rating)",
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(S.rating) FROM sailors S JOIN reserves ON S.sid = reserves.sid JOIN boats B ON reserves.bid = B.bid WHERE B.color = 'red')"
      ]
    ]
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "nlq": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
    "infer_predictions": [
      [
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM sailors s2 INNER JOIN reserves r2 ON s2.sid = r2.sid INNER JOIN boats b2 ON r2.bid = b2.bid WHERE b2.color = 'red')",
        "SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE color = 'red')))",
        "SELECT DISTINCT s1.name FROM sailors s1 WHERE s1.rating > (SELECT MAX(s2.rating) FROM reserves r JOIN sailors s2 ON r.sid = s2.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red')",
        "SELECT t1.name FROM sailors t1 WHERE t1.rating > (SELECT MAX(t2.rating) FROM sailors t2 WHERE EXISTS (SELECT 1 FROM reserves, boats WHERE reserves.bid = boats.bid AND reserves.sid = t2.sid AND boats.color = 'red'))",
        "SELECT s.name FROM sailors s WHERE NOT EXISTS (SELECT 1 FROM sailors s2 JOIN reserves r ON s2.sid = r.sid JOIN boats b ON r.bid = b.bid WHERE b.color = 'red' AND s2.rating >= s.rating)",
        "SELECT name FROM sailors AS s WHERE s.rating > (SELECT MAX(s2.rating) FROM sailors AS s2 JOIN reserves AS r ON s2.sid = r.sid JOIN boats AS b ON r.bid = b.bid WHERE b.color = 'red')",
        "SELECT s.name FROM sailors s WHERE s.rating > (SELECT MAX(sailors.rating) FROM reserves JOIN sailors ON reserves.sid = sailors.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color = 'red')"
      ]
    ]
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "nlq": "What is highest rating between sailors?",
    "gold": "SELECT max(rating) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT MAX(rating) FROM sailors",
        "SELECT rating FROM sailors ORDER BY rating DESC LIMIT 1",
        "SELECT MAX(s.rating) FROM sailors s",
        "SELECT s.rating FROM sailors s ORDER BY s.rating DESC LIMIT 1",
        "SELECT rating FROM sailors GROUP BY rating ORDER BY rating DESC LIMIT 1",
        "SELECT rating FROM (SELECT rating FROM sailors ORDER BY rating DESC) LIMIT 1",
        "SELECT r FROM (SELECT MAX(rating) as r FROM sailors)",
        "SELECT high_r.rating FROM (SELECT MAX(rating) AS rating FROM sailors) as high_r",
        "SELECT rating FROM sailors WHERE rating = (SELECT MAX(rating) FROM sailors)"
      ]
    ]
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "nlq": "What is the maximum rating for sailors?",
    "gold": "SELECT max(rating) FROM Sailors",
    "infer_predictions": [
      [
        "SELECT MAX(rating) FROM sailors",
        "SELECT MAX(s.rating) FROM sailors s",
        "SELECT MAX(rating) AS max_rating FROM sailors",
        "SELECT rating FROM sailors ORDER BY rating DESC LIMIT 1",
        "SELECT s.rating FROM sailors s ORDER BY s.rating DESC LIMIT 1",
        "SELECT MAX(r) FROM (SELECT rating AS r FROM sailors)",
        "SELECT * FROM (SELECT MAX(rating) FROM sailors) AS max_result"
      ]
    ]
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "nlq": "Find the names of sailors who reserved boat with the name Melon.",
    "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "infer_predictions": [
      [
        "SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon'",
        "SELECT S.name FROM sailors S, reserves R, boats B WHERE S.sid = R.sid AND R.bid = B.bid AND B.name = 'Melon'",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves WHERE bid IN (SELECT bid FROM boats WHERE name = 'Melon'))",
        "SELECT DISTINCT sailors.name FROM sailors INNER JOIN reserves ON sailors.sid = reserves.sid INNER JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon'",
        "SELECT name FROM sailors WHERE EXISTS (SELECT 1 FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE sailors.sid = reserves.sid AND boats.name = 'Melon')",
        "SELECT sailors.name FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND boats.name = 'Melon'",
        "SELECT DISTINCT S.name FROM sailors AS S INNER JOIN reserves AS R ON S.sid = R.sid INNER JOIN boats AS B ON R.bid = B.bid WHERE B.name = 'Melon'",
        "SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = (SELECT bid FROM boats WHERE name = 'Melon')",
        "SELECT sailors.name FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND boats.name = 'Melon' AND sailors.sid IS NOT NULL",
        "SELECT S.name FROM sailors S WHERE EXISTS (SELECT * FROM reserves R INNER JOIN boats B ON R.bid = B.bid WHERE S.sid = R.sid AND B.name = 'Melon')"
      ]
    ]
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "nlq": "What are the names of sailors who reserved a boat with the name Melon?",
    "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "infer_predictions": [
      [
        "SELECT DISTINCT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON boats.bid = reserves.bid WHERE boats.name = 'Melon'",
        "SELECT s.name FROM sailors s INNER JOIN reserves r ON s.sid = r.sid INNER JOIN boats b ON r.bid = b.bid WHERE b.name = 'Melon'",
        "SELECT Sailors.name FROM reserves INNER JOIN boats USING (bid) INNER JOIN sailors USING (sid) WHERE boats.name = 'Melon'",
        "SELECT s.name FROM reserves r, sailors s, boats b WHERE r.sid = s.sid AND r.bid = b.bid AND b.name = 'Melon'",
        "SELECT DISTINCT name FROM sailors WHERE sid IN (SELECT r.sid FROM reserves r JOIN boats b ON r.bid = b.bid WHERE b.name = 'Melon')",
        "SELECT DISTINCT name AS SailorName FROM sailors WHERE EXISTS (SELECT 1 FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE sailors.sid = reserves.sid AND boats.name = 'Melon')",
        "SELECT name FROM sailors WHERE sid IN (SELECT sid FROM reserves, boats WHERE reserves.bid = boats.bid AND boats.name = 'Melon')",
        "SELECT DISTINCT name FROM (SELECT si.name FROM sailors si JOIN reserves re ON si.sid = re.sid JOIN boats bo ON re.bid = bo.bid WHERE bo.name = 'Melon')",
        "SELECT sailors.name FROM sailors, reserves, boats WHERE sailors.sid = reserves.sid AND reserves.bid = boats.bid AND boats.name = 'Melon'"
      ]
    ]
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "nlq": "List the names and ages of all sailors sorted by rating in descending order.",
    "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
    "infer_predictions": [
      [
        "SELECT s.name, s.age FROM sailors s ORDER BY s.rating DESC",
        "SELECT name, age FROM sailors ORDER BY rating DESC",
        "SELECT t1.name, t1.age FROM sailors t1 ORDER BY t1.rating DESC",
        "SELECT * FROM (SELECT name, age, rating FROM sailors) ORDER BY rating DESC",
        "SELECT sailors.name AS Name, sailors.age AS Age FROM sailors ORDER BY sailors.rating DESC"
      ]
    ]
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "nlq": "What are the names and ages of all sailors sorted by decreasing rating?",
    "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
    "infer_predictions": [
      [
        "SELECT name, age FROM sailors ORDER BY rating DESC",
        "SELECT s.name, s.age FROM sailors s ORDER BY s.rating DESC",
        "SELECT name AS SailorName, age AS SailorAge FROM sailors ORDER BY rating DESC",
        "SELECT sailors.name AS SailorName, sailors.age AS SailorAge FROM sailors ORDER BY sailors.rating DESC",
        "SELECT name, age FROM sailors WHERE rating IS NOT NULL ORDER BY rating DESC",
        "SELECT name, age FROM sailors WHERE EXISTS (SELECT 1 FROM sailors WHERE rating IS NOT NULL) ORDER BY rating DESC"
      ]
    ]
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "nlq": "Find the model of the most expensive headphone.",
    "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone)",
        "SELECT h.model FROM headphone h ORDER BY h.price DESC LIMIT 1",
        "SELECT model FROM headphone WHERE price IN (SELECT MAX(price) FROM headphone)",
        "SELECT h.model FROM headphone h WHERE h.price = (SELECT MAX(price) FROM headphone)",
        "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
        "SELECT model FROM headphone h1 WHERE NOT EXISTS (SELECT 1 FROM headphone h2 WHERE h2.price > h1.price)",
        "SELECT model FROM (SELECT model, RANK() OVER (ORDER BY price DESC) AS rk FROM headphone) WHERE rk = 1",
        "SELECT h.model FROM headphone h JOIN (SELECT MAX(price) AS max_price FROM headphone) m ON h.price = m.max_price"
      ]
    ]
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "nlq": "Which headphone model has the highest price?",
    "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
        "SELECT h1.model FROM headphone AS h1 WHERE NOT EXISTS (SELECT 1 FROM headphone AS h2 WHERE h2.price > h1.price)",
        "SELECT model FROM headphone WHERE price = (SELECT MAX(price) FROM headphone)",
        "SELECT h.model FROM headphone h JOIN (SELECT MAX(price) AS max_price FROM headphone) hp ON h.price = hp.max_price",
        "SELECT model FROM (SELECT model, RANK() OVER (ORDER BY price DESC) AS rank FROM headphone) WHERE rank = 1",
        "SELECT model FROM headphone AS h WHERE price = (SELECT MAX(price) FROM headphone WHERE headphone_id = h.headphone_id)",
        "WITH MaxPrice AS (SELECT MAX(price) AS price FROM headphone) SELECT model FROM headphone, MaxPrice WHERE headphone.price = MaxPrice.price"
      ]
    ]
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "nlq": "List all different headphone models in the alphabetical order.",
    "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
    "infer_predictions": [
      [
        "SELECT DISTINCT model FROM headphone ORDER BY model ASC",
        "SELECT model FROM headphone GROUP BY model ORDER BY model",
        "SELECT * FROM (SELECT DISTINCT model FROM headphone) ORDER BY model",
        "SELECT model FROM headphone WHERE model IN (SELECT DISTINCT model FROM headphone) ORDER BY model",
        "SELECT h.model FROM headphone h GROUP BY h.model ORDER BY h.model",
        "SELECT DISTINCT model AS SortedModels FROM headphone ORDER BY SortedModels",
        "SELECT model FROM (SELECT DISTINCT model FROM headphone) ORDER BY model ASC",
        "SELECT DISTINCT h.model FROM headphone h ORDER BY h.model ASC"
      ]
    ]
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "nlq": "Return the list of distinct headphone models ordered alphabetically.",
    "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
    "infer_predictions": [
      [
        "SELECT DISTINCT model FROM headphone ORDER BY model ASC",
        "SELECT model FROM headphone GROUP BY model ORDER BY model ASC",
        "SELECT DISTINCT h.model FROM headphone h ORDER BY h.model",
        "SELECT h.model FROM headphone h GROUP BY h.model ORDER BY h.model ASC",
        "SELECT model FROM (SELECT DISTINCT model FROM headphone) ORDER BY model ASC",
        "SELECT model FROM headphone WHERE headphone_id IN (SELECT DISTINCT headphone_id FROM headphone) ORDER BY model ASC",
        "SELECT DISTINCT model FROM (SELECT model FROM headphone) ORDER BY model ASC"
      ]
    ]
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "nlq": "Which headphone class is the most common one?",
    "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT class FROM headphone GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT h.class FROM headphone h GROUP BY h.class ORDER BY COUNT(h.class) DESC LIMIT 1",
        "SELECT class AS MostCommonClass FROM headphone GROUP BY class ORDER BY COUNT(class) DESC LIMIT 1",
        "SELECT class FROM (SELECT class, COUNT(*) as freq FROM headphone GROUP BY class) AS freq_table ORDER BY freq DESC LIMIT 1",
        "SELECT class FROM headphone GROUP BY class ORDER BY COUNT(headphone_id) DESC LIMIT 1",
        "SELECT h.class FROM (SELECT class, COUNT(*) as total FROM headphone GROUP BY class ORDER BY total DESC) h LIMIT 1",
        "SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.class) = (SELECT MAX(freq) FROM (SELECT COUNT(*) freq FROM headphone GROUP BY class) sub)",
        "SELECT class FROM headphone GROUP BY class HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) count FROM headphone GROUP BY class) subquery)",
        "SELECT h.class FROM headphone h INNER JOIN (SELECT class, COUNT(*) counts FROM headphone GROUP BY class ORDER BY counts DESC LIMIT 1) hl ON h.class = hl.class GROUP BY h.class"
      ]
    ]
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "nlq": "Which headphone class contains the most headphones?",
    "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT class FROM headphone GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT h.class FROM headphone h GROUP BY h.class ORDER BY COUNT(h.class) DESC LIMIT 1",
        "SELECT class FROM (SELECT class, COUNT(*) AS num FROM headphone GROUP BY class) ORDER BY num DESC LIMIT 1",
        "SELECT MAX(class) FROM (SELECT class, COUNT(*) AS total FROM headphone GROUP BY class)",
        "SELECT class, MAX(cnt) FROM (SELECT class, COUNT(*) AS cnt FROM headphone GROUP BY class)",
        "WITH CountClasses AS (SELECT class, COUNT(headphone_id) as NumHeadphones FROM headphone GROUP BY class) SELECT class FROM CountClasses ORDER BY NumHeadphones DESC LIMIT 1",
        "SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) = (SELECT MAX(count) FROM (SELECT class, COUNT(headphone_id) AS count FROM headphone GROUP BY class))",
        "SELECT x.class FROM (SELECT class, COUNT(*) AS cnt FROM headphone GROUP BY class) x WHERE x.cnt = (SELECT MAX(cnt) FROM (SELECT class, COUNT(*) AS cnt FROM headphone GROUP BY class) y)"
      ]
    ]
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "nlq": "Which headphone class does have more than two headphones?",
    "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) > 2",
        "SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2",
        "SELECT class FROM (SELECT class FROM headphone GROUP BY class, headphone_id) GROUP BY class HAVING COUNT(*) > 2",
        "SELECT DISTINCT class FROM (SELECT class, COUNT(*) AS cnt FROM headphone GROUP BY class HAVING cnt > 2)",
        "SELECT class FROM headphone WHERE class IN (SELECT class FROM headphone GROUP BY class HAVING COUNT(DISTINCT headphone_id) > 2)",
        "SELECT h.class FROM headphone h WHERE EXISTS (SELECT 1 FROM headphone WHERE class = h.class GROUP BY class HAVING COUNT(*) > 2)",
        "SELECT h.class FROM headphone h WHERE (SELECT COUNT(*) FROM headphone WHERE class = h.class) > 2 GROUP BY h.class",
        "SELECT x.class FROM (SELECT class, COUNT(*) AS cnt FROM headphone GROUP BY class) x WHERE x.cnt > 2",
        "SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(DISTINCT h.headphone_id) > 2",
        "SELECT h.class FROM headphone h WHERE (SELECT COUNT(headphone_id) FROM headphone h2 WHERE h2.class = h.class) > 2 GROUP BY h.class"
      ]
    ]
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "nlq": "Find the headphone class that does not contain more than two headphones.",
    "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(DISTINCT h.headphone_id) <= 2",
        "SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) <= 2",
        "SELECT DISTINCT class FROM headphone WHERE class IN (SELECT class FROM headphone GROUP BY class HAVING COUNT(*) <= 2)",
        "WITH Counts AS (SELECT class, COUNT(*) AS NumHeadphones FROM headphone GROUP BY class) SELECT class FROM Counts WHERE NumHeadphones <= 2",
        "SELECT class FROM (SELECT class, COUNT(*) num FROM headphone GROUP BY class) WHERE num <= 2",
        "SELECT h.class FROM headphone h WHERE h.class IN (SELECT class FROM headphone GROUP BY class HAVING COUNT(headphone_id) <= 2)",
        "SELECT class FROM headphone h1 WHERE 2 >= (SELECT COUNT(*) FROM headphone h2 WHERE h1.class = h2.class GROUP BY class)",
        "WITH ClassCounts AS (SELECT class, COUNT(headphone_id) as Count FROM headphone GROUP BY class) SELECT class FROM ClassCounts WHERE Count <= 2"
      ]
    ]
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "nlq": "Find the number of headphones with a price higher than 200 for each class.",
    "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
    "infer_predictions": [
      [
        "SELECT class, COUNT(*) FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT class, COUNT(headphone_id) AS count FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT h.class, COUNT(h.headphone_id) FROM headphone h WHERE h.price > 200 GROUP BY h.class",
        "SELECT class, COUNT(*) AS NumberOfHeadphones FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT class, COUNT(*) FROM headphone GROUP BY class HAVING price > 200",
        "SELECT headphone.class, COUNT(headphone.headphone_id) FROM headphone WHERE headphone.price > 200 GROUP BY headphone.class",
        "SELECT h.class, COUNT(*) FROM headphone h GROUP BY h.class HAVING h.price > 200",
        "SELECT class, COUNT(*) AS total FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT class, COUNT(headphone_id) FROM headphone GROUP BY class HAVING price > 200"
      ]
    ]
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "nlq": "How many headphones cost more than 200 for each headphone class?",
    "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
    "infer_predictions": [
      [
        "SELECT class, COUNT(*) FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT h.class, COUNT(*) AS total FROM headphone h WHERE h.price > 200 GROUP BY h.class",
        "SELECT class, COUNT(headphone_id) FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT h.class, COUNT(h.headphone_id) AS count FROM headphone h WHERE h.price > 200 GROUP BY h.class",
        "SELECT class, COUNT(*) AS num FROM headphone WHERE price > 200 GROUP BY class",
        "SELECT headphone.class, COUNT(*) AS Count FROM headphone WHERE headphone.price > 200 GROUP BY headphone.class",
        "SELECT h.class, COUNT(h.headphone_id) FROM headphone h WHERE h.price > 200 GROUP BY h.class"
      ]
    ]
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "nlq": "how many different earpads are there?",
    "gold": "SELECT count(DISTINCT earpads) FROM headphone",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT earpads) FROM headphone;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT earpads FROM headphone);",
        "SELECT COUNT(*) FROM (SELECT earpads FROM headphone GROUP BY earpads);",
        "SELECT COUNT(DISTINCT h.earpads) FROM headphone h;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT h.earpads FROM headphone h);",
        "SELECT COUNT(h.earpads) FROM (SELECT DISTINCT earpads FROM headphone) AS h;"
      ]
    ]
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "nlq": "Count the number of different earpads.",
    "gold": "SELECT count(DISTINCT earpads) FROM headphone",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT earpads) FROM headphone",
        "SELECT COUNT(*) FROM (SELECT DISTINCT earpads FROM headphone)",
        "SELECT COUNT(earpads) FROM (SELECT DISTINCT earpads FROM headphone)",
        "SELECT COUNT(*) FROM (SELECT earpads FROM headphone GROUP BY earpads)",
        "SELECT COUNT(DISTINCT h.earpads) FROM headphone h",
        "SELECT COUNT(*) FROM (SELECT h.earpads FROM headphone h GROUP BY h.earpads)",
        "SELECT COUNT(earpads) FROM (SELECT DISTINCT H.earpads FROM headphone AS H)"
      ]
    ]
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "nlq": "Find the top 2 earpads that are mostly used.",
    "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
    "infer_predictions": [
      [
        "SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(*) DESC LIMIT 2",
        "SELECT h.earpads FROM headphone h GROUP BY h.earpads ORDER BY COUNT(h.earpads) DESC LIMIT 2",
        "SELECT top_earpads.earpads FROM (SELECT earpads, COUNT(earpads) AS popularity FROM headphone GROUP BY earpads) AS top_earpads ORDER BY top_earpads.popularity DESC LIMIT 2",
        "SELECT earpads FROM (SELECT earpads FROM headphone) AS subquery GROUP BY earpads ORDER BY COUNT(earpads) DESC LIMIT 2",
        "SELECT earpads FROM headphone WHERE earpads IN (SELECT earpads FROM headphone GROUP BY earpads ORDER BY COUNT(*) DESC LIMIT 2)",
        "WITH RankedEarpads AS (SELECT earpads, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM headphone GROUP BY earpads) SELECT earpads FROM RankedEarpads WHERE rank <= 2",
        "SELECT DISTINCT earpads FROM headphone ORDER BY (SELECT COUNT(*) FROM headphone AS h2 WHERE h2.earpads = headphone.earpads) DESC LIMIT 2",
        "SELECT DISTINCT sub.earpads FROM (SELECT earpads, COUNT(*) as repeated FROM headphone GROUP BY earpads ORDER BY repeated DESC) AS sub WHERE sub.repeated IN (SELECT MAX(repeated) FROM (SELECT earpads, COUNT(*) as repeated from headphone GROUP BY earpads) AS repeat_max GROUP BY EARPADS ORDER BY repeated DESC LIMIT 2)",
        "SELECT DISTINCT h.earpads FROM headphone h JOIN (SELECT headphone_id, COUNT(earpads) AS uses FROM headphone GROUP BY earpads) AS counts ON counts.headphone_id = h.headphone_id ORDER BY counts.uses DESC LIMIT 2",
        "WITH Popularity AS (SELECT earpads, COUNT(*) AS cnt FROM headphone GROUP BY earpads) SELECT earpads FROM Popularity ORDER BY cnt DESC LIMIT 2"
      ]
    ]
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "nlq": "What are the top 2 earpads in terms of the number of headphones using them?",
    "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
    "infer_predictions": [
      [
        "SELECT earpads, COUNT(*) AS total FROM headphone GROUP BY earpads ORDER BY total DESC LIMIT 2",
        "SELECT h.earpads, COUNT(headphone_id) AS count FROM headphone h GROUP BY h.earpads ORDER BY count DESC LIMIT 2",
        "SELECT h.earpads, COUNT(*) FROM headphone h GROUP BY h.earpads ORDER BY COUNT(*) DESC LIMIT 2",
        "SELECT earpads, COUNT(1) FROM headphone GROUP BY earpads ORDER BY COUNT(1) DESC LIMIT 2",
        "SELECT h.earpads, COUNT(h.headphone_id) FROM headphone AS h GROUP BY h.earpads ORDER BY COUNT(h.headphone_id) DESC LIMIT 2",
        "SELECT earpads as Type, COUNT(headphone_id) as Count FROM headphone GROUP BY Type ORDER BY Count DESC LIMIT 2",
        "SELECT COUNT(earpads) as Total, earpads FROM headphone GROUP BY earpads ORDER BY Total DESC LIMIT 2",
        "SELECT earpads, COUNT(*) total_count FROM headphone GROUP BY earpads HAVING total_count > 0 ORDER BY total_count DESC LIMIT 2",
        "SELECT h.earpads, COUNT(*) FROM headphone h GROUP BY h.earpads HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC LIMIT 2"
      ]
    ]
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "nlq": "What are the model, class, and construction of the cheapest headphone?",
    "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)",
        "SELECT h.model, h.class, h.construction FROM headphone h ORDER BY h.price LIMIT 1",
        "SELECT h1.model, h1.class, h1.construction FROM headphone h1 WHERE h1.price = (SELECT MIN(price) FROM headphone)",
        "SELECT T.model, T.class, T.construction FROM (SELECT * FROM headphone ORDER BY price ASC LIMIT 1) T",
        "SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price IN (SELECT MIN(price) FROM headphone)",
        "SELECT model, class, construction FROM headphone WHERE price = (SELECT price FROM headphone ORDER BY price LIMIT 1)"
      ]
    ]
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "nlq": "Find the model, class, and construction of the headphone with the lowest price.",
    "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model, class, construction FROM headphone WHERE price = (SELECT MIN(price) FROM headphone)",
        "SELECT h.model, h.class, h.construction FROM headphone AS h ORDER BY h.price ASC LIMIT 1",
        "SELECT model, class, construction FROM headphone WHERE price IN (SELECT MIN(price) FROM headphone)",
        "SELECT h1.model, h1.class, h1.construction FROM headphone h1 WHERE h1.price = (SELECT MIN(h2.price) FROM headphone h2)",
        "SELECT model, class, construction FROM headphone GROUP BY price HAVING price = MIN(price)",
        "SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(price) FROM headphone h2)",
        "SELECT model, class, construction FROM (SELECT model, class, construction, RANK() OVER (ORDER BY price ASC) AS rank FROM headphone) WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "nlq": "Find the average price for each headphone construction.",
    "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
    "infer_predictions": [
      [
        "SELECT construction, AVG(price) FROM headphone GROUP BY construction",
        "SELECT construction, AVG(price) AS average_price FROM headphone GROUP BY construction",
        "SELECT hp.construction, AVG(hp.price) AS AvgPrice FROM headphone AS hp GROUP BY hp.construction",
        "SELECT h.construction, AVG(h.price) FROM headphone h GROUP BY h.construction",
        "SELECT construction, AVG(price) AS avg_price FROM headphone GROUP BY construction",
        "SELECT hp.construction, AVG(hp.price) FROM headphone hp GROUP BY hp.construction",
        "SELECT DISTINCT construction, AVG(price) OVER (PARTITION BY construction) FROM headphone",
        "SELECT headphone.construction, AVG(headphone.price) AS AvgPrice FROM headphone GROUP BY headphone.construction"
      ]
    ]
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "nlq": "How much does headphones cost on average for each headphone construction?",
    "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
    "infer_predictions": [
      [
        "SELECT construction, AVG(price) AS average_price FROM headphone GROUP BY construction",
        "SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction",
        "SELECT construction, AVG(price) FROM headphone GROUP BY headphone.construction",
        "SELECT headphone.construction, AVG(headphone.price) AS average_price FROM headphone GROUP BY headphone.construction",
        "SELECT construction, AVG(price) AS average_price FROM headphone GROUP BY 1",
        "SELECT h.construction, AVG(price) FROM headphone AS h GROUP BY 1",
        "SELECT construction, (SELECT AVG(price) FROM headphone AS sub WHERE sub.construction = headphone.construction) AS average_price FROM headphone GROUP BY construction",
        "SELECT DISTINCT construction, AVG(price) OVER (PARTITION BY construction) FROM headphone"
      ]
    ]
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "nlq": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
    "infer_predictions": [
      [
        "SELECT DISTINCT h.class FROM headphone h WHERE EXISTS (SELECT 1 FROM headphone WHERE class = h.class AND earpads = 'Bowls') AND EXISTS (SELECT 1 FROM headphone WHERE class = h.class AND earpads = 'Comfort Pads')",
        "SELECT h.class FROM headphone h JOIN headphone h2 ON h.class = h2.class WHERE h.earpads = 'Bowls' AND h2.earpads = 'Comfort Pads' GROUP BY h.class",
        "SELECT class FROM (SELECT class FROM headphone WHERE earpads = 'Bowls') AS A INTERSECT SELECT class FROM (SELECT class FROM headphone WHERE earpads = 'Comfort Pads') AS B",
        "SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads'",
        "SELECT h1.class FROM headphone h1 WHERE EXISTS (SELECT 1 FROM headphone h2 WHERE h2.class = h1.class AND h2.earpads = 'Comfort Pads') AND h1.earpads = 'Bowls'",
        "SELECT hp.class FROM headphone hp WHERE hp.class IN (SELECT hp1.class FROM headphone hp1 WHERE hp1.earpads = 'Bowls') AND hp.class IN (SELECT hp2.class FROM headphone hp2 WHERE hp2.earpads = 'Comfort Pads')",
        "SELECT DISTINCT class FROM headphone WHERE class IN (SELECT class FROM headphone WHERE earpads = 'Bowls') AND class IN (SELECT class FROM headphone WHERE earpads = 'Comfort Pads')",
        "SELECT DISTINCT h.class FROM headphone h, headphone h2 WHERE h.class = h2.class AND h.earpads = 'Bowls' AND h2.earpads = 'Comfort Pads'",
        "SELECT DISTINCT h.class FROM headphone h WHERE h.class IN (SELECT class FROM headphone WHERE earpads = 'Bowls') AND h.class IN (SELECT class FROM headphone WHERE earpads = 'Comfort Pads')",
        "SELECT class FROM headphone GROUP BY class HAVING SUM(CASE WHEN earpads = 'Bowls' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN earpads = 'Comfort Pads' THEN 1 ELSE 0 END) > 0"
      ]
    ]
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "nlq": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
    "infer_predictions": [
      [
        "SELECT DISTINCT h1.class FROM headphone h1 JOIN headphone h2 ON h1.class = h2.class WHERE h1.earpads = 'Bowls' AND h2.earpads = 'Comfort Pads'",
        "SELECT class FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM headphone WHERE earpads = 'Bowls') AND headphone_id IN (SELECT headphone_id FROM headphone WHERE earpads = 'Comfort Pads')",
        "SELECT DISTINCT a.class FROM headphone a, headphone b WHERE a.class = b.class AND a.earpads = 'Bowls' AND b.earpads = 'Comfort Pads'",
        "SELECT DISTINCT class FROM (SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads')",
        "SELECT class FROM headphone WHERE earpads = 'Bowls' INTERSECT SELECT class FROM headphone WHERE earpads = 'Comfort Pads'",
        "SELECT a.class FROM headphone a INNER JOIN headphone b ON a.class = b.class WHERE a.earpads = 'Bowls' AND b.earpads = 'Comfort Pads'",
        "SELECT hp.class FROM headphone hp WHERE EXISTS (SELECT 1 FROM headphone WHERE class = hp.class AND earpads = 'Bowls') AND EXISTS (SELECT 1 FROM headphone WHERE class = hp.class AND earpads = 'Comfort Pads')",
        "SELECT h.class FROM headphone h WHERE h.earpads = 'Bowls' AND h.class IN (SELECT class FROM headphone WHERE earpads = 'Comfort Pads')",
        "SELECT DISTINCT c.class FROM headphone c JOIN headphone d ON c.class = d.class AND c.earpads = 'Bowls' AND d.earpads = 'Comfort Pads'",
        "SELECT DISTINCT class FROM headphone WHERE earpads IN ('Bowls', 'Comfort Pads') GROUP BY class HAVING COUNT(DISTINCT earpads) = 2"
      ]
    ]
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "nlq": "Which earpads never use plastic construction?",
    "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
    "infer_predictions": [
      [
        "SELECT DISTINCT H.earpads FROM headphone H WHERE H.construction != 'Plastic'",
        "SELECT H.earpads FROM headphone H WHERE NOT H.construction = 'Plastic' GROUP BY H.earpads",
        "SELECT earpads FROM headphone WHERE construction NOT LIKE 'Plastic'",
        "SELECT earpads FROM (SELECT * FROM headphone) AS H WHERE H.construction <> 'Plastic'",
        "SELECT DISTINCT H1.earpads FROM headphone H1 LEFT JOIN headphone H2 ON H1.headphone_id = H2.headphone_id WHERE H2.construction != 'Plastic'",
        "SELECT earpads FROM headphone WHERE construction IS NOT 'Plastic'",
        "SELECT DISTINCT H.earpads FROM headphone H WHERE H.construction NOT IN ('Plastic')",
        "SELECT DISTINCT earpads FROM headphone WHERE construction NOT IN ('Plastic')",
        "SELECT DISTINCT earpads FROM headphone WHERE 'Plastic' <> construction",
        "SELECT H.earpads FROM headphone H WHERE H.construction NOT LIKE '%Plastic%'"
      ]
    ]
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "nlq": "Find all earpads that do not use plastic construction.",
    "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
    "infer_predictions": [
      [
        "SELECT earpads FROM headphone WHERE construction != 'Plastic'",
        "SELECT h.earpads FROM headphone h WHERE h.construction <> 'Plastic'",
        "SELECT DISTINCT earpads FROM headphone WHERE construction NOT LIKE 'Plastic'",
        "SELECT h.earpads FROM headphone AS h WHERE h.construction NOT IN ('Plastic')",
        "SELECT earpads FROM headphone WHERE NOT (construction = 'Plastic')",
        "SELECT DISTINCT h.earpads FROM headphone h WHERE h.construction IS NOT 'Plastic'",
        "SELECT earpads FROM headphone WHERE LOWER(construction) != 'plastic'",
        "SELECT DISTINCT earpads FROM headphone WHERE UPPER(construction) <> 'PLASTIC'",
        "SELECT h.earpads FROM headphone AS h WHERE h.construction != 'Plastic' ORDER BY h.earpads",
        "SELECT earpads FROM headphone WHERE TRIM(construction) != 'Plastic'"
      ]
    ]
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "nlq": "Find the headphone models whose price is below the average price.",
    "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone)",
        "SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(price) FROM headphone)",
        "SELECT model FROM headphone WHERE price < (SELECT AVG(h.price) FROM headphone h)",
        "SELECT h1.model FROM headphone h1 WHERE h1.price < (SELECT AVG(h2.price) FROM headphone h2)",
        "SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(price) FROM headphone AS h2)",
        "SELECT model FROM headphone WHERE price < (SELECT AVG(h1.price) FROM headphone h1)",
        "SELECT model FROM headphone h WHERE h.price < (SELECT AVG(headphone.price) FROM headphone)",
        "SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2)"
      ]
    ]
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "nlq": "What are the headphone models that cost less than the average price?",
    "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone)",
        "SELECT model FROM headphone H WHERE H.price < (SELECT AVG(price) FROM headphone)",
        "SELECT H.model FROM headphone H WHERE H.price < (SELECT AVG(price) FROM headphone AS HP)",
        "SELECT DISTINCT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone GROUP BY class)",
        "SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone WHERE price > 0)",
        "SELECT H.model FROM headphone H WHERE H.price < (SELECT AVG(HP.price) FROM headphone HP WHERE HP.class = H.class)",
        "SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone WHERE model != '')",
        "SELECT model FROM headphone WHERE price < (SELECT AVG(P) FROM headphone, (SELECT AVG(price) AS P FROM headphone) AS SubQ)"
      ]
    ]
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "nlq": "Sort all store names by store open date.",
    "gold": "SELECT name FROM store ORDER BY date_opened",
    "infer_predictions": [
      [
        "SELECT name FROM store ORDER BY date_opened ASC",
        "SELECT name FROM store s ORDER BY s.date_opened ASC",
        "SELECT s.name FROM store s ORDER BY s.date_opened ASC",
        "SELECT DISTINCT s.name FROM store s ORDER BY s.date_opened"
      ]
    ]
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "nlq": "Give me a list of store names, sorted by store open date.",
    "gold": "SELECT name FROM store ORDER BY date_opened",
    "infer_predictions": [
      [
        "SELECT name FROM store ORDER BY date_opened",
        "SELECT s.name FROM store s ORDER BY s.date_opened",
        "SELECT name FROM store s ORDER BY s.date_opened",
        "SELECT store_name.name FROM store store_name ORDER BY store_name.date_opened ASC",
        "SELECT s.name FROM store s ORDER BY s.date_opened ASC"
      ]
    ]
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "nlq": "List name and parking info for the stores in the Tarzana neighborhood.",
    "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "infer_predictions": [
      [
        "SELECT name, parking FROM store WHERE neighborhood = 'Tarzana'",
        "SELECT s.name, s.parking FROM store s WHERE s.neighborhood = 'Tarzana'",
        "SELECT name, parking FROM store WHERE neighborhood LIKE 'Tarzana'",
        "SELECT name AS store_name, parking AS parking_info FROM store WHERE neighborhood = 'Tarzana'",
        "SELECT name, parking FROM store WHERE neighborhood IS 'Tarzana'"
      ]
    ]
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "nlq": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "infer_predictions": [
      [
        "SELECT name, parking FROM store WHERE neighborhood = 'Tarzana'",
        "SELECT name, parking FROM store WHERE neighborhood IN ('Tarzana')",
        "SELECT name AS store_name, parking AS parking_info FROM store WHERE neighborhood = 'Tarzana'",
        "SELECT Store.name, Store.parking FROM store AS Store WHERE Store.neighborhood = 'Tarzana'",
        "SELECT store.name, store.parking FROM store AS store WHERE store.neighborhood = 'Tarzana'",
        "SELECT s.name, s.parking FROM store s WHERE s.neighborhood = 'Tarzana'",
        "SELECT name, parking FROM store WHERE neighborhood LIKE 'Tarzana'",
        "SELECT name AS Name, parking AS Parking FROM store WHERE neighborhood = 'Tarzana'"
      ]
    ]
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "nlq": "How many different neighborhoods are there for all stores?",
    "gold": "SELECT count(DISTINCT neighborhood) FROM store",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT neighborhood) FROM store",
        "SELECT COUNT(*) FROM (SELECT DISTINCT neighborhood FROM store)",
        "SELECT COUNT(*) FROM (SELECT neighborhood FROM store GROUP BY neighborhood)",
        "SELECT COUNT(DISTINCT s.neighborhood) FROM store s",
        "SELECT COUNT(*) FROM (SELECT neighborhood FROM store) AS distinct_neighborhoods GROUP BY neighborhood",
        "SELECT COUNT(DISTINCT s.neighborhood) FROM (SELECT neighborhood FROM store) s",
        "SELECT DISTINCT COUNT(neighborhood) FROM (SELECT neighborhood FROM store GROUP BY neighborhood)",
        "SELECT COALESCE(COUNT(DISTINCT neighborhood), 0) FROM store"
      ]
    ]
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "nlq": "Count the number of distinct neighborhoods stores are located.",
    "gold": "SELECT count(DISTINCT neighborhood) FROM store",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT neighborhood) FROM store",
        "SELECT COUNT(*) FROM (SELECT DISTINCT neighborhood FROM store)",
        "SELECT COUNT(DISTINCT s.neighborhood) FROM store s",
        "SELECT COUNT(*) FROM (SELECT neighborhood FROM store GROUP BY neighborhood)",
        "SELECT COUNT(DISTINCT neighborhood) FROM store WHERE neighborhood IS NOT NULL",
        "SELECT COUNT(NEIGHBORHOOD) FROM (SELECT DISTINCT neighborhood AS NEIGHBORHOOD FROM store)",
        "SELECT COUNT(*) FROM (SELECT neighborhood FROM store) AS unique_neighborhoods GROUP BY neighborhood"
      ]
    ]
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "nlq": "find the number of stores in each neighborhood.",
    "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
    "infer_predictions": [
      [
        "SELECT neighborhood, COUNT(store_id) AS num_stores FROM store GROUP BY neighborhood",
        "SELECT neighborhood, COUNT(*) AS num_stores FROM store GROUP BY neighborhood",
        "SELECT s.neighborhood, COUNT(s.store_id) AS num_stores FROM store s GROUP BY s.neighborhood",
        "SELECT s.neighborhood, COUNT(*) FROM store s GROUP BY s.neighborhood",
        "SELECT neighborhood, COUNT(store_id) FROM store GROUP BY neighborhood",
        "SELECT neighborhood, COUNT(DISTINCT store_id) AS num_stores FROM store GROUP BY neighborhood",
        "SELECT s.neighborhood, COUNT(DISTINCT s.store_id) FROM store s GROUP BY s.neighborhood",
        "SELECT store.neighborhood, COUNT(store.store_id) AS num_stores FROM store GROUP BY store.neighborhood",
        "SELECT store.neighborhood, COUNT(*) FROM store GROUP BY store.neighborhood",
        "SELECT s.neighborhood, COUNT(s.store_id) FROM store s GROUP BY s.neighborhood"
      ]
    ]
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "nlq": "How many stores are there in each neighborhood?",
    "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
    "infer_predictions": [
      [
        "SELECT neighborhood, COUNT(store_id) as store_count FROM store GROUP BY neighborhood",
        "SELECT s.neighborhood, COUNT(s.store_id) as store_count FROM store s GROUP BY s.neighborhood",
        "SELECT neighborhood, COUNT(*) as store_count FROM store GROUP BY neighborhood",
        "SELECT neighborhood, COUNT(DISTINCT store_id) as store_count FROM store GROUP BY neighborhood",
        "SELECT s.neighborhood, COUNT(DISTINCT s.store_id) as store_count FROM store s GROUP BY s.neighborhood",
        "SELECT COUNT(store.store_id) as num_stores, name FROM store GROUP BY neighborhood",
        "SELECT COUNT(s.name), s.neighborhood as area FROM store s GROUP BY s.neighborhood",
        "SELECT store.neighborhood, COUNT(store_id) as NumberOfStores FROM store GROUP BY store.neighborhood",
        "SELECT store.neighborhood, COUNT(*) FROM store GROUP BY store.neighborhood"
      ]
    ]
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "nlq": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT S.name, SUM(ST.quantity) AS total_quantity FROM store S JOIN stock ST ON S.store_id = ST.store_id GROUP BY S.store_id ORDER BY total_quantity DESC LIMIT 1",
        "SELECT name, total_quantity FROM (SELECT name, SUM(quantity) AS total_quantity FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY store.store_id ORDER BY SUM(quantity) DESC) LIMIT 1",
        "SELECT name, total_headphones FROM (SELECT name, SUM(quantity) AS total_headphones FROM store INNER JOIN stock ON store.store_id = stock.store_id GROUP BY name ORDER BY total_headphones DESC) AS sub_query LIMIT 1",
        "SELECT name, total_quantity FROM (SELECT name, SUM(stock.quantity) AS total_quantity FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY store.store_id ORDER BY total_quantity DESC LIMIT 1) AS best_store",
        "SELECT name, SUM(quantity) AS headphone_count FROM store LEFT JOIN stock ON store.store_id = stock.store_id GROUP BY store.store_id ORDER BY headphone_count DESC LIMIT 1",
        "SELECT store.name, MAX(total_quantity) AS quantity FROM store JOIN (SELECT store_id, SUM(quantity) AS total_quantity FROM stock GROUP BY store_id) AS totals ON store.store_id = totals.store_id GROUP BY store.name",
        "SELECT data.name, data.total_headphones FROM (SELECT name, SUM(quantity) total_headphones FROM store INNER JOIN stock ON store.store_id = stock.store_id GROUP BY store.store_id) AS data ORDER BY data.total_headphones DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "nlq": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT s.name, SUM(st.quantity) FROM store s JOIN stock st ON s.store_id = st.store_id GROUP BY s.name",
        "SELECT store.name, SUM(stock.quantity) AS total_quantity FROM store JOIN stock ON store.store_id = stock.store_id GROUP BY store.name",
        "SELECT name, TOTAL(quantity) FROM store INNER JOIN stock ON store.store_id = stock.store_id GROUP BY name",
        "SELECT DISTINCT s.name, (SELECT SUM(quantity) FROM stock WHERE stock.store_id = s.store_id) FROM store s",
        "SELECT name, SUM(quantity) AS total_quantity FROM store, stock WHERE store.store_id = stock.store_id GROUP BY name",
        "SELECT s.name, (SELECT SUM(quantity) FROM stock st WHERE st.store_id = s.store_id) FROM store s JOIN stock st USING(store_id) GROUP BY s.name",
        "SELECT s.name AS store_name, SUM(st.quantity) AS total_stock FROM stock st, store s WHERE s.store_id = st.store_id GROUP BY s.name",
        "SELECT s.name, (SELECT SUM(st.quantity) FROM stock st WHERE st.store_id = s.store_id GROUP BY st.store_id) AS Quantity FROM store s",
        "SELECT name, (SELECT SUM(st.quantity) FROM stock AS st WHERE st.store_id = store.store_id) AS stock_sum FROM store GROUP BY store_id"
      ]
    ]
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "nlq": "Find the name of stores which have no headphone in stock.",
    "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
    "infer_predictions": [
      [
        "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id WHERE st.quantity IS NULL OR st.quantity = 0",
        "SELECT s.name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id AND st.quantity > 0)",
        "SELECT s.name FROM store s WHERE s.store_id NOT IN (SELECT DISTINCT st.store_id FROM stock st WHERE st.quantity > 0)",
        "SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id GROUP BY s.store_id HAVING COALESCE(SUM(st.quantity), 0) = 0",
        "SELECT s.name FROM store s WHERE s.store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT s.name FROM store AS s WHERE NOT EXISTS (SELECT NULL FROM stock AS st WHERE st.store_id = s.store_id AND st.quantity > 0)",
        "SELECT name FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)",
        "SELECT name FROM store s WHERE s.store_id NOT IN (SELECT store_id FROM stock WHERE stock.quantity > 0)",
        "SELECT s.name FROM store AS s LEFT OUTER JOIN stock AS st ON s.store_id = st.store_id WHERE st.quantity IS NULL OR st.quantity = 0"
      ]
    ]
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "nlq": "Which stores do not have any headphones in stock? Give me the store names.",
    "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
    "infer_predictions": [
      [
        "SELECT s.name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id)",
        "SELECT name FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)",
        "SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id WHERE st.headphone_id IS NULL",
        "SELECT s.name FROM store s WHERE s.store_id NOT IN (SELECT store_id FROM stock)",
        "SELECT name FROM store EXCEPT SELECT s.name FROM store s JOIN stock st ON s.store_id = st.store_id WHERE st.quantity > 0",
        "SELECT s.name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id AND st.quantity > 0)",
        "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity IS NOT NULL AND quantity > 0)",
        "SELECT s.name FROM store s WHERE s.store_id NOT IN (SELECT DISTINCT store_id FROM stock st WHERE st.quantity > 0)",
        "SELECT s.name FROM store s LEFT JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.headphone_id IS NULL",
        "SELECT DISTINCT s.name FROM store s WHERE NOT EXISTS (SELECT * FROM stock st WHERE st.store_id = s.store_id AND quantity > 0)"
      ]
    ]
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "nlq": "Which headphone models do not have any stock in any store?",
    "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "SELECT h.model FROM headphone h LEFT JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.headphone_id IS NULL",
        "SELECT h.model FROM headphone as h WHERE NOT EXISTS (SELECT 1 FROM stock as s WHERE s.headphone_id = h.headphone_id)",
        "SELECT model FROM headphone EXCEPT SELECT model FROM headphone JOIN stock ON headphone.headphone_id = stock.headphone_id",
        "SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s)",
        "SELECT model FROM headphone h WHERE h.headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "SELECT h.model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.headphone_id = h.headphone_id)",
        "SELECT h.model FROM headphone h LEFT OUTER JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.store_id IS NULL",
        "SELECT DISTINCT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT s.headphone_id FROM stock s)"
      ]
    ]
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "nlq": "Find the headphone models that are not in stock in any store.",
    "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
        "SELECT h.model FROM headphone h LEFT JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.headphone_id IS NULL",
        "SELECT model FROM headphone EXCEPT SELECT h.model FROM headphone h INNER JOIN stock s ON h.headphone_id = s.headphone_id",
        "SELECT model FROM headphone WHERE NOT EXISTS (SELECT 1 FROM stock WHERE stock.headphone_id = headphone.headphone_id)",
        "SELECT h.model FROM headphone h WHERE h.headphone_id NOT IN (SELECT DISTINCT headphone_id FROM stock)",
        "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock GROUP BY headphone_id)",
        "SELECT DISTINCT h.model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.headphone_id = h.headphone_id)",
        "SELECT model FROM headphone h LEFT OUTER JOIN stock s ON h.headphone_id = s.headphone_id WHERE s.store_id IS NULL",
        "SELECT h.model FROM headphone h WHERE NOT EXISTS (SELECT NULL FROM stock s WHERE s.headphone_id = h.headphone_id)"
      ]
    ]
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "nlq": "Which headphone model has the largest quantity of stock across all the stores?",
    "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT headphone.model FROM headphone JOIN stock ON headphone.headphone_id = stock.headphone_id GROUP BY headphone.model ORDER BY SUM(stock.quantity) DESC LIMIT 1",
        "SELECT model FROM headphone WHERE headphone_id = (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY SUM(quantity) DESC LIMIT 1)",
        "SELECT H.model FROM headphone H INNER JOIN stock S ON H.headphone_id = S.headphone_id GROUP BY H.model ORDER BY SUM(S.quantity) DESC LIMIT 1",
        "SELECT model FROM (SELECT model, SUM(quantity) as total_quantity FROM headphone JOIN stock ON headphone.headphone_id = stock.headphone_id GROUP BY model) ORDER BY total_quantity DESC LIMIT 1",
        "SELECT H.model FROM (SELECT headphone_id, SUM(quantity) as total_quantity FROM stock GROUP BY headphone_id ORDER BY total_quantity DESC LIMIT 1) as MaxStock JOIN headphone H ON MaxStock.headphone_id = H.headphone_id",
        "SELECT model FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY SUM(quantity) DESC LIMIT 1)",
        "SELECT (SELECT model FROM headphone WHERE headphone_id = Sub.max_id) FROM (SELECT headphone_id AS max_id FROM stock GROUP BY headphone_id ORDER BY SUM(quantity) DESC LIMIT 1) Sub",
        "SELECT model FROM headphone INNER JOIN (SELECT headphone_id, SUM(quantity) AS total_qty FROM stock GROUP BY headphone_id ORDER BY total_qty DESC LIMIT 1) T ON headphone.headphone_id = T.headphone_id"
      ]
    ]
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "nlq": "Find the headphone model whose total quantity in stock is the largest.",
    "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT model FROM headphone WHERE headphone_id = (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY SUM(quantity) DESC LIMIT 1)",
        "SELECT h.model FROM headphone h JOIN stock s ON h.headphone_id = s.headphone_id GROUP BY h.headphone_id ORDER BY SUM(s.quantity) DESC LIMIT 1",
        "SELECT model FROM headphone WHERE headphone_id IN (SELECT headphone_id FROM stock GROUP BY headphone_id HAVING SUM(quantity) = (SELECT MAX(total_quantity) FROM (SELECT SUM(quantity) AS total_quantity FROM stock GROUP BY headphone_id)))",
        "SELECT h.model FROM headphone h WHERE h.headphone_id IN (SELECT s.headphone_id FROM stock s GROUP BY s.headphone_id HAVING SUM(s.quantity) = (SELECT MAX(sq.total) FROM (SELECT SUM(quantity) AS total FROM stock GROUP BY headphone_id) sq))",
        "SELECT (SELECT model FROM headphone WHERE headphone_id = sq.headphone_id) FROM (SELECT headphone_id, SUM(quantity) AS total_quantity FROM stock GROUP BY headphone_id ORDER BY total_quantity DESC LIMIT 1) sq",
        "SELECT model FROM headphone WHERE headphone_id = (SELECT s.headphone_id FROM stock s GROUP BY s.headphone_id ORDER BY SUM(s.quantity) DESC LIMIT 1)",
        "SELECT h.model FROM headphone h INNER JOIN (SELECT headphone_id, SUM(quantity) AS total_quantity FROM stock GROUP BY headphone_id ORDER BY total_quantity DESC LIMIT 1) sq ON h.headphone_id = sq.headphone_id",
        "SELECT model FROM headphone WHERE headphone_id = (SELECT headphone_id FROM (SELECT headphone_id, SUM(quantity) AS summed_quantity FROM stock GROUP BY headphone_id ORDER BY summed_quantity DESC LIMIT 1))",
        "SELECT h.model FROM headphone h, stock s WHERE h.headphone_id = s.headphone_id GROUP BY h.headphone_id ORDER BY SUM(s.quantity) DESC LIMIT 1",
        "SELECT model FROM headphone h WHERE h.headphone_id = (SELECT headphone_id FROM stock GROUP BY headphone_id ORDER BY SUM(quantity) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "nlq": "How many headphones are stored in the Woodman store?",
    "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
    "infer_predictions": [
      [
        "SELECT SUM(stock.quantity) FROM stock JOIN store ON store.store_id = stock.store_id WHERE store.name = 'Woodman'",
        "SELECT SUM(quantity) FROM stock WHERE store_id IN (SELECT store_id FROM store WHERE name = 'Woodman')",
        "SELECT TOTAL(stock.quantity) FROM stock INNER JOIN store ON stock.store_id = store.store_id AND store.name = 'Woodman'",
        "SELECT COUNT(*) FROM stock, store WHERE stock.store_id = store.store_id AND store.name = 'Woodman'",
        "SELECT COUNT(stock.quantity) FROM stock LEFT JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman'",
        "SELECT COUNT(DISTINCT stock.headphone_id) FROM stock INNER JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman'",
        "SELECT SUM(s.quantity) FROM stock s JOIN store st ON s.store_id = st.store_id WHERE st.name = 'Woodman'",
        "SELECT COUNT(*) FROM stock s, store st WHERE s.store_id = st.store_id AND st.name = 'Woodman'",
        "SELECT COUNT(DISTINCT s.headphone_id) FROM stock s INNER JOIN store st ON s.store_id = st.store_id WHERE st.name = 'Woodman'",
        "SELECT SUM(DISTINCT s.quantity) FROM stock s, store st WHERE s.store_id = st.store_id AND st.name = 'Woodman'"
      ]
    ]
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "nlq": "Find the total quantity of headphones stored in the Woodman store.",
    "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
    "infer_predictions": [
      [
        "SELECT SUM(s.quantity) FROM stock s JOIN store st ON st.store_id = s.store_id WHERE st.name = 'Woodman'",
        "SELECT SUM(quantity) FROM stock WHERE store_id IN (SELECT store_id FROM store WHERE name = 'Woodman')",
        "SELECT TOTAL(stock.quantity) FROM stock INNER JOIN store ON store.store_id = stock.store_id WHERE store.name = 'Woodman'",
        "SELECT SUM(stock.quantity) FROM stock JOIN store ON store.store_id = stock.store_id AND store.name = 'Woodman'",
        "SELECT SUM(s.quantity) AS total_quantity FROM stock s, store st WHERE s.store_id = st.store_id AND st.name = 'Woodman'",
        "SELECT SUM(quantity) FROM stock, store WHERE stock.store_id = store.store_id AND store.name = 'Woodman'",
        "SELECT TOTAL(quantity) FROM stock INNER JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman'",
        "SELECT SUM(q.quantity) FROM (SELECT quantity FROM stock JOIN store ON stock.store_id = store.store_id WHERE store.name = 'Woodman') q",
        "SELECT SUM(quantity) FROM (SELECT quantity FROM stock s JOIN store st ON s.store_id = st.store_id WHERE st.name = 'Woodman')",
        "SELECT SUM(q) FROM (SELECT quantity AS q FROM stock JOIN store ON store.store_id = stock.store_id WHERE store.name = 'Woodman')"
      ]
    ]
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "nlq": "Which neighborhood does not have any headphone in stock?",
    "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
    "infer_predictions": [
      [
        "SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT s.neighborhood FROM store s LEFT JOIN stock k ON s.store_id = k.store_id WHERE k.headphone_id IS NULL OR k.quantity = 0",
        "SELECT neighborhood FROM store EXCEPT SELECT neighborhood FROM store WHERE store_id IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock k WHERE k.store_id = s.store_id AND k.quantity > 0)",
        "SELECT s.neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock WHERE store_id = s.store_id AND quantity > 0)",
        "SELECT s.neighborhood FROM store s LEFT JOIN stock k ON s.store_id = k.store_id GROUP BY s.neighborhood HAVING SUM(k.quantity) IS NULL OR SUM(k.quantity) = 0",
        "SELECT s.neighborhood FROM store s WHERE s.store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT DISTINCT s.neighborhood FROM store s WHERE s.store_id NOT IN (SELECT store_id FROM stock k WHERE k.quantity > 0)",
        "SELECT s.neighborhood FROM store s LEFT OUTER JOIN stock k ON s.store_id = k.store_id WHERE k.quantity IS NULL OR k.quantity = 0",
        "SELECT DISTINCT s.neighborhood FROM store s WHERE s.store_id NOT IN (SELECT k.store_id FROM stock k WHERE k.quantity > 0)"
      ]
    ]
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "nlq": "Find the neighborhood where no headphones are in stock.",
    "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
    "infer_predictions": [
      [
        "SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity > 0)",
        "SELECT neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock WHERE store_id = s.store_id AND quantity > 0)",
        "SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT DISTINCT store_id FROM stock WHERE quantity > 0)",
        "SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id WHERE st.quantity IS NULL",
        "SELECT s.neighborhood FROM store s WHERE s.store_id NOT IN (SELECT st.store_id FROM stock st WHERE st.quantity > 0)",
        "SELECT neighborhood FROM store WHERE store_id NOT IN (SELECT store_id FROM stock WHERE quantity IS NOT NULL AND quantity > 0)",
        "SELECT s.neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.store_id = s.store_id AND st.quantity > 0)",
        "SELECT s.neighborhood FROM store s LEFT OUTER JOIN stock st ON s.store_id = st.store_id AND st.quantity > 0 WHERE st.headphone_id IS NULL",
        "SELECT s.neighborhood FROM store s LEFT JOIN stock st ON s.store_id = st.store_id GROUP BY s.neighborhood HAVING SUM(st.quantity) IS NULL OR SUM(st.quantity) = 0"
      ]
    ]
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "nlq": "How many authors do we have?",
    "gold": "SELECT count(*) FROM Author",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT author_id) FROM author",
        "SELECT COUNT(*) FROM (SELECT DISTINCT author_id FROM author)",
        "SELECT COUNT(author_id) FROM (SELECT DISTINCT author_id FROM author)",
        "SELECT COUNT(1) FROM (SELECT author_id FROM author GROUP BY author_id)",
        "SELECT COUNT(author_id) FROM author GROUP BY author_id HAVING COUNT(*) >= 1",
        "SELECT COUNT(author_id) FROM (SELECT author_id FROM author) a",
        "SELECT COUNT(*) FROM author WHERE author_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "nlq": "Count the number of authors.",
    "gold": "SELECT count(*) FROM Author",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM author",
        "SELECT COUNT(author_id) FROM author",
        "SELECT COUNT(author.name) FROM author",
        "SELECT COUNT(1) FROM author",
        "SELECT COUNT(*) FROM (SELECT author_id FROM author)",
        "SELECT COUNT(DISTINCT author.email) FROM author",
        "SELECT COUNT(*) FROM (SELECT DISTINCT author_id FROM author)"
      ]
    ]
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "nlq": "How many papers do we have?",
    "gold": "SELECT count(*) FROM Paper",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paper",
        "SELECT COUNT(paper.paper_id) FROM paper",
        "SELECT COUNT(DISTINCT paper.title) FROM paper",
        "SELECT COUNT(1) FROM paper",
        "SELECT COUNT(paper_id) AS NumberOfPapers FROM paper",
        "SELECT COUNT(paper.year) FROM paper WHERE paper_id IS NOT NULL",
        "SELECT COUNT(DISTINCT paper_id) FROM paper WHERE paper_id IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT paper_id FROM paper)"
      ]
    ]
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "nlq": "Count the number of papers.",
    "gold": "SELECT count(*) FROM Paper",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paper",
        "SELECT COUNT(paper_id) FROM paper",
        "SELECT COUNT(1) FROM paper",
        "SELECT SUM(1) FROM paper",
        "SELECT SUM(CASE WHEN paper_id IS NOT NULL THEN 1 ELSE 0 END) FROM paper",
        "SELECT COUNT(*) FROM (SELECT paper_id FROM paper) AS sub",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper_id FROM paper) AS subquery"
      ]
    ]
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "nlq": "How many affiliations do we have?",
    "gold": "SELECT count(*) FROM Affiliation",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM affiliation;",
        "SELECT COUNT(affiliation.affiliation_id) FROM affiliation;",
        "SELECT COUNT(DISTINCT name) FROM affiliation;",
        "SELECT COUNT(1) FROM affiliation;",
        "SELECT COUNT(DISTINCT affiliation.address) FROM affiliation;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT affiliation_id FROM affiliation);",
        "SELECT SUM(1) FROM (SELECT DISTINCT affiliation_id FROM affiliation);",
        "SELECT COUNT(*) FROM (SELECT affiliation_id FROM affiliation GROUP BY affiliation_id);"
      ]
    ]
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "nlq": "Count the number of affiliations.",
    "gold": "SELECT count(*) FROM Affiliation",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM affiliation",
        "SELECT COUNT(affiliation_id) FROM affiliation",
        "SELECT COUNT(1) FROM affiliation",
        "SELECT COUNT(affiliation.name) FROM affiliation",
        "SELECT COUNT(A.name) FROM affiliation A",
        "SELECT COUNT(DISTINCT A.name) FROM affiliation A"
      ]
    ]
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "nlq": "How many papers do we have in NAACL 2000?",
    "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(paper_id) AS NumberOfPapers FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(1) FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper WHERE paper.venue = 'NAACL' AND paper.year = 2000",
        "SELECT COUNT(*) FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
        "SELECT COUNT(p.paper_id) FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
        "SELECT COUNT(*) AS total FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(p.paper_id) AS totalPapers FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000"
      ]
    ]
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "nlq": "Count the number of papers in NAACL 2000.",
    "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(paper_id) FROM paper WHERE venue = 'NAACL' AND year = 2000",
        "SELECT COUNT(1) FROM paper WHERE venue = 'NAACL' AND year = '2000'",
        "SELECT COUNT(paper_id) FROM paper WHERE venue LIKE 'NAACL' AND year = 2000",
        "SELECT COUNT(*) FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000",
        "SELECT COUNT(*) FROM paper p WHERE p.venue LIKE 'NAACL' AND p.year = 2000",
        "SELECT COUNT(p.paper_id) FROM paper p WHERE p.venue = 'NAACL' AND p.year = 2000"
      ]
    ]
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "nlq": "How many papers are published in year 2009 by Columbia University?",
    "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 AND affiliation.name = 'Columbia University'",
        "SELECT COUNT(*) FROM (SELECT paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE paper.year = 2009 AND affiliation.name = 'Columbia University' GROUP BY paper.paper_id)",
        "SELECT COUNT(*) FROM paper AS p WHERE p.year = 2009 AND p.paper_id IN (SELECT al.paper_id FROM author_list AS al JOIN affiliation AS af ON af.affiliation_id = al.affiliation_id WHERE af.name = 'Columbia University')",
        "SELECT COUNT(1) FROM (SELECT DISTINCT p.paper_id FROM paper AS p, author_list AS al, affiliation AS af WHERE p.year = 2009 AND p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Columbia University') AS dist_papers",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE p.year = 2009 AND a.name = 'Columbia University'",
        "SELECT COUNT(DISTINCT paper_id) FROM paper WHERE year = 2009 AND paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University'))",
        "SELECT COUNT(paper.paper_id) FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 AND affiliation.name = 'Columbia University' GROUP BY paper.paper_id"
      ]
    ]
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "nlq": "Count the number of papers published by Columbia University in 2009.",
    "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year = 2009",
        "SELECT COUNT(paper.paper_id) FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year = 2009 GROUP BY paper.year",
        "SELECT COUNT(*) FROM (SELECT paper.paper_id FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Columbia University' AND paper.year = 2009 GROUP BY paper.paper_id)",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p JOIN author_list a ON p.paper_id = a.paper_id JOIN affiliation f ON a.affiliation_id = f.affiliation_id WHERE f.name = 'Columbia University' AND p.year = 2009",
        "SELECT COUNT(DISTINCT paper_id) FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University')) AND year = 2009",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id WHERE author_list.affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University') AND paper.year = 2009)",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p, author_list al, affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Columbia University' AND p.year = 2009",
        "SELECT COUNT(paper_id) FROM (SELECT DISTINCT paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year = 2009) AS subquery",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year = 2009"
      ]
    ]
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "nlq": "List names and addresses for all affiliations.",
    "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
    "infer_predictions": [
      [
        "SELECT name, address FROM affiliation",
        "SELECT name AS AffiliationName, address AS AffiliationAddress FROM affiliation",
        "SELECT affiliation.name, affiliation.address FROM affiliation GROUP BY name, address",
        "SELECT a.name, a.address FROM affiliation a",
        "SELECT a.name AS AffiliationName, a.address AS AffiliationAddress FROM affiliation a",
        "SELECT name, address FROM affiliation ORDER BY name",
        "SELECT UPPER(name) as name, UPPER(address) as address FROM affiliation"
      ]
    ]
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "nlq": "What are the names and addresses for all affiliations?",
    "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
    "infer_predictions": [
      [
        "SELECT name, address FROM affiliation;",
        "SELECT DISTINCT af.name, af.address FROM affiliation af;",
        "SELECT name AS affiliation_name, address AS affiliation_address FROM affiliation;",
        "SELECT name AS 'Name', address AS 'Address' FROM affiliation;",
        "SELECT * FROM (SELECT name, address FROM affiliation);",
        "SELECT name, address FROM (SELECT * FROM affiliation);",
        "SELECT a.name, a.address FROM affiliation a ORDER BY a.name;"
      ]
    ]
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "nlq": "List all venues and years for papers ordered by year.",
    "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT venue, year FROM paper ORDER BY year",
        "SELECT p.venue, p.year FROM paper p ORDER BY p.year",
        "SELECT venue, year FROM paper GROUP BY venue, year ORDER BY year",
        "SELECT DISTINCT(p.venue), p.year FROM paper p ORDER BY p.year",
        "SELECT venue, year FROM paper p ORDER BY year ASC",
        "SELECT venue, year FROM (SELECT * FROM paper) ORDER BY year",
        "SELECT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM paper) ORDER BY year",
        "SELECT venue, year FROM paper GROUP BY year, venue ORDER BY year"
      ]
    ]
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "nlq": "What are the distinct venues for papers, ordered by year?",
    "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT DISTINCT venue FROM paper ORDER BY year",
        "SELECT venue FROM paper GROUP BY venue, year ORDER BY year",
        "SELECT DISTINCT p.venue FROM paper p ORDER BY p.year",
        "SELECT p.venue FROM (SELECT DISTINCT venue, year FROM paper) p ORDER BY p.year",
        "SELECT venue AS 'Distinct Venue' FROM paper GROUP BY venue ORDER BY year",
        "SELECT DISTINCT venue AS V FROM paper ORDER BY year ASC",
        "SELECT DISTINCT venue FROM paper GROUP BY venue HAVING COUNT(*) >= 1 ORDER BY year",
        "SELECT venue FROM paper WHERE year IS NOT NULL GROUP BY venue, year ORDER BY year",
        "SELECT DISTINCT P.venue FROM paper P ORDER BY P.year ASC",
        "SELECT venue FROM (SELECT venue, MIN(year) AS yr FROM paper GROUP BY venue) T ORDER BY yr"
      ]
    ]
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "nlq": "Find the titles and paper IDs for papers written by Harvard University.",
    "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
    "infer_predictions": [
      [
        "SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON author_list.paper_id = paper.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University'",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University'",
        "SELECT P.title, P.paper_id FROM paper P, author_list A, affiliation AF WHERE P.paper_id = A.paper_id AND A.affiliation_id = AF.affiliation_id AND AF.name = 'Harvard University'",
        "SELECT DISTINCT paper.title, paper.paper_id FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Harvard University'",
        "SELECT paper.title, paper.paper_id FROM paper JOIN author_list USING (paper_id) JOIN affiliation USING (affiliation_id) WHERE affiliation.name = 'Harvard University'",
        "SELECT paper.title, paper.paper_id FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Harvard University'",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Harvard University'))",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT 1 FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE author_list.paper_id = paper.paper_id AND affiliation.name = 'Harvard University')",
        "SELECT A.title, A.paper_id FROM paper A INNER JOIN author_list B ON A.paper_id = B.paper_id INNER JOIN affiliation C ON B.affiliation_id = C.affiliation_id WHERE C.name = 'Harvard University'"
      ]
    ]
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
        "SELECT p.title, p.paper_id FROM paper p, author_list al, affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Harvard University'",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id = (SELECT affiliation_id FROM affiliation WHERE name = 'Harvard University'))",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Harvard University'",
        "SELECT paper.title, paper.paper_id FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Harvard University'",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT 1 FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE author_list.paper_id = paper.paper_id AND affiliation.name = 'Harvard University')",
        "SELECT DISTINCT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation WHERE author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Harvard University'",
        "SELECT p.title, p.paper_id FROM paper AS p JOIN author_list AS al ON p.paper_id = al.paper_id JOIN affiliation AS a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University'",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Harvard University')) AS related_papers ON paper.paper_id = related_papers.paper_id"
      ]
    ]
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "nlq": "Find all papers with titles and paper IDs written by Mckeown.",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
    "infer_predictions": [
      [
        "SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown'",
        "SELECT P.title, P.paper_id FROM paper AS P INNER JOIN author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown'",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown'))",
        "SELECT DISTINCT P.title, P.paper_id FROM paper P, author_list AL, author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown'",
        "SELECT paper.title, paper.paper_id FROM paper WHERE EXISTS (SELECT 1 FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author_list.paper_id = paper.paper_id AND author.name = 'Mckeown')",
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown')) AS ps ON paper.paper_id = ps.paper_id",
        "SELECT title, paper_id FROM paper p WHERE EXISTS (SELECT * FROM author_list al INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND al.paper_id = p.paper_id)",
        "SELECT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al, author a WHERE al.author_id = a.author_id AND a.name = 'Mckeown')",
        "SELECT P.title, P.paper_id FROM paper AS P WHERE P.paper_id IN (SELECT AL.paper_id FROM author_list AS AL WHERE AL.author_id = (SELECT A.author_id FROM author A WHERE A.name = 'Mckeown'))"
      ]
    ]
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids for papers written by Mckeown?",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown'))",
        "SELECT p.title, p.paper_id FROM author a, author_list al, paper p WHERE a.name = 'Mckeown' AND a.author_id = al.author_id AND al.paper_id = p.paper_id",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown'",
        "WITH AuthorPapers AS (SELECT al.paper_id FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown') SELECT p.title, p.paper_id FROM paper p JOIN AuthorPapers ap ON p.paper_id = ap.paper_id",
        "SELECT p.title, p.paper_id FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown')",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown'))",
        "SELECT title, paper_id FROM paper p WHERE EXISTS (SELECT * FROM author_list al INNER JOIN author a ON a.author_id = al.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown')",
        "SELECT p.title, p.paper_id FROM paper p, author_list al, author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown'",
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' GROUP BY p.title, p.paper_id"
      ]
    ]
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "nlq": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON al.paper_id = p.paper_id JOIN affiliation a ON a.affiliation_id = al.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id HAVING COUNT(DISTINCT a.name) = 2",
        "SELECT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University') AND p.paper_id IN (SELECT al.paper_id FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University')",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' INTERSECT SELECT DISTINCT p.title, p.paper_id FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'",
        "SELECT paper.title, paper.paper_id FROM paper JOIN (SELECT DISTINCT al.paper_id FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY al.paper_id HAVING COUNT(DISTINCT a.name) = 2) collaborated ON paper.paper_id = collaborated.paper_id",
        "SELECT p.title, p.paper_id FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Stanford University') AND EXISTS (SELECT 1 FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')",
        "SELECT p.title, p.paper_id FROM author_list al LEFT JOIN paper p ON al.paper_id = p.paper_id LEFT JOIN affiliation a ON a.affiliation_id = al.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY al.paper_id HAVING COUNT(DISTINCT a.name) = 2",
        "SELECT DISTINCT p.paper_id, p.title FROM paper p, author_list al, affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id HAVING COUNT(DISTINCT a.affiliation_id) = 2",
        "WITH StanfordPapers AS (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Stanford University')), ColumbiaPapers AS (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University')) SELECT DISTINCT p.title, p.paper_id FROM paper p JOIN StanfordPapers sp ON p.paper_id = sp.paper_id JOIN ColumbiaPapers cp ON p.paper_id = cp.paper_id",
        "SELECT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al INNER JOIN affiliation a ON a.affiliation_id = al.affiliation_id AND a.name = 'Stanford University' GROUP BY al.paper_id INTERSECT SELECT al.paper_id FROM author_list al INNER JOIN affiliation a ON a.affiliation_id = al.affiliation_id AND a.name = 'Columbia University' GROUP BY al.paper_id)",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name IN ('Stanford University', 'Columbia University'))) GROUP BY paper_id HAVING COUNT(DISTINCT (SELECT affiliation_id FROM affiliation WHERE name IN ('Stanford University', 'Columbia University'))) = 2"
      ]
    ]
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
    "infer_predictions": [
      [
        "SELECT P.title, P.paper_id FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id JOIN affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University' AND P.paper_id IN (SELECT P2.paper_id FROM paper P2 JOIN author_list AL2 ON P2.paper_id = AL2.paper_id JOIN affiliation A2 ON AL2.affiliation_id = A2.affiliation_id WHERE A2.name = 'Stanford University')",
        "SELECT title, paper.paper_id FROM paper INNER JOIN author_list ON author_list.paper_id = paper.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name IN ('Columbia University', 'Stanford University') GROUP BY paper.paper_id HAVING COUNT(DISTINCT affiliation.name) = 2",
        "SELECT pap.title, pap.paper_id FROM paper AS pap WHERE EXISTS (SELECT 1 FROM author_list AS au INNER JOIN affiliation AS af ON au.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND au.paper_id = pap.paper_id) AND EXISTS (SELECT 1 FROM author_list AS au INNER JOIN affiliation AS af ON au.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' AND au.paper_id = pap.paper_id)",
        "SELECT DISTINCT P.title, P.paper_id FROM paper P, author_list AL, affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' AND P.paper_id IN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University')",
        "SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation AS columbia ON author_list.affiliation_id = columbia.affiliation_id AND columbia.name = 'Columbia University' JOIN affiliation AS stanford ON author_list.affiliation_id = stanford.affiliation_id AND stanford.name = 'Stanford University'",
        "SELECT DISTINCT P.title, P.paper_id FROM paper P WHERE EXISTS (SELECT 1 FROM author_list AL JOIN affiliation A ON AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University' WHERE AL.paper_id = P.paper_id) AND EXISTS (SELECT 1 FROM author_list AL JOIN affiliation A ON AL.affiliation_id = A.affiliation_id AND A.name = 'Stanford University' WHERE AL.paper_id = P.paper_id)",
        "SELECT paper.title, paper.paper_id FROM paper JOIN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University') AS cuaul ON paper.paper_id = cuaul.paper_id JOIN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University') AS stupd ON paper.paper_id = stupd.paper_id",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University') INTERSECT SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University')",
        "SELECT P.title, P.paper_id FROM paper P INNER JOIN (SELECT paper_id FROM author_list INNER JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id GROUP BY paper_id HAVING COUNT(DISTINCT CASE WHEN affiliation.name IN ('Columbia University', 'Stanford University') THEN affiliation.name ELSE NULL END) = 2) AS J ON P.paper_id = J.paper_id",
        "SELECT P.title, P.paper_id FROM paper AS P WHERE P.paper_id IN (SELECT AL.paper_id FROM author_list AS AL JOIN affiliation AS AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name = 'Columbia University' GROUP BY AL.paper_id INTERSECT SELECT AL.paper_id FROM author_list AS AL JOIN affiliation AS AF ON AL.affiliation_id = AF.affiliation_id WHERE AF.name = 'Stanford University' GROUP BY AL.paper_id)"
      ]
    ]
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "nlq": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id HAVING COUNT(DISTINCT a.name) = 2",
        "SELECT p.title, p.paper_id FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'McKeown, Kathleen' AND al.paper_id = p.paper_id) AND EXISTS (SELECT 1 FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Rambow, Owen' AND al.paper_id = p.paper_id)",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'McKeown, Kathleen')) AND paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Rambow, Owen'))",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT al.paper_id FROM author a INNER JOIN author_list al ON a.author_id = al.author_id WHERE a.name = 'McKeown, Kathleen' INTERSECT SELECT al.paper_id FROM author a INNER JOIN author_list al ON a.author_id = al.author_id WHERE a.name = 'Rambow, Owen')",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'McKeown, Kathleen' OR a.name = 'Rambow, Owen' GROUP BY p.paper_id HAVING COUNT(DISTINCT a.name) = 2",
        "SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id WHERE author_list.author_id IN (SELECT author_id FROM author WHERE name = 'McKeown, Kathleen' UNION SELECT author_id FROM author WHERE name = 'Rambow, Owen') GROUP BY paper.paper_id HAVING COUNT(DISTINCT author_list.author_id) = 2",
        "SELECT p1.title AS title, p1.paper_id AS paper_id FROM paper p1, author_list al1, author a1, paper p2, author_list al2, author a2 WHERE p1.paper_id = al1.paper_id AND al1.author_id = a1.author_id AND p2.paper_id = al2.paper_id AND al2.author_id = a2.author_id AND a1.name = 'McKeown, Kathleen' AND a2.name = 'Rambow, Owen' AND p1.paper_id = p2.paper_id",
        "SELECT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al WHERE al.author_id IN (SELECT a.author_id FROM author a WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen')) GROUP BY al.paper_id HAVING COUNT(DISTINCT al.author_id) = 2)",
        "SELECT p.title, p.paper_id FROM (SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'McKeown, Kathleen' UNION SELECT paper.title, paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow, Owen') p GROUP BY p.paper_id HAVING COUNT(*) = 2",
        "SELECT paper.title, paper.paper_id FROM paper, author_list as alist, author WHERE paper.paper_id = alist.paper_id AND alist.author_id = author.author_id AND author.name = 'McKeown, Kathleen' INTERSECT SELECT paper.title, paper.paper_id FROM paper, author_list as alist, author WHERE paper.paper_id = alist.paper_id AND alist.author_id = author.author_id AND author.name = 'Rambow, Owen'"
      ]
    ]
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al1 ON p.paper_id = al1.paper_id JOIN author a1 ON al1.author_id = a1.author_id JOIN author_list al2 ON p.paper_id = al2.paper_id JOIN author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'McKeown, Kathleen' AND a2.name = 'Rambow, Owen'",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN author_list AS alist1 ON paper.paper_id = alist1.paper_id INNER JOIN author AS author1 ON alist1.author_id = author1.author_id INNER JOIN author_list AS alist2 ON paper.paper_id = alist2.paper_id INNER JOIN author AS author2 ON alist2.author_id = author2.author_id WHERE author1.name = 'McKeown, Kathleen' AND author2.name = 'Rambow, Owen'",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p, author_list al1, author a1, author_list al2, author a2 WHERE p.paper_id = al1.paper_id AND al1.author_id = a1.author_id AND a1.name = 'McKeown, Kathleen' AND p.paper_id = al2.paper_id AND al2.author_id = a2.author_id AND a2.name = 'Rambow, Owen'",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT al1.paper_id FROM author_list al1 JOIN author a1 ON al1.author_id = a1.author_id JOIN author_list al2 ON al1.paper_id = al2.paper_id JOIN author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'McKeown, Kathleen' AND a2.name = 'Rambow, Owen')",
        "SELECT p.title, p.paper_id FROM paper p WHERE EXISTS (SELECT * FROM author_list al, author a WHERE al.paper_id = p.paper_id AND al.author_id = a.author_id AND a.name = 'McKeown, Kathleen') AND EXISTS (SELECT * FROM author_list al, author a WHERE al.paper_id = p.paper_id AND al.author_id = a.author_id AND a.name = 'Rambow, Owen')",
        "SELECT p.title, p.paper_id FROM paper AS p JOIN author_list AS al ON p.paper_id = al.paper_id JOIN author AS a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id HAVING COUNT(DISTINCT a.name) = 2",
        "SELECT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT paper_id FROM author_list aL1 JOIN author_list aL2 USING (paper_id) JOIN author a1 ON aL1.author_id = a1.author_id JOIN author a2 ON aL2.author_id = a2.author_id WHERE a1.name = 'McKeown, Kathleen' AND a2.name = 'Rambow, Owen')",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'McKeown, Kathleen' INTERSECT SELECT paper_id FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow, Owen')",
        "SELECT p.title, p.paper_id FROM paper AS p WHERE (SELECT COUNT(DISTINCT a.author_id) FROM author_list AS al JOIN author AS a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name IN ('McKeown, Kathleen', 'Rambow, Owen')) = 2",
        "SELECT first.title, first.paper_id FROM (SELECT p.title, p.paper_id, a.name FROM paper p JOIN author_list al ON al.paper_id = p.paper_id JOIN author a ON a.author_id = al.author_id) AS first JOIN (SELECT p.paper_id, a.name FROM paper p JOIN author_list al ON al.paper_id = p.paper_id JOIN author a ON a.author_id = al.author_id WHERE a.name = 'Rambow, Owen') AS second ON first.paper_id = second.paper_id WHERE first.name = 'McKeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "nlq": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.paper_id FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown') AND NOT EXISTS (SELECT 1 FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Rambow')",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE name = 'Mckeown') AND paper_id NOT IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE name = 'Rambow')",
        "SELECT title, paper_id FROM paper AS p WHERE EXISTS (SELECT * FROM author_list AS al INNER JOIN author AS a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown') AND NOT EXISTS (SELECT * FROM author_list AS al INNER JOIN author AS a ON al.author_id = a.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Rambow')",
        "SELECT p.title, p.paper_id FROM paper p JOIN author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown') AND p.paper_id NOT IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Rambow')) GROUP BY p.paper_id",
        "SELECT p.title, p.paper_id FROM paper p WHERE paper_id IN (SELECT al.paper_id FROM author_list al, author a WHERE al.author_id = a.author_id AND a.name = 'Mckeown') AND NOT EXISTS (SELECT al.paper_id FROM author_list al, author a WHERE al.paper_id = p.paper_id AND a.name = 'Rambow' AND al.author_id = a.author_id)",
        "SELECT p.title, p.paper_id FROM paper p WHERE (SELECT count(*) FROM author_list al JOIN author a ON a.author_id = al.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Mckeown') > 0 AND (SELECT count(*) FROM author_list al JOIN author a ON a.author_id = al.author_id WHERE al.paper_id = p.paper_id AND a.name = 'Rambow') = 0",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT * FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown' AND paper.paper_id = author_list.paper_id) AND NOT EXISTS (SELECT * FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow' AND paper.paper_id = author_list.paper_id)",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id GROUP BY paper.paper_id HAVING SUM(CASE WHEN author.name = 'Mckeown' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN author.name = 'Rambow' THEN 1 ELSE 0 END) = 0",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown') AND p.paper_id NOT IN (SELECT al.paper_id FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Rambow')",
        "SELECT p.title, p.paper_id FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND p.paper_id NOT IN (SELECT paper_id FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow')"
      ]
    ]
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
    "infer_predictions": [
      [
        "SELECT P.title, P.paper_id FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id WHERE AL.author_id IN (SELECT A.author_id FROM author A WHERE A.name = 'Mckeown') AND P.paper_id NOT IN (SELECT P.paper_id FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id JOIN author A ON A.author_id = AL.author_id WHERE A.name = 'Rambow')",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Rambow'))",
        "SELECT P.title, P.paper_id FROM paper AS P INNER JOIN author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND NOT EXISTS (SELECT 1 FROM author_list AS AL2 JOIN author AS A2 ON AL2.author_id = A2.author_id WHERE A2.name = 'Rambow' AND AL2.paper_id = P.paper_id)",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT AL.paper_id FROM author_list AS AL JOIN author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown') AND NOT EXISTS (SELECT 1 FROM author_list AS AL JOIN author AS A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = paper.paper_id)",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT * FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown' AND author_list.paper_id = paper.paper_id) AND NOT EXISTS (SELECT * FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Rambow' AND author_list.paper_id = paper.paper_id)",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown')) AS MckeownPapers ON paper.paper_id = MckeownPapers.paper_id WHERE paper.paper_id NOT IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Rambow'))",
        "SELECT P.title, P.paper_id FROM paper P WHERE EXISTS (SELECT 1 FROM author_list AL JOIN author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown' AND AL.paper_id = P.paper_id) AND NOT EXISTS (SELECT 1 FROM author_list AL JOIN author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow' AND AL.paper_id = P.paper_id)",
        "SELECT P.title, P.paper_id FROM paper P, author_list AL, author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND A.name = 'Mckeown' AND P.paper_id NOT IN (SELECT AL.paper_id FROM author_list AL, author A WHERE AL.author_id = A.author_id AND A.name = 'Rambow')",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT * FROM author_list, author WHERE author_list.paper_id = paper.paper_id AND author_list.author_id = author.author_id AND author.name = 'Mckeown') AND NOT EXISTS (SELECT * FROM author_list, author WHERE author_list.paper_id = paper.paper_id AND author_list.author_id = author.author_id AND author.name = 'Rambow')",
        "SELECT P.title, P.paper_id FROM paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM author_list AL JOIN author A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown') AND P.paper_id NOT IN (SELECT AL.paper_id FROM author_list AL JOIN author A ON AL.author_id = A.author_id WHERE A.name = 'Rambow')"
      ]
    ]
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "nlq": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
    "infer_predictions": [
      [
        "SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT P.paper_id, P.title FROM paper P INNER JOIN author_list AL ON P.paper_id = AL.paper_id INNER JOIN author A ON AL.author_id = A.author_id WHERE A.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT paper.paper_id AS id, paper.title AS title FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'McKeown, Kathleen' OR author.name = 'Rambow, Owen'",
        "SELECT paper.paper_id, paper.title FROM paper, author_list, author WHERE paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND author.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT DISTINCT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'McKeown, Kathleen' OR author.name = 'Rambow, Owen'",
        "SELECT P.title, P.paper_id FROM paper P, author_list AL, author A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name LIKE 'McKeown, Kathleen' OR A.name LIKE 'Rambow, Owen')",
        "SELECT P.title, P.paper_id FROM paper AS P JOIN author_list AS AL ON P.paper_id = AL.paper_id JOIN author AS A ON A.author_id = AL.author_id WHERE A.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT P.title, P.paper_id FROM paper AS P, author_list AS AL, author AS A WHERE P.paper_id = AL.paper_id AND AL.author_id = A.author_id AND (A.name = 'McKeown, Kathleen' OR A.name = 'Rambow, Owen')",
        "SELECT paper.title, paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT DISTINCT paper.title, paper.paper_id FROM paper, author_list, author WHERE paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND (author.name = 'McKeown, Kathleen' OR author.name = 'Rambow, Owen')"
      ]
    ]
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "nlq": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
    "infer_predictions": [
      [
        "SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT P.paper_id, P.title FROM paper P INNER JOIN author_list AL ON P.paper_id = AL.paper_id INNER JOIN author A ON AL.author_id = A.author_id WHERE A.name = 'McKeown, Kathleen' OR A.name = 'Rambow, Owen'",
        "SELECT DISTINCT paper.title, paper.paper_id FROM paper, author_list, author WHERE paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND (author.name = 'McKeown, Kathleen' OR author.name = 'Rambow, Owen')",
        "SELECT p.title, p.paper_id FROM paper AS p WHERE EXISTS (SELECT 1 FROM author_list AS al JOIN author AS a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') AND al.paper_id = p.paper_id)",
        "SELECT title, paper_id FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name IN ('McKeown, Kathleen', 'Rambow, Owen')))",
        "SELECT P.title, P.paper_id FROM paper P WHERE P.paper_id IN (SELECT AL.paper_id FROM author_list AL WHERE AL.author_id IN (SELECT A.author_id FROM author A WHERE A.name = 'McKeown, Kathleen' OR A.name = 'Rambow, Owen'))",
        "SELECT title, paper_id FROM paper WHERE EXISTS (SELECT * FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen') AND author_list.paper_id = paper.paper_id)",
        "SELECT P.title, P.paper_id FROM paper AS P JOIN author_list AS AL ON P.paper_id = AL.paper_id JOIN author AS A ON AL.author_id = A.author_id WHERE A.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT DISTINCT p.title, p.paper_id FROM paper p INNER JOIN author_list l ON l.paper_id = p.paper_id INNER JOIN author a ON l.author_id = a.author_id AND a.name IN ('McKeown, Kathleen', 'Rambow, Owen')",
        "SELECT pap.title, pap.paper_id FROM paper pap JOIN author_list alst ON pap.paper_id = alst.paper_id JOIN author aut ON alst.author_id = aut.author_id WHERE aut.name = 'McKeown, Kathleen' OR aut.name = 'Rambow, Owen'"
      ]
    ]
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "nlq": "List the names of all authors and their number of papers in descending order by number of papers.",
    "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
    "infer_predictions": [
      [
        "SELECT A.name, COUNT(P.paper_id) AS num_papers FROM author A JOIN author_list AL ON A.author_id = AL.author_id JOIN paper P ON AL.paper_id = P.paper_id GROUP BY A.author_id ORDER BY num_papers DESC",
        "SELECT author.name, COUNT(author_list.paper_id) AS paper_count FROM author INNER JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id ORDER BY paper_count DESC",
        "SELECT auth.name, COUNT(*) AS total_papers FROM author auth, author_list alist, paper pap WHERE auth.author_id = alist.author_id AND alist.paper_id = pap.paper_id GROUP BY auth.name ORDER BY total_papers DESC",
        "SELECT author.name, COUNT(DISTINCT paper.paper_id) AS total_publications FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id GROUP BY author.author_id ORDER BY total_publications DESC",
        "SELECT a.name, COUNT(p.paper_id) AS NumeroDiPapers FROM author a, paper p, author_list al WHERE al.author_id = a.author_id AND al.paper_id = p.paper_id GROUP BY a.author_id ORDER BY NumeroDiPapers DESC",
        "SELECT distinct Nam.name, COUNT(pap.paper_id) as PapersWritten FROM author Nam JOIN author_list authList ON Nam.author_id = authList.author_id LEFT JOIN paper pap ON authList.paper_id = pap.paper_id GROUP BY Nam.author_id HAVING COUNT(pap.paper_id) > 0 ORDER BY PapersWritten DESC",
        "SELECT aut.name, (SELECT COUNT(*) FROM paper WHERE paper.paper_id IN (SELECT author_list.paper_id FROM author_list WHERE author_list.author_id = aut.author_id)) AS paper_num FROM author aut GROUP BY aut.author_id ORDER BY paper_num DESC",
        "SELECT au.name, SUM(CASE WHEN al.paper_id IS NOT NULL THEN 1 ELSE 0 END) as Counts_of_Papers FROM author au LEFT OUTER JOIN author_list al ON au.author_id = al.author_id GROUP BY au.author_id ORDER BY Counts_of_Papers DESC",
        "SELECT NAMES.name, NbrOfPapers.total_papers FROM author NAMES JOIN (SELECT author_id, COUNT(paper_id) AS total_papers FROM author_list GROUP BY author_id ORDER BY COUNT(paper_id) DESC) NbrOfPapers ON NAMES.author_id = NbrOfPapers.author_id",
        "SELECT Name.name AS author_name, COUNT(ppr.paper_id) AS papers_published FROM author Name JOIN author_list aa_list ON Name.author_id = aa_list.author_id JOIN paper ppr ON aa_list.paper_id = ppr.paper_id GROUP BY Name.name ORDER BY papers_published DESC"
      ]
    ]
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "nlq": "How many papers did each author publish, ordered by number of papers?",
    "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
    "infer_predictions": [
      [
        "SELECT author.name, COUNT(paper.paper_id) AS publications FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY publications DESC",
        "SELECT a.name, COUNT(p.paper_id) AS num_papers FROM author a INNER JOIN author_list al ON a.author_id = al.author_id INNER JOIN paper p ON al.paper_id = p.paper_id GROUP BY a.author_id ORDER BY num_papers DESC",
        "SELECT a.name, COUNT(*) AS paper_count FROM author AS a JOIN author_list AS al ON a.author_id = al.author_id JOIN paper AS p ON p.paper_id = al.paper_id GROUP BY a.author_id ORDER BY paper_count DESC",
        "SELECT name, COUNT(DISTINCT p.paper_id) as NumberOfPapers FROM author a JOIN author_list al ON al.author_id = a.author_id JOIN paper p ON al.paper_id = p.paper_id GROUP BY a.author_id ORDER BY NumberOfPapers DESC",
        "SELECT a.name, COUNT(p.paper_id) AS published_papers FROM author a, author_list al, paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id GROUP BY a.author_id ORDER BY published_papers DESC",
        "SELECT NamE, Count(*) as paper_amount FROM AUTHOR A Join author_list al on a.author_id = al.author_id Join Paper p on p.paper_id = al.paper_id Group By a.NAME Order By paper_amount DESC",
        "SELECT NAME, COUNT(PAPER_ID) as TotalPapers FROM author JOIN author_list USING (author_id) JOIN paper USING (paper_id) GROUP BY AUTHOR_ID ORDER BY TotalPapers DESC",
        "SELECT author.name AS AuthorName, COUNT(paper.paper_id) AS TotalPublished FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON paper.paper_id = author_list.paper_id GROUP BY AuthorName ORDER BY TotalPublished DESC",
        "SELECT a.name, COUNT(DISTINCT paper.paper_id) AS papers_published FROM author a LEFT JOIN author_list al ON a.author_id = al.author_id LEFT JOIN paper ON al.paper_id = paper.paper_id GROUP BY a.author_id ORDER BY papers_published DESC"
      ]
    ]
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "nlq": "List all affiliations with ascending ordered number of papers.",
    "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
    "infer_predictions": [
      [
        "SELECT a.name, COUNT(DISTINCT p.paper_id) AS papers_count FROM affiliation a JOIN author_list al ON a.affiliation_id = al.affiliation_id JOIN paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY papers_count ASC",
        "SELECT az.name, COUNT(DISTINCT pl.paper_id) AS total_papers FROM affiliation az INNER JOIN author_list alz ON az.affiliation_id = alz.affiliation_id INNER JOIN paper pl ON pl.paper_id = alz.paper_id GROUP BY az.name ORDER BY total_papers ASC",
        "SELECT AF.name, COUNT(DISTINCT PA.paper_id) AS PaperCount FROM affiliation AF, author_list AL, paper PA WHERE AF.affiliation_id = AL.affiliation_id AND AL.paper_id = PA.paper_id GROUP BY AF.name ORDER BY PaperCount ASC",
        "SELECT AFN.name, COUNT(DISTINCT PAP.paper_id) AS published_papers FROM affiliation AFN, author_list ALIST, paper PAP WHERE AFN.affiliation_id = ALIST.affiliation_id AND ALIST.paper_id = PAP.paper_id GROUP BY AFN.name ORDER BY published_papers ASC",
        "SELECT af_n.name, COUNT(DISTINCT p_id.paper_id) AS count_p FROM affiliation af_n JOIN author_list af_l ON af_n.affiliation_id = af_l.affiliation_id JOIN paper p_id ON af_l.paper_id = p_id.paper_id GROUP BY af_n.name ORDER BY count_p ASC",
        "SELECT af.name, COUNT(DISTINCT p_id.paper_id) AS paper_count_total FROM (SELECT * FROM affiliation) af LEFT JOIN (SELECT * FROM author_list) ali ON af.affiliation_id = ali.affiliation_id LEFT JOIN (SELECT * FROM paper) p_id ON p_id.paper_id = ali.paper_id GROUP BY af.name ORDER BY paper_count_total ASC",
        "SELECT z.name, COUNT(DISTINCT x.paper_id) AS paperTally FROM affiliation z LEFT JOIN author_list y ON z.affiliation_id = y.affiliation_id LEFT JOIN paper x ON y.paper_id = x.paper_id GROUP BY z.name ORDER BY paperTally ASC",
        "SELECT affiliations.name, SUM(CASE WHEN authorL.paper_id = papers.paper_id THEN 1 ELSE 0 END) as PaperNum FROM affiliation affiliations LEFT JOIN author_list authorL ON affiliations.affiliation_id = authorL.affiliation_id LEFT JOIN paper papers ON papers.paper_id = authorL.paper_id GROUP BY affiliations.name ORDER BY PaperNum ASC",
        "SELECT affiliations.name, COUNT(DISTINCT paper_id_results.paper_id) FROM affiliation affiliations JOIN author_list author_linked ON affiliations.affiliation_id = author_linked.affiliation_id JOIN paper paper_id_results ON author_linked.paper_id = paper_id_results.paper_id GROUP BY affiliations.name ORDER BY COUNT(DISTINCT paper_id_results.paper_id) ASC"
      ]
    ]
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "nlq": "What are the names of all affiliations, ordered by number of papers?",
    "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
    "infer_predictions": [
      [
        "SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC)",
        "SELECT a.name FROM affiliation a JOIN author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC",
        "SELECT a.name FROM affiliation a INNER JOIN (SELECT affiliation_id, COUNT(paper_id) AS qty FROM author_list GROUP BY affiliation_id) temp ON a.affiliation_id = temp.affiliation_id ORDER BY temp.qty DESC",
        "SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id GROUP BY affiliation.name ORDER BY COUNT(author_list.paper_id) DESC",
        "SELECT name, COUNT(al.paper_id) as TotalPapers FROM affiliation JOIN author_list al ON affiliation.affiliation_id = al.affiliation_id GROUP BY name ORDER BY TotalPapers DESC",
        "SELECT name FROM affiliation WHERE affiliation_id IN (SELECT DISTINCT affiliation_id FROM author_list) ORDER BY (SELECT COUNT(paper_id) FROM author_list WHERE affiliation_id = affiliation.affiliation_id) DESC",
        "SELECT name FROM affiliation INNER JOIN (SELECT affiliation_id, COUNT(paper_id) AS paper_count FROM author_list GROUP BY affiliation_id) as popular ON affiliation.affiliation_id = popular.affiliation_id ORDER BY paper_count DESC",
        "SELECT DISTINCT a.name FROM affiliation a, author_list al WHERE a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT(DISTINCT al.paper_id) DESC",
        "SELECT Name FROM (SELECT name AS Name, COUNT(paper_id) AS paper_tot FROM affiliation INNER JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id GROUP BY name) ORDER BY paper_tot DESC"
      ]
    ]
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "nlq": "List names of all authors who have more than 50 papers.",
    "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a WHERE (SELECT COUNT(*) FROM author_list al WHERE al.author_id = a.author_id) > 50",
        "SELECT a.name FROM author a INNER JOIN author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) > 50",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
        "SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(paper_id) > 50",
        "SELECT a.name FROM author a WHERE a.author_id IN (SELECT al.author_id FROM author_list al GROUP BY al.author_id HAVING COUNT(al.paper_id) > 50)",
        "SELECT name FROM author WHERE EXISTS (SELECT NULL FROM author_list WHERE author_list.author_id = author.author_id GROUP BY author_list.author_id HAVING COUNT(paper_id) > 50)",
        "SELECT DISTINCT a.name FROM author a LEFT JOIN author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) > 50",
        "SELECT d.name FROM (SELECT a.name, COUNT(al.paper_id) AS total FROM author a LEFT JOIN author_list al ON a.author_id = al.author_id GROUP BY a.author_id) d WHERE d.total > 50",
        "SELECT a.name FROM author a WHERE 50 < (SELECT COUNT(*) FROM author_list al WHERE al.author_id = a.author_id)",
        "SELECT a.name FROM author a, author_list al WHERE a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) > 50"
      ]
    ]
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "nlq": "What are the names of all authors who have more than 50 papers?",
    "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a WHERE (SELECT COUNT(*) FROM author_list al WHERE al.author_id = a.author_id) > 50",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) > 50)",
        "SELECT distinct(a.name) FROM author a INNER JOIN author_list al ON a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(al.paper_id) > 50",
        "SELECT name FROM author WHERE exists (SELECT 1 FROM author_list WHERE author.author_id = author_list.author_id GROUP BY author_id HAVING COUNT(paper_id) > 50)",
        "SELECT a.name FROM author a, author_list al WHERE a.author_id = al.author_id GROUP BY a.author_id HAVING COUNT(DISTINCT al.paper_id) > 50",
        "SELECT distinct(name) FROM author WHERE author_id IN (SELECT author_id FROM author_list al GROUP BY author_id HAVING COUNT(DISTINCT al.paper_id) > 50)",
        "SELECT a.name FROM author a JOIN author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50",
        "SELECT NAME FROM (SELECT a.name, COUNT(al.paper_id) AS num_papers FROM author a INNER JOIN author_list al ON a.author_id = al.author_id GROUP BY a.name) WHERE num_papers > 50",
        "SELECT a.name FROM author a WHERE (SELECT COUNT(al.paper_id) FROM author_list al WHERE al.author_id = a.author_id GROUP BY al.author_id) > 50",
        "SELECT a.name FROM (SELECT author_id, count(*) as papers_count FROM author_list GROUP BY author_id HAVING papers_count > 50) pc JOIN author a ON a.author_id = pc.author_id"
      ]
    ]
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "nlq": "List names of all authors who have only 1 paper.",
    "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author WHERE author.author_id IN (SELECT author_list.author_id FROM author_list GROUP BY author_list.author_id HAVING COUNT(author_list.paper_id) = 1)",
        "SELECT name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT author_list.paper_id) = 1",
        "SELECT A.name FROM author A JOIN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1) B ON A.author_id = B.author_id",
        "SELECT author.name FROM author INNER JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT author_list.paper_id) = 1",
        "SELECT A.name FROM author A WHERE EXISTS (SELECT 1 FROM author_list WHERE author_list.author_id = A.author_id GROUP BY author_list.author_id HAVING COUNT(author_list.paper_id) = 1)",
        "SELECT name FROM author WHERE author_id IN (SELECT AL.author_id FROM author_list AL GROUP BY AL.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1)",
        "SELECT A.name FROM author A WHERE (SELECT COUNT(author_list.paper_id) FROM author_list WHERE author_list.author_id = A.author_id GROUP BY author_list.author_id) = 1",
        "SELECT name FROM author WHERE author_id IN (SELECT AL.author_id FROM author_list AL JOIN paper P ON AL.paper_id = P.paper_id GROUP BY AL.author_id HAVING COUNT(DISTINCT P.paper_id) = 1)"
      ]
    ]
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "nlq": "What are the names of authors who have exactly 1 paper?",
    "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT author_list.paper_id) = 1",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1)",
        "SELECT A.name FROM author A WHERE (SELECT COUNT(*) FROM author_list WHERE author_list.author_id = A.author_id) = 1",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) = 1)",
        "SELECT author.name FROM author INNER JOIN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(DISTINCT paper_id) = 1) AS UniquePapers ON author.author_id = UniquePapers.author_id",
        "SELECT A.name FROM author A JOIN (SELECT author_id FROM author_list GROUP BY author_id HAVING COUNT(paper_id) = 1) AS SinglePaperAuthor ON A.author_id = SinglePaperAuthor.author_id",
        "SELECT A.name FROM author A INNER JOIN author_list AL ON A.author_id = AL.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1",
        "SELECT A.name FROM author A WHERE EXISTS (SELECT 1 FROM author_list AL WHERE AL.author_id = A.author_id GROUP BY AL.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1)",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list AL GROUP BY AL.author_id HAVING COUNT(DISTINCT AL.paper_id) = 1)",
        "SELECT A.name FROM author A WHERE 1 = (SELECT COUNT(DISTINCT AL.paper_id) FROM author_list AL WHERE AL.author_id = A.author_id)"
      ]
    ]
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "nlq": "What is the venue and year with the most number of publications?",
    "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1",
        "SELECT p.venue, p.year FROM paper p GROUP BY p.venue, p.year ORDER BY COUNT(p.paper_id) DESC LIMIT 1",
        "SELECT p.venue, p.year FROM (SELECT venue, year, COUNT(paper_id) as cnt FROM paper GROUP BY venue, year) p ORDER BY p.cnt DESC LIMIT 1",
        "SELECT venue, year FROM paper GROUP BY venue, year HAVING COUNT(paper_id) = (SELECT MAX(count) FROM (SELECT COUNT(paper_id) as count FROM paper GROUP BY venue, year))",
        "SELECT venue, year, MAX(publications) FROM (SELECT venue, year, COUNT(paper_id) as publications FROM paper GROUP BY venue, year) tmp",
        "SELECT p.venue, p.year FROM paper p WHERE p.paper_id IN (SELECT paper_id FROM paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT p.venue, p.year FROM paper p LEFT JOIN (SELECT paper_id, COUNT(*) as pub_count FROM paper GROUP BY venue, year) as subquery ON p.paper_id = subquery.paper_id ORDER BY subquery.pub_count DESC LIMIT 1",
        "SELECT first_value(venue) OVER (ORDER BY COUNT(paper_id) DESC) as venue, first_value(year) OVER (ORDER BY COUNT(paper_id) DESC) as year FROM paper GROUP BY venue, year LIMIT 1"
      ]
    ]
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "nlq": "What was the venue and year with the most publications?",
    "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT venue, year FROM paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1",
        "SELECT venue, year FROM (SELECT venue, year, COUNT(paper_id) AS pub_count FROM paper GROUP BY venue, year) ORDER BY pub_count DESC LIMIT 1",
        "SELECT p.venue, p.year, COUNT(*) AS total FROM paper p GROUP BY p.venue, p.year ORDER BY total DESC LIMIT 1",
        "SELECT p.venue, p.year FROM paper p WHERE p.paper_id IN (SELECT paper_id FROM paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1) GROUP BY p.venue, p.year",
        "SELECT p.venue, p.year FROM paper p GROUP BY p.venue, p.year HAVING COUNT(p.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM paper GROUP BY venue, year) t)",
        "SELECT first.venue, first.year FROM (SELECT venue, year, RANK() OVER (ORDER BY COUNT(paper_id) DESC) as rank FROM paper GROUP BY venue, year) first WHERE rank = 1",
        "SELECT top.venue, top.year FROM (SELECT venue, year, COUNT(paper_id) pubCount FROM paper GROUP BY venue, year) top ORDER BY top.pubCount DESC LIMIT 1",
        "WITH PublicationCounts AS (SELECT venue, year, COUNT(paper_id) AS publications FROM paper GROUP BY venue, year) SELECT venue, year FROM PublicationCounts WHERE publications = (SELECT MAX(publications) FROM PublicationCounts)"
      ]
    ]
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "nlq": "What is the venue with the least number of publications?",
    "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1",
        "SELECT p.venue FROM paper p GROUP BY p.venue HAVING COUNT(p.paper_id) = (SELECT MIN(c.count) FROM (SELECT COUNT(paper_id) AS count FROM paper GROUP BY venue) c)",
        "SELECT p.venue FROM paper p LEFT JOIN paper pp ON p.venue = pp.venue GROUP BY p.venue ORDER BY COUNT(pp.paper_id) ASC LIMIT 1",
        "WITH VenueCounts AS (SELECT venue, COUNT(paper_id) AS publications FROM paper GROUP BY venue) SELECT venue FROM VenueCounts ORDER BY publications ASC LIMIT 1",
        "WITH PublicationCount AS (SELECT venue, COUNT(paper_id) AS num_papers FROM paper GROUP BY venue) SELECT venue FROM PublicationCount WHERE num_papers = (SELECT MIN(num_papers) FROM PublicationCount)",
        "SELECT p.venue FROM (SELECT venue, COUNT(paper_id) AS papers_count FROM paper GROUP BY venue) p WHERE p.papers_count = (SELECT MIN(papers_count) FROM (SELECT COUNT(paper_id) AS papers_count FROM paper GROUP BY venue) AS CrossTab) ORDER BY papers_count ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "nlq": "Which venue has the fewest publications?",
    "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1",
        "SELECT p.venue FROM paper p GROUP BY p.venue ORDER BY COUNT(p.paper_id) ASC LIMIT 1",
        "SELECT venue FROM (SELECT venue FROM paper GROUP BY venue ORDER BY COUNT(*) ASC) LIMIT 1",
        "WITH VenueCount AS (SELECT venue, COUNT(paper_id) as cnt FROM paper GROUP BY venue) SELECT venue FROM VenueCount WHERE cnt = (SELECT MIN(cnt) FROM VenueCount)",
        "WITH RankedVenues AS (SELECT venue, RANK() OVER (ORDER BY COUNT(paper_id)) AS Rank FROM paper GROUP BY venue) SELECT venue FROM RankedVenues WHERE Rank = 1"
      ]
    ]
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "nlq": "How many papers cite paper with id A00-1002?",
    "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM citation WHERE cited_paper_id = 'A00-1002'",
        "SELECT COUNT(paper_id) FROM citation WHERE cited_paper_id = 'A00-1002'",
        "SELECT COUNT(1) FROM citation WHERE cited_paper_id = 'A00-1002'",
        "SELECT count(*) FROM (SELECT paper_id FROM citation WHERE cited_paper_id = 'A00-1002')",
        "SELECT count(DISTINCT c.paper_id) FROM citation c WHERE c.cited_paper_id = 'A00-1002'",
        "SELECT COUNT(1) FROM (SELECT DISTINCT paper_id FROM citation WHERE cited_paper_id = 'A00-1002')",
        "SELECT count(*) FROM citation c WHERE c.cited_paper_id = 'A00-1002'"
      ]
    ]
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "nlq": "Count the number of papers which cited a paper with id A00-1002.",
    "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT citing.paper_id) FROM citation AS citing WHERE citing.cited_paper_id = 'A00-1002'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper_id FROM citation WHERE cited_paper_id = 'A00-1002')",
        "SELECT COUNT(DISTINCT paper_id) AS NumberOfCitingPapers FROM citation WHERE cited_paper_id = 'A00-1002'",
        "SELECT COUNT(paper_id) FROM (SELECT DISTINCT paper_id FROM citation WHERE cited_paper_id = 'A00-1002') AS UniqueCitations",
        "SELECT COUNT(DISTINCT paper_id) FROM citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id",
        "SELECT COUNT(*) AS TotalCitations FROM (SELECT DISTINCT paper_id FROM citation WHERE cited_paper_id = 'A00-1002') tempTable",
        "SELECT COUNT(paper_id) FROM citation WHERE cited_paper_id = 'A00-1002' GROUP BY cited_paper_id HAVING COUNT(*) >= 1",
        "SELECT COUNT(1) FROM (SELECT paper_id FROM citation WHERE cited_paper_id = 'A00-1002' GROUP BY paper_id) AS CountRows"
      ]
    ]
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "nlq": "How many reference papers does paper with id D12-1027 have?",
    "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT COUNT(cited_paper_id) FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT COUNT(c.cited_paper_id) FROM citation c WHERE c.paper_id = 'D12-1027'",
        "SELECT COUNT(DISTINCT c.cited_paper_id) FROM citation c WHERE c.paper_id = 'D12-1027'",
        "SELECT COUNT(*) FROM citation c WHERE c.paper_id = 'D12-1027'",
        "SELECT COUNT(cited_paper_id) FROM (SELECT cited_paper_id FROM citation WHERE paper_id = 'D12-1027')",
        "SELECT COUNT(DISTINCT c.cited_paper_id) AS RefCount FROM citation c WHERE c.paper_id = 'D12-1027'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT c.cited_paper_id FROM citation c WHERE c.paper_id = 'D12-1027')",
        "SELECT COUNT(c.cited_paper_id) FROM citation c WHERE c.paper_id = 'D12-1027' GROUP BY c.paper_id"
      ]
    ]
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "nlq": "Count the number of references the paper with id D12-1027 has.",
    "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT COUNT(cited_paper_id) FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT COUNT(*) AS ReferenceCount FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT (SELECT COUNT(*) FROM citation WHERE paper_id = 'D12-1027')",
        "SELECT COUNT(*) FROM citation c WHERE c.paper_id = 'D12-1027'",
        "SELECT COUNT(1) FROM citation WHERE paper_id = 'D12-1027'",
        "SELECT (SELECT COUNT(1) FROM citation c WHERE c.paper_id = 'D12-1027') AS CountRef"
      ]
    ]
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "nlq": "What is the id and the number of citations of the most cited paper?",
    "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT cited_paper_id, COUNT(*) AS citation_count FROM citation GROUP BY cited_paper_id ORDER BY citation_count DESC LIMIT 1",
        "SELECT paper_id AS cited_paper_id, COUNT(paper_id) AS citation_count FROM citation GROUP BY paper_id ORDER BY COUNT(paper_id) DESC LIMIT 1",
        "SELECT c.cited_paper_id, COUNT(c.cited_paper_id) AS num_citations FROM citation c GROUP BY c.cited_paper_id ORDER BY num_citations DESC LIMIT 1",
        "SELECT c1.cited_paper_id, COUNT(c2.cited_paper_id) AS total_citations FROM citation c1 JOIN citation c2 ON c1.cited_paper_id = c2.cited_paper_id GROUP BY c1.cited_paper_id ORDER BY total_citations DESC LIMIT 1",
        "SELECT top_cited_id AS cited_paper_id, MAX(citation_count) AS citation_count FROM (SELECT cited_paper_id AS top_cited_id, COUNT(*) AS citation_count FROM citation GROUP BY cited_paper_id) GROUP BY top_cited_id ORDER BY MAX(citation_count) DESC LIMIT 1",
        "WITH CitationCount AS (SELECT cited_paper_id, COUNT(*) AS CountCitations FROM citation GROUP BY cited_paper_id) SELECT cited_paper_id, CountCitations FROM CitationCount ORDER BY CountCitations DESC LIMIT 1",
        "SELECT paper_id, COUNT(*) FROM citation WHERE paper_id IN (SELECT cited_paper_id FROM citation) GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.paper_id, sub.count FROM paper p JOIN (SELECT cited_paper_id, COUNT(*) AS count FROM citation GROUP BY cited_paper_id) sub ON p.paper_id = sub.cited_paper_id ORDER BY sub.count DESC LIMIT 1",
        "SELECT cited_paper_id, citation_count FROM (SELECT cited_paper_id, COUNT(cited_paper_id) AS citation_count FROM citation GROUP BY cited_paper_id) AS Result ORDER BY citation_count DESC LIMIT 1",
        "SELECT t.cited_paper_id, t.count_citations FROM (SELECT cited_paper_id, COUNT(*) AS count_citations FROM citation GROUP BY cited_paper_id) t ORDER BY t.count_citations DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "nlq": "Give the id and the number of citations of the most cited paper.",
    "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT paper_id, COUNT(*) as num_citations FROM citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1",
        "SELECT c.paper_id, COUNT(c.cited_paper_id) as citations_count FROM citation c GROUP BY c.paper_id ORDER BY citations_count DESC LIMIT 1",
        "SELECT cited_paper_id, COUNT(cited_paper_id) as total_citations FROM citation GROUP BY cited_paper_id HAVING total_citations = (SELECT MAX(citation_count) FROM (SELECT COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id))",
        "SELECT p.paper_id, COUNT(c.cited_paper_id) as citation_count FROM paper p JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1",
        "SELECT top_cited_paper_id as paper_id, max_citations FROM (SELECT cited_paper_id as top_cited_paper_id, COUNT(*) as max_citations FROM citation GROUP BY cited_paper_id ORDER BY max_citations DESC) subquery LIMIT 1",
        "SELECT p.paper_id, COUNT(citation.cited_paper_id) as citation_no FROM paper p LEFT JOIN citation ON p.paper_id = citation.cited_paper_id GROUP BY p.paper_id ORDER BY citation_no DESC LIMIT 1",
        "SELECT cited_paper_id as paper_id, COUNT(*) as citation_count FROM citation GROUP BY cited_paper_id ORDER BY citation_count DESC, cited_paper_id ASC LIMIT 1",
        "SELECT paper_id, COUNT(cited_paper_id) as count_citations FROM citation GROUP BY paper_id HAVING count_citations = (SELECT MAX(n_citations) FROM (SELECT COUNT(cited_paper_id) as n_citations FROM citation GROUP BY paper_id))"
      ]
    ]
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "nlq": "Give the title of the paper which cites most number of papers?",
    "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT P.title FROM paper P INNER JOIN citation C ON P.paper_id = C.paper_id GROUP BY P.title ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
        "SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT top.title FROM (SELECT P.title FROM paper P JOIN citation C ON P.paper_id = C.paper_id GROUP BY P.title ORDER BY COUNT(*) DESC) top LIMIT 1",
        "SELECT MAX_PAPER.title FROM paper MAX_PAPER JOIN (SELECT paper_id, COUNT(cited_paper_id) AS citations FROM citation GROUP BY paper_id ORDER BY citations DESC LIMIT 1) MOST_CIT ON MAX_PAPER.paper_id = MOST_CIT.paper_id",
        "SELECT title FROM paper WHERE paper_id IN (SELECT C.paper_id FROM citation C GROUP BY C.paper_id ORDER BY COUNT(C.cited_paper_id) DESC, C.paper_id DESC LIMIT 1)",
        "SELECT P.title FROM (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1) AS MOST_CITED JOIN paper P ON MOST_CITED.paper_id = P.paper_id"
      ]
    ]
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "nlq": "What is the title of the paper which cites the most other papers?",
    "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT P.title FROM paper P JOIN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1) C ON P.paper_id = C.paper_id",
        "SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)",
        "SELECT P.title FROM paper P WHERE P.paper_id = (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(cited_paper_id) = (SELECT MAX(COUNT) FROM (SELECT COUNT(cited_paper_id) COUNT FROM citation GROUP BY paper_id)))",
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM (SELECT paper_id, COUNT(*) as cites FROM citation GROUP BY paper_id) ORDER BY cites DESC LIMIT 1)",
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(paper_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(paper_id) as cnt FROM citation GROUP BY paper_id)))",
        "SELECT P.title FROM paper P INNER JOIN (SELECT paper_id FROM citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1) as MaxCites ON P.paper_id = MaxCites.paper_id",
        "SELECT P.title FROM paper P, (SELECT paper_id, COUNT(*) as Cnt FROM citation GROUP BY paper_id ORDER BY Cnt DESC LIMIT 1) as C WHERE P.paper_id = C.paper_id",
        "SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM citation GROUP BY paper_id HAVING COUNT(*) = (SELECT MAX(Count) FROM (SELECT COUNT(*) as Count FROM citation GROUP BY paper_id)))"
      ]
    ]
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "nlq": "List top 10 most cited papers and their numbers of citations.",
    "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
    "infer_predictions": [
      [
        "SELECT p.title, COUNT(c.cited_paper_id) AS citations FROM paper AS p JOIN citation AS c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citations DESC LIMIT 10",
        "SELECT title, COUNT(cited_paper_id) AS citation_count FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY citation_count DESC LIMIT 10",
        "SELECT title, COUNT(c.cited_paper_id) AS num_citations FROM paper JOIN citation AS c ON paper.paper_id = c.cited_paper_id GROUP BY paper.paper_id, paper.title ORDER BY num_citations DESC LIMIT 10",
        "SELECT title, COUNT(*) AS total_citations FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY total_citations DESC LIMIT 10",
        "SELECT paper.title, COUNT(cited_paper_id) AS citations FROM paper INNER JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY citations DESC LIMIT 10",
        "SELECT p.title, (SELECT COUNT(*) FROM citation WHERE cited_paper_id = p.paper_id) AS CitationCount FROM paper AS p ORDER BY CitationCount DESC LIMIT 10",
        "SELECT title, (SELECT COUNT(*) FROM citation c WHERE c.cited_paper_id = paper.paper_id) AS CountCitations FROM paper ORDER BY CountCitations DESC LIMIT 10",
        "SELECT A.title, A.count FROM (SELECT paper.title AS title, COUNT(citation.cited_paper_id) AS count FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id) AS A ORDER BY A.count DESC LIMIT 10"
      ]
    ]
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "nlq": "What are the 10 most cited papers, and how many citations did each have?",
    "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
    "infer_predictions": [
      [
        "SELECT P.title, COUNT(C.cited_paper_id) AS citations FROM paper P JOIN citation C ON P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY citations DESC LIMIT 10",
        "SELECT paper.title, COUNT(citation.cited_paper_id) AS citation_count FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY citation_count DESC LIMIT 10",
        "SELECT title, (SELECT COUNT(*) FROM citation WHERE cited_paper_id = paper.paper_id) AS citation_count FROM paper ORDER BY citation_count DESC LIMIT 10",
        "SELECT P.title, COUNT(*) AS TotalCitations FROM citation C JOIN paper P ON C.cited_paper_id = P.paper_id GROUP BY C.cited_paper_id ORDER BY TotalCitations DESC LIMIT 10",
        "SELECT P.title, COUNT(P.paper_id) AS Citation_Num FROM paper P, citation C WHERE P.paper_id = C.cited_paper_id GROUP BY P.paper_id ORDER BY Citation_Num DESC LIMIT 10",
        "SELECT T1.title, T2.Cnt AS citations FROM paper T1 JOIN (SELECT cited_paper_id, COUNT(*) AS Cnt FROM citation GROUP BY cited_paper_id) T2 ON T1.paper_id = T2.cited_paper_id ORDER BY citations DESC LIMIT 10",
        "SELECT paper.title AS Title, (SELECT COUNT(citation.paper_id) FROM citation WHERE citation.cited_paper_id = paper.paper_id) AS num_of_citations FROM paper ORDER BY num_of_citations DESC LIMIT 10",
        "SELECT paper.title, COUNT(citation.cited_paper_id) FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY paper.paper_id ORDER BY COUNT(citation.cited_paper_id) DESC LIMIT 10"
      ]
    ]
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "nlq": "How many citations does Mckeown , Kathleen have ?",
    "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM citation INNER JOIN author_list ON citation.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(citation.cited_paper_id) FROM citation JOIN author_list ON citation.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(DISTINCT citation.cited_paper_id) FROM citation, author_list, author WHERE citation.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND author.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(*) FROM citation WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown , Kathleen'))",
        "SELECT COUNT(citation.cited_paper_id) FROM citation INNER JOIN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown , Kathleen')) AS authored_papers ON citation.paper_id = authored_papers.paper_id",
        "SELECT COUNT(*) FROM citation WHERE EXISTS (SELECT 1 FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author_list.paper_id = citation.paper_id AND author.name = 'Mckeown , Kathleen')",
        "SELECT COUNT(*) FROM author, author_list, paper, citation WHERE author.author_id = author_list.author_id AND author_list.paper_id = paper.paper_id AND paper.paper_id = citation.paper_id AND author.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(*) FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.paper_id WHERE author.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(*) FROM citation, paper, author_list AS al, author AS a WHERE citation.paper_id = paper.paper_id AND paper.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown , Kathleen'",
        "SELECT COUNT(DISTINCT citation.cited_paper_id) FROM citation WHERE citation.paper_id IN (SELECT paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown , Kathleen')"
      ]
    ]
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "nlq": "Count the number of citations Mckeown , Kathleen has .",
    "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(citation.cited_paper_id) FROM citation JOIN paper ON citation.cited_paper_id = paper.paper_id JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT citation.cited_paper_id) FROM citation INNER JOIN paper ON citation.cited_paper_id = paper.paper_id INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(1) FROM citation WHERE exists (SELECT 1 FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' AND paper.paper_id = citation.cited_paper_id)",
        "SELECT COUNT(*) FROM (SELECT citation.cited_paper_id FROM citation JOIN paper ON citation.cited_paper_id = paper.paper_id JOIN author_list ON author_list.paper_id = paper.paper_id JOIN author ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen') AS subquery",
        "SELECT (SELECT COUNT(*) FROM citation WHERE citation.cited_paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'))",
        "SELECT COUNT(DISTINCT citation.cited_paper_id) FROM citation, paper, author_list, author WHERE citation.cited_paper_id = paper.paper_id AND paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND author.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(citation.paper_id) FROM citation INNER JOIN (SELECT paper.paper_id FROM paper JOIN author_list ON author_list.paper_id = paper.paper_id JOIN author ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen') AS sub_paper ON citation.cited_paper_id = sub_paper.paper_id",
        "SELECT COUNT(citation.cited_paper_id) FROM citation, author_list, paper, author WHERE paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND citation.cited_paper_id = paper.paper_id AND author.name = 'Mckeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "nlq": "How many papers does Mckeown , Kathleen cite ?",
    "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT citation.paper_id) FROM citation JOIN author_list ON citation.cited_paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(citation.paper_id) FROM citation INNER JOIN author_list ON citation.cited_paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' GROUP BY author.name",
        "SELECT COUNT(c.paper_id) FROM citation c JOIN author_list al ON c.cited_paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(*) FROM (SELECT citation.paper_id FROM citation, author_list, author WHERE citation.cited_paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND author.name = 'Mckeown, Kathleen' GROUP BY citation.paper_id)",
        "SELECT COUNT(c.paper_id) FROM citation AS c JOIN paper ON c.cited_paper_id = paper.paper_id JOIN author_list AS al ON paper.paper_id = al.paper_id JOIN author AS a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT c.paper_id) FROM citation c, author_list al, author a WHERE c.cited_paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(1) FROM citation INNER JOIN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')) AS p ON p.paper_id = citation.cited_paper_id",
        "SELECT COUNT(DISTINCT paper_id) FROM (SELECT c.paper_id FROM citation c INNER JOIN author_list al ON c.cited_paper_id = al.paper_id INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT nc.paper_id) FROM citation AS nc INNER JOIN author_list AS nal ON nc.cited_paper_id = nal.paper_id INNER JOIN author AS nna ON nal.author_id = nna.author_id WHERE nna.name = 'Mckeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "nlq": "Count the number of papers Mckeown , Kathleen has cited .",
    "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT c.cited_paper_id) FROM citation c JOIN paper p ON c.paper_id = p.paper_id JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT cit.cited_paper_id) FROM citation cit INNER JOIN paper pap ON cit.paper_id = pap.paper_id INNER JOIN author_list alist ON pap.paper_id = alist.paper_id INNER JOIN author auth ON alist.author_id = auth.author_id WHERE auth.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT p2.paper_id) FROM paper p JOIN citation ON p.paper_id = citation.paper_id JOIN paper p2 ON p2.paper_id = citation.cited_paper_id JOIN author_list al ON al.paper_id = p.paper_id JOIN author a ON a.author_id = al.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT c.cited_paper_id FROM citation c JOIN paper p ON c.paper_id = p.paper_id JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')",
        "SELECT COUNT(*) FROM (SELECT cited_paper_id FROM citation INNER JOIN paper ON citation.paper_id = paper.paper_id WHERE EXISTS (SELECT 1 FROM author_list INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' AND author_list.paper_id = paper.paper_id)) AS cited_works",
        "SELECT COUNT(DISTINCT cited_paper_id) FROM citation WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen'))",
        "SELECT COUNT(DISTINCT c.cited_paper_id) FROM citation c, author_list al, author a, paper p WHERE c.paper_id = p.paper_id AND al.paper_id = p.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT c.cited_paper_id) FROM citation c, paper p, author_list al, author a WHERE c.paper_id = p.paper_id AND p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "nlq": "Find the name and number of citations of the author who has most citations among all authors?",
    "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT A.name, COUNT(C.paper_id) AS citations FROM author A JOIN author_list AL ON A.author_id = AL.author_id JOIN citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citations DESC LIMIT 1",
        "SELECT name, MAX(citation_count) FROM (SELECT A.name, COUNT(C.paper_id) as citation_count FROM author A INNER JOIN author_list AL ON A.author_id = AL.author_id INNER JOIN citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id) GROUPED_AUTHORS",
        "SELECT name, total_citations FROM (SELECT A.name AS name, COUNT(*) AS total_citations FROM author AS A JOIN author_list AS AL ON A.author_id = AL.author_id JOIN citation AS C ON C.cited_paper_id = AL.paper_id GROUP BY A.author_id) AS citation_counts ORDER BY total_citations DESC LIMIT 1",
        "SELECT top_author.name, MAX(total_citations) FROM (SELECT A.name, COUNT(C.paper_id) AS total_citations FROM author A JOIN author_list AL ON A.author_id = AL.author_id JOIN citation C ON C.cited_paper_id = AL.paper_id GROUP BY A.author_id) AS top_author",
        "SELECT A.name AS author_name, COUNT(DISTINCT C.paper_id) AS citation_count FROM author A JOIN author_list AL ON A.author_id = AL.author_id JOIN citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
        "SELECT author_name, MAX(citations) FROM (SELECT A.name as author_name, COUNT(C.paper_id) as citations FROM author A LEFT JOIN author_list AL ON A.author_id = AL.author_id LEFT JOIN citation C ON C.cited_paper_id = AL.paper_id GROUP BY A.author_id) T",
        "SELECT TA.name as Author, MAX(TA.citation_count) FROM (SELECT name, COUNT(*) AS citation_count FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.cited_paper_id GROUP BY name) AS TA",
        "SELECT author_name, citation_totals.citation_count FROM (SELECT A.name as author_name, COUNT(*) as citation_count FROM author A INNER JOIN author_list AL ON A.author_id = AL.author_id INNER JOIN citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id) citation_totals ORDER BY citation_totals.citation_count DESC LIMIT 1",
        "SELECT participant.name, COUNT(cite.paper_id) AS NumerOfCitations FROM (SELECT A.author_id, A.name FROM author A) as participant JOIN author_list AList ON participant.author_id = AList.author_id JOIN citation cite ON AList.paper_id = cite.cited_paper_id GROUP BY participant.author_id ORDER BY NumerOfCitations DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "nlq": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name, COUNT(*) AS citation_count FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.cited_paper_id GROUP BY author.author_id ORDER BY citation_count DESC LIMIT 1",
        "SELECT a.name, COUNT(c.paper_id) AS num_of_citations FROM author a JOIN author_list al ON al.author_id = a.author_id JOIN citation c ON al.paper_id = c.cited_paper_id GROUP BY a.author_id ORDER BY num_of_citations DESC LIMIT 1",
        "SELECT au.name, COUNT(ci.cited_paper_id) AS total_citations FROM author au INNER JOIN author_list ala ON au.author_id = ala.author_id INNER JOIN citation ci ON ala.paper_id = ci.cited_paper_id GROUP BY au.author_id ORDER BY total_citations DESC LIMIT 1",
        "SELECT a4.name, COUNT(*) AS number_of_citations FROM author a4 JOIN author_list a5 ON a4.author_id = a5.author_id INNER JOIN citation a6 ON a5.paper_id = a6.paper_id GROUP BY a4.author_id ORDER BY number_of_citations DESC LIMIT 1",
        "SELECT author.name, (SELECT COUNT(*) FROM citation WHERE citation.cited_paper_id = paper.paper_id) AS counts FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY author.author_id ORDER BY counts DESC LIMIT 1",
        "WITH CountCitations AS (SELECT a.author_id, COUNT(*) AS num_citations FROM citation c JOIN paper p ON c.cited_paper_id = p.paper_id JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON a.author_id = al.author_id GROUP BY a.author_id) SELECT author.name, countcitations.num_citations FROM author JOIN CountCitations ON author.author_id = CountCitations.author_id ORDER BY num_citations DESC LIMIT 1",
        "SELECT A.name, COUNT(DISTINCT C.paper_id) AS citation_count FROM author A JOIN author_list AL ON A.author_id = AL.author_id JOIN citation C ON AL.paper_id = C.cited_paper_id GROUP BY A.author_id ORDER BY citation_count DESC LIMIT 1",
        "SELECT top_author.name, MAX(total_citations) AS citations FROM (SELECT author.name, COUNT(citation.cited_paper_id) AS total_citations FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation on author_list.paper_id = citation.cited_paper_id GROUP BY author.author_id) AS top_author",
        "SELECT author_name.name, total.number FROM author as author_name JOIN (SELECT author_list.author_id, COUNT(citation.cited_paper_id) as number FROM citation JOIN author_list ON author_list.paper_id = citation.cited_paper_id GROUP BY author_list.author_id ORDER BY number DESC LIMIT 1) AS total ON author_name.author_id = total.author_id",
        "SELECT authors.name, COUNT(citations.cited_paper_id) AS citation_counts FROM author authors JOIN author_list list ON authors.author_id = list.author_id JOIN citation citations ON list.paper_id = citations.cited_paper_id GROUP BY authors.name ORDER BY citation_counts DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "nlq": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.venue, p.year FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen'))",
        "SELECT p.venue, p.year FROM paper p, author_list al, author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen' GROUP BY p.venue, p.year",
        "SELECT DISTINCT venue, year FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue AS 'venue', year AS 'year' FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT p.venue, p.year FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT p1.venue, p1.year FROM paper p1, author_list al1, author a1 WHERE p1.paper_id = al1.paper_id AND al1.author_id = a1.author_id AND a1.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue, year FROM paper WHERE EXISTS (SELECT 1 FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' AND author_list.paper_id = paper.paper_id)",
        "SELECT byVenueAndYear.venue, byVenueAndYear.year FROM (SELECT venue, year FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen' GROUP BY venue, year) AS byVenueAndYear",
        "SELECT p.venue AS 'Conference', p.year AS 'Year' FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen' GROUP BY p.venue, p.year ORDER BY p.year DESC"
      ]
    ]
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "nlq": "Which venues and years did Mckeown , Kathleen have papers ?",
    "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT paper.venue, paper.year FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT p.venue, p.year FROM paper AS p INNER JOIN author_list AS al ON p.paper_id = al.paper_id INNER JOIN author AS a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT v.venue, v.year FROM paper v JOIN author_list b ON v.paper_id = b.paper_id JOIN author c ON b.author_id = c.author_id WHERE c.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE author_id = (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen'))",
        "SELECT DISTINCT venue, year FROM paper WHERE EXISTS (SELECT 1 FROM author_list WHERE paper.paper_id = author_list.paper_id AND author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen'))",
        "SELECT DISTINCT venue, year FROM paper, author_list, author WHERE paper.paper_id = author_list.paper_id AND author_list.author_id = author.author_id AND author.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen')",
        "SELECT DISTINCT p.venue, p.year FROM paper p, author_list al, author a WHERE p.paper_id = al.paper_id AND al.author_id = a.author_id AND a.name = 'Mckeown, Kathleen'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper.paper_id IN (SELECT al.paper_id FROM author_list al JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen')",
        "SELECT DISTINCT venue, year FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN author ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "nlq": "What are the venues and years where Columbia University had papers ?",
    "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.venue, p.year FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id = (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University'))",
        "SELECT DISTINCT p.venue, p.year FROM paper p, author_list al, affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University'",
        "SELECT DISTINCT venue, year FROM paper INNER JOIN (SELECT paper_id FROM author_list WHERE affiliation_id = (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University')) AS cu_papers ON paper.paper_id = cu_papers.paper_id",
        "SELECT DISTINCT venue, year FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND al.paper_id = p.paper_id)",
        "SELECT p.venue, p.year FROM paper p WHERE p.paper_id IN (SELECT al.paper_id FROM author_list al JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University') GROUP BY p.venue, p.year",
        "WITH ColumbiaPapers AS (SELECT al.paper_id FROM author_list al INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University') SELECT DISTINCT p.venue, p.year FROM paper p INNER JOIN ColumbiaPapers cp ON p.paper_id = cp.paper_id",
        "SELECT DISTINCT venue, year FROM paper WHERE EXISTS (SELECT * FROM author_list INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.paper_id = author_list.paper_id)",
        "SELECT DISTINCT p.venue, p.year FROM affiliation a, author_list al, paper p WHERE a.name = 'Columbia University' AND a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id",
        "SELECT DISTINCT venue, year FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University'"
      ]
    ]
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "nlq": "Which venues and years did Columbia University have papers ?",
    "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT P.venue, P.year FROM paper P JOIN author_list AL ON P.paper_id = AL.paper_id JOIN affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
        "SELECT DISTINCT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list WHERE affiliation_id = (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University'))",
        "SELECT DISTINCT P.venue, P.year FROM paper AS P INNER JOIN author_list AS AL ON P.paper_id = AL.paper_id INNER JOIN affiliation AS A ON A.affiliation_id = AL.affiliation_id WHERE A.name = 'Columbia University'",
        "SELECT DISTINCT P.venue, P.year FROM paper P, author_list AL, affiliation A WHERE P.paper_id = AL.paper_id AND AL.affiliation_id = A.affiliation_id AND A.name = 'Columbia University'",
        "SELECT venue, year FROM paper WHERE EXISTS (SELECT 1 FROM author_list JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE author_list.paper_id = paper.paper_id AND affiliation.name = 'Columbia University')",
        "SELECT DISTINCT p.venue, p.year FROM affiliation a, author_list al, paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND a.name = 'Columbia University'",
        "SELECT DISTINCT p.venue, p.year FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE al.paper_id = p.paper_id AND a.name = 'Columbia University')",
        "SELECT DISTINCT venue, year FROM paper p JOIN (SELECT paper_id FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University')) as pp ON p.paper_id = pp.paper_id",
        "SELECT DISTINCT P.venue, P.year FROM author_list AL INNER JOIN paper P ON AL.paper_id = P.paper_id INNER JOIN affiliation A ON AL.affiliation_id = A.affiliation_id WHERE A.name = 'Columbia University'",
        "SELECT venue, year FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list AL WHERE AL.affiliation_id = (SELECT affiliation_id FROM affiliation WHERE name = 'Columbia University')) GROUP BY venue, year"
      ]
    ]
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "nlq": "Which author had the most papers in the year 2009?",
    "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1",
        "SELECT a.name FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT a.name FROM author a WHERE a.author_id IN (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT a.name FROM author a INNER JOIN (SELECT al.author_id, COUNT(al.paper_id) AS total_papers FROM author_list al JOIN paper p ON p.paper_id = al.paper_id AND p.year = 2009 GROUP BY al.author_id ORDER BY total_papers DESC LIMIT 1) sub ON a.author_id = sub.author_id",
        "SELECT name FROM author WHERE author_id = (SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009) GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT (SELECT name FROM author WHERE author_id = sub.author_id) FROM (SELECT al.author_id FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY COUNT(al.paper_id) DESC LIMIT 1) sub",
        "SELECT author.name FROM author, author_list, paper WHERE author.author_id = author_list.author_id AND author_list.paper_id = paper.paper_id AND paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1",
        "SELECT a.name FROM (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY COUNT(p.paper_id) DESC LIMIT 1) tab INNER JOIN author a ON tab.author_id = a.author_id"
      ]
    ]
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "nlq": "What is the name of the author with the most papers in 2009?",
    "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1",
        "SELECT a.name FROM author a INNER JOIN author_list al ON a.author_id = al.author_id INNER JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT a.name FROM author a, author_list al, paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id AND p.year = 2009 GROUP BY a.author_id ORDER BY COUNT(al.paper_id) DESC LIMIT 1",
        "SELECT author.name FROM author WHERE author.author_id = (SELECT author_list.author_id FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author_list.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1)",
        "SELECT name FROM author WHERE author_id = (SELECT al.author_id FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY COUNT(p.paper_id) DESC LIMIT 1)",
        "SELECT (SELECT name FROM author WHERE author_id = author.author_id) AS name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1",
        "SELECT author.name FROM author JOIN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author_list.author_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 1) AS temp ON author.author_id = temp.author_id"
      ]
    ]
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "nlq": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 3",
        "SELECT A.name FROM affiliation A INNER JOIN author_list AL ON A.affiliation_id = AL.affiliation_id INNER JOIN paper P ON AL.paper_id = P.paper_id WHERE P.year = 2009 GROUP BY A.name ORDER BY COUNT(P.paper_id) DESC LIMIT 3",
        "SELECT a.name FROM affiliation a, author_list al, paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT a.name as Affiliation_Name FROM affiliation a JOIN (SELECT affiliation_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) AS top_affiliations ON a.affiliation_id = top_affiliations.affiliation_id",
        "SELECT a.name FROM (SELECT affiliation_id FROM paper JOIN author_list USING(paper_id) WHERE year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) AS TopAffiliations JOIN affiliation a ON a.affiliation_id = TopAffiliations.affiliation_id",
        "SELECT Name FROM (SELECT affiliation.name AS Name, COUNT(paper.paper_id) AS PaperCount FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE paper.year = 2009 GROUP BY affiliation.name ORDER BY PaperCount DESC LIMIT 3) AS TopAffiliations",
        "SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009) GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 3)",
        "SELECT af.name FROM affiliation af JOIN (SELECT al.affiliation_id, COUNT(*) as CountPapers FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.affiliation_id ORDER BY CountPapers DESC LIMIT 3) subquery ON af.affiliation_id = subquery.affiliation_id",
        "SELECT af.name FROM affiliation af INNER JOIN (SELECT affiliation_id FROM author_list where paper_id IN (SELECT paper_id FROM paper WHERE year = 2009) GROUP BY affiliation_id ORDER BY COUNT(DISTINCT paper_id) DESC LIMIT 3) Q on af.affiliation_id = Q.affiliation_id"
      ]
    ]
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "nlq": "Which 3 affiliations had the most papers in 2009?",
    "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY affiliation.affiliation_id ORDER BY COUNT(paper.paper_id) DESC LIMIT 3",
        "SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3)",
        "SELECT affiliation.name FROM affiliation INNER JOIN (SELECT affiliation_id FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id AND paper.year = 2009 GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) top_affiliations ON top_affiliations.affiliation_id = affiliation.affiliation_id",
        "SELECT a.name FROM affiliation a, author_list al, paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id AND p.year = 2009 GROUP BY a.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT aff.name FROM (SELECT affiliation_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009) GROUP BY affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) AS top_ids JOIN affiliation aff ON aff.affiliation_id = top_ids.affiliation_id",
        "SELECT a.name FROM (SELECT affiliation_id, COUNT(affiliation_id) as total FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id AND paper.year = 2009 GROUP BY affiliation_id ORDER BY total DESC LIMIT 3) cnt JOIN affiliation a ON cnt.affiliation_id = a.affiliation_id",
        "SELECT name FROM affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM (SELECT al.affiliation_id FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3) sub)",
        "SELECT a.name FROM affiliation a JOIN (SELECT al.affiliation_id FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id AND p.year = 2009 GROUP BY al.affiliation_id ORDER BY COUNT(p.paper_id) DESC LIMIT 3) b ON a.affiliation_id = b.affiliation_id",
        "SELECT aff.name FROM author_list al JOIN affiliation aff ON al.affiliation_id = aff.affiliation_id WHERE al.paper_id IN (SELECT paper_id FROM paper WHERE year = 2009) GROUP BY aff.affiliation_id ORDER BY COUNT(*) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "nlq": "How many papers does Columbia University have in or before 2009 ?",
    "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009",
        "SELECT COUNT(paper_id) FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University') AND year <= 2009",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p, author_list al, affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
        "SELECT COUNT(*) FROM paper p WHERE EXISTS (SELECT 1 FROM author_list al JOIN affiliation af ON al.affiliation_id = af.affiliation_id WHERE af.name = 'Columbia University' AND al.paper_id = p.paper_id) AND p.year <= 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id WHERE paper.year <= 2009 AND EXISTS (SELECT 1 FROM affiliation WHERE affiliation_id = author_list.affiliation_id AND name = 'Columbia University'))",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009"
      ]
    ]
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "nlq": "Count the number of papers Columbia University had during or prior to 2009 .",
    "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper.paper_id FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Columbia University' AND paper.year <= 2009)",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p, author_list al, affiliation a WHERE p.paper_id = al.paper_id AND al.affiliation_id = a.affiliation_id AND a.name = 'Columbia University' AND p.year <= 2009",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
        "SELECT COUNT(paper_id) FROM (SELECT DISTINCT paper.paper_id FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009) AS distinct_papers",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id INNER JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Columbia University' AND paper.year <= 2009",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p CROSS JOIN author_list al ON p.paper_id = al.paper_id CROSS JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) AS num_papers FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Columbia University' AND paper.year <= 2009"
      ]
    ]
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "nlq": "How many papers does Stanford University have between 2000 and 2009?",
    "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON a.affiliation_id = al.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University' AND paper.year >= 2000 AND paper.year <= 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(paper_id) FROM (SELECT DISTINCT paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009) AS UniquePapers",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p, author_list al, affiliation af WHERE p.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name LIKE 'Stanford University' AND p.year >= 2000 AND p.year <= 2009",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper_id FROM paper INNER JOIN author_list USING (paper_id) INNER JOIN affiliation USING (affiliation_id) WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009)",
        "SELECT COUNT(DISTINCT p.paper_id) FROM affiliation a, author_list al, paper p WHERE a.affiliation_id = al.affiliation_id AND p.paper_id = al.paper_id AND a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009"
      ]
    ]
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "nlq": "Count the number of papers Stanford University had between 2000 and 2009.",
    "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT p.paper_id) FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id INNER JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University' AND paper.year >= 2000 AND paper.year <= 2009",
        "SELECT COUNT(*) FROM (SELECT DISTINCT paper_id FROM paper JOIN author_list USING (paper_id) JOIN affiliation USING (affiliation_id) WHERE name = 'Stanford University' AND year BETWEEN 2000 AND 2009)",
        "SELECT COUNT(DISTINCT pa.paper_id) FROM paper pa INNER JOIN author_list au ON pa.paper_id = au.paper_id INNER JOIN affiliation af ON au.affiliation_id = af.affiliation_id WHERE af.name = 'Stanford University' AND pa.year >= 2000 AND pa.year <= 2009",
        "SELECT COUNT(DISTINCT paper.paper_id) AS PaperCount FROM paper, author_list, affiliation WHERE paper.paper_id = author_list.paper_id AND author_list.affiliation_id = affiliation.affiliation_id AND affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(DISTINCT pa.paper_id) FROM paper pa, author_list al, affiliation af WHERE pa.paper_id = al.paper_id AND al.affiliation_id = af.affiliation_id AND af.name = 'Stanford University' AND pa.year BETWEEN 2000 AND 2009",
        "SELECT COUNT(*) FROM (SELECT paper.paper_id FROM paper INNER JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name = 'Stanford University' AND paper.year BETWEEN 2000 AND 2009 GROUP BY paper.paper_id)",
        "SELECT COUNT(paper.paper_id) FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id WHERE author_list.affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE name = 'Stanford University') AND paper.year BETWEEN 2000 AND 2009"
      ]
    ]
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "nlq": "What is the title of the paper that has most number of authors?",
    "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT p.title FROM paper p JOIN author_list al ON p.paper_id = al.paper_id GROUP BY p.paper_id ORDER BY COUNT(al.author_id) DESC LIMIT 1",
        "SELECT title FROM (SELECT p.title, COUNT(al.author_id) AS num_authors FROM paper p INNER JOIN author_list al ON p.paper_id = al.paper_id GROUP BY p.paper_id) AS result ORDER BY num_authors DESC LIMIT 1",
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
        "SELECT (SELECT p.title FROM paper p WHERE p.paper_id = al.paper_id) AS title FROM author_list al GROUP BY al.paper_id ORDER BY COUNT(al.author_id) DESC LIMIT 1",
        "SELECT p.title FROM paper p INNER JOIN (SELECT paper_id, COUNT(author_id) AS cnt FROM author_list GROUP BY paper_id) t ON p.paper_id = t.paper_id ORDER BY t.cnt DESC LIMIT 1",
        "SELECT p.title FROM paper p JOIN (SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) sub ON p.paper_id = sub.paper_id"
      ]
    ]
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "nlq": "Give the title of the paper with the most authors.",
    "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title FROM paper WHERE paper_id = (SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1)",
        "SELECT paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id GROUP BY author_list.paper_id ORDER BY COUNT(author_list.author_id) DESC LIMIT 1",
        "SELECT P.title FROM paper AS P WHERE P.paper_id = (SELECT paper_id FROM (SELECT paper_id, COUNT(author_id) AS total_authors FROM author_list GROUP BY paper_id ORDER BY total_authors DESC LIMIT 1))",
        "SELECT P.title FROM paper P WHERE P.paper_id IN (SELECT A.paper_id FROM author_list A GROUP BY A.paper_id HAVING COUNT(A.author_id) = (SELECT MAX(T.auth_count) FROM (SELECT COUNT(author_id) AS auth_count FROM author_list GROUP BY paper_id) T))",
        "SELECT title FROM paper WHERE paper_id IN (SELECT paper_id FROM author_list GROUP BY paper_id HAVING COUNT(author_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(author_id) AS cnt FROM author_list GROUP BY paper_id) AS Stats))",
        "SELECT P.title FROM paper P JOIN (SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) AS B ON P.paper_id = B.paper_id",
        "SELECT (SELECT title FROM paper WHERE paper_id = A.paper_id) AS title FROM (SELECT paper_id FROM author_list GROUP BY paper_id ORDER BY COUNT(author_id) DESC LIMIT 1) A",
        "SELECT P.title FROM (SELECT title, A.paper_id FROM paper JOIN (SELECT paper_id, COUNT(author_id) as number_authors FROM author_list GROUP BY paper_id) A ON paper.paper_id = A.paper_id ORDER BY A.number_authors DESC LIMIT 1) AS P",
        "SELECT paper.title FROM paper WHERE paper_id = (SELECT paper_id FROM (SELECT COUNT(*) as total, paper_id FROM author_list GROUP BY paper_id) tt ORDER BY tt.total DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "nlq": "How many collaborators has Mckeown , Kathleen had ?",
    "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT al2.author_id) FROM author AS a INNER JOIN author_list AS al ON a.author_id = al.author_id INNER JOIN paper AS p ON al.paper_id = p.paper_id INNER JOIN author_list AS al2 ON p.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen' AND al2.author_id != a.author_id",
        "SELECT COUNT(DISTINCT al2.author_id) FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN author_list al2 ON al.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen' AND al.author_id <> al2.author_id",
        "SELECT COUNT(DISTINCT author_list.author_id) - 1 FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen' AND author_list.paper_id IN (SELECT paper_id FROM author_list WHERE author_id != author.author_id)",
        "SELECT COUNT(DISTINCT other_authors.author_id) FROM author_list AS original JOIN author ON original.author_id = author.author_id JOIN author_list AS other_authors ON original.paper_id = other_authors.paper_id WHERE author.name = 'Mckeown, Kathleen' AND original.author_id <> other_authors.author_id",
        "WITH Collaborations AS (SELECT al.paper_id FROM author_list al INNER JOIN author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown, Kathleen') SELECT COUNT(DISTINCT al.author_id) FROM author_list al INNER JOIN Collaborations c ON al.paper_id = c.paper_id WHERE al.author_id NOT IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT al2.author_id) FROM author a, author_list al, author_list al2 WHERE a.author_id = al.author_id AND al.paper_id = al2.paper_id AND a.name = 'Mckeown, Kathleen' AND al.author_id != al2.author_id",
        "SELECT (COUNT(DISTINCT al2.author_id) - 1) FROM author_list al1 JOIN author a ON al1.author_id = a.author_id JOIN paper p ON al1.paper_id = p.paper_id JOIN author_list al2 ON p.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen'",
        "WITH AllPapers AS (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen') SELECT COUNT(DISTINCT author_id) FROM author_list WHERE paper_id IN (SELECT paper_id FROM AllPapers) AND author_id NOT IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT al.author_id) FROM author a1 INNER JOIN author_list al ON al.author_id = a1.author_id INNER JOIN (SELECT paper_id FROM author_list JOIN author ON author.author_id = author_list.author_id WHERE name = 'Mckeown, Kathleen') Collaborations ON al.paper_id = Collaborations.paper_id WHERE a1.name != 'Mckeown, Kathleen'",
        "SELECT COUNT(DISTINCT al2.author_id) AS Collaborators FROM author as a JOIN author_list as al1 ON al1.author_id = a.author_id JOIN author_list as al2 ON al1.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen' AND al1.author_id != al2.author_id"
      ]
    ]
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "nlq": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT al2.author_id) FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN paper p ON al.paper_id = p.paper_id JOIN author_list al2 ON p.paper_id = al2.paper_id WHERE a.name = 'Mckeown, Kathleen' AND al2.author_id != a.author_id",
        "SELECT COUNT(DISTINCT other_authors.author_id) FROM author target_author INNER JOIN author_list target_author_list ON target_author.author_id = target_author_list.author_id INNER JOIN paper ON target_author_list.paper_id = paper.paper_id INNER JOIN author_list as other_authors ON paper.paper_id = other_authors.paper_id WHERE target_author.name = 'Mckeown, Kathleen' AND other_authors.author_id != target_author.author_id",
        "SELECT COUNT(*) AS num_collaborators FROM (SELECT DISTINCT author_list.author_id FROM author, author_list, paper WHERE author.author_id = author_list.author_id AND author_list.paper_id = paper.paper_id AND paper.paper_id IN (SELECT paper_id FROM author_list, author WHERE author_list.author_id = author.author_id AND author.name = 'Mckeown, Kathleen')) WHERE author_id NOT IN (SELECT author_id FROM author WHERE author.name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT B.author_id) AS distinct_collaborators FROM author_list A JOIN author ON A.author_id = author.author_id JOIN author_list B ON A.paper_id = B.paper_id JOIN author C ON B.author_id = C.author_id WHERE author.name = 'Mckeown, Kathleen' AND B.author_id != A.author_id",
        "WITH papers_collaborators AS (SELECT paper_id FROM author INNER JOIN author_list ON author.author_id = author_list.author_id WHERE name = 'Mckeown, Kathleen') SELECT COUNT(DISTINCT author_list.author_id) FROM author_list JOIN papers_collaborators ON author_list.paper_id = papers_collaborators.paper_id WHERE author_list.author_id NOT IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT al2.author_id) FROM author_list al1 JOIN paper ON al1.paper_id = paper.paper_id JOIN author_list al2 ON paper.paper_id = al2.paper_id WHERE al1.author_id = (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen') AND al2.author_id != al1.author_id",
        "SELECT COUNT(DISTINCT author_id) FROM author_list WHERE paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen') AND author_id NOT IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')",
        "SELECT COUNT(DISTINCT A.author_id) FROM author_list A, author_list B WHERE A.paper_id = B.paper_id AND B.author_id = (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen') AND A.author_id != B.author_id"
      ]
    ]
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "nlq": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE author_list.paper_id IN (SELECT paper_id FROM author_list JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen') GROUP BY author.author_id ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1",
        "SELECT A.name FROM author AS A JOIN author_list AS AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL.paper_id FROM author_list AS AL JOIN author AS A ON AL.author_id = A.author_id WHERE A.name = 'Mckeown, Kathleen') GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT A.name, COUNT(AL.paper_id) AS papers_with_Mckeown FROM author AS A JOIN author_list AS AL ON A.author_id = AL.author_id JOIN paper AS P ON AL.paper_id = P.paper_id WHERE A.author_id != (SELECT foo.author_id FROM author AS foo WHERE foo.name = 'Mckeown, Kathleen') AND AL.paper_id IN (SELECT AL2.paper_id FROM author_list AS AL2 WHERE AL2.author_id = (SELECT foo.author_id FROM author AS foo WHERE foo.name = 'Mckeown, Kathleen')) GROUP BY A.author_id ORDER BY papers_with_Mckeown DESC LIMIT 1",
        "WITH Mckeown_papers AS (SELECT paper_id FROM author_list WHERE author_id = (SELECT a.author_id FROM author a WHERE a.name = 'Mckeown, Kathleen')) SELECT a.name FROM author a INNER JOIN author_list al ON a.author_id = al.author_id WHERE al.paper_id IN (SELECT paper_id FROM Mckeown_papers) AND a.name != 'Mckeown, Kathleen' GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1",
        "WITH Mckeown_authors AS (SELECT AL.author_id FROM author_list AL JOIN author A ON A.author_id = AL.author_id WHERE A.name = 'Mckeown, Kathleen') SELECT A.name FROM author A JOIN author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN (SELECT AL.paper_id FROM author_list AL WHERE AL.author_id IN Mckeown_authors) AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT author.name FROM author WHERE author_id IN (SELECT AL.author_id FROM author_list AL WHERE AL.paper_id IN (SELECT AL.paper_id FROM author_list AL WHERE AL.author_id = (SELECT author.author_id FROM author WHERE author.name = 'Mckeown, Kathleen')) AND AL.author_id != (SELECT author.author_id FROM author WHERE author.name = 'Mckeown, Kathleen')) GROUP BY author.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT top_author.name FROM author top_author JOIN author_list a_list_to_primary ON top_author.author_id = a_list_to_primary.author_id WHERE a_list_to_primary.paper_id IN (SELECT a_list_target.paper_id FROM author_list a_list_target JOIN author target_author ON a_list_target.author_id = target_author.author_id WHERE target_author.name = 'Mckeown, Kathleen') AND top_author.name <> 'Mckeown, Kathleen' GROUP BY top_author.name ORDER BY COUNT(a_list_to_primary.paper_id) DESC LIMIT 1",
        "WITH Co_authored_papers AS (SELECT paper_id FROM author_list WHERE author_id IN (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')) SELECT A.name FROM author A JOIN author_list AL ON A.author_id = AL.author_id WHERE AL.paper_id IN Co_authored_papers AND A.name != 'Mckeown, Kathleen' GROUP BY A.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT aug_names.name, COUNT(*) AS papers_joined FROM author aug_names JOIN author_list partyON JOIN paper artic_ WHERE aug_names.author_id = partyON.author_id AND partyON.paper_id = artic_.paper_id AND artic_.paper_id IN (SELECT pimptius.paper_id FROM paper pimptius JOIN author_list departmentLong ON departmentLong.paper_id = pimptius.paper_id WHERE departmentLong.author_id = (SELECT mainFrame.author_id FROM author mainFrame WHERE mainFrame.name = 'Mckeown, Kathleen')) AND aug_names.name <> 'Mckeown, Kathleen' GROUP BY aug_names.name ORDER BY papers_joined DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "nlq": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a JOIN author_list al ON a.author_id = al.author_id WHERE al.paper_id IN (SELECT al2.paper_id FROM author_list al2 JOIN author a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Mckeown, Kathleen') GROUP BY a.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT A.name FROM author A WHERE A.author_id IN (SELECT AL.author_id FROM author_list AL WHERE AL.paper_id IN (SELECT AL2.paper_id FROM author_list AL2 JOIN author A2 ON A2.author_id = AL2.author_id WHERE A2.name = 'Mckeown, Kathleen') AND AL.author_id != (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen')) GROUP BY A.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT A3.name FROM author A3 WHERE A3.author_id = (SELECT A2.author_id FROM author_list A2 WHERE A2.paper_id IN (SELECT A1.paper_id FROM author_list A1 JOIN author A ON A.author_id = A1.author_id WHERE A.name = 'Mckeown, Kathleen') GROUP BY A2.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT AUTHOR.name FROM (SELECT author_id AS ID, max(total) AS TOTAL FROM (SELECT author_id, COUNT(author_id) AS total FROM author_list WHERE paper_id IN (SELECT PAPER_ID FROM author_list JOIN author ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen') AND author_id != (SELECT author_id FROM author WHERE name = 'Mckeown, Kathleen') GROUP BY author_id) GROUP BY author_id) INNER JOIN AUTHOR ON author.author_id = ID",
        "WITH CTE AS (SELECT author.author_id, COUNT(*) AS NumPapers FROM author JOIN author_list ON author.author_id = author_list.author_id WHERE paper_id IN (SELECT paper_id FROM author_list JOIN author ON author.author_id = author_list.author_id WHERE author.name = 'Mckeown, Kathleen') GROUP BY author.author_id) SELECT name FROM author JOIN CTE ON author.author_id = CTE.author_id WHERE NumPapers = (SELECT MAX(NumPapers) FROM CTE) LIMIT 1",
        "SELECT AUTHOR.name FROM AUTHOR JOIN (SELECT author_id, COUNT(*) as cnt FROM AUTHOR_LIST WHERE paper_id IN (SELECT paper_id FROM AUTHOR_LIST JOIN AUTHOR ON AUTHOR.author_id = AUTHOR_LIST.author_id WHERE AUTHOR.name = 'Mckeown, Kathleen') GROUP BY author_id ORDER BY cnt DESC LIMIT 2) AS AUTHOR_BEST ON AUTHOR.author_id = AUTHOR_BEST.author_id WHERE AUTHOR.name <> 'Mckeown, Kathleen'",
        "SELECT NAME FROM (SELECT AUTHOR.NAME, COUNT(*) AS CNT FROM AUTHOR JOIN AUTHOR_LIST ON AUTHOR.AUTHOR_ID = AUTHOR_LIST.AUTHOR_ID WHERE AUTHOR_LIST.PAPER_ID IN (SELECT PAPER_ID FROM AUTHOR_LIST JOIN AUTHOR ON AUTHOR.AUTHOR_ID = AUTHOR_LIST.AUTHOR_ID WHERE AUTHOR.NAME = 'Mckeown, Kathleen') GROUP BY AUTHOR.NAME ORDER BY CNT DESC LIMIT 2) WHERE NAME != 'Mckeown, Kathleen'"
      ]
    ]
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "nlq": "Find the id of the papers whose title has the key word 'translation'.",
    "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
    "infer_predictions": [
      [
        "SELECT paper_id FROM paper WHERE title LIKE '%translation%'",
        "SELECT p.paper_id FROM paper p WHERE p.title LIKE '%translation%'",
        "SELECT paper_id FROM paper WHERE title GLOB '*translation*'",
        "SELECT p.paper_id FROM paper p WHERE p.title GLOB '*translation*'",
        "SELECT paper.paper_id FROM paper WHERE INSTR(paper.title, 'translation') > 0",
        "SELECT DISTINCT p.paper_id FROM paper p WHERE INSTR(p.title, 'translation') > 0"
      ]
    ]
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "nlq": "What are the ids for papers with titles containing 'translation'?",
    "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
    "infer_predictions": [
      [
        "SELECT paper_id FROM paper WHERE title LIKE '%translation%'",
        "SELECT p.paper_id FROM paper p WHERE p.title LIKE '%translation%'",
        "SELECT DISTINCT p.paper_id FROM paper p WHERE p.title LIKE '%translation%'",
        "SELECT paper_id FROM paper WHERE instr(title, 'translation') > 0",
        "SELECT p.paper_id FROM paper p WHERE p.title LIKE '%translation%' AND p.title IS NOT NULL",
        "SELECT paper.paper_id FROM paper WHERE LOWER(paper.title) LIKE LOWER('%translation%')",
        "SELECT paper_id FROM paper WHERE title LIKE '%translation%' COLLATE NOCASE"
      ]
    ]
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "nlq": "Find the id and title of the papers that are never cited by others.",
    "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
    "infer_predictions": [
      [
        "SELECT p.paper_id, p.title FROM paper p LEFT JOIN citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
        "SELECT paper.paper_id, paper.title FROM paper WHERE paper.paper_id NOT IN (SELECT citation.cited_paper_id FROM citation)",
        "SELECT p.paper_id, p.title FROM paper p WHERE NOT EXISTS (SELECT 1 FROM citation c WHERE c.cited_paper_id = p.paper_id)",
        "SELECT p1.paper_id, p1.title FROM paper p1 WHERE p1.paper_id NOT IN (SELECT c.cited_paper_id FROM citation c)",
        "SELECT paper.paper_id, paper.title FROM paper LEFT OUTER JOIN citation ON paper.paper_id = citation.cited_paper_id WHERE citation.cited_paper_id IS NULL",
        "SELECT p.paper_id, p.title FROM paper p WHERE p.paper_id NOT IN (SELECT DISTINCT c.cited_paper_id FROM citation c)",
        "SELECT p.paper_id, p.title FROM paper p WHERE NOT EXISTS (SELECT NULL FROM citation c WHERE c.cited_paper_id = p.paper_id)",
        "SELECT p1.paper_id, p1.title FROM paper p1 LEFT JOIN citation c1 ON p1.paper_id = c1.cited_paper_id WHERE c1.cited_paper_id IS NULL",
        "SELECT p.paper_id, p.title FROM paper p LEFT JOIN citation c ON p.paper_id = c.cited_paper_id AND c.cited_paper_id IS NULL"
      ]
    ]
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "nlq": "What are the ids and titles for papers that have never been cited?",
    "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
    "infer_predictions": [
      [
        "SELECT p.paper_id, p.title FROM paper p LEFT JOIN citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
        "SELECT paper.paper_id, paper.title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation)",
        "SELECT paper_id, title FROM paper EXCEPT SELECT cited_paper_id, title FROM paper JOIN citation ON paper.paper_id = citation.cited_paper_id",
        "SELECT p.paper_id, p.title FROM paper p WHERE NOT EXISTS (SELECT 1 FROM citation c WHERE c.cited_paper_id = p.paper_id)",
        "SELECT p.paper_id, p.title FROM paper p LEFT OUTER JOIN citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL",
        "SELECT DISTINCT paper.paper_id, paper.title FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id WHERE citation.cited_paper_id IS NULL",
        "SELECT DISTINCT p.paper_id, p.title FROM paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM citation c)",
        "SELECT p1.paper_id, p1.title FROM paper p1 WHERE NOT EXISTS (SELECT NULL FROM citation c1 WHERE c1.cited_paper_id = p1.paper_id)",
        "SELECT p.paper_id, p.title FROM paper p WHERE p.paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM citation)"
      ]
    ]
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "nlq": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT A.name FROM affiliation A WHERE A.address LIKE '%China%' AND A.affiliation_id IN (SELECT AL.affiliation_id FROM author_list AL GROUP BY AL.affiliation_id ORDER BY COUNT(AL.paper_id) DESC LIMIT 1)",
        "SELECT name FROM affiliation WHERE address LIKE '%China%' AND affiliation_id = (SELECT affiliation_id FROM author_list GROUP BY affiliation_id ORDER BY COUNT(paper_id) DESC LIMIT 1)",
        "SELECT affiliation.name FROM affiliation WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.affiliation_id ORDER BY (SELECT COUNT(author_list.paper_id) FROM author_list WHERE author_list.affiliation_id = affiliation.affiliation_id) DESC LIMIT 1",
        "SELECT af.name FROM affiliation af JOIN author_list al ON af.affiliation_id = al.affiliation_id WHERE af.address LIKE '%China%' GROUP BY af.affiliation_id ORDER BY COUNT(al.paper_id) DESC LIMIT 1",
        "SELECT affiliation.name FROM affiliation INNER JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.affiliation_id ORDER BY COUNT(author_list.paper_id) DESC LIMIT 1",
        "SELECT name FROM (SELECT affiliation.name, COUNT(author_list.paper_id) AS total_published FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.name) AS result ORDER BY result.total_published DESC LIMIT 1",
        "SELECT name FROM affiliation WHERE address LIKE '%China%' AND affiliation.affiliation_id = (SELECT affiliation_id FROM (SELECT affiliation_id, COUNT(paper_id) AS total_papers FROM author_list GROUP BY affiliation_id) as PaperCount ORDER BY total_papers DESC LIMIT 1)",
        "SELECT af.name FROM affiliation af, author_list al WHERE af.address LIKE '%China%' AND af.affiliation_id = al.affiliation_id GROUP BY af.affiliation_id ORDER BY COUNT(al.paper_id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "nlq": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT a.name FROM affiliation a JOIN author_list al ON a.affiliation_id = al.affiliation_id JOIN paper p ON p.paper_id = al.paper_id WHERE a.address LIKE '%China%' GROUP BY a.affiliation_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM affiliation WHERE affiliation_id = (SELECT al.affiliation_id FROM author_list al JOIN paper p ON p.paper_id = al.paper_id JOIN affiliation a ON a.affiliation_id = al.affiliation_id WHERE address LIKE '%China%' GROUP BY al.affiliation_id ORDER BY COUNT(p.paper_id) DESC LIMIT 1)",
        "SELECT af.name FROM affiliation af INNER JOIN (SELECT affiliation_id, COUNT(paper_id) as cnt FROM author_list GROUP BY affiliation_id) AS counts ON af.affiliation_id = counts.affiliation_id WHERE af.address LIKE '%China%' ORDER BY counts.cnt DESC LIMIT 1",
        "SELECT a.name FROM affiliation a WHERE a.address LIKE '%China%' AND a.affiliation_id IN (SELECT al.affiliation_id FROM author_list al GROUP BY al.affiliation_id HAVING COUNT(DISTINCT al.paper_id) = (SELECT MAX(c) FROM (SELECT COUNT(paper_id) AS c FROM author_list WHERE affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY affiliation_id)))",
        "WITH PaperCounts AS (SELECT a.affiliation_id, COUNT(*) AS total FROM author_list al JOIN paper p ON p.paper_id = al.paper_id JOIN affiliation a ON a.affiliation_id = al.affiliation_id WHERE a.address LIKE '%China%' GROUP BY a.affiliation_id) SELECT name FROM affiliation WHERE affiliation_id = (SELECT affiliation_id FROM PaperCounts ORDER BY total DESC LIMIT 1)",
        "SELECT AffName.name FROM (SELECT a.name as Name, COUNT(p.paper_id) AS NumPapers FROM author_list al, paper p, affiliation a WHERE al.paper_id = p.paper_id AND al.affiliation_id = a.affiliation_id AND a.address LIKE '%China%' GROUP BY a.affiliation_id ORDER BY NumPapers DESC LIMIT 1) AS AffName",
        "SELECT a.name FROM affiliation a WHERE a.affiliation_id = (SELECT affiliation_id FROM (SELECT al.affiliation_id, COUNT(al.paper_id) as total FROM author_list al JOIN paper p ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM affiliation WHERE address LIKE '%China%') GROUP BY al.affiliation_id ORDER BY total DESC LIMIT 1) AS sub)",
        "SELECT NAME FROM (SELECT a.name, COUNT(al.paper_id) AS count FROM affiliation a JOIN author_list al ON a.affiliation_id = al.affiliation_id JOIN paper p ON al.paper_id = p.paper_id WHERE a.address LIKE '%China%' GROUP BY a.name ORDER BY COUNT DESC LIMIT 1) AS res",
        "WITH Ratio AS (SELECT affiliation_id, COUNT(paper_id) AS PCount FROM author_list GROUP BY affiliation_id) SELECT a.name FROM affiliation a JOIN Ratio r ON a.affiliation_id = r.affiliation_id WHERE a.address LIKE '%China%' ORDER BY r.PCount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "nlq": "Find the number of papers published in different conferences each year.",
    "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
    "infer_predictions": [
      [
        "SELECT year, venue, COUNT(DISTINCT paper_id) AS num_papers FROM paper GROUP BY year, venue",
        "SELECT p.year, p.venue, COUNT(paper_id) AS number_of_papers FROM paper p GROUP BY p.year, p.venue",
        "SELECT year, venue, COUNT(*) AS number_of_papers FROM paper GROUP BY venue, year",
        "SELECT p.venue AS conference, p.year AS year, COUNT(DISTINCT p.paper_id) AS papers_published FROM paper p GROUP BY p.venue, p.year",
        "SELECT year, venue, COUNT(paper_id) FROM paper GROUP BY year, venue",
        "SELECT p.year, p.venue, COUNT(*) FROM paper p GROUP BY p.year, p.venue",
        "SELECT DISTINCT p.year, p.venue, COUNT(DISTINCT paper_id) AS papers_per_year FROM paper p GROUP BY p.year, p.venue",
        "SELECT COUNT(DISTINCT p.paper_id) AS num_papers, p.year, p.venue FROM paper p GROUP BY p.year, p.venue",
        "SELECT p.venue, p.year, COUNT(p.paper_id) AS count_of_papers FROM paper p GROUP BY p.venue, p.year",
        "SELECT year, venue, COUNT(paper_id) AS total_papers FROM paper GROUP BY venue, year"
      ]
    ]
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "nlq": "How many papers are published in each venue in each year?",
    "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
    "infer_predictions": [
      [
        "SELECT venue, year, COUNT(paper_id) AS total_papers FROM paper GROUP BY venue, year",
        "SELECT venue, year, COUNT(*) AS num_papers FROM paper GROUP BY venue, year",
        "SELECT p.venue, p.year, COUNT(p.paper_id) FROM paper p GROUP BY p.venue, p.year",
        "SELECT venue, year, COUNT(paper_id) FROM paper GROUP BY 1, 2",
        "SELECT venue AS paper_venue, year AS paper_year, COUNT(paper_id) AS papers_count FROM paper GROUP BY paper_venue, paper_year",
        "SELECT p.venue, p.year, COUNT(*) FROM paper p GROUP BY p.venue, p.year",
        "SELECT venue, year, COUNT(DISTINCT paper_id) AS published_papers FROM paper GROUP BY venue, year",
        "SELECT p1.venue, p1.year, COUNT(p1.paper_id) AS total FROM paper p1 GROUP BY p1.venue, p1.year",
        "SELECT venue, year, COUNT(paper_id) AS count_of_papers FROM paper GROUP BY venue, year",
        "SELECT p.venue AS Venue, p.year AS Year, COUNT(p.paper_id) AS NumberOfPapers FROM paper p GROUP BY Venue, Year"
      ]
    ]
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "nlq": "Find the total number of papers for each affiliation.",
    "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
    "infer_predictions": [
      [
        "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS total_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
        "SELECT name, COUNT(DISTINCT paper_id) AS total_papers FROM affiliation INNER JOIN author_list USING (affiliation_id) INNER JOIN paper USING (paper_id) GROUP BY affiliation_id",
        "SELECT a.name, COUNT(DISTINCT p.paper_id) AS total_papers FROM affiliation a, author_list al, paper p WHERE a.affiliation_id = al.affiliation_id AND al.paper_id = p.paper_id GROUP BY a.affiliation_id",
        "SELECT af.name, COUNT(DISTINCT p.paper_id) AS total_papers FROM affiliation af LEFT JOIN author_list al ON af.affiliation_id = al.affiliation_id LEFT JOIN paper p ON al.paper_id = p.paper_id GROUP BY af.affiliation_id",
        "SELECT name, COUNT(DISTINCT p.paper_id) AS total_papers FROM affiliation JOIN author_list USING (affiliation_id) LEFT OUTER JOIN paper AS p ON author_list.paper_id = p.paper_id GROUP BY affiliation_id",
        "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS total_papers FROM affiliation, author_list, paper WHERE affiliation.affiliation_id = author_list.affiliation_id AND author_list.paper_id = paper.paper_id GROUP BY affiliation.affiliation_id",
        "SELECT aff.name, COUNT(DISTINCT pa.paper_id) AS total_papers FROM affiliation aff CROSS JOIN author_list al ON aff.affiliation_id = al.affiliation_id CROSS JOIN paper pa ON al.paper_id = pa.paper_id GROUP BY aff.affiliation_id",
        "SELECT affiliations.name, COUNT(DISTINCT papers.paper_id) AS count_of_papers FROM affiliation affiliations JOIN author_list authors_on On affiliations.affiliation_id = authors_on.affiliation_id JOIN paper papers ON authors_on.paper_id = papers.paper_id GROUP BY affiliations.affiliation_id"
      ]
    ]
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "nlq": "How many papers has each affiliation published?",
    "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
    "infer_predictions": [
      [
        "SELECT affiliation.name, COUNT(DISTINCT paper.paper_id) AS num_papers FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name",
        "SELECT a.name, COUNT(DISTINCT p.paper_id) AS published_papers FROM affiliation a INNER JOIN author_list al ON a.affiliation_id = al.affiliation_id INNER JOIN paper p ON al.paper_id = p.paper_id GROUP BY a.name",
        "SELECT aff.name, COUNT(DISTINCT pap.paper_id) FROM affiliation aff, author_list al, paper pap WHERE aff.affiliation_id = al.affiliation_id AND al.paper_id = pap.paper_id GROUP BY aff.name",
        "SELECT affl.name, COUNT(p.paper_id) FROM affiliation affl LEFT JOIN author_list al ON affl.affiliation_id = al.affiliation_id LEFT JOIN paper p ON al.paper_id = p.paper_id GROUP BY affl.name",
        "SELECT a.name, COUNT(DISTINCT pp.paper_id) FROM affiliation a, author_list al LEFT JOIN paper pp ON al.paper_id = pp.paper_id WHERE a.affiliation_id = al.affiliation_id GROUP BY a.name",
        "SELECT DISTINCT a.name, (SELECT COUNT(p.paper_id) FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE al.affiliation_id = a.affiliation_id) AS total_papers FROM affiliation a",
        "SELECT name, COUNT(DISTINCT paper_id) FROM affiliation JOIN author_list USING (affiliation_id) JOIN paper USING (paper_id) GROUP BY name",
        "SELECT a_name as name, (SELECT COUNT(*) FROM paper, author_list WHERE author_list.paper_id = paper.paper_id AND author_list.affiliation_id = problem_aff_id) as Paper_Count FROM (SELECT name as a_name, affiliation_id as problem_aff_id FROM affiliation) t1"
      ]
    ]
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "nlq": "Find the titles of papers that have more than 50 citations.",
    "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
    "infer_predictions": [
      [
        "SELECT p.title FROM paper p JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY p.title HAVING COUNT(c.cited_paper_id) > 50",
        "SELECT title FROM paper WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)",
        "SELECT title FROM paper WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50)",
        "SELECT p.title FROM paper p WHERE EXISTS (SELECT NULL FROM citation c WHERE c.cited_paper_id = p.paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50)",
        "SELECT title FROM paper p WHERE (SELECT COUNT(*) FROM citation WHERE cited_paper_id = p.paper_id) > 50",
        "SELECT p1.title FROM paper p1 WHERE 50 < (SELECT COUNT(*) FROM citation WHERE cited_paper_id = p1.paper_id)",
        "SELECT title FROM paper WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50)",
        "SELECT p.title FROM paper p INNER JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50) c ON p.paper_id = c.cited_paper_id",
        "SELECT p.title FROM paper p, citation c WHERE p.paper_id = c.cited_paper_id GROUP BY p.title HAVING COUNT(c.cited_paper_id) > 50"
      ]
    ]
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "nlq": "What are the titles for papers with more than 50 citations?",
    "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
    "infer_predictions": [
      [
        "SELECT title FROM paper WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50)",
        "SELECT p.title FROM paper p JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) c ON p.paper_id = c.cited_paper_id",
        "SELECT title FROM paper WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(cited_paper_id) > 50)",
        "SELECT title FROM paper p WHERE EXISTS (SELECT NULL FROM citation c WHERE c.cited_paper_id = p.paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50)",
        "SELECT p.title FROM paper p WHERE (SELECT COUNT(*) FROM citation c WHERE c.cited_paper_id = p.paper_id) > 50",
        "SELECT paper.title FROM paper INNER JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50) AS cited ON paper.paper_id = cited.cited_paper_id",
        "SELECT p.title FROM paper p INNER JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50",
        "SELECT p1.title FROM paper p1 WHERE 50 < (SELECT COUNT(*) FROM citation c WHERE c.cited_paper_id = p1.paper_id)",
        "SELECT p.title FROM paper p, citation c WHERE p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50",
        "SELECT paper.title FROM paper WHERE paper_id IN (SELECT c1.cited_paper_id FROM citation c1 GROUP BY c1.cited_paper_id HAVING COUNT(c1.paper_id) > 50)"
      ]
    ]
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "nlq": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT a.author_id) FROM author a WHERE NOT EXISTS (SELECT 1 FROM paper p JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50 AND p.paper_id IN (SELECT al.paper_id FROM author_list al WHERE al.author_id = a.author_id))",
        "SELECT COUNT(*) FROM (SELECT author.author_id FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN paper ON author_list.paper_id = paper.paper_id LEFT JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) AS HighlyCited ON paper.paper_id = HighlyCited.cited_paper_id WHERE HighlyCited.cited_paper_id IS NULL GROUP BY author.author_id)",
        "SELECT COUNT(DISTINCT author.author_id) FROM author WHERE author.author_id NOT IN (SELECT author_list.author_id FROM author_list JOIN (SELECT paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50) AS CitedPapers ON author_list.paper_id = CitedPapers.paper_id)",
        "SELECT COUNT(DISTINCT a.author_id) FROM author a LEFT JOIN (SELECT author_id FROM author_list al JOIN paper ON al.paper_id = paper.paper_id WHERE paper.paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50)) AS CitedAuthors ON CitedAuthors.author_id = a.author_id WHERE CitedAuthors.author_id IS NULL",
        "SELECT COUNT(DISTINCT a.author_id) FROM author a WHERE NOT EXISTS (SELECT NULL FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id INNER JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50 AND al.author_id = a.author_id)",
        "SELECT COUNT(a.author_id) FROM author a WHERE a.author_id NOT IN (SELECT al.author_id FROM author_list al JOIN (SELECT cited_paper_id FROM citation c WHERE (SELECT COUNT(*) FROM citation c2 WHERE c2.cited_paper_id = c.cited_paper_id) > 50) temp1 ON al.paper_id = temp1.cited_paper_id GROUP BY al.author_id)",
        "SELECT COUNT(DISTINCT author.author_id) FROM author WHERE author_id NOT IN (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50)",
        "SELECT COUNT(*) FROM (SELECT a.author_id FROM author a LEFT JOIN (SELECT DISTINCT al.author_id FROM author_list al INNER JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50) PopularP ON al.paper_id = PopularP.cited_paper_id) Result ON a.author_id = Result.author_id WHERE Result.author_id IS NULL) FinalCount",
        "SELECT COUNT(DISTINCT author.author_id) FROM author EXCEPT SELECT DISTINCT al.author_id FROM author_list al WHERE EXISTS (SELECT * FROM citation WHERE citation.cited_paper_id = al.paper_id GROUP BY citation.cited_paper_id HAVING COUNT(citation.paper_id) > 50)",
        "SELECT COUNT(*) FROM author WHERE author_id NOT IN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY citation.cited_paper_id HAVING COUNT(citation.paper_id) > 50)"
      ]
    ]
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "nlq": "How many authors have not published a paper with more than 50 citations?",
    "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT author.author_id) FROM author WHERE author.author_id NOT IN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50))",
        "SELECT COUNT(*) FROM author WHERE author_id NOT IN (SELECT a.author_id FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN paper p ON al.paper_id = p.paper_id JOIN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) c ON p.paper_id = c.cited_paper_id)",
        "SELECT COUNT(DISTINCT a.author_id) FROM author a WHERE NOT EXISTS (SELECT 1 FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id INNER JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50 AND al.author_id = a.author_id)",
        "SELECT COUNT(DISTINCT author_id) FROM author WHERE author_id NOT IN (SELECT author_id FROM author_list WHERE paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(paper_id) > 50))",
        "SELECT COUNT(*) FROM author AS a WHERE NOT EXISTS (SELECT 1 FROM author_list AS al INNER JOIN paper AS p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.paper_id IN (SELECT c.cited_paper_id FROM citation AS c GROUP BY c.cited_paper_id HAVING COUNT(c.paper_id) > 50))",
        "SELECT COUNT(*) FROM (SELECT author_id FROM author EXCEPT SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.paper_id IN (SELECT cited_paper_id FROM citation GROUP BY cited_paper_id HAVING COUNT(*) > 50))",
        "SELECT COUNT(author.author_id) FROM author WHERE NOT EXISTS (SELECT NULL FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY citation.cited_paper_id HAVING COUNT(citation.paper_id) > 50 AND author_list.author_id = author.author_id)",
        "SELECT COUNT(*) FROM author WHERE author_id NOT IN (SELECT distinct al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id JOIN citation c ON p.paper_id = c.cited_paper_id GROUP BY c.cited_paper_id HAVING COUNT(distinct c.paper_id) > 50)",
        "SELECT (SELECT COUNT(DISTINCT author_id) FROM author) - (SELECT COUNT(DISTINCT author_list.author_id) FROM author_list INNER JOIN paper ON author_list.paper_id = paper.paper_id INNER JOIN citation ON paper.paper_id = citation.cited_paper_id GROUP BY citation.cited_paper_id HAVING COUNT(citation.paper_id) > 50)"
      ]
    ]
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "nlq": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.name FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009",
        "SELECT DISTINCT author.name FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('NAACL', 'ACL') AND paper.year = 2009",
        "SELECT name FROM author WHERE author_id IN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('NAACL', 'ACL') AND paper.year = 2009)",
        "SELECT DISTINCT a.name FROM author a, author_list al, paper p WHERE a.author_id = al.author_id AND al.paper_id = p.paper_id AND p.venue IN ('NAACL', 'ACL') AND p.year = 2009",
        "SELECT DISTINCT authored_authors.name FROM author AS authored_authors JOIN author_list AS list ON authored_authors.author_id = list.author_id JOIN paper AS published_paper ON list.paper_id = published_paper.paper_id WHERE published_paper.venue IN ('NAACL', 'ACL') AND published_paper.year = 2009",
        "SELECT DISTINCT name FROM author WHERE author_id IN (SELECT DISTINCT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE venue IN ('NAACL', 'ACL') AND year = 2009))",
        "SELECT a.name FROM author a WHERE EXISTS (SELECT 1 FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009 AND al.author_id = a.author_id)",
        "SELECT DISTINCT author.name FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('NAACL', 'ACL') AND paper.year = 2009",
        "SELECT DISTINCT a.name FROM paper p JOIN author_list al ON p.paper_id = al.paper_id JOIN author a ON al.author_id = a.author_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009",
        "SELECT name FROM (SELECT DISTINCT a.name, p.venue, p.year FROM author a INNER JOIN author_list al ON a.author_id = al.author_id INNER JOIN paper p ON al.paper_id = p.paper_id) WHERE venue IN ('NAACL', 'ACL') AND year = 2009"
      ]
    ]
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "nlq": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
    "infer_predictions": [
      [
        "SELECT DISTINCT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('NAACL', 'ACL') AND paper.year = 2009 GROUP BY author.name HAVING COUNT(DISTINCT paper.venue) = 2",
        "SELECT author.name FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('NAACL', 'ACL') AND paper.year = 2009 GROUP BY author.name HAVING COUNT(DISTINCT paper.venue) >= 2",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009 AND venue = 'NAACL') INTERSECT SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE year = 2009 AND venue = 'ACL'))",
        "SELECT a_nacl.name FROM (SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'NAACL' AND paper.year = 2009) as a_nacl JOIN (SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper on author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL' AND paper.year = 2009) as a_acl ON a_nacl.name = a_acl.name",
        "SELECT author.name FROM author WHERE EXISTS(SELECT * FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'NAACL' AND paper.year = 2009 AND author_list.author_id = author.author_id) AND EXISTS (SELECT * FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL' AND paper.year = 2009 AND author_list.author_id = author.author_id)",
        "SELECT author.name FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN author ON author_list.author_id = author.author_id WHERE paper.venue = 'NAACL' AND paper.year = 2009 INTERSECT SELECT author.name FROM paper LEFT JOIN author_list ON paper.paper_id = author_list.paper_id LEFT JOIN author ON author_list.author_id = author.author_id WHERE paper.venue = 'ACL' AND paper.year = 2009",
        "WITH NAACL AS (SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'NAACL' AND paper.year = 2009), ACL AS (SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL' AND paper.year = 2009) SELECT NAACL.name FROM NAACL JOIN ACL ON NAACL.name = ACL.name",
        "SELECT DISTINCT AUTHOR.name FROM AUTHOR, PAPER as PN, PAPER as PA, AUTHOR_LIST AS ALN, AUTHOR_LIST AS ALA WHERE AUTHOR.author_id = ALN.author_id AND ALN.paper_id = PN.paper_id AND PN.venue = 'NAACL' AND PN.year = 2009 AND AUTHOR.author_id = ALA.author_id AND ALA.paper_id = PA.paper_id AND PA.venue = 'ACL' AND PA.year = 2009"
      ]
    ]
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "nlq": "Find the name of authors who have never published a paper in ACL.",
    "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
    "infer_predictions": [
      [
        "SELECT name FROM author WHERE author_id NOT IN (SELECT author.author_id FROM author INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL')",
        "SELECT a.name FROM author a WHERE NOT EXISTS (SELECT 1 FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.venue = 'ACL')",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL')",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT DISTINCT al.author_id FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id AND p.venue = 'ACL')",
        "SELECT a.name FROM author a LEFT JOIN author_list al ON a.author_id = al.author_id LEFT JOIN paper p ON al.paper_id = p.paper_id AND p.venue = 'ACL' WHERE p.paper_id IS NULL",
        "SELECT name FROM author EXCEPT SELECT name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL'",
        "SELECT DISTINCT a.name FROM author a WHERE NOT EXISTS (SELECT NULL FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE al.author_id = a.author_id AND p.venue = 'ACL')",
        "SELECT name FROM author a WHERE author_id NOT IN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE venue = 'ACL')",
        "SELECT DISTINCT author.name FROM author WHERE author_id NOT IN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL')",
        "SELECT a.name FROM author a LEFT JOIN (SELECT author_list.author_id FROM author_list JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue = 'ACL') b ON a.author_id = b.author_id WHERE b.author_id IS NULL"
      ]
    ]
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "nlq": "What are the names of authors who have not published a paper in ACL?",
    "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
    "infer_predictions": [
      [
        "SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM author_list WHERE paper_id IN (SELECT paper_id FROM paper WHERE venue = 'ACL'))",
        "SELECT a.name FROM author a LEFT JOIN author_list al ON a.author_id = al.author_id LEFT JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue != 'ACL' OR p.venue IS NULL",
        "SELECT a2.name FROM author a2 WHERE NOT EXISTS (SELECT 1 FROM author_list al2 JOIN paper p2 ON al2.paper_id = p2.paper_id WHERE p2.venue = 'ACL' AND a2.author_id = al2.author_id)",
        "SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT DISTINCT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL')",
        "SELECT DISTINCT a3.name FROM author a3 WHERE a3.author_id NOT IN (SELECT al3.author_id FROM author_list al3 INNER JOIN paper p3 ON al3.paper_id = p3.paper_id AND p3.venue = 'ACL')",
        "SELECT author.name FROM author WHERE author_id NOT IN (SELECT al.author_id FROM author_list al JOIN paper ON al.paper_id = paper.paper_id WHERE paper.venue = 'ACL')",
        "SELECT DISTINCT name FROM author EXCEPT SELECT name FROM author a JOIN author_list al ON a.author_id = al.author_id JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL'",
        "SELECT name FROM author WHERE NOT EXISTS (SELECT 1 FROM author_list al INNER JOIN paper p ON al.paper_id = p.paper_id WHERE author.author_id = al.author_id AND p.venue = 'ACL')",
        "SELECT a.name FROM author a LEFT OUTER JOIN (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL') t ON a.author_id = t.author_id WHERE t.author_id IS NULL",
        "SELECT au.name FROM author au WHERE au.author_id NOT IN (SELECT al.author_id FROM author_list al JOIN paper p ON al.paper_id = p.paper_id WHERE p.venue = 'ACL')"
      ]
    ]
  },
  {
    "id": 1053,
    "db_id": "conference",
    "nlq": "How many conferences are there?",
    "gold": "SELECT count(*) FROM conference",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM conference",
        "SELECT COUNT(conference_id) FROM conference",
        "SELECT COUNT(1) FROM conference",
        "SELECT COUNT(*) AS TotalConferences FROM conference",
        "SELECT SUM(1) FROM conference",
        "SELECT COUNT(conference_id) FROM (SELECT conference_id FROM conference)",
        "SELECT COUNT(*) FROM (SELECT * FROM conference)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT conference_id FROM conference) AS unique_conferences"
      ]
    ]
  },
  {
    "id": 1054,
    "db_id": "conference",
    "nlq": "What is the total number of conferences?",
    "gold": "SELECT count(*) FROM conference",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM conference",
        "SELECT COUNT(conference_id) FROM conference",
        "SELECT COUNT(1) FROM conference",
        "SELECT SUM(1) FROM conference",
        "SELECT COUNT(*) AS total_conferences FROM conference",
        "SELECT COUNT(conference_id) AS TotalNumber FROM conference",
        "SELECT COUNT(*) FROM (SELECT * FROM conference) AS subquery",
        "SELECT COUNT(DISTINCT conference_name) FROM conference",
        "SELECT (SELECT COUNT(*) FROM conference) AS total_number_of_conferences"
      ]
    ]
  },
  {
    "id": 1055,
    "db_id": "conference",
    "nlq": "List all distinct conference names.",
    "gold": "SELECT DISTINCT conference_name FROM conference",
    "infer_predictions": [
      [
        "SELECT DISTINCT conference_name FROM conference",
        "SELECT conference_name FROM conference GROUP BY conference_name",
        "SELECT c.conference_name FROM conference c GROUP BY c.conference_name",
        "SELECT DISTINCT c.conference_name FROM conference c",
        "SELECT conference_name FROM (SELECT DISTINCT conference_name FROM conference)",
        "SELECT conference_name FROM conference WHERE conference_name IS NOT NULL GROUP BY conference_name",
        "SELECT conference.conference_name FROM conference WHERE conference.conference_name > '' GROUP BY conference.conference_name"
      ]
    ]
  },
  {
    "id": 1056,
    "db_id": "conference",
    "nlq": "What are the different conference names?",
    "gold": "SELECT DISTINCT conference_name FROM conference",
    "infer_predictions": [
      [
        "SELECT DISTINCT conference_name FROM conference",
        "SELECT conference_name FROM conference GROUP BY conference_name",
        "SELECT conference_name FROM (SELECT DISTINCT conference_name FROM conference)",
        "SELECT DISTINCT c.conference_name FROM conference c",
        "SELECT conference_name FROM conference GROUP BY 1",
        "SELECT DISTINCT conference_name FROM conference ORDER BY conference_name",
        "SELECT c.conference_name FROM (SELECT DISTINCT conference_name FROM conference) c"
      ]
    ]
  },
  {
    "id": 1057,
    "db_id": "conference",
    "nlq": "List all conference name, year, and location.",
    "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
    "infer_predictions": [
      [
        "SELECT conference_name, year, location FROM conference",
        "SELECT conf.conference_name, conf.year, conf.location FROM conference conf",
        "SELECT conference.* FROM conference WHERE conference_id IS NOT NULL",
        "SELECT conference_name, year, location FROM conference ORDER BY year",
        "SELECT * FROM conference WHERE year IS NOT NULL AND location IS NOT NULL",
        "SELECT conference_name AS Name, year AS Year, location AS Location FROM conference",
        "SELECT c.conference_name, c.year, c.location FROM conference c WHERE c.conference_id > 0"
      ]
    ]
  },
  {
    "id": 1058,
    "db_id": "conference",
    "nlq": "What are the names, years, and locations of all conferences?",
    "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
    "infer_predictions": [
      [
        "SELECT conference_name, year, location FROM conference;",
        "SELECT c.conference_name, c.year, c.location FROM conference c;",
        "SELECT conference_name AS Name, year AS Year, location AS Location FROM conference;",
        "SELECT * FROM (SELECT conference_name, year, location FROM conference);",
        "SELECT conf.conference_name, conf.year, conf.location FROM conference conf;",
        "SELECT conference_name, year, location FROM conference ORDER BY year;",
        "SELECT DISTINCT conference_name, year, location FROM conference ORDER BY conference_name;"
      ]
    ]
  },
  {
    "id": 1059,
    "db_id": "conference",
    "nlq": "Show all conference names and the number of times each conference has.",
    "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
    "infer_predictions": [
      [
        "SELECT conference.conference_name, COUNT(conference_participation.conference_id) AS num_participations FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name",
        "SELECT c.conference_name, COUNT(cp.conference_id) FROM conference c INNER JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name",
        "SELECT conference_name, COUNT(*) AS num_participations FROM conference INNER JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference_name",
        "SELECT c.conference_name, COUNT(DISTINCT cp.staff_id) AS num_participations FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name",
        "SELECT conference.conference_name, COUNT(DISTINCT conference_participation.staff_id) AS num_participations FROM conference LEFT JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name",
        "SELECT conference_name, COUNT(conference_participation.conference_id) FROM conference, conference_participation WHERE conference.conference_id = conference_participation.conference_id GROUP BY conference_name",
        "SELECT c.conference_name, COALESCE(COUNT(cp.staff_id), 0) FROM conference AS c LEFT JOIN conference_participation AS cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name",
        "SELECT c.conference_name, COUNT(cp.conference_id) AS participation_count FROM conference c LEFT JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name",
        "SELECT DISTINCT c.conference_name, COUNT(cp.conference_id) OVER(PARTITION BY c.conference_name) AS num_participations FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id"
      ]
    ]
  },
  {
    "id": 1060,
    "db_id": "conference",
    "nlq": "For each conference name, how many times has it occurred?",
    "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
    "infer_predictions": [
      [
        "SELECT conference_name, COUNT(*) FROM conference GROUP BY conference_name",
        "SELECT conference_name, COUNT(conference_id) AS occurrences FROM conference GROUP BY conference_name",
        "SELECT c.conference_name, COUNT(*) AS count FROM conference c GROUP BY c.conference_name",
        "SELECT conference_name, COUNT(*) AS Times_Occurred FROM conference GROUP BY conference_name",
        "SELECT conference.conference_name, COUNT(conference.conference_id) FROM conference GROUP BY conference.conference_name",
        "SELECT c.conference_name, COUNT(c.conference_id) FROM conference c GROUP BY c.conference_name",
        "SELECT conference_name, COUNT(1) FROM conference GROUP BY conference_name",
        "SELECT DISTINCT conference_name, COUNT(conference_id) OVER(PARTITION BY conference_name) FROM conference",
        "SELECT conference_name, SUM(1) FROM conference GROUP BY conference_name",
        "SELECT conference_name, COUNT(year) FROM conference GROUP BY conference_name"
      ]
    ]
  },
  {
    "id": 1061,
    "db_id": "conference",
    "nlq": "show all years and the number of conferences in each year.",
    "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
    "infer_predictions": [
      [
        "SELECT year, COUNT(conference_id) FROM conference GROUP BY year",
        "SELECT c.year, COUNT(c.conference_id) AS num_of_conferences FROM conference AS c GROUP BY c.year",
        "SELECT year AS ConferenceYear, COUNT(*) AS TotalConferences FROM conference GROUP BY ConferenceYear",
        "SELECT year, COUNT(*) FROM conference GROUP BY year",
        "SELECT c.year, COUNT(DISTINCT c.conference_id) FROM conference c GROUP BY c.year",
        "SELECT a.year, COUNT(a.conference_id) FROM (SELECT year, conference_id FROM conference) a GROUP BY a.year",
        "SELECT c.year, COUNT(c.conference_id) AS TotalConferences FROM (SELECT year, conference_id FROM conference) c GROUP BY c.year",
        "SELECT COUNT(conference.conference_id) AS Number_of_Conferences, conference.year FROM conference GROUP BY conference.year"
      ]
    ]
  },
  {
    "id": 1062,
    "db_id": "conference",
    "nlq": "How many conferences occur every year?",
    "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
    "infer_predictions": [
      [
        "SELECT year, COUNT(conference_id) as num_conferences FROM conference GROUP BY year",
        "SELECT year, COUNT(*) as total_conferences FROM conference GROUP BY year",
        "SELECT conference.year, COUNT(conference.conference_id) AS count_of_conferences FROM conference GROUP BY conference.year",
        "SELECT year, COUNT(conference_id) FROM conference GROUP BY year",
        "SELECT year, COUNT(DISTINCT conference_id) AS conference_count FROM conference GROUP BY year",
        "SELECT c.year, COUNT(c.conference_id) as num_of_conferences FROM conference c GROUP BY c.year",
        "SELECT c.year, COUNT(*) FROM conference c GROUP BY c.year",
        "SELECT year, COUNT(conference_id) as total_confs FROM conference GROUP BY year",
        "SELECT conference.year, COUNT(*) FROM conference GROUP BY conference.year",
        "SELECT c.year, COUNT(DISTINCT c.conference_id) FROM conference c GROUP BY c.year"
      ]
    ]
  },
  {
    "id": 1063,
    "db_id": "conference",
    "nlq": "which year has least number of conferences?",
    "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT year FROM conference GROUP BY year ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT year FROM conference GROUP BY year HAVING COUNT(*) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY year))",
        "SELECT MIN(year) FROM conference WHERE (SELECT COUNT(*) FROM conference AS c2 WHERE c2.year = conference.year) = (SELECT MIN(c) FROM (SELECT COUNT(*) AS c FROM conference GROUP BY year))",
        "SELECT c1.year FROM conference AS c1 GROUP BY c1.year ORDER BY COUNT(c1.conference_id) ASC LIMIT 1",
        "SELECT year FROM (SELECT year, COUNT(conference_id) AS count FROM conference GROUP BY year ORDER BY count) WHERE count = (SELECT min(b.conference_count) FROM (SELECT COUNT(conference_id) AS conference_count FROM conference GROUP BY year) b)",
        "WITH CountPerYear AS (SELECT year, COUNT(conference_id) AS total_conferences FROM conference GROUP BY year) SELECT year FROM CountPerYear WHERE total_conferences = (SELECT MIN(total_conferences) FROM CountPerYear)",
        "WITH YearlyConference AS (SELECT year, COUNT(*) AS NumConferences FROM conference GROUP BY year) SELECT YearlyConference.year FROM YearlyConference ORDER BY YearlyConference.NumConferences ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1064,
    "db_id": "conference",
    "nlq": "What year had the fewest conferences?",
    "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MIN(year) FROM (SELECT year, COUNT(conference_id) AS num_conferences FROM conference GROUP BY year)",
        "SELECT year FROM conference GROUP BY year ORDER BY COUNT(conference_id) ASC LIMIT 1",
        "SELECT YEAR FROM (SELECT year, COUNT(*) AS cnt FROM conference GROUP BY year ORDER BY cnt ASC LIMIT 1)",
        "SELECT a.year FROM (SELECT year, COUNT(conference_id) transmission_count FROM conference GROUP BY year) a WHERE a.transmission_count = (SELECT MIN(transmission_count) FROM (SELECT COUNT(conference_id) transmission_count FROM conference GROUP BY year))",
        "SELECT c.year FROM conference c LEFT JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.year ORDER BY COUNT(DISTINCT c.conference_id) ASC LIMIT 1",
        "WITH ConferenceCounts AS (SELECT year, COUNT(conference_id) AS total_conferences FROM conference GROUP BY year) SELECT year FROM ConferenceCounts ORDER BY total_conferences ASC LIMIT 1",
        "SELECT year FROM conference GROUP BY year HAVING COUNT(conference_id) = (SELECT MIN(total) FROM (SELECT COUNT(conference_id) as total FROM conference GROUP BY year) temp)",
        "SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) LIMIT 1",
        "WITH Counts AS (SELECT year, COUNT(*) AS ConferenceCount FROM conference GROUP BY year) SELECT year FROM Counts WHERE ConferenceCount = (SELECT MIN(ConferenceCount) FROM Counts)",
        "SELECT top.year FROM (SELECT year, RANK() OVER (ORDER BY COUNT(conference_id)) AS rank FROM conference GROUP BY year) top WHERE top.rank = 1"
      ]
    ]
  },
  {
    "id": 1065,
    "db_id": "conference",
    "nlq": "Show all locations where at least two conferences are located.",
    "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) >= 2",
        "SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2",
        "SELECT location FROM conference WHERE conference_id IN (SELECT conference_id FROM conference GROUP BY location HAVING COUNT(*) > 1)",
        "SELECT c.location FROM conference c WHERE EXISTS (SELECT 1 FROM conference WHERE location = c.location GROUP BY location HAVING COUNT(conference_id) > 1)",
        "SELECT location FROM (SELECT location, COUNT(conference_id) AS num_conferences FROM conference GROUP BY location) WHERE num_conferences >= 2",
        "SELECT c.location FROM (SELECT location, COUNT(*) AS count FROM conference GROUP BY location) c WHERE c.count >= 2",
        "SELECT DISTINCT c1.location FROM conference c1 JOIN conference c2 ON c1.location = c2.location AND c1.conference_id != c2.conference_id",
        "SELECT location FROM conference GROUP BY location HAVING COUNT(DISTINCT conference_id) > 1",
        "SELECT c.location FROM conference c JOIN (SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) > 1) d ON c.location = d.location",
        "SELECT DISTINCT location FROM conference WHERE location IN (SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) > 1)"
      ]
    ]
  },
  {
    "id": 1066,
    "db_id": "conference",
    "nlq": "What are all locations that have hosted at least two conferences?",
    "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) >= 2",
        "SELECT c.location FROM conference c GROUP BY c.location HAVING COUNT(c.conference_id) >= 2",
        "SELECT DISTINCT location FROM conference WHERE conference_id IN (SELECT conference_id FROM conference GROUP BY location HAVING COUNT(*) >= 2)",
        "SELECT location FROM (SELECT location, COUNT(*) AS cnt FROM conference GROUP BY location) WHERE cnt >= 2",
        "SELECT c.location FROM (SELECT location, COUNT(conference_id) as total FROM conference GROUP BY location) c WHERE c.total >= 2",
        "SELECT DISTINCT c.location FROM conference c WHERE EXISTS (SELECT NULL FROM conference WHERE location = c.location GROUP BY location HAVING COUNT(conference_id) >= 2)",
        "SELECT c.location FROM conference c JOIN (SELECT location FROM conference GROUP BY location HAVING COUNT(conference_id) >= 2) as sub ON sub.location = c.location GROUP BY c.location",
        "SELECT location FROM (SELECT location, COUNT(conference_id) cnt FROM conference GROUP BY location) sub WHERE cnt >= 2",
        "SELECT DISTINCT c.location FROM conference c INNER JOIN conference c2 ON c.location = c2.location AND c.conference_id != c2.conference_id GROUP BY c.location"
      ]
    ]
  },
  {
    "id": 1067,
    "db_id": "conference",
    "nlq": "Show the institution name, location and founded year of all institutions.",
    "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
    "infer_predictions": [
      [
        "SELECT institution_name, location, founded FROM institution",
        "SELECT inst_name AS institution_name, loc AS location, yr_founded AS founded FROM (SELECT institution_name AS inst_name, location AS loc, founded AS yr_founded FROM institution)",
        "SELECT name, loc, year FROM (SELECT institution_name AS name, location AS loc, founded AS year FROM institution)",
        "SELECT institution.institution_name AS 'Institution Name', institution.location AS 'Location', institution.founded AS 'Founded Year' FROM institution",
        "SELECT Institution_Name, Location, Founded_Year FROM (SELECT institution_name AS Institution_Name, location AS Location, founded AS Founded_Year FROM institution)",
        "SELECT Upper(institution_name), Upper(location), founded FROM institution",
        "SELECT Substr(institution_name, 1), Substr(location, 1), founded FROM institution"
      ]
    ]
  },
  {
    "id": 1068,
    "db_id": "conference",
    "nlq": "What are the names, locations, and founding years for all institutions?",
    "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
    "infer_predictions": [
      [
        "SELECT institution_name, location, founded FROM institution",
        "SELECT i.institution_name, i.location, i.founded FROM institution i",
        "SELECT * FROM (SELECT institution_name, location, founded FROM institution)",
        "SELECT institution_name AS Name, location AS Location, founded AS Founded_Year FROM institution",
        "SELECT institution.institution_name AS Name, institution.location AS Place, institution.founded AS Year FROM institution",
        "SELECT institution_name, location, founded FROM institution WHERE institution_id IS NOT NULL",
        "SELECT institution_name, location, CAST(founded AS TEXT) FROM institution"
      ]
    ]
  },
  {
    "id": 1069,
    "db_id": "conference",
    "nlq": "How many institution are founded between 1850 and 1900?",
    "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "SELECT COUNT(institution_id) FROM institution WHERE founded >= 1850 AND founded <= 1900",
        "SELECT COUNT(DISTINCT institution_id) FROM institution WHERE founded > 1849 AND founded < 1901",
        "SELECT COUNT(1) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "SELECT COUNT(institution_name) AS number_of_institutions FROM institution WHERE founded >= 1850 AND founded <= 1900",
        "SELECT COUNT(*) AS total FROM institution i WHERE i.founded BETWEEN 1850 AND 1900",
        "SELECT COUNT(DISTINCT i.institution_id) FROM institution i WHERE i.founded >= 1850 AND i.founded <= 1900",
        "SELECT COUNT(i.institution_name) FROM institution i WHERE i.founded >= 1850 AND i.founded <= 1900",
        "SELECT c FROM (SELECT COUNT(*) AS c FROM institution WHERE founded BETWEEN 1850 AND 1900)",
        "SELECT (SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900) AS count_of_institutions"
      ]
    ]
  },
  {
    "id": 1070,
    "db_id": "conference",
    "nlq": "How many institutions were founded between 1850 and 1900?",
    "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
        "SELECT COUNT(institution_id) FROM institution WHERE founded >= 1850 AND founded <= 1900",
        "SELECT COUNT(1) FROM institution WHERE founded > 1849 AND founded < 1901",
        "SELECT COUNT(*) AS total FROM institution WHERE founded >= 1850 AND founded <= 1900",
        "SELECT COUNT(institution.institution_id) FROM institution WHERE institution.founded BETWEEN 1850 AND 1900",
        "SELECT (SELECT COUNT(*) FROM institution WHERE founded BETWEEN 1850 AND 1900)",
        "SELECT COUNT(institution_id) FROM institution WHERE founded >= 1850 AND founded <= 1900 AND institution_id IS NOT NULL",
        "SELECT SUM(CASE WHEN founded BETWEEN 1850 AND 1900 THEN 1 ELSE 0 END) FROM institution"
      ]
    ]
  },
  {
    "id": 1071,
    "db_id": "conference",
    "nlq": "Show the institution name and location of institution that is most recently founded.",
    "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1",
        "SELECT i.institution_name, i.location FROM institution i WHERE i.founded = (SELECT MAX(founded) FROM institution)",
        "SELECT ins.institution_name, ins.location FROM institution ins WHERE ins.founded = (SELECT MAX(founded) FROM institution)",
        "SELECT institution_name, location FROM institution WHERE founded IN (SELECT MAX(founded) FROM institution)",
        "SELECT (SELECT institution_name FROM institution ORDER BY founded DESC LIMIT 1) AS institution_name, (SELECT location FROM institution ORDER BY founded DESC LIMIT 1) AS location",
        "SELECT first_value(institution_name) OVER (ORDER BY founded DESC), first_value(location) OVER (ORDER BY founded DESC) FROM institution LIMIT 1",
        "SELECT institution_name, location FROM institution ORDER BY founded DESC, institution_id ASC LIMIT 1",
        "SELECT i.institution_name, i.location FROM institution i ORDER BY i.founded DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1072,
    "db_id": "conference",
    "nlq": "What are the names and locations of the most recently-founded institution?",
    "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT institution_name, location FROM institution WHERE founded = (SELECT MAX(founded) FROM institution)",
        "SELECT I.institution_name, I.location FROM institution I WHERE I.founded = (SELECT MAX(founded) FROM institution)",
        "SELECT A.institution_name, A.location FROM institution A WHERE A.founded = (SELECT MAX(founded) FROM institution B)",
        "SELECT institution_name, location FROM institution ORDER BY founded DESC LIMIT 1",
        "SELECT I1.institution_name, I1.location FROM institution I1 WHERE I1.founded = (SELECT MAX(I2.founded) FROM institution I2)",
        "SELECT I.institution_name, I.location FROM institution I JOIN (SELECT MAX(founded) AS MaxFounded FROM institution) MF ON I.founded = MF.MaxFounded"
      ]
    ]
  },
  {
    "id": 1073,
    "db_id": "conference",
    "nlq": "Show the institution name and the number of staff for each institution founded after 1800.",
    "gold": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
    "infer_predictions": [
      [
        "SELECT i.institution_name, COUNT(s.staff_id) AS staff_count FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name",
        "SELECT institution_name, COUNT(staff_id) FROM institution JOIN staff ON institution.institution_id = staff.institution_id WHERE founded > 1800 GROUP BY institution_name",
        "SELECT institution_name, COUNT(*) AS number_of_staff FROM institution INNER JOIN staff ON institution.institution_id = staff.institution_id WHERE founded > 1800 GROUP BY institution_name",
        "SELECT institution_name, COUNT(staff.institution_id) FROM institution, staff WHERE institution.institution_id = staff.institution_id AND founded > 1800 GROUP BY institution_name",
        "SELECT institution_name, (SELECT COUNT(*) FROM staff WHERE staff.institution_id = institution.institution_id) AS staff_count FROM institution WHERE founded > 1800",
        "SELECT i.institution_name, (SELECT COUNT(s.staff_id) FROM staff s WHERE s.institution_id = i.institution_id) FROM institution i WHERE i.founded > 1800",
        "SELECT i.institution_name, COALESCE(t.staff_count, 0) FROM institution i LEFT JOIN (SELECT institution_id, COUNT(staff_id) AS staff_count FROM staff GROUP BY institution_id) t ON i.institution_id = t.institution_id WHERE i.founded > 1800",
        "SELECT institution_name, COUNT(staff_id) FROM institution LEFT JOIN staff ON institution.institution_id = staff.institution_id WHERE founded > 1800 GROUP BY institution_name",
        "SELECT i.institution_name, IFNULL(SUM(CASE WHEN s.staff_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS staff_count FROM institution i LEFT JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name"
      ]
    ]
  },
  {
    "id": 1074,
    "db_id": "conference",
    "nlq": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "gold": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id",
    "infer_predictions": [
      [
        "SELECT staff.name FROM staff JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800",
        "SELECT name FROM staff WHERE institution_id IN (SELECT institution_id FROM institution WHERE founded > 1800)",
        "SELECT S.name FROM staff S, institution I WHERE S.institution_id = I.institution_id AND I.founded > 1800",
        "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM institution WHERE institution_id = staff.institution_id AND founded > 1800)",
        "SELECT staff.name FROM staff INNER JOIN (SELECT institution_id FROM institution WHERE founded > 1800) AS FilteredInstitution ON staff.institution_id = FilteredInstitution.institution_id",
        "SELECT name FROM staff, institution WHERE staff.institution_id = institution.institution_id AND institution.founded > 1800",
        "SELECT name FROM staff INNER JOIN institution ON staff.institution_id = institution.institution_id WHERE institution.founded > 1800",
        "SELECT S.name FROM staff S WHERE S.institution_id IN (SELECT I.institution_id FROM institution I WHERE I.founded > 1800)"
      ]
    ]
  },
  {
    "id": 1075,
    "db_id": "conference",
    "nlq": "Show institution name which there is no staff in our record.",
    "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
    "infer_predictions": [
      [
        "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "SELECT institution_name FROM institution AS i WHERE NOT EXISTS (SELECT 1 FROM staff WHERE staff.institution_id = i.institution_id)",
        "SELECT i.institution_name FROM institution i LEFT JOIN staff s ON i.institution_id = s.institution_id WHERE s.institution_id IS NULL",
        "SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT institution_id FROM staff)",
        "SELECT i.institution_name FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s WHERE s.institution_id = i.institution_id)",
        "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT DISTINCT institution_id FROM staff)",
        "SELECT inst.institution_name FROM institution inst WHERE inst.institution_id NOT IN (SELECT st.institution_id FROM staff st)",
        "SELECT institution_name FROM institution AS inst LEFT JOIN staff AS st ON inst.institution_id = st.institution_id WHERE st.institution_id IS NULL",
        "SELECT instit.institution_name FROM institution instit LEFT JOIN staff on instit.institution_id = staff.institution_id WHERE staff.name IS NULL",
        "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT s.institution_id FROM staff s)"
      ]
    ]
  },
  {
    "id": 1076,
    "db_id": "conference",
    "nlq": "What is the name of the institution with no staff in the records?",
    "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
    "infer_predictions": [
      [
        "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
        "SELECT i.institution_name FROM institution i LEFT JOIN staff s ON i.institution_id = s.institution_id WHERE s.institution_id IS NULL",
        "SELECT institution_name FROM institution EXCEPT SELECT institution_name FROM institution JOIN staff ON institution.institution_id = staff.institution_id",
        "SELECT i.institution_name FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s WHERE s.institution_id = i.institution_id)",
        "SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT institution_id FROM staff)",
        "SELECT institution_name FROM institution LEFT OUTER JOIN staff ON institution.institution_id = staff.institution_id WHERE staff.institution_id IS NULL",
        "SELECT i.institution_name FROM institution i WHERE i.institution_id NOT IN (SELECT DISTINCT s.institution_id FROM staff s)",
        "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT DISTINCT institution_id FROM staff)",
        "SELECT institution.institution_name FROM institution LEFT JOIN staff ON institution.institution_id = staff.institution_id GROUP BY institution.institution_name HAVING COUNT(staff.institution_id) = 0",
        "SELECT institution_name FROM institution i LEFT JOIN staff s ON i.institution_id = s.institution_id WHERE s.name IS NULL"
      ]
    ]
  },
  {
    "id": 1077,
    "db_id": "conference",
    "nlq": "Show all staff name who are above the average age.",
    "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
    "infer_predictions": [
      [
        "SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(staff.age) FROM staff)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff AS s2)"
      ]
    ]
  },
  {
    "id": 1078,
    "db_id": "conference",
    "nlq": "What are the names of all staff members who are older than average?",
    "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
    "infer_predictions": [
      [
        "SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff)",
        "SELECT name FROM staff WHERE age > (SELECT AVG(staff.age) AS avg_age FROM staff)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(s2.age) FROM staff s2)",
        "SELECT name FROM staff s1 WHERE s1.age > (SELECT AVG(s1.age) FROM staff AS s1)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM (SELECT age FROM staff) AS subquery)",
        "SELECT s.name FROM staff AS s WHERE s.age > (SELECT AVG(subquery.age) FROM (SELECT age FROM staff) AS subquery)",
        "SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(staff.age) FROM staff)"
      ]
    ]
  },
  {
    "id": 1079,
    "db_id": "conference",
    "nlq": "What is the maximum and minimum age of all staff from the United States?",
    "gold": "SELECT max(age) ,  min(age) FROM staff",
    "infer_predictions": [
      [
        "SELECT MAX(age) AS maximum_age, MIN(age) AS minimum_age FROM staff WHERE nationality = 'United States'",
        "SELECT MIN(age) AS minimum_age, MAX(age) AS maximum_age FROM staff WHERE nationality = 'United States'",
        "SELECT MIN(staff.age) AS minimum_age, MAX(staff.age) AS maximum_age FROM staff WHERE nationality = 'United States'",
        "SELECT MAX(staff.age) AS maximum_age, MIN(staff.age) AS minimum_age FROM staff WHERE staff.nationality = 'United States'",
        "SELECT MIN_AGE, MAX_AGE FROM (SELECT MIN(age) AS MIN_AGE, MAX(age) AS MAX_AGE FROM staff WHERE nationality = 'United States')",
        "SELECT MAXIMUM_TWO, MINIMUM_TWO FROM (SELECT MAX(staff.age) AS MAXIMUM_TWO, MIN(staff.age) AS MINIMUM_TWO FROM staff WHERE nationality = 'United States')"
      ]
    ]
  },
  {
    "id": 1080,
    "db_id": "conference",
    "nlq": "What are the maximum and minimum ages for all staff?",
    "gold": "SELECT max(age) ,  min(age) FROM staff",
    "infer_predictions": [
      [
        "SELECT MAX(staff.age), MIN(staff.age) FROM staff",
        "SELECT MAX(age) AS MaximumAge, MIN(age) AS MinimumAge FROM staff",
        "SELECT (SELECT MAX(age) FROM staff) AS MaxAge, (SELECT MIN(age) FROM staff) AS MinAge",
        "SELECT MAX(s.age) AS MaxStaffAge, MIN(s.age) AS MinStaffAge FROM staff s",
        "SELECT MAX(age) FROM staff UNION ALL SELECT MIN(age) FROM staff",
        "SELECT * FROM (SELECT MAX(age) FROM staff) UNION ALL SELECT * FROM (SELECT MIN(age) FROM staff)",
        "SELECT MAX(s.age), MIN(s.age) FROM staff s",
        "SELECT (SELECT MaxAge FROM (SELECT MAX(age) AS MaxAge FROM staff)), (SELECT MinAge FROM (SELECT MIN(age) AS MinAge FROM staff))",
        "SELECT X.MaxAge, Y.MinAge FROM (SELECT MAX(age) AS MaxAge FROM staff) X, (SELECT MIN(age) AS MinAge FROM staff) Y"
      ]
    ]
  },
  {
    "id": 1081,
    "db_id": "conference",
    "nlq": "Show all conference names which the staff from Canada attends.",
    "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON conference_participation.staff_id = staff.staff_id WHERE staff.nationality = 'Canada'",
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))",
        "SELECT c.conference_name FROM conference c INNER JOIN conference_participation cp ON c.conference_id = cp.conference_id INNER JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality = 'Canada'",
        "SELECT DISTINCT c.conference_name FROM conference c, conference_participation cp, staff s WHERE c.conference_id = cp.conference_id AND cp.staff_id = s.staff_id AND s.nationality = 'Canada'",
        "SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id WHERE conference_participation.staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada')",
        "SELECT DISTINCT conference_name FROM conference WHERE EXISTS (SELECT 1 FROM conference_participation JOIN staff ON conference_participation.staff_id = staff.staff_id WHERE staff.nationality = 'Canada' AND conference.conference_id = conference_participation.conference_id)",
        "SELECT conference.conference_name FROM conference INNER JOIN (SELECT DISTINCT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada')) participations ON conference.conference_id = participations.conference_id",
        "SELECT conference.conference_name FROM conference, conference_participation, staff WHERE conference.conference_id = conference_participation.conference_id AND conference_participation.staff_id = staff.staff_id AND staff.nationality = 'Canada'",
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality = 'Canada')"
      ]
    ]
  },
  {
    "id": 1082,
    "db_id": "conference",
    "nlq": "What are the names of all the conferences that has staff from Canada attending?",
    "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id JOIN staff ON conference_participation.staff_id = staff.staff_id WHERE staff.nationality = 'Canada'",
        "SELECT DISTINCT c.conference_name FROM conference c, conference_participation cp, staff s WHERE c.conference_id = cp.conference_id AND cp.staff_id = s.staff_id AND s.nationality = 'Canada'",
        "SELECT DISTINCT conf.conference_name FROM conference conf INNER JOIN conference_participation cp ON conf.conference_id = cp.conference_id INNER JOIN staff st ON cp.staff_id = st.staff_id WHERE st.nationality = 'Canada'",
        "SELECT DISTINCT conference.conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation WHERE staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada'))",
        "SELECT DISTINCT cnf.conference_name FROM conference AS cnf WHERE EXISTS (SELECT 1 FROM conference_participation AS cp INNER JOIN staff AS st ON cp.staff_id = st.staff_id WHERE cp.conference_id = cnf.conference_id AND st.nationality = 'Canada')",
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT cp.conference_id FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id WHERE s.nationality = 'Canada')",
        "SELECT DISTINCT c_name.conference_name FROM conference c_name JOIN conference_participation c_p ON c_name.conference_id = c_p.conference_id JOIN staff s ON s.staff_id = c_p.staff_id WHERE s.nationality = 'Canada'",
        "SELECT DISTINCT cf.conference_name FROM conference cf, conference_participation cp WHERE cf.conference_id = cp.conference_id AND cp.staff_id IN (SELECT staff_id FROM staff WHERE nationality = 'Canada')",
        "SELECT DISTINCT confs.conference_name FROM conference confs WHERE EXISTS (SELECT cp.conference_id FROM conference_participation cp, staff s WHERE s.staff_id = cp.staff_id AND s.nationality = 'Canada' AND confs.conference_id = cp.conference_id)"
      ]
    ]
  },
  {
    "id": 1083,
    "db_id": "conference",
    "nlq": "Show all staff names who have been both speaker and sponsor in some conference.",
    "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id WHERE cp1.role = 'Speaker' AND EXISTS (SELECT 1 FROM conference_participation cp2 WHERE cp2.staff_id = s.staff_id AND cp2.role = 'Sponsor' AND cp2.conference_id = cp1.conference_id)",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker' INTERSECT SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')",
        "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp1 WHERE cp1.staff_id = s.staff_id AND cp1.role = 'Speaker') AND EXISTS (SELECT 1 FROM conference_participation cp2 WHERE cp2.staff_id = s.staff_id AND cp2.role = 'Sponsor' AND cp2.conference_id IN (SELECT conference_id FROM conference_participation cp3 WHERE cp3.staff_id = s.staff_id AND cp3.role = 'Speaker'))",
        "SELECT s.name FROM staff s, conference_participation cp WHERE s.staff_id = cp.staff_id GROUP BY s.staff_id, s.name HAVING SUM(CASE WHEN cp.role = 'Speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN cp.role = 'Sponsor' THEN 1 ELSE 0 END) > 0",
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation spk ON s.staff_id = spk.staff_id AND spk.role = 'Speaker' INNER JOIN conference_participation spo ON s.staff_id = spo.staff_id AND spo.role = 'Sponsor' WHERE spk.conference_id = spo.conference_id",
        "WITH Speaker AS (SELECT staff_id, conference_id FROM conference_participation WHERE role = 'Speaker'), Sponsor AS (SELECT staff_id, conference_id FROM conference_participation WHERE role = 'Sponsor') SELECT DISTINCT s.name FROM staff s JOIN Speaker sp ON s.staff_id = sp.staff_id JOIN Sponsor sr ON s.staff_id = sr.staff_id AND sp.conference_id = sr.conference_id",
        "SELECT s.name FROM staff s INNER JOIN (SELECT DISTINCT staff_id, conference_id FROM conference_participation WHERE role IN ('Speaker', 'Sponsor') GROUP BY staff_id, conference_id HAVING COUNT(DISTINCT role) = 2) AS dbl_role ON s.staff_id = dbl_role.staff_id",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') AND staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor' AND conference_id IN (SELECT conference_id FROM conference_participation WHERE role = 'Speaker' AND staff_id = staff.staff_id))"
      ]
    ]
  },
  {
    "id": 1084,
    "db_id": "conference",
    "nlq": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp1 ON s.staff_id = cp1.staff_id WHERE cp1.role = 'Speaker' AND EXISTS (SELECT 1 FROM conference_participation cp2 WHERE cp2.staff_id = s.staff_id AND cp2.role = 'Sponsor')",
        "SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.role = 'Speaker') INTERSECT SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.role = 'Sponsor')",
        "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id GROUP BY s.name HAVING SUM(CASE WHEN cp.role = 'Speaker' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN cp.role = 'Sponsor' THEN 1 ELSE 0 END) > 0",
        "SELECT s.name FROM (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') as sp JOIN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor') as sr ON sp.staff_id = sr.staff_id JOIN staff s ON s.staff_id = sp.staff_id",
        "SELECT DISTINCT s.name FROM staff s, conference_participation cp WHERE s.staff_id = cp.staff_id AND cp.role = 'Speaker' AND EXISTS (SELECT 1 FROM conference_participation cp2 WHERE cp2.staff_id = s.staff_id AND cp2.role = 'Sponsor')",
        "SELECT DISTINCT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_id = s.staff_id AND cp.role = 'Speaker') AND EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_id = s.staff_id AND cp.role = 'Sponsor')",
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id AND cp.role = 'Speaker' INNER JOIN conference_participation cp2 ON cp2.staff_id = s.staff_id AND cp2.role = 'Sponsor'",
        "WITH Speaker AS (SELECT staff_id FROM conference_participation WHERE role = 'Speaker'), Sponsor AS (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor') SELECT s.name FROM staff s JOIN Speaker sp ON s.staff_id = sp.staff_id JOIN Sponsor sr ON s.staff_id = sr.staff_id",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Speaker') AND staff_id IN (SELECT staff_id FROM conference_participation WHERE role = 'Sponsor')",
        "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_id = s.staff_id GROUP BY cp.staff_id HAVING COUNT(DISTINCT cp.role) = 2)"
      ]
    ]
  },
  {
    "id": 1085,
    "db_id": "conference",
    "nlq": "Show all names who have been in both ACL and Naccl.",
    "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.conference_name IN ('ACL', 'Naccl') GROUP BY s.name HAVING COUNT(DISTINCT c.conference_name) = 2",
        "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'ACL') AND EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE s.staff_id = cp.staff_id AND c.conference_name = 'Naccl')",
        "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND c.conference_name IN ('ACL', 'Naccl') GROUP BY s.name HAVING COUNT(DISTINCT c.conference_name) = 2",
        "SELECT name FROM (SELECT s.name, COUNT(DISTINCT c.conference_name) AS cnt FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.conference_name IN ('ACL', 'Naccl') GROUP BY s.name) WHERE cnt = 2",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL')) AND staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'Naccl'))",
        "SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT c.conference_id FROM conference c WHERE c.conference_name = 'ACL')) INTERSECT SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT c.conference_id FROM conference c WHERE c.conference_name = 'Naccl'))",
        "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND c.conference_name = 'ACL' INTERSECT SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND c.conference_name = 'Naccl'",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id AND c.conference_name = 'ACL') INTERSECT SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id AND c.conference_name = 'Naccl')",
        "SELECT s1.name FROM staff s1 JOIN conference_participation cp1 ON s1.staff_id = cp1.staff_id AND cp1.conference_id IN (SELECT c1.conference_id FROM conference c1 WHERE c1.conference_name = 'ACL') JOIN staff s2 ON s1.staff_id = s2.staff_id JOIN conference_participation cp2 ON s2.staff_id = cp2.staff_id AND cp2.conference_id IN (SELECT c2.conference_id FROM conference c2 WHERE c2.conference_name = 'Naccl')",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation cp, conference c WHERE cp.conference_id = c.conference_id AND c.conference_name = 'ACL' GROUP BY staff_id) AND staff_id IN (SELECT staff_id FROM conference_participation cp, conference c WHERE cp.conference_id = c.conference_id AND c.conference_name = 'Naccl' GROUP BY staff_id)"
      ]
    ]
  },
  {
    "id": 1086,
    "db_id": "conference",
    "nlq": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
    "infer_predictions": [
      [
        "SELECT s.name FROM staff s WHERE EXISTS(SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.conference_name = 'ACL') AND EXISTS(SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.conference_name = 'NACCL');",
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.role IS NOT NULL AND c.conference_name IN ('ACL', 'NACCL') GROUP BY s.name HAVING COUNT(DISTINCT c.conference_name) = 2;",
        "SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT c.conference_id FROM conference c WHERE c.conference_name = 'ACL')) AND s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT c.conference_id FROM conference c WHERE c.conference_name = 'NACCL'));",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'ACL')) INTERSECT SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'NACCL'));",
        "SELECT s1.name FROM staff s1 JOIN conference_participation cp1 ON s1.staff_id = cp1.staff_id JOIN conference c1 ON cp1.conference_id = c1.conference_id WHERE c1.conference_name = 'ACL' INTERSECT SELECT s2.name FROM staff s2 JOIN conference_participation cp2 ON s2.staff_id = cp2.staff_id JOIN conference c2 ON cp2.conference_id = c2.conference_id WHERE c2.conference_name = 'NACCL';",
        "SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL') AND cp.staff_id IN (SELECT cp2.staff_id FROM conference_participation cp2 JOIN conference c2 ON cp2.conference_id = c2.conference_id WHERE c2.conference_name = 'NACCL');",
        "SELECT name FROM (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'ACL')) s INNER JOIN (SELECT staff_id FROM conference_participation WHERE conference_id = (SELECT conference_id FROM conference WHERE conference_name = 'NACCL')) n ON s.staff_id = n.staff_id JOIN staff ON s.staff_id = staff.staff_id;",
        "SELECT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference GROUP BY conference_id HAVING SUM(CASE WHEN conference_name = 'ACL' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN conference_name = 'NACCL' THEN 1 ELSE 0 END) > 0));",
        "SELECT DISTINCT s.name FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL' INTERSECT SELECT DISTINCT s.name FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'NACCL';",
        "SELECT staff.name FROM staff JOIN conference_participation ON conference_participation.staff_id = staff.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.conference_name IN ('ACL', 'NACCL') GROUP BY staff.name HAVING COUNT(DISTINCT conference.conference_name) = 2;"
      ]
    ]
  },
  {
    "id": 1087,
    "db_id": "conference",
    "nlq": "Show all staff names who attend a conference in 2003 or 2004.",
    "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004)",
        "SELECT s.name FROM staff s WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.year IN (2003, 2004))",
        "SELECT DISTINCT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE year = 2003 OR year = 2004))",
        "SELECT name FROM staff WHERE staff_id IN (SELECT cp.staff_id FROM conference_participation cp INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2003 OR c.year = 2004)",
        "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND (c.year = 2003 OR c.year = 2004)",
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE year IN (2003, 2004))",
        "SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id AND conference.year IN (2003, 2004)",
        "SELECT DISTINCT name FROM staff WHERE EXISTS (SELECT * FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE staff.staff_id = conference_participation.staff_id AND conference.year IN (2003, 2004))",
        "SELECT DISTINCT name FROM staff s WHERE EXISTS (SELECT NULL FROM conference_participation cp INNER JOIN conference con ON cp.conference_id = con.conference_id WHERE s.staff_id = cp.staff_id AND (con.year = 2003 OR con.year = 2004))",
        "SELECT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id INNER JOIN conference con ON con.conference_id = cp.conference_id WHERE con.year BETWEEN 2003 AND 2004 GROUP BY s.name"
      ]
    ]
  },
  {
    "id": 1088,
    "db_id": "conference",
    "nlq": "What are the staff names who participated in conferences between 2003 or 2004?",
    "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004)",
        "SELECT DISTINCT s.name FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND (c.year = 2003 OR c.year = 2004)",
        "SELECT DISTINCT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE year = 2003 OR year = 2004))",
        "SELECT name FROM staff WHERE EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = staff.staff_id AND (c.year BETWEEN 2003 AND 2004))",
        "SELECT s.name FROM staff s WHERE s.staff_id IN (SELECT cp.staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT c.conference_id FROM conference c WHERE c.year IN (2003, 2004)))",
        "SELECT DISTINCT s.name FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2003 OR c.year = 2004",
        "SELECT DISTINCT name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE year BETWEEN 2003 AND 2004))",
        "SELECT name FROM staff s WHERE EXISTS (SELECT * FROM conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND (c.year = 2003 OR c.year = 2004))",
        "SELECT name FROM staff WHERE staff_id IN (SELECT cp.staff_id FROM conference_participation cp INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year IN (2003, 2004))",
        "SELECT DISTINCT name FROM staff WHERE staff_id IN (SELECT cp.staff_id FROM conference_participation cp INNER JOIN conference c ON cp.conference_id = c.conference_id AND (c.year = 2003 OR c.year = 2004))"
      ]
    ]
  },
  {
    "id": 1089,
    "db_id": "conference",
    "nlq": "Show the conference name and year and the number of participants for each conference.",
    "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
    "infer_predictions": [
      [
        "SELECT conference_name, year, COUNT(staff_id) AS participants FROM conference INNER JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_id",
        "SELECT c.conference_name, c.year, COUNT(cp.staff_id) AS num_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id, c.conference_name, c.year",
        "SELECT c.conference_name, c.year, COUNT(*) AS participant_count FROM conference AS c INNER JOIN conference_participation AS cp ON c.conference_id = cp.conference_id GROUP BY c.conference_name, c.year",
        "SELECT c.conference_name, c.year, COUNT(cp.staff_id) AS total_participants FROM conference c, conference_participation cp WHERE c.conference_id = cp.conference_id GROUP BY c.conference_name, c.year",
        "SELECT conf.conference_name, conf.year, COUNT(participation.staff_id) AS count_of_participants FROM conference AS conf LEFT JOIN conference_participation AS participation ON conf.conference_id = participation.conference_id GROUP BY conf.conference_name, conf.year",
        "SELECT conference.conference_name, conference.year, COUNT(DISTINCT conference_participation.staff_id) AS num_of_participants FROM conference LEFT JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name, conference.year",
        "SELECT c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_participation.conference_id = c.conference_id) AS participants FROM conference c",
        "SELECT confN, confY, COUNT(pCount) AS participants FROM (SELECT conference_name AS confN, year AS confY, staff_id AS pCount from conference INNER JOIN conference_participation ON conference.conference_id = conference_participation.conference_id) GROUP BY confN, confY",
        "SELECT name, yr, COUNT(pid) AS participants FROM (SELECT conference_name AS name, year AS yr, cp.staff_id AS pid FROM conference INNER JOIN conference_participation cp ON conference.conference_id = cp.conference_id) GROUP BY name, yr",
        "SELECT conferenceName, conferenceYear, SUM(participant_count) AS TotalParticipants FROM (SELECT c.conference_name AS conferenceName, c.year AS conferenceYear, cp.staff_id, 1 AS participant_count FROM conference AS c JOIN conference_participation AS cp ON c.conference_id = cp.conference_id) GROUP BY conferenceName, conferenceYear"
      ]
    ]
  },
  {
    "id": 1090,
    "db_id": "conference",
    "nlq": "For each conference id, what are their names, year, and number of participants?",
    "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
    "infer_predictions": [
      [
        "SELECT c.conference_id, c.conference_name, c.year, COUNT(cp.staff_id) AS total_participants FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id",
        "SELECT c.conference_id, c.conference_name, c.year, COUNT(DISTINCT cp.staff_id) AS participants_count FROM conference AS c INNER JOIN conference_participation AS cp ON c.conference_id = cp.conference_id GROUP BY c.conference_id",
        "SELECT c.conference_id, c.conference_name, c.year, (SELECT COUNT(*) FROM conference_participation WHERE conference_id = c.conference_id) AS num_participants FROM conference AS c",
        "SELECT conference.conference_id, conference.conference_name, conference.year, (SELECT COUNT(staff_id) FROM conference_participation WHERE conference_id = conference.conference_id) AS participants FROM conference",
        "SELECT c1.conference_id, c1.conference_name, c1.year, COUNT(cp1.staff_id) AS count_of_participants FROM conference c1 LEFT JOIN conference_participation cp1 ON c1.conference_id = cp1.conference_id GROUP BY c1.conference_id",
        "SELECT con.conference_id, con.conference_name, con.year, (SELECT COUNT(*) FROM conference_participation cp2 WHERE cp2.conference_id = con.conference_id) FROM conference con",
        "SELECT a.conference_id, a.conference_name, a.year, SUM(case when cp3.staff_id IS NOT NULL then 1 else 0 end) as Count_of_Participants FROM conference a LEFT JOIN conference_participation cp3 ON a.conference_id = cp3.conference_id GROUP BY a.conference_id",
        "SELECT z.conference_id, z.conference_name, z.year, COUNT(p.staff_id) AS totalParticipants FROM conference z LEFT JOIN conference_participation p ON z.conference_id = p.conference_id GROUP BY z.conference_id",
        "SELECT conf_id.conference_id, conf_id.conference_name, conf_id.year, COUNT(cp.staff_id) as num_participants FROM conference conf_id JOIN conference_participation cp ON conf_id.conference_id = cp.conference_id GROUP BY conf_id.conference_id",
        "SELECT conferenceId.conference_id, conferenceId.conference_name, conferenceId.year, COUNT(participating.staff_id) AS TotalParticipants FROM conference conferenceId INNER JOIN conference_participation participating ON conferenceId.conference_id = participating.conference_id GROUP BY conferenceId.conference_id"
      ]
    ]
  },
  {
    "id": 1091,
    "db_id": "conference",
    "nlq": "Find the name of the conferences that have the top 2 most number of attendants.",
    "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
    "infer_predictions": [
      [
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(*) DESC LIMIT 2)",
        "SELECT conference.conference_name FROM conference INNER JOIN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(staff_id) DESC LIMIT 2) AS top_conferences ON conference.conference_id = top_conferences.conference_id",
        "SELECT C.conference_name FROM conference C WHERE C.conference_id IN (SELECT CP.conference_id FROM conference_participation CP GROUP BY CP.conference_id ORDER BY COUNT(CP.staff_id) DESC LIMIT 2)",
        "SELECT conference.conference_name FROM conference JOIN conference_participation ON conference.conference_id = conference_participation.conference_id GROUP BY conference.conference_name ORDER BY COUNT(conference_participation.staff_id) DESC LIMIT 2",
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(staff_id) DESC LIMIT 2)",
        "SELECT C.conference_name FROM conference C JOIN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(*) DESC LIMIT 2) T ON T.conference_id = C.conference_id",
        "SELECT C.conference_name FROM conference C WHERE C.conference_id IN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(*) DESC LIMIT 2)",
        "SELECT C.conference_name FROM (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(staff_id) DESC LIMIT 2) AS sub INNER JOIN conference C ON sub.conference_id = C.conference_id",
        "SELECT C.conference_name FROM conference C INNER JOIN (SELECT conference_id, COUNT(*) AS participant_count FROM conference_participation GROUP BY conference_id ORDER BY participant_count DESC LIMIT 2) AS subquery ON C.conference_id = subquery.conference_id",
        "SELECT conference.conference_name FROM conference WHERE conference_id IN (SELECT CP.conference_id FROM conference_participation CP GROUP BY CP.conference_id HAVING COUNT(CP.staff_id) ORDER BY COUNT(CP.staff_id) DESC LIMIT 2)"
      ]
    ]
  },
  {
    "id": 1092,
    "db_id": "conference",
    "nlq": "What are the names of the conferences that have the top 2 most people attending?",
    "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
    "infer_predictions": [
      [
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(staff_id) DESC LIMIT 2)",
        "SELECT c.conference_name FROM conference c JOIN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(staff_id) DESC LIMIT 2) cp ON c.conference_id = cp.conference_id",
        "SELECT c.conference_name FROM conference c WHERE c.conference_id IN (SELECT cp.conference_id FROM conference_participation cp GROUP BY cp.conference_id ORDER BY COUNT(*) DESC LIMIT 2)",
        "SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM conference_participation GROUP BY conference_id ORDER BY COUNT(*) DESC LIMIT 2)",
        "SELECT c.conference_name FROM conference c JOIN conference_participation cp ON c.conference_id = cp.conference_id GROUP BY cp.conference_id ORDER BY COUNT(cp.staff_id) DESC LIMIT 2",
        "WITH RankedConferences AS (SELECT conference_id, RANK() OVER (ORDER BY COUNT(staff_id) DESC) AS rn FROM conference_participation GROUP BY conference_id) SELECT conference_name FROM conference WHERE conference_id IN (SELECT conference_id FROM RankedConferences WHERE rn <= 2)",
        "WITH AttendeeCount AS (SELECT conference_id, COUNT(*) as numAttendees FROM conference_participation GROUP BY conference_id) SELECT c.conference_name FROM conference c JOIN AttendeeCount ac ON c.conference_id = ac.conference_id WHERE ac.numAttendees IN (SELECT numAttendees FROM AttendeeCount ORDER BY numAttendees DESC LIMIT 2)"
      ]
    ]
  },
  {
    "id": 1093,
    "db_id": "conference",
    "nlq": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
    "infer_predictions": [
      [
        "SELECT s.name, s.nationality FROM staff s WHERE s.staff_id NOT IN (SELECT cp.staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL')",
        "SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL'))",
        "SELECT staff.name, staff.nationality FROM staff LEFT JOIN conference_participation ON staff.staff_id = conference_participation.staff_id LEFT JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.conference_name != 'ACL' OR conference.conference_name IS NULL",
        "SELECT staff.name, staff.nationality FROM staff WHERE NOT EXISTS (SELECT 1 FROM conference_participation JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference_participation.staff_id = staff.staff_id AND conference.conference_name = 'ACL')",
        "SELECT DISTINCT s.name, s.nationality FROM staff s WHERE s.staff_id NOT IN (SELECT DISTINCT staff_id FROM conference_participation cp WHERE EXISTS (SELECT 1 FROM conference WHERE conference_id = cp.conference_id AND conference_name = 'ACL'))",
        "SELECT name, nationality FROM staff EXCEPT SELECT staff.name, staff.nationality FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.conference_name = 'ACL'",
        "SELECT nameofstaff, nationalityofstaff FROM (SELECT s.name AS nameofstaff, s.nationality AS nationalityofstaff FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id LEFT JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name != 'ACL' OR c.conference_name IS NULL GROUP BY s.staff_id)",
        "SELECT s.name, s.nationality FROM staff s WHERE s.staff_id NOT IN (SELECT sp.staff_id FROM conference_participation sp, conference c WHERE sp.conference_id = c.conference_id AND c.conference_name = 'ACL')",
        "SELECT DISTINCT s.name, s.nationality FROM staff s WHERE NOT EXISTS (SELECT * FROM conference_participation row1 INNER JOIN conference as row2 ON row1.conference_id = row2.conference_id WHERE row2.conference_name = 'ACL' AND row1.staff_id = s.staff_id)",
        "SELECT staff.name, staff.nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation cp WHERE cp.conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL'))"
      ]
    ]
  },
  {
    "id": 1094,
    "db_id": "conference",
    "nlq": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
    "infer_predictions": [
      [
        "SELECT s.name, s.nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE cp.staff_id = s.staff_id AND c.conference_name = 'ACL')",
        "SELECT name, nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_name = 'ACL'))",
        "SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id LEFT JOIN conference c ON cp.conference_id = c.conference_id AND c.conference_name = 'ACL' WHERE cp.conference_id IS NULL",
        "SELECT DISTINCT s.name, s.nationality FROM staff s WHERE s.staff_id NOT IN (SELECT cp.staff_id FROM conference_participation cp JOIN conference c ON c.conference_id = cp.conference_id WHERE c.conference_name = 'ACL')",
        "SELECT staff.name, staff.nationality FROM staff WHERE NOT EXISTS (SELECT cp.staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL' AND cp.staff_id = staff.staff_id)",
        "SELECT s.name, s.nationality FROM staff s WHERE s.staff_id NOT IN (SELECT staff_id FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL')",
        "SELECT s.name, s.nationality FROM staff s LEFT JOIN (SELECT cp.staff_id FROM conference_participation cp INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL') t ON s.staff_id = t.staff_id WHERE t.staff_id IS NULL",
        "SELECT name, nationality FROM staff EXCEPT SELECT s.name, s.nationality FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL'",
        "SELECT DISTINCT name, nationality FROM staff WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN conference c ON cp.conference_id = c.conference_id WHERE c.conference_name = 'ACL' AND cp.staff_id = staff.staff_id)"
      ]
    ]
  },
  {
    "id": 1095,
    "db_id": "conference",
    "nlq": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
    "infer_predictions": [
      [
        "SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.year = 2004 AND s.institution_id = i.institution_id)",
        "SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff WHERE staff_id IN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE year = 2004)))",
        "SELECT i.institution_name, i.location FROM institution i EXCEPT SELECT i.institution_name, i.location FROM institution i JOIN staff s ON i.institution_id = s.institution_id JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2004",
        "SELECT i.institution_name, i.location FROM institution i LEFT JOIN staff s ON i.institution_id = s.institution_id LEFT JOIN conference_participation cp ON s.staff_id = cp.staff_id LEFT JOIN conference c ON cp.conference_id = c.conference_id WHERE (c.year IS NULL OR c.year != 2004) GROUP BY i.institution_name, i.location HAVING COUNT(c.year = 2004) = 0",
        "SELECT DISTINCT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT * FROM staff s INNER JOIN conference_participation cp ON s.staff_id = cp.staff_id INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2004 AND s.institution_id = i.institution_id)",
        "SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT s.institution_id FROM staff s INNER JOIN (SELECT staff_id FROM conference_participation WHERE conference_id IN (SELECT conference_id FROM conference WHERE year = 2004)) cp ON s.staff_id = cp.staff_id)",
        "SELECT i.institution_name, i.location FROM institution i WHERE i.institution_id NOT IN (SELECT s.institution_id FROM staff s, conference_participation cp, conference c WHERE s.staff_id = cp.staff_id AND cp.conference_id = c.conference_id AND c.year = 2004)",
        "SELECT i.institution_name, i.location FROM institution i WHERE i.institution_id NOT IN (SELECT distinct s.institution_id FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id JOIN conference c ON c.conference_id = cp.conference_id WHERE c.year = 2004)",
        "SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp JOIN staff s ON cp.staff_id = s.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2004 AND s.institution_id = i.institution_id)",
        "SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT NULL FROM staff s LEFT JOIN conference_participation cp ON cp.staff_id = s.staff_id LEFT JOIN conference c ON c.conference_id = cp.conference_id WHERE s.institution_id = i.institution_id AND c.year = 2004)"
      ]
    ]
  },
  {
    "id": 1096,
    "db_id": "conference",
    "nlq": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
    "infer_predictions": [
      [
        "SELECT i.institution_name, i.location FROM institution i WHERE NOT EXISTS (SELECT 1 FROM staff s JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE s.institution_id = i.institution_id AND c.year = 2004)",
        "SELECT institution.institution_name, institution.location FROM institution WHERE institution_id NOT IN (SELECT staff.institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.year = 2004)",
        "SELECT institution.institution_name, institution.location FROM institution LEFT JOIN staff ON institution.institution_id = staff.institution_id LEFT JOIN conference_participation ON staff.staff_id = conference_participation.staff_id LEFT JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year != 2004 OR conference.year IS NULL GROUP BY institution.institution_name, institution.location",
        "SELECT institution_name, location FROM institution EXCEPT SELECT institution.institution_name, institution.location FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN institution ON institution.institution_id = staff.institution_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004",
        "SELECT DISTINCT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE year = 2004)",
        "SELECT i.institution_name, i.location FROM institution i LEFT JOIN (SELECT distinct institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.year = 2004) as subq ON i.institution_id = subq.institution_id WHERE subq.institution_id IS NULL",
        "SELECT a.institution_name, a.location FROM institution a WHERE a.institution_id NOT IN (SELECT b.institution_id FROM staff b INNER JOIN conference_participation cp ON b.staff_id = cp.staff_id INNER JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2004)",
        "SELECT DISTINCT inst.institution_name, inst.location FROM institution inst WHERE NOT EXISTS (SELECT 1 FROM staff st JOIN conference_participation cp ON st.staff_id = cp.staff_id JOIN conference conf ON cp.conference_id = conf.conference_id WHERE st.institution_id = inst.institution_id AND conf.year = 2004)",
        "SELECT institution.institution_name, institution.location FROM institution LEFT JOIN (SELECT DISTINCT staff.institution_id FROM staff JOIN conference_participation ON staff.staff_id = conference_participation.staff_id JOIN conference ON conference.conference_id = conference_participation.conference_id WHERE conference.year = 2004) sub ON institution.institution_id = sub.institution_id WHERE sub.institution_id IS NULL",
        "SELECT institution_name, location FROM institution WHERE institution_id NOT IN (SELECT institution.institution_id FROM staff INNER JOIN conference_participation ON staff.staff_id = conference_participation.staff_id INNER JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year = 2004)"
      ]
    ]
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "nlq": "What is the name of the oldest pilot?",
    "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)",
        "SELECT ps.pilot_name FROM pilotskills ps ORDER BY ps.age DESC LIMIT 1",
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT age FROM pilotskills ORDER BY age DESC LIMIT 1)",
        "SELECT pilot_name FROM pilotskills ps1 WHERE NOT EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps2.age > ps1.age)",
        "SELECT pilot_name FROM (SELECT pilot_name, RANK() OVER (ORDER BY age DESC) AS rnk FROM pilotskills) WHERE rnk = 1",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name HAVING age = MAX(age)",
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT age FROM pilotskills GROUP BY age ORDER BY age DESC LIMIT 1)",
        "SELECT pilot_name FROM pilotskills ps1 WHERE ps1.age = (SELECT MAX(ps2.age) FROM pilotskills ps2)"
      ]
    ]
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "nlq": "Return the name of the oldest pilot.",
    "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills)",
        "SELECT p.pilot_name FROM pilotskills p ORDER BY p.age DESC LIMIT 1",
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills LIMIT 1)",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age = (SELECT MAX(pp.age) FROM pilotskills pp)",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name, age HAVING age = MAX(age)",
        "SELECT pilot_name FROM pilotskills p1 WHERE NOT EXISTS (SELECT 1 FROM pilotskills p2 WHERE p2.age > p1.age)",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name ORDER BY MAX(age) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots whose age is below the average age, ordered by age?",
    "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age < (SELECT AVG(age) FROM pilotskills) ORDER BY ps.age",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age < (SELECT AVG(ps.age) FROM pilotskills ps) ORDER BY p.age",
        "SELECT p.pilot_name FROM pilotskills AS p WHERE p.age < (SELECT AVG(p2.age) FROM pilotskills p2) ORDER BY p.age ASC",
        "SELECT P.pilot_name FROM pilotskills P WHERE P.age < (SELECT ROUND(AVG(P1.age),0) FROM pilotskills P1) ORDER BY P.age ASC",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age < (SELECT AVG(AGE) FROM pilotskills) ORDER BY p.age"
      ]
    ]
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "nlq": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) FROM pilotskills) ORDER BY age ASC",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age < (SELECT AVG(age) FROM pilotskills) ORDER BY ps.age ASC",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age < (SELECT AVG(p.age) FROM pilotskills p) ORDER BY ps.age ASC",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age < (SELECT AVG(pilotskills.age) FROM pilotskills) ORDER BY p.age ASC",
        "SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(age) AS average_age FROM pilotskills) ORDER BY age ASC",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age < (SELECT AVG(ps1.age) FROM pilotskills ps1) ORDER BY ps.age ASC",
        "SELECT ps.pilot_name FROM pilotskills ps INNER JOIN (SELECT AVG(age) AS avg_age FROM pilotskills) av ON ps.age < av.avg_age ORDER BY ps.age ASC",
        "SELECT p.pilot_name FROM pilotskills p INNER JOIN (SELECT AVG(pilotskills.age) AS AverageAge FROM pilotskills) av ON p.age < av.AverageAge ORDER BY p.age ASC",
        "SELECT pilot_name FROM pilotskills WHERE age < (SELECT AVG(p.age) FROM pilotskills p) ORDER BY age ASC"
      ]
    ]
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "nlq": "Find all information of on pilots whose age is less than 30.",
    "gold": "SELECT * FROM PilotSkills WHERE age  <  30",
    "infer_predictions": [
      [
        "SELECT * FROM pilotskills WHERE age < 30",
        "SELECT ps.* FROM pilotskills AS ps WHERE ps.age < 30",
        "SELECT pilotskills.age, pilotskills.pilot_name, pilotskills.plane_name FROM pilotskills WHERE age < 30",
        "SELECT p.* FROM pilotskills p WHERE p.age < 30",
        "SELECT pilotskills.* FROM pilotskills WHERE pilotskills.age < 30",
        "SELECT * FROM pilotskills WHERE EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps2.age < 30 AND pilotskills.pilot_name = ps2.pilot_name)"
      ]
    ]
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "nlq": "What is all the information about pilots who are younger than 30 ?",
    "gold": "select * from pilotskills where age  <  30",
    "infer_predictions": [
      [
        "SELECT * FROM pilotskills WHERE age < 30",
        "SELECT pilotskills.* FROM pilotskills WHERE pilotskills.age < 30",
        "SELECT P.age, P.pilot_name, P.plane_name FROM pilotskills P WHERE P.age < 30",
        "SELECT age, pilot_name, plane_name FROM pilotskills WHERE age < 30",
        "SELECT age AS Age, pilot_name AS PilotName, plane_name AS PlaneName FROM pilotskills WHERE age < 30",
        "SELECT * FROM pilotskills WHERE age BETWEEN 0 AND 29",
        "SELECT * FROM pilotskills WHERE (age < 30)"
      ]
    ]
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "nlq": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35 AND plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'Piper Cub')",
        "SELECT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND ps.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35 AND EXISTS (SELECT 1 FROM hangar WHERE plane_name = pilotskills.plane_name)",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35 AND ps.plane_name IN (SELECT h.plane_name FROM hangar h WHERE h.plane_name = 'Piper Cub')",
        "SELECT DISTINCT pilot_name FROM pilotskills INNER JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE pilotskills.plane_name = 'Piper Cub' AND age < 35",
        "SELECT ps.pilot_name FROM pilotskills ps LEFT JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT ps.pilot_name FROM pilotskills ps CROSS JOIN hangar h WHERE ps.plane_name = h.plane_name AND h.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35 AND plane_name IN (SELECT DISTINCT plane_name FROM hangar WHERE plane_name = 'Piper Cub')"
      ]
    ]
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND ps.plane_name = 'Piper Cub'",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age < 35",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND ps.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT ps.pilot_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND ps.plane_name = 'Piper Cub'",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age < 35",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age < 35 AND p.plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'Piper Cub')",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' AND EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = p.plane_name) AND p.age < 35",
        "SELECT p.pilot_name FROM pilotskills p LEFT JOIN hangar h ON p.plane_name = h.plane_name WHERE p.age < 35 AND h.plane_name = 'Piper Cub'",
        "SELECT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name AND ps.plane_name = 'Piper Cub' WHERE ps.age < 35"
      ]
    ]
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "nlq": "Where is the plane F-14 Fighter located?",
    "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "infer_predictions": [
      [
        "SELECT location FROM hangar WHERE plane_name = 'F-14 Fighter'",
        "SELECT h.location FROM hangar h WHERE h.plane_name = 'F-14 Fighter'",
        "SELECT location FROM hangar WHERE plane_name LIKE 'F-14 Fighter'",
        "SELECT h.location FROM hangar h WHERE h.plane_name LIKE 'F-14 Fighter'",
        "SELECT location FROM hangar WHERE 'F-14 Fighter' = plane_name",
        "SELECT location FROM hangar WHERE plane_name IN ('F-14 Fighter')",
        "SELECT h.location FROM hangar h WHERE h.plane_name IN ('F-14 Fighter')",
        "SELECT location FROM hangar WHERE EXISTS (SELECT 1 FROM hangar subH WHERE subH.plane_name = 'F-14 Fighter' AND hangar.plane_name = subH.plane_name)",
        "SELECT location FROM hangar AS h WHERE h.plane_name = (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter')"
      ]
    ]
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "nlq": "Return the location of the hangar in which F-14 Fighter is located.",
    "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "infer_predictions": [
      [
        "SELECT location FROM hangar WHERE plane_name = 'F-14 Fighter'",
        "SELECT h.location FROM hangar h WHERE h.plane_name = 'F-14 Fighter'",
        "SELECT location FROM hangar WHERE plane_name LIKE 'F-14 Fighter'",
        "SELECT location FROM hangar WHERE plane_name IN ('F-14 Fighter')",
        "SELECT h.location FROM hangar AS h WHERE h.plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter')",
        "SELECT location FROM hangar WHERE EXISTS (SELECT 1 FROM hangar WHERE plane_name = 'F-14 Fighter' AND hangar.plane_name = hangar.plane_name)",
        "SELECT h.location FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE h.plane_name = 'F-14 Fighter'"
      ]
    ]
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "nlq": "How many different places have some plane?",
    "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT location) FROM hangar",
        "SELECT COUNT(*) FROM (SELECT DISTINCT location FROM hangar)",
        "SELECT COUNT(DISTINCT h.location) FROM hangar h",
        "SELECT COUNT(*) FROM (SELECT DISTINCT h.location FROM hangar h)",
        "SELECT DISTINCT COUNT(h.location) FROM hangar h"
      ]
    ]
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "nlq": "Count the number of different locations of hangars.",
    "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT location) FROM hangar",
        "SELECT COUNT(*) FROM (SELECT DISTINCT location FROM hangar)",
        "SELECT COUNT(DISTINCT h.location) FROM hangar h",
        "SELECT COUNT(*) FROM (SELECT location FROM hangar GROUP BY location)",
        "SELECT COUNT(location) FROM (SELECT DISTINCT location FROM hangar AS h)",
        "SELECT COUNT(1) FROM (SELECT DISTINCT location FROM hangar)",
        "SELECT COUNT(h.location) FROM (SELECT DISTINCT location AS location FROM hangar) h",
        "SELECT COUNT(DISTINCT loc) FROM (SELECT location AS loc FROM hangar)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT h.location FROM hangar h)"
      ]
    ]
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "nlq": "Which plane does the pilot Jones with age 32 has?",
    "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
    "infer_predictions": [
      [
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32",
        "SELECT p.plane_name FROM pilotskills p JOIN hangar h ON p.plane_name = h.plane_name WHERE p.pilot_name = 'Jones' AND p.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT DISTINCT ps.plane_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps LEFT JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps JOIN hangar h USING(plane_name) WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32 GROUP BY ps.plane_name",
        "SELECT p.plane_name FROM pilotskills p WHERE p.pilot_name = 'Jones' AND p.age = 32 LIMIT 1"
      ]
    ]
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "nlq": "What are the names of planes that the pilot Jones who is 32 has?",
    "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
    "infer_predictions": [
      [
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32",
        "SELECT DISTINCT ps.plane_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT h.plane_name FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Jones' AND age = 32 GROUP BY plane_name",
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Jones' AND ps.age = 32 AND EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name)",
        "SELECT ps.plane_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND ps.pilot_name = 'Jones' AND ps.age = 32",
        "SELECT ps.plane_name FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name AND ps.pilot_name = 'Jones' AND ps.age = 32)",
        "SELECT ps.plane_name FROM pilotskills ps LEFT JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Jones' AND ps.age = 32"
      ]
    ]
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "nlq": "How many pilots who are older than 40?",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE age > 40)",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > 40 GROUP BY pilot_name",
        "SELECT COALESCE(COUNT(DISTINCT pilot_name), 0) FROM pilotskills WHERE age > 40",
        "SELECT SUM(CASE WHEN age > 40 THEN 1 ELSE 0 END) FROM (SELECT DISTINCT pilot_name, age FROM pilotskills) AS aged_pilots",
        "WITH eligible_pilots AS (SELECT pilot_name FROM pilotskills WHERE age > 40) SELECT COUNT(DISTINCT pilot_name) FROM eligible_pilots",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age BETWEEN 41 AND 150",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills GROUP BY pilot_name HAVING age > 40)"
      ]
    ]
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "nlq": "Count the number of pilots with age greater than 40.",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
    "infer_predictions": [
      [
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(*) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(ps.pilot_name) FROM pilotskills ps WHERE ps.age > 40",
        "SELECT COUNT(1) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > 40 GROUP BY pilot_name HAVING age > 40",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE age > 40)",
        "SELECT COUNT(pilot_name) FROM (SELECT pilot_name, age FROM pilotskills WHERE age > 40 GROUP BY pilot_name) AS sub",
        "SELECT COUNT(DISTINCT pilot_name) FROM (SELECT DISTINCT pilot_name, age FROM pilotskills WHERE age > 40) sub"
      ]
    ]
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "nlq": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM hangar WHERE plane_name = 'B-52 Bomber' AND location IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35)",
        "SELECT COUNT(hangar.plane_name) FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35",
        "SELECT COUNT(DISTINCT hangar.plane_name) FROM hangar INNER JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35",
        "SELECT COUNT(*) FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35 AND plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'B-52 Bomber')",
        "SELECT COUNT(1) FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name WHERE h.plane_name = 'B-52 Bomber' AND p.age < 35",
        "SELECT COUNT(hangar.plane_name) FROM hangar, pilotskills WHERE hangar.plane_name = pilotskills.plane_name AND hangar.plane_name = 'B-52 Bomber' AND pilotskills.age < 35",
        "SELECT COUNT(DISTINCT p.plane_name) FROM pilotskills p, hangar h WHERE p.plane_name = h.plane_name AND p.age < 35 AND p.plane_name = 'B-52 Bomber'",
        "SELECT COUNT(*) FROM (SELECT h.plane_name FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name WHERE h.plane_name = 'B-52 Bomber' AND p.age < 35)",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE age < 35 AND plane_name = 'B-52 Bomber' AND EXISTS (SELECT 1 FROM hangar WHERE plane_name = 'B-52 Bomber')",
        "SELECT COUNT(h.plane_name) FROM hangar h WHERE EXISTS (SELECT 1 FROM pilotskills p WHERE p.plane_name = h.plane_name AND p.age < 35 AND p.plane_name = 'B-52 Bomber')"
      ]
    ]
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "nlq": "Count the number of B-52 Bombers owned by pilots under 35.",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'B-52 Bomber' AND ps.age < 35",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35 GROUP BY pilot_name)",
        "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35)",
        "SELECT COUNT(ps.pilot_name) FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE h.plane_name = 'B-52 Bomber' AND ps.age < 35",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM hangar h, pilotskills ps WHERE h.plane_name = ps.plane_name AND ps.plane_name = 'B-52 Bomber' AND ps.age < 35",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35)",
        "SELECT COUNT(*) FROM pilotskills WHERE plane_name = 'B-52 Bomber' AND age < 35 GROUP BY pilot_name"
      ]
    ]
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "nlq": "Who is the youngest pilot to fly the plane Piper Cub?",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1",
        "SELECT MIN(age) AS youngest_age, pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' GROUP BY pilot_name ORDER BY youngest_age LIMIT 1",
        "SELECT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' ORDER BY p.age ASC LIMIT 1",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT p.pilot_name FROM (SELECT pilot_name, age FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age ASC) p LIMIT 1",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' GROUP BY p.pilot_name, p.age HAVING p.age = MIN(p.age)",
        "SELECT pilot_name FROM (SELECT pilot_name, age FROM pilotskills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "nlq": "Return the name of the youngest pilot to fly Piper Cub.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1",
        "SELECT MIN(pilot_name) FROM pilotskills WHERE plane_name = 'Piper Cub' AND age = (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' AND p.age IN (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT p.pilot_name FROM pilotskills p JOIN (SELECT MIN(age) AS min_age FROM pilotskills WHERE plane_name = 'Piper Cub') m ON p.age = m.min_age WHERE p.plane_name = 'Piper Cub'",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name, age, plane_name HAVING plane_name = 'Piper Cub' AND age = MIN(age)",
        "WITH MinAge AS (SELECT MIN(age) age FROM pilotskills WHERE plane_name = 'Piper Cub') SELECT p.pilot_name FROM pilotskills p, MinAge WHERE p.plane_name = 'Piper Cub' AND p.age = MinAge.age"
      ]
    ]
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "nlq": "What is the name of the most popular plane?",
    "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT p.plane_name FROM pilotskills p GROUP BY p.plane_name ORDER BY COUNT(p.plane_name) DESC LIMIT 1",
        "SELECT h.plane_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1",
        "SELECT top_plane.plane_name FROM (SELECT plane_name, COUNT(*) as cnt FROM pilotskills GROUP BY plane_name) as top_plane ORDER BY top_plane.cnt DESC LIMIT 1",
        "SELECT ps1.plane_name FROM pilotskills ps1 WHERE (SELECT COUNT(*) FROM pilotskills ps2 WHERE ps2.plane_name = ps1.plane_name) = (SELECT MAX(COUNT) FROM (SELECT COUNT(*) as COUNT FROM pilotskills GROUP BY plane_name) as Counts)",
        "SELECT plane_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) as Cnt FROM pilotskills GROUP BY plane_name) sub))",
        "SELECT DISTINCT p.plane_name FROM pilotskills p WHERE p.plane_name = (SELECT p2.plane_name FROM pilotskills p2 GROUP BY p2.plane_name ORDER BY COUNT(p2.plane_name) DESC LIMIT 1)",
        "WITH RankedPlanes AS (SELECT plane_name, RANK() OVER (ORDER BY COUNT(*) DESC) as rank FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM RankedPlanes WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "nlq": "What is the name of the plane that is flown the most often?",
    "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT ps.plane_name FROM pilotskills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1",
        "SELECT p.plane_name FROM pilotskills p GROUP BY p.plane_name ORDER BY COUNT(p.plane_name) DESC LIMIT 1",
        "SELECT plane_name FROM (SELECT plane_name, COUNT(*) as cnt FROM pilotskills GROUP BY plane_name) ORDER BY cnt DESC LIMIT 1",
        "SELECT ps.plane_name FROM (SELECT plane_name, COUNT(*) AS num FROM pilotskills GROUP BY plane_name) ps ORDER BY ps.num DESC LIMIT 1",
        "SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) AS cnt FROM pilotskills GROUP BY plane_name) t)",
        "SELECT ps.plane_name FROM pilotskills ps GROUP BY ps.plane_name HAVING COUNT(ps.plane_name) = (SELECT MAX(c) FROM (SELECT COUNT(plane_name) c FROM pilotskills GROUP BY plane_name) sq)",
        "SELECT p.plane_name FROM pilotskills p WHERE p.plane_name IN (SELECT ps.plane_name FROM pilotskills ps GROUP BY ps.plane_name ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT plane_name FROM (SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1) q"
      ]
    ]
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "nlq": "What is the name of the least popular plane?",
    "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT plane_name FROM hangar GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT h.plane_name FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name ORDER BY COUNT(p.plane_name) ASC LIMIT 1",
        "SELECT h.plane_name FROM hangar h WHERE h.plane_name IN (SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(plane_name) ASC LIMIT 1)",
        "SELECT h.plane_name FROM hangar h LEFT JOIN (SELECT plane_name, COUNT(*) AS num FROM pilotskills GROUP BY plane_name) p ON h.plane_name = p.plane_name ORDER BY p.num ASC LIMIT 1",
        "SELECT h.plane_name FROM hangar h WHERE h.plane_name = (SELECT p.plane_name FROM pilotskills p GROUP BY p.plane_name ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT plane_name FROM (SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1) AS subquery"
      ]
    ]
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "nlq": "What is the name of the plane that is flown the least often?",
    "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(pilot_name) ASC LIMIT 1",
        "SELECT ps.plane_name FROM pilotskills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.pilot_name) ASC LIMIT 1",
        "SELECT p.plane_name FROM (SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM pilotskills GROUP BY plane_name) p ORDER BY p.num_pilots ASC LIMIT 1",
        "SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING COUNT(pilot_name) = (SELECT MIN(cnt) FROM (SELECT COUNT(pilot_name) cnt FROM pilotskills GROUP BY plane_name))",
        "SELECT ps.plane_name FROM pilotskills ps WHERE NOT EXISTS (SELECT NULL FROM pilotskills ps2 WHERE ps2.plane_name = ps.plane_name AND ps2.pilot_name != ps.pilot_name) LIMIT 1",
        "WITH PlaneUsage AS (SELECT plane_name, COUNT(*) as usage_count FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM PlaneUsage ORDER BY usage_count ASC LIMIT 1",
        "WITH Frequency AS (SELECT plane_name, COUNT(pilot_name) as freq FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM Frequency ORDER BY freq ASC LIMIT 1",
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1",
        "WITH PlaneTickets AS (SELECT plane_name, COUNT(pilot_name) as TicketCount FROM pilotskills GROUP BY plane_name) SELECT plane_name FROM PlaneTickets ORDER BY TicketCount ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "nlq": "How many pilots whose planes are in Chicago?",
    "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago')",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago'))",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE h.location = 'Chicago'",
        "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM pilotskills ps JOIN hangar h ON h.plane_name = ps.plane_name WHERE h.location = 'Chicago')",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location LIKE 'Chicago'))",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name AND h.location = 'Chicago')",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps WHERE ps.plane_name IN (SELECT h.plane_name FROM hangar h WHERE h.location = 'Chicago')",
        "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM pilotskills JOIN hangar ON hangar.plane_name = pilotskills.plane_name WHERE hangar.location = 'Chicago')"
      ]
    ]
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "nlq": "Count the number of pilots who have planes in Chicago.",
    "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.pilot_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago')",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Chicago'",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Chicago') GROUP BY pilot_name)",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name AND h.location = 'Chicago'",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE h.location = 'Chicago'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.pilot_name FROM pilotskills ps INNER JOIN hangar h ON h.plane_name = ps.plane_name WHERE h.location = 'Chicago')",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE hangar.plane_name = pilotskills.plane_name AND location = 'Chicago')"
      ]
    ]
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "nlq": "What are the planes owned by pilot Smith with age 41?",
    "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
    "infer_predictions": [
      [
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41",
        "SELECT p.plane_name FROM pilotskills p JOIN hangar h ON p.plane_name = h.plane_name WHERE p.pilot_name = 'Smith' AND p.age = 41",
        "SELECT ps.plane_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41 GROUP BY plane_name",
        "SELECT ps1.plane_name FROM pilotskills ps1 WHERE ps1.pilot_name = 'Smith' AND ps1.age = 41 AND EXISTS (SELECT 1 FROM hangar h1 WHERE h1.plane_name = ps1.plane_name)",
        "SELECT p.plane_name FROM pilotskills p, hangar h WHERE p.plane_name = h.plane_name AND p.pilot_name = 'Smith' AND p.age = 41",
        "SELECT h.plane_name FROM hangar h, pilotskills ps WHERE h.plane_name = ps.plane_name AND ps.pilot_name = 'Smith' AND ps.age = 41"
      ]
    ]
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "nlq": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
    "infer_predictions": [
      [
        "SELECT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT DISTINCT ps.plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41",
        "SELECT h.plane_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT ps.plane_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT ps.plane_name FROM pilotskills AS ps INNER JOIN hangar AS h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith' AND ps.age = 41",
        "SELECT plane_name FROM hangar WHERE plane_name IN (SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41)",
        "SELECT h.plane_name FROM hangar h WHERE EXISTS (SELECT 1 FROM pilotskills ps WHERE ps.plane_name = h.plane_name AND ps.pilot_name = 'Smith' AND ps.age = 41)",
        "SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41 INTERSECT SELECT plane_name FROM hangar",
        "SELECT h.plane_name FROM hangar h WHERE h.plane_name IN (SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' AND age = 41)"
      ]
    ]
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "nlq": "How many distinct planes are owned across all pilots?",
    "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills",
        "SELECT COUNT(DISTINCT p.plane_name) FROM pilotskills p",
        "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM pilotskills)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT p.plane_name FROM pilotskills p)",
        "SELECT COUNT(DISTINCT p.plane_name) FROM pilotskills p GROUP BY p.plane_name",
        "SELECT COUNT(DISTINCT p.plane_name) FROM pilotskills p INNER JOIN hangar h ON p.plane_name = h.plane_name",
        "SELECT COUNT(*) FROM (SELECT p.plane_name FROM pilotskills p GROUP BY p.plane_name)",
        "SELECT COUNT(*) FROM (SELECT p.plane_name FROM pilotskills p INNER JOIN hangar h ON p.plane_name = h.plane_name GROUP BY p.plane_name)"
      ]
    ]
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "nlq": "Count the number of different plane names across all pilots.",
    "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills",
        "SELECT COUNT(DISTINCT p.plane_name) FROM pilotskills p",
        "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM pilotskills)",
        "SELECT COUNT(DISTINCT plane) FROM (SELECT plane_name AS plane FROM pilotskills)",
        "SELECT COUNT(*) FROM (SELECT plane_name FROM pilotskills GROUP BY plane_name)",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps",
        "SELECT DISTINCT COUNT(p.plane_name) FROM pilotskills p",
        "SELECT DISTINCT COUNT(*) OVER () FROM (SELECT DISTINCT plane_name FROM pilotskills) AS sub"
      ]
    ]
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "nlq": "How many planes are owned by the pilot whose name is Smith?",
    "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE pilot_name = 'Smith'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM pilotskills WHERE pilot_name = 'Smith')",
        "SELECT COUNT(plane_name) FROM (SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' GROUP BY plane_name)",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.pilot_name = 'Smith'",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE pilot_name = 'Smith' GROUP BY pilot_name",
        "SELECT COUNT(plane_name) FROM pilotskills WHERE pilot_name = 'Smith' GROUP BY plane_name",
        "SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM pilotskills ps WHERE ps.pilot_name = 'Smith') AS subquery",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.pilot_name = 'Smith' GROUP BY ps.pilot_name",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE pilot_name = 'Smith' AND plane_name IS NOT NULL",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE pilot_name = 'Smith' AND plane_name <> ''"
      ]
    ]
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "nlq": "Count the number of planes Smith owns.",
    "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.pilot_name = 'Smith'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT plane_name FROM pilotskills WHERE pilot_name = 'Smith')",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE pilot_name = 'Smith'",
        "SELECT COUNT(plane_name) FROM (SELECT DISTINCT plane_name FROM pilotskills WHERE pilot_name = 'Smith')",
        "SELECT COUNT(*) FROM (SELECT plane_name FROM pilotskills WHERE pilot_name = 'Smith' GROUP BY plane_name)",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith'",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps LEFT JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith'",
        "SELECT COUNT(ps.plane_name) FROM pilotskills ps WHERE ps.plane_name IN (SELECT h.plane_name FROM hangar h) AND ps.pilot_name = 'Smith' GROUP BY ps.plane_name",
        "SELECT COUNT(ALL ps.plane_name) FROM pilotskills ps CROSS JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.pilot_name = 'Smith'"
      ]
    ]
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "nlq": "How many planes are controlled by the pilots whose age is older than 40?",
    "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.age > 40",
        "SELECT COUNT(ps.plane_name) FROM pilotskills ps WHERE ps.age > 40 GROUP BY ps.plane_name",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.plane_name FROM pilotskills ps WHERE ps.age > 40)",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(*) FROM (SELECT plane_name FROM pilotskills WHERE age > 40 GROUP BY plane_name)",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.plane_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40)",
        "SELECT COUNT(ps.plane_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40 GROUP BY ps.plane_name"
      ]
    ]
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "nlq": "Count the number of planes flown by pilots older than 40.",
    "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.age > 40",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.plane_name FROM pilotskills ps WHERE ps.age > 40)",
        "SELECT COUNT(DISTINCT plane_name) FROM pilotskills WHERE age > 40",
        "SELECT COUNT(*) FROM (SELECT plane_name FROM pilotskills WHERE age > 40 GROUP BY plane_name)",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ps.plane_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.age > 40)",
        "SELECT COUNT(*) FROM (SELECT plane_name FROM pilotskills WHERE age > 40) AS unique_planes",
        "SELECT COUNT(DISTINCT ps.plane_name) FROM pilotskills ps WHERE ps.age > 40 AND ps.plane_name IN (SELECT plane_name FROM hangar)"
      ]
    ]
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "nlq": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age > 29 AND p.age < 41 ORDER BY p.age",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE age > 29 AND age < 41 ORDER BY age",
        "SELECT pilot_name FROM pilotskills WHERE age IN (30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40) ORDER BY age",
        "SELECT pilot_name FROM (SELECT * FROM pilotskills WHERE age > 29 AND age < 41) ORDER BY age",
        "SELECT pilot_name FROM pilotskills WHERE (age >= 30) AND (age <= 40) ORDER BY age ASC"
      ]
    ]
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.age > 29 AND p.age < 41 ORDER BY p.age",
        "SELECT pilot_name FROM pilotskills WHERE age >= 30 AND age <= 40 ORDER BY age",
        "SELECT pilot_name FROM (SELECT * FROM pilotskills WHERE age > 29 AND age < 41) ORDER BY age ASC",
        "SELECT (SELECT pilot_name FROM pilotskills WHERE age = s.age) AS pilot_name FROM pilotskills s WHERE s.age BETWEEN 30 AND 40 GROUP BY s.age ORDER BY s.age",
        "SELECT p.pilot_name FROM pilotskills p WHERE EXISTS (SELECT 1 FROM pilotskills WHERE age BETWEEN 30 AND 40 AND p.pilot_name = pilot_name) ORDER BY p.age ASC",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE age IN (SELECT age FROM pilotskills WHERE age BETWEEN 30 AND 40) ORDER BY age",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps JOIN (SELECT pilot_name, age FROM pilotskills WHERE age BETWEEN 30 AND 40) p on p.pilot_name = ps.pilot_name AND p.age = ps.age ORDER BY ps.age ASC",
        "SELECT pilot_name FROM pilotskills WHERE age >= 30 AND age <= 40 ORDER BY (SELECT age FROM pilotskills WHERE pilot_name = pilotskills.pilot_name) ASC"
      ]
    ]
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "nlq": "List all pilot names sorted by their ages in the descending order.",
    "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
        "SELECT ps.pilot_name FROM pilotskills ps ORDER BY ps.age DESC",
        "SELECT pilot_name FROM pilotskills ORDER BY (SELECT age FROM pilotskills WHERE pilot_name = pilotskills.pilot_name) DESC",
        "SELECT pilot_name FROM pilotskills ORDER BY (SELECT age FROM pilotskills as sp WHERE sp.pilot_name = pilotskills.pilot_name) DESC"
      ]
    ]
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots, ordered by age descending?",
    "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name, age ORDER BY age DESC",
        "SELECT ps.pilot_name FROM pilotskills ps ORDER BY ps.age DESC",
        "SELECT pilot_name FROM pilotskills ORDER BY age DESC, pilot_name",
        "SELECT pilot_name FROM (SELECT pilot_name, age FROM pilotskills) ORDER BY age DESC",
        "SELECT pilot_name FROM pilotskills WHERE age IS NOT NULL ORDER BY age DESC",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age IS NOT NULL ORDER BY ps.age DESC",
        "SELECT pilot_name FROM pilotskills WHERE pilot_name IN (SELECT pilot_name FROM pilotskills) ORDER BY age DESC",
        "SELECT pilot_name FROM pilotskills WHERE EXISTS (SELECT 1 FROM pilotskills ps WHERE ps.pilot_name = pilotskills.pilot_name) ORDER BY age DESC"
      ]
    ]
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "nlq": "Find all locations of planes sorted by the plane name.",
    "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT location FROM hangar ORDER BY plane_name;",
        "SELECT h.location FROM hangar h ORDER BY h.plane_name;",
        "SELECT h.location FROM hangar h ORDER BY h.plane_name ASC;",
        "SELECT location FROM hangar h ORDER BY h.plane_name ASC;",
        "SELECT location FROM (SELECT * FROM hangar) ORDER BY plane_name;",
        "SELECT location FROM (SELECT location, plane_name FROM hangar) ORDER BY plane_name;",
        "SELECT location FROM hangar GROUP BY location, plane_name ORDER BY plane_name;"
      ]
    ]
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "nlq": "What are the locations of the different planes, ordered by plane name?",
    "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT location FROM hangar ORDER BY plane_name",
        "SELECT location FROM (SELECT location, plane_name FROM hangar) ORDER BY plane_name",
        "SELECT h.location FROM hangar h ORDER BY h.plane_name",
        "SELECT location FROM (SELECT DISTINCT location, plane_name FROM hangar) ORDER BY plane_name",
        "SELECT DISTINCT h.location FROM hangar h ORDER BY h.plane_name",
        "SELECT location FROM hangar GROUP BY location, plane_name ORDER BY plane_name",
        "SELECT DISTINCT location FROM (SELECT location, plane_name FROM hangar) AS subquery ORDER BY plane_name",
        "SELECT location FROM (SELECT DISTINCT location, plane_name FROM hangar) AS subquery ORDER BY plane_name"
      ]
    ]
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "nlq": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps.plane_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name ORDER BY ps.plane_name ASC",
        "SELECT DISTINCT ps.plane_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name ORDER BY ps.plane_name ASC",
        "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar) ORDER BY plane_name ASC",
        "SELECT DISTINCT a.plane_name FROM pilotskills a INNER JOIN hangar b ON a.plane_name = b.plane_name ORDER BY a.plane_name ASC",
        "SELECT DISTINCT h.plane_name FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name ORDER BY h.plane_name ASC",
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name IN (SELECT plane_name FROM pilotskills) ORDER BY plane_name ASC",
        "SELECT plane_name FROM (SELECT DISTINCT plane_name FROM hangar UNION SELECT DISTINCT plane_name FROM pilotskills) ORDER BY plane_name ASC",
        "SELECT DISTINCT p.plane_name FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name ORDER BY p.plane_name ASC",
        "SELECT plane_name FROM hangar WHERE EXISTS (SELECT 1 FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name) ORDER BY plane_name ASC",
        "SELECT DISTINCT p.plane_name FROM pilotskills p WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = p.plane_name) ORDER BY p.plane_name ASC"
      ]
    ]
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "nlq": "What are the different plane names, ordered alphabetically?",
    "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT DISTINCT plane_name FROM hangar ORDER BY plane_name ASC",
        "SELECT plane_name FROM hangar GROUP BY plane_name ORDER BY plane_name",
        "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
        "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY plane_name ASC",
        "SELECT h.plane_name FROM hangar h GROUP BY h.plane_name ORDER BY h.plane_name",
        "SELECT p.plane_name FROM pilotskills p WHERE p.plane_name IS NOT NULL GROUP BY p.plane_name ORDER BY p.plane_name ASC",
        "SELECT DISTINCT h.plane_name FROM hangar h WHERE EXISTS (SELECT 1 FROM pilotskills p WHERE p.plane_name = h.plane_name) ORDER BY h.plane_name",
        "SELECT DISTINCT p.plane_name FROM pilotskills p WHERE p.plane_name IN (SELECT h.plane_name FROM hangar h) ORDER BY p.plane_name ASC",
        "SELECT h.plane_name FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.plane_name ORDER BY h.plane_name ASC",
        "SELECT DISTINCT plane_name FROM (SELECT plane_name FROM hangar UNION SELECT plane_name FROM pilotskills) ORDER BY plane_name ASC"
      ]
    ]
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "nlq": "How many pilots who are older than 40 or younger than 30?",
    "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > 40 OR age < 30",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE age > 40 OR age < 30)",
        "SELECT COUNT(pilot_name) FROM (SELECT pilot_name FROM pilotskills GROUP BY pilot_name HAVING age > 40 OR age < 30)",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE pilotskills.age NOT BETWEEN 30 AND 40",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilotskills.pilot_name AS Name FROM pilotskills WHERE pilotskills.age < 30 OR pilotskills.age > 40)",
        "SELECT COUNT(DISTINCT pilot_name) AS Number_Of_Pilots FROM pilotskills WHERE age < 30 OR age > 40",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE age < 30 OR age > 40 GROUP BY pilot_name)"
      ]
    ]
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "nlq": "Count the number of pilots with age greater than 40 or less than 30.",
    "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM pilotskills WHERE age > 40 OR age < 30",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > 40 OR age < 30",
        "SELECT COUNT(1) FROM pilotskills WHERE age > 40 OR age < 30",
        "SELECT (SELECT COUNT(*) FROM pilotskills WHERE age > 40) + (SELECT COUNT(*) FROM pilotskills WHERE age < 30) AS total",
        "SELECT (SELECT COUNT(pilot_name) FROM pilotskills WHERE age > 40) + (SELECT COUNT(pilot_name) FROM pilotskills WHERE age < 30)",
        "SELECT COUNT(*) FROM (SELECT age FROM pilotskills WHERE age > 40 UNION ALL SELECT age FROM pilotskills WHERE age < 30)",
        "SELECT SUM(CASE WHEN age > 40 OR age < 30 THEN 1 ELSE 0 END) FROM pilotskills",
        "SELECT COUNT(*) FROM pilotskills WHERE NOT (age BETWEEN 30 AND 40)",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE age > 40 UNION ALL SELECT pilot_name FROM pilotskills WHERE age < 30)"
      ]
    ]
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "nlq": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30)",
        "SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30)",
        "SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
        "SELECT p.pilot_name, p.age FROM pilotskills p INNER JOIN hangar h ON p.plane_name = h.plane_name WHERE (h.plane_name = 'Piper Cub' AND p.age > 35) OR (h.plane_name = 'F-14 Fighter' AND p.age < 30)",
        "SELECT DISTINCT p.pilot_name, p.age FROM pilotskills p, hangar h WHERE p.plane_name = h.plane_name AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))",
        "SELECT A.pilot_name, A.age FROM pilotskills A LEFT JOIN hangar B ON A.plane_name = B.plane_name WHERE (B.plane_name = 'Piper Cub' AND A.age > 35) OR (B.plane_name = 'F-14 Fighter' AND A.age < 30)",
        "SELECT pilot_name, age FROM pilotskills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
        "SELECT pilot_name AS pj_name, age AS pj_age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age > 35 UNION SELECT ps.pilot_name, ps.age FROM pilotskills ps WHERE ps.plane_name = 'F-14 Fighter' AND ps.age < 30",
        "SELECT p.pilot_name AS name, p.age AS age FROM pilotskills p, hangar h WHERE p.plane_name = h.plane_name AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))"
      ]
    ]
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "nlq": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE (ps.age > 35 AND ps.plane_name = 'Piper Cub') OR (ps.age < 30 AND ps.plane_name = 'F-14 Fighter')",
        "SELECT pilot_name, age FROM pilotskills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)",
        "SELECT DISTINCT p.pilot_name, p.age FROM pilotskills p, hangar h WHERE p.plane_name = h.plane_name AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))",
        "SELECT p.pilot_name, p.age FROM pilotskills p INNER JOIN hangar h ON p.plane_name = h.plane_name WHERE (p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30)",
        "SELECT pilot_name, age FROM pilotskills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30))",
        "SELECT p.pilot_name, p.age FROM pilotskills p WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = p.plane_name) AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))",
        "SELECT p.pilot_name, p.age FROM pilotskills p WHERE p.plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = p.plane_name) AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))",
        "SELECT p.pilot_name, p.age FROM pilotskills p WHERE p.plane_name IN (SELECT h.plane_name FROM hangar h WHERE h.plane_name = p.plane_name) AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))",
        "SELECT DISTINCT ps.pilot_name, ps.age FROM pilotskills ps WHERE EXISTS(SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name AND h.plane_name = ps.plane_name) AND ((ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30))",
        "SELECT p.pilot_name, p.age FROM pilotskills p WHERE p.plane_name IN ('Piper Cub', 'F-14 Fighter') AND ((p.plane_name = 'Piper Cub' AND p.age > 35) OR (p.plane_name = 'F-14 Fighter' AND p.age < 30))"
      ]
    ]
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "nlq": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps1.pilot_name FROM pilotskills ps1 WHERE ps1.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps2.plane_name = 'B-52 Bomber' AND ps2.pilot_name = ps1.pilot_name)",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber'",
        "SELECT ps.pilot_name FROM pilotskills ps LEFT JOIN pilotskills ps2 ON ps.pilot_name = ps2.pilot_name AND ps2.plane_name = 'B-52 Bomber' WHERE ps.plane_name = 'Piper Cub' AND ps2.plane_name IS NULL",
        "SELECT pilot_name FROM pilotskills ps1 WHERE plane_name = 'Piper Cub' AND NOT EXISTS (SELECT * FROM pilotskills ps2 WHERE ps2.pilot_name = ps1.pilot_name AND ps2.plane_name = 'B-52 Bomber')",
        "SELECT ps1.pilot_name FROM pilotskills ps1 JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') pc ON ps1.pilot_name = pc.pilot_name LEFT JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') b52 ON ps1.pilot_name = b52.pilot_name WHERE b52.pilot_name IS NULL",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' AND ps.pilot_name NOT IN (SELECT ps2.pilot_name FROM pilotskills ps2 WHERE ps2.plane_name = 'B-52 Bomber')",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "WITH Piper_Cub_Owners AS (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub'), B52_Owners AS (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') SELECT p.pilot_name FROM Piper_Cub_Owners p LEFT JOIN B52_Owners b ON p.pilot_name = b.pilot_name WHERE b.pilot_name IS NULL",
        "SELECT pilot_name FROM (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') AS PiperCub WHERE pilot_name NOT IN (SELECT pilot_name FROM (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') AS B52)"
      ]
    ]
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "SELECT DISTINCT ps1.pilot_name FROM pilotskills ps1 LEFT JOIN pilotskills ps2 ON ps1.pilot_name = ps2.pilot_name AND ps2.plane_name = 'B-52 Bomber' WHERE ps1.plane_name = 'Piper Cub' AND ps2.plane_name IS NULL",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' EXCEPT SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'B-52 Bomber'",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber'",
        "SELECT pilot_name FROM (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') AS cub_pilots WHERE cub_pilots.pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "SELECT pilot_name FROM pilotskills ps1 WHERE ps1.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps2.plane_name = 'B-52 Bomber' AND ps2.pilot_name = ps1.pilot_name)",
        "SELECT pilot_name FROM pilotskills WHERE pilot_name IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') AND pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "SELECT p.pilot_name FROM pilotskills p JOIN (SELECT pilot_name AS excluded_pilots FROM pilotskills WHERE plane_name = 'B-52 Bomber') e ON p.pilot_name != e.excluded_pilots WHERE p.plane_name = 'Piper Cub'",
        "WITH Cub_Pilots AS (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub'), B52_Pilots AS (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') SELECT cp.pilot_name FROM Cub_Pilots cp LEFT JOIN B52_Pilots b52 ON cp.pilot_name = b52.pilot_name WHERE b52.pilot_name IS NULL",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' AND p.pilot_name NOT IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')"
      ]
    ]
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "nlq": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2",
        "SELECT ps.pilot_name FROM pilotskills ps JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') AS unioned ON ps.pilot_name = unioned.pilot_name GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2",
        "SELECT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE pilot_name IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') AND pilot_name IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber')",
        "SELECT ps1.pilot_name FROM pilotskills ps1, pilotskills ps2 WHERE ps1.pilot_name = ps2.pilot_name AND ps1.plane_name = 'Piper Cub' AND ps2.plane_name = 'B-52 Bomber'",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps INNER JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub') p1 ON ps.pilot_name = p1.pilot_name WHERE ps.plane_name = 'B-52 Bomber'",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps.pilot_name = ps2.pilot_name AND ps2.plane_name = 'Piper Cub') AND ps.plane_name = 'B-52 Bomber'",
        "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT plane_name) AS cnt FROM pilotskills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name) WHERE cnt = 2",
        "WITH CTE AS (SELECT pilot_name, plane_name FROM pilotskills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber')) SELECT pilot_name FROM CTE GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber'"
      ]
    ]
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' INTERSECT SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'B-52 Bomber';",
        "SELECT ps1.pilot_name FROM pilotskills ps1 JOIN pilotskills ps2 ON ps1.pilot_name = ps2.pilot_name WHERE ps1.plane_name = 'Piper Cub' AND ps2.plane_name = 'B-52 Bomber';",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' AND pilot_name IN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber');",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM pilotskills ps2 WHERE ps2.plane_name = 'B-52 Bomber' AND ps2.pilot_name = ps.pilot_name) AND ps.plane_name = 'Piper Cub';",
        "WITH BothPlanes AS (SELECT ps.pilot_name FROM pilotskills ps GROUP BY ps.pilot_name HAVING SUM(CASE WHEN ps.plane_name IN ('Piper Cub', 'B-52 Bomber') THEN 1 ELSE 0 END) = 2) SELECT pilot_name FROM BothPlanes;",
        "SELECT pilot_name FROM (SELECT pilot_name, COUNT(DISTINCT plane_name) AS Plane_Count FROM pilotskills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name) AS TempTable WHERE Plane_Count > 1;",
        "SELECT p.pilot_name FROM pilotskills p JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') AS b52 ON p.pilot_name = b52.pilot_name WHERE p.plane_name = 'Piper Cub';",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2;",
        "SELECT ps.pilot_name FROM pilotskills ps INNER JOIN (SELECT pilot_name FROM pilotskills WHERE plane_name = 'B-52 Bomber') ForexBombers ON ps.pilot_name = ForexBombers.pilot_name WHERE plane_name = 'Piper Cub';"
      ]
    ]
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "nlq": "What are the average and smallest ages of all pilots?",
    "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
    "infer_predictions": [
      [
        "SELECT AVG(age) AS average_age, MIN(age) AS youngest FROM pilotskills;",
        "SELECT AVG(pilotskills.age) AS average_age, MIN(pilotskills.age) AS youngest FROM pilotskills;",
        "SELECT AVG(age), MIN(age) FROM pilotskills;",
        "SELECT AVG(pilot_age), MIN(pilot_age) FROM (SELECT age AS pilot_age FROM pilotskills);",
        "SELECT (SELECT AVG(age) FROM pilotskills) AS average_age, (SELECT MIN(age) FROM pilotskills) AS youngest;",
        "SELECT AVERAGE, MINIMUM FROM (SELECT AVG(age) AS AVERAGE, MIN(age) AS MINIMUM FROM pilotskills);",
        "SELECT AVG(pilotskills.age) AS AvgAge, MIN(pilotskills.age) AS MinAge FROM pilotskills;",
        "SELECT AVG(age) as AVG_AGE, MIN(age) as MIN_AGE FROM pilotskills;",
        "SELECT * FROM (SELECT AVG(age), MIN(age) FROM pilotskills) AS sub;"
      ]
    ]
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "nlq": "Return the average and minimum ages across all pilots.",
    "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
    "infer_predictions": [
      [
        "SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM pilotskills",
        "SELECT AVG(pilotskills.age), MIN(pilotskills.age) FROM pilotskills",
        "SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM pilotskills AS ps",
        "SELECT AVG(age) AS avg_age, MIN(age) AS min_age FROM pilotskills GROUP BY age",
        "SELECT AVG(pilotskills.age) as Avg_Age, MIN(pilotskills.age) as Min_Age FROM pilotskills",
        "SELECT (SELECT AVG(age) FROM pilotskills) AS average_age, (SELECT MIN(age) FROM pilotskills) AS minimum_age",
        "SELECT average_age, minimum_age FROM (SELECT AVG(age) as average_age, MIN(age) as minimum_age FROM pilotskills)",
        "SELECT AVG(p.age) AS AvgAge, MIN(p.age) AS MinAge FROM pilotskills p",
        "SELECT AVG(age) as Average_Age, MIN(age) as Minimum_Age FROM (SELECT age FROM pilotskills)"
      ]
    ]
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots who have planes in both Austin and Boston?",
    "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.pilot_name FROM pilotskills p1 WHERE p1.plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin') AND p1.plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston')",
        "SELECT p.pilot_name FROM pilotskills p JOIN hangar h1 ON p.plane_name = h1.plane_name WHERE h1.location = 'Austin' INTERSECT SELECT p.pilot_name FROM pilotskills p JOIN hangar h2 ON p.plane_name = h2.plane_name WHERE h2.location = 'Boston'",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston')",
        "SELECT pilot_name FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE hangar.plane_name = pilotskills.plane_name AND location = 'Austin') AND EXISTS (SELECT 1 FROM hangar WHERE hangar.plane_name = pilotskills.plane_name AND location = 'Boston')",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE EXISTS(SELECT h.plane_name FROM hangar h WHERE h.plane_name = ps.plane_name AND h.location = 'Austin') AND EXISTS (SELECT h.plane_name FROM hangar h WHERE h.plane_name = ps.plane_name AND h.location = 'Boston')",
        "SELECT pilot_name FROM pilotskills ps WHERE plane_name IN(SELECT plane_name FROM hangar WHERE location = 'Austin' INTERSECT SELECT plane_name FROM hangar WHERE location = 'Boston')",
        "WITH AustinPilots AS (SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin')), BostonPilots AS (SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston')) SELECT DISTINCT AustinPilots.pilot_name FROM AustinPilots JOIN BostonPilots ON AustinPilots.pilot_name = BostonPilots.pilot_name",
        "SELECT DISTINCT pilot_name FROM (SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin') UNION ALL SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston')) gp WHERE gp.pilot_name IN (SELECT pilot_name FROM pilotskills GROUP BY pilot_name HAVING COUNT(*) > 1)",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar h WHERE EXISTS (SELECT plane_name FROM hangar WHERE h.plane_name = plane_name AND location = 'Austin') AND EXISTS (SELECT plane_name FROM hangar WHERE h.plane_name = plane_name AND location = 'Boston'))",
        "WITH PlaneLocations AS (SELECT plane_name, location FROM hangar UNION SELECT plane_name, location FROM hangar), PilotsWithMultiLocations AS (SELECT pilot_name FROM pilotskills PS JOIN PlaneLocations PL ON PS.plane_name = PL.plane_name GROUP BY pilot_name HAVING COUNT(DISTINCT PL.location) = 2) SELECT * FROM PilotsWithMultiLocations"
      ]
    ]
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "nlq": "Give the names of pilots who have planes in Austin and Boston.",
    "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) = 2",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin' INTERSECT SELECT plane_name FROM hangar WHERE location = 'Boston')",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name AND h.location = 'Austin') AND EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = ps.plane_name AND h.location = 'Boston')",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin') AND plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Boston')",
        "SELECT p.pilot_name FROM pilotskills p INNER JOIN hangar h1 ON p.plane_name = h1.plane_name AND h1.location = 'Austin' INNER JOIN hangar h2 ON p.plane_name = h2.plane_name AND h2.location = 'Boston'",
        "SELECT pilot_name FROM (SELECT ps.pilot_name, COUNT(DISTINCT h.location) AS loc_count FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') GROUP BY ps.pilot_name) WHERE loc_count = 2",
        "SELECT p.pilot_name FROM pilotskills p WHERE EXISTS (SELECT * FROM hangar WHERE location = 'Austin' AND plane_name = p.plane_name) AND EXISTS (SELECT * FROM hangar WHERE location = 'Boston' AND plane_name = p.plane_name)",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps INNER JOIN hangar h ON h.plane_name = ps.plane_name WHERE h.location = 'Austin' OR h.location = 'Boston' GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) = 2",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location IN ('Austin', 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) = 2",
        "SELECT ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE h.location = 'Austin' GROUP BY ps.pilot_name HAVING h.location = 'Austin' AND MAX(CASE WHEN h.location = 'Boston' THEN 1 ELSE 0 END) = 1"
      ]
    ]
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "nlq": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "infer_predictions": [
      [
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name IN ('F-14 Fighter', 'Piper Cub')",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'F-14 Fighter' UNION SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub'",
        "SELECT pilot_name FROM (SELECT pilot_name, plane_name FROM pilotskills) WHERE plane_name IN ('F-14 Fighter', 'Piper Cub')",
        "SELECT DISTINCT p.pilot_name FROM pilotskills p WHERE p.plane_name = 'Piper Cub' OR p.plane_name = 'F-14 Fighter'",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name IN ('Piper Cub', 'F-14 Fighter')",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'",
        "SELECT pilot_name FROM pilotskills GROUP BY pilot_name, plane_name HAVING plane_name IN ('F-14 Fighter', 'Piper Cub')",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter' OR plane_name = 'Piper Cub')",
        "SELECT pilot_name FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE pilotskills.plane_name = hangar.plane_name AND hangar.plane_name IN ('F-14 Fighter', 'Piper Cub'))",
        "SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name IN (SELECT h.plane_name FROM hangar h WHERE h.plane_name IN ('F-14 Fighter', 'Piper Cub'))"
      ]
    ]
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "nlq": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "infer_predictions": [
      [
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name IN ('F-14 Fighter', 'Piper Cub')",
        "SELECT DISTINCT pilot_name FROM pilotskills WHERE plane_name = 'F-14 Fighter' OR plane_name = 'Piper Cub'",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub' UNION SELECT ps.pilot_name FROM pilotskills ps WHERE ps.plane_name = 'F-14 Fighter'",
        "SELECT pilot_name FROM pilotskills WHERE plane_name = 'Piper Cub' UNION ALL SELECT pilot_name FROM pilotskills WHERE plane_name = 'F-14 Fighter'",
        "SELECT pilot_name FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE ps.plane_name = 'F-14 Fighter' OR ps.plane_name = 'Piper Cub'",
        "SELECT pilot_name FROM (SELECT plane_name, pilot_name FROM pilotskills) WHERE plane_name IN ('F-14 Fighter', 'Piper Cub')",
        "SELECT pilot_name FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter' OR plane_name = 'Piper Cub')",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name AND (ps.plane_name = 'F-14 Fighter' OR ps.plane_name = 'Piper Cub')",
        "SELECT pilot_name FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE plane_name = pilotskills.plane_name AND plane_name IN ('F-14 Fighter', 'Piper Cub'))"
      ]
    ]
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "nlq": "What is the average age of pilots for different types of planes?",
    "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT plane_name, AVG(age) AS avg_age FROM pilotskills GROUP BY plane_name",
        "SELECT p.plane_name, AVG(p.age) AS average_age FROM pilotskills p GROUP BY p.plane_name",
        "SELECT ps.plane_name, AVG(ps.age) AS average_pilot_age FROM pilotskills ps GROUP BY ps.plane_name",
        "SELECT plane_name, AVG(age) FROM pilotskills GROUP BY plane_name",
        "SELECT MIN(p.plane_name) AS plane_type, AVG(p.age) FROM pilotskills p GROUP BY p.plane_name",
        "SELECT MAX(plane_name), AVG(age) AS avg_age FROM pilotskills GROUP BY plane_name",
        "SELECT plane_name, AVG(age) AS average_age_of_pilots FROM pilotskills GROUP BY plane_name",
        "SELECT p.plane_name, AVG(p.age) AS avg_age FROM pilotskills AS p GROUP BY p.plane_name",
        "SELECT DISTINCT plane_name, AVG(age) OVER(PARTITION BY plane_name) AS avg_age FROM pilotskills",
        "SELECT tmp.plane_name, AVG(tmp.age) AS avg_age FROM (SELECT plane_name, age FROM pilotskills) AS tmp GROUP BY tmp.plane_name"
      ]
    ]
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "nlq": "Return the average age of pilots for each plane name.",
    "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT ps.plane_name, AVG(ps.age) FROM pilotskills ps GROUP BY ps.plane_name",
        "SELECT plane_name, AVG(age) AS avg_age FROM pilotskills GROUP BY plane_name",
        "SELECT ps.plane_name, AVG(ps.age) AS average_age FROM pilotskills ps GROUP BY ps.plane_name",
        "SELECT c1.plane_name, AVG(c1.age) FROM pilotskills c1 GROUP BY c1.plane_name",
        "SELECT pl_name, AVG(a) FROM (SELECT plane_name AS pl_name, age AS a FROM pilotskills) GROUP BY pl_name",
        "SELECT plane_name, average_age FROM (SELECT plane_name, AVG(age) AS average_age FROM pilotskills GROUP BY plane_name)",
        "SELECT h.plane_name, AVG(p.age) from pilotskills p join hangar h on h.plane_name = p.plane_name group by h.plane_name",
        "SELECT DISTINCT ps.plane_name, AVG(a.age) OVER (PARTITION BY ps.plane_name) FROM pilotskills ps, pilotskills a WHERE ps.plane_name = a.plane_name GROUP BY ps.plane_name",
        "SELECT pln, AVG(ag) FROM (SELECT plane_name AS pln, age AS ag FROM pilotskills) Ensemble GROUP BY pln",
        "SELECT grp.plane_name, AVG(ageAggregated.avg_age) FROM (SELECT plane_name, AVG(age) as avg_age FROM pilotskills GROUP BY plane_name) ageAggregated JOIN pilotskills grp ON grp.plane_name = ageAggregated.plane_name GROUP BY grp.plane_name"
      ]
    ]
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "nlq": "Find the number of planes for each type.",
    "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT location, COUNT(plane_name) FROM hangar GROUP BY location",
        "SELECT h.location, COUNT(h.plane_name) FROM hangar h GROUP BY h.location",
        "SELECT location AS Type, COUNT(*) AS NumberOfPlanes FROM hangar GROUP BY location",
        "select hangar.location, count(1) from hangar group by hangar.location",
        "SELECT location, COUNT(plane_name) as NumOfPlanes FROM hangar GROUP BY location",
        "SELECT COUNT(*) as PlaneCount, location FROM hangar GROUP BY location",
        "SELECT h.location, COUNT(*) FROM hangar h GROUP BY h.location",
        "SELECT hangar.location AS Type, COUNT(hangar.plane_name) AS PlaneCount FROM hangar GROUP BY hangar.location",
        "SELECT location, plane_name AS Count FROM hangar GROUP BY location"
      ]
    ]
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "nlq": "Count the number of entries for each plane name.",
    "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT plane_name, COUNT(*) FROM hangar GROUP BY plane_name",
        "SELECT h.plane_name, COUNT(*) FROM hangar h GROUP BY h.plane_name",
        "SELECT plane_name, COUNT(plane_name) FROM hangar GROUP BY plane_name",
        "SELECT h.plane_name, COUNT(h.plane_name) FROM hangar h GROUP BY h.plane_name",
        "SELECT p.plane_name, COUNT(p.plane_name) FROM pilotskills p GROUP BY p.plane_name",
        "SELECT plane_name, COUNT(1) FROM hangar GROUP BY plane_name",
        "SELECT h.plane_name, COUNT(1) FROM hangar h GROUP BY h.plane_name",
        "SELECT p.plane_name, COUNT(*) FROM pilotskills p GROUP BY p.plane_name",
        "SELECT plane_name, COUNT(*) FROM (SELECT p.plane_name FROM pilotskills AS p UNION ALL SELECT h.plane_name FROM hangar AS h) GROUP BY plane_name"
      ]
    ]
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "nlq": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT ps.plane_name, ps.pilot_name FROM pilotskills ps WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = ps.plane_name) ORDER BY ps.plane_name",
        "SELECT ps1.plane_name, ps1.pilot_name FROM pilotskills ps1 JOIN (SELECT plane_name, MAX(age) AS MaxAge FROM pilotskills GROUP BY plane_name) ps2 ON ps1.plane_name = ps2.plane_name AND ps1.age = ps2.MaxAge ORDER BY ps1.plane_name",
        "SELECT a.plane_name, a.pilot_name FROM (SELECT plane_name, pilot_name, age, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) as rk FROM pilotskills) a WHERE a.rk = 1 ORDER BY a.plane_name",
        "SELECT plane_name, pilot_name FROM (SELECT plane_name, pilot_name, age, DENSE_RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) as rank_age FROM pilotskills) WHERE rank_age = 1 ORDER BY plane_name",
        "SELECT plane_name, pilot_name FROM pilotskills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name) ORDER BY plane_name",
        "SELECT pj.plane_name, pj.pilot_name FROM pilotskills pj WHERE pj.age = (SELECT MAX(pk.age) FROM pilotskills pk WHERE pk.plane_name = pj.plane_name) ORDER BY pj.plane_name",
        "SELECT DISTINCT pj.plane_name, FIRST_VALUE(pj.pilot_name) OVER (PARTITION BY pj.plane_name ORDER BY pj.age DESC) AS oldest_pilot FROM pilotskills pj ORDER BY pj.plane_name",
        "SELECT ps.plane_name, MIN(ps.pilot_name) FILTER (WHERE ps.age = MAX(ps.age)) OVER (PARTITION BY ps.plane_name) as oldest_pilot FROM pilotskills ps GROUP BY ps.plane_name ORDER BY ps.plane_name",
        "WITH RankedPilots AS (SELECT plane_name, pilot_name, age, ROW_NUMBER() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rn FROM pilotskills) SELECT plane_name, pilot_name FROM RankedPilots WHERE rn = 1 ORDER BY plane_name",
        "SELECT p.plane_name, p.pilot_name FROM (SELECT plane_name, pilot_name, age, age = MAX(age) OVER (PARTITION BY plane_name) AS max_age FROM pilotskills) p WHERE p.max_age = 1 ORDER BY p.plane_name"
      ]
    ]
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "nlq": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
    "infer_predictions": [
      [
        "SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = h.plane_name) ORDER BY h.plane_name",
        "SELECT hangar.plane_name, pilotskills.pilot_name FROM hangar INNER JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills ps2 WHERE ps2.plane_name = hangar.plane_name) ORDER BY hangar.plane_name",
        "SELECT h.plane_name, ps.pilot_name FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE (h.plane_name, ps.age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name) ORDER BY h.plane_name",
        "SELECT h.plane_name, (SELECT pilot_name FROM pilotskills WHERE plane_name = h.plane_name AND age = (SELECT MAX(age) FROM pilotskills ps2 WHERE ps2.plane_name = h.plane_name)) FROM hangar h GROUP BY h.plane_name ORDER BY h.plane_name",
        "SELECT t1.plane_name, t1.pilot_name FROM (SELECT plane_name, pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) rnk FROM pilotskills) t1 WHERE rnk = 1 ORDER BY plane_name",
        "WITH MaxAge AS (SELECT plane_name, MAX(age) AS age FROM pilotskills GROUP BY plane_name) SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name JOIN MaxAge ma ON ps.plane_name = ma.plane_name AND ps.age = ma.age ORDER BY h.plane_name",
        "SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN (SELECT plane_name, pilot_name, age FROM pilotskills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name)) ps ON h.plane_name = ps.plane_name ORDER BY h.plane_name",
        "SELECT DISTINCT h.plane_name, FIRST_VALUE(ps.pilot_name) OVER (PARTITION BY h.plane_name ORDER BY ps.age DESC) AS pilot_name FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name ORDER BY h.plane_name"
      ]
    ]
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "nlq": "What are the names of oldest pilots for each type of plane?",
    "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name FROM pilotskills ps INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM pilotskills GROUP BY plane_name) max_ps ON ps.plane_name = max_ps.plane_name AND ps.age = max_ps.max_age",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE (ps.plane_name, ps.age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name)",
        "SELECT a.pilot_name FROM pilotskills a JOIN (SELECT plane_name, MAX(age) as MaxAge FROM pilotskills GROUP BY plane_name) b ON a.plane_name = b.plane_name AND a.age = b.MaxAge",
        "SELECT pilot_name FROM pilotskills WHERE age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = pilotskills.plane_name) GROUP BY plane_name",
        "WITH RankedPilots AS (SELECT pilot_name, plane_name, age, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) AS rk FROM pilotskills) SELECT pilot_name FROM RankedPilots WHERE rk = 1",
        "SELECT pilot_name FROM (SELECT pilot_name, RANK() OVER (PARTITION BY plane_name ORDER BY age DESC) age_rank FROM pilotskills) WHERE age_rank = 1",
        "SELECT DISTINCT ps.pilot_name FROM pilotskills ps WHERE ps.age = (SELECT MAX(p.age) FROM pilotskills p WHERE p.plane_name = ps.plane_name)",
        "WITH MaxAge AS (SELECT plane_name, MAX(age) AS MaxAge FROM pilotskills GROUP BY plane_name) SELECT ps.pilot_name FROM pilotskills ps JOIN MaxAge ma ON ps.plane_name = ma.plane_name AND ps.age = ma.MaxAge",
        "SELECT ps.pilot_name FROM pilotskills ps, (SELECT plane_name, MAX(age) AS maxage FROM pilotskills GROUP BY plane_name) mq WHERE ps.plane_name = mq.plane_name AND ps.age = mq.maxage",
        "SELECT pilot_name FROM pilotskills WHERE (plane_name, age) IN (SELECT plane_name, MAX(age) FROM pilotskills GROUP BY plane_name ORDER BY age DESC)"
      ]
    ]
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "nlq": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
    "infer_predictions": [
      [
        "SELECT DISTINCT hangar.plane_name, pilotskills.pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name WHERE pilotskills.age = (SELECT MAX(age) FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name)",
        "SELECT h.plane_name, p.pilot_name FROM hangar h INNER JOIN pilotskills p ON h.plane_name = p.plane_name INNER JOIN (SELECT plane_name, MAX(age) AS max_age FROM pilotskills GROUP BY plane_name) mp ON p.plane_name = mp.plane_name AND p.age = mp.max_age",
        "SELECT h.plane_name, ps.pilot_name FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MAX(p.age) FROM pilotskills p WHERE p.plane_name = ps.plane_name)",
        "SELECT hangar.plane_name, MAX(pilotskills.pilot_name) as pilot_name FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.plane_name HAVING pilotskills.age = MAX(pilotskills.age)",
        "SELECT hangar.plane_name, (SELECT pilot_name FROM pilotskills WHERE plane_name = hangar.plane_name AND age = (SELECT MAX(age) FROM pilotskills WHERE plane_name = hangar.plane_name)) AS pilot_name FROM hangar",
        "SELECT h.plane_name, (SELECT p.pilot_name FROM pilotskills p WHERE p.plane_name = h.plane_name ORDER BY age DESC LIMIT 1) AS pilot_name FROM hangar h",
        "SELECT h.plane_name, p.pilot_name FROM hangar h LEFT JOIN pilotskills p ON h.plane_name = p.plane_name WHERE p.age IN (SELECT MAX(pp.age) FROM pilotskills pp WHERE pp.plane_name = h.plane_name)",
        "SELECT h.plane_name, FIRST_VALUE(p.pilot_name) OVER (PARTITION BY h.plane_name ORDER BY p.age DESC) as pilot_name FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name"
      ]
    ]
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "nlq": "Find the max age for each group of pilots with the same name.",
    "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
    "infer_predictions": [
      [
        "SELECT pilot_name, MAX(age) AS max_age FROM pilotskills GROUP BY pilot_name",
        "SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name",
        "SELECT p.pilot_name, MAX(p.age) FROM pilotskills p GROUP BY p.pilot_name",
        "SELECT pilot_name AS p_name, MAX(age) AS oldest FROM pilotskills GROUP BY pilot_name",
        "SELECT p1.pilot_name, MAX(p1.age) AS maximum_age FROM pilotskills p1 GROUP BY p1.pilot_name",
        "SELECT MAX(ps.age) AS oldest_age, ps.pilot_name FROM pilotskills ps GROUP BY ps.pilot_name",
        "SELECT pilot_name, age AS max_age FROM (SELECT pilot_name, age, RANK() OVER (PARTITION BY pilot_name ORDER BY age DESC) rng FROM pilotskills) sub WHERE sub.rng = 1",
        "SELECT pilot_name, FIRST_VALUE(age) OVER (PARTITION BY pilot_name ORDER BY age DESC) AS max_age FROM pilotskills GROUP BY pilot_name",
        "SELECT pilot_name, age FROM pilotskills WHERE (pilot_name, age) IN (SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name)"
      ]
    ]
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "nlq": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
    "infer_predictions": [
      [
        "SELECT pilot_name, MAX(age) FROM pilotskills GROUP BY pilot_name",
        "SELECT p.pilot_name, MAX(p.age) AS maximum_age FROM pilotskills p GROUP BY p.pilot_name",
        "SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM pilotskills ps GROUP BY ps.pilot_name",
        "SELECT pilot_name, MAX(age) AS max_pilot_age FROM pilotskills GROUP BY pilot_name ORDER BY pilot_name",
        "SELECT DISTINCT pilot_name, MAX(age) OVER (PARTITION BY pilot_name) FROM pilotskills",
        "SELECT pilot_name, MAX(age) FROM (SELECT pilot_name, age FROM pilotskills) GROUP BY pilot_name",
        "SELECT p.pilot_name, MAX(p.age) AS MaxAge FROM pilotskills p GROUP BY p.pilot_name HAVING MAX(p.age) IS NOT NULL",
        "SELECT pilot_name, MAX(age) max_age FROM (SELECT pilot_name, age FROM pilotskills) GROUP BY pilot_name",
        "SELECT pilot_name, AGE.max_age FROM (SELECT pilot_name, MAX(age) AS max_age FROM pilotskills GROUP BY pilot_name) AGE",
        "SELECT ps.pilot_name, MAX(ps.age) FROM pilotskills AS ps GROUP BY ps.pilot_name HAVING MAX(ps.age) > 0"
      ]
    ]
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "nlq": "For each city, find the number and average age of pilots who have a plane.",
    "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
    "infer_predictions": [
      [
        "SELECT h.location, COUNT(ps.pilot_name) AS num_pilots, AVG(ps.age) AS avg_age FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT location, COUNT(pilot_name), AVG(age) FROM hangar INNER JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY location",
        "SELECT location AS city, COUNT(DISTINCT pilot_name) AS number_of_pilots, AVG(age) AS average_age_of_pilots FROM hangar, pilotskills WHERE hangar.plane_name = pilotskills.plane_name GROUP BY location",
        "SELECT location, COUNT(pilot_name) AS num_pilots, AVG(age) as avg_pilot_age FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT hangar.location, COUNT(pilotskills.pilot_name) AS num_of_pilots, AVG(pilotskills.age) AS average_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.location",
        "SELECT h.location AS City, COUNT(ps.pilot_name) AS Total_Pilots, AVG(ps.age) AS Average_Age FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT h.location, COUNT(DISTINCT ps.pilot_name), AVG(ps.age) FROM hangar AS h JOIN pilotskills AS ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT location AS City, COUNT(pilotskills.pilot_name) AS NumberOfPilots, AVG(pilotskills.age) AS AveragePilotAge FROM hangar INNER JOIN pilotskills USING(plane_name) GROUP BY location",
        "SELECT location, (SELECT COUNT(pilot_name) FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name) AS num_pilots, (SELECT AVG(age) FROM pilotskills WHERE pilotskills.plane_name = hangar.plane_name) AS avg_age FROM hangar GROUP BY location"
      ]
    ]
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "nlq": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
    "infer_predictions": [
      [
        "SELECT h.location, COUNT(DISTINCT ps.pilot_name) AS num_pilots, AVG(ps.age) AS average_age FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT location, COUNT(DISTINCT pilot_name) as num_pilots, AVG(age) as average_age FROM hangar INNER JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY location",
        "SELECT location, COUNT(DISTINCT p_name) as num_pilots, AVG(a) as avg_age FROM hangar h JOIN (SELECT plane_name, pilot_name AS p_name, age AS a FROM pilotskills) p ON h.plane_name = p.plane_name GROUP BY location",
        "SELECT h.location, COUNT(DISTINCT pilot_name) as num_pilots, AVG(ps.age) as av_age FROM hangar h LEFT JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.location",
        "SELECT hangar.location, COUNT(DISTINCT pilotskills.pilot_name) AS pilot_count, AVG(pilotskills.age) AS average_pilot_age FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.location",
        "SELECT h.location, COUNT(DISTINCT pilotskills.pilot_name), AVG(pilotskills.age) FROM hangar h JOIN pilotskills ON h.plane_name = pilotskills.plane_name GROUP BY h.location",
        "SELECT location, COUNT(pilot_name) as pilots, AVG(age) as avg_age FROM hangar, pilotskills WHERE hangar.plane_name = pilotskills.plane_name GROUP BY location",
        "SELECT location AS hangar_location, COUNT(pilot_name) as total_pilots, AVG(age) AS average_age FROM hangar join pilotskills on hangar.plane_name = pilotskills.plane_name GROUP BY location",
        "SELECT h.location, COUNT(DISTINCT p.pilot_name) AS pilot_count, AVG(p.age) AS average_age FROM hangar h INNER JOIN (SELECT plane_name, pilot_name, age FROM pilotskills) p ON h.plane_name = p.plane_name GROUP BY h.location"
      ]
    ]
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "nlq": "Find the number of pilots for the plane types with average pilot age below 35.",
    "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name GROUP BY ps.plane_name HAVING AVG(ps.age) < 35",
        "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name, plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35)",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills GROUP BY pilot_name, plane_name HAVING AVG(age) < 35)",
        "SELECT COUNT(DISTINCT pilot_name) AS count_pilots FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35)",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps WHERE EXISTS (SELECT 1 FROM pilotskills WHERE plane_name = ps.plane_name GROUP BY plane_name HAVING AVG(age) < 35)",
        "SELECT SUM(Case When sub.avg_age < 35 Then 1 Else 0 End) AS Count FROM (SELECT plane_name, AVG(age) as avg_age FROM pilotskills GROUP BY plane_name) sub",
        "SELECT COUNT(DISTINCT ps.pilot_name) FROM pilotskills ps WHERE ps.plane_name IN (SELECT sp.plane_name FROM pilotskills sp GROUP BY sp.plane_name HAVING AVG(sp.age) < 35)",
        "SELECT COUNT(DISTINCT pilot) FROM (SELECT ps.pilot_name AS pilot FROM pilotskills ps JOIN (SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35) sub ON ps.plane_name = sub.plane_name)"
      ]
    ]
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "nlq": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
    "infer_predictions": [
      [
        "SELECT h.plane_name, COUNT(p.pilot_name) FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name GROUP BY h.plane_name HAVING AVG(p.age) < 35",
        "SELECT plane_name, COUNT(pilot_name) FROM hangar INNER JOIN pilotskills USING (plane_name) GROUP BY plane_name HAVING AVG(age) < 35",
        "SELECT a.plane_name, COUNT(b.pilot_name) FROM hangar a, pilotskills b WHERE a.plane_name = b.plane_name GROUP BY a.plane_name HAVING AVG(b.age) < 35",
        "SELECT DISTINCT h.plane_name, COUNT(DISTINCT ps.pilot_name) FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name GROUP BY h.plane_name HAVING AVG(ps.age) < 35",
        "SELECT h.plane_name, COUNT(ps.pilot_name) AS pilot_count FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.plane_name IN (SELECT plane_name FROM pilotskills GROUP BY plane_name HAVING AVG(age) < 35) GROUP BY h.plane_name",
        "SELECT hangar.plane_name, COUNT(pilot_name) FROM hangar JOIN pilotskills ON hangar.plane_name = pilotskills.plane_name GROUP BY hangar.plane_name HAVING AVG(age) < 35",
        "SELECT tab.plane_name, COUNT(tab.pilot_name) FROM (SELECT h.plane_name, ps.pilot_name, ps.age FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name) tab GROUP BY tab.plane_name HAVING AVG(tab.age) < 35",
        "SELECT p.plane_name, COUNT(p.pilot_name) FROM pilotskills p WHERE EXISTS (SELECT NULL FROM hangar h WHERE h.plane_name = p.plane_name) GROUP BY p.plane_name HAVING AVG(p.age) < 35",
        "SELECT plane_name, COUNT(*) as pilots_count FROM (SELECT h.plane_name, ps.pilot_name, ps.age FROM hangar h INNER JOIN pilotskills ps ON h.plane_name = ps.plane_name) AS joined_table GROUP BY plane_name HAVING AVG(age) < 35"
      ]
    ]
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "nlq": "Find the location of the plane that is owned by the youngest pilot.",
    "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
    "infer_predictions": [
      [
        "SELECT h.location FROM hangar h JOIN pilotskills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT location FROM hangar WHERE plane_name = (SELECT plane_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills))",
        "SELECT h.location FROM hangar h WHERE EXISTS (SELECT 1 FROM pilotskills ps WHERE ps.plane_name = h.plane_name AND ps.age = (SELECT MIN(age) FROM pilotskills))",
        "SELECT location FROM hangar WHERE plane_name IN (SELECT plane_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills))",
        "SELECT location FROM hangar h, pilotskills p WHERE h.plane_name = p.plane_name AND p.age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT h.location FROM hangar h INNER JOIN (SELECT plane_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills)) ps ON h.plane_name = ps.plane_name",
        "SELECT h.location FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name WHERE p.age = (SELECT MIN(p2.age) FROM pilotskills p2)",
        "SELECT (SELECT location FROM hangar WHERE plane_name = p.plane_name) FROM pilotskills p WHERE p.age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT location FROM hangar WHERE plane_name = (SELECT plane_name FROM pilotskills ORDER BY age ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "nlq": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
    "infer_predictions": [
      [
        "SELECT location FROM hangar WHERE plane_name = (SELECT plane_name FROM pilotskills ORDER BY age ASC LIMIT 1)",
        "SELECT h.location FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name WHERE p.age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT location FROM hangar WHERE plane_name IN (SELECT plane_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills))",
        "SELECT h.location FROM hangar h, pilotskills p WHERE h.plane_name = p.plane_name AND p.age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT (SELECT location FROM hangar WHERE plane_name = p.plane_name) FROM pilotskills p WHERE age = (SELECT MIN(age) FROM pilotskills)",
        "SELECT location FROM hangar h INNER JOIN (SELECT plane_name FROM pilotskills WHERE age = (SELECT MIN(age) FROM pilotskills)) p ON h.plane_name = p.plane_name",
        "SELECT h.location FROM hangar h WHERE EXISTS (SELECT 1 FROM pilotskills p WHERE p.plane_name = h.plane_name AND p.age = (SELECT MIN(age) FROM pilotskills))",
        "SELECT location FROM (SELECT h.location, p.age FROM hangar h JOIN pilotskills p ON h.plane_name = p.plane_name) ORDER BY age LIMIT 1"
      ]
    ]
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "nlq": "Find the name and age of pilots who have a plane in Austin.",
    "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
    "infer_predictions": [
      [
        "SELECT pilotskills.pilot_name, pilotskills.age FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.location = 'Austin'",
        "SELECT ps.pilot_name, ps.age FROM pilotskills AS ps INNER JOIN hangar AS h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'",
        "SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin')",
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Austin'",
        "SELECT p.pilot_name, p.age FROM pilotskills p JOIN hangar h ON p.plane_name = h.plane_name AND h.location = 'Austin'",
        "SELECT pilot_name, age FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE hangar.plane_name = pilotskills.plane_name AND location = 'Austin')",
        "SELECT pilot_name, age FROM pilotskills, hangar WHERE pilotskills.plane_name = hangar.plane_name AND hangar.location = 'Austin'",
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'",
        "SELECT p.pilot_name, p.age FROM pilotskills AS p, hangar AS h WHERE p.plane_name = h.plane_name AND h.location = 'Austin'"
      ]
    ]
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "nlq": "What are the names and ages of pilots who have planes located in Austin?",
    "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
    "infer_predictions": [
      [
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin'",
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps, hangar h WHERE ps.plane_name = h.plane_name AND h.location = 'Austin'",
        "SELECT pilot_name, age FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE location = 'Austin')",
        "SELECT pilotskills.pilot_name, pilotskills.age FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.location = 'Austin'",
        "SELECT pilot_name, age FROM pilotskills WHERE EXISTS (SELECT 1 FROM hangar WHERE hangar.plane_name = pilotskills.plane_name AND location = 'Austin')",
        "SELECT ps.pilot_name, ps.age FROM pilotskills ps JOIN hangar h ON h.plane_name = ps.plane_name WHERE h.location = 'Austin'",
        "SELECT DISTINCT ps.pilot_name, ps.age FROM pilotskills ps JOIN hangar h USING (plane_name) WHERE h.location = 'Austin'",
        "SELECT PS.pilot_name, PS.age FROM pilotskills AS PS INNER JOIN hangar AS H ON PS.plane_name = H.plane_name WHERE H.location = 'Austin'",
        "SELECT pilotskills.pilot_name, pilotskills.age FROM pilotskills, hangar WHERE pilotskills.plane_name = hangar.plane_name AND hangar.location = 'Austin'"
      ]
    ]
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "nlq": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "infer_predictions": [
      [
        "SELECT DISTINCT S1.pilot_name FROM pilotskills S1 WHERE S1.age > (SELECT MAX(S2.age) FROM pilotskills S2 WHERE S2.plane_name = 'Piper Cub') ORDER BY S1.pilot_name",
        "SELECT pilot_name FROM pilotskills S1 WHERE EXISTS (SELECT 1 FROM pilotskills S2 WHERE S2.plane_name = 'Piper Cub' AND S1.age > S2.age) ORDER BY pilot_name ASC",
        "SELECT pilot_name FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
        "SELECT DISTINCT p1.pilot_name FROM pilotskills p1, pilotskills p2 WHERE p1.age > p2.age AND p2.plane_name = 'Piper Cub' ORDER BY p1.pilot_name",
        "SELECT spilot.pilot_name FROM (SELECT pilot_name, age FROM pilotskills WHERE plane_name != 'Piper Cub' ) spilot WHERE spilot.age > (SELECT Savg.avgage FROM (SELECT AVG(age) AS avgage FROM pilotskills WHERE plane_name = 'Piper Cub') Savg) ORDER BY spilot.pilot_name",
        "WITH cte AS (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub') SELECT p.pilot_name FROM pilotskills p WHERE p.age > (SELECT MAX(cte.age) FROM cte) ORDER BY p.pilot_name",
        "SELECT DISTINCT F.pilot_name FROM pilotskills F WHERE F.age > (SELECT MAX(S.age) FROM pilotskills S WHERE S.plane_name = 'Piper Cub') ORDER BY F.pilot_name"
      ]
    ]
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "nlq": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "infer_predictions": [
      [
        "SELECT DISTINCT ps1.pilot_name FROM pilotskills ps1 WHERE ps1.age > (SELECT MAX(ps2.age) FROM pilotskills ps2 WHERE ps2.plane_name = 'Piper Cub') ORDER BY ps1.pilot_name",
        "SELECT pilot_name FROM pilotskills WHERE age > (SELECT MAX(age) FROM pilotskills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name",
        "SELECT ps.pilot_name FROM pilotskills ps WHERE ps.age > (SELECT MAX(p.age) FROM pilotskills p WHERE p.plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC",
        "SELECT p1.pilot_name FROM pilotskills p1 WHERE p1.age > (SELECT MAX(p2.age) FROM pilotskills p2 WHERE p2.plane_name = 'Piper Cub') ORDER BY p1.pilot_name",
        "SELECT DISTINCT pi.pilot_name FROM pilotskills pi WHERE pi.age > (SELECT MAX(p.age) FROM pilotskills p WHERE p.plane_name = 'Piper Cub') ORDER BY pi.pilot_name ASC",
        "SELECT po.pilot_name FROM pilotskills po WHERE po.age > (SELECT MAX(pg.age) FROM pilotskills pg WHERE pg.plane_name = 'Piper Cub') ORDER BY po.pilot_name ASC",
        "SELECT pk.pilot_name FROM pilotskills pk WHERE pk.age > (SELECT MAX(pl.age) FROM pilotskills pl WHERE pl.plane_name = 'Piper Cub') ORDER BY pk.pilot_name"
      ]
    ]
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "nlq": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age < (SELECT MIN(pilotskills.age) FROM pilotskills JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.plane_name = 'F-14 Fighter')",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name IN (SELECT plane_name FROM hangar WHERE plane_name = 'F-14 Fighter'))",
        "SELECT COUNT(*) FROM pilotskills ps1 WHERE ps1.age < (SELECT MIN(ps2.age) FROM pilotskills ps2 INNER JOIN hangar h ON ps2.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter')",
        "SELECT COUNT(*) FROM pilotskills ps1 WHERE EXISTS (SELECT 1 FROM (SELECT MIN(age) AS min_age FROM pilotskills ps2 WHERE ps2.plane_name = 'F-14 Fighter') foo WHERE ps1.age < foo.min_age)",
        "SELECT COUNT(p.pilot_name) FROM pilotskills p LEFT JOIN hangar h ON p.plane_name = h.plane_name WHERE p.age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')",
        "SELECT COUNT(*) FROM pilotskills WHERE age < (SELECT MIN(pilotskills.age) FROM pilotskills INNER JOIN hangar ON pilotskills.plane_name = hangar.plane_name WHERE hangar.plane_name = 'F-14 Fighter')",
        "SELECT COUNT(*) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills ps INNER JOIN hangar h ON ps.plane_name = h.plane_name AND h.plane_name = 'F-14 Fighter')"
      ]
    ]
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "nlq": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills ps WHERE ps.age < (SELECT DISTINCT MIN(p.age) FROM pilotskills p WHERE p.plane_name = 'F-14 Fighter'))",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age < (SELECT DISTINCT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills p WHERE p.age < (SELECT MIN(p2.age) FROM pilotskills p2 JOIN hangar h ON p2.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter')",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter') GROUP BY pilot_name)",
        "SELECT COUNT(pilot_name) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE age < (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'F-14 Fighter')) as pi"
      ]
    ]
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "nlq": "Find all different planes whose names contain substring 'Bomber'.",
    "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
    "infer_predictions": [
      [
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'",
        "SELECT plane_name FROM hangar GROUP BY plane_name HAVING plane_name LIKE '%Bomber%'",
        "SELECT DISTINCT h.plane_name FROM hangar h WHERE h.plane_name LIKE '%Bomber%'",
        "SELECT h.plane_name FROM hangar h WHERE h.plane_name LIKE '%Bomber%' GROUP BY h.plane_name",
        "SELECT DISTINCT plane_name FROM hangar WHERE instr(plane_name, 'Bomber') > 0",
        "SELECT plane_name FROM (SELECT DISTINCT plane_name FROM hangar) WHERE plane_name LIKE '%Bomber%'",
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '_%Bomber%' OR plane_name LIKE '%Bomber%'",
        "SELECT plane_name FROM hangar WHERE plane_name GLOB '*Bomber*' GROUP BY plane_name",
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bom%' AND plane_name LIKE '%ber%'"
      ]
    ]
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "nlq": "What are the different plane names that contain the word Bomber?",
    "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
    "infer_predictions": [
      [
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%'",
        "SELECT DISTINCT h.plane_name FROM hangar h WHERE h.plane_name LIKE '%Bomber%'",
        "SELECT plane_name FROM hangar WHERE plane_name LIKE '%Bomber%' GROUP BY plane_name",
        "SELECT DISTINCT plane_name FROM hangar WHERE instr(plane_name, 'Bomber') > 0",
        "SELECT DISTINCT plane_name FROM hangar WHERE lower(plane_name) LIKE '%bomber%'",
        "SELECT plane_name FROM hangar GROUP BY plane_name HAVING plane_name LIKE '%Bomber%'",
        "SELECT DISTINCT plane_name FROM hangar WHERE plane_name GLOB '*Bomber*'",
        "SELECT plane_name FROM (SELECT plane_name FROM hangar) WHERE plane_name LIKE '%Bomber%'",
        "SELECT plane_name FROM hangar WHERE SUBSTR(plane_name, instr(plane_name, 'Bomber'), 6) = 'Bomber'",
        "SELECT plane_name FROM hangar WHERE EXISTS (SELECT 1 FROM hangar h WHERE h.plane_name = hangar.plane_name AND h.plane_name LIKE '%Bomber%')"
      ]
    ]
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "nlq": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT ps1.pilot_name) FROM pilotskills AS ps1 WHERE ps1.age > (SELECT MIN(ps2.age) FROM pilotskills AS ps2 WHERE ps2.plane_name = 'Piper Cub')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT pilot_name FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub'))",
        "SELECT COUNT(DISTINCT ps1.pilot_name) FROM pilotskills AS ps1 JOIN pilotskills AS ps2 ON ps1.age > ps2.age WHERE ps2.plane_name = 'Piper Cub'",
        "SELECT COUNT(DISTINCT ps1.pilot_name) FROM pilotskills AS ps1 CROSS JOIN (SELECT age FROM pilotskills WHERE plane_name = 'Piper Cub') AS ps2 WHERE ps1.age > ps2.age",
        "SELECT COUNT(*) FROM (SELECT ps1.pilot_name FROM pilotskills AS ps1, pilotskills AS ps2 WHERE ps1.age > ps2.age AND ps2.plane_name = 'Piper Cub' GROUP BY ps1.pilot_name)",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub')",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > (SELECT age FROM (SELECT MIN(age) AS age FROM pilotskills WHERE plane_name = 'Piper Cub') AS min_age_cub)",
        "SELECT COUNT(DISTINCT ps1.pilot_name) FROM pilotskills AS ps1 LEFT JOIN pilotskills AS ps2 ON ps1.age > ps2.age WHERE ps2.plane_name = 'Piper Cub'"
      ]
    ]
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "nlq": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE age > (SELECT MIN(ps.age) FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub')",
        "SELECT SUM(CASE WHEN age > y.youngest_age THEN 1 ELSE 0 END) AS pilots_count FROM pilotskills, (SELECT MIN(age) AS youngest_age FROM pilotskills WHERE plane_name = 'Piper Cub') AS y",
        "SELECT COUNT(DISTINCT pilot_name) FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub' GROUP BY plane_name)",
        "SELECT COUNT(*) FROM pilotskills WHERE age > (SELECT MIN(p.age) FROM pilotskills p WHERE p.plane_name = 'Piper Cub')",
        "SELECT (SELECT COUNT(*) FROM pilotskills) - COUNT(*) FROM pilotskills WHERE age <= (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT COUNT(pilot_name) FROM pilotskills AS ps WHERE ps.age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')",
        "SELECT COUNT(DISTINCT pilot_name) AS valid_pilots FROM pilotskills WHERE age > (SELECT MIN(ps.age) FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub')",
        "SELECT COUNT(pilot_name) FROM pilotskills WHERE plane_name = 'Piper Cub' AND age > (SELECT MIN(ps.age) FROM pilotskills ps WHERE ps.plane_name = 'Piper Cub')",
        "SELECT COUNT(*) FROM (SELECT pilot_name FROM pilotskills WHERE age > (SELECT MIN(age) FROM pilotskills WHERE plane_name = 'Piper Cub')) pilot_above_youngest_age"
      ]
    ]
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "nlq": "Find the name of the district which has the largest area.",
    "gold": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM district ORDER BY area_km DESC LIMIT 1",
        "SELECT d.name FROM district d WHERE d.area_km = (SELECT MAX(area_km) FROM district)",
        "SELECT name FROM district WHERE area_km = (SELECT MAX(area_km) FROM district)",
        "SELECT name FROM district d1 WHERE NOT EXISTS (SELECT 1 FROM district d2 WHERE d2.area_km > d1.area_km)",
        "SELECT name FROM (SELECT name, RANK() OVER (ORDER BY area_km DESC) AS rank FROM district) WHERE rank = 1",
        "SELECT name FROM district WHERE area_km IN (SELECT MAX(area_km) FROM district)",
        "SELECT d.name FROM (SELECT name, area_km FROM district ORDER BY area_km DESC LIMIT 1) d"
      ]
    ]
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "nlq": "Select the area and government website of the district with the smallest population.",
    "gold": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
    "infer_predictions": [
      [
        "SELECT area_km, government_website FROM district ORDER BY population LIMIT 1",
        "SELECT d.area_km, d.government_website FROM district d WHERE d.population = (SELECT MIN(population) FROM district)",
        "SELECT area_km, government_website FROM district WHERE population = (SELECT MIN(population) FROM district)",
        "SELECT d.area_km, d.government_website FROM district d ORDER BY d.population ASC LIMIT 1",
        "SELECT area_km, government_website FROM district AS d WHERE d.population IN (SELECT MIN(population) FROM district)",
        "SELECT d.area_km, d.government_website FROM (SELECT * FROM district ORDER BY population ASC LIMIT 1) AS d",
        "SELECT area_km, government_website FROM district d1 WHERE d1.population = (SELECT MIN(d2.population) FROM district d2)",
        "SELECT first.area_km, first.government_website FROM (SELECT * FROM district ORDER BY population ASC) AS first LIMIT 1",
        "SELECT dist.area_km, dist.government_website FROM (SELECT area_km, government_website, MIN(population) FROM district) dist",
        "SELECT area_km, government_website FROM district WHERE population = (SELECT population FROM (SELECT MIN(population) as population FROM district))"
      ]
    ]
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "nlq": "Find the names and populations of the districts whose area is greater than the average area.",
    "gold": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
    "infer_predictions": [
      [
        "SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(area_km) FROM district)",
        "SELECT d1.name, d1.population FROM district d1 WHERE d1.area_km > (SELECT AVG(d2.area_km) FROM district d2)",
        "SELECT name, population FROM district WHERE area_km > (SELECT AVG(area_km) FROM district)",
        "SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(d2.area_km) FROM district d2)",
        "SELECT d.name, d.population FROM district d CROSS JOIN (SELECT AVG(area_km) AS avg_area FROM district) sub WHERE d.area_km > sub.avg_area",
        "SELECT name, population FROM district WHERE area_km > (SELECT AVG(d.area_km) FROM district d)",
        "SELECT district.name, district.population FROM district WHERE district.area_km > (SELECT AVG(d2.area_km) FROM district d2)"
      ]
    ]
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "nlq": "Give me the biggest and average areas of all districts.",
    "gold": "SELECT max(area_km) ,  avg(area_km) FROM district",
    "infer_predictions": [
      [
        "SELECT MAX(area_km) AS LargestArea, AVG(area_km) AS AverageArea FROM district",
        "SELECT MAX(d.area_km) AS BiggestArea, AVG(d.area_km) AS AvgArea FROM district d",
        "SELECT (SELECT MAX(area_km) FROM district) AS MaxArea, (SELECT AVG(area_km) FROM district) AS MeanArea",
        "SELECT MAX(area_km) AS MaximumArea, AVG(area_km) AS MeanValueOfArea FROM district",
        "SELECT (SELECT MAX(d.area_km) FROM district d) AS LargeArea, (SELECT AVG(d.area_km) FROM district d) AS AverageArea",
        "SELECT MAX(district.area_km) AS Max_Area, (SELECT AVG(area_km) FROM district) FROM district",
        "SELECT MAX(area_km), AVG(area_km) FROM district GROUP BY district_id",
        "SELECT (SELECT MAX(area_km) AS Largest FROM district), (SELECT AVG(area_km) AS Average FROM district)",
        "SELECT MAX(area_km) AS MaxArea, AVG(area_km) AS AvgArea FROM district d WHERE d.area_km IS NOT NULL",
        "SELECT MAX(Area) AS LargestArea, AVG(Area) AS AverageArea FROM (SELECT area_km AS Area FROM district)"
      ]
    ]
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "nlq": "What is the total population of the districts whose areas are in the top 3?",
    "gold": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT SUM(population) FROM district WHERE district_id IN (SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3)",
        "SELECT SUM(D.population) FROM (SELECT population FROM district ORDER BY area_km DESC LIMIT 3) AS D",
        "SELECT SUM(population) FROM (SELECT population FROM district ORDER BY area_km DESC LIMIT 3)",
        "SELECT TOTAL(population) FROM district WHERE district_id IN (SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3)",
        "SELECT SUM(population) FROM district D WHERE D.district_id IN (SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3)",
        "SELECT SUM(population) AS TotalPopulation FROM district WHERE district_id IN (SELECT district_id FROM district ORDER BY area_km DESC LIMIT 3)",
        "SELECT SUM(P.population) AS TotalPopulation FROM (SELECT * FROM district ORDER BY area_km DESC LIMIT 3) AS P"
      ]
    ]
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "nlq": "List the ids, names, and government websites of all districts sorted by population.",
    "gold": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
    "infer_predictions": [
      [
        "SELECT district_id, name, government_website FROM district ORDER BY population",
        "SELECT d.district_id, d.name, d.government_website FROM district d ORDER BY d.population",
        "SELECT district_id, name, government_website FROM district ORDER BY population DESC",
        "SELECT district_id AS id, name AS district_name, government_website AS website FROM district ORDER BY population",
        "SELECT district_id, name, government_website FROM district ORDER BY population, district_id"
      ]
    ]
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "nlq": "Find the names of districts whose government links use a 'gov' domain.",
    "gold": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
    "infer_predictions": [
      [
        "SELECT district.name FROM district WHERE district.government_website LIKE '%.gov%'",
        "SELECT d.name FROM district d WHERE d.government_website LIKE '%.gov%'",
        "SELECT district_nm.name FROM district district_nm WHERE district_nm.government_website LIKE '%.gov%'",
        "SELECT d_nm.name FROM district d_nm WHERE d_nm.government_website LIKE '%gov%'",
        "SELECT nm.name FROM district nm WHERE nm.government_website LIKE '%.gov%' AND nm.name IS NOT NULL",
        "SELECT name FROM district WHERE government_website LIKE '%.gov%' AND name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "nlq": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "gold": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
    "infer_predictions": [
      [
        "SELECT district_id, name FROM district WHERE population > 4000 OR area_km > 3000",
        "SELECT d.district_id, d.name FROM district d WHERE d.population > 4000 OR d.area_km > 3000",
        "SELECT d.district_id, d.name FROM district d WHERE (d.population > 4000 OR d.area_km > 3000)",
        "SELECT district.district_id, district.name FROM district WHERE (population > 4000 OR area_km > 3000)",
        "SELECT d.district_id, d.name FROM district AS d WHERE (d.population > 4000 OR d.area_km > 3000)",
        "SELECT d1.district_id, d1.name FROM district d1 WHERE d1.population > 4000 OR d1.area_km > 3000",
        "SELECT d.district_id AS id, d.name AS name FROM district d WHERE d.population > 4000 OR d.area_km > 3000"
      ]
    ]
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "nlq": "Find all spokesman's names and speech titles.",
    "gold": "SELECT name ,  speach_title FROM spokesman",
    "infer_predictions": [
      [
        "SELECT name, speach_title FROM spokesman",
        "SELECT s.name, s.speach_title FROM spokesman s",
        "SELECT name AS spokesman_name, speach_title AS title FROM spokesman",
        "SELECT spokesman.name AS SpokesmanName, spokesman.speach_title AS SpeechTitle FROM spokesman",
        "SELECT name, speach_title FROM spokesman ORDER BY name"
      ]
    ]
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "nlq": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "gold": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
    "infer_predictions": [
      [
        "SELECT AVG(points) AS average_points, AVG(age) AS average_age FROM spokesman WHERE rank_position = 1",
        "SELECT AVG(s.points) AS average_points, AVG(s.age) AS average_age FROM spokesman s WHERE s.rank_position = 1",
        "SELECT AVG(s.points), AVG(s.age) FROM spokesman s WHERE s.rank_position = 1 GROUP BY s.rank_position",
        "SELECT average_points, average_age FROM (SELECT AVG(points) as average_points, AVG(age) as average_age FROM spokesman WHERE rank_position = 1)",
        "SELECT AVG(points) AS avg_points, AVG(age) AS avg_age FROM spokesman WHERE rank_position = 1 GROUP BY rank_position",
        "SELECT AVG(s.points) AS AveragePoints, AVG(s.age) AS AverageAges FROM spokesman s WHERE s.rank_position = '1'",
        "SELECT AVG(Spokesman.points), AVG(Spokesman.age) FROM spokesman Spokesman WHERE Spokesman.rank_position = 1",
        "SELECT AVG(s.points), AVG(s.age) FROM spokesman s WHERE s.rank_position = 1 AND s.rank_position IS NOT NULL",
        "SELECT AVG(points), AVG(age) FROM (SELECT points, age FROM spokesman WHERE rank_position = 1) AS filtered_spokesmen",
        "SELECT AVG(SM.points) AS average_points, AVG(SM.age) AS average_age FROM spokesman SM WHERE SM.rank_position = 1 GROUP BY SM.rank_position"
      ]
    ]
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "nlq": "What are the names and points of spokesmen who are younger than 40?",
    "gold": "SELECT name ,  points FROM spokesman WHERE age  <  40",
    "infer_predictions": [
      [
        "SELECT name, points FROM spokesman WHERE age < 40",
        "SELECT s.name, s.points FROM spokesman s WHERE s.age < 40",
        "SELECT name, points FROM spokesman WHERE age < 40 ORDER BY name",
        "SELECT name, points FROM spokesman WHERE age < 40 GROUP BY name, points",
        "SELECT sp.name, sp.points FROM spokesman sp WHERE sp.age < 40",
        "SELECT name AS SpeakerName, points AS SpeakerPoints FROM spokesman WHERE age < 40",
        "SELECT name, points FROM spokesman WHERE age < (SELECT 40)"
      ]
    ]
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "nlq": "Who is the oldest spokesman?",
    "gold": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM district ORDER BY population ASC LIMIT 1",
        "SELECT name FROM district WHERE population = (SELECT MIN(population) FROM district)",
        "SELECT d.name FROM district d WHERE d.population = (SELECT MIN(d2.population) FROM district d2)",
        "SELECT name FROM district WHERE population = (SELECT MIN(population) FROM district WHERE population IS NOT NULL)",
        "SELECT d.name FROM district d ORDER BY d.population ASC LIMIT 1",
        "SELECT name FROM (SELECT name, MIN(population) AS min_population FROM district GROUP BY name) tmp"
      ]
    ]
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "nlq": "Which spokesman has lower points than the average?",
    "gold": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
    "infer_predictions": [
      [
        "SELECT name FROM spokesman WHERE points < (SELECT AVG(points) FROM spokesman)",
        "SELECT s.name FROM spokesman s WHERE s.points < (SELECT AVG(points) FROM spokesman)",
        "SELECT name FROM spokesman WHERE points < (SELECT AVG(points) FROM spokesman s)",
        "SELECT s.name FROM spokesman s CROSS JOIN (SELECT AVG(points) AS avg_points FROM spokesman) av WHERE s.points < av.avg_points",
        "SELECT name FROM spokesman s1 WHERE points < (SELECT AVG(s2.points) FROM spokesman s2)",
        "SELECT s.name FROM spokesman s WHERE s.points < (SELECT A.avg_points FROM (SELECT AVG(points) as avg_points FROM spokesman) A)",
        "SELECT s.name FROM spokesman s JOIN (SELECT AVG(points) AS avg_points FROM spokesman) ap ON s.points < ap.avg_points",
        "SELECT s.name FROM spokesman s WHERE s.points < (SELECT AVG(points) FROM spokesman WHERE spokesman_id IS NOT NULL)",
        "SELECT s.name FROM spokesman AS s WHERE s.points < (SELECT AVG(points) AS average_points FROM spokesman)"
      ]
    ]
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "nlq": "Find the name of the district which has greatest number of spokesmen.",
    "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY COUNT(sd.spokesman_id) DESC LIMIT 1",
        "SELECT name FROM district WHERE district_id = (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT d.name FROM district d WHERE d.district_id IN (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(spokesman_id) DESC LIMIT 1)",
        "SELECT name FROM district WHERE district_id = (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(spokesman_id) DESC LIMIT 1)",
        "SELECT d.name FROM district d, (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(spokesman_id) DESC LIMIT 1) x WHERE d.district_id = x.district_id",
        "SELECT d.name FROM district AS d INNER JOIN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(spokesman_id) = (SELECT MAX(c) FROM (SELECT COUNT(spokesman_id) as c FROM spokesman_district GROUP BY district_id))) y ON d.district_id = y.district_id",
        "SELECT MAX(d.name) AS DistrictName FROM district d INNER JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name ORDER BY COUNT(sd.spokesman_id) DESC",
        "SELECT d.name FROM (SELECT district_id FROM spokesman_district GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxDist INNER JOIN district d ON MaxDist.district_id = d.district_id",
        "WITH SpokesmanCounts AS (SELECT district_id, COUNT(*) AS num_spokesmen FROM spokesman_district GROUP BY district_id) SELECT d.name FROM district d JOIN SpokesmanCounts sc ON d.district_id = sc.district_id ORDER BY sc.num_spokesmen DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "nlq": "Find the names of spokesmen who have served some district before 2004.",
    "gold": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.start_year < 2004",
        "SELECT s.name FROM spokesman s WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.spokesman_id = s.spokesman_id AND sd.start_year < 2004)",
        "SELECT name FROM spokesman WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman_district WHERE start_year < 2004)",
        "SELECT s.name FROM spokesman s INNER JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.start_year < 2004 GROUP BY s.name",
        "SELECT DISTINCT name FROM (SELECT s.name FROM spokesman s, spokesman_district sd WHERE s.spokesman_id = sd.spokesman_id AND sd.start_year < 2004)",
        "SELECT name FROM spokesman WHERE EXISTS (SELECT * FROM spokesman_district WHERE spokesman.spokesman_id = spokesman_district.spokesman_id AND start_year < 2004)",
        "SELECT spokesman.name FROM spokesman JOIN spokesman_district ON spokesman.spokesman_id = spokesman_district.spokesman_id WHERE spokesman_district.start_year < 2004",
        "SELECT s.name FROM spokesman AS s, spokesman_district AS sd WHERE s.spokesman_id = sd.spokesman_id AND sd.start_year < 2004",
        "WITH ServingBefore2004 AS (SELECT spokesman_id FROM spokesman_district WHERE start_year < 2004) SELECT name FROM spokesman WHERE spokesman_id IN (SELECT spokesman_id FROM ServingBefore2004)",
        "SELECT DISTINCT s.name FROM spokesman s WHERE s.spokesman_id IN (SELECT sd.spokesman_id FROM spokesman_district sd WHERE sd.start_year < 2004)"
      ]
    ]
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "nlq": "Find the number of spokesmen for each district, and the show district names as well.",
    "gold": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
    "infer_predictions": [
      [
        "SELECT d.name, COUNT(sd.spokesman_id) AS num_spokesmen FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.district_id",
        "SELECT district.name, COUNT(spokesman_district.spokesman_id) AS num_spokesmen FROM district JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.district_id",
        "SELECT d.name, COUNT(*) AS num_spokesmen FROM district AS d INNER JOIN spokesman_district AS sd ON d.district_id = sd.district_id GROUP BY d.district_id",
        "SELECT d.name, COUNT(sd.spokesman_id) FROM district AS d, spokesman_district AS sd WHERE d.district_id = sd.district_id GROUP BY d.district_id",
        "SELECT name, (SELECT COUNT(spokesman_id) FROM spokesman_district WHERE district_id = d.district_id) AS num_spokesmen FROM district AS d",
        "SELECT d.name, (SELECT COUNT(*) FROM spokesman_district WHERE district_id = d.district_id) AS num_songhbird_song FROM district AS d",
        "SELECT name, COUNT(spokesman_id) AS num_spokesmen FROM district INNER JOIN spokesman_district USING (district_id) GROUP BY district_id",
        "SELECT (SELECT name FROM district WHERE district_id = sd.district_id) AS name, COUNT(spokesman_id) AS num_spokesmen FROM spokesman_district AS sd GROUP BY sd.district_id",
        "SELECT d.name, (SELECT COUNT(DISTINCT spokesman_id) FROM spokesman_district sd WHERE sd.district_id = d.district_id) AS num_spokesmen FROM district AS d",
        "SELECT d.name, COUNT(DISTINCT sd.spokesman_id) FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.district_id"
      ]
    ]
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "nlq": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "gold": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.name FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE s.rank_position IN (1, 2) GROUP BY d.name HAVING COUNT(DISTINCT s.rank_position) = 2",
        "SELECT d.name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 1) AND EXISTS (SELECT 1 FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 2)",
        "SELECT d.name FROM district AS d JOIN (SELECT sd.district_id FROM spokesman_district AS sd JOIN spokesman AS s ON sd.spokesman_id = s.spokesman_id WHERE s.rank_position = 1) AS sp1 ON d.district_id = sp1.district_id JOIN (SELECT sd.district_id FROM spokesman_district AS sd JOIN spokesman AS s ON sd.spokesman_id = s.spokesman_id WHERE s.rank_position = 2) AS sp2 ON d.district_id = sp2.district_id",
        "SELECT d.name FROM district d INNER JOIN spokesman_district sd ON sd.district_id = d.district_id INNER JOIN spokesman s ON s.spokesman_id = sd.spokesman_id WHERE s.rank_position = 1 INTERSECT SELECT d.name FROM district d INNER JOIN spokesman_district sd ON sd.district_id = d.district_id INNER JOIN spokesman s ON s.spokesman_id = sd.spokesman_id WHERE s.rank_position = 2",
        "SELECT name FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district JOIN spokesman ON spokesman_district.spokesman_id = spokesman.spokesman_id WHERE rank_position = 1) AND district_id IN (SELECT district_id FROM spokesman_district JOIN spokesman ON spokesman_district.spokesman_id = spokesman.spokesman_id WHERE rank_position = 2)",
        "SELECT DISTINCT d.name FROM district d WHERE EXISTS (SELECT sd.district_id FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 1 GROUP BY sd.district_id INTERSECT SELECT sd.district_id FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position = 2 GROUP BY sd.district_id)",
        "SELECT d1.name FROM district d1 WHERE (SELECT COUNT(DISTINCT s.rank_position) FROM spokesman_district sd JOIN spokesman s ON sd.spokesman_id = s.spokesman_id WHERE sd.district_id = d1.district_id AND s.rank_position IN (1, 2)) = 2",
        "SELECT DISTINCT d.name FROM district AS d WHERE (SELECT COUNT(DISTINCT s.rank_position) FROM spokesman AS s JOIN spokesman_district AS sd ON s.spokesman_id = sd.spokesman_id WHERE sd.district_id = d.district_id AND s.rank_position IN (1,2)) = 2",
        "SELECT d.name FROM (SELECT district_id FROM spokesman_district WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman WHERE rank_position = 1) INTERSECT SELECT district_id FROM spokesman_district WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman WHERE rank_position = 2)) dv JOIN district d ON dv.district_id = d.district_id",
        "SELECT name FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman WHERE rank_position = 1)) AND district_id IN (SELECT district_id FROM spokesman_district WHERE spokesman_id IN (SELECT spokesman_id FROM spokesman WHERE rank_position = 2))"
      ]
    ]
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "nlq": "Find the names of districts which have more than one spokesman.",
    "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT D.name FROM district D JOIN spokesman_district SD ON D.district_id = SD.district_id GROUP BY D.name HAVING COUNT(DISTINCT SD.spokesman_id) > 1",
        "SELECT name FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(DISTINCT spokesman_id) > 1)",
        "SELECT DISTINCT d.name FROM district d INNER JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name HAVING COUNT(DISTINCT sd.spokesman_id) > 1",
        "SELECT d.name FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.district_id = d.district_id GROUP BY sd.district_id HAVING COUNT(DISTINCT sd.spokesman_id) > 1)",
        "SELECT name FROM (SELECT d.name, COUNT(DISTINCT sd.spokesman_id) AS cnt FROM district d LEFT JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.name) WHERE cnt > 1",
        "SELECT d.name FROM (SELECT sd.district_id FROM spokesman_district sd GROUP BY sd.district_id HAVING COUNT(DISTINCT sd.spokesman_id) > 1) ids JOIN district d ON d.district_id = ids.district_id",
        "SELECT d.name FROM district AS d JOIN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(DISTINCT spokesman_id) > 1) AS sub ON d.district_id = sub.district_id",
        "SELECT name FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district GROUP BY district_id, spokesman_id HAVING COUNT(*) > 1)",
        "SELECT d.name FROM district d WHERE d.district_id IN (SELECT sd.district_id FROM spokesman_district sd GROUP BY sd.district_id HAVING COUNT(sd.spokesman_id) > 1)"
      ]
    ]
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "nlq": "Find the number of districts which have no spokesmen.",
    "gold": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM district WHERE district_id NOT IN (SELECT DISTINCT district_id FROM spokesman_district)",
        "SELECT COUNT(*) FROM district d WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.district_id = d.district_id)",
        "SELECT COUNT(*) FROM district d WHERE d.district_id NOT IN (SELECT sd.district_id FROM spokesman_district sd)",
        "SELECT COUNT(d.name) FROM district d LEFT OUTER JOIN spokesman_district sd ON d.district_id = sd.district_id WHERE sd.district_id IS NULL",
        "SELECT COUNT(DISTINCT district.name) FROM district LEFT JOIN spokesman_district ON district.district_id = spokesman_district.district_id WHERE spokesman_district.district_id IS NULL",
        "SELECT COUNT(district.district_id) FROM district LEFT JOIN spokesman_district ON district.district_id = spokesman_district.district_id GROUP BY district.district_id HAVING COUNT(spokesman_district.spokesman_id) = 0",
        "SELECT COUNT(*) FROM (SELECT d.district_id FROM district d LEFT JOIN spokesman_district sd ON d.district_id = sd.district_id GROUP BY d.district_id HAVING COUNT(sd.spokesman_id) = 0)",
        "SELECT COUNT(district_id) FROM district WHERE district_id NOT IN (SELECT sd.district_id FROM spokesman_district sd WHERE sd.district_id IS NOT NULL)",
        "SELECT COUNT(*) FROM district AS d WHERE NOT EXISTS (SELECT NULL FROM spokesman_district AS sd WHERE sd.district_id = d.district_id)"
      ]
    ]
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "nlq": "Find the name of spokesmen who do not speak for any district.",
    "gold": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
    "infer_predictions": [
      [
        "SELECT name FROM spokesman WHERE spokesman_id NOT IN (SELECT spokesman_id FROM spokesman_district)",
        "SELECT s.name FROM spokesman s LEFT JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id WHERE sd.spokesman_id IS NULL",
        "SELECT s.name FROM spokesman s WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.spokesman_id = s.spokesman_id)",
        "SELECT s.name FROM spokesman s WHERE s.spokesman_id NOT IN (SELECT sd.spokesman_id FROM spokesman_district sd)",
        "SELECT name FROM spokesman WHERE spokesman_id NOT IN (SELECT DISTINCT spokesman_id FROM spokesman_district)",
        "SELECT S.name FROM spokesman S WHERE S.spokesman_id NOT IN (SELECT DISTINCT SD.spokesman_id FROM spokesman_district SD)",
        "SELECT s.name FROM spokesman s WHERE s.spokesman_id NOT IN (SELECT spokesman_id FROM spokesman_district WHERE spokesman_id IS NOT NULL)",
        "SELECT name FROM spokesman s EXCEPT SELECT s.name FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id",
        "SELECT s.name FROM spokesman s WHERE NOT EXISTS (SELECT NULL FROM spokesman_district sd WHERE sd.spokesman_id = s.spokesman_id)",
        "SELECT S.name FROM spokesman S WHERE NOT EXISTS (SELECT 1 FROM spokesman_district SD WHERE SD.spokesman_id = S.spokesman_id)"
      ]
    ]
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "nlq": "Find the total and average population of the districts which have some spokesman.",
    "gold": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
    "infer_predictions": [
      [
        "SELECT SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d WHERE d.district_id IN (SELECT distinct sd.district_id FROM spokesman_district sd)",
        "SELECT SUM(population) AS total_population, AVG(population) AS average_population FROM district WHERE district_id IN (SELECT distinct district_id FROM spokesman_district)",
        "SELECT SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d INNER JOIN spokesman_district sd ON d.district_id = sd.district_id",
        "SELECT SUM(d.population) AS total_population, AVG(d.population) AS average_population FROM district d WHERE EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.district_id = d.district_id)",
        "SELECT TOTAL(population) AS total_population, AVG(population) AS average_population FROM district WHERE district_id IN (SELECT distinct sd.district_id FROM spokesman_district sd)",
        "SELECT SUM(population) total_population, AVG(population) average_population FROM district WHERE EXISTS (SELECT * FROM spokesman_district WHERE district_id = district.district_id)",
        "SELECT SUM(d.population), AVG(d.population) FROM district d JOIN spokesman_district sd ON d.district_id = sd.district_id",
        "SELECT TOTAL(d.population) total_population, AVG(d.population) average_population FROM district d WHERE d.district_id IN (SELECT sd.district_id FROM spokesman_district sd)",
        "SELECT SUM(population) AS total_population, AVG(population) AS average_population FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district GROUP BY district_id HAVING COUNT(spokesman_id) > 0)",
        "SELECT TOTAL(population) AS total_population, AVG(population) AS average_population FROM district d WHERE EXISTS (SELECT NULL FROM spokesman_district sd WHERE sd.district_id = d.district_id)"
      ]
    ]
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "nlq": "What is the title of the sculpture that was created in the most recent year ?",
    "gold": "select title from sculptures order by year desc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM sculptures ORDER BY year DESC LIMIT 1",
        "SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)",
        "SELECT s.title FROM sculptures s WHERE s.year IN (SELECT MAX(year) FROM sculptures)",
        "SELECT s.title FROM sculptures s ORDER BY s.year DESC LIMIT 1",
        "SELECT title FROM (SELECT title, year FROM sculptures ORDER BY year DESC) LIMIT 1",
        "SELECT title FROM sculptures WHERE year = (SELECT MAX(s.year) FROM sculptures s)",
        "SELECT title FROM sculptures s1 WHERE s1.year = (SELECT MAX(s2.year) FROM sculptures s2)",
        "SELECT s.title FROM sculptures s JOIN (SELECT MAX(year) AS max_year FROM sculptures) mx ON s.year = mx.max_year"
      ]
    ]
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "nlq": "What is the name of the scuplture that was created most recently ?",
    "gold": "select title from sculptures order by year desc limit 1",
    "infer_predictions": [
      [
        "SELECT title FROM sculptures ORDER BY year DESC LIMIT 1",
        "SELECT s.title FROM sculptures s WHERE s.year = (SELECT MAX(year) FROM sculptures)",
        "SELECT title FROM sculptures WHERE year = (SELECT MAX(year) FROM sculptures)",
        "SELECT s.title FROM sculptures s ORDER BY s.year DESC LIMIT 1",
        "SELECT title FROM sculptures WHERE year IN (SELECT MAX(year) FROM sculptures)",
        "SELECT s.title FROM (SELECT title, MAX(year) AS MaxYear FROM sculptures GROUP BY title) s",
        "SELECT s.title FROM sculptures s WHERE s.year = (SELECT MAX(s2.year) FROM sculptures s2)"
      ]
    ]
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "nlq": "What is the title and location of the oldest painting ?",
    "gold": "select title ,  location from paintings order by year limit 1",
    "infer_predictions": [
      [
        "SELECT title, location FROM paintings ORDER BY year ASC LIMIT 1",
        "SELECT p.title, p.location FROM paintings p WHERE p.year = (SELECT MIN(year) FROM paintings)",
        "SELECT title, location FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)",
        "SELECT p.title, p.location FROM paintings p JOIN (SELECT MIN(year) AS MinYear FROM paintings) AS m ON p.year = m.MinYear",
        "SELECT title, location FROM paintings WHERE year IN (SELECT MIN(year) FROM paintings)",
        "SELECT p.title, p.location FROM paintings p WHERE p.year = (SELECT year FROM paintings ORDER BY year LIMIT 1)",
        "SELECT p.title, p.location FROM (SELECT * FROM paintings ORDER BY year) p LIMIT 1",
        "SELECT title, location FROM paintings WHERE year = (SELECT MIN(p.year) FROM paintings p)",
        "SELECT title, location FROM paintings p WHERE EXISTS (SELECT 1 FROM paintings WHERE year = (SELECT MIN(year) FROM paintings) AND p.year = year)",
        "SELECT first.title, first.location FROM paintings first WHERE first.year = (SELECT MIN(year) FROM paintings WHERE year = first.year)"
      ]
    ]
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "nlq": "What is the name of the oldest painting and where is it located?",
    "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
    "infer_predictions": [
      [
        "SELECT title, location FROM paintings ORDER BY year ASC LIMIT 1",
        "SELECT paintings.title, paintings.location FROM paintings WHERE paintings.year = (SELECT MIN(year) FROM paintings)",
        "SELECT p.title, p.location FROM paintings p WHERE p.year = (SELECT MIN(year) FROM paintings p)",
        "SELECT t.title, t.location FROM (SELECT title, location, year FROM paintings ORDER BY year ASC) t LIMIT 1",
        "SELECT a.title, a.location FROM paintings a JOIN (SELECT MIN(year) AS MinYear FROM paintings) b ON a.year = b.MinYear",
        "SELECT first.title, first.location FROM (SELECT * FROM paintings ORDER BY year) first LIMIT 1",
        "SELECT title, location FROM paintings WHERE year IN (SELECT MIN(year) FROM paintings)",
        "SELECT title, location FROM paintings p WHERE exists (SELECT 1 FROM paintings sub WHERE sub.year < p.year) = 0"
      ]
    ]
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "nlq": "Find the names of all sculptures located in gallery 226.",
    "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
    "infer_predictions": [
      [
        "SELECT title FROM sculptures WHERE location = 'Gallery 226'",
        "SELECT S.title FROM sculptures S WHERE S.location = 'Gallery 226'",
        "SELECT sculptures.title FROM sculptures WHERE location LIKE 'Gallery 226'",
        "SELECT title FROM sculptures WHERE location IN (SELECT location FROM sculptures WHERE location = 'Gallery 226')",
        "SELECT S.title FROM sculptures S WHERE S.location = 'Gallery 226' AND S.sculptureid IS NOT NULL",
        "SELECT sculptureid, title FROM sculptures WHERE location = 'Gallery 226'",
        "SELECT sculptureid AS ID, title AS Name FROM sculptures WHERE location = 'Gallery 226'",
        "SELECT sculptures.title FROM sculptures WHERE sculptures.location IN ('Gallery 226')"
      ]
    ]
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "nlq": "What are the names of all sculptures in gallery 226?",
    "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
    "infer_predictions": [
      [
        "SELECT title FROM sculptures WHERE location = 'Gallery 226'",
        "SELECT s.title FROM sculptures s WHERE s.location = 'Gallery 226'",
        "SELECT title FROM sculptures WHERE location LIKE 'Gallery 226'",
        "SELECT sculpture.title FROM sculptures sculpture WHERE sculpture.location = 'Gallery 226'",
        "SELECT title FROM sculptures WHERE location = 'Gallery 226' AND title IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "nlq": "List the title and location of all paintings.",
    "gold": "SELECT title ,  LOCATION FROM paintings",
    "infer_predictions": [
      [
        "SELECT title, location FROM paintings;",
        "SELECT p.title, p.location FROM paintings p;",
        "SELECT title AS painting_title, location AS painting_location FROM paintings;",
        "SELECT paintings.title AS Title, paintings.location AS Location FROM paintings;",
        "SELECT title, location FROM paintings WHERE location IS NOT NULL;",
        "SELECT title || '' AS Title, location FROM paintings;",
        "SELECT * FROM (SELECT title, location FROM paintings);",
        "SELECT title, location FROM paintings ORDER BY title;"
      ]
    ]
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "nlq": "What are the paintings called and where are they located?",
    "gold": "SELECT title ,  LOCATION FROM paintings",
    "infer_predictions": [
      [
        "SELECT title, location FROM paintings",
        "SELECT p.title, p.location FROM paintings p",
        "SELECT p.title AS PaintingTitle, p.location AS PaintingLocation FROM paintings p",
        "SELECT title AS 'Painting Title', location AS 'Painting Location' FROM paintings",
        "SELECT paintings.title, paintings.location FROM paintings ORDER BY paintings.title",
        "SELECT title, location FROM paintings WHERE location IS NOT NULL",
        "SELECT p.title, p.location FROM paintings p WHERE p.year > 0",
        "SELECT title || ' at ' || location AS Description FROM paintings"
      ]
    ]
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "nlq": "List the title and location of all sculptures.",
    "gold": "SELECT title ,  LOCATION FROM sculptures",
    "infer_predictions": [
      [
        "SELECT title, location FROM sculptures;",
        "SELECT s.title, s.location FROM sculptures s;",
        "SELECT title as sculpture_title, location as sculpture_location FROM sculptures;",
        "SELECT * FROM (SELECT title, location FROM sculptures);",
        "SELECT title, location FROM sculptures WHERE 1 = 1;",
        "SELECT s.title AS Title, s.location AS Location FROM sculptures AS s;",
        "SELECT sc.title, sc.location FROM sculptures sc;",
        "SELECT title /* sculture's title */, location /* sculpture's location */ FROM sculptures;"
      ]
    ]
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "nlq": "What are the sculptures called and where are they located?",
    "gold": "SELECT title ,  LOCATION FROM sculptures",
    "infer_predictions": [
      [
        "SELECT title, location FROM sculptures;",
        "SELECT title AS SculptureName, location AS PlacedIn FROM sculptures;",
        "SELECT title, location FROM sculptures WHERE title IS NOT NULL;",
        "SELECT title, location FROM sculptures ORDER BY title;",
        "SELECT title AS Sculpture_Title, location AS Sculpture_Location FROM sculptures ORDER BY location;",
        "SELECT s.title, s.location FROM sculptures s;"
      ]
    ]
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "nlq": "What are the medium types of the painting with id = 80",
    "gold": "SELECT medium FROM paintings WHERE paintingID  =  80",
    "infer_predictions": [
      [
        "SELECT medium FROM paintings WHERE paintingid = 80",
        "SELECT p.medium FROM paintings p WHERE p.paintingid = 80",
        "SELECT p.medium AS Medium FROM paintings AS p WHERE p.paintingid = 80",
        "SELECT p.medium FROM paintings p WHERE CAST(p.paintingid AS INTEGER) = 80",
        "SELECT CASE WHEN paintingid = 80 THEN medium END FROM paintings WHERE paintingid = 80",
        "SELECT p.medium FROM paintings p WHERE p.paintingid IN (SELECT paintingid FROM paintings WHERE paintingid = 80)"
      ]
    ]
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "nlq": "What mediums were used for the painting with id 80 ?",
    "gold": "select medium from paintings where paintingid  =  80",
    "infer_predictions": [
      [
        "SELECT medium FROM paintings WHERE paintingid = 80",
        "SELECT medium FROM paintings WHERE paintingid = 80 LIMIT 1",
        "SELECT p.medium FROM paintings p WHERE p.paintingid = 80",
        "SELECT p.medium FROM paintings p WHERE p.paintingid = '80'",
        "SELECT DISTINCT p.medium FROM paintings p WHERE p.paintingid = 80",
        "SELECT p.medium FROM paintings p WHERE p.paintingid = '80' LIMIT 1",
        "SELECT medium FROM paintings p WHERE p.paintingid IS 80"
      ]
    ]
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "nlq": "Find the first and last names of all artists who were born after 1850.",
    "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
    "infer_predictions": [
      [
        "SELECT sculptorid, title FROM sculptures WHERE year > 1850",
        "SELECT s.sculptorid, s.title FROM sculptures s WHERE s.year > 1850",
        "SELECT sculptorid AS SculptorID, title AS Title FROM sculptures WHERE sculptures.year > 1850",
        "SELECT Sculptures.sculptorid, title FROM sculptures Sculptures WHERE year > 1850",
        "SELECT s.sculptorid AS SculptorID, s.title FROM sculptures AS s WHERE s.year > 1850",
        "SELECT s.sculptorid AS sculptorID, title AS Title FROM sculptures s WHERE year > 1850"
      ]
    ]
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "nlq": "What are the full names of artists born after 1850?",
    "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
    "infer_predictions": [
      [
        "SELECT fname || ' ' || lname AS full_name FROM artists WHERE birthyear > 1850",
        "SELECT fname || ' ' || lname FROM artists WHERE birthyear > 1850",
        "SELECT fname || ' ' || lname FROM artists WHERE birthyear > 1850 ORDER BY lname",
        "SELECT fname || ' ' || lname FROM artists WHERE birthyear > 1850 ORDER BY birthyear DESC",
        "SELECT fname || ' ' || lname FROM artists WHERE birthyear > '1850'",
        "SELECT DISTINCT fname || ' ' || lname FROM artists WHERE birthyear > 1850",
        "SELECT a.fname || ' ' || a.lname FROM artists AS a WHERE a.birthyear > 1850"
      ]
    ]
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "nlq": "Find the names and years of all sculptures that are not located in gallery 226.",
    "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
    "infer_predictions": [
      [
        "SELECT title, year FROM sculptures WHERE location != 'Gallery 226'",
        "SELECT title, year FROM sculptures WHERE NOT location = 'Gallery 226'",
        "SELECT title, year FROM sculptures WHERE location <> 'Gallery 226'",
        "SELECT s.title, s.year FROM sculptures s WHERE s.location NOT IN ('Gallery 226')",
        "SELECT title, year FROM sculptures WHERE location NOT LIKE 'Gallery 226'",
        "SELECT sculptures.title, sculptures.year FROM sculptures WHERE NOT sculptures.location = 'Gallery 226'",
        "SELECT title, year FROM sculptures WHERE IFNULL(location, '') != 'Gallery 226'",
        "SELECT s.title, s.year FROM sculptures s WHERE s.location NOT GLOB 'Gallery 226'"
      ]
    ]
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "nlq": "What are the names and dates created for all sculptures not located in gallery 226?",
    "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
    "infer_predictions": [
      [
        "SELECT title, year FROM sculptures WHERE location != 'Gallery 226'",
        "SELECT title, year FROM sculptures WHERE NOT location = 'Gallery 226'",
        "SELECT title AS sculpture_name, year AS date_created FROM sculptures WHERE location <> 'Gallery 226'",
        "SELECT s.title, s.year FROM sculptures s WHERE s.location NOT LIKE 'Gallery 226'",
        "SELECT s.title, s.year FROM sculptures s WHERE s.location NOT IN ('Gallery 226')",
        "SELECT title, year FROM sculptures WHERE (location = 'Gallery 226') IS NOT TRUE",
        "SELECT title, year FROM sculptures WHERE location NOT GLOB 'Gallery 226'",
        "SELECT title AS Name, year AS Date FROM sculptures WHERE NOT (location = 'Gallery 226')",
        "SELECT sculptures.title, sculptures.year FROM sculptures WHERE sculptures.location <> 'Gallery 226'"
      ]
    ]
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "nlq": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
    "infer_predictions": [
      [
        "SELECT DISTINCT artists.fname, artists.lname FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year < 1900",
        "SELECT DISTINCT a.fname, a.lname FROM artists AS a INNER JOIN sculptures AS s ON a.artistid = s.sculptorid WHERE s.year < 1900",
        "SELECT DISTINCT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900)",
        "SELECT DISTINCT fname, lname FROM artists, sculptures WHERE artists.artistid = sculptures.sculptorid AND sculptures.year < 1900",
        "SELECT DISTINCT A.fname, A.lname FROM artists A, sculptures S WHERE A.artistid = S.sculptorid AND S.year < 1900",
        "SELECT DISTINCT first_names.fname, last_names.lname FROM artists first_names JOIN sculptures on first_names.artistid = sculptures.sculptorid JOIN artists last_names ON first_names.artistid = last_names.artistid WHERE sculptures.year < 1900",
        "SELECT fname, lname FROM (SELECT DISTINCT artistid, fname, lname FROM artists) AS unique_artists WHERE unique_artists.artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900)",
        "SELECT DISTINCT artists.fname, artists.lname FROM artists INNER JOIN sculptures ON sculptures.sculptorid = artists.artistid WHERE sculptures.year < 1900",
        "SELECT first_name.fname, last_name.lname FROM (SELECT artistid, fname FROM artists) AS first_name JOIN (SELECT artistid, lname FROM artists) AS last_name ON first_name.artistid = last_name.artistid JOIN sculptures ON sculptures.sculptorid = first_name.artistid WHERE sculptures.year < 1900",
        "SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year < 1900)"
      ]
    ]
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "nlq": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900",
        "SELECT DISTINCT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900)",
        "SELECT first_name, last_name FROM (SELECT a.fname AS first_name, a.lname AS last_name, s.year FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid) WHERE year < 1900",
        "SELECT a.fname AS first_name, a.lname AS last_name FROM artists AS a INNER JOIN sculptures AS s ON a.artistid = s.sculptorid WHERE s.year < 1900",
        "SELECT DISTINCT a.fname, a.lname FROM artists a, sculptures s WHERE a.artistid = s.sculptorid AND s.year < 1900",
        "SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptorid = artistid AND year < 1900)",
        "SELECT fname, lname FROM artists a WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900 GROUP BY sculptorid)",
        "SELECT ar.fname, ar.lname FROM artists ar JOIN sculptures sc ON ar.artistid = sc.sculptorid WHERE sc.year < 1900",
        "SELECT DISTINCT first_name, last_name FROM (SELECT a.fname as first_name, a.lname as last_name FROM artists a INNER JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year < 1900)",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year < 1900 ORDER BY year)"
      ]
    ]
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "nlq": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.birthyear FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year > 1920",
        "SELECT DISTINCT artists.birthyear FROM artists INNER JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year > 1920",
        "SELECT DISTINCT b.birthyear FROM artists b, sculptures c WHERE b.artistid = c.sculptorid AND c.year > 1920",
        "SELECT DISTINCT birthyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year > 1920)",
        "SELECT DISTINCT birthyear FROM artists AS art INNER JOIN sculptures AS sculp ON art.artistid = sculp.sculptorid WHERE sculp.year > 1920",
        "SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920) GROUP BY birthyear",
        "SELECT DISTINCT a.birthyear FROM artists a WHERE a.artistid IN (SELECT sculptorid FROM sculptures WHERE year > 1920)",
        "SELECT DISTINCT a.birthyear FROM artists a WHERE EXISTS (SELECT * FROM sculptures s WHERE s.sculptorid = a.artistid AND s.year > 1920)",
        "SELECT DISTINCT artists.birthyear FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year > 1920",
        "SELECT artists.birthyear FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year > 1920 GROUP BY artists.birthyear"
      ]
    ]
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "nlq": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.birthyear FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year > 1920",
        "SELECT DISTINCT artists.birthyear FROM artists INNER JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.year > 1920",
        "SELECT DISTINCT birthyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE year > 1920)",
        "SELECT DISTINCT b.birthyear FROM artists b WHERE EXISTS (SELECT 1 FROM sculptures c WHERE c.sculptorid = b.artistid AND c.year > 1920)",
        "SELECT DISTINCT birthyear FROM artists a, sculptures s WHERE a.artistid = s.sculptorid AND s.year > 1920",
        "SELECT DISTINCT a.birthyear FROM artists a WHERE a.artistid IN (SELECT s.sculptorid FROM sculptures s WHERE s.year > 1920)",
        "SELECT DISTINCT a.birthyear FROM artists a LEFT JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year > 1920",
        "SELECT DISTINCT birthyear FROM artists WHERE EXISTS (SELECT * FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND year > 1920)",
        "SELECT DISTINCT birthyear FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.year > 1920"
      ]
    ]
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "nlq": "What are the first and last names of the artist who lived the longest?",
    "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT fname, lname FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1",
        "SELECT a.fname, a.lname FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(b.deathyear - b.birthyear) FROM artists b)",
        "SELECT fname, lname FROM artists WHERE deathyear - birthyear = (SELECT MAX(deathyear - birthyear) FROM artists) LIMIT 1",
        "SELECT FirstName AS fname, LastName AS lname FROM (SELECT fname AS FirstName, lname AS LastName, (deathyear - birthyear) AS AgeDifference FROM artists) ORDER BY AgeDifference DESC LIMIT 1",
        "SELECT artists.fname, artists.lname FROM (SELECT artistid, MAX(deathyear - birthyear) AS MaxAge FROM artists GROUP BY artistid ORDER BY MaxAge DESC LIMIT 1) LongestLived JOIN artists ON LongestLived.artistid = artists.artistid",
        "SELECT fname, lname FROM (SELECT fname, lname, ROW_NUMBER() OVER (ORDER BY deathyear - birthyear DESC) AS rn FROM artists) WHERE rn = 1",
        "SELECT fname, lname FROM artists WHERE (deathyear - birthyear) IN (SELECT MAX(deathyear - birthyear) FROM artists) LIMIT 1",
        "SELECT a.fname, a.lname FROM artists a JOIN (SELECT artistid FROM artists GROUP BY artistid HAVING (deathyear - birthyear) = MAX(deathyear - birthyear)) b ON a.artistid = b.artistid"
      ]
    ]
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "nlq": "Give the full name of the artist who lived the longest.",
    "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT artists.fname || ' ' || artists.lname AS FullName FROM artists ORDER BY (artists.deathyear - artists.birthyear) DESC LIMIT 1",
        "SELECT (artists.fname || ' ' || artists.lname) AS FullName FROM artists WHERE (artists.deathyear - artists.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)",
        "SELECT a.fname || ' ' || a.lname AS FullName FROM artists AS a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(artists.deathyear - artists.birthyear) FROM artists)",
        "SELECT a.fname || ' ' || a.lname AS FullName FROM artists a WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)",
        "SELECT fname || ' ' || lname AS FullName FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists)",
        "SELECT a.fname || ' ' || a.lname FROM artists a ORDER BY (a.deathyear - a.birthyear) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "nlq": "What is the age of the artist who had the shortest life?",
    "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MIN(deathyear - birthyear) AS ShortestLife FROM artists",
        "SELECT MIN(A.deathyear - A.birthyear) FROM artists A",
        "SELECT deathyear - birthyear AS Age FROM artists ORDER BY Age LIMIT 1",
        "SELECT * FROM (SELECT deathyear - birthyear AS Age FROM artists) ORDER BY Age ASC LIMIT 1",
        "SELECT BirthYearDifference FROM (SELECT deathyear - birthyear AS BirthYearDifference FROM artists) ORDER BY BirthYearDifference ASC LIMIT 1",
        "SELECT MIN(Age) FROM (SELECT (deathyear - birthyear) AS Age FROM artists)",
        "SELECT (deathyear - birthyear) AS ShortestLifeSpan FROM artists ORDER BY ShortestLifeSpan ASC LIMIT 1",
        "WITH Lifespans AS (SELECT deathyear - birthyear AS lifespan FROM artists) SELECT MIN(lifespan) FROM Lifespans",
        "SELECT lifespan FROM (SELECT (deathyear - birthyear) AS lifespan FROM artists) WHERE lifespan = (SELECT MIN(deathyear - birthyear) FROM artists)",
        "WITH ArtistLifespan AS (SELECT (deathyear - birthyear) AS LifeLength FROM artists) SELECT MIN(LifeLength) FROM ArtistLifespan"
      ]
    ]
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "nlq": "How old is the artist who lived the shortest life?",
    "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
    "infer_predictions": [
      [
        "SELECT MIN(deathyear - birthyear) AS ShortestLifespan FROM artists WHERE deathyear IS NOT NULL",
        "SELECT MIN(a.deathyear - a.birthyear) AS Age FROM artists a WHERE a.deathyear IS NOT NULL",
        "SELECT MIN(ArtistAge) FROM (SELECT (deathyear - birthyear) AS ArtistAge FROM artists WHERE deathyear IS NOT NULL)",
        "SELECT * FROM (SELECT MIN(deathyear - birthyear) FROM artists WHERE deathyear IS NOT NULL) AS ShortestLife",
        "SELECT MIN(Sub.Age) FROM (SELECT (a.deathyear - a.birthyear) AS Age FROM artists a WHERE a.deathyear IS NOT NULL) AS Sub",
        "WITH Lifespans AS (SELECT birthyear, deathyear, (deathyear - birthyear) AS lifespan FROM artists WHERE deathyear IS NOT NULL) SELECT MIN(lifespan) FROM Lifespans",
        "SELECT MIN(deathyear - birthyear) FROM artists WHERE NOT deathyear IS NULL",
        "SELECT MIN(lifespan) FROM (SELECT deathyear - birthyear AS lifespan FROM artists WHERE deathyear <> 'NULL')",
        "SELECT MIN(AGE) FROM (SELECT (deathyear - birthyear) AS AGE FROM artists WHERE deathyear IS NOT NULL)",
        "SELECT min_age FROM (SELECT MIN((artists.deathyear - artists.birthyear)) AS min_age FROM artists WHERE deathyear IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "nlq": "What are the first name and age of the artist who had the longest life?",
    "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT fname, deathyear - birthyear AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists);",
        "SELECT fname, (deathyear - birthyear) AS age FROM artists ORDER BY age DESC LIMIT 1;",
        "SELECT A.fname, A.deathyear - A.birthyear AS age FROM artists A WHERE A.deathyear - A.birthyear = (SELECT MAX(B.deathyear - B.birthyear) FROM artists B);",
        "SELECT name.fname, calc.age FROM artists AS name, (SELECT artistid, MAX(deathyear - birthyear) AS age FROM artists GROUP BY artistid) calc WHERE name.artistid = calc.artistid;",
        "SELECT top_artist.fname, (top_artist.deathyear - top_artist.birthyear) AS age FROM artists top_artist WHERE (top_artist.deathyear - top_artist.birthyear) = (SELECT MAX(long_life.deathyear - long_life.birthyear) FROM artists long_life);",
        "SELECT fname, (deathyear - birthyear) AS age FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) LIMIT 1;",
        "SELECT artist_details.fname, (artist_details.deathyear - artist_details.birthyear) AS age FROM artists artist_details WHERE (artist_details.deathyear - artist_details.birthyear) = (SELECT max_lifetime FROM (SELECT MAX(deathyear - birthyear) AS max_lifetime FROM artists));",
        "WITH Longevity AS (SELECT artistid, deathyear - birthyear AS lifespan FROM artists) SELECT fname, lifespan AS age FROM artists JOIN Longevity ON artists.artistid = Longevity.artistid WHERE lifespan = (SELECT MAX(lifespan) FROM Longevity);",
        "SELECT fname, MAX(deathyear - birthyear) AS age FROM artists GROUP BY fname, birthyear, deathyear HAVING (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists);"
      ]
    ]
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "nlq": "What is the first name and age of the artist who lived the longest?",
    "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT fname, (deathyear - birthyear) AS age FROM artists ORDER BY age DESC LIMIT 1",
        "SELECT A.fname, (A.deathyear - A.birthyear) AS age FROM artists A ORDER BY age DESC LIMIT 1",
        "SELECT fname AS first_name, (deathyear - birthyear) AS age FROM artists ORDER BY age DESC LIMIT 1",
        "SELECT fname, MAX(deathyear - birthyear) AS Maximum_Age FROM artists GROUP BY artistid ORDER BY Maximum_Age DESC LIMIT 1",
        "SELECT A.fname, (A.deathyear - A.birthyear) AS lifespan FROM artists A ORDER BY lifespan DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "nlq": "How many paintings are exhibited at gallery 240?",
    "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(paintingid) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(1) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(*) AS NumberOfPaintings FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COALESCE(SUM(1), 0) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COALESCE(COUNT(paintingid), 0) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(DISTINCT paintingid) FROM paintings WHERE location LIKE 'Gallery 240'",
        "SELECT COUNT(paintingid) FROM paintings WHERE location = 'Gallery 240' GROUP BY location"
      ]
    ]
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "nlq": "What is the total number of paintings exhibited in gallery 240?",
    "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(paintingid) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(*) AS total_paintings FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(1) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT COUNT(paintingid) AS total FROM paintings WHERE location = 'Gallery 240'",
        "SELECT * FROM (SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT SUM(1) FROM paintings WHERE location = 'Gallery 240'",
        "SELECT (SELECT COUNT(*) FROM paintings WHERE location = 'Gallery 240') AS total",
        "SELECT (SELECT COUNT(paintingid) FROM paintings WHERE location = 'Gallery 240')"
      ]
    ]
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "nlq": "How many paintings did the artist with the longest life make ?",
    "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1)",
        "SELECT COUNT(paintingid) FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY paintings.painterid ORDER BY (artists.deathyear - artists.birthyear) DESC LIMIT 1",
        "SELECT (SELECT COUNT(*) FROM paintings WHERE painterid = A.artistid) AS NumberOfPaintings FROM artists A ORDER BY (A.deathyear - A.birthyear) DESC LIMIT 1",
        "SELECT COUNT(paintingid) AS TotalPaintings FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists))",
        "SELECT MAX(TotalCount) FROM (SELECT COUNT(*) AS TotalCount FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artistid) AS SubTotal",
        "SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) LIMIT 1)",
        "SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists A ORDER BY A.deathyear - A.birthyear DESC LIMIT 1)",
        "SELECT TotalPaintings FROM (SELECT COUNT(*) AS TotalPaintings FROM paintings GROUP BY painterid HAVING painterid = (SELECT X.artistid FROM (SELECT artistid FROM artists ORDER BY deathyear - birthyear DESC LIMIT 1) AS X))",
        "SELECT COUNT(paintings.paintingid) FROM paintings JOIN (SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1) AS LongestLived ON paintings.painterid = LongestLived.artistid",
        "SELECT COUNT(paintingid) FROM paintings WHERE painterid = (SELECT arrows.artistid FROM (SELECT artistid, deathyear - birthyear AS lifespan FROM artists ORDER BY lifespan DESC LIMIT 1) AS arrows)"
      ]
    ]
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "nlq": "What is the painting count of the artist with the longest life ?",
    "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1)",
        "SELECT COUNT(paintingid) FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY (artists.deathyear - artists.birthyear) DESC LIMIT 1",
        "SELECT COUNT(*) FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists))",
        "SELECT (SELECT COUNT(*) FROM paintings WHERE painterid = artists.artistid) AS painting_count FROM artists ORDER BY (deathyear - birthyear) DESC LIMIT 1",
        "SELECT COUNT(*) FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE (a.deathyear - a.birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists) GROUP BY a.artistid",
        "SELECT COUNT(*) FROM paintings, artists WHERE paintings.painterid = artists.artistid GROUP BY artists.artistid ORDER BY (artists.deathyear - artists.birthyear) DESC LIMIT 1",
        "SELECT COUNT(paintingid) FROM paintings WHERE EXISTS (SELECT 1 FROM artists WHERE artistid = paintings.painterid AND (deathyear - birthyear) = (SELECT MAX(deathyear - birthyear) FROM artists))",
        "SELECT COUNT(*) FROM paintings WHERE painterid = (SELECT artistid FROM artists GROUP BY artistid ORDER BY MAX(deathyear) - MIN(birthyear) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "nlq": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
    "infer_predictions": [
      [
        "SELECT A.fname, A.lname, P.title, P.year FROM paintings P JOIN artists A ON P.painterid = A.artistid WHERE A.fname = 'Mary'",
        "SELECT artists.fname, artists.lname, paintings.title, paintings.year FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE artists.fname = 'Mary'",
        "SELECT A.fname, A.lname, P.title, P.year FROM artists A INNER JOIN paintings P ON A.artistid = P.painterid WHERE A.fname = 'Mary'",
        "SELECT firstnames.fname, lastnames.lname, titles.title, creation_years.year FROM artists AS firstnames INNER JOIN paintings AS titles ON firstnames.artistid = titles.painterid CROSS JOIN artists AS lastnames INNER JOIN paintings AS creation_years ON lastnames.artistid = creation_years.painterid WHERE firstnames.fname = 'Mary'",
        "SELECT title, year FROM artists JOIN paintings ON artistid = painterid WHERE fname = 'Mary'",
        "SELECT A.fname, A.lname, P.title, P.year FROM artists A, paintings P WHERE A.artistid = P.painterid AND A.fname = 'Mary'",
        "SELECT title, year FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE fname = 'Mary')",
        "SELECT DISTINCT artists.fname, artists.lname, paintings.title, paintings.year FROM paintings, artists WHERE paintings.painterid = artists.artistid AND artists.fname = 'Mary'",
        "SELECT * FROM (SELECT fname, lname, title, year FROM artists JOIN paintings ON artistid = painterid WHERE fname = 'Mary')"
      ]
    ]
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "nlq": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
    "infer_predictions": [
      [
        "SELECT p.title, p.year FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.fname = 'Mary'",
        "SELECT title, year FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE fname = 'Mary')",
        "SELECT paintings.title, paintings.year FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Mary'",
        "SELECT title, year FROM paintings AS p WHERE EXISTS (SELECT 1 FROM artists AS a WHERE p.painterid = a.artistid AND a.fname = 'Mary')",
        "SELECT p.title, p.year FROM paintings p, artists a WHERE p.painterid = a.artistid AND a.fname = 'Mary'",
        "SELECT title, year FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE fname = 'Mary')",
        "SELECT paintings.title, paintings.year FROM paintings JOIN artists ON paintings.painterid = artists.artistid AND artists.fname = 'Mary'",
        "SELECT title AS PaintingTitle, year AS PaintingYear FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE fname = 'Mary')",
        "SELECT T1.title, T1.year FROM paintings T1 JOIN artists T2 ON T1.painterid = T2.artistid WHERE T2.fname = 'Mary'",
        "SELECT title, year FROM paintings p WHERE painterid IN (SELECT artistid FROM artists a WHERE a.fname = 'Mary')"
      ]
    ]
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "nlq": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
    "infer_predictions": [
      [
        "SELECT p.width_mm FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.birthyear < 1850",
        "SELECT width_mm FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE birthyear < 1850)",
        "SELECT p.width_mm FROM paintings p, artists a WHERE p.painterid = a.artistid AND a.birthyear < 1850",
        "SELECT paintings.width_mm FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850",
        "SELECT paintings.width_mm FROM paintings INNER JOIN artists AS a ON paintings.painterid = a.artistid WHERE a.birthyear < 1850",
        "SELECT p.width_mm FROM paintings p INNER JOIN artists a ON a.artistid = p.painterid WHERE a.birthyear < 1850",
        "SELECT width_mm FROM paintings p WHERE EXISTS (SELECT 1 FROM artists a WHERE a.artistid = p.painterid AND a.birthyear < 1850)",
        "SELECT p.width_mm FROM paintings AS p JOIN artists AS a ON p.painterid = a.artistid WHERE a.birthyear < 1850",
        "SELECT width_mm FROM (SELECT * FROM paintings) p WHERE EXISTS (SELECT artistid FROM artists a WHERE a.artistid = p.painterid AND a.birthyear < 1850)"
      ]
    ]
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "nlq": "How wide were the paintings by the artist who was born prior to 1850?",
    "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
    "infer_predictions": [
      [
        "SELECT width_mm FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE birthyear < 1850)",
        "SELECT p.width_mm FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.birthyear < 1850",
        "SELECT width_mm FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850",
        "SELECT paintings.width_mm FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.birthyear < 1850",
        "SELECT width FROM (SELECT width_mm AS width, painterid FROM paintings) p1 JOIN (SELECT artistid FROM artists WHERE birthyear < 1850) a1 ON p1.painterid = a1.artistid",
        "SELECT p.width_mm FROM paintings p, artists a WHERE p.painterid = a.artistid AND a.birthyear < 1850",
        "SELECT p1.width_mm FROM paintings p1 WHERE EXISTS (SELECT 1 FROM artists a1 WHERE a1.artistid = p1.painterid AND a1.birthyear < 1850)",
        "SELECT p2.width_mm FROM paintings p2 LEFT JOIN artists a2 ON p2.painterid = a2.artistid WHERE a2.birthyear < 1850"
      ]
    ]
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "nlq": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
    "infer_predictions": [
      [
        "SELECT p.location, p.medium FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.fname = 'Pablo'",
        "SELECT location, medium FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE fname = 'Pablo')",
        "SELECT paintings.location, paintings.medium FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo'",
        "SELECT P.location, P.medium FROM paintings P, artists A WHERE P.painterid = A.artistid AND A.fname = 'Pablo'",
        "SELECT l.location, l.medium FROM (SELECT location, medium, painterid FROM paintings) AS l JOIN artists AS a ON l.painterid = a.artistid WHERE a.fname = 'Pablo'",
        "SELECT p.location, p.medium FROM paintings p WHERE EXISTS (SELECT 1 FROM artists a WHERE a.artistid = p.painterid AND a.fname = 'Pablo')",
        "SELECT location, medium FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE fname = 'Pablo')",
        "SELECT location, medium FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo'",
        "SELECT paintings.location AS l, paintings.medium AS m FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo'"
      ]
    ]
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "nlq": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
    "infer_predictions": [
      [
        "SELECT location, medium FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE fname = 'Pablo')",
        "SELECT DISTINCT p.location, p.medium FROM paintings p INNER JOIN artists a ON p.painterid = a.artistid WHERE a.fname = 'Pablo'",
        "SELECT location AS PaintingLocation, medium AS PaintingMedium FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE fname = 'Pablo')",
        "SELECT paintings.location, paintings.medium FROM paintings JOIN artists ON paintings.painterid = artists.artistid WHERE artists.fname = 'Pablo'",
        "SELECT p.location, p.medium FROM artists a, paintings p WHERE a.fname = 'Pablo' AND p.painterid = a.artistid",
        "SELECT location, medium FROM paintings WHERE EXISTS (SELECT 1 FROM artists WHERE artists.artistid = paintings.painterid AND artists.fname = 'Pablo')",
        "SELECT p.location, p.medium FROM paintings p JOIN artists a ON a.artistid = p.painterid WHERE a.fname = 'Pablo'",
        "SELECT location, medium FROM paintings p WHERE p.painterid IN (SELECT a.artistid FROM artists a WHERE a.fname = 'Pablo')",
        "SELECT a.fname, p.location, p.medium FROM paintings p LEFT OUTER JOIN artists a ON p.painterid = a.artistid WHERE a.fname = 'Pablo'",
        "SELECT location AS loc, medium AS med FROM paintings WHERE painterid = (SELECT artistid FROM artists WHERE fname = 'Pablo') AND EXISTS (SELECT 1 FROM artists WHERE fname = 'Pablo')"
      ]
    ]
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "nlq": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)",
        "SELECT DISTINCT a.fname, a.lname FROM artists a JOIN paintings p ON a.artistid = p.painterid JOIN sculptures s ON a.artistid = s.sculptorid",
        "SELECT a.fname, a.lname FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid INNER JOIN sculptures s ON a.artistid = s.sculptorid GROUP BY a.artistid",
        "SELECT a.fname, a.lname FROM artists a, paintings p, sculptures s WHERE a.artistid = p.painterid AND a.artistid = s.sculptorid GROUP BY a.artistid",
        "SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT painterid FROM paintings) AND a.artistid IN (SELECT sculptorid FROM sculptures)",
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT * FROM paintings WHERE painterid = a.artistid) AND EXISTS (SELECT * FROM sculptures WHERE sculptorid = a.artistid)",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) AND artistid IN (SELECT sculptorid FROM sculptures)",
        "SELECT first_table.fname, first_table.lname FROM (SELECT a.fname, a.lname, a.artistid FROM artists a, paintings p WHERE a.artistid = p.painterid) AS first_table INNER JOIN (SELECT a.artistid FROM artists a, sculptures s WHERE a.artistid = s.sculptorid) AS second_table ON first_table.artistid = second_table.artistid",
        "SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p INTERSECT SELECT s.sculptorid FROM sculptures s)"
      ]
    ]
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "nlq": "Give the full names of artists who have created paintings and sculptures.",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
    "infer_predictions": [
      [
        "SELECT DISTINCT ar.fname || ' ' || ar.lname AS fullname FROM artists ar JOIN paintings p ON ar.artistid = p.painterid JOIN sculptures s ON ar.artistid = s.sculptorid",
        "SELECT DISTINCT artists.fname || ' ' || artists.lname FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid INNER JOIN sculptures ON artists.artistid = sculptures.sculptorid",
        "SELECT DISTINCT a.fname || ' ' || a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings WHERE painterid = a.artistid) AND EXISTS (SELECT 1 FROM sculptures WHERE sculptorid = a.artistid)",
        "SELECT DISTINCT artists.lname || ', ' || artists.fname AS full_name FROM artists JOIN paintings ON artists.artistid = paintings.painterid JOIN sculptures ON artists.artistid = sculptures.sculptorid",
        "SELECT DISTINCT a.fname || ' ' || a.lname AS Name FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)",
        "SELECT DISTINCT artists.fname || ' ' || artists.lname AS ArtistName FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid JOIN sculptures ON sculptures.sculptorid = artists.artistid",
        "SELECT DISTINCT a.fname || ' ' || a.lname AS FullName FROM artists a WHERE a.artistid IN (SELECT painterid FROM paintings) AND a.artistid IN (SELECT sculptorid FROM sculptures)",
        "SELECT DISTINCT ar.fname || ' ' || ar.lname FROM artists ar JOIN (SELECT painterid FROM paintings INTERSECT SELECT sculptorid FROM sculptures) jointIDs ON ar.artistid = jointIDs.painterid"
      ]
    ]
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "nlq": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.fname, a.lname FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' INTERSECT SELECT a.fname, a.lname FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'lithograph'",
        "SELECT a.fname, a.lname FROM artists a WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')",
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid AND p.medium = 'oil') AND EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid AND p.medium = 'lithograph')",
        "SELECT a.fname, a.lname FROM artists a JOIN (SELECT painterid FROM paintings WHERE medium = 'oil') oil ON a.artistid = oil.painterid JOIN (SELECT painterid FROM paintings WHERE medium = 'lithograph') lith ON a.artistid = lith.painterid",
        "SELECT fname, lname FROM (SELECT a.fname AS fname, a.lname AS lname, p.medium FROM artists a JOIN paintings p ON a.artistid = p.painterid) WHERE medium = 'oil' INTERSECT SELECT fname, lname FROM (SELECT a.fname AS fname, a.lname AS lname, p.medium FROM artists a JOIN paintings p ON a.artistid = p.painterid) WHERE medium = 'lithograph'",
        "SELECT a.fname, a.lname FROM artists a, paintings p WHERE a.artistid = p.painterid GROUP BY a.artistid HAVING SUM(CASE WHEN p.medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN p.medium = 'lithograph' THEN 1 ELSE 0 END) > 0",
        "WITH oil_painters AS (SELECT painterid FROM paintings WHERE medium = 'oil'), litho_painters AS (SELECT painterid FROM paintings WHERE medium = 'lithograph') SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT painterid FROM oil_painters) AND a.artistid IN (SELECT painterid FROM litho_painters)",
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT DISTINCT painterid FROM paintings WHERE painterid = a.artistid AND medium = 'oil') AND EXISTS (SELECT DISTINCT painterid FROM paintings WHERE painterid = a.artistid AND medium = 'lithograph')",
        "SELECT a.fname, a.lname FROM artists a WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(DISTINCT medium) > 1 AND SUM(CASE WHEN medium = 'oil' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN medium = 'lithograph' THEN 1 ELSE 0 END) > 0)",
        "SELECT a.fname, a.lname FROM artists a JOIN paintings p1 ON a.artistid = p1.painterid AND p1.medium = 'oil' JOIN paintings p2 ON a.artistid = p2.painterid AND p2.medium = 'lithograph'"
      ]
    ]
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "nlq": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' INTERSECT SELECT a.fname, a.lname FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'lithograph'",
        "SELECT DISTINCT a.fname, a.lname FROM artists a JOIN paintings p1 ON a.artistid = p1.painterid JOIN paintings p2 ON a.artistid = p2.painterid WHERE p1.medium = 'oil' AND p2.medium = 'lithograph'",
        "SELECT artists.fname, artists.lname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium IN ('oil', 'lithograph') GROUP BY artists.fname, artists.lname HAVING COUNT(DISTINCT paintings.medium) = 2",
        "SELECT DISTINCT A.fname, A.lname FROM artists A, paintings P1, paintings P2 WHERE A.artistid = P1.painterid AND P1.medium = 'oil' AND A.artistid = P2.painterid AND P2.medium = 'lithograph'",
        "WITH OilPainters AS (SELECT artistid FROM paintings WHERE medium = 'oil'), LithoPainters AS (SELECT artistid FROM paintings WHERE medium = 'lithograph') SELECT artists.fname, artists.lname FROM artists WHERE artistid IN (SELECT artistid FROM OilPainters) AND artistid IN (SELECT artistid FROM LithoPainters)",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil') AND artistid IN (SELECT painterid FROM paintings WHERE medium = 'lithograph')",
        "SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE painterid = artists.artistid AND medium = 'oil') AND EXISTS (SELECT 1 FROM paintings WHERE painterid = artists.artistid AND medium = 'lithograph')",
        "SELECT fname, lname FROM artists a WHERE (SELECT COUNT(DISTINCT medium) FROM paintings WHERE painterid = a.artistid AND medium IN ('oil', 'lithograph')) = 2"
      ]
    ]
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "nlq": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
    "infer_predictions": [
      [
        "SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884 AND mediumon = 'canvas')",
        "SELECT a.birthyear FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.year = 1884 AND p.mediumon = 'canvas'",
        "SELECT artists.birthyear FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.year = 1884 AND paintings.mediumon = 'canvas'",
        "SELECT birthyear FROM artists WHERE artistid = (SELECT painterid FROM paintings WHERE year = 1884 AND mediumon = 'canvas' LIMIT 1)",
        "SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE painterid = artists.artistid AND year = 1884 AND mediumon = 'canvas')",
        "SELECT ar.birthyear FROM artists ar, paintings pa WHERE ar.artistid = pa.painterid AND pa.year = 1884 AND pa.mediumon = 'canvas'",
        "SELECT a.birthyear FROM (SELECT * FROM artists) a JOIN (SELECT * FROM paintings WHERE year = 1884 AND mediumon = 'canvas') p ON a.artistid = p.painterid",
        "SELECT MAX(artists.birthyear) FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.year = 1884 AND paintings.mediumon = 'canvas'",
        "SELECT DISTINCT ar.birthyear FROM artists ar LEFT JOIN paintings pa ON ar.artistid = pa.painterid WHERE pa.year = 1884 AND pa.mediumon = 'canvas'",
        "SELECT a.birthyear FROM artists a WHERE EXISTS (SELECT NULL FROM paintings p WHERE p.painterid = a.artistid AND p.year = 1884 AND p.mediumon = 'canvas')"
      ]
    ]
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "nlq": "In what year was the artist who created a painting in 1884 born?",
    "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
    "infer_predictions": [
      [
        "SELECT birthyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE year = 1884)",
        "SELECT a.birthyear FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.year = 1884",
        "SELECT birthyear FROM artists WHERE artistid = (SELECT painterid FROM paintings WHERE year = 1884 LIMIT 1)",
        "SELECT birthyear FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.year = 1884",
        "SELECT a.birthyear FROM artists a, paintings p WHERE a.artistid = p.painterid AND p.year = 1884",
        "SELECT birthyear FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE painterid = artists.artistid AND year = 1884)",
        "SELECT a.birthyear FROM artists a WHERE a.artistid IN (SELECT DISTINCT painterid FROM paintings WHERE year = 1884)",
        "SELECT artist.birthyear FROM artists AS artist JOIN paintings AS paint ON artist.artistid = paint.painterid WHERE paint.year = 1884",
        "SELECT birthyear FROM artists a WHERE a.artistid = (SELECT p.painterid FROM paintings p WHERE p.year = 1884 ORDER BY p.paintingid DESC LIMIT 1)",
        "SELECT a.birthyear FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p WHERE p.year = 1884 GROUP BY p.painterid)"
      ]
    ]
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "nlq": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT artists.fname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241'",
        "SELECT DISTINCT a.fname FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT DISTINCT fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT DISTINCT ar.fname FROM artists ar, paintings pa WHERE ar.artistid = pa.painterid AND pa.medium = 'oil' AND pa.location = 'Gallery 241'",
        "SELECT DISTINCT a.fname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid AND p.medium = 'oil' AND p.location = 'Gallery 241')",
        "SELECT DISTINCT fname FROM artists WHERE EXISTS (SELECT NULL FROM paintings WHERE painterid = artistid AND medium = 'oil' AND location = 'Gallery 241')"
      ]
    ]
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "nlq": "What are first names of the artists with oil paintings in gallery 241?",
    "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "infer_predictions": [
      [
        "SELECT a.fname FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT artists.fname FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241'",
        "SELECT fname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT a.fname FROM artists a, paintings p WHERE a.artistid = p.painterid AND p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT fname FROM artists WHERE artistid IN (SELECT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 241')",
        "SELECT DISTINCT a.fname FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT DISTINCT artists.fname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241'",
        "SELECT artists.fname FROM artists, paintings WHERE artists.artistid = paintings.painterid AND paintings.medium = 'oil' AND paintings.location = 'Gallery 241'",
        "SELECT DISTINCT fname FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE paintings.painterid = artists.artistid AND paintings.medium = 'oil' AND paintings.location = 'Gallery 241')",
        "SELECT a.fname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid AND p.medium = 'oil' AND p.location = 'Gallery 241')"
      ]
    ]
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "nlq": "What are the numbers of works for different medium type?",
    "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
    "infer_predictions": [
      [
        "SELECT medium, COUNT(*) AS NumWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT medium, COUNT(medium) AS NumWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) AS Combined GROUP BY medium",
        "SELECT MEDIUM, COUNT(*) TOTAL FROM (SELECT MEDIUM FROM PAINTINGS UNION ALL SELECT MEDIUM FROM SCULPTURES) GROUP BY MEDIUM",
        "SELECT Combined.medium, COUNT(Combined.medium) as NumWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) Combined GROUP BY Combined.medium",
        "SELECT medium, COUNT(medium) FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT COUNT(medium) as WorkCounts, medium FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT medium, COUNT(medium) WorkCount FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) med GROUP BY medium",
        "SELECT p.medium, COUNT(p.medium) NumberOfWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) p GROUP BY p.medium ORDER BY p.medium",
        "SELECT medium, COUNT(*) TotalWorks FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium ORDER BY medium",
        "SELECT COUNT(medium) as Total, medium FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium ORDER BY medium ASC"
      ]
    ]
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "nlq": "How many works are there in each medium?",
    "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
    "infer_predictions": [
      [
        "SELECT medium, COUNT(*) AS total_works FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT medium, COUNT(medium) AS num_works FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT medium, COUNT(medium) AS count FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY medium",
        "SELECT medium, COUNT(*) FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) AS combined GROUP BY medium",
        "SELECT p_s.medium, COUNT(p_s.medium) FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) p_s GROUP BY p_s.medium",
        "SELECT combined.medium, COUNT(combined.medium) AS work_count FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) combined GROUP BY combined.medium",
        "SELECT common.medium, COUNT(common.medium) FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) AS common GROUP BY common.medium",
        "SELECT m, COUNT(*) AS total FROM (SELECT medium AS m FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY m",
        "SELECT art.medium, COUNT(art.medium) AS num_works FROM (SELECT medium FROM paintings UNION ALL SELECT medium FROM sculptures) art GROUP BY art.medium",
        "SELECT k, COUNT(*) FROM (SELECT medium as k FROM paintings UNION ALL SELECT medium FROM sculptures) GROUP BY k"
      ]
    ]
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "nlq": "What are the average height of paintings for different medium types?",
    "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
    "infer_predictions": [
      [
        "SELECT medium, AVG(height_mm) FROM paintings GROUP BY medium",
        "SELECT p.medium, AVG(p.height_mm) AS average_height FROM paintings p GROUP BY p.medium",
        "SELECT AVG(height_mm) AS avg_height, medium FROM paintings GROUP BY medium",
        "SELECT medium, AVG(height_mm) AS avg_height FROM paintings GROUP BY paintings.medium",
        "SELECT medium AS painting_medium, AVG(height_mm) AS average_height FROM paintings GROUP BY painting_medium",
        "SELECT AVG(p.height_mm) AS AveHeight, p.medium AS Type FROM paintings p GROUP BY p.medium",
        "SELECT medium AS Type, AVG(height_mm) avg_height FROM paintings GROUP BY Type",
        "SELECT p.medium, AVG(p.height_mm) FROM paintings p GROUP BY p.medium"
      ]
    ]
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "nlq": "What is the average height of paintings for different medium types?",
    "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
    "infer_predictions": [
      [
        "SELECT medium, AVG(height_mm) FROM paintings GROUP BY medium",
        "SELECT p.medium, AVG(p.height_mm) AS average_height FROM paintings p GROUP BY p.medium",
        "SELECT medium, AVG(height_mm) AS avg_height FROM paintings GROUP BY medium",
        "SELECT p.medium, AVG(p.height_mm) FROM paintings p GROUP BY p.medium",
        "SELECT medium, AVG(height_mm) FROM paintings GROUP BY medium ORDER BY medium",
        "SELECT medium, average_height FROM (SELECT medium, AVG(height_mm) AS average_height FROM paintings GROUP BY medium)",
        "SELECT p.medium AS Medium, AVG(p.height_mm) AS Average_Height FROM paintings p GROUP BY p.medium",
        "SELECT medium as Type, AVG(height_mm) as AverageHeight FROM paintings GROUP BY medium",
        "SELECT medium, AVG(height_mm) AS Average_Height FROM paintings GROUP BY medium ORDER BY AVG(height_mm) DESC"
      ]
    ]
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "nlq": "What are the numbers of paintings created before 1900 in different places?",
    "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
    "infer_predictions": [
      [
        "SELECT location, COUNT(*) FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT COUNT(paintingid), location FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT location, COUNT(paintingid) AS total FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location, COUNT(*) AS total_count FROM paintings p WHERE p.year < 1900 GROUP BY p.location",
        "SELECT location, COUNT(1) FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location AS place, COUNT(p.paintingid) FROM paintings p WHERE p.year < 1900 GROUP BY p.location",
        "SELECT location, COUNT(*) AS NumberOfPaintings FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location, COUNT(p.paintingid) as TotalNumberOfPaintings FROM paintings p WHERE p.year < 1900 GROUP BY p.location",
        "SELECT location AS Location, COUNT(*) AS PaintingCount FROM paintings WHERE year < 1900 GROUP BY location"
      ]
    ]
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "nlq": "How many paintings were created before 1900 in different locations?",
    "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
    "infer_predictions": [
      [
        "SELECT location, COUNT(*) FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location, COUNT(p.paintingid) FROM paintings p WHERE p.year < 1900 GROUP BY p.location",
        "SELECT location, COUNT(paintingid) AS CountPaintings FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT location, COUNT(*) AS total FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location, COUNT(*) FROM paintings p WHERE p.year < 1900 GROUP BY p.location",
        "SELECT location as PaintingLocation, COUNT(paintingid) as NumberOfPaintings FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT paintings.location, COUNT(paintings.paintingid) FROM paintings WHERE paintings.year < 1900 GROUP BY paintings.location",
        "SELECT location, COUNT(*) as TotalPaintings FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT location, COUNT(1) FROM paintings WHERE year < 1900 GROUP BY location",
        "SELECT p.location as Location, COUNT(p.paintingid) as PaintCount FROM paintings p WHERE p.year < 1900 GROUP BY p.location"
      ]
    ]
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "nlq": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE year > 1910 AND medium = 'oil'",
        "SELECT p.title FROM paintings p WHERE p.year > 1910 AND p.medium = 'oil'",
        "SELECT title FROM paintings WHERE year > 1910 AND medium LIKE 'oil'",
        "SELECT p.title FROM paintings p WHERE p.year > 1910 AND p.medium LIKE 'oil'",
        "SELECT p.title FROM paintings p WHERE p.medium = 'oil' AND p.year > 1910",
        "SELECT title FROM paintings WHERE 'oil' = medium AND year > 1910",
        "SELECT title FROM paintings WHERE year > 1910 AND 'oil' = medium"
      ]
    ]
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "nlq": "Give the names of all oil paintings created after 1910.",
    "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE medium = 'oil' AND year > 1910",
        "SELECT title FROM paintings WHERE medium = 'oil' AND year > 1910 ORDER BY year",
        "SELECT title FROM paintings WHERE medium = 'oil' AND year BETWEEN 1911 AND (SELECT MAX(year) FROM paintings)",
        "SELECT title FROM paintings WHERE medium = 'oil' AND year > 1910 GROUP BY title",
        "SELECT p.title FROM paintings p WHERE p.medium LIKE 'oil' AND p.year > 1910",
        "SELECT title FROM paintings WHERE medium = 'oil' AND CAST(year AS INTEGER) > 1910",
        "SELECT t.title FROM (SELECT title, medium, year FROM paintings) t WHERE t.medium = 'oil' AND t.year > 1910",
        "SELECT p1.title FROM paintings p1 LEFT JOIN artists a1 ON p1.painterid = a1.artistid WHERE p1.medium = 'oil' AND p1.year > 1910"
      ]
    ]
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "nlq": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240'",
        "SELECT DISTINCT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240'",
        "SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterid",
        "SELECT painterid FROM paintings GROUP BY painterid HAVING medium = 'oil' AND location = 'Gallery 240'",
        "SELECT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240' GROUP BY p.painterid",
        "SELECT DISTINCT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240' ORDER BY painterid",
        "SELECT painterid FROM (SELECT DISTINCT painterid, medium, location FROM paintings) WHERE medium = 'oil' AND location = 'Gallery 240'"
      ]
    ]
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "nlq": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240'",
        "SELECT painterid FROM paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterid",
        "SELECT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240'",
        "SELECT DISTINCT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240'",
        "SELECT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240' GROUP BY p.painterid",
        "SELECT DISTINCT p.painterid FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 240' ORDER BY p.painterid",
        "SELECT painterid FROM (SELECT painterid, medium, location FROM paintings) WHERE medium = 'oil' AND location = 'Gallery 240'",
        "SELECT p.painterid FROM (SELECT painterid, medium, location FROM paintings) AS p WHERE p.medium = 'oil' AND p.location = 'Gallery 240'"
      ]
    ]
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "nlq": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.title FROM paintings p1 WHERE p1.height_mm > (SELECT p2.height_mm FROM paintings p2 WHERE p2.mediumon = 'canvas')",
        "SELECT DISTINCT title FROM paintings AS p WHERE EXISTS (SELECT 1 FROM paintings AS p2 WHERE p2.mediumon = 'canvas' AND p.height_mm > p2.height_mm)",
        "SELECT DISTINCT p.title FROM paintings p JOIN paintings c ON p.height_mm > c.height_mm WHERE c.mediumon = 'canvas'",
        "SELECT DISTINCT title FROM paintings p1 WHERE height_mm > (SELECT MAX(height_mm) FROM paintings p2 WHERE p2.mediumon = 'canvas')",
        "SELECT DISTINCT title FROM paintings p WHERE p.height_mm > (SELECT MIN(height_mm) FROM paintings p2 WHERE p2.mediumon = 'canvas')",
        "SELECT title FROM (SELECT DISTINCT title, height_mm FROM paintings) p WHERE p.height_mm > (SELECT MAX(height_mm) FROM paintings WHERE mediumon = 'canvas')",
        "SELECT DISTINCT p.title FROM paintings p WHERE p.height_mm > (SELECT AVG(height_mm) FROM paintings c WHERE c.mediumon = 'canvas')"
      ]
    ]
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "nlq": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.title FROM paintings p1 WHERE p1.height_mm > (SELECT MIN(p2.height_mm) FROM paintings p2 WHERE p2.medium = 'canvas')",
        "SELECT title FROM paintings p WHERE EXISTS (SELECT 1 FROM paintings sub WHERE sub.medium = 'canvas' AND p.height_mm > sub.height_mm)",
        "SELECT DISTINCT a.title FROM paintings a JOIN paintings b ON a.height_mm > b.height_mm WHERE b.medium = 'canvas'",
        "SELECT title FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE medium = 'canvas')",
        "SELECT DISTINCT P.title FROM paintings P WHERE P.height_mm > (SELECT height_mm FROM paintings WHERE medium = 'canvas' ORDER BY height_mm ASC LIMIT 1)",
        "SELECT p.title FROM paintings p WHERE p.height_mm > (SELECT MIN(p2.height_mm) FROM paintings p2 WHERE p2.medium = 'canvas') GROUP BY p.title",
        "SELECT DISTINCT P.title FROM paintings P WHERE EXISTS (SELECT NULL FROM paintings PC WHERE PC.medium = 'canvas' AND P.height_mm > PC.height_mm)",
        "SELECT DISTINCT Title FROM paintings Out WHERE Out.height_mm > (SELECT height_mm FROM paintings Sub WHERE Sub.medium = 'canvas' ORDER BY height_mm LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "nlq": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.paintingid FROM paintings p1 WHERE p1.year < (SELECT MIN(p2.year) FROM paintings p2 WHERE p2.location = 'Gallery 240')",
        "SELECT paintingid FROM paintings AS p WHERE EXISTS (SELECT 1 FROM paintings AS p2 WHERE p2.location = 'Gallery 240' AND p.year < p2.year)",
        "SELECT p.paintingid FROM paintings p JOIN paintings p2 ON p.year < p2.year WHERE p2.location = 'Gallery 240' GROUP BY p.paintingid",
        "SELECT DISTINCT p.paintingid FROM paintings p, paintings p2 WHERE p.year < p2.year AND p2.location = 'Gallery 240'",
        "SELECT DISTINCT p1.paintingid FROM paintings p1 WHERE EXISTS (SELECT p2.year FROM paintings p2 WHERE p1.year < p2.year AND p2.location = 'Gallery 240')",
        "SELECT p.paintingid FROM paintings p LEFT JOIN paintings p2 ON p.year < p2.year AND p2.location = 'Gallery 240' WHERE p2.paintingid IS NOT NULL",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MAX(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT DISTINCT p.paintingid FROM paintings p WHERE p.year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')"
      ]
    ]
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "nlq": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT p1.paintingid FROM paintings p1 WHERE EXISTS (SELECT 1 FROM paintings p2 WHERE p2.location = 'Gallery 240' AND p1.year < p2.year)",
        "SELECT DISTINCT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT DISTINCT paintingid FROM paintings p1 WHERE p1.year < (SELECT year FROM paintings p2 WHERE p2.location = 'Gallery 240' AND p2.year > p1.year)",
        "SELECT DISTINCT paintingid FROM paintings WHERE paintingid IN (SELECT p1.paintingid FROM paintings p1, paintings p2 WHERE p1.year < p2.year AND p2.location = 'Gallery 240')",
        "SELECT DISTINCT paintingid FROM paintings AS p1 WHERE EXISTS (SELECT NULL FROM paintings p2 WHERE p2.location = 'Gallery 240' AND p1.year < p2.year)",
        "SELECT DISTINCT p.paintingid FROM paintings p JOIN paintings g ON p.year < g.year WHERE g.location = 'Gallery 240'",
        "SELECT DISTINCT paintingid FROM paintings WHERE year < (SELECT MAX(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT DISTINCT p1.paintingid FROM paintings p1, paintings p2 WHERE p1.year < p2.year AND p2.location = 'Gallery 240'"
      ]
    ]
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "nlq": "Find the id of the oldest painting.",
    "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings ORDER BY year ASC LIMIT 1",
        "SELECT MIN(year), paintingid FROM paintings GROUP BY paintingid ORDER BY year ASC LIMIT 1",
        "SELECT p.paintingid FROM paintings p WHERE p.year = (SELECT MIN(year) FROM paintings)",
        "SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)",
        "SELECT paintingid FROM paintings p WHERE p.year IN (SELECT MIN(year) FROM paintings)",
        "SELECT paintingid FROM (SELECT paintingid, year FROM paintings ORDER BY year ASC) LIMIT 1",
        "SELECT p.paintingid FROM paintings p ORDER BY p.year ASC LIMIT 1",
        "SELECT (SELECT paintingid FROM paintings ORDER BY year ASC LIMIT 1)",
        "SELECT MIN(year) AS OlderPaintingYear, paintingid FROM paintings GROUP BY paintingid HAVING year = OlderPaintingYear LIMIT 1"
      ]
    ]
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "nlq": "What is the id of the oldest painting?",
    "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings ORDER BY year ASC LIMIT 1",
        "SELECT MIN(year), paintingid FROM paintings GROUP BY paintingid ORDER BY year LIMIT 1",
        "SELECT p.paintingid FROM paintings p WHERE p.year = (SELECT MIN(year) FROM paintings)",
        "SELECT paintingid FROM paintings WHERE year = (SELECT MIN(year) FROM paintings)",
        "SELECT p.paintingid FROM paintings p ORDER BY p.year ASC LIMIT 1",
        "SELECT paintingid FROM (SELECT paintingid, year FROM paintings ORDER BY year ASC) LIMIT 1",
        "SELECT paintingid FROM paintings GROUP BY paintingid HAVING year = MIN(year) ORDER BY year LIMIT 1",
        "SELECT paintingid FROM paintings WHERE year = (SELECT year FROM paintings ORDER BY year ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "nlq": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
    "infer_predictions": [
      [
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%')",
        "SELECT a.fname, a.lname FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title LIKE '%female%'",
        "SELECT artists.fname, artists.lname FROM artists INNER JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.title LIKE '%female%'",
        "SELECT fname, lname FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%' LIMIT 1)",
        "SELECT fname, lname FROM artists WHERE EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid AND title LIKE '%female%')",
        "SELECT DISTINCT a.fname, a.lname FROM artists a, sculptures s WHERE a.artistid = s.sculptorid AND s.title LIKE '%female%'",
        "SELECT first.fname, first.lname FROM artists AS first JOIN sculptures AS second ON first.artistid = second.sculptorid WHERE second.title LIKE '%female%'",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures WHERE title LIKE '%female%' GROUP BY sculptorid)",
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT NULL FROM sculptures s WHERE s.sculptorid = a.artistid AND s.title LIKE '%female%')",
        "SELECT Ar.fname, Ar.lname FROM artists Ar JOIN sculptures Sc ON Ar.artistid = Sc.sculptorid WHERE Sc.title LIKE '%female%'"
      ]
    ]
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "nlq": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
    "infer_predictions": [
      [
        "SELECT a.fname || ' ' || a.lname FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title LIKE '%female%'",
        "SELECT artists.fname || ' ' || artists.lname AS full_name FROM artists, sculptures WHERE artists.artistid = sculptures.sculptorid AND sculptures.title LIKE '%female%'",
        "SELECT a.fname || ' ' || a.lname FROM artists a, sculptures s WHERE a.artistid = s.sculptorid AND s.title LIKE '%female%'",
        "SELECT full_name FROM (SELECT artists.fname || ' ' || artists.lname AS full_name, sculptures.title FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid) WHERE title LIKE '%female%'",
        "SELECT (a.fname || ' ' || a.lname) AS full_name FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title LIKE '%female%'",
        "SELECT DISTINCT artists.fname || ' ' || artists.lname FROM artists JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.title LIKE '%female%'",
        "SELECT a.fname, a.lname FROM artists a INNER JOIN sculptures s ON a.artistid = s.sculptorid WHERE s.title LIKE '%female%'",
        "SELECT artists.fname || ' ' || artists.lname FROM artists INNER JOIN sculptures ON artists.artistid = sculptures.sculptorid AND sculptures.title LIKE '%female%'",
        "SELECT a.fname || ' ' || a.lname AS FullName FROM artists a JOIN sculptures s ON a.artistid = s.sculptorid WHERE LOWER(s.title) LIKE '%female%'"
      ]
    ]
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "nlq": "List the names of all distinct paintings in alphabetical order.",
    "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
    "infer_predictions": [
      [
        "SELECT DISTINCT title FROM paintings ORDER BY title ASC;",
        "SELECT title FROM paintings GROUP BY title ORDER BY title;",
        "SELECT title FROM (SELECT DISTINCT title FROM paintings) ORDER BY title;",
        "SELECT DISTINCT title AS PaintingTitle FROM paintings ORDER BY PaintingTitle;",
        "SELECT title FROM paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title;",
        "SELECT DISTINCT p.title FROM paintings p ORDER BY p.title ASC;",
        "SELECT DISTINCT Title FROM (SELECT title AS Title FROM paintings) ORDER BY Title ASC;"
      ]
    ]
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "nlq": "What is the name of every distinct painting in alphabetical order?",
    "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
    "infer_predictions": [
      [
        "SELECT DISTINCT title FROM paintings ORDER BY title ASC",
        "SELECT title FROM paintings GROUP BY title ORDER BY title ASC",
        "SELECT p.title FROM paintings p GROUP BY p.title ORDER BY p.title ASC",
        "SELECT title FROM (SELECT DISTINCT title FROM paintings) ORDER BY title",
        "SELECT DISTINCT(p.title) FROM paintings p ORDER BY p.title ASC",
        "SELECT title FROM paintings WHERE title IS NOT NULL GROUP BY title ORDER BY title",
        "SELECT DISTINCT title FROM paintings WHERE title<>'' ORDER BY title",
        "SELECT title FROM paintings GROUP BY title HAVING title IS NOT NULL ORDER BY title",
        "SELECT p.title FROM (SELECT DISTINCT title FROM paintings) p ORDER BY p.title ASC",
        "SELECT DISTINCT title AS PaintingTitle FROM paintings ORDER BY PaintingTitle ASC"
      ]
    ]
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "nlq": "List the names of all distinct paintings ordered by length.",
    "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
    "infer_predictions": [
      [
        "SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title)",
        "SELECT title FROM paintings GROUP BY title ORDER BY LENGTH(title)",
        "SELECT DISTINCT p.title FROM paintings p ORDER BY LENGTH(p.title)",
        "SELECT p.title FROM paintings p GROUP BY p.title ORDER BY LENGTH(p.title)",
        "SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) ASC",
        "SELECT DISTINCT p.title AS PaintingTitle FROM paintings p ORDER BY LENGTH(PaintingTitle)",
        "SELECT title FROM (SELECT DISTINCT title FROM paintings) ORDER BY LENGTH(title)",
        "SELECT DISTINCT title FROM paintings ORDER BY LENGTH(title) DESC",
        "SELECT DISTINCT p1.title FROM paintings p1 ORDER BY LENGTH(p1.title)"
      ]
    ]
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "nlq": "List the names of all distinct paintings from shortest to longest in height.",
    "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
    "infer_predictions": [
      [
        "SELECT DISTINCT title FROM paintings ORDER BY height_mm ASC",
        "SELECT title FROM paintings GROUP BY title ORDER BY height_mm ASC",
        "SELECT title FROM (SELECT DISTINCT title, height_mm FROM paintings ORDER BY height_mm) AS SortedPaintings",
        "SELECT DISTINCT p.title FROM paintings p ORDER BY p.height_mm ASC",
        "SELECT title FROM paintings WHERE title IS NOT NULL GROUP BY title ORDER BY height_mm",
        "SELECT p.title FROM paintings p WHERE p.title IN (SELECT DISTINCT title FROM paintings) ORDER BY p.height_mm ASC",
        "SELECT DISTINCT title FROM paintings WHERE height_mm IS NOT NULL ORDER BY height_mm ASC",
        "SELECT p.title FROM (SELECT title, height_mm FROM paintings GROUP BY title, height_mm) AS p ORDER BY p.height_mm ASC"
      ]
    ]
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "nlq": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950",
        "SELECT title FROM paintings p WHERE p.year >= 1900 AND p.year <= 1950 UNION ALL SELECT title FROM sculptures s WHERE s.year >= 1900 AND s.year <= 1950",
        "SELECT title FROM (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) WHERE year >= 1900 AND year <= 1950",
        "SELECT p.title FROM paintings p WHERE p.year BETWEEN 1900 AND 1950 UNION ALL SELECT s.title FROM sculptures s WHERE s.year BETWEEN 1900 AND 1950",
        "SELECT title FROM paintings WHERE year >= 1900 AND year <= 1950 UNION ALL SELECT title FROM sculptures WHERE year >= 1900 AND year <= 1950",
        "SELECT paintings.title AS title FROM paintings WHERE paintings.year > 1899 AND paintings.year < 1951 UNION ALL SELECT sculptures.title AS title FROM sculptures WHERE sculptures.year > 1899 AND sculptures.year < 1951",
        "SELECT DISTINCT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT DISTINCT title FROM sculptures WHERE year BETWEEN 1900 AND 1950",
        "SELECT title FROM (SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION ALL SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950) a",
        "SELECT A.title FROM (SELECT Title as title, Year FROM sculptures UNION ALL SELECT Title, Year FROM paintings ) A WHERE A.Year >= 1900 AND A.Year <= 1950",
        "SELECT title FROM paintings p WHERE p.year > 1899 AND p.year < 1951 UNION ALL SELECT title FROM sculptures s WHERE s.year > 1899 AND s.year < 1951"
      ]
    ]
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "nlq": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950",
        "SELECT p.title FROM paintings p WHERE p.year >= 1900 AND p.year <= 1950 UNION SELECT s.title FROM sculptures s WHERE s.year >= 1900 AND s.year <= 1950",
        "SELECT title FROM paintings WHERE year > 1899 AND year < 1951 UNION SELECT title FROM sculptures WHERE year > 1899 AND year < 1951",
        "SELECT title FROM (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) WHERE year BETWEEN 1900 AND 1950",
        "SELECT CASE WHEN EXISTS (SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950) THEN (SELECT title FROM paintings WHERE year BETWEEN 1900 AND 1950) ELSE (SELECT title FROM sculptures WHERE year BETWEEN 1900 AND 1950) END",
        "WITH Artworks AS (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) SELECT title FROM Artworks WHERE year BETWEEN 1900 AND 1950",
        "SELECT artwork.title FROM (SELECT title, year FROM paintings UNION ALL SELECT title, year FROM sculptures) AS artwork WHERE artwork.year >= 1900 AND artwork.year <= 1950",
        "SELECT p.title FROM paintings p WHERE p.year BETWEEN 1900 AND 1950 UNION ALL SELECT s.title FROM sculptures s WHERE s.year BETWEEN 1900 AND 1950",
        "SELECT title FROM paintings WHERE year IN (SELECT year FROM paintings WHERE year BETWEEN 1900 AND 1950) UNION SELECT title FROM sculptures WHERE year IN (SELECT year FROM sculptures WHERE year BETWEEN 1900 AND 1950)",
        "SELECT result.title FROM (SELECT title, year FROM paintings UNION SELECT title, year FROM sculptures) AS result WHERE result.year BETWEEN 1900 AND 1950"
      ]
    ]
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "nlq": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222",
        "SELECT p.title FROM paintings AS p WHERE p.painterid = 222 UNION ALL SELECT s.title FROM sculptures AS s WHERE s.sculptorid = 222",
        "SELECT art.title FROM paintings AS art WHERE art.painterid = 222 UNION SELECT art.title FROM sculptures AS art WHERE art.sculptorid = 222",
        "SELECT title FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE artistid = 222) UNION SELECT title FROM sculptures WHERE sculptorid IN (SELECT artistid FROM artists WHERE artistid = 222)",
        "SELECT p.title FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.artistid = 222 UNION SELECT s.title FROM sculptures s JOIN artists a ON s.sculptorid = a.artistid WHERE a.artistid = 222",
        "WITH ArtistWorks AS (SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222) SELECT title FROM ArtistWorks",
        "SELECT artworks.title FROM (SELECT title, painterid AS artistid FROM paintings UNION ALL SELECT title, sculptorid AS artistid FROM sculptures) AS artworks WHERE artworks.artistid = 222",
        "SELECT a.title FROM (SELECT title, painterid AS artist_id FROM paintings UNION ALL SELECT title, sculptorid FROM sculptures) a WHERE a.artist_id = 222"
      ]
    ]
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "nlq": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
    "infer_predictions": [
      [
        "SELECT p.title FROM paintings p WHERE p.painterid = 222 UNION SELECT s.title FROM sculptures s WHERE s.sculptorid = 222",
        "SELECT title FROM paintings WHERE painterid = 222 UNION ALL SELECT title FROM sculptures WHERE sculptorid = 222",
        "SELECT title FROM (SELECT title, painterid AS artistid FROM paintings UNION ALL SELECT title, sculptorid FROM sculptures) WHERE artistid = 222",
        "SELECT p.title FROM paintings p JOIN artists a ON p.painterid = a.artistid WHERE a.artistid = 222 UNION SELECT s.title FROM sculptures s JOIN artists a ON s.sculptorid = a.artistid WHERE a.artistid = 222",
        "SELECT title FROM paintings WHERE painterid = 222 UNION SELECT title FROM sculptures WHERE sculptorid = 222",
        "SELECT title FROM paintings WHERE painterid IN (SELECT artistid FROM artists WHERE artistid = 222) UNION SELECT title FROM sculptures WHERE sculptorid IN (SELECT artistid FROM artists WHERE artistid = 222)",
        "SELECT * FROM (SELECT title FROM paintings WHERE painterid = 222 UNION ALL SELECT title FROM sculptures WHERE sculptorid = 222) AS results",
        "WITH CombinedWorks AS (SELECT title, painterid AS artistid FROM paintings UNION ALL SELECT title, sculptorid FROM sculptures) SELECT title FROM CombinedWorks WHERE artistid = 222"
      ]
    ]
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "nlq": "What is the id of the artist who has the highest number of painting works before 1900?",
    "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT p.painterid FROM paintings p WHERE p.year < 1900 GROUP BY p.painterid ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT painterid FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY COUNT(painterid) DESC LIMIT 1",
        "SELECT painterid FROM (SELECT painterid FROM paintings WHERE year < 1900) GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH CountedPaintings AS (SELECT painterid, COUNT(*) AS Counted FROM paintings WHERE year < 1900 GROUP BY painterid) SELECT painterid FROM CountedPaintings ORDER BY Counted DESC LIMIT 1",
        "SELECT painterid FROM (SELECT painterid, COUNT(*) AS painting_count FROM paintings WHERE year < 1900 GROUP BY painterid) AS total_paintings ORDER BY painting_count DESC LIMIT 1",
        "SELECT (SELECT painterid FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1) AS highest_painter",
        "SELECT painterid FROM paintings GROUP BY painterid HAVING year < 1900 ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT paintingGroup.painterid FROM (SELECT painterid FROM paintings WHERE year < 1900) as paintingGroup GROUP BY paintingGroup.painterid ORDER BY COUNT(paintingGroup.painterid) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "nlq": "What is the id of the artist with the most paintings before 1900?",
    "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT artistid FROM artists WHERE artistid = (SELECT painterid FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT a.artistid FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.year < 1900 GROUP BY a.artistid ORDER BY COUNT(p.paintingid) DESC LIMIT 1",
        "SELECT painterid FROM (SELECT painterid, COUNT(painterid) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) tmp ORDER BY cnt DESC LIMIT 1",
        "SELECT a.artistid FROM artists a WHERE (SELECT COUNT(*) FROM paintings p WHERE p.painterid = a.artistid AND p.year < 1900) = (SELECT MAX(c.cnt) FROM (SELECT COUNT(*) AS cnt FROM paintings WHERE year < 1900 GROUP BY painterid) c)",
        "SELECT artistid FROM (SELECT painterid AS artistid, COUNT(*) AS painting_count FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY painting_count DESC LIMIT 1) AS subquery",
        "SELECT artistid FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE painterid = artists.artistid AND year < 1900 GROUP BY painterid HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM paintings WHERE year < 1900 GROUP BY painterid) as counts))",
        "SELECT artistid FROM artists AS a JOIN (SELECT painterid, COUNT(paintingid) AS num_paintings FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY num_paintings DESC LIMIT 1) AS p ON a.artistid = p.painterid",
        "SELECT painterid FROM paintings GROUP BY painterid HAVING year < 1900 ORDER BY COUNT(painterid) DESC LIMIT 1",
        "SELECT SUB.artistid FROM (SELECT painterid as artistid, COUNT(paintingid) as Total FROM paintings WHERE year < 1900 GROUP BY painterid ORDER BY Total DESC LIMIT 1) as SUB"
      ]
    ]
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "nlq": "What is the first name of the artist who has the highest number of sculptures?",
    "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT fname FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT sculptorid, COUNT(*) as cnt FROM sculptures GROUP BY sculptorid)))",
        "SELECT a.fname FROM artists a JOIN (SELECT sculptorid, COUNT(*) as num_sculptures FROM sculptures GROUP BY sculptorid ORDER BY num_sculptures DESC LIMIT 1) b ON a.artistid = b.sculptorid",
        "SELECT a.fname FROM artists a WHERE a.artistid = (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(s.title) DESC LIMIT 1)",
        "SELECT fname FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(title) DESC LIMIT 1)",
        "SELECT fname FROM artists WHERE artistid = (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(s.sculptorid) DESC LIMIT 1)",
        "SELECT a.fname FROM artists a WHERE EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid GROUP BY s.sculptorid HAVING COUNT(s.sculptorid) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM sculptures GROUP BY sculptorid)))",
        "SELECT (SELECT fname FROM artists WHERE artistid = sculptor) AS artist_fname FROM (SELECT sculptorid AS sculptor, COUNT(*) AS number_of_sculptures FROM sculptures GROUP BY sculptorid ORDER BY number_of_sculptures DESC LIMIT 1)",
        "SELECT fname FROM artists INNER JOIN (SELECT sculptorid, COUNT(*) AS total FROM sculptures GROUP BY sculptorid ORDER BY total DESC LIMIT 1) t ON artists.artistid = t.sculptorid",
        "SELECT artists.fname FROM artists JOIN (SELECT sculptorid, COUNT(*) as count FROM sculptures GROUP BY sculptorid) sclp ON artists.artistid = sclp.sculptorid ORDER BY sclp.count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "nlq": "What is the first name of the sculptor with the greatest number of works?",
    "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT a.fname FROM artists a INNER JOIN sculptures s ON a.artistid = s.sculptorid GROUP BY a.artistid ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT fname FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(title) DESC LIMIT 1)",
        "SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptorid) = (SELECT MAX(work_count) FROM (SELECT COUNT(*) AS work_count FROM sculptures GROUP BY sculptorid)))",
        "SELECT (SELECT fname FROM artists WHERE artistid = sculptures.sculptorid) AS FirstName FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT a.fname FROM artists a WHERE a.artistid = (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(s.title) DESC LIMIT 1)",
        "SELECT fname FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH SculptorCount AS (SELECT sculptorid, COUNT(*) AS NumberOfWorks FROM sculptures GROUP BY sculptorid) SELECT artists.fname FROM artists JOIN SculptorCount ON artists.artistid = SculptorCount.sculptorid ORDER BY NumberOfWorks DESC LIMIT 1",
        "SELECT a.fname FROM artists a JOIN (SELECT sculptorid, COUNT(*) as TotalWorks FROM sculptures GROUP BY sculptorid) as WorkCount ON a.artistid = WorkCount.sculptorid ORDER BY WorkCount.TotalWorks DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "nlq": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800",
        "SELECT title FROM paintings WHERE (width_mm < '600' OR height_mm > '800')",
        "SELECT p.title FROM paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
        "SELECT title FROM paintings WHERE (width_mm < (SELECT 600) OR height_mm > (SELECT 800))",
        "SELECT title FROM paintings WHERE (width_mm * 1) < (600) OR (height_mm * 1) > (800)",
        "SELECT title FROM paintings WHERE (width_mm < 600) OR (height_mm > 800)",
        "SELECT title AS PaintingName FROM paintings WHERE (width_mm < 600 OR height_mm > 800)",
        "SELECT p.title FROM paintings p WHERE p.width_mm < 600 OR p.height_mm > 800 GROUP BY p.title"
      ]
    ]
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "nlq": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
    "infer_predictions": [
      [
        "SELECT title FROM paintings WHERE width_mm < 600 OR height_mm > 800",
        "SELECT p.title FROM paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
        "SELECT title FROM paintings WHERE (width_mm < 600) OR (height_mm > 800)",
        "SELECT p.title FROM paintings p WHERE (p.width_mm < 600) OR (p.height_mm > 800)",
        "SELECT title FROM paintings WHERE width_mm < 600 UNION SELECT title FROM paintings WHERE height_mm > 800",
        "SELECT p.title FROM paintings AS p WHERE (p.width_mm < 600 OR p.height_mm > 800)",
        "SELECT DISTINCT p.title FROM paintings p WHERE p.width_mm < 600 OR p.height_mm > 800",
        "SELECT title FROM paintings WHERE (width_mm < 600) UNION SELECT title FROM paintings WHERE (height_mm > 800)"
      ]
    ]
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "nlq": "Which locations have paintings created before 1885 or after 1930?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 OR year > 1930",
        "SELECT location FROM paintings WHERE year < 1885 UNION SELECT location FROM paintings WHERE year > 1930",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 OR p.year > 1930",
        "SELECT p1.location FROM paintings p1 WHERE p1.year < 1885 UNION SELECT p2.location FROM paintings p2 WHERE p2.year > 1930",
        "SELECT location FROM paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year NOT BETWEEN 1885 AND 1930",
        "SELECT p.location FROM paintings AS p WHERE p.year < 1885 OR p.year > 1930 GROUP BY p.location",
        "SELECT location FROM (SELECT location, year FROM paintings) WHERE year < 1885 OR year > 1930",
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 UNION ALL SELECT DISTINCT location FROM paintings WHERE year > 1930",
        "SELECT p.location FROM paintings p WHERE NOT (p.year BETWEEN 1885 AND 1930) GROUP BY p.location HAVING COUNT(*) > 0"
      ]
    ]
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "nlq": "What locations have works painted before 1885 or after 1930?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 OR year > 1930;",
        "SELECT location FROM paintings WHERE year < 1885 UNION SELECT location FROM paintings WHERE year > 1930;",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 OR p.year > 1930;",
        "SELECT p.location FROM paintings p WHERE p.year NOT BETWEEN 1885 AND 1930 GROUP BY p.location;",
        "SELECT p.location FROM paintings p GROUP BY p.location HAVING MIN(p.year) < 1885 OR MAX(p.year) > 1930;",
        "SELECT location FROM paintings WHERE year < 1885 UNION ALL SELECT location FROM paintings WHERE year > 1930 EXCEPT SELECT location FROM paintings WHERE year BETWEEN 1885 AND 1930;",
        "SELECT location FROM (SELECT location, year FROM paintings) WHERE year < 1885 OR year > 1930;",
        "WITH BeforeAfter AS (SELECT location, year FROM paintings WHERE year < 1885 OR year > 1930) SELECT DISTINCT location FROM BeforeAfter;",
        "SELECT location FROM paintings WHERE year < 1885 UNION SELECT location FROM paintings WHERE year > 1930 EXCEPT SELECT location FROM paintings WHERE year >= 1885 AND year <= 1930;"
      ]
    ]
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "nlq": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000",
        "SELECT paintingid FROM paintings WHERE height_mm BETWEEN 501 AND 1999",
        "SELECT P.paintingid FROM paintings P WHERE P.height_mm BETWEEN 501 AND 1999",
        "SELECT id FROM (SELECT paintingid as id, height_mm FROM paintings) WHERE height_mm > 500 AND height_mm < 2000",
        "SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingid",
        "SELECT P.paintingid FROM paintings P WHERE P.height_mm > 500 AND P.height_mm < 2000 ORDER BY P.paintingid",
        "SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000 LIMIT 100",
        "SELECT paintingid FROM paintings WHERE height_mm BETWEEN 501 AND 1999 ORDER BY paintingid",
        "SELECT P.paintingid FROM (SELECT * FROM paintings) AS P WHERE P.height_mm > 500 AND P.height_mm < 2000"
      ]
    ]
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "nlq": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000",
        "SELECT p.paintingid FROM paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000",
        "SELECT p.paintingid FROM paintings AS p WHERE p.height_mm BETWEEN 501 AND 1999",
        "SELECT paintingid FROM paintings WHERE NOT (height_mm <= 500 OR height_mm >= 2000)",
        "SELECT PV.paintingid FROM paintings PV WHERE PV.height_mm > 500 AND PV.height_mm < 2000",
        "SELECT id FROM (SELECT paintingid AS id, height_mm FROM paintings) WHERE height_mm > 500 AND height_mm < 2000",
        "SELECT paintingid FROM paintings WHERE height_mm > 500 AND height_mm < 2000 ORDER BY paintingid",
        "SELECT Sub.paintingid FROM (SELECT * FROM paintings) AS Sub WHERE Sub.height_mm > 500 AND Sub.height_mm < 2000"
      ]
    ]
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "nlq": "Which locations have paintings in the mediums of on panel and on canvas?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE medium IN ('canvas', 'panel')",
        "SELECT location FROM paintings WHERE medium = 'canvas' UNION SELECT location FROM paintings WHERE medium = 'panel'",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.medium = 'canvas' OR p.medium = 'panel'",
        "SELECT DISTINCT location FROM paintings WHERE medium = 'canvas' OR medium = 'panel'",
        "SELECT DISTINCT location FROM paintings WHERE medium IN (SELECT DISTINCT medium FROM paintings WHERE medium = 'canvas' OR medium = 'panel')",
        "SELECT location FROM paintings GROUP BY location HAVING medium IN ('canvas', 'panel')",
        "SELECT location FROM (SELECT location, medium FROM paintings) WHERE medium = 'panel' OR medium = 'canvas' GROUP BY location",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.medium IN ('canvas', 'panel') GROUP BY p.location",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.medium IN ('panel', 'canvas')"
      ]
    ]
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "nlq": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE medium IN ('canvas', 'panel')",
        "SELECT location FROM paintings WHERE medium = 'canvas' UNION SELECT location FROM paintings WHERE medium = 'panel'",
        "SELECT p.location FROM paintings p WHERE p.medium = 'canvas' OR p.medium = 'panel' GROUP BY p.location",
        "SELECT location FROM paintings WHERE medium IN ('panel', 'canvas') GROUP BY location HAVING COUNT(DISTINCT medium) > 1",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.medium = 'canvas' UNION SELECT DISTINCT p.location FROM paintings p WHERE p.medium = 'panel'",
        "SELECT DISTINCT location FROM paintings WHERE medium IN (SELECT DISTINCT medium FROM paintings WHERE medium = 'canvas' OR medium = 'panel')",
        "SELECT DISTINCT p.location FROM paintings p WHERE EXISTS (SELECT 1 FROM paintings WHERE medium = 'canvas' AND location = p.location) OR EXISTS (SELECT 1 FROM paintings WHERE medium = 'panel' AND location = p.location)",
        "SELECT p.location FROM paintings p WHERE p.medium MATCH 'canvas OR panel' GROUP BY p.location",
        "SELECT location FROM (SELECT location FROM paintings WHERE medium = 'canvas' UNION ALL SELECT location FROM paintings WHERE medium = 'panel') GROUP BY location",
        "SELECT artist_location.location FROM (SELECT DISTINCT location FROM paintings WHERE medium = 'panel' UNION ALL SELECT DISTINCT location FROM paintings WHERE medium = 'canvas') AS artist_location"
      ]
    ]
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "nlq": "Find the locations that have paintings created before 1885 and after 1930?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 OR year > 1930",
        "SELECT location FROM paintings WHERE year < 1885 UNION SELECT location FROM paintings WHERE year > 1930",
        "SELECT p.location FROM paintings p WHERE p.year < 1885 OR p.year > 1930",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 UNION ALL SELECT DISTINCT p.location FROM paintings p WHERE p.year > 1930",
        "SELECT DISTINCT p1.location FROM paintings p1 WHERE p1.year < 1885 UNION SELECT DISTINCT p2.location FROM paintings p2 WHERE p2.year > 1930",
        "SELECT p.location FROM paintings p GROUP BY p.location HAVING MIN(p.year) < 1885 OR MAX(p.year) > 1930",
        "WITH pre1885 AS (SELECT location FROM paintings WHERE year < 1885), post1930 AS (SELECT location FROM paintings WHERE Year > 1930) SELECT location FROM pre1885 UNION SELECT location FROM post1930",
        "SELECT p.location FROM paintings p WHERE EXISTS (SELECT 1 FROM paintings WHERE location = p.location AND (year < 1885 OR year > 1930))",
        "SELECT location FROM (SELECT location, year FROM paintings) WHERE year < 1885 OR year > 1930",
        "SELECT location FROM paintings WHERE year NOT BETWEEN 1885 AND 1930"
      ]
    ]
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "nlq": "What are the locations that have works painted before 1885 and after 1930?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 OR year > 1930",
        "SELECT location FROM paintings WHERE year < 1885 UNION SELECT location FROM paintings WHERE year > 1930",
        "SELECT p.location FROM paintings p WHERE p.year < 1885 UNION ALL SELECT q.location FROM paintings q WHERE q.year > 1930",
        "SELECT DISTINCT location FROM paintings WHERE year NOT BETWEEN 1885 AND 1930",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 OR p.year > 1930",
        "SELECT DISTINCT location FROM paintings WHERE year IN (SELECT year FROM paintings WHERE year < 1885 OR year > 1930)",
        "SELECT location FROM (SELECT location, year FROM paintings) WHERE year < 1885 OR year > 1930",
        "SELECT location FROM paintings GROUP BY location HAVING MIN(year) < 1885 OR MAX(year) > 1930",
        "SELECT p.location FROM paintings p WHERE EXISTS (SELECT NULL FROM paintings q WHERE p.location = q.location AND (q.year < 1885 OR q.year > 1930))"
      ]
    ]
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "nlq": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "infer_predictions": [
      [
        "SELECT AVG(height_mm), AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'",
        "SELECT AVG(p.height_mm) AS average_height, AVG(p.width_mm) AS average_width FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'",
        "SELECT AVG(p.height_mm), AVG(p.width_mm) FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT AVG(height), AVG(width) FROM (SELECT height_mm AS height, width_mm AS width FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT * FROM (SELECT AVG(height_mm) AS AverageHeight, AVG(width_mm) AS_averageWidth FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT SUM(height_mm) / COUNT(*), SUM(width_mm) / COUNT(*) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'",
        "SELECT (SELECT AVG(height_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'), (SELECT AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "WITH Filtered AS (SELECT height_mm, width_mm FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241') SELECT AVG(Filtered.height_mm), AVG(Filtered.width_mm) FROM Filtered"
      ]
    ]
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "nlq": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "infer_predictions": [
      [
        "SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'",
        "SELECT AVG(p.height_mm), AVG(p.width_mm) FROM paintings p WHERE p.medium = 'oil' AND p.location = 'Gallery 241'",
        "SELECT AVG(height_mm) AS AvgHeight, AVG(width_mm) AS AvgWidth FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241'",
        "SELECT AVG(paintings.height_mm) AS Average_Height, AVG(paintings.width_mm) AS Average_Width FROM paintings WHERE paintings.medium = 'oil' AND paintings.location = 'Gallery 241'",
        "SELECT AVG(height_mm), AVG(width_mm) FROM (SELECT height_mm, width_mm FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT AVG(height) as Avg_Height, AVG(width) as Avg_Width FROM (SELECT height_mm as height, width_mm as width FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241')",
        "SELECT (SELECT AVG(height_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241') AS average_height, (SELECT AVG(width_mm) FROM paintings WHERE medium = 'oil' AND location = 'Gallery 241') AS average_width"
      ]
    ]
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "nlq": "What are the maximum height and id of paintings painted before 1900?",
    "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
    "infer_predictions": [
      [
        "SELECT MAX(height_mm), paintingid FROM paintings WHERE year < 1900 GROUP BY paintingid ORDER BY height_mm DESC LIMIT 1",
        "SELECT height_mm AS max_height, paintingid FROM paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
        "SELECT MAX(p.height_mm) AS max_height, p.paintingid FROM paintings p WHERE p.year < 1900 GROUP BY p.paintingid ORDER BY p.height_mm DESC LIMIT 1",
        "SELECT p.height_mm AS maximum_height, p.paintingid FROM paintings p WHERE p.year < '1900' ORDER BY p.height_mm DESC LIMIT 1",
        "SELECT height_mm AS Highest_height, paintingid FROM paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
        "SELECT paintingid, MAX(height_mm) FROM paintings WHERE year < 1900 GROUP BY paintingid ORDER BY MAX(height_mm) DESC LIMIT 1",
        "SELECT MAX(painting.height_mm), painting.paintingid FROM paintings painting WHERE painting.year < 1900 GROUP BY painting.paintingid ORDER BY painting.height_mm DESC LIMIT 1",
        "SELECT paintingid, height_mm FROM paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "nlq": "What is the height and id of the tallest painting created before 1900?",
    "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
    "infer_predictions": [
      [
        "SELECT height_mm, paintingid FROM paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1",
        "SELECT MAX(height_mm) AS height_mm, paintingid FROM paintings WHERE year < 1900 GROUP BY paintingid ORDER BY height_mm DESC LIMIT 1",
        "SELECT p.height_mm, p.paintingid FROM paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1",
        "WITH TallestPainting AS (SELECT height_mm, paintingid FROM paintings WHERE year < 1900) SELECT height_mm, paintingid FROM TallestPainting ORDER BY height_mm DESC LIMIT 1",
        "SELECT p.height_mm AS mm, p.paintingid AS id FROM paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "nlq": "What are the maximum height and width of paintings for each year?",
    "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM paintings GROUP BY year",
        "SELECT p.year, MAX(p.height_mm) AS MaximumHeight, MAX(p.width_mm) AS MaximumWidth FROM paintings p GROUP BY p.year",
        "SELECT year AS Year, MAX(height_mm) AS MaximumHeightMM, MAX(width_mm) AS MaximumWidthMM FROM paintings GROUP BY Year",
        "SELECT yr.year, MAX(yr.height_mm) AS highest, MAX(yr.width_mm) AS widest FROM paintings yr GROUP BY yr.year",
        "SELECT paintings.year, MAX(paintings.height_mm) AS MaxHeight, MAX(paintings.width_mm) AS MaxWidth FROM paintings GROUP BY paintings.year",
        "SELECT tbl.year, MAX(tbl.height) AS maxHeight_mm, MAX(tbl.width) AS maxWidth_mm FROM (SELECT year, height_mm AS height, width_mm AS width FROM paintings) tbl GROUP BY tbl.year",
        "SELECT p.year, MAX(H), MAX(W) FROM (SELECT year, height_mm AS H, width_mm AS W FROM paintings) p GROUP BY p.year",
        "SELECT y, MAX(h_mm) AS max_h, MAX(w_mm) AS max_w FROM (SELECT year AS y, height_mm AS h_mm, width_mm AS w_mm FROM paintings) GROUP BY y",
        "SELECT aYear AS 'Year', MAX(aHeight) AS 'Max Height (mm)', MAX(aWidth) AS 'Max Width (mm)' FROM (SELECT year AS aYear, height_mm AS aHeight, width_mm AS aWidth FROM paintings) GROUP BY aYear"
      ]
    ]
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "nlq": "What are largest height and width dimensions for paintings in each year?",
    "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM paintings GROUP BY year",
        "SELECT p.year, MAX(p.height_mm) AS maxHeight, MAX(p.width_mm) AS maxWidth FROM paintings p GROUP BY p.year",
        "SELECT p.year, MAX(p.height_mm), MAX(p.width_mm) FROM paintings p GROUP BY p.year",
        "SELECT year, MAX(height_mm) max_height, MAX(width_mm) max_width FROM paintings GROUP BY year",
        "SELECT year, MAX(height_mm) AS maximum_height, MAX(width_mm) AS maximum_width FROM paintings GROUP BY year",
        "SELECT p.year, maximum_height, maximum_width FROM (SELECT year, MAX(height_mm) AS maximum_height, MAX(width_mm) AS maximum_width FROM paintings GROUP BY year) p",
        "SELECT p.year, MAX(height_mm), MAX(width_mm) FROM paintings p GROUP BY p.year",
        "SELECT year AS paint_year, MAX(height_mm) AS maxHeight, MAX(width_mm) AS maxWidth FROM paintings GROUP BY paint_year",
        "SELECT p.year AS year_of_painting, MAX(p.height_mm), MAX(p.width_mm) FROM paintings AS p GROUP BY year_of_painting",
        "SELECT paintings.year, maximum_height, maximum_width FROM (SELECT year, MAX(height_mm) AS maximum_height, MAX(width_mm) AS maximum_width FROM paintings GROUP BY year) paintings"
      ]
    ]
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "nlq": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
    "infer_predictions": [
      [
        "SELECT artists.lname, AVG(paintings.height_mm) AS avg_height, AVG(paintings.width_mm) AS avg_width FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY artists.lname ORDER BY artists.lname",
        "SELECT a.lname, AVG(p.height_mm) as avg_height, AVG(p.width_mm) as avg_width FROM paintings p JOIN artists a ON p.painterid = a.artistid GROUP BY a.lname ORDER BY a.lname",
        "SELECT a.lname, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM paintings JOIN artists a ON painterid = artistid GROUP BY lname ORDER BY lname",
        "SELECT a.lname, AVG(paintings.height_mm) AS Average_Height, AVG(paintings.width_mm) AS Average_Width FROM paintings JOIN artists a ON paintings.painterid = a.artistid GROUP BY a.lname ORDER BY a.lname",
        "SELECT a.lname, average_height, average_width FROM (SELECT painterid, AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM paintings GROUP BY painterid) sub_query JOIN artists a ON sub_query.painterid = a.artistid ORDER BY a.lname",
        "SELECT lname, AVG(height_mm) as HeightAverage, AVG(width_mm) as WidthAverage FROM artists JOIN paintings ON artistid = painterid GROUP BY lname ORDER BY lname",
        "SELECT artists.lname, avg_height, avg_width FROM artists JOIN (SELECT painterid AS pid, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM paintings GROUP BY painterid) p ON artists.artistid = p.pid ORDER BY lname",
        "SELECT lname, (SELECT AVG(height_mm) FROM paintings WHERE painterid = artists.artistid) as average_height, (SELECT AVG(width_mm) FROM paintings WHERE painterid = artists.artistid) as average_width FROM artists ORDER BY lname",
        "SELECT lname, avg_agg.height AS avg_height, avg_agg.width AS avg_width FROM artists JOIN (SELECT painterid, AVG(height_mm) AS height, AVG(width_mm) AS width FROM paintings GROUP BY painterid) avg_agg ON artistid = avg_agg.painterid ORDER BY lname",
        "SELECT a.lname, AVG(p.height_mm) AS HeightAverage, AVG(p.width_mm) AS WidthAverage FROM artists a LEFT JOIN paintings p ON a.artistid = p.painterid GROUP BY a.lname ORDER BY a.lname"
      ]
    ]
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "nlq": "Find the average height and width of paintings grouped by painters and ordered by name",
    "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
    "infer_predictions": [
      [
        "SELECT fname, lname, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM paintings JOIN artists ON paintings.painterid = artists.artistid GROUP BY paintings.painterid ORDER BY lname, fname",
        "SELECT artists.fname, artists.lname, AVG(paintings.height_mm) AS avg_height, AVG(paintings.width_mm) AS avg_width FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid GROUP BY artists.artistid ORDER BY artists.lname, artists.fname",
        "SELECT a.fname, a.lname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM artists a JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid ORDER BY a.lname, a.fname",
        "SELECT a.fname, a.lname, AVG(p.height_mm), AVG(p.width_mm) FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid ORDER BY a.lname, a.fname",
        "SELECT artists.fname, artists.lname, AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM paintings, artists WHERE paintings.painterid = artists.artistid GROUP BY paintings.painterid ORDER BY artists.lname ASC, artists.fname ASC",
        "SELECT artists.fname, artists.lname, AVG(paintings.height_mm) AS AvHeight, AVG(paintings.width_mm) AS AvWidth FROM artists, paintings WHERE artists.artistid = paintings.painterid GROUP BY artists.artistid ORDER BY artists.lname ASC, artists.fname ASC",
        "SELECT a.fname AS FirstName, a.lname AS LastName, AVG(p.height_mm) AS AvgHeight, AVG(p.width_mm) AS AvgWidth FROM paintings p JOIN artists a ON p.painterid = a.artistid GROUP BY a.artistid ORDER BY a.lname ASC, a.fname ASC",
        "SELECT a.fname, a.lname, AVG(p.height_mm) as avg_height_mm, AVG(p.width_mm) as avg_width_mm FROM paintings p JOIN artists a ON p.painterid = a.artistid GROUP BY a.artistid ORDER BY a.lname, a.fname",
        "SELECT a.fname, a.lname, AVG(p.height_mm), AVG(p.width_mm) FROM artists a, paintings p WHERE a.artistid = p.painterid GROUP BY a.artistid ORDER BY a.lname, a.fname ASC",
        "SELECT artists.fname || ' ' || artists.lname AS fullname, AVG(paintings.height_mm) ASAverageHeight, AVG(paintings.width_mm) AS AverageWidth FROM paintings INNER JOIN artists ON paintings.painterid = artists.artistid GROUP BY paintings.painterid ORDER BY artists.lname, artists.fname"
      ]
    ]
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "nlq": "Find the first names and number of works of all artists who have at least two paintings?",
    "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT a.fname, COUNT(p.title) AS num_of_paintings FROM artists a JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid HAVING COUNT(p.title) >= 2",
        "SELECT artists.fname, COUNT(paintings.title) FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid GROUP BY artists.artistid HAVING COUNT(paintings.title) >= 2",
        "SELECT A.fname, COUNT(*) FROM artists A, paintings P WHERE A.artistid = P.painterid GROUP BY A.artistid HAVING COUNT(*) >= 2",
        "SELECT fname, num_works FROM (SELECT artistid, fname, COUNT(*) AS num_works FROM artists JOIN paintings ON artistid = painterid GROUP BY artistid) WHERE num_works >= 2",
        "SELECT A.fname, COUNT(P.title) AS total_paintings FROM artists A LEFT JOIN paintings P ON A.artistid = P.painterid GROUP BY A.artistid HAVING total_paintings >= 2",
        "SELECT ART.fname, ART.total_paintings FROM (SELECT aaa.artistid, aaa.fname, COUNT(ppp.title) AS total_paintings FROM artists aaa JOIN paintings ppp ON aaa.artistid = ppp.painterid GROUP BY aaa.artistid) ART WHERE ART.total_paintings >= 2",
        "SELECT art.fname, (SELECT COUNT(paint.title) FROM paintings paint WHERE paint.painterid = art.artistid) AS works FROM artists art WHERE (SELECT COUNT(paint.title) FROM paintings paint WHERE paint.painterid = art.artistid) >= 2",
        "SELECT artists.fname, totals.total FROM artists, (SELECT painterid, COUNT(painterid) AS total FROM paintings GROUP BY painterid HAVING total >= 2) totals WHERE artists.artistid = totals.painterid"
      ]
    ]
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "nlq": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT a.fname, COUNT(p.paintingid) AS num_paintings FROM artists a JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid HAVING num_paintings >= 2",
        "SELECT fname, COUNT(*) as paint_count FROM artists JOIN paintings ON artistid = painterid GROUP BY artistid HAVING paint_count >= 2",
        "SELECT artists.fname, cnt FROM artists INNER JOIN (SELECT painterid, COUNT(*) as cnt FROM paintings GROUP BY painterid HAVING cnt >= 2) paint_count ON artists.artistid = paint_count.painterid",
        "SELECT fname, count(paintingid) as Total_Paintings FROM artists JOIN paintings ON artistid = painterid GROUP BY artistid HAVING count(paintingid) >= 2",
        "SELECT a.fname, COUNT(*) AS num_of_paintings FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid GROUP BY a.artistid HAVING num_of_paintings >= 2",
        "SELECT artists.fname, COUNT(paintings.paintingid) AS Works_Count FROM artists JOIN paintings ON artists.artistid = paintings.painterid GROUP BY artists.artistid HAVING Works_Count >= 2",
        "WITH Paint_Count AS (SELECT painterid, COUNT(*) AS paint_count FROM paintings GROUP BY painterid) SELECT fname, paint_count FROM artists JOIN Paint_Count ON artists.artistid = Paint_Count.painterid WHERE paint_count >= 2",
        "SELECT DISTINCT a.fname, cs.count FROM artists a JOIN (SELECT painterid, COUNT(*) as count FROM paintings GROUP BY painterid HAVING count >= 2) cs ON a.artistid = cs.painterid",
        "SELECT at.fname, COUNT(p.paintingid) as cnt FROM artists at JOIN paintings p ON at.artistid = p.painterid GROUP BY at.artistid HAVING cnt >= 2",
        "SELECT artist_tab.fname, P_Count.count_works FROM artists artist_tab JOIN (SELECT painterid, COUNT(*) as count_works FROM paintings GROUP BY painterid HAVING COUNT(*) >= 2) P_Count ON artist_tab.artistid = P_Count.painterid"
      ]
    ]
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "nlq": "Find the death year of all artists who have at most 3 paintings?",
    "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
    "infer_predictions": [
      [
        "SELECT deathyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) <= 3)",
        "SELECT A.deathyear FROM artists A WHERE A.artistid IN (SELECT P.painterid FROM paintings P GROUP BY P.painterid HAVING COUNT(P.paintingid) <= 3)",
        "SELECT deathyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(paintingid) <= 3)",
        "SELECT artists.deathyear FROM artists JOIN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) <= 3) AS limited_paintings ON artists.artistid = limited_paintings.painterid",
        "SELECT distinct A.deathyear FROM artists A JOIN paintings P ON A.artistid = P.painterid GROUP BY P.painterid HAVING COUNT(P.paintingid) <= 3",
        "SELECT deathyear FROM artists WHERE EXISTS (SELECT 1 FROM paintings WHERE artists.artistid = paintings.painterid GROUP BY painterid HAVING COUNT(paintingid) <= 3)",
        "SELECT A.deathyear FROM artists A WHERE 3 >= (SELECT COUNT(*) FROM paintings WHERE painterid = A.artistid)",
        "SELECT A.deathyear FROM artists A INNER JOIN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) <= 3) P ON A.artistid = P.painterid",
        "SELECT artists.deathyear FROM artists JOIN paintings ON artists.artistid = paintings.painterid GROUP BY paintings.painterid HAVING COUNT(paintings.paintingid) <= 3"
      ]
    ]
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "nlq": "When did each artist who created less than 4 paintings die ?",
    "gold": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4",
    "infer_predictions": [
      [
        "SELECT a.deathyear FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p GROUP BY p.painterid HAVING COUNT(p.paintingid) < 4)",
        "SELECT a.deathyear FROM artists a JOIN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(*) < 4) x ON a.artistid = x.painterid",
        "SELECT a.deathyear FROM artists a WHERE a.artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(paintingid) < 4)",
        "SELECT a.deathyear FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid GROUP BY p.painterid HAVING COUNT(p.paintingid) < 4)",
        "SELECT deathyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING COUNT(paintingid) < 4)",
        "SELECT a.deathyear FROM artists AS a WHERE 4 > (SELECT COUNT(*) FROM paintings AS p WHERE p.painterid = a.artistid GROUP BY p.painterid)",
        "SELECT deathyear FROM artists WHERE (SELECT COUNT(*) FROM paintings WHERE painterid = artistid) < 4",
        "SELECT a.deathyear FROM artists a WHERE a.artistid IN (SELECT z.painterid FROM (SELECT painterid, COUNT(*) AS num_paintings FROM paintings GROUP BY painterid) z WHERE z.num_paintings < 4)",
        "SELECT a.deathyear FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid GROUP BY p.painterid HAVING COUNT(p.paintingid) < 4"
      ]
    ]
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "nlq": "Find the death year of the artist who made the least number of sculptures?",
    "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT a.deathyear FROM artists a WHERE a.artistid = (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT deathyear FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptureid) = (SELECT MIN(c) FROM (SELECT COUNT(*) as c FROM sculptures GROUP BY sculptorid)))",
        "SELECT a.deathyear FROM artists a JOIN (SELECT sculptorid, COUNT(*) as num_sculptures FROM sculptures GROUP BY sculptorid ORDER BY num_sculptures ASC LIMIT 1) g ON a.artistid = g.sculptorid",
        "SELECT deathyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptureid) ASC LIMIT 1)",
        "SELECT deathyear FROM artists INNER JOIN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptureid) = (SELECT MIN(c) FROM (SELECT COUNT(*) as c FROM sculptures GROUP BY sculptorid))) min_sculptures ON artistid = min_sculptures.sculptorid",
        "SELECT MAX(deathyear) FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptureid) LIMIT 1)",
        "SELECT a.deathyear FROM artists a WHERE a.artistid = (SELECT sculptorid FROM sculptures d GROUP BY sculptorid ORDER BY COUNT(d.sculptureid) ASC LIMIT 1)",
        "SELECT deathyear FROM artists a WHERE a.artistid = (SELECT sculptorid FROM (SELECT sculptorid, COUNT(*) as number FROM sculptures GROUP BY sculptorid ORDER BY number ASC LIMIT 1) sub)",
        "SELECT (SELECT a.deathyear FROM artists a WHERE a.artistid = sub.sculptorid) FROM (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(s.sculptureid) ASC LIMIT 1) sub"
      ]
    ]
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "nlq": "When did the artist who made the fewest sculptures die?",
    "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT a.deathyear FROM artists a WHERE a.artistid = (SELECT s.sculptorid FROM sculptures s GROUP BY s.sculptorid ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT deathyear FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(*) = (SELECT MIN(CNT) FROM (SELECT sculptorid, COUNT(*) AS CNT FROM sculptures GROUP BY sculptorid)))",
        "SELECT artists.deathyear FROM artists JOIN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(title) ASC LIMIT 1) AS least_producing_artist ON artists.artistid = least_producing_artist.sculptorid",
        "SELECT deathyear FROM artists WHERE artistid = (SELECT sculptorid FROM (SELECT sculptorid, COUNT(*) AS sc_counts FROM sculptures GROUP BY sculptorid ORDER BY sc_counts ASC LIMIT 1))",
        "SELECT a.deathyear FROM artists as a INNER JOIN (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptorid) ASC LIMIT 1) b ON a.artistid = b.sculptorid",
        "SELECT MAX(deathyear) FROM artists WHERE artistid IN (SELECT sculptorid FROM sculptures GROUP BY sculptorid HAVING COUNT(sculptorid) = (SELECT MIN(total) FROM (SELECT COUNT(sculptorid) AS total FROM sculptures GROUP BY sculptorid)))",
        "SELECT artists.deathyear FROM artists JOIN (SELECT COUNT(*), sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) ASC LIMIT 1) min_sculptors ON min_sculptors.sculptorid = artists.artistid",
        "SELECT deathyear FROM artists WHERE artistid = (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(*) ASC LIMIT 1)",
        "SELECT deathyear FROM artists INNER JOIN (SELECT sculptorid, COUNT(*) AS num_sculptures FROM sculptures GROUP BY sculptorid HAVING num_sculptures = (SELECT MIN(total) FROM (SELECT COUNT(*) AS total FROM sculptures GROUP BY sculptorid))) AS least_sculptures ON artists.artistid = least_sculptures.sculptorid",
        "SELECT deathyear FROM artists WHERE artistid = (SELECT sculptorid FROM (SELECT sculptorid FROM sculptures GROUP BY sculptorid ORDER BY COUNT(sculptorid) LIMIT 1))"
      ]
    ]
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "nlq": "What are the id and height of the painting with the longest width in gallery 240?",
    "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' AND width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT p.paintingid, p.height_mm FROM paintings p WHERE p.location = 'Gallery 240' AND p.width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC, paintingid ASC LIMIT 1",
        "SELECT paintingid, height_mm FROM paintings WHERE location = 'Gallery 240' AND width_mm = (SELECT MAX(p.width_mm) FROM paintings p WHERE p.location = 'Gallery 240')",
        "SELECT p.paintingid AS id, p.height_mm AS height FROM paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1",
        "SELECT p.paintingid, p.height_mm FROM paintings AS p WHERE p.location = 'Gallery 240' AND p.width_mm = (SELECT MAX(w.width_mm) FROM paintings w WHERE w.location = 'Gallery 240')"
      ]
    ]
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "nlq": "Tell me the height and id number of the widest painting in gallery 240.",
    "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT paintingid, height_mm FROM paintings WHERE width_mm = (SELECT MAX(width_mm) FROM paintings WHERE location = 'Gallery 240') AND location = 'Gallery 240'",
        "SELECT height_mm, paintingid FROM paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
        "SELECT p.height_mm, p.paintingid FROM paintings p WHERE p.location = 'Gallery 240' AND width_mm = (SELECT MAX(p2.width_mm) FROM paintings p2 WHERE p2.location = 'Gallery 240')",
        "SELECT height_mm, paintingid FROM (SELECT * FROM paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC) LIMIT 1",
        "SELECT p.height_mm, p.paintingid FROM paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1",
        "SELECT paintingid, height_mm FROM paintings ORDER BY width_mm DESC, location = 'Gallery 240' DESC LIMIT 1",
        "SELECT top.height_mm, top.paintingid FROM (SELECT * FROM paintings WHERE location = 'Gallery 240') AS top ORDER BY top.width_mm DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "nlq": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
    "infer_predictions": [
      [
        "SELECT p.paintingid FROM paintings p WHERE p.year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT p.paintingid FROM paintings p WHERE NOT EXISTS (SELECT 1 FROM paintings WHERE location = 'Gallery 240' AND year <= p.year)",
        "SELECT p.paintingid FROM paintings p WHERE p.year < (SELECT MIN(p2.year) FROM paintings p2 WHERE p2.location = 'Gallery 240')",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MIN(p.year) FROM paintings p WHERE p.location = 'Gallery 240')",
        "SELECT p.paintingid FROM paintings p WHERE p.year < (SELECT MIN(year) FROM paintings p2 WHERE p2.location = 'Gallery 240')"
      ]
    ]
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "nlq": "What is the id of every painting created before the oldest painting in gallery 240?",
    "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
    "infer_predictions": [
      [
        "SELECT p.paintingid FROM paintings p WHERE p.year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240')",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MIN(p.year) FROM paintings p WHERE p.location = 'Gallery 240')",
        "SELECT p.paintingid FROM paintings p INNER JOIN (SELECT MIN(year) AS min_year FROM paintings WHERE location = 'Gallery 240') min_p ON p.year < min_p.min_year",
        "SELECT paintingid FROM paintings WHERE year < (SELECT year FROM paintings WHERE location = 'Gallery 240' ORDER BY year ASC LIMIT 1)",
        "SELECT p.paintingid FROM paintings p LEFT JOIN (SELECT MIN(year) min_y FROM paintings WHERE location = 'Gallery 240') AS years ON p.year < years.min_y WHERE years.min_y IS NOT NULL",
        "SELECT paintingid FROM paintings WHERE year < (SELECT MIN(year) FROM paintings WHERE location = 'Gallery 240' ORDER BY year)"
      ]
    ]
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "nlq": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings AS p WHERE p.height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900)",
        "SELECT paintingid FROM paintings WHERE height_mm > (SELECT MAX(p.height_mm) FROM paintings p WHERE p.year > 1900)",
        "SELECT p.paintingid FROM paintings p WHERE NOT EXISTS (SELECT 1 FROM paintings pp WHERE pp.year > 1900 AND pp.height_mm >= p.height_mm)",
        "SELECT p.paintingid FROM paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM paintings AS pp WHERE pp.year > 1900)"
      ]
    ]
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "nlq": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
    "infer_predictions": [
      [
        "SELECT paintingid FROM paintings WHERE height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900)",
        "SELECT p.paintingid FROM paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM paintings WHERE year > 1900)",
        "SELECT paintingid FROM paintings p WHERE height_mm > (SELECT MAX(p2.height_mm) FROM paintings p2 WHERE p2.year > 1900)",
        "SELECT p.paintingid FROM paintings p JOIN (SELECT height_mm as max_post_1900_height FROM paintings ORDER BY height_mm DESC LIMIT 1) max_p ON p.height_mm > max_p.max_post_1900_height",
        "SELECT p.paintingid FROM paintings p, (SELECT MAX(height_mm) AS max_height FROM paintings WHERE year > 1900) max_table WHERE p.height_mm > max_table.max_height",
        "SELECT p.paintingid FROM paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM paintings p2 WHERE p2.year > 1900 GROUP BY p2.year HAVING p2.year > 1900)"
      ]
    ]
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "nlq": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT fname, lname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE medium = 'oil' GROUP BY artists.artistid ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT a.fname, a.lname FROM artists a INNER JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid ORDER BY COUNT(p.paintingid) DESC LIMIT 3",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(paintingid) DESC LIMIT 3)",
        "SELECT artists.fname, artists.lname FROM artists JOIN (SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 3) AS highest ON artists.artistid = highest.painterid",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT DISTINCT SUB.prID FROM (SELECT painterid AS prID, COUNT(*) AS countM FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY countM DESC LIMIT 3) AS SUB)",
        "SELECT b.fname, b.lname FROM artists AS b WHERE EXISTS (SELECT 1 FROM paintings AS p WHERE p.painterid = b.artistid AND p.medium = 'oil' GROUP BY p.painterid HAVING COUNT(p.paintingid) ORDER BY COUNT(p.paintingid) DESC LIMIT 3)",
        "SELECT artists.fname, artists.lname FROM artists JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' GROUP BY artists.artistid ORDER BY COUNT(paintings.painterid) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "nlq": "Which artists have the most paintings in oil?",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a JOIN paintings p ON a.artistid = p.painterid WHERE p.medium = 'oil' GROUP BY a.artistid ORDER BY COUNT(p.paintingid) DESC LIMIT 1",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT artists.fname, artists.lname FROM artists INNER JOIN paintings ON artists.artistid = paintings.painterid WHERE paintings.medium = 'oil' GROUP BY artists.artistid ORDER BY COUNT(paintings.paintingid) DESC LIMIT 1",
        "SELECT a.fname, a.lname FROM (SELECT painterid, COUNT(*) AS cnt FROM paintings WHERE medium = 'oil' GROUP BY painterid) pm JOIN artists a ON pm.painterid = a.artistid ORDER BY pm.cnt DESC LIMIT 1",
        "SELECT a.fname, a.lname FROM artists a, paintings p WHERE a.artistid = p.painterid AND p.medium = 'oil' GROUP BY a.artistid ORDER BY COUNT(p.paintingid) DESC LIMIT 1",
        "SELECT artists.fname, artists.lname FROM artists JOIN (SELECT painterid FROM paintings WHERE medium = 'oil' GROUP BY painterid ORDER BY COUNT(*) DESC LIMIT 1) p ON artists.artistid = p.painterid"
      ]
    ]
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "nlq": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT paintingid, location, title FROM paintings WHERE medium = 'oil' ORDER BY year",
        "SELECT p.paintingid, p.location, p.title FROM paintings p WHERE p.medium = 'oil' ORDER BY p.year",
        "SELECT paintingid AS id, location AS loc, title AS title FROM paintings WHERE medium = 'oil' ORDER BY year ASC",
        "SELECT paintingid, location, title FROM paintings WHERE medium LIKE 'oil' ORDER BY year ASC",
        "SELECT p.paintingid, p.location, p.title FROM paintings p WHERE p.medium LIKE 'oil' ORDER BY p.year ASC",
        "SELECT paintingid, location, title FROM paintings WHERE medium IN ('oil') ORDER BY year"
      ]
    ]
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "nlq": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
    "infer_predictions": [
      [
        "SELECT paintingid, location, title FROM paintings WHERE medium = 'oil' ORDER BY year",
        "SELECT P.paintingid, P.location, P.title FROM paintings P WHERE P.medium = 'oil' ORDER BY P.year"
      ]
    ]
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "nlq": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
    "infer_predictions": [
      [
        "SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title ASC",
        "SELECT p.year, p.location, p.title FROM paintings p WHERE p.height_mm > 1000 ORDER BY p.title",
        "SELECT paintings.year AS Year, paintings.location AS Location, paintings.title AS Title FROM paintings WHERE paintings.height_mm > 1000 ORDER BY paintings.title",
        "SELECT * FROM (SELECT year, location, title FROM paintings WHERE height_mm > 1000) ORDER BY title",
        "SELECT yr, loc, ttl FROM (SELECT year AS yr, location AS loc, title AS ttl, height_mm FROM paintings) WHERE height_mm > 1000 ORDER BY ttl",
        "SELECT year, location, title FROM (SELECT * FROM paintings WHERE height_mm > 1000) ORDER BY title ASC",
        "SELECT p.year, p.location, p.title FROM (SELECT * FROM paintings WHERE height_mm > 1000) AS p ORDER BY p.title"
      ]
    ]
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "nlq": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
    "infer_predictions": [
      [
        "SELECT p.year, p.location, p.title FROM paintings p WHERE p.height_mm > 1000 ORDER BY p.title ASC",
        "SELECT year, location, title FROM paintings WHERE height_mm > 1000 ORDER BY title",
        "SELECT p.year AS Year, p.location AS Location, p.title AS Title FROM paintings p WHERE p.height_mm > 1000 ORDER BY p.title ASC",
        "SELECT Year, Location, Title FROM (SELECT year, location, title FROM paintings WHERE height_mm > 1000) ORDER BY Title",
        "SELECT * FROM (SELECT year, location, title FROM paintings WHERE height_mm > 1000) ORDER BY title ASC"
      ]
    ]
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "nlq": "Find the first and last name of artists who have painting but no sculpture work.",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a WHERE EXISTS (SELECT 1 FROM paintings p WHERE p.painterid = a.artistid) AND NOT EXISTS (SELECT 1 FROM sculptures s WHERE s.sculptorid = a.artistid)",
        "SELECT a.fname, a.lname FROM artists a JOIN paintings p ON p.painterid = a.artistid LEFT JOIN sculptures s ON s.sculptorid = a.artistid WHERE s.sculptureid IS NULL GROUP BY a.artistid",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) AND artistid NOT IN (SELECT sculptorid FROM sculptures)",
        "SELECT DISTINCT a.fname, a.lname FROM artists a, paintings p WHERE a.artistid = p.painterid AND a.artistid NOT IN (SELECT sculptorid FROM sculptures)",
        "SELECT ar.fname, ar.lname FROM artists ar WHERE EXISTS (SELECT * FROM paintings WHERE painterid = ar.artistid) AND NOT EXISTS (SELECT * FROM sculptures WHERE sculptorid = ar.artistid)",
        "SELECT artists.fname, artists.lname FROM artists INNER JOIN paintings ON paintings.painterid = artists.artistid LEFT OUTER JOIN sculptures ON sculptures.sculptorid = artists.artistid WHERE sculptures.sculptureid IS NULL",
        "SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT painterid FROM paintings) AND a.artistid NOT IN (SELECT sculptorid FROM sculptures)",
        "WITH PainterOnly AS ( SELECT painterid FROM paintings EXCEPT SELECT sculptorid FROM sculptures ) SELECT a.fname, a.lname FROM artists a JOIN PainterOnly po ON a.artistid = po.painterid",
        "SELECT ar.fname, ar.lname FROM artists ar WHERE ar.artistid IN (SELECT p.painterid FROM paintings p LEFT JOIN sculptures s ON p.painterid = s.sculptorid WHERE s.sculptorid IS NULL)",
        "SELECT ar.fname, ar.lname FROM artists ar JOIN paintings pa ON ar.artistid = pa.painterid WHERE NOT EXISTS (SELECT 1 FROM sculptures sc WHERE sc.sculptorid = ar.artistid)"
      ]
    ]
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "nlq": "What are the first and last names of the artists who did not sculpt but could paint.",
    "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
    "infer_predictions": [
      [
        "SELECT a.fname, a.lname FROM artists a WHERE a.artistid IN (SELECT p.painterid FROM paintings p) AND a.artistid NOT IN (SELECT s.sculptorid FROM sculptures s)",
        "SELECT fname, lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings) AND artistid NOT IN (SELECT sculptorid FROM sculptures)",
        "SELECT artists.fname, artists.lname FROM artists JOIN paintings ON artists.artistid = paintings.painterid LEFT JOIN sculptures ON artists.artistid = sculptures.sculptorid WHERE sculptures.sculptorid IS NULL",
        "SELECT ar.fname, ar.lname FROM artists ar WHERE EXISTS (SELECT 1 FROM paintings pa WHERE pa.painterid = ar.artistid) AND NOT EXISTS (SELECT 1 FROM sculptures sc WHERE sc.sculptorid = ar.artistid)",
        "SELECT artists.fname, artists.lname FROM artists WHERE artistid IN (SELECT painterid FROM paintings EXCEPT SELECT sculptorid FROM sculptures)",
        "SELECT DISTINCT A.fname, A.lname FROM artists A JOIN paintings P ON A.artistid = P.painterid WHERE NOT EXISTS (SELECT 1 FROM sculptures S WHERE S.sculptorid = A.artistid)",
        "SELECT artists.fname, artists.lname FROM artists NATURAL JOIN paintings WHERE NOT EXISTS (SELECT 1 FROM sculptures WHERE sculptures.sculptorid = artists.artistid)"
      ]
    ]
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "nlq": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 AND p.mediumon != 'canvas'",
        "SELECT p.location FROM paintings p WHERE p.year < 1885 AND p.mediumon <> 'canvas' GROUP BY p.location",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 AND NOT p.mediumon = 'canvas'",
        "SELECT DISTINCT location FROM paintings WHERE year < 1885 AND mediumon NOT LIKE 'canvas'",
        "SELECT p.location FROM paintings p WHERE p.year < 1885 EXCEPT SELECT p.location FROM paintings p WHERE p.mediumon = 'canvas'",
        "SELECT p.location FROM paintings p LEFT JOIN paintings p2 ON p.location = p2.location AND p2.mediumon = 'canvas' WHERE p.year < 1885 AND p2.paintingid IS NULL",
        "SELECT location FROM (SELECT location, mediumon FROM paintings WHERE year < 1885) WHERE mediumon != 'canvas'",
        "SELECT DISTINCT p.location FROM paintings p WHERE p.year < 1885 AND p.mediumon NOT IN ('canvas')",
        "SELECT DISTINCT p.location FROM paintings p INNER JOIN (SELECT DISTINCT location FROM paintings WHERE mediumon <> 'canvas') pm ON p.location = pm.location WHERE p.year < 1885"
      ]
    ]
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "nlq": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
    "infer_predictions": [
      [
        "SELECT title, year, location FROM paintings WHERE year < 1885 AND mediumon != 'canvas'",
        "SELECT p.title, p.year, p.location FROM paintings AS p WHERE p.year < 1885 AND p.mediumon NOT LIKE 'canvas'",
        "SELECT paintings.title, paintings.year, paintings.location FROM paintings WHERE paintings.year < 1885 AND paintings.mediumon <> 'canvas'",
        "SELECT title, year, location FROM paintings WHERE year < 1885 AND mediumon IS NOT 'canvas'",
        "SELECT p.location, p.title, p.year FROM paintings p WHERE p.year < 1885 AND p.mediumon != (SELECT 'canvas')",
        "SELECT location, year, title FROM paintings WHERE mediumon NOT IN ('canvas') AND year < 1885",
        "WITH NotCanvas AS (SELECT title, year, location FROM paintings WHERE mediumon <> 'canvas' AND year < 1885) SELECT * FROM NotCanvas"
      ]
    ]
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "nlq": "How many races are there?",
    "gold": "SELECT count(*) FROM race",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM race",
        "SELECT COUNT(race_name) FROM race",
        "SELECT COUNT(1) FROM race",
        "SELECT COUNT(race_name) FROM race WHERE race_name IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT race_name FROM race)",
        "SELECT COUNT(*) FROM race WHERE race_name IS NOT NULL",
        "SELECT COUNT(DISTINCT race_name) FROM race WHERE race_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "nlq": "Count the number of races.",
    "gold": "SELECT count(*) FROM race",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM race",
        "SELECT COUNT(race_name) FROM race",
        "SELECT COUNT(1) FROM race",
        "SELECT (SELECT COUNT(*) FROM race)",
        "SELECT COUNT(*) AS NumberOfRaces FROM race",
        "SELECT COUNT(*) FROM (SELECT * FROM race)",
        "SELECT COUNT(r.race_name) FROM race r"
      ]
    ]
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "nlq": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
    "infer_predictions": [
      [
        "SELECT winning_driver, winning_team FROM race ORDER BY winning_team ASC",
        "SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC",
        "SELECT r.winning_driver AS Driver, r.winning_team AS Team FROM race r ORDER BY Team ASC",
        "SELECT winning_driver AS Winner, winning_team FROM race ORDER BY winning_team ASC",
        "SELECT winning_driver, winning_team FROM race GROUP BY winning_driver, winning_team ORDER BY winning_team",
        "SELECT r.winning_driver, r.winning_team FROM race r ORDER BY winning_team COLLATE NOCASE ASC",
        "SELECT winning_driver AS winningDriver, winning_team AS winningTeam FROM race ORDER BY winning_team ASC"
      ]
    ]
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "nlq": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
    "infer_predictions": [
      [
        "SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC",
        "SELECT winning_driver, winning_team FROM race ORDER BY winning_team",
        "SELECT r1.winning_driver, r1.winning_team FROM race r1 ORDER BY r1.winning_team ASC",
        "SELECT * FROM (SELECT winning_driver, winning_team FROM race) AS temp ORDER BY temp.winning_team",
        "SELECT winning_driver, winning_team FROM race r WHERE 1 = 1 ORDER BY winning_team ASC",
        "SELECT r.winning_driver, r.winning_team FROM race r WHERE r.winning_team IS NOT NULL ORDER BY r.winning_team",
        "SELECT r.winning_driver, r.winning_team FROM race AS r ORDER BY r.winning_team ASC LIMIT 99999999",
        "SELECT winning_driver, winning_team FROM race r GROUP BY r.winning_driver, r.winning_team ORDER BY r.winning_team",
        "SELECT DISTINCT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team",
        "SELECT r2.winning_driver, r2.winning_team FROM race r2 ORDER BY r2.winning_team ASC"
      ]
    ]
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "nlq": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.winning_driver FROM race r WHERE r.pole_position != 'Junior Strous'",
        "SELECT r.winning_driver FROM race r WHERE r.pole_position <> 'Junior Strous' GROUP BY r.winning_driver",
        "SELECT DISTINCT winning_driver FROM race WHERE pole_position NOT LIKE 'Junior Strous'",
        "SELECT DISTINCT r1.winning_driver FROM race r1 WHERE NOT r1.pole_position = 'Junior Strous'",
        "SELECT r.winning_driver FROM (SELECT * FROM race WHERE pole_position != 'Junior Strous') r",
        "SELECT win_driver.winning_driver FROM (SELECT winning_driver, pole_position FROM race) AS win_driver WHERE win_driver.pole_position != 'Junior Strous'",
        "SELECT winning_driver FROM race GROUP BY winning_driver HAVING pole_position != 'Junior Strous'",
        "SELECT r.winning_driver FROM race r WHERE EXISTS (SELECT 1 FROM race r2 WHERE r2.winning_driver = r.winning_driver AND r2.pole_position != 'Junior Strous')",
        "SELECT r.winning_driver FROM race r INNER JOIN race r2 ON r.winning_driver = r2.winning_driver WHERE r2.pole_position != 'Junior Strous'",
        "SELECT r.winning_driver FROM race r WHERE r.winning_driver IN (SELECT winning_driver FROM race WHERE pole_position != 'Junior Strous')"
      ]
    ]
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "nlq": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
    "infer_predictions": [
      [
        "SELECT d.driver_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE r.winning_driver != 'Junior Strous'",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE winning_driver != 'Junior Strous' AND winning_driver != pole_position)",
        "SELECT d.driver_name FROM driver d INNER JOIN race r ON d.driver_id = r.driver_id WHERE r.winning_driver <> r.pole_position AND r.winning_driver <> 'Junior Strous'",
        "SELECT driver.driver_name FROM driver JOIN race ON driver.driver_id = race.driver_id WHERE race.winning_driver NOT IN ('Junior Strous') AND race.winning_driver != race.pole_position",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE NOT (winning_driver = 'Junior Strous' OR winning_driver = pole_position))",
        "SELECT d.driver_name FROM driver d, race r WHERE d.driver_id = r.driver_id AND r.winning_driver <> r.pole_position AND r.winning_driver <> 'Junior Strous'",
        "SELECT DISTINCT d.driver_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.winning_driver <> 'Junior Strous' AND r.winning_driver <> r.pole_position",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE winning_driver <> 'Junior Strous' AND winning_driver <> pole_position)",
        "SELECT driver_name FROM driver d INNER JOIN (SELECT driver_id, winning_driver, pole_position FROM race WHERE winning_driver <> 'Junior Strous' AND winning_driver <> pole_position) r ON d.driver_id = r.driver_id",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race r WHERE r.winning_driver != r.pole_position AND r.winning_driver != 'Junior Strous')"
      ]
    ]
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "nlq": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
    "infer_predictions": [
      [
        "SELECT constructor FROM driver ORDER BY age ASC",
        "SELECT d.constructor FROM driver d ORDER BY d.age",
        "SELECT constructor FROM driver GROUP BY constructor, age ORDER BY age",
        "SELECT constructor FROM (SELECT * FROM driver ORDER BY age) AS sorted_drivers",
        "SELECT d.constructor FROM driver d GROUP BY d.constructor, d.age ORDER BY age ASC",
        "SELECT cons.constructor FROM (SELECT constructor, age FROM driver) AS cons ORDER BY cons.age",
        "SELECT cons FROM (SELECT constructor AS cons, age FROM driver) ORDER BY age ASC"
      ]
    ]
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "nlq": "Return the different constructors of drivers, ordered by age ascending.",
    "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.constructor FROM driver d ORDER BY d.age ASC",
        "SELECT DISTINCT constructor FROM driver ORDER BY age",
        "SELECT constructor FROM (SELECT DISTINCT constructor, age FROM driver) ORDER BY age ASC",
        "SELECT constructor FROM driver GROUP BY constructor HAVING COUNT(*) >= 1 ORDER BY age ASC",
        "SELECT DISTINCT constructor FROM (SELECT constructor, age FROM driver) AS subquery ORDER BY age ASC",
        "SELECT DISTINCT d.constructor FROM driver d GROUP BY d.constructor ORDER BY d.age",
        "SELECT DISTINCT constructor FROM driver WHERE constructor IS NOT NULL ORDER BY age ASC",
        "SELECT DISTINCT constructor FROM driver d JOIN race r ON d.driver_id = r.driver_id ORDER BY d.age ASC",
        "SELECT * FROM (SELECT DISTINCT constructor FROM driver ORDER BY age) AS unique_constructors"
      ]
    ]
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "nlq": "What are the distinct entrant types of drivers aged 20 or older?",
    "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
    "infer_predictions": [
      [
        "SELECT DISTINCT entrant FROM driver WHERE age >= 20",
        "SELECT DISTINCT d.entrant FROM driver d WHERE d.age >= 20",
        "SELECT DISTINCT entrant FROM driver GROUP BY entrant HAVING age >= 20",
        "SELECT DISTINCT d.entrant FROM driver d WHERE d.age >= 20 ORDER BY d.entrant",
        "SELECT DISTINCT entrant FROM driver WHERE age >= 20 AND entrant IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "nlq": "Give the different entrant types for drivers at least 20 years old.",
    "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.entrant FROM driver d WHERE d.age >= 20",
        "SELECT DISTINCT entrant FROM driver WHERE age >= 20",
        "SELECT d.entrant FROM driver d GROUP BY d.entrant HAVING MIN(d.age) >= 20",
        "SELECT DISTINCT d.entrant FROM driver d WHERE EXISTS (SELECT 1 FROM driver x WHERE x.driver_id = d.driver_id AND x.age >= 20)",
        "SELECT DISTINCT entrant FROM (SELECT entrant, age FROM driver) AS subquery WHERE age >= 20",
        "SELECT DISTINCT d.entrant FROM (SELECT * FROM driver WHERE age >= 20) d",
        "SELECT DISTINCT d.entrant FROM driver d WHERE d.age >= 20 AND entrant IS NOT NULL",
        "SELECT DISTINCT d.entrant FROM driver d INNER JOIN race r ON d.driver_id = r.driver_id WHERE d.age >= 20"
      ]
    ]
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "nlq": "What are the maximum and minimum age of driver?",
    "gold": "SELECT max(Age) ,  min(Age) FROM driver",
    "infer_predictions": [
      [
        "SELECT MAX(age) AS MaximumAge, MIN(age) AS MinimumAge FROM driver;",
        "SELECT MAX(d.age) AS MaxAge, MIN(d.age) AS MinAge FROM driver d;",
        "SELECT (SELECT MAX(age) FROM driver), (SELECT MIN(age) FROM driver);",
        "SELECT (SELECT MAX(driver.age) FROM driver), (SELECT MIN(driver.age) FROM driver);",
        "SELECT MAXIMUM, MINIMUM FROM (SELECT MAX(age) AS MAXIMUM, MIN(age) AS MINIMUM FROM driver);",
        "SELECT AGEMAX, AGEMIN FROM (SELECT MAX(d.age) AS AGEMAX, MIN(d.age) AS AGEMIN FROM driver d);",
        "SELECT * FROM (SELECT MAX(age) Maximum, MIN(age) Minimum FROM driver) AS edge_cases;",
        "SELECT AGE_VALUES.MaxAge, AGE_VALUES.MinAge FROM (SELECT MAX(age) AS MaxAge, MIN(age) AS MinAge FROM driver) AS AGE_VALUES;"
      ]
    ]
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "nlq": "Return the maximum and minimum age across drivers.",
    "gold": "SELECT max(Age) ,  min(Age) FROM driver",
    "infer_predictions": [
      [
        "SELECT MAX(age) AS MaxAge, MIN(age) AS MinAge FROM driver;",
        "SELECT MAX(d.age) AS MaximumAge, MIN(d.age) AS MinimumAge FROM driver d;",
        "SELECT (SELECT MAX(age) FROM driver), (SELECT MIN(age) FROM driver);",
        "SELECT MAX(driver.age) as MaxAge, MIN(driver.age) as MinAge FROM driver;",
        "SELECT MAX(d.age), MIN(d.age) FROM driver d GROUP BY d.driver_id;",
        "SELECT (SELECT MAX(driver.age) FROM driver), (SELECT MIN(driver.age) FROM driver);",
        "SELECT (SELECT MAX(age) FROM driver WHERE age IS NOT NULL) AS MaxAge, (SELECT MIN(age) FROM driver WHERE age IS NOT NULL) AS MinAge FROM driver;",
        "SELECT max, min FROM (SELECT MAX(age) AS max, MIN(age) AS min FROM driver);",
        "SELECT * FROM (SELECT MAX(age) AS MaximumAge, MIN(age) AS MinimumAge FROM driver);",
        "SELECT MAX(driver.age), MIN(driver.age) FROM driver LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "nlq": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20",
        "SELECT COUNT(DISTINCT d.engine) FROM driver d WHERE d.age > 30 OR d.age < 20",
        "SELECT COUNT(DISTINCT engine) FROM driver WHERE age NOT BETWEEN 20 AND 30",
        "WITH filtered_drivers AS (SELECT engine FROM driver WHERE age > 30 OR age < 20) SELECT COUNT(DISTINCT engine) FROM filtered_drivers",
        "SELECT COUNT(DISTINCT engine) FROM (SELECT engine FROM driver WHERE age > 30 UNION SELECT engine FROM driver WHERE age < 20)",
        "SELECT COUNT(DISTINCT d.engine) FROM driver d WHERE d.age IN (SELECT age FROM driver WHERE age > 30 UNION SELECT age FROM driver WHERE age < 20)",
        "SELECT COUNT(DISTINCT engine) FROM driver WHERE age IN (SELECT age FROM driver WHERE age > 30 UNION ALL SELECT age FROM driver WHERE age < 20)",
        "SELECT DISTINCT COUNT(engine) FROM driver GROUP BY engine HAVING age > 30 OR age < 20",
        "SELECT COUNT(*) FROM (SELECT DISTINCT engine FROM driver WHERE age < 20 OR age > 30) AS unique_engines"
      ]
    ]
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "nlq": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20",
        "SELECT COUNT(*) FROM (SELECT DISTINCT engine FROM driver WHERE age > 30 OR age < 20) AS subquery",
        "SELECT COUNT(DISTINCT d.engine) FROM driver d WHERE d.age > 30 OR d.age < 20",
        "SELECT COUNT(DISTINCT engine) AS total_engines FROM driver WHERE age > 30 OR age < 20",
        "SELECT COUNT(DISTINCT engine) FROM driver WHERE age NOT BETWEEN 20 AND 30",
        "SELECT COUNT(DISTINCT engine) FROM (SELECT engine, age FROM driver WHERE age > 30 OR age < 20 GROUP BY engine, age) sub",
        "SELECT COUNT(*) FROM (SELECT DISTINCT engine FROM driver WHERE (age > 30 OR age < 20))",
        "SELECT DISTINCT COUNT(engine) FROM driver WHERE age IN (SELECT age FROM driver WHERE age < 20 OR age > 30) GROUP BY engine"
      ]
    ]
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "nlq": "List all names of drivers in descending alphabetical order.",
    "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver ORDER BY driver_name DESC",
        "SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC",
        "SELECT driver_name FROM driver d ORDER BY driver_name DESC",
        "SELECT derived.driver_name FROM (SELECT driver_name FROM driver) AS derived ORDER BY derived.driver_name DESC",
        "SELECT d.driver_name FROM (SELECT driver_name FROM driver) d ORDER BY d.driver_name DESC",
        "SELECT driver_name FROM (SELECT driver_name FROM driver ORDER BY driver_name DESC) AS subquery"
      ]
    ]
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "nlq": "What are the names of drivers, ordered descending alphabetically?",
    "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver ORDER BY driver_name DESC",
        "SELECT name FROM (SELECT driver_name AS name FROM driver) ORDER BY name DESC",
        "SELECT driver_name AS dname FROM driver ORDER BY dname DESC",
        "SELECT driver_name FROM (SELECT driver_name FROM driver) AS drivers ORDER BY drivers.driver_name DESC",
        "SELECT driver_name FROM driver ORDER BY UPPER(driver_name) DESC",
        "SELECT * FROM (SELECT driver_name FROM driver) ORDER BY driver_name DESC",
        "SELECT driver.driver_name FROM driver ORDER BY driver.driver_name DESC LIMIT 999999999",
        "SELECT driver_name FROM driver ORDER BY LENGTH(driver_name) DESC, driver_name DESC"
      ]
    ]
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "nlq": "Please show the names of drivers and the names of races they participate in.",
    "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
    "infer_predictions": [
      [
        "SELECT driver.driver_name, race.race_name FROM driver JOIN race ON driver.driver_id = race.driver_id",
        "SELECT d.driver_name, r.race_name FROM driver d INNER JOIN race r ON d.driver_id = r.driver_id",
        "SELECT driver_name, race_name FROM driver, race WHERE driver.driver_id = race.driver_id",
        "SELECT d.driver_name, r.race_name FROM driver AS d, race AS r WHERE d.driver_id = r.driver_id",
        "SELECT driver.driver_name, race.race_name FROM driver INNER JOIN race ON driver.driver_id = race.driver_id",
        "SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id",
        "SELECT d.driver_name AS DriverName, r.race_name AS RaceName FROM driver d JOIN race r ON d.driver_id = r.driver_id",
        "SELECT driver_name, race_name FROM driver JOIN race USING(driver_id)",
        "SELECT driver.driver_name, race.race_name FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id"
      ]
    ]
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "nlq": "What are the names of drivers and the names of the races they took part in?",
    "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
    "infer_predictions": [
      [
        "SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id",
        "SELECT driver_name, race_name FROM driver JOIN race ON driver.driver_id = race.driver_id",
        "SELECT D.driver_name, R.race_name FROM driver AS D INNER JOIN race AS R ON D.driver_id = R.driver_id",
        "SELECT driver.driver_name, race.race_name FROM driver, race WHERE driver.driver_id = race.driver_id",
        "SELECT d.driver_name, r.race_name FROM driver d, race r WHERE d.driver_id = r.driver_id",
        "SELECT driver_name, race_name FROM driver INNER JOIN race USING(driver_id)",
        "SELECT driver_name AS Driver, race_name AS Race FROM driver JOIN race ON driver.driver_id = race.driver_id",
        "SELECT driver_name, race_name FROM driver d INNER JOIN race r ON d.driver_id = r.driver_id",
        "SELECT d.driver_name AS DriverName, r.race_name AS RaceName FROM driver d INNER JOIN race r ON d.driver_id = r.driver_id",
        "SELECT d1.driver_name, r1.race_name FROM driver d1 JOIN race r1 ON d1.driver_id = r1.driver_id"
      ]
    ]
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "nlq": "Please show the names of drivers and the number of races they participate in.",
    "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
    "infer_predictions": [
      [
        "SELECT d.driver_name, COUNT(r.driver_id) FROM driver d JOIN race r ON d.driver_id = r.driver_id GROUP BY d.driver_name",
        "SELECT driver_name, COUNT(*) AS race_count FROM driver INNER JOIN race ON driver.driver_id = race.driver_id GROUP BY driver_name",
        "SELECT driver.driver_name, COUNT(race.race_name) AS num_races FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY driver.driver_name",
        "SELECT D.driver_name, COUNT(R.race_name) FROM driver D, race R WHERE D.driver_id = R.driver_id GROUP BY D.driver_name",
        "SELECT D.driver_name, (SELECT COUNT(*) FROM race R WHERE R.driver_id = D.driver_id) AS races_participated FROM driver D",
        "SELECT D.driver_name, COUNT(R.race_name) FROM driver AS D LEFT JOIN race AS R ON D.driver_id = R.driver_id GROUP BY D.driver_name",
        "SELECT d.driver_name, count(1) AS num_of_races FROM driver d LEFT JOIN race r ON d.driver_id = r.driver_id GROUP BY d.driver_name",
        "SELECT driver_name AS name, COUNT(race.race_name) AS race_count FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY driver.driver_id",
        "SELECT d.driver_name, COUNT(r.race_name) AS races_count FROM driver AS d LEFT OUTER JOIN race AS r ON d.driver_id = r.driver_id GROUP BY d.driver_name",
        "SELECT d.driver_name AS Driver, (SELECT COUNT(*) FROM race WHERE driver_id = d.driver_id) AS NumberOfRaces FROM driver d"
      ]
    ]
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "nlq": "How many races did each driver participate in?",
    "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
    "infer_predictions": [
      [
        "SELECT driver.driver_name, COUNT(race.driver_id) AS Races_Participated FROM driver JOIN race ON driver.driver_id = race.driver_id GROUP BY driver.driver_name",
        "SELECT driver.driver_name, COUNT(*) as Races_Participated FROM race INNER JOIN driver ON race.driver_id = driver.driver_id GROUP BY driver.driver_name",
        "SELECT D.driver_name, COUNT(R.driver_id) AS Races_Participated FROM driver D JOIN race R ON D.driver_id = R.driver_id GROUP BY D.driver_name",
        "SELECT D.driver_name, COUNT(R.driver_id) as Races_Participated FROM race R, driver D WHERE R.driver_id = D.driver_id GROUP BY D.driver_name",
        "SELECT driver_name, COUNT(race.driver_id) FROM driver, race WHERE driver.driver_id = race.driver_id GROUP BY driver_name",
        "SELECT D.driver_name AS Driver, COUNT(R.driver_id) AS Race_Count FROM driver D, race R WHERE D.driver_id = R.driver_id GROUP BY Driver",
        "SELECT D.driver_name, COUNT(*) AS race_participation_count FROM race JOIN driver D ON race.driver_id = D.driver_id GROUP BY D.driver_name",
        "SELECT DISTINCT driver_name, (SELECT COUNT(*) FROM race WHERE driver.driver_id = race.driver_id) AS num_races_from_subquery FROM driver ORDER BY driver_name",
        "SELECT driver_name, (SELECT COUNT(*) FROM race WHERE race.driver_id = driver.driver_id) AS races_participated FROM driver GROUP BY driver_name"
      ]
    ]
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "nlq": "Please show the age of the driver who participated in the most number of races.",
    "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.age FROM driver d JOIN (SELECT driver_id, COUNT(*) AS race_count FROM race GROUP BY driver_id ORDER BY race_count DESC LIMIT 1) rc ON d.driver_id = rc.driver_id",
        "SELECT age FROM driver WHERE driver_id = (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT d.age FROM driver d WHERE d.driver_id IN (SELECT r.driver_id FROM race r GROUP BY r.driver_id ORDER BY COUNT(r.driver_id) DESC LIMIT 1)",
        "SELECT age FROM driver WHERE driver_id = (SELECT driver_id FROM (SELECT driver_id, COUNT(driver_id) as num_races FROM race GROUP BY driver_id) tmp ORDER BY num_races DESC LIMIT 1)",
        "SELECT age FROM driver d INNER JOIN (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1) high_racer ON d.driver_id = high_racer.driver_id",
        "SELECT top_driver.age FROM (SELECT d.driver_id, d.age FROM driver d JOIN race r ON d.driver_id = r.driver_id GROUP BY d.driver_id ORDER BY COUNT(r.race_name) DESC LIMIT 1) top_driver",
        "SELECT d.age FROM driver d WHERE d.driver_id = (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(race_name) DESC LIMIT 1)",
        "SELECT age FROM (SELECT d.age, COUNT(r.driver_id) as num_races FROM driver d JOIN race r ON d.driver_id = r.driver_id GROUP BY r.driver_id ORDER BY num_races DESC LIMIT 1) t",
        "SELECT age FROM driver WHERE driver_id = (SELECT driver_id FROM (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(driver_id) DESC) s LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "nlq": "What is the age of the driver who raced in the most races?",
    "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT d.age FROM driver d WHERE d.driver_id = (SELECT r.driver_id FROM race r GROUP BY r.driver_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(driver_id) DESC LIMIT 1)",
        "SELECT DISTINCT d.age FROM driver d JOIN (SELECT driver_id, COUNT(*) AS races_count FROM race GROUP BY driver_id ORDER BY races_count DESC LIMIT 1) t ON d.driver_id = t.driver_id",
        "SELECT d.age FROM driver d INNER JOIN (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1) ranked ON d.driver_id = ranked.driver_id",
        "SELECT age FROM driver WHERE driver_id = (SELECT driver_id FROM (SELECT driver_id, COUNT(*) AS count FROM race GROUP BY driver_id ORDER BY count DESC LIMIT 1))",
        "SELECT (SELECT d.age FROM driver d WHERE d.driver_id = r.driver_id) FROM race r GROUP BY r.driver_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT age FROM driver d WHERE driver_id = (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) = (SELECT MAX(x.total) FROM (SELECT driver_id, COUNT(*) as total FROM race GROUP BY driver_id) x))",
        "SELECT d.age FROM driver d INNER JOIN (SELECT r.driver_id FROM race r GROUP BY r.driver_id ORDER BY COUNT(r.race_name) DESC LIMIT 1) top_race_driver ON top_race_driver.driver_id = d.driver_id",
        "SELECT MAX(d.age) FROM driver d WHERE d.driver_id IN (SELECT driver_id FROM race GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "nlq": "Please show the names and ages of the drivers who participated in at least two races.",
    "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) >= 2)",
        "SELECT d.driver_name, d.age FROM driver d JOIN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2) r ON d.driver_id = r.driver_id",
        "SELECT d.driver_name, d.age FROM driver d WHERE d.driver_id IN (SELECT r.driver_id FROM race r GROUP BY r.driver_id HAVING COUNT(r.driver_id) >= 2)",
        "SELECT d.driver_name, d.age FROM driver AS d WHERE EXISTS (SELECT 1 FROM race AS r WHERE r.driver_id = d.driver_id GROUP BY r.driver_id HAVING COUNT(*) >= 2)",
        "SELECT d.driver_name, d.age FROM driver d WHERE (SELECT COUNT(*) FROM race r WHERE r.driver_id = d.driver_id) >= 2",
        "SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(race_name) >= 2)",
        "SELECT d.driver_name, d.age FROM driver d INNER JOIN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) >= 2) qualified ON d.driver_id = qualified.driver_id",
        "SELECT driver_name, age FROM driver WHERE (SELECT COUNT(*) FROM race WHERE driver_id = driver.driver_id) >= 2",
        "SELECT driver_name, age FROM driver d WHERE EXISTS (SELECT NULL FROM race r WHERE r.driver_id = d.driver_id GROUP BY r.driver_id HAVING COUNT(*) >= 2)"
      ]
    ]
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "nlq": "What are the names and ages of drivers who raced in two or more races?",
    "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT D.driver_name, D.age FROM driver D WHERE D.driver_id IN (SELECT R.driver_id FROM race R GROUP BY R.driver_id HAVING COUNT(R.driver_id) >= 2)",
        "SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) > 1)",
        "SELECT DISTINCT D.driver_name, D.age FROM driver D INNER JOIN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2) AS Sub ON D.driver_id = Sub.driver_id",
        "SELECT driver_name, age FROM driver WHERE EXISTS (SELECT 1 FROM race WHERE race.driver_id = driver.driver_id GROUP BY driver_id HAVING COUNT(*) >= 2)",
        "SELECT driver_name, age FROM driver WHERE driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) >= 2)",
        "SELECT D.driver_name, D.age FROM driver D JOIN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(*) >= 2) S ON D.driver_id = S.driver_id",
        "SELECT driver_name, age FROM driver D WHERE driver_id IN (SELECT driver_id FROM (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(driver_id) > 1))",
        "SELECT DISTINCT driver_name, age FROM driver D, race R WHERE D.driver_id = R.driver_id GROUP BY R.driver_id HAVING COUNT(R.race_name) > 1",
        "SELECT D.driver_name, D.age FROM driver D JOIN race R ON D.driver_id = R.driver_id GROUP BY R.driver_id HAVING COUNT(R.driver_id) >= 2",
        "SELECT driver.driver_name, driver.age FROM driver WHERE driver.driver_id IN (SELECT driver_id FROM race GROUP BY driver_id HAVING COUNT(race_name) > 1)"
      ]
    ]
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "nlq": "Please list the names of races with drivers aged 26 or older participating.",
    "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
    "infer_predictions": [
      [
        "SELECT race_name FROM race JOIN driver ON race.driver_id = driver.driver_id WHERE driver.age >= 26",
        "SELECT race_name FROM race INNER JOIN driver ON race.driver_id = driver.driver_id WHERE age >= 26",
        "SELECT r.race_name FROM race r, driver d WHERE r.driver_id = d.driver_id AND d.age >= 26",
        "SELECT DISTINCT race_name FROM race r LEFT JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26",
        "SELECT race.race_name FROM race, driver WHERE race.driver_id = driver.driver_id AND driver.age >= 26",
        "SELECT r.race_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26",
        "SELECT race_name FROM race r INNER JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26",
        "SELECT DISTINCT r.race_name FROM race r, driver d WHERE r.driver_id = d.driver_id AND d.age >= 26",
        "SELECT DISTINCT r.race_name FROM race r INNER JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26"
      ]
    ]
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "nlq": "What are the names of races in which drivers 26 or older took part?",
    "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.race_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26",
        "SELECT r.race_name FROM race r, driver d WHERE r.driver_id = d.driver_id AND d.age >= 26 GROUP BY r.race_name",
        "SELECT race_name FROM race WHERE driver_id IN (SELECT driver_id FROM driver WHERE age >= 26)",
        "SELECT race.race_name FROM race INNER JOIN driver ON race.driver_id = driver.driver_id AND driver.age >= 26",
        "SELECT DISTINCT race_name FROM race INNER JOIN driver USING (driver_id) WHERE age >= 26",
        "SELECT race_name FROM (SELECT r.race_name, d.age FROM race r JOIN driver d ON r.driver_id = d.driver_id) WHERE age >= 26",
        "SELECT DISTINCT r.race_name FROM race AS r JOIN driver AS d ON r.driver_id = d.driver_id WHERE d.age >= 26",
        "SELECT r.race_name FROM race r WHERE EXISTS (SELECT 1 FROM driver d WHERE d.driver_id = r.driver_id AND d.age >= 26)",
        "SELECT r.race_name FROM race r LEFT JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26"
      ]
    ]
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "nlq": "List the names of drivers whose constructor is not \"Bugatti\".",
    "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE constructor <> 'Bugatti'",
        "SELECT driver_name FROM driver WHERE constructor IS NOT 'Bugatti'",
        "SELECT driver_name FROM driver WHERE NOT constructor = 'Bugatti'",
        "SELECT driver_name FROM driver WHERE constructor != 'Bugatti'",
        "SELECT d.driver_name FROM driver d WHERE d.constructor <> 'Bugatti'",
        "SELECT driver_name FROM driver WHERE constructor NOT IN ('Bugatti')",
        "SELECT driver_name FROM driver WHERE NOT (constructor = 'Bugatti')",
        "SELECT driver.driver_name FROM driver WHERE driver.constructor <> 'Bugatti'",
        "SELECT d.driver_name FROM driver d WHERE d.constructor != 'Bugatti'",
        "SELECT driver_name FROM driver WHERE constructor NOT LIKE 'Bugatti'"
      ]
    ]
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "nlq": "What are the names od drivers who did not have the constructor Bugatti?",
    "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE constructor <> 'Bugatti'",
        "SELECT d.driver_name FROM driver AS d WHERE d.constructor != 'Bugatti'",
        "SELECT D.driver_name FROM driver D WHERE D.constructor NOT LIKE 'Bugatti'",
        "SELECT driver_name FROM driver WHERE NOT constructor = 'Bugatti'",
        "SELECT DISTINCT driver_name FROM driver WHERE constructor IS NOT 'Bugatti'",
        "SELECT d.driver_name FROM driver d WHERE d.constructor NOT IN ('Bugatti')",
        "SELECT driver_name FROM driver WHERE constructor NOT IN (SELECT constructor FROM driver WHERE constructor = 'Bugatti')",
        "SELECT driver_name FROM driver WHERE 'Bugatti' <> constructor",
        "SELECT D.driver_name FROM driver AS D WHERE 'Bugatti' NOT LIKE constructor",
        "SELECT driver.driver_name FROM driver WHERE driver.constructor NOT LIKE 'Bugatti'"
      ]
    ]
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "nlq": "List different constructors and the number of drivers that use each constructor.",
    "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
    "infer_predictions": [
      [
        "SELECT constructor, COUNT(DISTINCT driver_id) FROM driver GROUP BY constructor",
        "SELECT d.constructor, COUNT(*) AS driver_count FROM driver d GROUP BY d.constructor",
        "SELECT constructor, COUNT(driver_id) AS total_drivers FROM driver GROUP BY constructor",
        "SELECT cons.constructor, COUNT(cons.driver_id) FROM (SELECT constructor, driver_id FROM driver) cons GROUP BY cons.constructor",
        "SELECT constructor, COUNT(unique_drivers.driver_id) FROM (SELECT DISTINCT driver_id, constructor FROM driver) as unique_drivers GROUP BY unique_drivers.constructor",
        "SELECT drivers.constructor, COUNT(drivers.driver_id) AS driver_total FROM driver drivers GROUP BY drivers.constructor",
        "SELECT d.constructor, COUNT(d.driver_id) FROM driver d GROUP BY d.constructor HAVING COUNT(d.driver_id) > 0",
        "SELECT d.constructor AS constructor_name, COUNT(distinct d.driver_id) FROM driver d GROUP BY d.constructor",
        "SELECT DISTINCT d.constructor, COUNT(DISTINCT d.driver_id) AS driver_count FROM driver AS d GROUP BY d.constructor",
        "SELECT COUNT(d.driver_id) AS num_drivers, d.constructor FROM driver d GROUP BY d.constructor ORDER BY num_drivers DESC"
      ]
    ]
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "nlq": "How many drivers use each constructor?",
    "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
    "infer_predictions": [
      [
        "SELECT constructor, COUNT(driver_id) FROM driver GROUP BY constructor",
        "SELECT constructor, COUNT(*) AS driver_count FROM driver GROUP BY constructor",
        "SELECT d.constructor, COUNT(d.driver_id) AS driver_count FROM driver d GROUP BY d.constructor",
        "SELECT constructor, COUNT(driver_id) AS count_of_drivers FROM driver GROUP BY constructor",
        "SELECT d.constructor, COUNT(*) FROM driver d GROUP BY d.constructor",
        "SELECT d.constructor, COUNT(d.driver_id) FROM driver d GROUP BY d.constructor",
        "SELECT d.constructor AS Constructor, COUNT(d.driver_id) AS Number_of_Drivers FROM driver d GROUP BY d.constructor",
        "SELECT constructor, COUNT(*) AS TotalDrivers FROM driver GROUP BY constructor",
        "SELECT constructor, COUNT(driver_id) AS NumberOfDrivers FROM driver GROUP BY constructor"
      ]
    ]
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "nlq": "List the most common type of engine used by drivers.",
    "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT D.engine FROM driver D GROUP BY D.engine ORDER BY COUNT(D.engine) DESC LIMIT 1",
        "SELECT top_engine.engine FROM (SELECT engine, COUNT(*) AS tot FROM driver GROUP BY engine) AS top_engine ORDER BY top_engine.tot DESC LIMIT 1",
        "SELECT engine FROM (SELECT engine, COUNT(engine) as freq FROM driver GROUP BY engine) AS EngineFreq ORDER BY freq DESC LIMIT 1",
        "SELECT first_value(engine) OVER (ORDER BY COUNT(engine) DESC) FROM driver GROUP BY engine LIMIT 1",
        "WITH EngineCounts AS (SELECT engine, COUNT(engine) AS num FROM driver GROUP BY engine) SELECT engine FROM EngineCounts ORDER BY num DESC LIMIT 1",
        "SELECT engine, COUNT(engine) AS engine_count FROM driver GROUP BY engine ORDER BY engine_count DESC LIMIT 1",
        "SELECT engine FROM driver WHERE engine = (SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT engine FROM (SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(engine) DESC) AS MostCommon LIMIT 1",
        "SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(counts) FROM (SELECT COUNT(engine) AS counts FROM driver GROUP BY engine))"
      ]
    ]
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "nlq": "What is the most common type of engine?",
    "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT d.engine FROM driver d GROUP BY d.engine ORDER BY COUNT(d.engine) DESC LIMIT 1",
        "SELECT top_engine FROM (SELECT engine as top_engine, COUNT(*) as freq FROM driver GROUP BY engine ORDER BY freq DESC) LIMIT 1",
        "SELECT engine FROM driver GROUP BY engine HAVING COUNT(engine) = (SELECT MAX(count) FROM (SELECT engine, COUNT(*) as count FROM driver GROUP BY engine))",
        "WITH EngineFrequency AS (SELECT engine, COUNT(*) AS freq FROM driver GROUP BY engine) SELECT engine FROM EngineFrequency ORDER BY freq DESC LIMIT 1",
        "SELECT engine FROM driver WHERE engine IN (SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT engine FROM (SELECT engine, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM driver GROUP BY engine) WHERE rank = 1",
        "SELECT engine FROM driver GROUP BY engine ORDER BY COUNT(engine) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "nlq": "List the types of engines that are used by at least two drivers.",
    "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT engine FROM driver GROUP BY engine HAVING COUNT(DISTINCT driver_id) >= 2",
        "SELECT DISTINCT d.engine FROM driver d JOIN driver d2 ON d.engine = d2.engine AND d.driver_id != d2.driver_id",
        "SELECT engine FROM (SELECT engine, COUNT(DISTINCT driver_id) AS num_drivers FROM driver GROUP BY engine) WHERE num_drivers >= 2",
        "SELECT d.engine FROM driver d WHERE EXISTS(SELECT 1 FROM driver WHERE engine = d.engine AND driver_id != d.driver_id) GROUP BY d.engine",
        "SELECT engine FROM driver WHERE engine IN (SELECT engine FROM driver GROUP BY engine HAVING COUNT(DISTINCT driver_id) > 1)",
        "SELECT d1.engine FROM driver d1 JOIN driver d2 ON d1.engine = d2.engine WHERE d1.driver_id <> d2.driver_id GROUP BY d1.engine",
        "WITH EngineUsage AS (SELECT engine, COUNT(DISTINCT driver_id) AS drv_count FROM driver GROUP BY engine) SELECT engine FROM EngineUsage WHERE drv_count >= 2",
        "SELECT d.engine FROM (SELECT engine, COUNT(*) AS driver_count FROM driver GROUP BY engine) d WHERE d.driver_count > 1",
        "SELECT DISTINCT d.engine FROM driver d INNER JOIN (SELECT engine FROM driver GROUP BY engine HAVING COUNT(DISTINCT driver_id) > 1) filtered_engines ON d.engine = filtered_engines.engine",
        "SELECT COUNT(DISTINCT driver_id), engine FROM driver GROUP BY engine HAVING COUNT(DISTINCT driver_id) >= 2"
      ]
    ]
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "nlq": "What are the engine types that are used by two or more drivers?",
    "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2",
        "SELECT d.engine FROM driver d GROUP BY d.engine HAVING COUNT(d.driver_id) > 1",
        "SELECT engine FROM driver GROUP BY engine HAVING COUNT(*) > 1",
        "SELECT d.engine FROM driver d WHERE d.engine IN (SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) > 1)",
        "WITH DriverCounts AS (SELECT engine, COUNT(driver_id) AS num_drivers FROM driver GROUP BY engine) SELECT engine FROM DriverCounts WHERE num_drivers >= 2",
        "SELECT DISTINCT engine FROM (SELECT engine, COUNT(driver_id) OVER (PARTITION BY engine) as ct FROM driver) WHERE ct >= 2",
        "SELECT engine FROM (SELECT engine, COUNT(engine) cnt FROM driver GROUP BY engine) tmp WHERE cnt >= 2",
        "SELECT engine FROM driver d1 WHERE EXISTS (SELECT 1 FROM driver d2 WHERE d1.engine = d2.engine GROUP BY engine HAVING COUNT(*) > 1)",
        "SELECT DISTINCT engine FROM driver WHERE engine IN (SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) >= 2)",
        "SELECT DISTINCT d.engine FROM driver d INNER JOIN (SELECT engine FROM driver GROUP BY engine HAVING COUNT(driver_id) > 1) sub ON d.engine = sub.engine"
      ]
    ]
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "nlq": "List the names of drivers that do not participate in any race.",
    "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race)",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r)",
        "SELECT driver_name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id)",
        "SELECT driver_name FROM driver EXCEPT SELECT driver_name FROM driver JOIN race ON driver.driver_id = race.driver_id",
        "SELECT driver.driver_name FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id WHERE race.driver_id IS NULL",
        "SELECT d.driver_name FROM driver d LEFT OUTER JOIN race r ON d.driver_id = r.driver_id WHERE r.driver_id IS NULL",
        "SELECT DISTINCT driver_name FROM driver WHERE driver_id NOT IN (SELECT DISTINCT driver_id FROM race)",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.driver_id IS NOT NULL)",
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE driver_id IS NOT NULL)",
        "SELECT DISTINCT driver.driver_name FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id WHERE race.race_name IS NULL"
      ]
    ]
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "nlq": "What are names of drivers who did not take part in a race?",
    "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
    "infer_predictions": [
      [
        "SELECT driver.driver_name FROM driver WHERE driver.driver_id NOT IN (SELECT race.driver_id FROM race)",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT DISTINCT r.driver_id FROM race r)",
        "SELECT d.driver_name FROM driver d LEFT JOIN race r ON d.driver_id = r.driver_id WHERE r.driver_id IS NULL",
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE driver_id IS NOT NULL)",
        "SELECT d.driver_name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id)",
        "SELECT driver_name FROM driver EXCEPT SELECT driver_name FROM driver JOIN race ON driver.driver_id = race.driver_id",
        "SELECT driver_name FROM driver WHERE NOT EXISTS (SELECT driver_id FROM race WHERE driver.driver_id = race.driver_id)",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.driver_id IS NOT NULL)",
        "SELECT d.driver_name FROM driver d LEFT JOIN race r ON d.driver_id = r.driver_id WHERE r.race_name IS NULL",
        "SELECT DISTINCT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r)"
      ]
    ]
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "nlq": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
    "infer_predictions": [
      [
        "SELECT DISTINCT d1.constructor FROM driver d1 JOIN driver d2 ON d1.constructor = d2.constructor WHERE d1.age < 20 AND d2.age > 30",
        "SELECT constructor FROM driver WHERE constructor IN (SELECT constructor FROM driver WHERE age < 20) AND constructor IN (SELECT constructor FROM driver WHERE age > 30)",
        "SELECT DISTINCT young_drivers.constructor FROM driver AS young_drivers INNER JOIN driver AS old_drivers ON young_drivers.constructor = old_drivers.constructor WHERE young_drivers.age < 20 AND old_drivers.age > 30",
        "SELECT DISTINCT constructor FROM driver GROUP BY constructor HAVING MIN(age) < 20 AND MAX(age) > 30",
        "SELECT d.constructor FROM driver d WHERE EXISTS (SELECT 1 FROM driver WHERE constructor = d.constructor AND age < 20) AND EXISTS (SELECT 1 FROM driver WHERE constructor = d.constructor AND age > 30)",
        "SELECT constructor FROM (SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30)",
        "SELECT DISTINCT d.constructor FROM driver d, driver e WHERE d.constructor = e.constructor AND d.age < 20 AND e.age > 30",
        "SELECT DISTINCT c1.constructor FROM driver c1, driver c2 WHERE c1.constructor = c2.constructor AND c1.age < 20 AND c2.age > 30",
        "SELECT d.constructor FROM (SELECT constructor, MAX(age) AS old, MIN(age) AS young FROM driver GROUP BY constructor HAVING old > 30 AND young < 20) d"
      ]
    ]
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "nlq": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
    "infer_predictions": [
      [
        "SELECT DISTINCT constructor FROM driver WHERE age < 20 INTERSECT SELECT DISTINCT constructor FROM driver WHERE age > 30",
        "SELECT young.constructors FROM (SELECT DISTINCT constructor as constructors FROM driver WHERE age < 20) young JOIN (SELECT DISTINCT constructor as constructors FROM driver WHERE age > 30) old ON young.constructors = old.constructors",
        "SELECT constructor FROM driver WHERE constructor IN (SELECT constructor FROM driver WHERE age < 20) AND constructor IN (SELECT constructor FROM driver WHERE age > 30)",
        "WITH YoungDrivers AS (SELECT DISTINCT constructor FROM driver WHERE age < 20), OldDrivers AS (SELECT DISTINCT constructor FROM driver WHERE age > 30) SELECT YoungDrivers.constructor FROM YoungDrivers JOIN OldDrivers ON YoungDrivers.constructor = OldDrivers.constructor",
        "SELECT DISTINCT d1.constructor FROM driver d1 WHERE d1.age < 20 AND EXISTS (SELECT 1 FROM driver d2 WHERE d2.age > 30 AND d1.constructor = d2.constructor)",
        "SELECT DISTINCT a.constructor FROM driver a WHERE a.age < 20 AND a.constructor IN (SELECT b.constructor FROM driver b WHERE b.age > 30)",
        "SELECT DISTINCT constructor FROM driver GROUP BY constructor HAVING SUM(CASE WHEN age < 20 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN age > 30 THEN 1 ELSE 0 END) > 0",
        "SELECT d1.constructor FROM (SELECT DISTINCT constructor FROM driver WHERE age < 20) d1 WHERE EXISTS (SELECT null FROM driver d2 WHERE d2.age > 30 AND d2.constructor = d1.constructor)",
        "SELECT constructor FROM driver d1 WHERE EXISTS (SELECT null FROM driver d2 WHERE d1.constructor = d2.constructor AND d2.age < 20) AND EXISTS (SELECT null FROM driver d2 WHERE d1.constructor = d2.constructor AND d2.age > 30)"
      ]
    ]
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "nlq": "Find the teams that won more than once.",
    "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(*) > 1",
        "SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.winning_team) > 1",
        "SELECT r1.winning_team FROM (SELECT winning_team, COUNT(*) AS victories FROM race GROUP BY winning_team) r1 WHERE r1.victories > 1",
        "WITH WinningCounts AS (SELECT winning_team, COUNT(*) AS TotalWins FROM race GROUP BY winning_team) SELECT winning_team FROM WinningCounts WHERE TotalWins > 1",
        "SELECT r.winning_team FROM race r JOIN (SELECT winning_team, COUNT(*) AS win_count FROM race GROUP BY winning_team) win ON win.winning_team = r.winning_team WHERE win.win_count > 1 GROUP BY r.winning_team",
        "SELECT DISTINCT winning_team FROM race WHERE winning_team IN (SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1)",
        "SELECT winning_team FROM (SELECT winning_team, COUNT(*) as total_wins FROM race GROUP BY winning_team) WHERE total_wins > 1",
        "SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1",
        "WITH RaceWins AS (SELECT winning_team, COUNT(*) as Wins FROM race GROUP BY winning_team) SELECT winning_team FROM RaceWins WHERE Wins > 1",
        "SELECT r.winning_team FROM (SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(*) > 1) r"
      ]
    ]
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "nlq": "Which teams won more than 1 race?",
    "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(*) > 1",
        "SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.winning_team) > 1",
        "SELECT DISTINCT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1",
        "SELECT DISTINCT r.winning_team FROM race r WHERE r.winning_team IN (SELECT r2.winning_team FROM race r2 GROUP BY r2.winning_team HAVING COUNT(r2.winning_team) > 1)",
        "WITH TeamWins AS (SELECT winning_team, COUNT(*) AS NumWins FROM race GROUP BY winning_team) SELECT winning_team FROM TeamWins WHERE NumWins > 1",
        "WITH TeamWins AS (SELECT r.winning_team AS team, COUNT(*) AS wins FROM race r GROUP BY r.winning_team) SELECT team FROM TeamWins WHERE wins > 1",
        "SELECT r1.winning_team FROM race r1 JOIN (SELECT winning_team, COUNT(*) AS cnt FROM race GROUP BY winning_team HAVING cnt > 1) r2 ON r1.winning_team = r2.winning_team GROUP BY r1.winning_team",
        "SELECT winning_team FROM race WHERE winning_team IN (SELECT winning_team FROM race GROUP BY winning_team HAVING COUNT(winning_team) > 1) GROUP BY winning_team",
        "SELECT tr.winning_team FROM (SELECT winning_team, COUNT(*) AS TotalWins FROM race GROUP BY winning_team) tr WHERE TotalWins > 1",
        "SELECT r.winning_team FROM race r WHERE EXISTS (SELECT NULL FROM race r2 WHERE r2.winning_team = r.winning_team GROUP BY r2.winning_team HAVING COUNT(*) > 1) GROUP BY r.winning_team"
      ]
    ]
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "nlq": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "infer_predictions": [
      [
        "SELECT d.driver_name FROM driver d JOIN race r ON r.driver_id = d.driver_id WHERE r.pole_position IN ('Carl Skerlong', 'James Hinchcliffe') GROUP BY d.driver_name HAVING COUNT(DISTINCT r.pole_position) = 2",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' INTERSECT SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')",
        "SELECT DISTINCT d.driver_name FROM driver d, race r WHERE d.driver_id = r.driver_id AND r.pole_position = 'Carl Skerlong' INTERSECT SELECT DISTINCT d.driver_name FROM driver d, race r WHERE d.driver_id = r.driver_id AND r.pole_position = 'James Hinchcliffe'",
        "SELECT d.driver_name FROM driver d INNER JOIN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe' UNION SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' GROUP BY driver_id HAVING COUNT(driver_id) > 1) p ON d.driver_id = p.driver_id",
        "SELECT DISTINCT d.driver_name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id AND r.pole_position = 'Carl Skerlong') AND EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id AND r.pole_position = 'James Hinchcliffe')",
        "SELECT driver_name FROM driver d WHERE EXISTS (SELECT 1 FROM race WHERE pole_position = 'Carl Skerlong' AND driver_id = d.driver_id) INTERSECT SELECT driver_name FROM driver d WHERE EXISTS (SELECT 1 FROM race WHERE pole_position = 'James Hinchcliffe' AND driver_id = d.driver_id)",
        "SELECT driver_name FROM driver d JOIN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' INTERSECT SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe') v ON d.driver_id = v.driver_id",
        "SELECT DISTINCT d.driver_name FROM driver d JOIN race r1 ON r1.driver_id = d.driver_id JOIN race r2 ON r2.driver_id = d.driver_id WHERE r1.pole_position = 'Carl Skerlong' AND r2.pole_position = 'James Hinchcliffe'",
        "SELECT DISTINCT d.driver_name FROM driver d WHERE d.driver_id IN (SELECT driver_id FROM (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong' EXCEPT SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe') a WHERE NOT EXISTS (SELECT 1 FROM race WHERE driver_id = a.driver_id AND pole_position = 'Carl Skerlong'))"
      ]
    ]
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "nlq": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe') INTERSECT SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong')",
        "SELECT d.driver_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.pole_position = 'James Hinchcliffe' INTERSECT SELECT d.driver_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.pole_position = 'Carl Skerlong'",
        "SELECT driver_name FROM driver WHERE driver_id IN (SELECT driver_id FROM race WHERE pole_position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY driver_id HAVING COUNT(DISTINCT pole_position) = 2)",
        "SELECT d.driver_name FROM driver d WHERE EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id AND r.pole_position = 'James Hinchcliffe') AND EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id AND r.pole_position = 'Carl Skerlong')",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'James Hinchcliffe') AND d.driver_id IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'Carl Skerlong')",
        "WITH pole_winners AS (SELECT driver_id FROM race WHERE pole_position IN ('Carl Skerlong', 'James Hinchcliffe') GROUP BY driver_id HAVING COUNT(DISTINCT pole_position) > 1) SELECT d.driver_name FROM driver d JOIN pole_winners pw ON d.driver_id = pw.driver_id",
        "SELECT d1.driver_name FROM driver d1 JOIN race r1 ON d1.driver_id = r1.driver_id WHERE r1.pole_position = 'James Hinchcliffe' AND d1.driver_id IN (SELECT d2.driver_id FROM driver d2 JOIN race r2 ON d2.driver_id = r2.driver_id WHERE r2.pole_position = 'Carl Skerlong')",
        "SELECT DISTINCT d.driver_name FROM driver d, race r WHERE d.driver_id = r.driver_id AND r.pole_position = 'James Hinchcliffe' AND r.driver_id IN (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong')",
        "WITH James AS (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe'), Carl AS (SELECT driver_id FROM race WHERE pole_position = 'Carl Skerlong') SELECT d.driver_name FROM driver d JOIN James ON d.driver_id = James.driver_id JOIN Carl ON d.driver_id = Carl.driver_id",
        "SELECT d.driver_name FROM driver d, race r WHERE d.driver_id = r.driver_id AND (r.pole_position = 'James Hinchcliffe' OR r.pole_position = 'Carl Skerlong') GROUP BY d.driver_name HAVING COUNT(DISTINCT r.pole_position) = 2"
      ]
    ]
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "nlq": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')",
        "SELECT driver_name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.pole_position = 'James Hinchcliffe' AND r.driver_id = d.driver_id)",
        "SELECT d.driver_name FROM driver d LEFT JOIN race r ON d.driver_id = r.driver_id AND r.pole_position = 'James Hinchcliffe' WHERE r.driver_id IS NULL",
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'James Hinchcliffe')",
        "SELECT driver_name FROM driver EXCEPT SELECT driver_name FROM driver JOIN race ON driver.driver_id = race.driver_id WHERE race.pole_position = 'James Hinchcliffe'",
        "SELECT d.driver_name FROM driver d WHERE NOT EXISTS (SELECT * FROM race r WHERE r.pole_position = 'James Hinchcliffe' AND r.driver_id = d.driver_id)",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'James Hinchcliffe')",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')",
        "SELECT driver_name FROM driver d WHERE NOT EXISTS (SELECT NULL FROM race r WHERE r.pole_position = 'James Hinchcliffe' AND r.driver_id = d.driver_id)"
      ]
    ]
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "nlq": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "infer_predictions": [
      [
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe')",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'James Hinchcliffe')",
        "SELECT d.driver_name FROM driver d LEFT JOIN race r ON d.driver_id = r.driver_id WHERE r.pole_position <> 'James Hinchcliffe' OR r.pole_position IS NULL",
        "SELECT driver.driver_name FROM driver LEFT JOIN race ON driver.driver_id = race.driver_id WHERE race.pole_position != 'James Hinchcliffe' OR race.pole_position IS NULL",
        "SELECT d.driver_name FROM driver d WHERE NOT EXISTS (SELECT 1 FROM race r WHERE r.driver_id = d.driver_id AND r.pole_position = 'James Hinchcliffe')",
        "SELECT driver_name FROM driver EXCEPT SELECT driver_name FROM driver JOIN race ON driver.driver_id = race.driver_id WHERE race.pole_position = 'James Hinchcliffe'",
        "SELECT d.driver_name FROM driver d WHERE d.driver_id NOT IN (SELECT r.driver_id FROM race r WHERE r.pole_position = 'James Hinchcliffe') AND d.age IS NOT NULL",
        "SELECT driver_name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race WHERE pole_position = 'James Hinchcliffe' GROUP BY driver_id)",
        "SELECT DISTINCT d.driver_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.pole_position NOT LIKE 'James Hinchcliffe'"
      ]
    ]
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "nlq": "How many languages are there?",
    "gold": "SELECT count(*) FROM languages",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM languages",
        "SELECT COUNT(name) FROM languages",
        "SELECT COUNT(languages.id) FROM languages",
        "SELECT COUNT(1) FROM languages",
        "SELECT COUNT(language_id) FROM official_languages JOIN languages ON languages.id = official_languages.language_id"
      ]
    ]
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "nlq": "Count the number of languages.",
    "gold": "SELECT count(*) FROM languages",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM languages",
        "SELECT COUNT(id) FROM languages",
        "SELECT COUNT(1) FROM languages",
        "SELECT COUNT(DISTINCT name) FROM languages",
        "SELECT COUNT(id) AS total_languages FROM languages",
        "SELECT languages.id FROM languages GROUP BY languages.id HAVING COUNT(languages.id) >= 1"
      ]
    ]
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "nlq": "List the name of languages in ascending alphabetical order.",
    "gold": "SELECT name FROM languages ORDER BY name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM languages ORDER BY name ASC",
        "SELECT l.name FROM languages l ORDER BY l.name ASC",
        "SELECT name FROM languages GROUP BY name ORDER BY name ASC",
        "SELECT name FROM languages WHERE name IS NOT NULL ORDER BY name ASC",
        "SELECT name FROM languages WHERE name > '' ORDER BY name"
      ]
    ]
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "nlq": "What are the names of languages, in alphabetical order?",
    "gold": "SELECT name FROM languages ORDER BY name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM languages ORDER BY name ASC;",
        "SELECT L.name FROM languages L ORDER BY L.name;",
        "SELECT name FROM languages GROUP BY name ORDER BY name;",
        "SELECT name FROM languages WHERE name IS NOT NULL ORDER BY name;",
        "SELECT name FROM languages WHERE name <> '' ORDER BY name ASC;"
      ]
    ]
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "nlq": "What are the names of languages that contain the word \"ish\"?",
    "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
    "infer_predictions": [
      [
        "SELECT name FROM languages WHERE name LIKE '%ish%'",
        "SELECT l.name FROM languages l WHERE l.name LIKE '%ish%'",
        "SELECT language_name FROM (SELECT name AS language_name FROM languages) WHERE language_name LIKE '%ish%'",
        "SELECT name FROM languages WHERE instr(name, 'ish') > 0",
        "SELECT l.name AS language_name FROM languages l WHERE l.name LIKE '%ish%'",
        "SELECT lang.name FROM languages lang WHERE lang.name LIKE '%ish%'",
        "SELECT name AS language FROM languages WHERE language LIKE '%ish%'",
        "SELECT languages.name AS ln FROM languages WHERE ln LIKE '%ish%'"
      ]
    ]
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "nlq": "Return the names of langauges that contain the substring \"ish\".",
    "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
    "infer_predictions": [
      [
        "SELECT name FROM languages WHERE name LIKE '%ish%'",
        "SELECT l.name FROM languages l WHERE l.name LIKE '%ish%'",
        "SELECT DISTINCT l.name FROM languages l WHERE l.name LIKE '%ish%'",
        "SELECT name FROM languages WHERE instr(name, 'ish') > 0",
        "SELECT l.name FROM languages l WHERE instr(l.name, 'ish') > 0",
        "SELECT name FROM languages WHERE name GLOB '*ish*'",
        "SELECT l.name FROM languages l WHERE l.name GLOB '*ish*'",
        "SELECT name FROM languages WHERE substr(name, 1, 50) LIKE '%ish%'",
        "SELECT l.name FROM languages l WHERE l.name COLLATE NOCASE LIKE '%ish%'"
      ]
    ]
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "nlq": "Show the names of countries in descending order of overall scores.",
    "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
    "infer_predictions": [
      [
        "SELECT name FROM countries ORDER BY overall_score DESC",
        "SELECT name FROM countries ORDER BY overall_score DESC LIMIT -1 OFFSET 0",
        "SELECT name FROM countries ORDER BY overall_score DESC, id",
        "SELECT name FROM (SELECT * FROM countries) ORDER BY overall_score DESC",
        "SELECT name FROM countries c ORDER BY c.overall_score DESC",
        "SELECT name FROM countries WHERE overall_score IS NOT NULL ORDER BY overall_score DESC",
        "SELECT countries.name FROM countries WHERE countries.overall_score IS NOT NULL ORDER BY countries.overall_score DESC"
      ]
    ]
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "nlq": "What are the names of the countries, ordered descending by overall score?",
    "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
    "infer_predictions": [
      [
        "SELECT name FROM countries ORDER BY overall_score DESC",
        "SELECT name as country_name FROM countries ORDER BY overall_score DESC;",
        "SELECT countries.name FROM countries WHERE overall_score is not null order by countries.overall_score DESC",
        "SELECT countries.name FROM countries WHERE overall_score != '' ORDER BY countries.overall_score DESC",
        "SELECT distinct name FROM countries WHERE countries.overall_score IS NOT NULL ORDER BY countries.overall_score DESC;",
        "SELECT rankFilter.name FROM countries AS rankFilter WHERE rankFilter.overall_score not null ORDER BY rankFilter.overall_score DESC"
      ]
    ]
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "nlq": "What is the average justice scores among countries?",
    "gold": "SELECT avg(justice_score) FROM countries",
    "infer_predictions": [
      [
        "SELECT AVG(justice_score) FROM countries",
        "SELECT AVG(countries.justice_score) AS average_justice_score FROM countries",
        "SELECT AVG(justice_score) AS avg_justice FROM countries WHERE justice_score IS NOT NULL",
        "SELECT (SUM(justice_score) / COUNT(justice_score)) FROM countries WHERE justice_score IS NOT NULL",
        "SELECT AVG(justice_score) FROM countries WHERE justice_score > 0",
        "SELECT ROUND(AVG(justice_score), 2) FROM countries",
        "SELECT AVG(justice_score) FROM (SELECT justice_score FROM countries)",
        "SELECT (SELECT AVG(justice_score) FROM countries) AS average_justice_score",
        "SELECT AVG(justice_score) FROM countries GROUP BY id HAVING justice_score IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "nlq": "Give the average justice scores across all countries.",
    "gold": "SELECT avg(justice_score) FROM countries",
    "infer_predictions": [
      [
        "SELECT AVG(justice_score) FROM countries",
        "SELECT AVG(c.justice_score) FROM countries c",
        "SELECT AVG(justice_score) AS average_justice FROM countries",
        "SELECT AVG(c.justice_score) AS average_justice_score FROM countries c",
        "SELECT AVG(justice_score) AS avg_justice FROM countries",
        "SELECT (SUM(justice_score) / COUNT(*)) FROM countries",
        "SELECT (SUM(c.justice_score) / COUNT(c.id)) FROM countries c",
        "SELECT AVG(justice_score) AS avg_score FROM countries",
        "SELECT (SUM(justice_score) / COUNT(id)) AS AverageJusticeScore FROM countries"
      ]
    ]
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "nlq": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
    "infer_predictions": [
      [
        "SELECT MAX(health_score) AS max_health, MIN(health_score) AS min_health FROM countries WHERE name <> 'Norway'",
        "SELECT MIN(health_score), MAX(health_score) FROM countries WHERE name != 'Norway'",
        "SELECT MAX(c.health_score) as Maximum_Health, MIN(c.health_score) as Minimum_Health FROM countries c WHERE c.name NOT LIKE 'Norway'",
        "SELECT * FROM (SELECT MAX(health_score) max_score, MIN(health_score) min_score FROM countries WHERE name NOT IN ('Norway'))",
        "SELECT MAX(health_score) max_health, MIN(health_score) min_health FROM (SELECT health_score FROM countries WHERE name <> 'Norway')",
        "SELECT MAX(health_score) AS MaximumHealth, MIN(health_score) AS MinimumHealth FROM countries WHERE name NOT IN (SELECT name FROM countries WHERE name = 'Norway')",
        "SELECT (SELECT MAX(health_score) FROM countries WHERE name <> 'Norway') AS MaxHealth, (SELECT MIN(health_score) FROM countries WHERE name <> 'Norway') AS MinHealth",
        "SELECT Health.Max_Health, Health.Min_Health FROM (SELECT MAX(health_score) AS Max_Health, MIN(health_score) AS Min_Health FROM countries WHERE name != 'Norway') AS Health",
        "SELECT MIN(countries.health_score) AS Minimum_Health, MAX(countries.health_score) AS Maximum_Health FROM countries WHERE not countries.name = 'Norway'",
        "SELECT * FROM (SELECT MAX(health_score) as Highest_Health_Score, MIN(health_score) as Lowest_Health_Score FROM countries WHERE not name = 'Norway') AS Result"
      ]
    ]
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "nlq": "Return the maximum and minimum health scores across all countries other than Norway.",
    "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
    "infer_predictions": [
      [
        "SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name != 'Norway'",
        "SELECT MAX(c.health_score), MIN(c.health_score) FROM countries AS c WHERE c.name <> 'Norway'",
        "SELECT (SELECT MAX(health_score) FROM countries WHERE name != 'Norway') AS MaximumHealthScore, (SELECT MIN(health_score) FROM countries WHERE name != 'Norway') AS MinimumHealthScore",
        "SELECT MAX(health_score) Maximum, MIN(health_score) Minimum FROM countries WHERE name NOT IN ('Norway')",
        "SELECT (SELECT MAX(health_score) FROM countries WHERE name IS NOT 'Norway'), (SELECT MIN(health_score) FROM countries WHERE name IS NOT 'Norway')",
        "SELECT MAX(hs), MIN(hs) FROM (SELECT health_score AS hs FROM countries WHERE name <> 'Norway')",
        "SELECT MAX(health_score) AS highest, MIN(health_score) AS lowest FROM countries WHERE NOT name = 'Norway'",
        "SELECT (SELECT MAX(health_score) FROM countries WHERE name != 'Norway') AS max_health, (SELECT MIN(health_score) FROM countries WHERE name != 'Norway') AS min_health",
        "SELECT MAX(health_score) MAX_SCORE, MIN(health_score) MIN_SCORE FROM (SELECT health_score FROM countries WHERE name != 'Norway')",
        "SELECT MAX(countries.health_score) AS MaxScore, MIN(countries.health_score) AS MinScore FROM countries WHERE countries.name != 'Norway'"
      ]
    ]
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "nlq": "How many different official languages are there?",
    "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT languages.name) FROM official_languages JOIN languages ON official_languages.language_id = languages.id",
        "SELECT COUNT(DISTINCT name) FROM languages WHERE id IN (SELECT language_id FROM official_languages)",
        "SELECT COUNT(DISTINCT L.name) FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages O WHERE O.language_id = L.id)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT languages.name FROM official_languages JOIN languages ON languages.id = official_languages.language_id)",
        "SELECT DISTINCT COUNT(DISTINCT languages.name) FROM official_languages, languages WHERE official_languages.language_id = languages.id",
        "SELECT COUNT(*) FROM (SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages))",
        "SELECT COUNT(DISTINCT lname) FROM (SELECT languages.name AS lname FROM official_languages JOIN languages ON official_languages.language_id = languages.id)",
        "SELECT COUNT(DISTINCT name) AS distinct_languages FROM languages L JOIN official_languages O ON L.id = O.language_id"
      ]
    ]
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "nlq": "Count the number of different official languages.",
    "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT language_id) FROM official_languages",
        "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages)",
        "SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol",
        "SELECT COUNT(*) FROM (SELECT language_id FROM official_languages GROUP BY language_id)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT ol.language_id FROM official_languages ol)",
        "SELECT COUNT(*) FROM (SELECT language_id FROM official_languages) GROUP BY language_id HAVING COUNT(*) >= 1",
        "SELECT COUNT(*) FROM (SELECT DISTINCT language_id FROM official_languages) AS unique_languages"
      ]
    ]
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "nlq": "List names of countries in descending order of education_score.",
    "gold": "SELECT name FROM countries ORDER BY education_score DESC",
    "infer_predictions": [
      [
        "SELECT name FROM countries ORDER BY education_score DESC",
        "SELECT c.name FROM countries c ORDER BY c.education_score DESC",
        "SELECT name FROM countries ORDER BY education_score DESC, id",
        "SELECT name FROM countries ORDER BY (SELECT education_score) DESC",
        "SELECT name FROM countries ORDER BY (SELECT education_score FROM countries WHERE id = countries.id) DESC",
        "SELECT name FROM countries ORDER BY education_score || '' DESC"
      ]
    ]
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "nlq": "What are the names of the countries, ordered descending by education score?",
    "gold": "SELECT name FROM countries ORDER BY education_score DESC",
    "infer_predictions": [
      [
        "SELECT name FROM countries ORDER BY education_score DESC",
        "SELECT name FROM countries ORDER BY education_score DESC, id ASC",
        "SELECT name FROM countries ORDER BY education_score DESC, name ASC",
        "SELECT countries.name AS Country FROM countries ORDER BY countries.education_score DESC",
        "SELECT name FROM (SELECT name, education_score FROM countries) ORDER BY education_score DESC",
        "SELECT c.name FROM countries c ORDER BY c.education_score DESC",
        "SELECT name, education_score FROM countries ORDER BY education_score DESC LIMIT 10000"
      ]
    ]
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "nlq": "List the name of the country with the biggest score in politics.",
    "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
        "SELECT countries.name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
        "SELECT name FROM countries WHERE politics_score IN (SELECT MAX(politics_score) FROM countries)",
        "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries LIMIT 1)",
        "SELECT c.name FROM countries c ORDER BY c.politics_score DESC LIMIT 1",
        "SELECT name FROM (SELECT name FROM countries ORDER BY politics_score DESC) LIMIT 1",
        "WITH RankedCountries AS (SELECT name, RANK() OVER (ORDER BY politics_score DESC) AS rank FROM countries) SELECT name FROM RankedCountries WHERE rank = 1",
        "SELECT name FROM countries WHERE politics_score = (SELECT politics_score FROM countries ORDER BY politics_score DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "nlq": "What is the name of the country with the highest politics score?",
    "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries)",
        "SELECT c.name FROM countries c ORDER BY c.politics_score DESC LIMIT 1",
        "SELECT name FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries LIMIT 1)",
        "SELECT c.name FROM (SELECT name, politics_score FROM countries ORDER BY politics_score DESC) c LIMIT 1",
        "WITH RankedCountries AS (SELECT name, RANK() OVER (ORDER BY politics_score DESC) AS rank FROM countries) SELECT name FROM RankedCountries WHERE rank = 1",
        "SELECT c.name FROM countries AS c WHERE c.politics_score >= (SELECT MAX(politics_score) FROM countries)",
        "SELECT c.name FROM countries c WHERE c.politics_score = (SELECT MAX(c2.politics_score) FROM countries c2)",
        "SELECT name FROM countries WHERE id IN (SELECT id FROM countries WHERE politics_score = (SELECT MAX(politics_score) FROM countries))"
      ]
    ]
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "nlq": "Show the names of countries and their official languages.",
    "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
    "infer_predictions": [
      [
        "SELECT c.name as country_name, l.name as language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON l.id = ol.language_id",
        "SELECT country.name, language.name FROM countries AS country INNER JOIN official_languages AS off_lang ON country.id = off_lang.country_id INNER JOIN languages AS language ON off_lang.language_id = language.id",
        "SELECT countries.name AS CountryName, languages.name AS LanguageName FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id",
        "SELECT c.name, l.name FROM countries c, languages l, official_languages ol WHERE c.id = ol.country_id AND l.id = ol.language_id",
        "SELECT c1.name, l1.name FROM countries c1, official_languages o1, languages l1 WHERE c1.id = o1.country_id AND l1.id = o1.language_id",
        "SELECT t1.name AS Country, t2.name AS Language FROM countries t1 INNER JOIN official_languages t3 ON t1.id = t3.country_id INNER JOIN languages t2 ON t3.language_id = t2.id",
        "SELECT country_name, language_name FROM (SELECT c.name AS country_name, l.name AS language_name, ol.country_id, ol.language_id FROM countries c JOIN languages l, official_languages ol WHERE c.id = ol.country_id AND l.id = ol.language_id)",
        "SELECT c.name country, l.name language FROM countries c INNER JOIN official_languages o ON c.id = o.country_id INNER JOIN languages l ON o.language_id = l.id",
        "SELECT name_country, name_language FROM (SELECT country.name AS name_country, language.name AS name_language FROM countries country JOIN official_languages j ON country.id = j.country_id JOIN languages language ON j.language_id = language.id)",
        "SELECT countries.name || ' : ' || languages.name AS 'Country and Language' FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id"
      ]
    ]
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "nlq": "What are the names of the countries, as well as the names of their official langauges?",
    "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
    "infer_predictions": [
      [
        "SELECT c.name as country_name, l.name as language_name FROM countries c JOIN official_languages o ON c.id = o.country_id JOIN languages l ON o.language_id = l.id",
        "SELECT country.name, language.name FROM countries AS country INNER JOIN official_languages AS off_lang ON country.id = off_lang.country_id INNER JOIN languages AS language ON off_lang.language_id = language.id",
        "SELECT c.name, l.name FROM countries c, official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id",
        "SELECT country, language FROM (SELECT c.name AS country, l.name AS language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id)",
        "SELECT cou.name AS CountryName, lan.name AS LanguageName FROM countries cou LEFT JOIN official_languages olang ON cou.id = olang.country_id LEFT JOIN languages lan ON olang.language_id = lan.id",
        "SELECT (SELECT name FROM countries WHERE id = o.country_id) AS country, (SELECT name FROM languages WHERE id = o.language_id) AS language FROM official_languages o",
        "SELECT c.name Country, l.name Language FROM countries c, languages l WHERE EXISTS (SELECT 1 FROM official_languages ol WHERE ol.country_id = c.id AND ol.language_id = l.id)",
        "SELECT name1, name2 FROM (SELECT c.name as name1, l.name name2 FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON l.id = ol.language_id) AS sub_query",
        "SELECT a_name AS Country_Name, b_name AS Language_Name FROM (SELECT c.id AS a_id, c.name AS a_name, l.id AS b_id, l.name AS b_name FROM official_languages o INNER JOIN countries c ON o.country_id = c.id INNER JOIN languages l ON o.language_id = l.id) AS results"
      ]
    ]
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "nlq": "Show the official languages and the number of countries speaking each language.",
    "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
    "infer_predictions": [
      [
        "SELECT L.name AS Language, COUNT(DISTINCT O.country_id) AS CountryCount FROM languages L JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
        "SELECT name, COUNT(language_id) AS NumberOfCountries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id",
        "SELECT languages.name, COUNT(official_languages.country_id) FROM official_languages JOIN languages ON languages.id = official_languages.language_id GROUP BY languages.id",
        "SELECT B.name AS Language, COUNT(A.language_id) AS NumOfCountries FROM languages B JOIN official_languages A ON A.language_id = B.id GROUP BY B.name",
        "SELECT L.name, COUNT(*) AS Num_Countries FROM official_languages OL INNER JOIN languages L ON OL.language_id = L.id GROUP BY L.name",
        "SELECT languages.name, COUNT(official_languages.country_id) AS CountryCount FROM official_languages INNER JOIN languages ON languages.id = official_languages.language_id GROUP BY languages.name",
        "SELECT Z.name, COUNT(Z.id) AS CountryUsage FROM ( SELECT DISTINCT languages.id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id ) Z GROUP BY Z.id",
        "SELECT language.name, (SELECT COUNT(*) FROM official_languages WHERE language_id = language.id) AS CountriesCount FROM languages AS language",
        "SELECT IL.language_name AS Language, COUNT(DISTINCT IL.language_id) AS NumOfCountry FROM ( SELECT languages.name AS language_name, official_languages.language_id FROM languages JOIN official_languages ON languages.id = official_languages.language_id ) IL GROUP BY IL.language_name",
        "SELECT Language, COUNT(Country_id) AS NumOfSpeakers FROM (SELECT name AS Language, country_id FROM languages JOIN official_languages ON languages.id = official_languages.language_id) GROUP BY Language"
      ]
    ]
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "nlq": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
    "infer_predictions": [
      [
        "SELECT L.name, COUNT(DISTINCT O.country_id) AS num_countries FROM languages L JOIN official_languages O ON L.id = O.language_id GROUP BY L.name",
        "SELECT name, COUNT(country_id) as num_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY name",
        "SELECT languages.name, COUNT(*) as num_countries FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name",
        "SELECT lng.name AS language, COUNT(DISTINCT olang.country_id) AS count FROM languages lng JOIN official_languages olang ON lng.id = olang.language_id GROUP BY lng.name",
        "SELECT name AS language, COUNT(DISTINCT country_id) AS num_countries FROM official_languages INNER JOIN languages ON language_id = languages.id GROUP BY language",
        "SELECT lng.name, COUNT(DISTINCT olang.country_id) AS num_countries FROM official_languages olang INNER JOIN languages lng ON olang.language_id = lng.id GROUP BY lng.name",
        "SELECT name, COUNT(DISTINCT country_id) FROM official_languages JOIN languages ON id = language_id GROUP BY name",
        "SELECT DISTINCT languages.name, COUNT(official_languages.country_id) OVER (PARTITION BY official_languages.language_id) AS country_count FROM languages JOIN official_languages ON languages.id = official_languages.language_id",
        "SELECT L.name, (SELECT COUNT(distinct O.country_id) FROM official_languages O WHERE L.id = O.language_id) AS num_countries FROM languages L",
        "SELECT name name, COUNT(country_id) AS num_countries FROM (SELECT * FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id) GROUP BY name"
      ]
    ]
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "nlq": "Show the official language spoken by the most number of countries.",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.id ORDER BY COUNT(ol.country_id) DESC LIMIT 1",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 1)",
        "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.id ORDER BY COUNT(official_languages.country_id) DESC LIMIT 1",
        "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(country_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(country_id) AS cnt FROM official_languages GROUP BY language_id)))",
        "SELECT (SELECT name FROM languages WHERE id = language_id) AS language FROM official_languages GROUP BY language_id ORDER BY COUNT(country_id) DESC LIMIT 1",
        "SELECT l.name FROM (SELECT language_id, COUNT(country_id) AS cnt FROM official_languages GROUP BY language_id) sub JOIN languages l ON l.id = sub.language_id ORDER BY sub.cnt DESC LIMIT 1",
        "SELECT l.name FROM languages l WHERE l.id = (SELECT ol.language_id FROM official_languages ol GROUP BY ol.language_id ORDER BY COUNT(ol.country_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "nlq": "What is the official language that is most common?",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM languages WHERE id = (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
        "SELECT languages.name FROM languages JOIN (SELECT language_id, COUNT(*) AS freq FROM official_languages GROUP BY language_id ORDER BY freq DESC LIMIT 1) AS most_common ON languages.id = most_common.language_id",
        "SELECT L.name FROM languages L WHERE L.id = (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(language_id) AS cnt FROM official_languages GROUP BY language_id)))",
        "SELECT (SELECT name FROM languages WHERE id = ol.language_id) AS language FROM official_languages ol GROUP BY ol.language_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
        "SELECT language_name FROM (SELECT L.name AS language_name, COUNT(OL.language_id) AS count_lang FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name) AS sub ORDER BY sub.count_lang DESC LIMIT 1",
        "SELECT first_value(languages.name) OVER (ORDER BY COUNT(official_languages.language_id) DESC) FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name"
      ]
    ]
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "nlq": "Show the official languages spoken by at least two countries.",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT L.name FROM official_languages AS O JOIN languages AS L ON O.language_id = L.id GROUP BY L.id HAVING COUNT(DISTINCT O.country_id) >= 2",
        "SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2)",
        "SELECT DISTINCT A.name FROM languages A WHERE (SELECT COUNT(DISTINCT country_id) FROM official_languages WHERE language_id = A.id) >= 2",
        "SELECT L.name FROM languages L INNER JOIN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) AS J ON L.id = J.language_id",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM (SELECT language_id, COUNT(DISTINCT country_id) AS cnt FROM official_languages GROUP BY language_id) WHERE cnt >= 2)",
        "SELECT name FROM (SELECT L.name, COUNT(DISTINCT O.country_id) as CountryCount FROM official_languages O JOIN languages L ON O.language_id = L.id GROUP BY L.id HAVING CountryCount >= 2) AS SubQuery",
        "SELECT DISTINCT L.name FROM languages L JOIN official_languages O on L.id = O.language_id GROUP BY L.id HAVING COUNT(DISTINCT O.country_id) >= 2",
        "SELECT name FROM languages WHERE EXISTS (SELECT 1 FROM official_languages WHERE languages.id = language_id GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2)",
        "SELECT L.name FROM (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) AS ValidLanguages INNER JOIN languages AS L ON ValidLanguages.language_id = L.id",
        "SELECT L.name FROM languages L WHERE L.id IN (SELECT O.language_id FROM official_languages O GROUP BY O.language_id HAVING COUNT(DISTINCT O.country_id) >= 2)"
      ]
    ]
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "nlq": "Which official languages are spoken in two or more countries?",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2",
        "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2",
        "SELECT DISTINCT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) > 1)",
        "SELECT name FROM languages WHERE EXISTS (SELECT NULL FROM official_languages WHERE languages.id = official_languages.language_id GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2)",
        "SELECT language_name FROM (SELECT languages.name AS language_name, COUNT(DISTINCT official_languages.country_id) AS num_countries FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name) WHERE num_countries >= 2",
        "SELECT l.name FROM languages l, official_languages ol WHERE l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2",
        "WITH LanguageUsage AS (SELECT language_id, COUNT(DISTINCT country_id) AS countries_count FROM official_languages GROUP BY language_id) SELECT name FROM languages JOIN LanguageUsage ON languages.id = LanguageUsage.language_id WHERE countries_count >= 2",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages ol GROUP BY language_id HAVING COUNT(DISTINCT ol.country_id) >= 2)",
        "SELECT name FROM (SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2) AS Subquery",
        "WITH CTE AS (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2) SELECT languages.name FROM languages JOIN CTE ON languages.id = CTE.language_id"
      ]
    ]
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "nlq": "Show the average overall scores of countries whose official language is \"English\".",
    "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
    "infer_predictions": [
      [
        "SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
        "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
        "SELECT AVG(overall_score) AS average_overall_score FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'))",
        "SELECT AVG(ov_score) FROM (SELECT overall_score AS ov_score FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id IN (SELECT id FROM languages WHERE name = 'English')))",
        "SELECT AVG(c.overall_score) FROM countries c WHERE EXISTS (SELECT * FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English' AND ol.country_id = c.id)",
        "SELECT AVG(overall_score) FROM (SELECT countries.overall_score FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON languages.id = official_languages.language_id WHERE languages.name = 'English')",
        "SELECT AVG(overall_score) FROM (SELECT c.overall_score FROM countries c LEFT OUTER JOIN official_languages ol ON c.id = ol.country_id LEFT OUTER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English')",
        "SELECT (SELECT AVG(overall_score) FROM countries WHERE countries.id IN (SELECT ol.country_id FROM official_languages ol WHERE ol.language_id IN (SELECT languages.id FROM languages WHERE languages.name = 'English')))",
        "SELECT AVG(countries.overall_score) FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'",
        "SELECT AVG(overall_score) FROM countries WHERE EXISTS (SELECT 1 FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English' AND official_languages.country_id = countries.id)"
      ]
    ]
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "nlq": "What is the average overall score across countries with English as their official language?",
    "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
    "infer_predictions": [
      [
        "SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'",
        "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = (SELECT id FROM languages WHERE name = 'English'))",
        "SELECT AVG(ovsc) FROM (SELECT overall_score AS ovsc FROM countries WHERE id IN (SELECT country_id FROM official_languages JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'))",
        "SELECT AVG(ov_score) FROM (SELECT c.overall_score AS ov_score FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id = (SELECT id FROM languages WHERE name = 'English'))",
        "SELECT AVG(c.overall_score) FROM countries c WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English' AND ol.country_id = c.id)",
        "SELECT AVG(overall_score) FROM countries WHERE id IN (SELECT ol.country_id FROM official_languages ol INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English')",
        "SELECT AVG(overall_score) FROM countries c WHERE EXISTS (SELECT 1 FROM official_languages ol, languages l WHERE c.id = ol.country_id AND ol.language_id = l.id AND l.name = 'English')",
        "SELECT AVG(c.overall_score) FROM countries c INNER JOIN official_languages ol ON c.id = ol.country_id INNER JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'",
        "SELECT AVG(countries.overall_score) FROM countries, official_languages, languages WHERE countries.id = official_languages.country_id AND official_languages.language_id = languages.id AND languages.name = 'English'"
      ]
    ]
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "nlq": "Show the three official languages that are most commonly spoken.",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3)",
        "SELECT L.name FROM languages L INNER JOIN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 3) T ON L.id = T.language_id",
        "SELECT L.name FROM languages L INNER JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.id ORDER BY COUNT(OL.language_id) DESC LIMIT 3",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(language_id) > 0 ORDER BY COUNT(language_id) DESC LIMIT 3)",
        "SELECT name FROM (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(language_id) DESC LIMIT 3) AS MostUsed JOIN languages ON languages.id = MostUsed.language_id",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM (SELECT language_id, COUNT(*) AS usage_count FROM official_languages GROUP BY language_id ORDER BY usage_count DESC LIMIT 3))",
        "SELECT languages.name FROM languages JOIN (SELECT language_id, COUNT(*) AS count FROM official_languages GROUP BY language_id ORDER BY count DESC LIMIT 3) language_usage ON languages.id = language_usage.language_id",
        "SELECT L.name FROM (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(*) DESC LIMIT 3) PopularLang INNER JOIN languages L ON L.id = PopularLang.language_id",
        "SELECT languages.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY official_languages.language_id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 3",
        "SELECT language.name FROM (SELECT language_id, COUNT(country_id) AS country_count FROM official_languages GROUP BY language_id ORDER BY country_count DESC LIMIT 3) AS top_languages JOIN languages language ON top_languages.language_id = language.id"
      ]
    ]
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "nlq": "What are the names of the three official languages spoken in the most countries?",
    "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id GROUP BY L.name ORDER BY COUNT(DISTINCT OL.country_id) DESC LIMIT 3",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id ORDER BY COUNT(DISTINCT country_id) DESC LIMIT 3)",
        "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(DISTINCT official_languages.country_id) DESC, languages.name ASC LIMIT 3",
        "SELECT DISTINCT lang.name FROM languages lang, official_languages ol WHERE lang.id = ol.language_id GROUP BY lang.name ORDER BY COUNT(DISTINCT ol.country_id) DESC LIMIT 3",
        "WITH LanguageCount AS (SELECT language_id, COUNT(DISTINCT country_id) AS NumCountries FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM LanguageCount ORDER BY NumCountries DESC LIMIT 3)",
        "SELECT NAME FROM (SELECT languages.name AS NAME FROM languages JOIN official_languages ON official_languages.language_id = languages.id GROUP BY languages.name ORDER BY COUNT(DISTINCT official_languages.country_id) DESC) LIMIT 3",
        "WITH RankedLanguages AS (SELECT language_id, RANK() OVER (ORDER BY COUNT(DISTINCT country_id) DESC) as rank FROM official_languages GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages WHERE rank <= 3)",
        "SELECT name FROM languages WHERE id IN (SELECT OL.language_id FROM official_languages OL GROUP BY OL.language_id ORDER BY COUNT(DISTINCT OL.country_id) DESC LIMIT 3)",
        "SELECT DISTINCT languages.name FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name ORDER BY COUNT(DISTINCT official_languages.country_id) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "nlq": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
    "infer_predictions": [
      [
        "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C ON OL.country_id = C.id GROUP BY L.name ORDER BY AVG(C.overall_score) DESC",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)",
        "SELECT languages.name AS Language FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
        "SELECT L.name FROM languages L WHERE EXISTS (SELECT NULL FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id GROUP BY OL.language_id HAVING AVG(C.overall_score)) ORDER BY (SELECT AVG(C.overall_score) FROM official_languages OL JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id GROUP BY OL.language_id) DESC",
        "SELECT language_name FROM (SELECT languages.name AS language_name, AVG(countries.overall_score) AS avg_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name) AS sub_query ORDER BY sub_query.avg_score DESC",
        "SELECT L.name FROM languages L, official_languages OL, countries C WHERE L.id = OL.language_id AND OL.country_id = C.id GROUP BY L.name ORDER BY AVG(C.overall_score) DESC",
        "SELECT DISTINCT name FROM (SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC) AS LangScores",
        "SELECT (SELECT name FROM languages WHERE id = OL.language_id) AS Language FROM official_languages OL JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id ORDER BY AVG(C.overall_score) DESC",
        "SELECT name FROM languages WHERE id IN (SELECT OL.language_id FROM official_languages OL INNER JOIN countries C ON OL.country_id = C.id GROUP BY OL.language_id ORDER BY AVG(C.overall_score) DESC)"
      ]
    ]
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "nlq": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
    "infer_predictions": [
      [
        "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C ON OL.country_id = C.id GROUP BY L.name ORDER BY AVG(C.overall_score) DESC",
        "SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id ORDER BY AVG(overall_score) DESC)",
        "SELECT languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC",
        "SELECT lang.name FROM languages lang JOIN (SELECT language_id, AVG(overall_score) AS avg_score FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id) avg_scores ON lang.id = avg_scores.language_id ORDER BY avg_scores.avg_score DESC",
        "WITH LangAvgScore AS (SELECT language_id, AVG(overall_score) as AvgScore FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id) SELECT languages.name FROM languages JOIN LangAvgScore ON languages.id = LangAvgScore.language_id ORDER BY LangAvgScore.AvgScore DESC",
        "SELECT L.name FROM languages L, official_languages O, countries C WHERE L.id = O.language_id AND O.country_id = C.id GROUP BY L.name ORDER BY AVG(C.overall_score) DESC",
        "SELECT language_name FROM (SELECT languages.name AS language_name, AVG(countries.overall_score) AS avg_score FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name) AS language_scores ORDER BY language_scores.avg_score DESC",
        "SELECT lang.name FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id JOIN countries co ON ol.country_id = co.id GROUP BY lang.name HAVING AVG(co.overall_score) ORDER BY AVG(co.overall_score) DESC",
        "SELECT DISTINCT lang.name FROM languages lang WHERE EXISTS (SELECT NULL FROM official_languages o_l JOIN countries c ON o_l.country_id = c.id WHERE lang.id = o_l.language_id GROUP BY o_l.language_id HAVING AVG(c.overall_score) > 0) ORDER BY (SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON ol.country_id = c.id WHERE ol.language_id = lang.id) DESC",
        "WITH RankedLanguages AS (SELECT language_id, AVG(overall_score) AS Score FROM official_languages JOIN countries ON country_id = id GROUP BY language_id) SELECT name FROM languages WHERE id IN (SELECT language_id FROM RankedLanguages ORDER BY Score DESC)"
      ]
    ]
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "nlq": "Show the name of the country that has the greatest number of official languages.",
    "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1",
        "SELECT c.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
        "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
        "SELECT c.name FROM countries c WHERE c.id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
        "SELECT (SELECT name FROM countries WHERE id = ol.country_id) FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1",
        "SELECT name FROM countries WHERE id = (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(DISTINCT ol.language_id) DESC LIMIT 1)",
        "SELECT c.name FROM countries c INNER JOIN (SELECT country_id, COUNT(*) cnt FROM official_languages GROUP BY country_id ORDER BY cnt DESC LIMIT 1) t ON c.id = t.country_id",
        "SELECT top_country.name FROM (SELECT countries.name, COUNT(official_languages.language_id) AS lang_count FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY lang_count DESC LIMIT 1) AS top_country",
        "SELECT name FROM countries WHERE id = (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id HAVING COUNT(ol.language_id) = (SELECT MAX(lang_count) FROM (SELECT COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))",
        "SELECT c.name FROM countries c WHERE c.id = (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1) ORDER BY c.name ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "nlq": "Which country has the greatest number of official languages?",
    "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT C.name FROM countries C WHERE C.id = (SELECT O.country_id FROM official_languages O GROUP BY O.country_id ORDER BY COUNT(O.language_id) DESC LIMIT 1)",
        "SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)",
        "SELECT countries.name FROM countries JOIN (SELECT country_id, COUNT(*) AS lang_count FROM official_languages GROUP BY country_id ORDER BY lang_count DESC LIMIT 1) AS most_langs ON countries.id = most_langs.country_id",
        "SELECT C.name FROM countries AS C JOIN (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1) AS temp ON C.id = temp.country_id",
        "SELECT countries.name FROM countries WHERE countries.id = (SELECT country_id FROM (SELECT country_id, COUNT(language_id) AS lang_num FROM official_languages GROUP BY country_id) WHERE lang_num = (SELECT MAX(lang_count) FROM (SELECT country_id, COUNT(language_id) AS lang_count FROM official_languages GROUP BY country_id)))",
        "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(*) = (SELECT MAX(lang_count) FROM (SELECT country_id, COUNT(*) AS lang_count FROM official_languages GROUP BY country_id) language_count))",
        "SELECT C.name FROM countries C, (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1) AS X WHERE C.id = X.country_id",
        "SELECT c.name FROM countries c WHERE c.id = (SELECT ol.country_id FROM official_languages ol GROUP BY ol.country_id ORDER BY COUNT(ol.language_id) DESC LIMIT 1)",
        "SELECT name FROM countries WHERE id = (SELECT country_id FROM official_languages GROUP BY country_id ORDER BY COUNT(language_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "nlq": "List the names of languages that are not the official language of any countries.",
    "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
    "infer_predictions": [
      [
        "SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT ol.language_id FROM official_languages ol)",
        "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "SELECT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id WHERE ol.language_id IS NULL",
        "SELECT name FROM languages WHERE id NOT IN (SELECT distinct language_id FROM official_languages)",
        "SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages ol WHERE ol.language_id = l.id)",
        "SELECT languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL",
        "SELECT name FROM languages EXCEPT SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id",
        "SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT ol.language_id FROM official_languages ol WHERE ol.country_id IS NOT NULL)",
        "SELECT languages.name FROM languages WHERE NOT EXISTS (SELECT null FROM official_languages WHERE language_id = languages.id)"
      ]
    ]
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "nlq": "What are the names of languages that are not the official language of any country?",
    "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
    "infer_predictions": [
      [
        "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
        "SELECT l.name FROM languages l LEFT JOIN official_languages o ON l.id = o.language_id WHERE o.language_id IS NULL",
        "SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages o WHERE o.language_id = l.id)",
        "SELECT name FROM languages WHERE id NOT IN (SELECT DISTINCT language_id FROM official_languages)",
        "SELECT l.name FROM languages l WHERE l.id NOT IN (SELECT language_id FROM official_languages)",
        "SELECT language.name FROM languages language WHERE language.id NOT IN (SELECT ol.language_id FROM official_languages ol)",
        "SELECT name FROM languages EXCEPT SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages)",
        "SELECT languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL",
        "SELECT name FROM languages WHERE id IN (SELECT languages.id FROM languages EXCEPT SELECT official_languages.language_id FROM official_languages)",
        "SELECT DISTINCT l.name FROM languages l WHERE l.id NOT IN (SELECT o.language_id FROM official_languages o)"
      ]
    ]
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "nlq": "List the names of countries that do not have any official language.",
    "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
    "infer_predictions": [
      [
        "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "SELECT c.name FROM countries AS c LEFT JOIN official_languages AS ol ON c.id = ol.country_id WHERE ol.country_id IS NULL",
        "SELECT name FROM countries WHERE NOT EXISTS (SELECT 1 FROM official_languages WHERE countries.id = country_id)",
        "SELECT c.name FROM countries c WHERE NOT EXISTS (SELECT 1 FROM official_languages ol WHERE ol.country_id = c.id)",
        "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
        "SELECT name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL",
        "SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT country_id FROM official_languages)",
        "SELECT name FROM countries EXCEPT SELECT c.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id",
        "SELECT c.name FROM countries c WHERE NOT EXISTS (SELECT country_id FROM official_languages ol WHERE ol.country_id = c.id)"
      ]
    ]
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "nlq": "What are the names of countries that do not have an official language?",
    "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
    "infer_predictions": [
      [
        "SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL",
        "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
        "SELECT name FROM countries WHERE id NOT IN (SELECT DISTINCT country_id FROM official_languages)",
        "SELECT c.name FROM countries c WHERE NOT EXISTS (SELECT 1 FROM official_languages ol WHERE ol.country_id = c.id)",
        "SELECT name FROM countries AS c WHERE NOT EXISTS (SELECT 1 FROM official_languages AS ol WHERE ol.country_id = c.id)",
        "SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.name HAVING COUNT(ol.language_id) = 0",
        "SELECT countries.name FROM countries LEFT OUTER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL",
        "SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT country_id FROM official_languages GROUP BY country_id)",
        "SELECT c.name FROM countries AS c WHERE c.id NOT IN (SELECT ol.country_id FROM official_languages ol)"
      ]
    ]
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "nlq": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
    "infer_predictions": [
      [
        "SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 INTERSECT SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90;",
        "SELECT DISTINCT l.name FROM languages l, official_languages ol, countries c WHERE l.id = ol.language_id AND ol.country_id = c.id AND c.overall_score > 95 INTERSECT SELECT DISTINCT l.name FROM languages l, official_languages ol, countries c WHERE l.id = ol.language_id AND ol.country_id = c.id AND c.overall_score < 90;",
        "WITH High_Score_Languages AS (SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95), Low_Score_Languages AS (SELECT l.name FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90) SELECT High_Score_Languages.name FROM High_Score_Languages JOIN Low_Score_Languages ON High_Score_Languages.name = Low_Score_Languages.name;",
        "WITH HighScoring AS (SELECT l.name AS lang_name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95), LowScoring AS (SELECT l.name AS lang_name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90) SELECT lang_name FROM HighScoring INTERSECT SELECT lang_name FROM LowScoring;",
        "SELECT name FROM languages WHERE id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95) AND id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90);",
        "SELECT l.name FROM languages l WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN countries c ON ol.country_id = c.id AND ol.language_id = l.id WHERE c.overall_score > 95) AND EXISTS (SELECT 1 FROM official_languages ol JOIN countries c ON ol.country_id = c.id AND ol.language_id = l.id WHERE c.overall_score < 90);",
        "SELECT l.name AS Language FROM languages l INNER JOIN official_languages ol ON l.id = ol.language_id INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 GROUP BY l.name HAVING SUM(CASE WHEN c.overall_score < 90 THEN 1 ELSE 0 END) > 0;",
        "SELECT DISTINCT l.name FROM languages l WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95 AND ol.language_id = l.id) INTERSECT SELECT DISTINCT l.name FROM languages l WHERE EXISTS (SELECT 1 FROM official_languages ol JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90 AND ol.language_id = l.id);"
      ]
    ]
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "nlq": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
    "infer_predictions": [
      [
        "SELECT DISTINCT lang.name FROM languages lang WHERE lang.id IN (SELECT ol.language_id FROM official_languages ol INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95) AND lang.id IN (SELECT ol.language_id FROM official_languages ol INNER JOIN countries c ON ol.country_id = c.id WHERE c.overall_score < 90)",
        "SELECT lang.name AS Language FROM languages lang JOIN official_languages ol ON lang.id = ol.language_id JOIN countries c_high ON ol.country_id = c_high.id JOIN countries c_low ON ol.country_id = c_low.id WHERE c_high.overall_score > 95 AND c_low.overall_score < 90 GROUP BY lang.name",
        "SELECT languages.name FROM languages WHERE languages.id IN (SELECT ol.language_id FROM official_languages ol JOIN countries c ON ol.country_id = c.id GROUP BY ol.language_id HAVING MAX(c.overall_score) > 95 AND MIN(c.overall_score) < 90)",
        "SELECT unique_languages.name FROM (SELECT lang.name FROM languages lang, official_languages ol, countries c WHERE ol.language_id = lang.id AND ol.country_id = c.id AND c.overall_score > 95 EXCEPT SELECT lang.name FROM languages lang, official_languages ol, countries c WHERE ol.language_id = lang.id AND ol.country_id = c.id AND c.overall_score >= 90) unique_languages",
        "SELECT L.name FROM languages L JOIN official_languages OL ON L.id = OL.language_id JOIN countries C1 ON OL.country_id = C1.id WHERE EXISTS (SELECT 1 FROM countries C2 WHERE C2.id = OL.country_id AND C2.overall_score > 95) AND EXISTS (SELECT 1 FROM countries C3 WHERE C3.id = OL.country_id AND C3.overall_score < 90)",
        "WITH high_score_countries AS ( SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score > 95 ), low_score_countries AS ( SELECT language_id FROM official_languages JOIN countries ON official_languages.country_id = countries.id WHERE overall_score < 90 ) SELECT DISTINCT name FROM languages WHERE id IN ( SELECT language_id FROM high_score_countries INTERSECT SELECT language_id FROM low_score_countries )",
        "SELECT DISTINCT name FROM languages WHERE languages.id IN (SELECT ol.language_id FROM countries JOIN official_languages ol ON countries.id = ol.country_id WHERE overall_score > 95 INTERSECT SELECT ol.language_id FROM countries JOIN official_languages ol ON countries.id = ol.country_id WHERE overall_score < 90)",
        "SELECT DISTINCT L.name FROM languages L WHERE EXISTS (SELECT 1 FROM official_languages OL INNER JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score > 95) AND EXISTS (SELECT 1 FROM official_languages OL INNER JOIN countries C ON OL.country_id = C.id WHERE OL.language_id = L.id AND C.overall_score < 90)"
      ]
    ]
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "nlq": "Which countries and cities are included in addresses?",
    "gold": "SELECT country ,  town_city FROM Addresses;",
    "infer_predictions": [
      [
        "SELECT DISTINCT country, town_city FROM addresses",
        "SELECT country, town_city FROM addresses GROUP BY country, town_city",
        "SELECT a.country, a.town_city FROM addresses a GROUP BY a.country, a.town_city",
        "SELECT country AS Country, town_city AS City FROM addresses GROUP BY Country, City",
        "SELECT DISTINCT addresses.country AS Nation, addresses.town_city AS Municipality FROM addresses",
        "SELECT country, town_city FROM (SELECT DISTINCT country, town_city FROM addresses)",
        "SELECT DISTINCT a.country, a.town_city FROM addresses a ORDER BY a.country, a.town_city",
        "SELECT DISTINCT country, town_city FROM addresses WHERE country IS NOT NULL AND town_city IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "nlq": "What are the countries and cities for each address?",
    "gold": "SELECT country ,  town_city FROM Addresses;",
    "infer_predictions": [
      [
        "SELECT country, town_city FROM addresses",
        "SELECT DISTINCT country, town_city FROM addresses ORDER BY country, town_city",
        "SELECT * FROM (SELECT country, town_city FROM addresses)",
        "SELECT country AS 'Country', town_city AS 'City' FROM addresses",
        "SELECT a1.country, a1.town_city FROM addresses a1",
        "SELECT country, town_city FROM addresses GROUP BY country, town_city",
        "SELECT a.country, a.town_city FROM addresses a GROUP BY a.country, a.town_city",
        "SELECT country, town_city FROM addresses WHERE country IS NOT NULL AND town_city IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "nlq": "In which states are each of the the properties located?",
    "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
    "infer_predictions": [
      [
        "SELECT p.property_name, a.county_state_province FROM properties p JOIN addresses a ON p.property_address_id = a.address_id",
        "SELECT property_name, county_state_province FROM properties INNER JOIN addresses ON properties.property_address_id = addresses.address_id",
        "SELECT properties.property_name, addresses.county_state_province FROM properties, addresses WHERE properties.property_address_id = addresses.address_id",
        "SELECT pr.property_name, ad.county_state_province FROM properties pr LEFT JOIN addresses ad ON pr.property_address_id = ad.address_id",
        "SELECT property_name AS 'Property Name', county_state_province AS 'State' FROM properties JOIN addresses ON property_address_id = address_id",
        "SELECT properties.property_name, county_state_province FROM properties CROSS JOIN addresses WHERE properties.property_address_id = addresses.address_id",
        "SELECT pr.property_name, ad.county_state_province FROM properties AS pr, addresses AS ad WHERE pr.property_address_id = ad.address_id",
        "SELECT prt.property_name, addr.county_state_province FROM properties prt LEFT OUTER JOIN addresses addr ON prt.property_address_id = addr.address_id",
        "SELECT property_name, county_state_province AS State FROM properties LEFT OUTER JOIN addresses ON properties.property_address_id = addresses.address_id"
      ]
    ]
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "nlq": "Give the states or provinces corresponding to each property.",
    "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
    "infer_predictions": [
      [
        "SELECT county_state_province FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id",
        "SELECT DISTINCT a.county_state_province FROM properties p JOIN addresses a ON p.property_address_id = a.address_id",
        "SELECT county_state_province FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties)",
        "SELECT a.county_state_province FROM addresses a, properties p WHERE a.address_id = p.property_address_id",
        "SELECT county_state_province AS StateOrProvince FROM properties INNER JOIN addresses ON properties.property_address_id = addresses.address_id",
        "SELECT addrs.county_state_province FROM addresses addrs INNER JOIN properties propts ON addrs.address_id = propts.property_address_id",
        "SELECT DISTINCT county_state_province FROM properties, addresses WHERE properties.property_address_id = addresses.address_id",
        "SELECT county_state_province FROM addresses WHERE EXISTS (SELECT 1 FROM properties WHERE properties.property_address_id = addresses.address_id)",
        "SELECT AA.county_state_province FROM addresses AA JOIN properties BB ON BB.property_address_id = AA.address_id"
      ]
    ]
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "nlq": "How is the feature rooftop described?",
    "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "infer_predictions": [
      [
        "SELECT feature_description FROM features WHERE feature_name = 'rooftop';",
        "SELECT f.feature_description FROM features f WHERE f.feature_name = 'rooftop';",
        "SELECT description FROM (SELECT feature_description AS description FROM features WHERE feature_name = 'rooftop');",
        "SELECT f.feature_description FROM features f WHERE 'rooftop' = f.feature_name;",
        "SELECT feature_description FROM features WHERE TRIM(feature_name) = 'rooftop';",
        "SELECT feature_description FROM features WHERE feature_name LIKE 'rooftop';",
        "SELECT feature_description FROM features WHERE feature_name IN (SELECT feature_name FROM features WHERE feature_name = 'rooftop');",
        "SELECT feature_description FROM features WHERE (SELECT COUNT(*) FROM features WHERE feature_name = 'rooftop') > 0 AND feature_name = 'rooftop';"
      ]
    ]
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "nlq": "Return the description of the feature 'rooftop'.",
    "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "infer_predictions": [
      [
        "SELECT feature_description FROM features WHERE feature_name = 'rooftop'",
        "SELECT f.feature_description FROM features f WHERE f.feature_name = 'rooftop'",
        "SELECT feature_description FROM features WHERE feature_name = 'rooftop' LIMIT 1",
        "SELECT feature_description FROM features WHERE feature_name LIKE 'rooftop'",
        "SELECT feature_description FROM features WHERE feature_name = 'rooftop' ORDER BY feature_id DESC LIMIT 1",
        "SELECT f.feature_description FROM features f WHERE f.feature_name LIKE 'rooftop' LIMIT 1",
        "SELECT feature_description FROM features WHERE LOWER(feature_name) = 'rooftop'",
        "SELECT feature_description FROM features WHERE feature_name COLLATE NOCASE = 'rooftop'",
        "SELECT f.feature_description FROM features AS f WHERE f.feature_name = 'rooftop' AND f.feature_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "nlq": "What are the feature name and description of the most commonly seen feature across properties?",
    "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT features.feature_name, features.feature_description FROM features WHERE features.feature_id = (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT F.feature_name, F.feature_description FROM features AS F JOIN (SELECT feature_id, COUNT(*) AS popularity FROM property_features GROUP BY feature_id ORDER BY popularity DESC LIMIT 1) AS PF ON F.feature_id = PF.feature_id",
        "SELECT F.feature_name, F.feature_description FROM features AS F INNER JOIN (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC LIMIT 1) AS MC ON F.feature_id = MC.feature_id",
        "SELECT feature_name, feature_description FROM features WHERE feature_id IN (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
        "SELECT FN.feature_name, FN.feature_description FROM features FN, (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(feature_id) DESC LIMIT 1) MidQuery WHERE FN.feature_id = MidQuery.feature_id",
        "SELECT (SELECT feature_name FROM features WHERE feature_id = sub.feature_id), (SELECT feature_description FROM features WHERE feature_id = sub.feature_id) FROM (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1) sub",
        "WITH MostCommonFeature AS (SELECT feature_id, COUNT(*) AS Count FROM property_features GROUP BY feature_id ORDER BY Count DESC LIMIT 1) SELECT features.feature_name, features.feature_description FROM features JOIN MostCommonFeature ON features.feature_id = MostCommonFeature.feature_id"
      ]
    ]
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "nlq": "Give the feature name and description for the most common feature across all properties.",
    "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY pf.feature_id ORDER BY COUNT(pf.property_id) DESC LIMIT 1",
        "SELECT feature_name, feature_description FROM features WHERE feature_id = (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
        "SELECT feature_name, feature_description FROM features WHERE feature_id IN (SELECT feature_id FROM property_features GROUP BY feature_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT f.feature_name, f.feature_description FROM features f JOIN property_features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id HAVING COUNT(pf.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM property_features GROUP BY feature_id))"
      ]
    ]
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "nlq": "What is the minimum number of rooms in a property?",
    "gold": "SELECT min(room_count) FROM Properties;",
    "infer_predictions": [
      [
        "SELECT MIN(room_count) FROM properties",
        "SELECT MIN(p.room_count) FROM properties p",
        "SELECT MIN(property_summary.room_count) FROM (SELECT room_count FROM properties) property_summary",
        "SELECT MIN(room_info.min_rooms) FROM (SELECT property_id, COUNT(*) AS min_rooms FROM rooms GROUP BY property_id) room_info",
        "SELECT MIN(rooms_per_property.num_rooms) FROM (SELECT COUNT(room_number) AS num_rooms FROM rooms GROUP BY property_id) rooms_per_property",
        "SELECT property_id, MIN(room_cnt) FROM (SELECT property_id, COUNT(*) AS room_cnt FROM rooms GROUP BY property_id) GROUP BY property_id",
        "WITH RoomCounts AS (SELECT property_id, COUNT(*) AS total_rooms FROM rooms GROUP BY property_id) SELECT MIN(total_rooms) FROM RoomCounts",
        "SELECT MIN(TotalRooms) FROM (SELECT COUNT(room_number) AS TotalRooms FROM rooms GROUP BY property_id) AS PropertyRoomCounts",
        "WITH all_counts AS (SELECT COUNT(room_number) AS property_rooms FROM rooms GROUP BY property_id) SELECT MIN(property_rooms) FROM all_counts",
        "SELECT property_id, MIN(count_room) AS MinNumRooms FROM (SELECT property_id, COUNT(*) AS count_room FROM rooms GROUP BY property_id) AS RoomCountGroup GROUP BY property_id"
      ]
    ]
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "nlq": "What is the lowest room count across all the properties?",
    "gold": "SELECT min(room_count) FROM Properties;",
    "infer_predictions": [
      [
        "SELECT MIN(room_count) FROM properties;",
        "SELECT MIN(p.room_count) FROM properties p;",
        "SELECT MIN(room_count) FROM (SELECT room_count FROM properties);",
        "SELECT MIN(room_count) AS lowest_room_count FROM properties;",
        "SELECT MIN(p.room_count) AS minimum_room_count FROM properties p;",
        "SELECT * FROM (SELECT MIN(room_count) FROM properties) AS minimal_room_count;"
      ]
    ]
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "nlq": "How many properties have 1 parking lot or 1 garage?",
    "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM properties WHERE parking_lots = 1;",
        "SELECT COUNT(DISTINCT property_id) FROM properties WHERE parking_lots = 1;",
        "SELECT COUNT(property_id) FROM properties WHERE parking_lots = 1 OR property_name = 'garage';",
        "SELECT COUNT(property_id) FROM properties WHERE property_name = \"garage\" AND parking_lots = 1;",
        "SELECT COUNT(*) FROM properties WHERE properties.parking_lots = 1 OR properties.property_name = 'garage';"
      ]
    ]
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "nlq": "Count the number of properties that have 1 parking lot or 1 garage.",
    "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT property_id) FROM properties WHERE parking_lots = 1 OR property_name = 'garage'",
        "SELECT COUNT(*) FROM (SELECT property_id FROM properties WHERE parking_lots = 1 UNION SELECT property_id FROM properties WHERE property_name = 'garage')",
        "SELECT COUNT(property_id) FROM (SELECT property_id FROM properties WHERE parking_lots = 1 UNION ALL SELECT property_id FROM properties WHERE property_name = 'garage') AS unique_properties",
        "SELECT COUNT(DISTINCT p.property_id) FROM properties p WHERE p.parking_lots = 1 OR p.property_name = 'garage'",
        "SELECT COUNT(DISTINCT id) AS Total FROM (SELECT property_id AS id FROM properties WHERE property_name = 'garage' UNION SELECT property_id AS id FROM properties WHERE parking_lots = 1)",
        "SELECT COUNT(*) FROM (SELECT property_id FROM properties GROUP BY property_id HAVING SUM(parking_lots) = 1 OR MAX(property_name) = 'garage')",
        "SELECT COUNT(DISTINCT property_id) FROM properties WHERE parking_lots = 1 UNION SELECT COUNT(DISTINCT property_id) FROM properties WHERE property_name = 'garage'",
        "SELECT COUNT(DISTINCT id) FROM (SELECT property_id AS id FROM properties WHERE parking_lots = 1 UNION SELECT property_id AS id FROM properties WHERE property_name = 'garage')"
      ]
    ]
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "nlq": "For users whose description contain the string 'Mother', which age categories are they in?",
    "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.age_category_description FROM users u JOIN ref_age_categories r ON u.age_category_code = r.age_category_code WHERE r.age_category_description LIKE '%Mother%'",
        "SELECT DISTINCT r.age_category_description FROM ref_age_categories r WHERE EXISTS (SELECT 1 FROM users u WHERE u.age_category_code = r.age_category_code AND r.age_category_description LIKE '%Mother%')",
        "SELECT ref_age_categories.age_category_description FROM ref_age_categories JOIN users ON ref_age_categories.age_category_code = users.age_category_code WHERE ref_age_categories.age_category_description LIKE '%Mother%' GROUP BY ref_age_categories.age_category_description",
        "SELECT DISTINCT age_category_description FROM ref_age_categories WHERE age_category_code IN (SELECT age_category_code FROM users WHERE ref_age_categories.age_category_code = users.age_category_code AND ref_age_categories.age_category_description LIKE '%Mother%')",
        "SELECT r.age_category_description FROM ref_age_categories r JOIN (SELECT DISTINCT age_category_code FROM users) u ON r.age_category_code = u.age_category_code WHERE r.age_category_description LIKE '%Mother%'",
        "WITH RelevantUsers AS (SELECT age_category_code FROM users GROUP BY age_category_code) SELECT DISTINCT age_category_description FROM ref_age_categories JOIN RelevantUsers ON ref_age_categories.age_category_code = RelevantUsers.age_category_code WHERE age_category_description LIKE '%Mother%'",
        "SELECT DISTINCT r.age_category_description FROM ref_age_categories r WHERE r.age_category_description LIKE '%Mother%' AND r.age_category_code IN (SELECT DISTINCT u.age_category_code FROM users u)",
        "SELECT age_category_description FROM (SELECT * FROM ref_age_categories WHERE age_category_description LIKE '%Mother%') AS RelevantCategories JOIN users ON users.age_category_code = RelevantCategories.age_category_code",
        "SELECT DISTINCT age_category_description FROM ref_age_categories WHERE EXISTS (SELECT age_category_code FROM users WHERE users.age_category_code = ref_age_categories.age_category_code AND age_category_description LIKE '%Mother%')"
      ]
    ]
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "nlq": "What are the age categories for users whose description contains the string Mother?",
    "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT rac.age_category_description FROM ref_age_categories rac JOIN users u ON rac.age_category_code = u.age_category_code WHERE rac.age_category_description LIKE '%Mother%'",
        "SELECT rac.age_category_description FROM ref_age_categories rac WHERE EXISTS (SELECT 1 FROM users u WHERE u.age_category_code = rac.age_category_code AND rac.age_category_description LIKE '%Mother%') GROUP BY rac.age_category_description",
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code IN (SELECT age_category_code FROM users WHERE age_category_description LIKE '%Mother%')",
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code IN (SELECT u.age_category_code FROM users u INNER JOIN ref_age_categories rac ON u.age_category_code = rac.age_category_code WHERE rac.age_category_description LIKE '%Mother%')",
        "SELECT DISTINCT rac.age_category_description FROM ref_age_categories rac, users u WHERE rac.age_category_code = u.age_category_code AND rac.age_category_description LIKE '%Mother%'",
        "SELECT DISTINCT age_category_description FROM ref_age_categories WHERE age_category_description LIKE '%Mother%' AND age_category_code IN (SELECT age_category_code FROM users)",
        "SELECT age_category_description FROM (SELECT age_category_description, age_category_code FROM ref_age_categories WHERE age_category_description LIKE '%Mother%') AS filtered_categories WHERE age_category_code IN (SELECT age_category_code FROM users)",
        "SELECT DISTINCT rac.age_category_description FROM users u JOIN ref_age_categories rac ON u.age_category_code = rac.age_category_code WHERE rac.age_category_description LIKE '%Mother%'",
        "SELECT DISTINCT description FROM (SELECT rac.age_category_description AS description FROM ref_age_categories rac JOIN users u ON rac.age_category_code = u.age_category_code WHERE rac.age_category_description LIKE '%Mother%')",
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_description LIKE '%Mother%' AND age_category_code IN (SELECT DISTINCT age_category_code FROM users)"
      ]
    ]
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "nlq": "What is the first name of the user who owns the greatest number of properties?",
    "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT U.first_name FROM users U JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1) P ON U.user_id = P.owner_user_id",
        "SELECT U.first_name FROM users U WHERE U.user_id IN (SELECT P.owner_user_id FROM properties P GROUP BY P.owner_user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1)",
        "SELECT U.first_name FROM (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxOwner JOIN users U ON MaxOwner.owner_user_id = U.user_id",
        "SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))",
        "SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
        "SELECT (SELECT U.first_name FROM users U WHERE U.user_id = P.owner_user_id ) AS FirstName FROM properties P GROUP BY P.owner_user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1",
        "SELECT U.first_name FROM users U, (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) AS MostProps WHERE U.user_id = MostProps.owner_user_id",
        "SELECT U.first_name FROM users U WHERE EXISTS (SELECT 1 FROM properties P WHERE P.owner_user_id = U.user_id GROUP BY P.owner_user_id HAVING COUNT(P.property_id) = (SELECT MAX(Cnt) FROM (SELECT COUNT(property_id) AS Cnt FROM properties GROUP BY owner_user_id)))"
      ]
    ]
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "nlq": "Return the first name of the user who owns the most properties.",
    "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT u.first_name FROM users u JOIN properties p ON u.user_id = p.owner_user_id GROUP BY p.owner_user_id ORDER BY COUNT(p.property_id) DESC LIMIT 1",
        "SELECT U.first_name FROM users U WHERE U.user_id IN (SELECT P.owner_user_id FROM properties P GROUP BY P.owner_user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1)",
        "SELECT U.first_name FROM users U JOIN (SELECT owner_user_id, COUNT(property_id) AS property_count FROM properties GROUP BY owner_user_id) AS PMAX ON U.user_id = PMAX.owner_user_id ORDER BY PMAX.property_count DESC LIMIT 1",
        "SELECT first_name FROM users WHERE user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)",
        "SELECT U.first_name FROM users U NATURAL JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1) P",
        "SELECT U.first_name FROM users U JOIN properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id ORDER BY COUNT(P.property_id) DESC LIMIT 1",
        "SELECT U.first_name FROM users U WHERE U.user_id = (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) = (SELECT MAX(CNT) FROM (SELECT owner_user_id, COUNT(property_id) AS CNT FROM properties GROUP BY owner_user_id) Temp)) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "nlq": "List the average room count of the properties with gardens.",
    "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
    "infer_predictions": [
      [
        "SELECT AVG(properties.room_count) FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden'",
        "SELECT AVG(p.room_count) FROM properties p INNER JOIN property_features pf ON p.property_id = pf.property_id INNER JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden'",
        "SELECT AVG(room_count) FROM properties WHERE property_id IN (SELECT property_id FROM property_features WHERE feature_id = (SELECT feature_id FROM features WHERE feature_name = 'garden'))",
        "SELECT AVG(properties.room_count) AS AverageRoomCount FROM properties LEFT JOIN property_features ON properties.property_id = property_features.property_id LEFT JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden'",
        "SELECT AVG(room_count) FROM properties WHERE EXISTS (SELECT 1 FROM property_features JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden' AND properties.property_id = property_features.property_id)",
        "SELECT AVG(properties.room_count) FROM properties, property_features, features WHERE properties.property_id = property_features.property_id AND property_features.feature_id = features.feature_id AND features.feature_name = 'garden'",
        "SELECT AVG(room_count) FROM properties p WHERE EXISTS (SELECT * FROM property_features pf JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden' AND pf.property_id = p.property_id)",
        "SELECT AVG(p.room_count) FROM properties p WHERE p.property_id IN (SELECT pf.property_id FROM property_features pf INNER JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden')",
        "SELECT AVG(room_count) FROM properties p WHERE p.property_id IN (SELECT DISTINCT pf.property_id FROM property_features pf JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden')"
      ]
    ]
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "nlq": "On average, how many rooms do properties with garden features have?",
    "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
    "infer_predictions": [
      [
        "SELECT AVG(room_count) AS avg_rooms FROM properties WHERE property_id IN (SELECT properties.property_id FROM properties JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden')",
        "SELECT AVG(room_count) FROM properties INNER JOIN property_features ON properties.property_id = property_features.property_id INNER JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden'",
        "SELECT AVG(p.room_count) FROM properties p, property_features pf, features f WHERE p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'garden'",
        "SELECT AVG(room_count) FROM properties WHERE EXISTS (SELECT 1 FROM property_features INNER JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'garden' AND properties.property_id = property_features.property_id)",
        "SELECT AVG(p.room_count) FROM properties p JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden'",
        "SELECT AVG(room_count) FROM properties WHERE property_id IN (SELECT property_id FROM property_features WHERE feature_id IN (SELECT feature_id FROM features WHERE feature_name = 'garden'))",
        "SELECT AVG(p.room_count) FROM properties p INNER JOIN property_features pf ON p.property_id = pf.property_id INNER JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden'",
        "SELECT AVG(p.room_count) FROM properties p, property_features pf, features f WHERE p.property_id = pf.property_id AND pf.feature_id = f.feature_id AND f.feature_name = 'garden' GROUP BY p.property_id",
        "SELECT AVG(p.room_count) FROM properties p WHERE p.property_id IN (SELECT pf.property_id FROM property_features pf JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden')"
      ]
    ]
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "nlq": "In which cities are there any properties equipped with a swimming pool?",
    "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "infer_predictions": [
      [
        "SELECT DISTINCT t.town_city FROM addresses t JOIN properties p ON t.address_id = p.property_address_id JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'",
        "SELECT DISTINCT addresses.town_city FROM addresses INNER JOIN properties ON addresses.address_id = properties.property_address_id INNER JOIN property_features ON properties.property_id = property_features.property_id INNER JOIN features ON property_features.feature_id = features.feature_id WHERE features.feature_name = 'swimming pool'",
        "SELECT DISTINCT a.town_city FROM addresses a, properties pr, property_features pf, features ft WHERE a.address_id = pr.property_address_id AND pr.property_id = pf.property_id AND pf.feature_id = ft.feature_id AND ft.feature_name = 'swimming pool'",
        "SELECT DISTINCT town_city FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE property_id IN (SELECT property_id FROM property_features WHERE feature_id = (SELECT feature_id FROM features WHERE feature_name = 'swimming pool')))",
        "SELECT DISTINCT a.town_city FROM addresses a INNER JOIN properties pr ON a.address_id = pr.property_address_id INNER JOIN property_features pf ON pr.property_id = pf.property_id INNER JOIN features ft ON pf.feature_id = ft.feature_id AND ft.feature_name = 'swimming pool'",
        "SELECT town_city FROM addresses WHERE EXISTS (SELECT 1 FROM properties p LEFT JOIN property_features pf ON p.property_id = pf.property_id LEFT JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool' AND p.property_address_id = addresses.address_id)",
        "SELECT DISTINCT a.town_city FROM addresses a WHERE a.address_id IN (SELECT p.property_address_id FROM properties p JOIN property_features pf ON p.property_id = pf.property_id JOIN features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool')",
        "SELECT DISTINCT address.town_city FROM addresses address JOIN properties prop ON address.address_id = prop.property_address_id JOIN property_features pf ON prop.property_id = pf.property_id JOIN features feat ON pf.feature_id = feat.feature_id WHERE feat.feature_name = 'swimming pool'",
        "SELECT town_city FROM (SELECT DISTINCT addresses.town_city, features.feature_name FROM properties JOIN addresses ON properties.property_address_id = addresses.address_id JOIN property_features ON properties.property_id = property_features.property_id JOIN features ON property_features.feature_id = features.feature_id) AS subquery WHERE subquery.feature_name = 'swimming pool'"
      ]
    ]
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "nlq": "Return the cities in which there exist properties that have swimming pools.",
    "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.town_city FROM addresses a JOIN properties p ON a.address_id = p.property_address_id JOIN features f ON f.feature_name = 'swimming pool' WHERE p.property_id IN (SELECT property_id FROM rooms);",
        "SELECT DISTINCT town_city FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE property_id IN (SELECT property_id FROM rooms) AND property_id IN (SELECT property_id FROM features WHERE feature_name = 'swimming pool'));",
        "SELECT town_city FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE property_id IN (SELECT property_id FROM features WHERE feature_name LIKE '%swimming pool%'));",
        "SELECT a.town_city FROM addresses a INNER JOIN properties p ON a.address_id = p.property_address_id WHERE EXISTS (SELECT 1 FROM features WHERE property_id = p.property_id AND feature_name = 'swimming pool');",
        "SELECT town_city FROM addresses a JOIN properties p ON a.address_id = p.property_address_id WHERE p.property_id IN (SELECT property_id FROM features f WHERE feature_name = 'swimming pool');"
      ]
    ]
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "nlq": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT property_id, vendor_requested_price FROM properties ORDER BY vendor_requested_price ASC LIMIT 1",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p ORDER BY p.vendor_requested_price ASC LIMIT 1",
        "SELECT properties.property_id, MIN(properties.vendor_requested_price) FROM properties",
        "SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p WHERE p.vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)",
        "SELECT property_id, vendor_requested_price FROM properties p1 WHERE NOT EXISTS (SELECT 1 FROM properties p2 WHERE p2.vendor_requested_price < p1.vendor_requested_price)",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p WHERE p.vendor_requested_price IN (SELECT MIN(vendor_requested_price) FROM properties)",
        "SELECT property_id, vendor_requested_price FROM properties GROUP BY property_id, vendor_requested_price HAVING vendor_requested_price = MIN(vendor_requested_price)"
      ]
    ]
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "nlq": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT property_id, MIN(vendor_requested_price) AS lowest_price FROM properties GROUP BY property_id ORDER BY lowest_price LIMIT 1",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p ORDER BY p.vendor_requested_price ASC LIMIT 1",
        "SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties)",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p WHERE p.vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties p)",
        "SELECT MIN(vendor_requested_price) AS lowest_price, property_id FROM properties GROUP BY property_id HAVING lowest_price = (SELECT MIN(vendor_requested_price) FROM properties) LIMIT 1",
        "SELECT p.property_id, p.vendor_requested_price FROM properties p WHERE p.vendor_requested_price IN (SELECT MIN(vendor_requested_price) FROM properties)",
        "SELECT first.property_id, first.vendor_requested_price FROM (SELECT property_id, vendor_requested_price FROM properties ORDER BY vendor_requested_price ASC) AS first LIMIT 1",
        "SELECT property_id, MIN(vendor_requested_price) FROM properties GROUP BY property_id HAVING MIN(vendor_requested_price) = (SELECT MIN(vendor_requested_price) FROM properties) LIMIT 1",
        "SELECT property_id, lowest_price FROM (SELECT property_id, MIN(vendor_requested_price) AS lowest_price FROM properties GROUP BY property_id) AS minimal_prices ORDER BY lowest_price LIMIT 1",
        "SELECT property_id, vendor_requested_price FROM properties WHERE vendor_requested_price = (SELECT MIN(vendor_requested_price) FROM properties LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "nlq": "On average, how many rooms does a property have?",
    "gold": "SELECT avg(room_count) FROM Properties;",
    "infer_predictions": [
      [
        "SELECT AVG(room_count) FROM properties;",
        "SELECT AVG(count_rooms) FROM (SELECT COUNT(*) AS count_rooms FROM rooms GROUP BY property_id);",
        "SELECT AVG(sub.count) FROM (SELECT COUNT(room_number) AS count FROM rooms GROUP BY property_id) AS sub;",
        "SELECT AVG(Room_counts) FROM (SELECT property_id, COUNT(*) AS Room_counts FROM rooms GROUP BY property_id) rooms_count;",
        "SELECT AVG(total_rooms) FROM (SELECT property_id, COUNT(room_number) as total_rooms FROM rooms GROUP BY property_id) AS room_totals;",
        "SELECT (SELECT SUM(room_count) FROM properties) / COUNT(distinct property_id) FROM properties;",
        "SELECT AVG(countVal) FROM ( SELECT COUNT(1) as countVal FROM rooms GROUP BY property_id) qry;",
        "SELECT AVG(room_total) FROM (SELECT COUNT(*) AS room_total FROM rooms GROUP BY property_id) AS table_count_rooms;"
      ]
    ]
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "nlq": "What is the average number of rooms in a property?",
    "gold": "SELECT avg(room_count) FROM Properties;",
    "infer_predictions": [
      [
        "SELECT AVG(room_count) FROM properties",
        "SELECT AVG(room_count) AS avg_rooms FROM properties",
        "SELECT AVG(room_count) FROM properties WHERE room_count IS NOT NULL",
        "SELECT AVG(room_count) FROM properties GROUP BY property_id",
        "SELECT AVG(p.room_count) FROM properties p WHERE p.room_count IS NOT NULL",
        "SELECT AVG(p.room_count) AS average_room_count FROM properties p WHERE p.room_count >= 0",
        "SELECT AVG(room_count) FROM (SELECT room_count FROM properties) AS derived_table"
      ]
    ]
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "nlq": "How many kinds of room sizes are listed?",
    "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT room_size) FROM rooms",
        "SELECT COUNT(DISTINCT r.room_size) FROM rooms r",
        "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM rooms)",
        "SELECT COUNT(*) FROM (SELECT room_size FROM rooms GROUP BY room_size)",
        "SELECT COUNT(DISTINCT room_size) FROM (SELECT room_size FROM rooms)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT r.room_size FROM rooms r)",
        "SELECT COUNT(room_size) FROM (SELECT DISTINCT room_size FROM rooms)"
      ]
    ]
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "nlq": "Return the number of different room sizes.",
    "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT room_size) FROM rooms;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT room_size FROM rooms);",
        "SELECT COUNT(DISTINCT r.room_size) FROM rooms r;",
        "SELECT COUNT(*) FROM (SELECT room_size FROM rooms GROUP BY room_size);",
        "SELECT COUNT(DISTINCT room_size) AS unique_room_sizes FROM rooms;",
        "SELECT COUNT(unique_sizes.room_size) FROM (SELECT DISTINCT room_size FROM rooms) AS unique_sizes;",
        "SELECT COUNT(*) FROM (SELECT room_size AS size FROM rooms GROUP BY size);",
        "SELECT COUNT(r.room_size) FROM (SELECT DISTINCT room_size FROM rooms) r;"
      ]
    ]
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "nlq": "What are the ids of users who have searched at least twice, and what did they search?",
    "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
    "infer_predictions": [
      [
        "SELECT u.user_id, us.search_string FROM users u JOIN user_searches us ON u.user_id = us.user_id GROUP BY u.user_id, us.search_string HAVING COUNT(us.search_seq) >= 2",
        "SELECT u.user_id, us.search_string FROM user_searches us INNER JOIN users u ON us.user_id = u.user_id WHERE u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
        "SELECT users.user_id, user_searches.search_string FROM users JOIN user_searches ON users.user_id = user_searches.user_id WHERE users.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) > 1)",
        "SELECT u.user_id, us.search_string FROM users AS u JOIN user_searches AS us ON u.user_id = us.user_id WHERE us.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) >= 2)",
        "SELECT DISTINCT u.user_id, us.search_string FROM users u, user_searches us WHERE u.user_id = us.user_id AND u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) >= 2)",
        "SELECT users.user_id, user_searches.search_string FROM users, user_searches WHERE users.user_id = user_searches.user_id AND users.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) >= 2)",
        "WITH cte AS (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) SELECT u.user_id, us.search_string FROM users u JOIN user_searches us ON u.user_id = us.user_id WHERE u.user_id IN (SELECT user_id FROM cte)",
        "SELECT DISTINCT user_searches.user_id, user_searches.search_string FROM user_searches, users WHERE user_searches.user_id = users.user_id AND user_searches.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
        "SELECT DISTINCT us.user_id, search_string FROM user_searches us WHERE us.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) ORDER BY us.user_id"
      ]
    ]
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "nlq": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
    "infer_predictions": [
      [
        "SELECT user_searches.user_id, user_searches.search_seq FROM user_searches GROUP BY user_searches.user_id, user_searches.search_seq HAVING COUNT(user_searches.search_seq) >= 2",
        "SELECT us.user_id, us.search_seq FROM user_searches us GROUP BY us.user_id, us.search_seq HAVING COUNT(us.search_seq) >= 2",
        "SELECT d.user_id, d.search_seq FROM (SELECT user_id, search_seq FROM user_searches) d GROUP BY d.user_id, d.search_seq HAVING COUNT(d.search_seq) >= 2",
        "SELECT DISTINCT us.user_id, us.search_seq FROM user_searches us INNER JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2) t ON us.user_id = t.user_id",
        "SELECT DISTINCT user_id, search_seq FROM user_searches WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) >= 2)",
        "SELECT user1.user_id, user1.search_seq FROM user_searches user1 JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(user_id) >= 2) user2 ON user1.user_id = user2.user_id",
        "SELECT tmp.user_id, tmp.search_seq FROM (SELECT user_id, search_seq, COUNT(search_seq) AS count FROM user_searches GROUP BY user_id, search_seq) tmp WHERE tmp.count >= 2",
        "SELECT user_id, search_seq FROM user_searches GROUP BY 1, 2 HAVING COUNT(*) >= 2",
        "SELECT a.user_id, a.search_seq FROM (SELECT user_id, search_seq FROM user_searches) a WHERE (SELECT COUNT(*) FROM user_searches b WHERE b.user_id = a.user_id) >= 2 GROUP BY a.user_id, a.search_seq",
        "SELECT sqr.user_id, sqr.search_seq FROM (SELECT user_searches.user_id, user_searches.search_seq FROM user_searches JOIN (SELECT user_id, COUNT(*) AS num FROM user_searches GROUP BY user_id HAVING num >= 2) filtered ON user_searches.user_id = filtered.user_id) sqr"
      ]
    ]
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "nlq": "When was the time of the latest search by a user?",
    "gold": "SELECT max(search_datetime) FROM User_Searches;",
    "infer_predictions": [
      [
        "SELECT MAX(search_datetime) FROM user_searches",
        "SELECT search_datetime FROM user_searches ORDER BY search_datetime DESC LIMIT 1",
        "SELECT search_datetime FROM user_searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM user_searches)",
        "SELECT MAX(us.search_datetime) FROM user_searches us",
        "SELECT us.search_datetime FROM user_searches us ORDER BY us.search_datetime DESC LIMIT 1",
        "SELECT search_datetime FROM user_searches WHERE search_datetime IN (SELECT MAX(search_datetime) FROM user_searches)",
        "SELECT MAX(search_datetime) AS LatestSearchTime FROM user_searches"
      ]
    ]
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "nlq": "What was the time of the most recent search?",
    "gold": "SELECT max(search_datetime) FROM User_Searches;",
    "infer_predictions": [
      [
        "SELECT MAX(search_datetime) AS MostRecentSearch FROM user_searches",
        "SELECT search_datetime FROM user_searches ORDER BY search_datetime DESC LIMIT 1",
        "SELECT search_datetime FROM user_searches WHERE search_datetime = (SELECT MAX(search_datetime) FROM user_searches)",
        "SELECT MAX(us.search_datetime) FROM user_searches us",
        "SELECT search_datetime FROM (SELECT search_datetime FROM user_searches ORDER BY search_datetime DESC) LIMIT 1",
        "SELECT MAX(search_datetime) FROM user_searches WHERE search_datetime IS NOT NULL",
        "SELECT search_datetime FROM user_searches WHERE search_datetime IN (SELECT MAX(search_datetime) FROM user_searches)"
      ]
    ]
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "nlq": "What are all the user searches time and content? Sort the result descending by content.",
    "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
    "infer_predictions": [
      [
        "SELECT search_datetime, search_string FROM user_searches ORDER BY search_string DESC",
        "SELECT us.search_datetime, us.search_string FROM user_searches us ORDER BY us.search_string DESC",
        "SELECT search_datetime, search_string FROM user_searches WHERE user_id IN (SELECT user_id FROM user_searches) ORDER BY search_string DESC",
        "SELECT search_datetime, search_string FROM user_searches GROUP BY search_datetime, search_string ORDER BY search_string DESC",
        "SELECT * FROM (SELECT search_datetime, search_string FROM user_searches) ORDER BY search_string DESC",
        "SELECT search_datetime, search_string FROM (SELECT search_datetime, search_string FROM user_searches) sq ORDER BY sq.search_string DESC",
        "SELECT a.search_datetime, a.search_string FROM user_searches a ORDER BY a.search_string DESC",
        "SELECT A.search_datetime, A.search_string FROM user_searches A ORDER BY A.search_string DESC",
        "SELECT first.search_datetime, first.search_string FROM user_searches first ORDER BY first.search_string DESC"
      ]
    ]
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "nlq": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
    "infer_predictions": [
      [
        "SELECT search_string, search_datetime FROM user_searches ORDER BY search_string DESC",
        "SELECT us.search_string, us.search_datetime FROM user_searches us ORDER BY us.search_string DESC",
        "SELECT search.search_string, search.search_datetime FROM user_searches search ORDER BY search.search_string DESC",
        "SELECT s_string.search_string, s_time.search_datetime FROM user_searches s_string JOIN user_searches s_time ON s_string.user_id = s_time.user_id AND s_string.search_seq = s_time.search_seq ORDER BY s_string.search_string DESC",
        "SELECT (search_string) AS Keyword, (search_datetime) AS SearchTime FROM user_searches ORDER BY Keyword DESC"
      ]
    ]
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "nlq": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
    "infer_predictions": [
      [
        "SELECT DISTINCT Z.zip_postcode FROM addresses AS Z JOIN properties AS P ON Z.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (SELECT U.user_id FROM users AS U JOIN properties AS PP ON U.user_id = PP.owner_user_id GROUP BY U.user_id HAVING COUNT(PP.property_id) <= 2)",
        "SELECT DISTINCT a.zip_postcode FROM addresses a, properties p WHERE a.address_id = p.property_address_id AND p.owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
        "SELECT DISTINCT addresses.zip_postcode FROM addresses INNER JOIN properties ON properties.property_address_id = addresses.address_id LEFT JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2) as limited ON properties.owner_user_id = limited.owner_user_id WHERE limited.owner_user_id IS NULL",
        "SELECT addresses.zip_postcode FROM addresses JOIN properties ON addresses.address_id = properties.property_address_id EXCEPT SELECT addresses.zip_postcode FROM addresses JOIN properties ON addresses.address_id = properties.property_address_id WHERE properties.owner_user_id IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
        "SELECT DISTINCT zip_postcode AS PostalCode FROM addresses LEFT OUTER JOIN properties ON addresses.address_id = properties.property_address_id WHERE NOT EXISTS (SELECT NULL FROM properties WHERE owner_user_id = properties.owner_user_id GROUP BY owner_user_id HAVING COUNT(DISTINCT property_id) <= 2)",
        "WITH OwnerCount AS (SELECT owner_user_id, COUNT(property_id) AS p_count FROM properties GROUP BY owner_user_id) SELECT DISTINCT z.zip_postcode FROM addresses AS z JOIN properties AS p ON z.address_id = p.property_address_id WHERE p.owner_user_id NOT IN (SELECT owner_user_id FROM OwnerCount WHERE p_count <= 2)",
        "SELECT DISTINCT X.zip_postcode FROM addresses X INNER JOIN properties Y ON X.address_id = Y.property_address_id WHERE NOT EXISTS (SELECT * FROM properties W WHERE Y.owner_user_id = W.owner_user_id GROUP BY W.owner_user_id HAVING COUNT(W.property_id) <= 2)",
        "SELECT Y.zip_postcode FROM addresses Y WHERE Y.address_id IN (SELECT X.property_address_id FROM properties X WHERE X.owner_user_id NOT IN (SELECT V.owner_user_id FROM properties V JOIN users Bian ON V.owner_user_id = Bian.user_id GROUP BY V.owner_user_id HAVING COUNT(V.property_id) <= 2))",
        "SELECT DISTINCT Z.zip_postcode FROM addresses AS Z LEFT JOIN properties AS P ON Z.address_id = P.property_address_id LEFT OUTER JOIN (SELECT P.owner_user_id FROM properties P GROUP BY P.owner_user_id HAVING COUNT(P.property_id) > 2) AS LargeOwners ON P.owner_user_id = LargeOwners.owner_user_id WHERE LargeOwners.owner_user_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "nlq": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
    "infer_predictions": [
      [
        "SELECT DISTINCT ad.zip_postcode FROM properties pr JOIN addresses ad ON pr.property_address_id = ad.address_id WHERE pr.owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2)",
        "SELECT DISTINCT ad.zip_postcode FROM addresses ad INNER JOIN properties pr ON ad.address_id = pr.property_address_id WHERE NOT EXISTS (SELECT 1 FROM properties p WHERE p.owner_user_id = pr.owner_user_id GROUP BY p.owner_user_id HAVING COUNT(p.property_id) <= 2)",
        "SELECT DISTINCT ad.zip_postcode FROM addresses ad WHERE ad.address_id IN (SELECT pr.property_address_id FROM properties pr WHERE pr.owner_user_id NOT IN (SELECT p.owner_user_id FROM properties p GROUP BY p.owner_user_id HAVING COUNT(DISTINCT p.property_id) <= 2))",
        "SELECT distinct(zip_postcode) FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))",
        "SELECT DISTINCT ad.zip_postcode FROM properties pr, addresses ad WHERE pr.property_address_id = ad.address_id AND pr.owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(DISTINCT property_id) <= 2)",
        "SELECT zip_postcode FROM addresses WHERE EXISTS (SELECT 1 FROM properties WHERE addresses.address_id = property_address_id AND owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))",
        "SELECT DISTINCT ad.zip_postcode FROM addresses ad JOIN properties pr ON pr.property_address_id = ad.address_id LEFT JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2) owners ON pr.owner_user_id = owners.owner_user_id WHERE owners.owner_user_id IS NULL",
        "SELECT DISTINCT zip_postcode FROM addresses ad INNER JOIN properties pr ON ad.address_id = pr.property_address_id LEFT JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(*) > 2) heavy_owners ON heavy_owners.owner_user_id = pr.owner_user_id WHERE heavy_owners.owner_user_id IS NOT NULL",
        "SELECT DISTINCT zip_postcode FROM addresses WHERE address_id IN (SELECT property_address_id FROM properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) > 2))",
        "SELECT DISTINCT ad.zip_postcode FROM addresses ad, properties pr WHERE ad.address_id = pr.property_address_id AND pr.owner_user_id NOT IN (SELECT p.owner_user_id FROM properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) <= 2)"
      ]
    ]
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "nlq": "What are the users making only one search? List both category and user id.",
    "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
    "infer_predictions": [
      [
        "SELECT DISTINCT u.user_id, u.user_category_code FROM users u WHERE EXISTS (SELECT 1 FROM user_searches us WHERE us.user_id = u.user_id GROUP BY us.user_id HAVING COUNT(*) = 1)",
        "SELECT u.user_id, u.user_category_code FROM users u JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1) s ON u.user_id = s.user_id",
        "SELECT u.user_id, u.user_category_code FROM users u WHERE u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1)",
        "SELECT u1.user_id, u1.user_category_code FROM users u1 WHERE (SELECT COUNT(*) FROM user_searches us1 WHERE us1.user_id = u1.user_id) = 1",
        "SELECT u.user_id, u.user_category_code FROM users u INNER JOIN user_searches us ON u.user_id = us.user_id GROUP BY us.user_id HAVING COUNT(us.user_id) = 1",
        "SELECT u.user_id, u.user_category_code FROM users u WHERE u.user_id IN (SELECT us.user_id FROM user_searches us GROUP BY us.user_id HAVING COUNT(us.user_id) = 1)",
        "SELECT user_id, user_category_code FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
        "SELECT u.user_id, u.user_category_code FROM users u JOIN user_searches us ON u.user_id = us.user_id GROUP BY u.user_id HAVING COUNT(DISTINCT us.search_seq) = 1",
        "SELECT u.user_id, u.user_category_code FROM users u, (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1) us WHERE u.user_id = us.user_id",
        "SELECT u.user_id, u.user_category_code FROM users u WHERE (SELECT COUNT(user_id) FROM user_searches WHERE user_id = u.user_id GROUP BY user_id) = 1"
      ]
    ]
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "nlq": "What are the ids of users who have only made one search, and what are their category codes?",
    "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
    "infer_predictions": [
      [
        "SELECT u.user_id, u.user_category_code FROM users u WHERE u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) = 1)",
        "SELECT u.user_id, u.user_category_code FROM users u JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) = 1) as one_search ON u.user_id = one_search.user_id",
        "SELECT user_id, user_category_code FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) = 1)",
        "SELECT users.user_id, users.user_category_code FROM users WHERE EXISTS (SELECT null FROM user_searches WHERE user_searches.user_id = users.user_id GROUP BY user_searches.user_id HAVING COUNT(*) = 1)",
        "SELECT u.user_id, u.user_category_code FROM users u WHERE 1 = (SELECT COUNT(*) FROM user_searches WHERE user_searches.user_id = u.user_id)",
        "SELECT distinct us.user_id, u.user_category_code FROM user_searches us JOIN users u ON us.user_id = u.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1",
        "SELECT users.user_id, users.user_category_code FROM users INNER JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) = 1) AS uniq_users ON users.user_id = uniq_users.user_id",
        "SELECT u.user_id, u.user_category_code FROM users u WHERE (SELECT COUNT(user_searches.user_id) FROM user_searches WHERE user_searches.user_id = u.user_id) = 1",
        "SELECT ub.user_id, ub.user_category_code FROM (SELECT users.user_id, users.user_category_code, COUNT(user_searches.user_id) AS cnt FROM users LEFT JOIN user_searches ON users.user_id = user_searches.user_id GROUP BY users.user_id) ub WHERE ub.cnt = 1",
        "SELECT u.user_id, u.user_category_code FROM users u JOIN user_searches us ON u.user_id = us.user_id GROUP BY u.user_id, us.user_id HAVING COUNT(us.search_seq) = 1"
      ]
    ]
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "nlq": "What is the age range category of the user who made the first search?",
    "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT r.age_category_description FROM ref_age_categories r JOIN users u ON r.age_category_code = u.age_category_code JOIN user_searches us ON u.user_id = us.user_id ORDER BY us.search_datetime ASC LIMIT 1",
        "SELECT ref_age_categories.age_category_description FROM ref_age_categories INNER JOIN users ON ref_age_categories.age_category_code = users.age_category_code INNER JOIN user_searches ON users.user_id = user_searches.user_id ORDER BY user_searches.search_datetime LIMIT 1",
        "SELECT description.age_category_description FROM (SELECT ac.age_category_description, s.search_datetime FROM ref_age_categories AS ac JOIN users AS u ON ac.age_category_code = u.age_category_code JOIN user_searches AS s ON u.user_id = s.user_id ORDER BY s.search_datetime) AS description LIMIT 1",
        "WITH FirstSearch AS (SELECT user_id, MIN(search_datetime) AS MinDateTime FROM user_searches GROUP BY user_id) SELECT ac.age_category_description FROM ref_age_categories ac JOIN users u ON ac.age_category_code = u.age_category_code JOIN FirstSearch fs ON u.user_id = fs.user_id ORDER BY fs.MinDateTime LIMIT 1",
        "SELECT ac.age_category_description FROM ref_age_categories ac, users u, (SELECT user_id, search_datetime FROM user_searches ORDER BY search_datetime ASC LIMIT 1) first_search WHERE ac.age_category_code = u.age_category_code AND u.user_id = first_search.user_id",
        "SELECT DISTINCT ac.age_category_description FROM ref_age_categories ac JOIN users u ON ac.age_category_code = u.age_category_code WHERE u.user_id IN (SELECT user_id FROM user_searches ORDER BY search_datetime ASC LIMIT 1)",
        "SELECT ac.age_category_description FROM (SELECT * FROM user_searches ORDER BY search_datetime ASC LIMIT 1) AS first_search INNER JOIN users u ON first_search.user_id = u.user_id INNER JOIN ref_age_categories ac ON u.age_category_code = ac.age_category_code",
        "SELECT ac.age_category_description FROM ref_age_categories ac WHERE EXISTS (SELECT 1 FROM users u JOIN user_searches us ON u.user_id = us.user_id WHERE u.age_category_code = ac.age_category_code ORDER BY us.search_datetime ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "nlq": "Return the age category for the user who made the earliest search.",
    "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT r.age_category_description FROM ref_age_categories r JOIN users u ON r.age_category_code = u.age_category_code JOIN user_searches s ON u.user_id = s.user_id ORDER BY s.search_datetime LIMIT 1",
        "SELECT r.age_category_description FROM ref_age_categories r WHERE r.age_category_code = (SELECT u.age_category_code FROM users u JOIN user_searches s ON u.user_id = s.user_id ORDER BY s.search_datetime LIMIT 1)",
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code IN (SELECT age_category_code FROM users WHERE user_id = (SELECT user_id FROM user_searches ORDER BY search_datetime LIMIT 1))",
        "SELECT description FROM (SELECT age_category_description AS description FROM ref_age_categories JOIN users ON ref_age_categories.age_category_code = users.age_category_code JOIN user_searches ON users.user_id = user_searches.user_id ORDER BY user_searches.search_datetime LIMIT 1)",
        "SELECT age_category_description FROM ref_age_categories JOIN users ON ref_age_categories.age_category_code = users.age_category_code WHERE users.user_id = (SELECT user_id FROM user_searches ORDER BY search_datetime LIMIT 1)",
        "SELECT r.age_category_description FROM ref_age_categories AS r JOIN (SELECT * FROM users WHERE user_id IN (SELECT user_id FROM user_searches ORDER BY search_datetime LIMIT 1)) AS u ON r.age_category_code = u.age_category_code",
        "SELECT (SELECT age_category_description FROM ref_age_categories WHERE age_category_code = u.age_category_code) FROM users u JOIN user_searches s ON u.user_id = s.user_id ORDER BY s.search_datetime LIMIT 1",
        "SELECT r.age_category_description FROM ref_age_categories AS r INNER JOIN users AS u ON r.age_category_code = u.age_category_code WHERE u.user_id = (SELECT USER_ID FROM user_searches ORDER BY search_datetime ASC LIMIT 1)",
        "SELECT r.age_category_description FROM (SELECT * FROM user_searches ORDER BY search_datetime) AS s LEFT JOIN users AS u ON s.user_id = u.user_id LEFT JOIN ref_age_categories AS r ON u.age_category_code = r.age_category_code LIMIT 1"
      ]
    ]
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "nlq": "Find the login names of all senior citizen users ordered by their first names.",
    "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "infer_predictions": [
      [
        "SELECT u.login_name FROM users u INNER JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name ASC",
        "SELECT users.login_name FROM users JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE ref_user_categories.user_category_description = 'Senior Citizen' ORDER BY users.first_name ASC",
        "SELECT login_name FROM users, ref_user_categories WHERE users.user_category_code = ref_user_categories.user_category_code AND ref_user_categories.user_category_description = 'Senior Citizen' ORDER BY first_name",
        "SELECT login_name FROM users INNER JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE ref_user_categories.user_category_description = 'Senior Citizen' ORDER BY first_name ASC",
        "SELECT u.login_name FROM users u, ref_user_categories r WHERE u.user_category_code = r.user_category_code AND r.user_category_description = 'Senior Citizen' ORDER BY u.first_name",
        "SELECT u.login_name FROM users u JOIN ref_user_categories r ON u.user_category_code = r.user_category_code AND r.user_category_description = 'Senior Citizen' ORDER BY u.first_name ASC",
        "SELECT DISTINCT u.login_name FROM users u LEFT JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name",
        "SELECT login_name FROM users WHERE user_category_code = (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen') ORDER BY first_name ASC",
        "SELECT u.login_name FROM users AS u JOIN ref_user_categories AS r ON u.user_category_code = r.user_category_code AND r.user_category_description = 'Senior Citizen' ORDER BY u.first_name ASC",
        "SELECT u.login_name FROM users AS u INNER JOIN ref_user_categories AS r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name"
      ]
    ]
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "nlq": "What are the login names of all senior citizens, sorted by first name?",
    "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "infer_predictions": [
      [
        "SELECT u.login_name FROM users u JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name;",
        "SELECT login_name FROM users WHERE user_category_code IN (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen') ORDER BY first_name;",
        "SELECT login_name FROM users INNER JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE user_category_description = 'Senior Citizen' ORDER BY first_name;",
        "SELECT login_name FROM users u JOIN ref_user_categories ruc ON u.user_category_code = ruc.user_category_code WHERE ruc.user_category_description = 'Senior Citizen' ORDER BY first_name;",
        "SELECT login_name FROM users AS u JOIN ref_user_categories AS r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name ASC;",
        "SELECT u.login_name FROM users u, ref_user_categories r WHERE u.user_category_code = r.user_category_code AND r.user_category_description = 'Senior Citizen' ORDER BY u.first_name ASC;",
        "SELECT DISTINCT u.login_name FROM users u INNER JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' ORDER BY u.first_name;",
        "SELECT u.login_name FROM users u WHERE EXISTS (SELECT 1 FROM ref_user_categories r WHERE u.user_category_code = r.user_category_code AND r.user_category_description = 'Senior Citizen') ORDER BY u.first_name;",
        "SELECT u.login_name FROM users u WHERE u.user_category_code IN (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen') ORDER BY u.first_name ASC;"
      ]
    ]
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "nlq": "How many searches do buyers make in total?",
    "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1",
        "SELECT SUM(CASE WHEN users.is_buyer = 1 THEN 1 ELSE 0 END) FROM user_searches INNER JOIN users ON user_searches.user_id = users.user_id",
        "SELECT COUNT(user_searches.search_seq) FROM user_searches, users WHERE user_searches.user_id = users.user_id AND users.is_buyer = 1",
        "SELECT COUNT(search_string) FROM user_searches INNER JOIN users ON user_searches.user_id = users.user_id WHERE is_buyer = 1",
        "SELECT COUNT(*) FROM (SELECT search_seq FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1) AS buyer_search_count",
        "SELECT COUNT(search_seq) FROM (SELECT search_seq FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1)",
        "SELECT COUNT(*) FROM user_searches WHERE user_id IN (SELECT user_id FROM users WHERE is_buyer = 1)",
        "SELECT COUNT(DISTINCT user_searches.search_seq) FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1",
        "SELECT COUNT(1) FROM user_searches INNER JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1"
      ]
    ]
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "nlq": "Count the number of searches made by buyers.",
    "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM user_searches INNER JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1",
        "SELECT COUNT(user_searches.search_seq) FROM user_searches JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1",
        "SELECT COUNT(search_string) FROM user_searches, users WHERE user_searches.user_id = users.user_id AND users.is_buyer = 1",
        "SELECT COUNT(*) AS total_searches FROM user_searches AS us JOIN users AS u ON us.user_id = u.user_id WHERE u.is_buyer = 1",
        "SELECT COUNT(us.search_seq) FROM user_searches us INNER JOIN users u ON us.user_id = u.user_id WHERE u.is_buyer = '1'",
        "SELECT COUNT(*) AS count_of_searches FROM user_searches AS us JOIN users AS u ON us.user_id = u.user_id WHERE u.is_buyer = '1'",
        "SELECT COUNT(search_string) AS count_search FROM user_searches US LEFT JOIN users U ON US.user_id = U.user_id WHERE U.is_buyer = '1'",
        "SELECT COUNT(DISTINCT user_searches.search_seq) FROM user_searches LEFT JOIN users ON user_searches.user_id = users.user_id WHERE users.is_buyer = 1",
        "SELECT COUNT(*) FROM (SELECT search_string FROM user_searches, users WHERE user_searches.user_id = users.user_id AND users.is_buyer = 1) AS counts",
        "SELECT COUNT(us.search_seq) FROM user_searches us, users u WHERE us.user_id = u.user_id AND u.is_buyer = '1'"
      ]
    ]
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "nlq": "When did the user with login name ratione register?",
    "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
    "infer_predictions": [
      [
        "SELECT date_registered FROM users WHERE login_name = 'ratione'",
        "SELECT u.date_registered FROM users u WHERE u.login_name = 'ratione'",
        "SELECT date_registered AS registration_date FROM users WHERE login_name = 'ratione'",
        "SELECT date_registered FROM users WHERE login_name LIKE 'ratione'",
        "SELECT date_registered FROM users WHERE login_name IN (SELECT login_name FROM users WHERE login_name = 'ratione')",
        "SELECT users.date_registered AS registration_date FROM users users WHERE users.login_name = 'ratione'",
        "SELECT date_registered FROM users u WHERE u.login_name = 'ratione'"
      ]
    ]
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "nlq": "What was the registration date for the user whose login name is ratione?",
    "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
    "infer_predictions": [
      [
        "SELECT date_registered FROM users WHERE login_name = 'ratione'",
        "SELECT u.date_registered FROM users u WHERE u.login_name = 'ratione'",
        "SELECT date_registered FROM users WHERE login_name = 'ratione' LIMIT 1",
        "SELECT date_registered AS registration_date FROM users WHERE login_name = 'ratione'",
        "SELECT users.date_registered FROM users INNER JOIN addresses ON users.user_address_id = addresses.address_id WHERE users.login_name = 'ratione'",
        "SELECT usr.date_registered FROM users usr WHERE usr.login_name = 'ratione'",
        "SELECT users.date_registered FROM users JOIN addresses ON users.user_address_id = addresses.address_id WHERE users.login_name = 'ratione'"
      ]
    ]
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "nlq": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 ORDER BY last_name",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 AND user_id IN (SELECT user_id FROM users)",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 GROUP BY user_id",
        "SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM users u WHERE u.is_seller = 1",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 ORDER BY first_name, last_name",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 ORDER BY first_name DESC",
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1 LIMIT 100",
        "SELECT * FROM (SELECT first_name, middle_name, last_name, login_name, is_seller FROM users) AS subquery WHERE is_seller = 1",
        "SELECT first_name, middle_name, last_name, login_name FROM (SELECT * FROM users WHERE is_seller = 1) AS sellers"
      ]
    ]
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "nlq": "What are the first, middle, last, and login names for all users who are sellers?",
    "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
    "infer_predictions": [
      [
        "SELECT first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 1",
        "SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM users u WHERE u.is_seller = 1",
        "SELECT first_name AS fname, middle_name AS mname, last_name AS lname, login_name AS login FROM users WHERE is_seller = 1",
        "SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM users as u WHERE u.is_seller = True"
      ]
    ]
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "nlq": "Where do the Senior Citizens live? List building, street, and the city.",
    "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
    "infer_predictions": [
      [
        "SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM users INNER JOIN addresses ON users.user_address_id = addresses.address_id WHERE users.user_category_code = 'Senior Citizen'",
        "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM users u JOIN addresses a ON u.user_address_id = a.address_id WHERE u.user_category_code = 'Senior Citizen'",
        "SELECT line_1_number_building, line_2_number_street, town_city FROM addresses WHERE address_id IN (SELECT user_address_id FROM users WHERE user_category_code = 'Senior Citizen')",
        "SELECT DISTINCT line_1_number_building, line_2_number_street, town_city FROM addresses INNER JOIN users ON addresses.address_id = users.user_address_id WHERE users.user_category_code = 'Senior Citizen'",
        "SELECT tb1.line_1_number_building, tb1.line_2_number_street, tb1.town_city FROM addresses AS tb1 JOIN users AS tb2 ON tb1.address_id = tb2.user_address_id WHERE tb2.user_category_code = 'Senior Citizen'",
        "SELECT ad.line_1_number_building, ad.line_2_number_street, ad.town_city FROM addresses ad, users us WHERE ad.address_id = us.user_address_id AND us.user_category_code = 'Senior Citizen'",
        "SELECT addr.line_1_number_building, addr.line_2_number_street, addr.town_city FROM addresses AS addr LEFT JOIN users AS usr ON addr.address_id = usr.user_address_id WHERE usr.user_category_code = 'Senior Citizen'",
        "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM addresses a INNER JOIN users u ON a.address_id = u.user_address_id AND u.user_category_code = 'Senior Citizen'",
        "SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM addresses JOIN users ON addresses.address_id = users.user_address_id AND users.user_category_code = 'Senior Citizen'",
        "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM addresses a LEFT OUTER JOIN users u ON a.address_id = u.user_address_id WHERE u.user_category_code = 'Senior Citizen'"
      ]
    ]
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "nlq": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
    "infer_predictions": [
      [
        "SELECT ad.line_1_number_building, ad.line_2_number_street, ad.town_city FROM addresses ad JOIN users u ON u.user_address_id = ad.address_id JOIN ref_user_categories ruc ON ruc.user_category_code = u.user_category_code WHERE ruc.user_category_description = 'Senior Citizen'",
        "SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM addresses INNER JOIN users ON users.user_address_id = addresses.address_id INNER JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE ref_user_categories.user_category_description = 'Senior Citizen'",
        "SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM addresses a, users u, ref_user_categories rc WHERE a.address_id = u.user_address_id AND u.user_category_code = rc.user_category_code AND rc.user_category_description = 'Senior Citizen'",
        "SELECT line_1_number_building, line_2_number_street, town_city FROM addresses WHERE address_id IN (SELECT user_address_id FROM users WHERE user_category_code IN (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen'))",
        "SELECT address.line_1_number_building, address.line_2_number_street, address.town_city FROM addresses address LEFT JOIN users usr ON address.address_id = usr.user_address_id LEFT JOIN ref_user_categories ref ON ref.user_category_code = usr.user_category_code WHERE ref.user_category_description = 'Senior Citizen'",
        "SELECT distinct a.line_1_number_building, a.line_2_number_street, a.town_city FROM addresses a JOIN users us ON us.user_address_id = a.address_id JOIN ref_user_categories ruc ON ruc.user_category_code = us.user_category_code WHERE ruc.user_category_description = 'Senior Citizen'",
        "SELECT adrs.line_1_number_building, adrs.line_2_number_street, adrs.town_city FROM addresses AS adrs JOIN users AS usr ON adrs.address_id = usr.user_address_id JOIN ref_user_categories AS rcat ON usr.user_category_code = rcat.user_category_code WHERE rcat.user_category_description = 'Senior Citizen'",
        "SELECT b.line_1_number_building, b.line_2_number_street, b.town_city FROM addresses b WHERE EXISTS (SELECT 1 FROM users u JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description = 'Senior Citizen' AND u.user_address_id = b.address_id)",
        "SELECT ad.line_1_number_building, ad.line_2_number_street, ad.town_city FROM addresses ad WHERE ad.address_id IN (SELECT user_address_id FROM users WHERE user_category_code = (SELECT user_category_code FROM ref_user_categories WHERE user_category_description = 'Senior Citizen'))"
      ]
    ]
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "nlq": "How many properties are there with at least 2 features?",
    "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT properties.property_id) FROM properties JOIN property_features ON properties.property_id = property_features.property_id GROUP BY properties.property_id HAVING COUNT(property_features.feature_id) >= 2",
        "SELECT COUNT(*) FROM (SELECT properties.property_id FROM properties INNER JOIN property_features ON properties.property_id = property_features.property_id GROUP BY properties.property_id HAVING COUNT(DISTINCT property_features.feature_id) >= 2)",
        "SELECT COUNT(property) FROM (SELECT property_id AS property FROM property_features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2) AS counted_properties",
        "SELECT COUNT(*) FROM (SELECT p.property_id FROM properties p JOIN property_features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(DISTINCT pf.feature_id) >= 2)",
        "SELECT COUNT(DISTINCT property_id) FROM property_features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2",
        "SELECT COUNT(*) FROM (SELECT property_id FROM property_features GROUP BY property_id HAVING COUNT(feature_id) > 1) AS multiple_features",
        "SELECT COUNT(property_id) FROM properties WHERE property_id IN (SELECT property_id FROM property_features GROUP BY property_id HAVING COUNT(DISTINCT feature_id) >= 2)",
        "SELECT COUNT(DISTINCT p.property_id) FROM properties p JOIN property_features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2"
      ]
    ]
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "nlq": "Count the number of properties with at least two features.",
    "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT pf.property_id) FROM property_features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2",
        "SELECT COUNT(*) FROM (SELECT pf.property_id FROM property_features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2)",
        "SELECT COUNT(property_id) FROM (SELECT property_id FROM property_features GROUP BY property_id HAVING COUNT(feature_id) >= 2)",
        "SELECT COUNT(DISTINCT pf.property_id) FROM property_features pf JOIN features f ON pf.feature_id = f.feature_id GROUP BY pf.property_id HAVING COUNT(DISTINCT pf.feature_id) >= 2",
        "SELECT COUNT(property) FROM (SELECT pf.property_id AS property FROM property_features pf GROUP BY pf.property_id HAVING COUNT(DISTINCT pf.feature_id) >= 2)",
        "SELECT COUNT(*) FROM (SELECT COUNT(*) AS total_features, property_id FROM property_features GROUP BY property_id HAVING total_features >= 2)",
        "SELECT COUNT(DISTINCT pf.property_id) FROM property_features pf WHERE pf.property_id IN (SELECT pf.property_id FROM property_features pf GROUP BY pf.property_id HAVING COUNT(pf.feature_id) >= 2)",
        "SELECT COUNT(uniqueProps) FROM (SELECT COUNT(pf.property_id) AS uniqueProps FROM property_features pf JOIN features f ON f.feature_id = pf.feature_id GROUP BY pf.property_id HAVING COUNT(DISTINCT f.feature_id) >= 2)",
        "SELECT COUNT(DISTINCT property_id) FROM property_features GROUP BY property_id HAVING COUNT(feature_id) >= 2",
        "SELECT COUNT(DISTINCT pf.property_id) FROM property_features AS pf JOIN properties AS p ON pf.property_id = p.property_id WHERE pf.property_id IN (SELECT property_id FROM property_features GROUP BY property_id HAVING COUNT(feature_id) >= 2)"
      ]
    ]
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "nlq": "How many photos does each property have?",
    "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
    "infer_predictions": [
      [
        "SELECT properties.property_id, COUNT(property_photos.photo_seq) AS photo_count FROM properties JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.property_id",
        "SELECT p.property_id, COUNT(pp.photo_seq) AS num_photos FROM properties p INNER JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
        "SELECT properties.property_id, COUNT(*) AS total_photos FROM properties, property_photos WHERE properties.property_id = property_photos.property_id GROUP BY properties.property_id",
        "SELECT p.property_id, COUNT(photo_seq) FROM properties p JOIN property_photos ON p.property_id = property_photos.property_id GROUP BY p.property_id",
        "SELECT property_photos.property_id, COUNT(*) AS photo_count FROM property_photos GROUP BY property_photos.property_id",
        "SELECT p.property_id, COUNT(*) FROM property_photos AS pp LEFT JOIN properties AS p ON pp.property_id = p.property_id GROUP BY p.property_id",
        "SELECT property_photos.property_id, COUNT(property_photos.photo_seq) FROM property_photos GROUP BY property_photos.property_id",
        "SELECT p.property_id, IFNULL(COUNT(pp.photo_seq), 0) FROM properties p LEFT JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY p.property_id",
        "SELECT DISTINCT p.property_id, (SELECT COUNT(*) FROM property_photos pp WHERE pp.property_id = p.property_id) AS photo_count FROM properties p"
      ]
    ]
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "nlq": "Count the number of property photos each property has by id.",
    "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
    "infer_predictions": [
      [
        "SELECT properties.property_id, COUNT(property_photos.photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.property_id",
        "SELECT p.property_id, COUNT(ph.photo_seq) AS num_photos FROM properties p LEFT JOIN property_photos ph ON p.property_id = ph.property_id GROUP BY p.property_id",
        "SELECT property_id, COUNT(photo_seq) FROM property_photos GROUP BY property_id",
        "SELECT COUNT(photo_seq) AS total_photos, property_id FROM property_photos GROUP BY property_id",
        "SELECT A.property_id, IFNULL(B.total_photos, 0) AS photo_count FROM properties AS A LEFT JOIN (SELECT property_id, COUNT(photo_seq) AS total_photos FROM property_photos GROUP BY property_id) B ON A.property_id = B.property_id",
        "SELECT property_id, COUNT(*) FROM property_photos GROUP BY property_id",
        "SELECT property_id, COUNT(photo_seq) AS photo_count FROM property_photos WHERE property_id IS NOT NULL GROUP BY property_id",
        "SELECT prvty.property_id AS propID, (SELECT COUNT(*) FROM property_photos WHERE property_id = prvty.property_id GROUP BY property_id) AS no_of_photos FROM properties prvty GROUP BY propID",
        "SELECT property_id, COUNT(*) AS count_of_photos FROM property_photos GROUP BY property_id HAVING COUNT(*) > 0"
      ]
    ]
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "nlq": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
    "infer_predictions": [
      [
        "SELECT u.user_id, COUNT(p.photo_seq) AS photo_count FROM users u JOIN properties pr ON u.user_id = pr.owner_user_id JOIN property_photos p ON pr.property_id = p.property_id GROUP BY u.user_id",
        "SELECT owner_user_id AS user_id, COUNT(photo_seq) AS photo_count FROM properties LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY owner_user_id",
        "SELECT owner.user_id, COUNT(photo.photo_seq) AS num_photos FROM users owner INNER JOIN properties ON owner.user_id = properties.owner_user_id INNER JOIN property_photos photo ON properties.property_id = photo.property_id GROUP BY owner.user_id",
        "SELECT users.user_id, COUNT(property_photos.photo_seq) AS total_photos FROM users LEFT JOIN properties ON users.user_id = properties.owner_user_id LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id",
        "SELECT u.user_id AS user_id, COUNT(pp.photo_seq) AS count_photos FROM users u INNER JOIN properties p ON u.user_id = p.owner_user_id INNER JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY u.user_id",
        "SELECT us.user_id, SUM(CASE WHEN ph.property_id IS NOT NULL THEN 1 ELSE 0 END) AS total_photos FROM users us LEFT JOIN properties prop ON us.user_id = prop.owner_user_id LEFT JOIN property_photos ph ON prop.property_id = ph.property_id GROUP BY us.user_id",
        "SELECT u.user_id AS user_id, COUNT(DISTINCT ph.photo_seq) AS photos_count FROM users u LEFT JOIN properties pp ON u.user_id = pp.owner_user_id LEFT JOIN property_photos ph ON pp.property_id = ph.property_id GROUP BY u.user_id",
        "SELECT X.user_id, COUNT(X.photo_seq) AS num_photos FROM (SELECT usr.user_id, ph.photo_seq FROM users usr LEFT JOIN properties prty ON usr.user_id = prty.owner_user_id LEFT JOIN property_photos ph ON prty.property_id = ph.property_id) AS X GROUP BY X.user_id",
        "SELECT a.user_id, (SELECT COUNT(b.photo_seq) FROM property_photos b JOIN properties c on b.property_id = c.property_id WHERE c.owner_user_id = a.user_id) AS number_of_photos FROM users a GROUP BY a.user_id"
      ]
    ]
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "nlq": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
    "infer_predictions": [
      [
        "SELECT p.owner_user_id, COUNT(pp.photo_seq) AS PhotoCount FROM properties p JOIN property_photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id",
        "SELECT u.user_id, COUNT(photo_seq) AS TotalPhotos FROM users u INNER JOIN properties pr ON u.user_id = pr.owner_user_id INNER JOIN property_photos ph ON pr.property_id = ph.property_id GROUP BY u.user_id",
        "SELECT properties.owner_user_id, COUNT(property_photos.photo_seq) AS photo_count FROM properties JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY properties.owner_user_id",
        "SELECT owner_user_id, COUNT(*) FROM properties INNER JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY owner_user_id",
        "SELECT x.owner_user_id, COUNT(y.property_id) AS num_photos FROM properties x JOIN property_photos y ON x.property_id = y.property_id GROUP BY x.owner_user_id",
        "SELECT t1.owner_user_id, COUNT(t2.photo_seq) AS NumPhotos FROM properties t1, property_photos t2 WHERE t1.property_id = t2.property_id GROUP BY t1.owner_user_id",
        "SELECT owner_user_id, COUNT(photo_seq) AS cnt_Photo FROM (SELECT * FROM properties NATURAL JOIN property_photos) GROUP BY owner_user_id",
        "SELECT prop.owner_user_id AS User_ID, COUNT(pp.property_id) AS Num_of_Photos FROM properties prop LEFT JOIN property_photos pp ON prop.property_id = pp.property_id GROUP BY prop.owner_user_id",
        "SELECT users.user_id, SUM(CASE WHEN property_photos.photo_seq IS NOT NULL THEN 1 ELSE 0 END) AS PhotoAmount FROM users JOIN properties ON users.user_id = properties.owner_user_id LEFT JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id"
      ]
    ]
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "nlq": "What is the total max price of the properties owned by single mothers or students?",
    "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
    "infer_predictions": [
      [
        "SELECT SUM(p.price_max) FROM properties p JOIN users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN ('Single Mother', 'Student')",
        "SELECT SUM(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code = 'Single Mother' OR user_category_code = 'Student')",
        "SELECT SUM(price_max) AS total_max_price FROM properties JOIN users ON properties.owner_user_id = users.user_id WHERE users.user_category_code IN ('Single Mother', 'Student')",
        "SELECT SUM(properties.price_max) FROM properties INNER JOIN users ON properties.owner_user_id = users.user_id WHERE users.user_category_code = 'Single Mother' OR users.user_category_code = 'Student'",
        "SELECT SUM(p.price_max) FROM properties p, users u WHERE p.owner_user_id = u.user_id AND (u.user_category_code = 'Single Mother' OR u.user_category_code = 'Student')",
        "SELECT TOTAL(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code IN ('Single Mother', 'Student'))",
        "SELECT TOTAL(properties.price_max) FROM properties LEFT JOIN users ON properties.owner_user_id = users.user_id WHERE users.user_category_code IN ('Single Mother', 'Student')",
        "SELECT SUM(p.price_max) FROM properties p WHERE p.owner_user_id IN (SELECT u.user_id FROM users u WHERE u.user_category_code = 'Single Mother' OR u.user_category_code = 'Student')",
        "SELECT SUM(p.price_max) FROM users u LEFT JOIN properties p ON u.user_id = p.owner_user_id WHERE u.user_category_code IN ('Single Mother', 'Student')"
      ]
    ]
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "nlq": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
    "infer_predictions": [
      [
        "SELECT SUM(p.price_max) FROM properties p JOIN users u ON p.owner_user_id = u.user_id JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description IN ('Single Mother', 'Student')",
        "SELECT SUM(price_max) FROM properties WHERE owner_user_id IN (SELECT user_id FROM users WHERE user_category_code IN ('Single Mother', 'Student'))",
        "SELECT SUM(properties.price_max) FROM properties INNER JOIN users ON properties.owner_user_id = users.user_id WHERE users.user_category_code IN ('Single Mother', 'Student')",
        "SELECT TOTAL(properties.price_max) FROM properties, users WHERE properties.owner_user_id = users.user_id AND users.user_category_code IN ('Single Mother', 'Student')",
        "SELECT SUM(prop.price_max) FROM properties AS prop JOIN users AS usr ON prop.owner_user_id = usr.user_id WHERE usr.user_category_code = 'Single Mother' OR usr.user_category_code = 'Student'",
        "SELECT SUM(price_max) FROM properties p INNER JOIN users u ON p.owner_user_id = u.user_id WHERE EXISTS (SELECT 1 FROM ref_user_categories r WHERE r.user_category_code = u.user_category_code AND r.user_category_code IN ('Single Mother', 'Student'))",
        "SELECT SUM(price_max) AS TotalMaxPrice FROM properties INNER JOIN users ON properties.owner_user_id = users.user_id AND users.user_category_code IN (SELECT user_category_code FROM ref_user_categories WHERE user_category_description IN ('Single Mother', 'Student'))",
        "SELECT TOTAL(p.price_max) FROM properties p LEFT JOIN users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN ('Single Mother', 'Student')",
        "SELECT SUM(properties.price_max) FROM properties LEFT JOIN users ON properties.owner_user_id = users.user_id WHERE users.user_category_code = 'Single Mother' OR users.user_category_code = 'Student'",
        "SELECT SUM(p.price_max) AS total_price FROM properties p LEFT JOIN users u ON p.owner_user_id = u.user_id INNER JOIN ref_user_categories r ON u.user_category_code = r.user_category_code WHERE r.user_category_description IN ('Single Mother', 'Student')"
      ]
    ]
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "nlq": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
    "infer_predictions": [
      [
        "SELECT u.datestamp, p.property_name FROM user_property_history u JOIN properties p ON u.property_id = p.property_id ORDER BY u.datestamp",
        "SELECT uph.datestamp, pr.property_name FROM user_property_history uph INNER JOIN properties pr ON uph.property_id = pr.property_id ORDER BY uph.datestamp",
        "SELECT user_property_history.datestamp, properties.property_name FROM user_property_history, properties WHERE user_property_history.property_id = properties.property_id ORDER BY user_property_history.datestamp",
        "SELECT dt.datestamp, nm.property_name FROM user_property_history AS dt JOIN properties AS nm ON dt.property_id = nm.property_id ORDER BY dt.datestamp",
        "SELECT datestamp, property_name FROM user_property_history CROSS JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY datestamp",
        "SELECT user_property_history.datestamp, properties.property_name FROM user_property_history JOIN properties USING (property_id) ORDER BY user_property_history.datestamp",
        "SELECT h.datestamp, p.property_name FROM user_property_history AS h, properties AS p WHERE h.property_id = p.property_id ORDER BY h.datestamp",
        "SELECT datestamp, property_name FROM (SELECT datestamp, property_id FROM user_property_history) AS hist JOIN (SELECT property_name, property_id FROM properties) AS prop ON hist.property_id = prop.property_id ORDER BY datestamp",
        "SELECT u.datestamp, p.property_name FROM user_property_history u, properties p WHERE u.property_id = p.property_id ORDER BY u.datestamp",
        "SELECT date_st.datestamp, prop_nm.property_name FROM user_property_history date_st LEFT JOIN properties prop_nm ON date_st.property_id = prop_nm.property_id ORDER BY date_st.datestamp"
      ]
    ]
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "nlq": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
    "infer_predictions": [
      [
        "SELECT uph.datestamp, p.property_name FROM user_property_history uph JOIN properties p ON uph.property_id = p.property_id ORDER BY uph.datestamp",
        "SELECT uph.datestamp, p.property_name FROM user_property_history AS uph INNER JOIN properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp ASC",
        "SELECT datestamp, property_name FROM user_property_history INNER JOIN properties ON user_property_history.property_id = properties.property_id ORDER BY datestamp",
        "SELECT datestamp, property_name FROM user_property_history, properties WHERE user_property_history.property_id = properties.property_id ORDER BY datestamp",
        "SELECT DISTINCT uph.datestamp, p.property_name FROM user_property_history uph, properties p WHERE uph.property_id = p.property_id ORDER BY uph.datestamp",
        "SELECT uph.datestamp, p.property_name FROM user_property_history uph INNER JOIN properties p USING (property_id) ORDER BY uph.datestamp",
        "SELECT uph.datestamp, p.property_name FROM user_property_history uph, properties p WHERE uph.property_id = p.property_id ORDER BY uph.datestamp ASC",
        "SELECT u.datestamp, pr.property_name FROM user_property_history u JOIN properties pr ON u.property_id = pr.property_id ORDER BY u.datestamp ASC",
        "SELECT uph.datestamp, prp.property_name FROM user_property_history AS uph JOIN properties AS prp ON uph.property_id = prp.property_id ORDER BY uph.datestamp ASC",
        "SELECT u.datestamp, p.property_name FROM user_property_history u, properties p WHERE u.property_id = p.property_id ORDER BY u.datestamp"
      ]
    ]
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "nlq": "What is the description of the most common property type? List the description and code.",
    "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT ref_property_types.property_type_description, ref_property_types.property_type_code FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code GROUP BY properties.property_type_code ORDER BY COUNT(properties.property_id) DESC LIMIT 1",
        "SELECT rp.property_type_description, rp.property_type_code FROM properties p INNER JOIN ref_property_types rp ON p.property_type_code = rp.property_type_code GROUP BY p.property_type_code ORDER BY COUNT(p.property_id) DESC LIMIT 1",
        "SELECT PT.property_type_description, PT.property_type_code FROM properties P JOIN ref_property_types PT ON P.property_type_code = PT.property_type_code GROUP BY P.property_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "WITH CommonType AS (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_id) DESC LIMIT 1) SELECT property_type_description, property_type_code FROM ref_property_types WHERE property_type_code IN (SELECT property_type_code FROM CommonType)",
        "SELECT property_type_description, property_type_code FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_id) DESC LIMIT 1)",
        "SELECT R.property_type_description, R.property_type_code FROM ref_property_types R WHERE R.property_type_code = (SELECT P.property_type_code FROM properties P GROUP BY P.property_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT First_Value(ref_property_types.property_type_description) OVER (ORDER BY COUNT(properties.property_id) DESC) as Most_Common_Description, First_Value(ref_property_types.property_type_code) OVER (PARTITION BY properties.property_type_code ORDER BY COUNT(properties.property_id) DESC) as code FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code GROUP BY properties.property_type_code"
      ]
    ]
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "nlq": "What is the most common property type, and what is its description.",
    "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT r.property_type_description FROM ref_property_types r JOIN properties p ON r.property_type_code = p.property_type_code GROUP BY r.property_type_code ORDER BY COUNT(p.property_type_code) DESC LIMIT 1;",
        "SELECT ref_property_types.property_type_description FROM ref_property_types JOIN properties ON ref_property_types.property_type_code = properties.property_type_code GROUP BY properties.property_type_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "SELECT description.property_type_description FROM ref_property_types AS description INNER JOIN properties ON description.property_type_code = properties.property_type_code GROUP BY properties.property_type_code ORDER BY COUNT(properties.property_type_code) DESC LIMIT 1;",
        "SELECT prop_type.property_type_description FROM ref_property_types AS prop_type INNER JOIN (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_id) DESC LIMIT 1) AS most_common ON most_common.property_type_code = prop_type.property_type_code;",
        "WITH CTE AS (SELECT property_type_code, COUNT(property_id) AS count_id FROM properties GROUP BY property_type_code) SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM CTE ORDER BY count_id DESC LIMIT 1);",
        "SELECT xmax.property_type_description FROM (SELECT property_type_description, RANK() OVER (ORDER BY COUNT(properties.property_type_code) DESC) AS rank FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code GROUP BY ref_property_types.property_type_code) xmax WHERE rank = 1;",
        "SELECT property_type_description FROM ref_property_types WHERE property_type_code = (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_id) DESC LIMIT 1);",
        "SELECT (SELECT property_type_description FROM ref_property_types WHERE property_type_code = MAX_COUNT.property_type_code) AS description FROM (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(property_id) DESC LIMIT 1) AS MAX_COUNT;",
        "SELECT property_type_description FROM ref_property_types JOIN (SELECT property_type_code FROM properties GROUP BY property_type_code ORDER BY COUNT(*) DESC LIMIT 1) ptc ON ref_property_types.property_type_code = ptc.property_type_code;"
      ]
    ]
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "nlq": "What is the detailed description of the age category code 'Over 60'?",
    "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
    "infer_predictions": [
      [
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60'",
        "SELECT rac.age_category_description FROM ref_age_categories rac WHERE rac.age_category_code = 'Over 60'"
      ]
    ]
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "nlq": "Give the category description of the age category 'Over 60'.",
    "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
    "infer_predictions": [
      [
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60'",
        "SELECT ac.age_category_description FROM ref_age_categories ac WHERE ac.age_category_code = 'Over 60'",
        "SELECT age_category_description FROM ref_age_categories WHERE age_category_code IN ('Over 60')",
        "SELECT age_category_description FROM ref_age_categories WHERE 'Over 60' = age_category_code",
        "SELECT age_category_description FROM ref_age_categories ac WHERE ac.age_category_code = 'Over 60'",
        "SELECT rac.age_category_description FROM ref_age_categories rac WHERE rac.age_category_code LIKE 'Over 60'",
        "SELECT description FROM (SELECT age_category_description AS description, age_category_code FROM ref_age_categories) WHERE age_category_code = 'Over 60'",
        "SELECT (SELECT age_category_description FROM ref_age_categories WHERE age_category_code = 'Over 60')"
      ]
    ]
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "nlq": "What are the different room sizes, and how many of each are there?",
    "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
    "infer_predictions": [
      [
        "SELECT room_size, COUNT(*) FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(r.room_size) FROM rooms AS r GROUP BY r.room_size",
        "SELECT room_size, COUNT(room_size) AS count FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(*) AS total FROM rooms r GROUP BY r.room_size",
        "SELECT COUNT(room_size) as Room_Count, room_size FROM rooms GROUP BY room_size",
        "SELECT room_size, COUNT(room_size) FROM rooms GROUP BY 1",
        "SELECT DISTINCT room_size, COUNT(room_number) OVER (PARTITION BY room_size) AS quantity FROM rooms",
        "SELECT rooms.room_size AS Size, COUNT(*) AS Count FROM rooms GROUP BY rooms.room_size",
        "SELECT DISTINCT r.room_size, COUNT(r.room_number) OVER (PARTITION BY r.room_size) FROM rooms r",
        "SELECT room_size, COUNT(1) FROM rooms GROUP BY room_size"
      ]
    ]
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "nlq": "Return the number of rooms with each different room size.",
    "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
    "infer_predictions": [
      [
        "SELECT room_size, COUNT(*) FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(*) AS room_count FROM rooms r GROUP BY r.room_size",
        "SELECT rooms.room_size, COUNT(room_size) AS number_of_rooms FROM rooms GROUP BY rooms.room_size",
        "SELECT room_size, COUNT(room_size) AS total FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(r.room_size) FROM rooms r GROUP BY r.room_size",
        "SELECT room_size, COUNT(room_number) FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(r.room_number) FROM rooms r GROUP BY r.room_size",
        "SELECT room_size, COUNT(*) AS count_of_rooms FROM rooms GROUP BY room_size",
        "SELECT r.room_size, COUNT(r.room_type_code) FROM rooms r GROUP BY r.room_size",
        "SELECT room_size, COUNT(room_type_code) FROM rooms GROUP BY room_size"
      ]
    ]
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "nlq": "In which country does the user with first name Robbie live?",
    "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "infer_predictions": [
      [
        "SELECT addresses.country FROM addresses JOIN users ON users.user_address_id = addresses.address_id WHERE users.first_name = 'Robbie'",
        "SELECT country FROM addresses INNER JOIN users ON addresses.address_id = users.user_address_id WHERE users.first_name = 'Robbie'",
        "SELECT country FROM addresses, users WHERE users.user_address_id = addresses.address_id AND users.first_name = 'Robbie'",
        "SELECT a.country FROM users u JOIN addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie'",
        "SELECT country FROM addresses WHERE address_id IN (SELECT user_address_id FROM users WHERE first_name = 'Robbie')",
        "SELECT country FROM addresses WHERE EXISTS (SELECT 1 FROM users WHERE users.user_address_id = addresses.address_id AND first_name = 'Robbie')",
        "SELECT DISTINCT country FROM addresses a, users u WHERE a.address_id = u.user_address_id AND u.first_name = 'Robbie'",
        "SELECT a.country FROM users AS u, addresses AS a WHERE u.user_address_id = a.address_id AND u.first_name = 'Robbie'",
        "SELECT country FROM addresses JOIN users ON addresses.address_id = users.user_address_id AND users.first_name = 'Robbie'"
      ]
    ]
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "nlq": "Return the country in which the user with first name Robbie lives.",
    "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "infer_predictions": [
      [
        "SELECT a.country FROM users u INNER JOIN addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie';",
        "SELECT country FROM addresses WHERE address_id = (SELECT user_address_id FROM users WHERE first_name = 'Robbie');",
        "SELECT country FROM addresses JOIN users ON addresses.address_id = users.user_address_id WHERE users.first_name = 'Robbie';",
        "SELECT a.country FROM addresses a, users u WHERE a.address_id = u.user_address_id AND u.first_name = 'Robbie';",
        "SELECT country FROM addresses WHERE address_id IN (SELECT user_address_id FROM users WHERE first_name = 'Robbie');",
        "SELECT country FROM addresses INNER JOIN users ON addresses.address_id = users.user_address_id AND users.first_name = 'Robbie';",
        "SELECT a.country FROM users u JOIN addresses a ON u.user_address_id = a.address_id WHERE u.first_name = 'Robbie' LIMIT 1;",
        "SELECT addr.country FROM users usr JOIN addresses addr ON usr.user_address_id = addr.address_id WHERE usr.first_name = 'Robbie';",
        "SELECT (SELECT country FROM addresses WHERE address_id = users.user_address_id) AS country FROM users WHERE first_name = 'Robbie';",
        "SELECT country FROM addresses a WHERE EXISTS (SELECT 1 FROM users u WHERE u.first_name = 'Robbie' AND u.user_address_id = a.address_id);"
      ]
    ]
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "nlq": "What are the first, middle and last names of users who own the property they live in?",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
    "infer_predictions": [
      [
        "SELECT u.first_name, u.middle_name, u.last_name FROM users u JOIN properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id",
        "SELECT first_name, middle_name, last_name FROM users WHERE user_id IN (SELECT owner_user_id FROM properties WHERE property_address_id IN (SELECT address_id FROM addresses WHERE address_id = user_address_id))",
        "SELECT first_name, middle_name, last_name FROM users u WHERE EXISTS (SELECT 1 FROM properties p WHERE p.owner_user_id = u.user_id AND p.property_address_id = u.user_address_id)",
        "SELECT first_name, middle_name, last_name FROM users INNER JOIN properties ON users.user_id = properties.owner_user_id AND users.user_address_id = properties.property_address_id",
        "SELECT first_name, middle_name, last_name FROM users u, properties p WHERE u.user_id = p.owner_user_id AND u.user_address_id = p.property_address_id",
        "SELECT U.first_name, U.middle_name, U.last_name FROM users U JOIN properties P ON U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id",
        "SELECT users.first_name, users.middle_name, users.last_name FROM users JOIN properties ON users.user_id = properties.owner_user_id AND users.user_address_id = properties.property_address_id",
        "SELECT DISTINCT u.first_name, u.middle_name, u.last_name FROM users u INNER JOIN properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id",
        "SELECT us.first_name, us.middle_name, us.last_name FROM users us WHERE us.user_address_id = (SELECT pr.property_address_id FROM properties pr WHERE pr.owner_user_id = us.user_id LIMIT 1)",
        "SELECT U.first_name, U.middle_name, U.last_name FROM users U, properties P WHERE U.user_id = P.owner_user_id AND U.user_address_id = P.property_address_id"
      ]
    ]
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "nlq": "Return the full names of users who live in properties that they own.",
    "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
    "infer_predictions": [
      [
          "SELECT u.first_name || ' ' || u.last_name AS full_name FROM users u JOIN properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id",
          "SELECT first_name || ' ' || last_name AS full_name FROM users INNER JOIN properties ON users.user_id = properties.owner_user_id WHERE users.user_address_id = properties.property_address_id",
          "SELECT (users.first_name || ' ' || users.last_name) FROM users JOIN properties ON properties.owner_user_id = users.user_id AND properties.property_address_id = users.user_address_id",
          "SELECT full_name FROM (SELECT users.first_name || ' ' || users.last_name AS full_name, users.user_id, users.user_address_id FROM users) AS u_users JOIN properties ON properties.owner_user_id = u_users.user_id AND properties.property_address_id = u_users.user_address_id",
          "SELECT u.first_name || ' ' || u.last_name FROM users AS u JOIN properties AS p ON u.user_id = p.owner_user_id AND u.user_address_id = p.property_address_id",
          "SELECT full_name FROM (SELECT first_name || ' ' || last_name AS full_name, user_id, user_address_id FROM users) INNER JOIN properties ON owner_user_id = user_id AND user_address_id = property_address_id",
          "SELECT FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME FROM USERS INNER JOIN PROPERTIES ON USERS.USER_ID = PROPERTIES.OWNER_USER_ID AND USERS.USER_ADDRESS_ID = PROPERTIES.PROPERTY_ADDRESS_ID",
          "SELECT usr.first_name || ' ' || usr.last_name AS full_name FROM users usr INNER JOIN properties prp ON usr.user_id = prp.owner_user_id WHERE prp.property_address_id = usr.user_address_id",
          "SELECT aka.first_name || ' ' || aka.last_name FROM users aka INNER JOIN properties abode ON aka.user_id = abode.owner_user_id WHERE aka.user_address_id = abode.property_address_id"
      ]
    ]
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "nlq": "List the search content of the users who do not own a single property.",
    "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
    "infer_predictions": [
      [
        "SELECT u.user_id FROM users u LEFT JOIN properties p ON u.user_id = p.owner_user_id WHERE p.property_id IS NULL",
        "SELECT user_id FROM users WHERE user_id NOT IN (SELECT owner_user_id FROM properties)",
        "SELECT DISTINCT u.user_id FROM users u WHERE NOT EXISTS (SELECT 1 FROM properties p WHERE p.owner_user_id = u.user_id)",
        "SELECT DISTINCT u.user_id FROM users u WHERE u.user_id NOT IN (SELECT DISTINCT p.owner_user_id FROM properties p)",
        "SELECT u.user_id FROM users u WHERE u.user_id NOT IN (SELECT DISTINCT p.owner_user_id FROM properties p)",
        "SELECT user_id FROM users EXCEPT SELECT owner_user_id FROM properties",
        "SELECT u.user_id FROM users u WHERE NOT EXISTS (SELECT * FROM properties p WHERE p.owner_user_id = u.user_id)",
        "SELECT user_id FROM users WHERE user_id NOT IN (SELECT DISTINCT properties.owner_user_id FROM properties)",
        "SELECT u.user_id FROM users u LEFT JOIN properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id HAVING COUNT(p.property_id) = 0",
        "SELECT DISTINCT u.user_id FROM users u LEFT OUTER JOIN properties p ON u.user_id = p.owner_user_id WHERE p.property_id IS NULL"
      ]
    ]
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "nlq": "What search strings were entered by users who do not own any properties?",
    "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
    "infer_predictions": [
      [
        "SELECT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT p.owner_user_id FROM properties p)",
        "SELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT DISTINCT owner_user_id FROM properties)",
        "SELECT search_string FROM user_searches WHERE NOT EXISTS (SELECT 1 FROM properties WHERE properties.owner_user_id = user_searches.user_id)",
        "SELECT us.search_string FROM user_searches AS us LEFT JOIN properties AS p ON us.user_id = p.owner_user_id WHERE p.owner_user_id IS NULL",
        "SELECT DISTINCT us.search_string FROM user_searches us WHERE us.user_id NOT IN (SELECT properties.owner_user_id FROM properties)",
        "SELECT search_string FROM user_searches WHERE user_id IN (SELECT user_id FROM users WHERE user_id NOT IN (SELECT owner_user_id FROM properties))",
        "SELECT DISTINCT us.search_string FROM user_searches AS us WHERE NOT EXISTS (SELECT 1 FROM properties p WHERE p.owner_user_id = us.user_id)",
        "SELECT search_string FROM user_searches AS us LEFT OUTER JOIN properties AS p ON us.user_id = p.owner_user_id WHERE p.property_id IS NULL GROUP BY search_string",
        "SELECT DISTINCT us.search_string FROM user_searches us WHERE us.user_id IN (SELECT u.user_id FROM users u WHERE u.user_id NOT IN (SELECT owner_user_id FROM properties))",
        "SELECT DISTINCT search_string FROM user_searches WHERE user_id IN (SELECT users.user_id FROM users LEFT JOIN properties ON users.user_id = properties.owner_user_id WHERE properties.owner_user_id IS NULL)"
      ]
    ]
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "nlq": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
    "infer_predictions": [
      [
        "SELECT u.user_id, u.last_name FROM users u WHERE (SELECT COUNT(*) FROM properties p WHERE p.owner_user_id = u.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches s WHERE s.user_id = u.user_id) <= 2",
        "SELECT users.user_id, users.last_name FROM users WHERE (SELECT COUNT(property_id) FROM properties WHERE properties.owner_user_id = users.user_id) >= 2 AND (SELECT COUNT(*) FROM user_searches WHERE user_searches.user_id = users.user_id) <= 2",
        "SELECT users.user_id, users.last_name FROM users JOIN properties ON users.user_id = properties.owner_user_id GROUP BY users.user_id, users.last_name HAVING COUNT(DISTINCT properties.property_id) >= 2 AND (SELECT COUNT(*) FROM user_searches WHERE user_searches.user_id = users.user_id) <= 2",
        "SELECT U.user_id, U.last_name FROM users U INNER JOIN properties P ON U.user_id = P.owner_user_id GROUP BY U.user_id, U.last_name HAVING COUNT(DISTINCT P.property_id) >= 2 AND (SELECT COUNT(*) FROM user_searches US WHERE US.user_id = U.user_id) <= 2",
        "SELECT DISTINCT us.user_id, us.last_name FROM users us LEFT JOIN properties pr ON us.user_id = pr.owner_user_id LEFT JOIN user_searches uso ON us.user_id = uso.user_id GROUP BY us.user_id HAVING COUNT(DISTINCT pr.property_id) >= 2 AND COUNT(DISTINCT uso.search_seq) <= 2",
        "SELECT T.user_id, T.last_name FROM (SELECT u.user_id, u.last_name, COUNT(DISTINCT p.property_id) AS property_count, COUNT(DISTINCT s.search_seq) AS search_count FROM users u LEFT JOIN properties p ON u.user_id = p.owner_user_id LEFT JOIN user_searches s ON u.user_id = s.user_id GROUP BY u.user_id, u.last_name) T WHERE T.property_count >= 2 AND T.search_count <= 2",
        "SELECT a.user_id, a.last_name FROM users a JOIN (SELECT owner_user_id, COUNT(*) AS sold FROM properties GROUP BY owner_user_id) b ON a.user_id = b.owner_user_id AND b.sold >= 2 JOIN (SELECT user_id, COUNT(*) AS searches FROM user_searches GROUP BY user_id) c ON a.user_id = c.user_id AND c.searches <= 2",
        "SELECT ad.user_id, ad.last_name FROM (SELECT users.user_id, users.last_name FROM users INNER JOIN properties ON users.user_id = properties.owner_user_id GROUP BY users.user_id HAVING COUNT(DISTINCT properties.property_id) >= 2) AS ad INNER JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(*) <= 2) ae ON ad.user_id = ae.user_id",
        "SELECT U.user_id, U.last_name FROM users U JOIN properties P ON U.user_id = P.owner_user_id LEFT JOIN user_searches S ON U.user_id = S.user_id GROUP BY U.user_id, U.last_name HAVING COUNT(DISTINCT P.property_id) >= 2 AND COUNT(DISTINCT S.search_seq) <= 2"
      ]
    ]
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "nlq": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
    "infer_predictions": [
      [
        "SELECT DISTINCT u.last_name, u.user_id FROM users u JOIN properties p ON u.user_id = p.owner_user_id JOIN user_searches s ON u.user_id = s.user_id GROUP BY u.user_id HAVING COUNT(DISTINCT p.property_id) >= 2 AND COUNT(DISTINCT s.search_seq) <= 2",
        "SELECT u.last_name, u.user_id FROM users u WHERE u.user_id IN (SELECT p.owner_user_id FROM properties p GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2) AND u.user_id IN (SELECT s.user_id FROM user_searches s GROUP BY s.user_id HAVING COUNT(s.search_seq) <= 2)",
        "SELECT users.last_name, users.user_id FROM users INNER JOIN properties ON users.user_id = properties.owner_user_id INNER JOIN user_searches ON users.user_id = user_searches.user_id GROUP BY users.user_id HAVING COUNT(DISTINCT properties.property_id) >= 2 AND COUNT(user_searches.search_seq) <= 2",
        "SELECT u.last_name, u.user_id FROM users AS u WHERE u.user_id IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AND u.user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) <= 2)",
        "SELECT us.last_name, us.user_id FROM users us JOIN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2) AS prop ON us.user_id = prop.owner_user_id JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AS sear ON us.user_id = sear.user_id",
        "SELECT DISTINCT u.user_id, u.last_name FROM users u WHERE EXISTS (SELECT 1 FROM properties p WHERE p.owner_user_id = u.user_id GROUP BY p.owner_user_id HAVING COUNT(p.property_id) >= 2) AND EXISTS (SELECT 1 FROM user_searches us WHERE us.user_id = u.user_id GROUP BY us.user_id HAVING COUNT(us.search_seq) <= 2)",
        "SELECT u.last_name, u.user_id FROM (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(DISTINCT property_id) >= 2) op JOIN users u ON op.owner_user_id = u.user_id JOIN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(DISTINCT search_seq) <= 2) us ON us.user_id = u.user_id",
        "SELECT usrs.last_name, usrs.user_id FROM users usrs JOIN (SELECT owner_user_id FROM (SELECT owner_user_id, COUNT(property_id) AS prop_count FROM properties GROUP BY owner_user_id) AS prop WHERE prop_count >= 2) prop_ids ON usrs.user_id = prop_ids.owner_user_id JOIN (SELECT user_id FROM (SELECT user_id, COUNT(search_seq) AS search_count FROM user_searches GROUP BY user_id) srch WHERE search_count <= 2) search_ids ON usrs.user_id = search_ids.user_id"
      ]
    ]
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "nlq": "How many bikes are heavier than 780 grams?",
    "gold": "SELECT count(*) FROM bike WHERE weight  >  780",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM bike WHERE weight > 780",
        "SELECT COUNT(id) FROM bike WHERE weight > 780",
        "SELECT COUNT(1) FROM bike WHERE weight > 780",
        "SELECT COUNT(*) FROM (SELECT id FROM bike WHERE weight > 780)",
        "SELECT COUNT(*) FROM (SELECT * FROM bike WHERE weight > 780)",
        "SELECT COUNT(bike.id) FROM bike WHERE bike.weight > 780 GROUP BY bike.id HAVING bike.weight > 780",
        "SELECT SUM(CASE WHEN weight > 780 THEN 1 ELSE 0 END) FROM bike"
      ]
    ]
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "nlq": "List the product names and weights of the bikes in ascending order of price.",
    "gold": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
    "infer_predictions": [
      [
        "SELECT product_name, weight FROM bike ORDER BY price ASC",
        "SELECT product_name, weight FROM bike B ORDER BY B.price ASC",
        "SELECT product_name AS 'Product Name', weight AS 'Weight' FROM bike ORDER BY price ASC",
        "SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC",
        "SELECT product_name, weight FROM (SELECT * FROM bike ORDER BY price) AS sorted_bikes",
        "SELECT b.product_name, b.weight FROM (SELECT * FROM bike ORDER BY price ASC) b"
      ]
    ]
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "nlq": "List the heat, name, and nation for all the cyclists.",
    "gold": "SELECT heat ,  name ,  nation FROM cyclist",
    "infer_predictions": [
      [
        "SELECT heat, name, nation FROM cyclist",
        "SELECT c.heat, c.name, c.nation FROM cyclist c",
        "SELECT heat AS 'Heat', name AS 'Name', nation AS 'Nation' FROM cyclist",
        "SELECT heat, name, nation FROM cyclist WHERE heat IS NOT NULL",
        "SELECT c.heat, c.name, c.nation FROM cyclist AS c ORDER BY c.name",
        "SELECT c.heat, c.name, c.nation FROM cyclist c WHERE c.name <> ''",
        "SELECT heat, name, nation FROM cyclist GROUP BY heat, name, nation"
      ]
    ]
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "nlq": "What are the maximum and minimum weight of all bikes?",
    "gold": "SELECT max(weight) ,  min(weight) FROM bike",
    "infer_predictions": [
      [
        "SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike",
        "SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b",
        "SELECT (SELECT MAX(weight) FROM bike) AS max_weight, (SELECT MIN(weight) FROM bike) AS min_weight",
        "SELECT MAX(b.weight), MIN(b.weight) FROM bike b",
        "SELECT MAX(weight) AS MaximumWeight, MIN(weight) AS MinimumWeight FROM bike",
        "SELECT maxWeight, minWeight FROM (SELECT MAX(weight) AS maxWeight, MIN(weight) AS minWeight FROM bike) AS subquery",
        "SELECT (SELECT MAX(b.weight) FROM bike b) AS max_weight, (SELECT MIN(b.weight) FROM bike b) AS min_weight",
        "SELECT MAX(weight) MAX_WEIGHT, MIN(weight) MIN_WEIGHT FROM bike",
        "SELECT MAX(weight), MIN(weight) FROM (SELECT weight FROM bike) AS weights",
        "SELECT MAXIMUM_WEIGHT.MAX_WEIGHT, MINIMUM_WEIGHT.MIN_WEIGHT FROM (SELECT MAX(weight) AS MAX_WEIGHT FROM bike) AS MAXIMUM_WEIGHT CROSS JOIN (SELECT MIN(weight) AS MIN_WEIGHT FROM bike) AS MINIMUM_WEIGHT"
      ]
    ]
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "nlq": "What is the average price of the bikes made of material 'Carbon CC'?",
    "gold": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
    "infer_predictions": [
      [
        "SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';",
        "SELECT AVG(b.price) AS average_price FROM bike b WHERE b.material = 'Carbon CC';",
        "SELECT AVG(price) FROM bike WHERE material LIKE 'Carbon CC';",
        "SELECT AVG(price) FROM bike GROUP BY material HAVING material = 'Carbon CC';",
        "SELECT AVG(price) AS AveragePrice FROM bike WHERE material = 'Carbon CC';",
        "SELECT AVG(b.price) FROM bike b WHERE b.material = 'Carbon CC';",
        "SELECT MIN(price) AS MinPrice, AVG(price) AS AveragePrice, MAX(price) AS MaxPrice FROM bike WHERE material = 'Carbon CC';",
        "SELECT AVG(price) FROM bike b WHERE b.material LIKE 'Carbon CC';",
        "SELECT AVG(price) FROM bike WHERE material IN (SELECT material FROM bike WHERE material = 'Carbon CC');"
      ]
    ]
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "nlq": "What are the name and result of the cyclists not from 'Russia' ?",
    "gold": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
    "infer_predictions": [
      [
        "SELECT name, result FROM cyclist WHERE nation <> 'Russia'",
        "SELECT c.name, c.result FROM cyclist AS c WHERE c.nation != 'Russia'",
        "SELECT name, result FROM cyclist WHERE nation NOT IN ('Russia')",
        "SELECT name, result FROM cyclist WHERE NOT (nation = 'Russia')",
        "SELECT c.name, c.result FROM cyclist c WHERE c.nation NOT LIKE 'Russia'",
        "SELECT cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation NOT LIKE 'Russia'",
        "SELECT name, result FROM cyclist WHERE LOWER(nation) != 'russia'",
        "SELECT name, result FROM cyclist WHERE UPPER(nation) <> UPPER('Russia')",
        "SELECT c.name, c.result FROM cyclist c WHERE NOT EXISTS (SELECT 1 FROM cyclist WHERE nation = 'Russia' AND id = c.id)",
        "SELECT c.name, c.result FROM cyclist c WHERE c.nation COLLATE NOCASE != 'Russia'"
      ]
    ]
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "nlq": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "gold": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015",
        "SELECT DISTINCT b.id AS bike_id, b.product_name FROM bike b, cyclists_own_bikes c WHERE b.id = c.bike_id AND c.purchase_year > 2015",
        "SELECT DISTINCT bike.id, bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015",
        "SELECT DISTINCT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
        "SELECT b.id, b.product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.bike_id = b.id AND cob.purchase_year > 2015) GROUP BY b.id, b.product_name",
        "SELECT DISTINCT bikeTable.id, bikeTable.product_name FROM cyclists_own_bikes JOIN bike AS bikeTable ON bikeTable.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015",
        "SELECT DISTINCT id AS bike_id, product_name FROM bike WHERE id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
        "SELECT DISTINCT b.id, b.product_name FROM bike b WHERE b.id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
        "SELECT id, product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE purchase_year > 2015) GROUP BY id, product_name"
      ]
    ]
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "nlq": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "gold": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
    "infer_predictions": [
      [
        "SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE b.material = 'racing' GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
        "SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE bike.material = 'racing' GROUP BY bike.id HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4",
        "SELECT id, product_name FROM bike WHERE material = 'racing' AND id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING COUNT(DISTINCT cyclist_id) >= 4)",
        "SELECT DISTINCT b.id, b.product_name FROM bike b, cyclists_own_bikes cob WHERE b.id = cob.bike_id AND b.material = 'racing' GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
        "SELECT b.id, b.product_name FROM bike AS b INNER JOIN cyclists_own_bikes AS cob ON b.id = cob.bike_id WHERE b.material = 'racing' GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
        "SELECT b.id, b.product_name FROM bike b WHERE b.material = 'racing' AND EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.bike_id = b.id GROUP BY cob.bike_id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4)",
        "SELECT bike.id, bike.product_name FROM bike CROSS JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE bike.material = 'racing' GROUP BY bike.id HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4",
        "SELECT DISTINCT b.id, b.product_name FROM bike b LEFT JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE b.material = 'racing' GROUP BY b.id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4",
        "SELECT b.id, b.product_name FROM bike b WHERE b.material = 'racing' AND b.id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob GROUP BY cob.bike_id HAVING COUNT(DISTINCT cob.cyclist_id) >= 4)",
        "SELECT bike.id, product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE material = 'racing' GROUP BY bike.id HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4"
      ]
    ]
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "nlq": "What are the id and name of the cyclist who owns the most bikes?",
    "gold": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.id, c.name FROM cyclist c JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY c.id HAVING COUNT(cb.bike_id) = (SELECT MAX(bike_count) FROM (SELECT COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id));",
        "SELECT cyclist.id, cyclist.name FROM cyclist WHERE cyclist.id = (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(bike_id) DESC LIMIT 1);",
        "SELECT c.id, c.name FROM cyclist c WHERE (c.id, c.name) IN (SELECT ct.id, ct.name FROM cyclist ct INNER JOIN cyclists_own_bikes cob ON ct.id = cob.cyclist_id GROUP BY ct.id ORDER BY COUNT(cob.bike_id) DESC LIMIT 1);",
        "SELECT id, name FROM cyclist WHERE id = (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT c.id, c.name FROM cyclist c INNER JOIN (SELECT cyclist_id, COUNT(bike_id) AS total_bikes FROM cyclists_own_bikes GROUP BY cyclist_id) cb ON c.id = cb.cyclist_id WHERE cb.total_bikes = (SELECT MAX(count_bikes) FROM (SELECT COUNT(*) AS count_bikes FROM cyclists_own_bikes GROUP BY cyclist_id));",
        "SELECT t1.id, t1.name FROM cyclist t1, (SELECT cyclist_id, COUNT(bike_id) AS count FROM cyclists_own_bikes GROUP BY cyclist_id) t2 WHERE t1.id = t2.cyclist_id AND t2.count = (SELECT MAX(count) FROM (SELECT COUNT(bike_id) AS count FROM cyclists_own_bikes GROUP BY cyclist_id));",
        "SELECT top_cyclist.id, top_cyclist.name FROM cyclist AS top_cyclist JOIN (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id HAVING COUNT(bike_id) = (SELECT MAX(bike_count) FROM (SELECT cyclist_id, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id))) AS top_owners ON top_cyclist.id = top_owners.cyclist_id;",
        "SELECT c.id, c.name FROM (SELECT id, name FROM cyclist) AS c INNER JOIN (SELECT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id HAVING COUNT(bike_id) = (SELECT MAX(total_bikes) FROM (SELECT COUNT(bike_id) AS total_bikes FROM cyclists_own_bikes GROUP BY cyclist_id))) AS cob ON c.id = cob.cyclist_id;",
        "SELECT first.id, first.name FROM (SELECT cyclist.id, cyclist.name, COUNT(cyclist_id) AS num_bikes FROM cyclist JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id GROUP BY cyclist_id) AS first WHERE num_bikes = (SELECT MAX(num_bikes) FROM (SELECT COUNT(cyclist_id) AS num_bikes FROM cyclists_own_bikes GROUP BY cyclist_id));",
        "SELECT * FROM (SELECT c.id, c.name ONLY FROM cyclist c JOIN cyclists_own_bikes cb ON c.id = cb.cyclist_id GROUP BY cb.cyclist_id ORDER BY COUNT(cb.bike_id) DESC) AS top_owner LIMIT 1;"
      ]
    ]
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "nlq": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.product_name FROM bike B JOIN cyclists_own_bikes COB ON B.id = COB.bike_id JOIN cyclist C ON COB.cyclist_id = C.id WHERE C.nation IN ('Russia', 'Great Britain')",
        "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain'))",
        "SELECT DISTINCT bike.product_name FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation IN ('Russia', 'Great Britain')",
        "SELECT DISTINCT product_name FROM bike WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation IN ('Russia', 'Great Britain') AND cyclists_own_bikes.bike_id = bike.id)",
        "SELECT DISTINCT b.product_name FROM bike b, cyclists_own_bikes cb, cyclist c WHERE b.id = cb.bike_id AND cb.cyclist_id = c.id AND (c.nation = 'Russia' OR c.nation = 'Great Britain')",
        "SELECT DISTINCT p_name.product_name FROM (SELECT B.product_name, C.nation FROM bike B JOIN cyclists_own_bikes COB ON B.id = COB.bike_id JOIN cyclist C ON C.id = COB.cyclist_id) AS p_name WHERE p_name.nation IN ('Russia', 'Great Britain')",
        "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT COB.bike_id FROM cyclists_own_bikes AS COB JOIN cyclist AS C ON COB.cyclist_id = C.id WHERE C.nation = 'Great Britain' OR C.nation = 'Russia')",
        "WITH EligibleCyclists AS (SELECT id FROM cyclist WHERE nation IN ('Russia', 'Great Britain')), EligibleBikes AS (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM EligibleCyclists)) SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM EligibleBikes)",
        "SELECT product_name FROM (SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclist.nation IN ('Russia', 'Great Britain'))",
        "SELECT DISTINCT BikeNames.product_name FROM bike AS BikeNames INNER JOIN (SELECT DISTINCT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain')) AS OwnedBikes ON BikeNames.id = OwnedBikes.bike_id"
      ]
    ]
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "nlq": "How many different levels of heat are there for the cyclists?",
    "gold": "SELECT count(DISTINCT heat) FROM cyclist",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT heat) FROM cyclist",
        "SELECT DISTINCT heat FROM cyclist GROUP BY heat HAVING COUNT(heat) >= 1",
        "SELECT DISTINCT COUNT(*) FROM (SELECT heat FROM cyclist GROUP BY heat)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist)",
        "SELECT COUNT(heat) FROM (SELECT DISTINCT heat FROM cyclist)",
        "SELECT DISTINCT COUNT(heat) FROM cyclist GROUP BY heat ORDER BY heat",
        "SELECT COUNT(*) FROM (SELECT DISTINCT heat FROM cyclist c)",
        "SELECT COUNT(DISTINCT heat) FROM cyclist ORDER BY heat"
      ]
    ]
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "nlq": "How many cyclists did not purchase any bike after year 2015?",
    "gold": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT cob.cyclist_id) FROM cyclists_own_bikes cob LEFT JOIN bike b ON cob.bike_id = b.id WHERE cob.purchase_year <= 2015",
        "SELECT COUNT(*) FROM cyclist c WHERE c.id NOT IN (SELECT DISTINCT cob.cyclist_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
        "SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.purchase_year <= 2015 OR cob.purchase_year IS NULL",
        "SELECT (SELECT COUNT(*) FROM cyclist) - (SELECT COUNT(DISTINCT cob.cyclist_id) FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
        "SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)",
        "SELECT COUNT(unique_cyclist.id) FROM (SELECT c.id FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id HAVING MAX(cob.purchase_year) <= 2015 OR MAX(cob.purchase_year) IS NULL) AS unique_cyclist",
        "SELECT COUNT(*) FROM cyclist c WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes cob WHERE cob.cyclist_id = c.id AND cob.purchase_year > 2015)",
        "SELECT COUNT(DISTINCT c.id) FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob WHERE cob.purchase_year > 2015)",
        "SELECT COUNT(*) - (SELECT COUNT(DISTINCT cyclist_id) FROM cyclists_own_bikes WHERE purchase_year > 2015) FROM cyclist",
        "SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id HAVING MAX(cob.purchase_year) <= 2015 OR MAX(cob.purchase_year) IS NULL"
      ]
    ]
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "nlq": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
    "infer_predictions": [
      [
        "SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result < '4:21.558'",
        "SELECT DISTINCT b.product_name FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558'",
        "SELECT DISTINCT p.product_name FROM bike p, cyclists_own_bikes q, cyclist r WHERE p.id = q.bike_id AND q.cyclist_id = r.id AND r.result < '4:21.558'",
        "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558'))",
        "SELECT DISTINCT product_name FROM bike b WHERE EXISTS (SELECT 1 FROM cyclists_own_bikes cb JOIN cyclist cy ON cb.cyclist_id = cy.id WHERE cy.result < '4:21.558' AND cb.bike_id = b.id)",
        "SELECT DISTINCT product_name FROM bike AS b WHERE b.id IN (SELECT cob.bike_id FROM cyclists_own_bikes AS cob JOIN cyclist AS c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558')",
        "SELECT DISTINCT b.product_name FROM bike AS b INNER JOIN (SELECT cob.bike_id FROM cyclists_own_bikes cob INNER JOIN cyclist c ON c.id = cob.cyclist_id WHERE c.result < '4:21.558') AS subq ON b.id = subq.bike_id",
        "SELECT DISTINCT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes JOIN cyclist ON id = cyclist_id WHERE result < '4:21.558')",
        "SELECT DISTINCT b.product_name FROM cyclist c, cyclists_own_bikes cob, bike b WHERE c.id = cob.cyclist_id AND cob.bike_id = b.id AND c.result < '4:21.558'",
        "SELECT DISTINCT product_name FROM bike WHERE EXISTS (SELECT * FROM cyclists_own_bikes cb INNER JOIN cyclist c ON c.id = cb.cyclist_id WHERE c.result < '4:21.558' AND bike.id = cb.bike_id)"
      ]
    ]
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "nlq": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "gold": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
    "infer_predictions": [
      [
        "SELECT DISTINCT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike.id HAVING COUNT(DISTINCT cyclist.name) = 2",
        "SELECT bike.product_name, bike.price FROM bike WHERE bike.id IN (SELECT cob.bike_id FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' INTERSECT SELECT cob.bike_id FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Antonio Tauler')",
        "SELECT b.product_name, b.price FROM cyclist cy INNER JOIN cyclists_own_bikes cob ON cy.id = cob.cyclist_id INNER JOIN bike b ON cob.bike_id = b.id WHERE cy.name = 'Bradley Wiggins' AND b.id IN (SELECT b2.id FROM bike b2 JOIN cyclists_own_bikes cob2 ON b2.id = cob2.bike_id JOIN cyclist cy2 ON cob2.cyclist_id = cy2.id WHERE cy2.name = 'Antonio Tauler')",
        "SELECT DISTINCT b.product_name, b.price FROM bike b, cyclists_own_bikes cob, cyclist c WHERE b.id = cob.bike_id AND cob.cyclist_id = c.id AND c.name = 'Bradley Wiggins' AND EXISTS (SELECT 1 FROM cyclists_own_bikes cob2 JOIN cyclist c2 ON cob2.cyclist_id = c2.id WHERE c2.name = 'Antonio Tauler' AND cob2.bike_id = cob.bike_id)",
        "SELECT b.product_name, b.price FROM bike b WHERE EXISTS ( SELECT 1 FROM cyclists_own_bikes cob INNER JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name = 'Bradley Wiggins' AND cob.bike_id = b.id AND EXISTS (SELECT 1 FROM cyclists_own_bikes cob2 INNER JOIN cyclist c2 ON cob2.cyclist_id = c2.id WHERE c2.name = 'Antonio Tauler' AND cob2.bike_id = b.id))",
        "SELECT product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') INTERSECT SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler'))",
        "SELECT DISTINCT prd.product_name, prd.price FROM bike prd JOIN cyclists_own_bikes c1 ON prd.id = c1.bike_id JOIN cyclist bp1 ON c1.cyclist_id = bp1.id JOIN cyclists_own_bikes c2 ON prd.id = c2.bike_id JOIN cyclist bp2 ON c2.cyclist_id = bp2.id WHERE bp1.name = 'Bradley Wiggins' AND bp2.name = 'Antonio Tauler'",
        "SELECT b.product_name, b.price FROM bike b JOIN (SELECT cob.bike_id FROM cyclists_own_bikes cob JOIN cyclist cy ON cob.cyclist_id = cy.id WHERE cy.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY cob.bike_id HAVING COUNT(DISTINCT cy.name) = 2) j ON b.id = j.bike_id",
        "SELECT DISTINCT product_name, price FROM bike INNER JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id INNER JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name = 'Bradley Wiggins' OR cyclist.name = 'Antonio Tauler' GROUP BY bike.id HAVING COUNT(DISTINCT cyclist.name) = 2"
      ]
    ]
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "nlq": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "gold": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
    "infer_predictions": [
      [
        "SELECT c.name, c.nation, c.result FROM cyclist c WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes cob INNER JOIN bike b ON cob.bike_id = b.id WHERE cob.cyclist_id = c.id AND b.product_name LIKE '%racing%')",
        "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE product_name LIKE '%racing%')",
        "SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name LIKE '%racing%'))",
        "SELECT name, nation, result FROM cyclist AS c WHERE NOT EXISTS (SELECT * FROM cyclists_own_bikes AS cob JOIN bike AS b ON cob.bike_id = b.id WHERE b.product_name LIKE '%racing%' AND cob.cyclist_id = c.id)",
        "SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id LEFT JOIN bike b ON cob.bike_id = b.id WHERE b.product_name LIKE '%racing%' AND b.id IS NULL",
        "SELECT C.name, C.nation, C.result FROM cyclist C LEFT JOIN cyclists_own_bikes COB ON C.id = COB.cyclist_id LEFT JOIN bike B ON COB.bike_id = B.id WHERE B.product_name NOT LIKE '%racing%' OR B.id IS NULL",
        "SELECT DISTINCT C.name, C.nation, C.result FROM cyclist C WHERE C.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob JOIN bike B ON cob.bike_id = B.id WHERE B.product_name LIKE '%racing%')",
        "SELECT name, nation, result FROM cyclist WHERE NOT EXISTS (SELECT 1 FROM cyclists_own_bikes INNER JOIN bike ON bike_id = bike.id WHERE cyclist_id = cyclist.id AND product_name LIKE '%racing%')",
        "SELECT CYCLIST.name, CYCLIST.nation, CYCLIST.result FROM CYCLIST WHERE CYCLIST.id NOT IN (SELECT CYCLISTS_OWN_BIKES.cyclist_id FROM CYCLISTS_OWN_BIKES INNER JOIN BIKE ON CYCLISTS_OWN_BIKES.bike_id = BIKE.id WHERE BIKE.product_name LIKE '%racing%')",
        "SELECT name, nation, result FROM cyclist c WHERE c.id NOT IN (SELECT cob.cyclist_id FROM cyclists_own_bikes cob INNER JOIN bike b ON cob.bike_id = b.id WHERE b.product_name LIKE '%racing%')"
      ]
    ]
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "nlq": "What are the names of the bikes that have substring 'fiber' in their material?",
    "gold": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.product_name FROM bike b WHERE b.material LIKE '%fiber%'",
        "SELECT product_name FROM bike WHERE material LIKE '%fiber%' GROUP BY product_name",
        "SELECT product_name FROM bike WHERE instr(material, 'fiber') > 0",
        "SELECT DISTINCT product_name FROM bike WHERE material LIKE '%fiber%'",
        "SELECT b.product_name FROM bike AS b WHERE EXISTS (SELECT 1 FROM bike WHERE material LIKE '%fiber%' AND id = b.id)",
        "SELECT b.product_name FROM bike b WHERE b.material LIKE '%fiber%' GROUP BY b.product_name",
        "SELECT product_name FROM bike WHERE LOWER(material) LIKE '%fiber%'",
        "SELECT DISTINCT product_name FROM bike WHERE material LIKE '%fiber%' ORDER BY product_name",
        "SELECT product_name FROM bike WHERE material LIKE '%fiber%' ORDER BY product_name DESC",
        "SELECT DISTINCT product_name FROM bike WHERE material LIKE '%fiber%' LIMIT 100"
      ]
    ]
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "nlq": "How many bikes does each cyclist own? Order by cyclist id.",
    "gold": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
    "infer_predictions": [
      [
        "SELECT cyclist.id, COUNT(bike_id) FROM cyclists_own_bikes JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id GROUP BY cyclist_id ORDER BY cyclist.id",
        "SELECT cy.id, COUNT(cb.bike_id) AS bike_count FROM cyclists_own_bikes cb INNER JOIN cyclist cy ON cb.cyclist_id = cy.id GROUP BY cy.id ORDER BY cy.id ASC",
        "SELECT cy.id, COUNT(distinct cb.bike_id) FROM cyclist cy LEFT JOIN cyclists_own_bikes cb ON cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY cy.id",
        "SELECT cy.id AS CyclistID, COUNT(cb.bike_id) AS NumberOfBikes FROM cyclist cy, cyclists_own_bikes cb WHERE cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY CyclistID",
        "SELECT DISTINCT cy.id, COUNT(cb.bike_id) OVER (PARTITION BY cy.id) AS Bike_Count FROM cyclist cy JOIN cyclists_own_bikes cb ON cy.id = cb.cyclist_id ORDER BY cy.id",
        "SELECT cy.id, COUNT(cb.bike_id) Number_of_Bikes FROM cyclist cy JOIN cyclists_own_bikes cb ON cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY cy.id ASC",
        "SELECT c.id, (SELECT COUNT(b.id) FROM bike b INNER JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.cyclist_id = c.id) AS bike_count FROM cyclist c ORDER BY c.id",
        "SELECT c.id, COUNT(cob.bike_id) AS bikes_owned FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id ORDER BY c.id ASC",
        "SELECT cy.id AS cyclist_id, (SELECT COUNT(*) FROM cyclists_own_bikes WHERE cyclist_id = cy.id) AS total_bikes FROM cyclist cy ORDER BY cy.id",
        "SELECT cy.id, COUNT(*) FROM cyclist cy, cyclists_own_bikes cb WHERE cy.id = cb.cyclist_id GROUP BY cy.id ORDER BY cy.id"
      ]
    ]
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "nlq": "What is the most expensive cake and its flavor?",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT flavor FROM goods WHERE food = 'cake' ORDER BY price DESC LIMIT 1",
        "SELECT g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.price DESC LIMIT 1",
        "SELECT flavor FROM goods WHERE food LIKE 'cake' ORDER BY price DESC LIMIT 1",
        "SELECT MAX(price), flavor FROM goods WHERE food = 'cake' GROUP BY flavor ORDER BY price DESC LIMIT 1",
        "SELECT top_flavor.flavor FROM (SELECT flavor, price FROM goods WHERE food = 'cake') AS top_flavor ORDER BY top_flavor.price DESC LIMIT 1",
        "WITH SortedGoods AS (SELECT flavor, price FROM goods WHERE food = 'cake' ORDER BY price DESC) SELECT flavor FROM SortedGoods LIMIT 1",
        "SELECT flavor FROM (SELECT flavor, price, RANK() OVER (ORDER BY price DESC) price_rank FROM goods WHERE food = 'cake') WHERE price_rank = 1",
        "SELECT DISTINCT flavor FROM goods WHERE food = 'cake' AND price = (SELECT MAX(price) FROM goods WHERE food = 'cake')"
      ]
    ]
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "nlq": "Give the id and flavor of the most expensive cake.",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT id, flavor FROM goods WHERE price = (SELECT MAX(price) FROM goods WHERE food = 'cake')",
        "SELECT g.id, g.flavor FROM goods g WHERE g.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')",
        "SELECT goods.id, goods.flavor FROM goods WHERE goods.price IN (SELECT MAX(price) FROM goods WHERE food = 'cake')",
        "SELECT g.id, g.flavor FROM goods g WHERE g.price IN (SELECT MAX(g1.price) FROM goods g1 WHERE g1.food = 'cake')",
        "SELECT g.id, g.flavor FROM goods g JOIN (SELECT MAX(price) AS max_price FROM goods WHERE food = 'cake') mp ON g.price = mp.max_price",
        "SELECT g.id, g.flavor FROM goods g, (SELECT MAX(price) as max_price from goods where food = 'cake') max WHERE g.price = max.max_price",
        "SELECT id, flavor FROM goods WHERE food = 'cake' ORDER BY price DESC LIMIT 1",
        "SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.price DESC LIMIT 1",
        "SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cake' AND goods.price = (SELECT MAX(price) FROM goods WHERE food = 'cake')"
      ]
    ]
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "nlq": "What is the cheapest cookie and its flavor?",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
    "infer_predictions": [
      [
        "SELECT flavor FROM goods WHERE food = 'cookie' ORDER BY price ASC LIMIT 1",
        "SELECT flavor FROM goods WHERE food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')",
        "SELECT flavor FROM (SELECT flavor, MIN(price) AS MinPrice FROM goods WHERE food = 'cookie')",
        "SELECT flavor FROM goods GROUP BY food HAVING food = 'cookie' ORDER BY price ASC LIMIT 1",
        "WITH CookiePrices AS (SELECT flavor, price FROM goods WHERE food = 'cookie') SELECT flavor FROM CookiePrices ORDER BY price LIMIT 1",
        "SELECT flavor, price FROM goods WHERE food = 'cookie' ORDER BY price LIMIT 1"
      ]
    ]
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "nlq": "What is the id and flavor of the cheapest cookie?",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
    "infer_predictions": [
      [
        "SELECT id, flavor FROM goods WHERE food = 'cookie' ORDER BY price LIMIT 1",
        "SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cookie' ORDER BY g.price ASC LIMIT 1",
        "WITH CheapestCookie AS (SELECT *, MIN(price) OVER () AS MinPrice FROM goods WHERE food = 'cookie') SELECT id, flavor FROM CheapestCookie WHERE price = MinPrice",
        "SELECT goods.id, goods.flavor FROM goods WHERE goods.food = 'cookie' AND price = (SELECT MIN(price) FROM goods WHERE food = 'cookie')",
        "SELECT id, flavor FROM (SELECT id, flavor, RANK() OVER (ORDER BY price) AS rank FROM goods WHERE food = 'cookie') WHERE rank = 1",
        "SELECT MIN(g.id) AS id, g.flavor FROM goods g WHERE g.food = 'cookie' GROUP BY g.flavor ORDER BY g.price ASC LIMIT 1",
        "SELECT id, flavor FROM goods WHERE id IN (SELECT id FROM goods WHERE food = 'cookie' ORDER BY price ASC LIMIT 1)",
        "WITH FilteredGoods AS (SELECT id, flavor, price FROM goods WHERE food = 'cookie') SELECT id, flavor FROM FilteredGoods ORDER BY price ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "nlq": "Find the ids of goods that have apple flavor.",
    "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE flavor = 'apple'",
        "SELECT g.id FROM goods g WHERE g.flavor = 'apple'",
        "SELECT DISTINCT id FROM goods WHERE flavor LIKE 'apple'",
        "SELECT id FROM goods WHERE flavor = 'apple' GROUP BY id",
        "SELECT id FROM goods WHERE LOWER(flavor) = 'apple'",
        "SELECT g.id FROM goods AS g WHERE TRIM(g.flavor) = 'apple'",
        "SELECT id FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE flavor = 'apple')",
        "SELECT id FROM goods WHERE SUBSTR(flavor, 1, 5) = 'apple'"
      ]
    ]
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "nlq": "What are the ids with apple flavor?",
    "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE flavor = 'apple'",
        "SELECT g.id FROM goods g WHERE g.flavor = 'apple'",
        "SELECT id FROM goods WHERE flavor LIKE 'apple'",
        "SELECT g.id FROM goods g WHERE g.flavor LIKE 'apple'",
        "SELECT distinct(g.id) FROM goods g WHERE g.flavor = 'apple'",
        "SELECT id FROM goods WHERE flavor = 'apple' ORDER BY id",
        "SELECT goods.id FROM goods WHERE flavor = 'apple' LIMIT 100"
      ]
    ]
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "nlq": "What are the ids of goods that cost less than 3 dollars?",
    "gold": "SELECT id FROM goods WHERE price  <  3",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE price < 3;",
        "SELECT g.id FROM goods g WHERE g.price < 3;",
        "SELECT id FROM goods g WHERE g.price < 3;",
        "SELECT goods.id FROM goods WHERE price < 3 ORDER BY goods.id;"
      ]
    ]
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "nlq": "Give the ids of goods that cost less than 3 dollars.",
    "gold": "SELECT id FROM goods WHERE price  <  3",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE price < 3",
        "SELECT g.id FROM goods g WHERE g.price < 3",
        "SELECT goods.id FROM goods AS goods WHERE goods.price < 3",
        "SELECT id FROM goods AS goods WHERE price < 3"
      ]
    ]
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "nlq": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'cake' AND goods.flavor = 'lemon'",
        "SELECT DISTINCT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND g.flavor = 'lemon' AND g.food = 'cake'",
        "SELECT DISTINCT c.id FROM customers c INNER JOIN receipts r ON c.id = r.customerid INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE g.food = 'cake' AND g.flavor = 'lemon'",
        "SELECT DISTINCT customerid AS id FROM receipts INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id WHERE goods.flavor = 'lemon' AND goods.food = 'cake'",
        "SELECT customers.id FROM customers WHERE EXISTS (SELECT 1 FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE receipts.customerid = customers.id AND goods.flavor = 'lemon' AND goods.food = 'cake')",
        "SELECT customerid FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE r.receiptnumber = i.receipt AND g.food = 'cake' AND g.flavor = 'lemon')",
        "SELECT id FROM customers WHERE id IN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'cake' AND g.flavor = 'lemon')",
        "SELECT DISTINCT c.id FROM customers AS c, receipts AS r JOIN items AS i ON r.receiptnumber = i.receipt JOIN goods AS g ON i.item = g.id WHERE r.customerid = c.id AND g.food = 'cake' AND g.flavor = 'lemon'",
        "SELECT DISTINCT id FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'lemon' AND goods.food = 'cake'))"
      ]
    ]
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "nlq": "What are the distinct ids of customers who bought lemon flavored cake?",
    "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor = 'lemon' AND g.food = 'cake'",
        "SELECT DISTINCT customers.id FROM customers, receipts, items, goods WHERE customers.id = receipts.customerid AND receipts.receiptnumber = items.receipt AND items.item = goods.id AND goods.flavor = 'lemon' AND goods.food = 'cake'",
        "SELECT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND g.flavor = 'lemon' AND g.food = 'cake' GROUP BY c.id",
        "SELECT DISTINCT customerid FROM receipts INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id WHERE goods.flavor = 'lemon' AND goods.food = 'cake'",
        "SELECT DISTINCT c.id FROM customers c WHERE EXISTS (SELECT * FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE r.customerid = c.id AND g.flavor = 'lemon' AND g.food = 'cake')",
        "SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid WHERE EXISTS (SELECT * FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.flavor = 'lemon' AND g.food = 'cake')",
        "SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'lemon' AND g.food = 'cake')",
        "SELECT c.id FROM receipts AS r JOIN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'lemon' AND food = 'cake')) AS filtered_receipts ON r.receiptnumber = filtered_receipts.receipt JOIN customers AS c ON r.customerid = c.id"
      ]
    ]
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "nlq": "For each type of food, tell me how many customers have ever bought it.",
    "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
    "infer_predictions": [
      [
        "SELECT g.food, COUNT(DISTINCT r.customerid) FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food",
        "SELECT food, COUNT(DISTINCT customerid) FROM goods INNER JOIN items ON goods.id = items.item INNER JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY food",
        "SELECT g.food AS FoodType, COUNT(DISTINCT c.id) AS CustomerCount FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber JOIN customers c ON r.customerid = c.id GROUP BY FoodType",
        "SELECT goods.food, COUNT(DISTINCT receipts.customerid) AS TotalCustomers FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY goods.food",
        "SELECT g.food, COUNT(DISTINCT c.id) AS CustCount FROM goods g, items i, receipts r, customers c WHERE g.id = i.item AND i.receipt = r.receiptnumber AND r.customerid = c.id GROUP BY g.food",
        "SELECT food, COUNT(DISTINCT customerid) FROM (SELECT g.food, r.customerid FROM goods g JOIN items i ON i.item = g.id JOIN receipts r ON r.receiptnumber = i.receipt GROUP BY g.food, r.customerid) GROUP BY food",
        "SELECT g.food AS FoodItem, COUNT(DISTINCT r.customerid) AS TotalCustomers FROM goods g INNER JOIN items i ON g.id = i.item INNER JOIN receipts r ON r.receiptnumber = i.receipt GROUP BY FoodItem",
        "SELECT g.food, COUNT(*) FROM (SELECT DISTINCT g.food, r.customerid FROM goods g INNER JOIN items i ON g.id = i.item INNER JOIN receipts r ON i.receipt = r.receiptnumber) g GROUP BY g.food",
        "SELECT food, COUNT(DISTINCT customerid) FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY food"
      ]
    ]
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "nlq": "How many customers have bought each food?",
    "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
    "infer_predictions": [
      [
        "SELECT goods.food, COUNT(DISTINCT customers.id) AS customers_count FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber JOIN customers ON receipts.customerid = customers.id GROUP BY goods.food",
        "SELECT food, COUNT(DISTINCT customerid) FROM goods INNER JOIN items ON goods.id = items.item INNER JOIN receipts ON items.receipt = receipts.receiptnumber GROUP BY food",
        "SELECT food, COUNT(DISTINCT receiptnumber) AS cust_count FROM goods, items, receipts WHERE goods.id = items.item AND items.receipt = receipts.receiptnumber GROUP BY food",
        "SELECT g.food, COUNT(DISTINCT r.customerid) FROM goods AS g JOIN items AS i ON g.id = i.item JOIN receipts AS r ON i.receipt = r.receiptnumber GROUP BY g.food",
        "SELECT DISTINCT g.food, (SELECT COUNT(DISTINCT customerid) FROM receipts WHERE receipts.receiptnumber IN (SELECT receipt FROM items WHERE items.item = g.id)) AS customer_count FROM goods AS g",
        "SELECT g.food, COUNT(DISTINCT c.id) FROM goods g JOIN items i ON g.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber JOIN customers c ON r.customerid = c.id GROUP BY g.food",
        "SELECT F.food, COUNT(DISTINCT C.id) FROM goods F, items I, receipts R, customers C WHERE F.id = I.item AND I.receipt = R.receiptnumber AND R.customerid = C.id GROUP BY F.food",
        "SELECT FoodCount.food, COUNT(DISTINCT FoodCount.customer_id) FROM (SELECT f.food, c.id AS customer_id FROM goods f JOIN items i ON f.id = i.item JOIN receipts r ON i.receipt = r.receiptnumber JOIN customers c ON r.customerid = c.id) AS FoodCount GROUP BY FoodCount.food",
        "SELECT G.food, COUNT(ID.cust_id) FROM (SELECT customerid as cust_id, receiptnumber FROM receipts) AS ID JOIN items ON ID.receiptnumber = items.receipt JOIN goods G ON items.item = G.id GROUP BY G.food",
        "SELECT t.food, COUNT(DISTINCT t.customer_id) AS buy_cn FROM (SELECT r.customerid as customer_id, g.food FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON g.id = i.item) t GROUP BY t.food"
      ]
    ]
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "nlq": "Find the id of customers who shopped at the bakery at least 15 times.",
    "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'bakery' GROUP BY c.id HAVING COUNT(*) >= 15",
        "SELECT customers.id FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id WHERE goods.food = 'bakery' GROUP BY customers.id HAVING COUNT(DISTINCT receipts.receiptnumber) >= 15",
        "SELECT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND g.food = 'bakery' GROUP BY c.id HAVING COUNT(DISTINCT r.receiptnumber) >= 15",
        "SELECT customerid AS id FROM receipts WHERE customerid IN (SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'bakery' GROUP BY customerid HAVING COUNT(*) >= 15)",
        "SELECT c.id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE c.id = r.customerid AND g.food = 'bakery' GROUP BY r.customerid HAVING COUNT(*) >= 15)",
        "SELECT c.id FROM customers c WHERE c.id IN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'bakery' GROUP BY r.customerid HAVING COUNT(*) >= 15)",
        "WITH BakeryVisits AS (SELECT customerid, COUNT(receiptnumber) AS Visits FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'bakery' GROUP BY customerid) SELECT id FROM customers WHERE id IN (SELECT customerid FROM BakeryVisits WHERE Visits >= 15)",
        "SELECT DISTINCT customers.id FROM customers JOIN (SELECT customerid FROM receipts JOIN items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.receiptnumber AND goods.food = 'bakery' GROUP BY customerid HAVING COUNT(items.receipt) >= 15) AS BakeryCustomers ON customers.id = BakeryCustomers.customerid",
        "SELECT c.id FROM customers c JOIN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'bakery' GROUP BY r.customerid HAVING COUNT(r.receiptnumber) >= 15) b ON c.id = b.customerid",
        "WITH FilteredCustomers AS (SELECT r.customerid FROM receipts r INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE g.food = 'bakery' GROUP BY r.customerid HAVING COUNT(*) >= 15) SELECT customers.id FROM customers JOIN FilteredCustomers ON customers.id = FilteredCustomers.customerid"
      ]
    ]
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "nlq": "What are the customer ids of customers who have at least 15 receipts?",
    "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
    "infer_predictions": [
      [
        "SELECT cust.id FROM customers cust JOIN receipts rec ON cust.id = rec.customerid GROUP BY cust.id HAVING COUNT(rec.receiptnumber) >= 15",
        "SELECT id FROM customers WHERE id IN (SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(receiptnumber) >= 15)",
        "SELECT customers.id FROM customers INNER JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id HAVING COUNT(*) >= 15",
        "SELECT DISTINCT customers.id FROM customers, receipts WHERE customers.id = receipts.customerid GROUP BY customers.id HAVING COUNT(receipts.receiptnumber) >= 15",
        "SELECT x.id FROM (SELECT id, COUNT(receiptnumber) AS n_receipts FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY id) x WHERE x.n_receipts >= 15",
        "SELECT customers.id FROM customers JOIN (SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(receiptnumber) >= 15) as filtered_ids ON customers.id = filtered_ids.customerid",
        "SELECT c.id FROM customers c WHERE (SELECT COUNT(*) FROM receipts r WHERE r.customerid = c.id) >= 15",
        "SELECT cust.id FROM customers cust, (SELECT customerid, COUNT(receiptnumber) AS receipt_count FROM receipts GROUP BY customerid HAVING receipt_count >= 15) AS receiptCount WHERE cust.id = receiptCount.customerid",
        "SELECT y.id FROM (SELECT customers.id, COUNT(receipts.receiptnumber) as receipts_count FROM customers LEFT JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id) y WHERE y.receipts_count >= 15",
        "SELECT c.id FROM customers c LEFT JOIN receipts r ON c.id = r.customerid GROUP BY c.id HAVING COUNT(DISTINCT r.receiptnumber) >= 15"
      ]
    ]
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "nlq": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.lastname FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt GROUP BY c.id HAVING COUNT(DISTINCT i.receipt) > 10",
        "SELECT c.lastname FROM customers c, receipts r, items i WHERE c.id = r.customerid AND r.receiptnumber = i.receipt GROUP BY c.id HAVING COUNT(DISTINCT i.receipt) > 10",
        "SELECT lastname FROM customers WHERE id IN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt GROUP BY r.customerid HAVING COUNT(DISTINCT i.receipt) > 10)",
        "SELECT DISTINCT lastname FROM customers WHERE id IN (SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(DISTINCT receiptnumber) > 10)",
        "SELECT c.lastname FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE r.customerid = c.id GROUP BY r.customerid HAVING COUNT(DISTINCT i.receipt) > 10)",
        "SELECT DISTINCT c.lastname FROM customers c WHERE (SELECT COUNT(DISTINCT i.receipt) FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = c.id) > 10",
        "SELECT DISTINCT c.lastname FROM customers c INNER JOIN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt GROUP BY r.customerid HAVING COUNT(DISTINCT i.receipt) > 10) AS derivedTable ON c.id = derivedTable.customerid",
        "SELECT c.lastname FROM customers c LEFT OUTER JOIN receipts r ON c.id = r.customerid LEFT OUTER JOIN items i ON r.receiptnumber = i.receipt GROUP BY c.id HAVING COUNT(DISTINCT i.receipt) > 10",
        "SELECT c.lastname FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt GROUP BY c.lastname HAVING COUNT(DISTINCT r.receiptnumber) > 10"
      ]
    ]
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "nlq": "Give the last names of customers who have been to the bakery more than 10 times?",
    "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
    "infer_predictions": [
      [
        "SELECT c.lastname FROM customers c WHERE (SELECT COUNT(*) FROM receipts r WHERE r.customerid = c.id) > 10",
        "SELECT lastname FROM customers WHERE id IN (SELECT customerid FROM receipts GROUP BY customerid HAVING COUNT(receiptnumber) > 10)",
        "SELECT c.lastname FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id HAVING COUNT(r.receiptnumber) > 10",
        "SELECT c.lastname FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r WHERE r.customerid = c.id GROUP BY r.customerid HAVING COUNT(*) > 10)",
        "SELECT DISTINCT c.lastname FROM customers c INNER JOIN receipts r ON c.id = r.customerid GROUP BY c.id, c.lastname HAVING COUNT(r.receiptnumber) > 10",
        "SELECT lastname FROM customers WHERE id IN (SELECT customerid FROM receipts r GROUP BY customerid HAVING COUNT(*) > 10)",
        "SELECT DISTINCT c.lastname FROM customers c, receipts r WHERE c.id = r.customerid GROUP BY c.id HAVING COUNT(r.receiptnumber) > 10",
        "SELECT c.lastname FROM customers c WHERE c.id IN (SELECT r.customerid FROM receipts r GROUP BY r.customerid HAVING COUNT(r.receiptnumber) > 10)",
        "SELECT c.lastname FROM (SELECT customerid, COUNT(receiptnumber) as visits FROM receipts GROUP BY customerid HAVING visits > 10) AS frequent_visitors JOIN customers c ON c.id = frequent_visitors.customerid",
        "SELECT lastname FROM customers WHERE id IN (SELECT customerid FROM (SELECT customerid, COUNT(*) as count FROM receipts GROUP BY customerid) AS stats WHERE count > 10)"
      ]
    ]
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "nlq": "How many types of Cake does this bakery sell?",
    "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT id) FROM goods WHERE food = 'Cake'",
        "SELECT COUNT(*) FROM (SELECT DISTINCT id FROM goods WHERE food = 'Cake')",
        "SELECT COUNT(*) FROM (SELECT DISTINCT goods.id FROM goods WHERE goods.food = 'Cake') AS cake_count",
        "SELECT COUNT(*) FROM goods WHERE food = 'Cake' GROUP BY id",
        "SELECT COUNT(DISTINCT g.id) FROM goods g WHERE g.food = 'Cake'",
        "SELECT COUNT(*) FROM (SELECT id FROM goods WHERE food = 'Cake' GROUP BY id) AS unique_cakes",
        "SELECT COUNT(*) FROM (SELECT 1 FROM goods WHERE food = 'Cake' GROUP BY id) AS cakes",
        "SELECT COUNT(DISTINCT id) FROM goods g WHERE g.food = 'Cake'"
      ]
    ]
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "nlq": "Count the number of types of cake this bakery sells.",
    "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT id) FROM goods WHERE food = 'cake';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT id FROM goods WHERE food = 'cake');",
        "SELECT COUNT(*) FROM (SELECT id FROM goods WHERE food = 'cake' GROUP BY id);",
        "SELECT COUNT(DISTINCT id) FROM goods WHERE food LIKE 'cake';",
        "SELECT COUNT(DISTINCT id) AS NumberOfCakes FROM goods WHERE goods.food = 'cake';",
        "SELECT COUNT(DISTINCT g.id) FROM goods g WHERE g.food = 'cake';",
        "SELECT COUNT(*) FROM (SELECT id FROM goods WHERE food IN ('cake'));",
        "SELECT COUNT(DISTINCT id) FROM goods g WHERE g.food MATCH 'cake';"
      ]
    ]
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "nlq": "List all the flavors of Croissant available in this bakery.",
    "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'Croissant'",
        "SELECT flavor FROM goods WHERE food = 'Croissant' GROUP BY flavor",
        "SELECT g.flavor FROM goods g INNER JOIN items i ON g.id = i.item WHERE g.food = 'Croissant' GROUP BY g.flavor",
        "SELECT DISTINCT flavor FROM goods WHERE food = 'Croissant'",
        "SELECT g.flavor FROM goods g WHERE g.food = 'Croissant' AND g.flavor IS NOT NULL",
        "SELECT flavor FROM (SELECT * FROM goods WHERE food = 'Croissant')",
        "SELECT DISTINCT g.flavor FROM goods g LEFT JOIN items i ON i.item = g.id WHERE g.food = 'Croissant'",
        "SELECT DISTINCT flavor FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE food = 'Croissant')",
        "SELECT DISTINCT flavor FROM goods g WHERE g.food IN ('Croissant')",
        "SELECT flavor FROM goods g1 WHERE g1.food = 'Croissant' AND EXISTS (SELECT 1 FROM goods g2 WHERE g2.id = g1.id AND g2.food = g1.food)"
      ]
    ]
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "nlq": "What are all the flavors of croissant?",
    "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'croissant'",
        "SELECT flavor FROM (SELECT DISTINCT flavor FROM goods WHERE food = 'croissant')",
        "SELECT DISTINCT flavor FROM goods WHERE food LIKE 'croissant'",
        "SELECT DISTINCT flavor FROM goods AS g WHERE g.food = 'croissant'",
        "SELECT g.flavor FROM goods g WHERE g.food = 'croissant' GROUP BY g.flavor",
        "WITH RelevantGoods AS (SELECT flavor FROM goods WHERE food = 'croissant') SELECT DISTINCT flavor FROM RelevantGoods",
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'croissant' AND g.flavor IS NOT NULL",
        "SELECT flavor FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE food = 'croissant')"
      ]
    ]
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "nlq": "Give me a list of all the distinct items bought by the customer number 15.",
    "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT G.id FROM goods G JOIN items I ON G.id = I.item JOIN receipts R ON I.receipt = R.receiptnumber WHERE R.customerid = 15",
        "SELECT DISTINCT goods.id FROM goods INNER JOIN items ON goods.id = items.item INNER JOIN receipts ON items.receipt = receipts.receiptnumber WHERE receipts.customerid = 15",
        "SELECT DISTINCT id FROM goods WHERE id IN (SELECT item FROM items WHERE receipt IN (SELECT receiptnumber FROM receipts WHERE customerid = 15))",
        "SELECT DISTINCT G.id FROM goods G, items I, receipts R WHERE G.id = I.item AND I.receipt = R.receiptnumber AND R.customerid = 15",
        "SELECT DISTINCT id FROM goods WHERE EXISTS (SELECT 1 FROM items WHERE items.item = goods.id AND items.receipt IN (SELECT receiptnumber FROM receipts WHERE customerid = 15))",
        "SELECT DISTINCT G.id FROM goods AS G JOIN items AS I ON G.id = I.item JOIN receipts AS R ON I.receipt = R.receiptnumber WHERE R.customerid = 15",
        "SELECT DISTINCT goods.id FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber AND receipts.customerid = 15",
        "SELECT DISTINCT goods.id FROM goods, items, receipts WHERE goods.id = items.item AND items.receipt = receipts.receiptnumber AND receipts.customerid = 15",
        "SELECT DISTINCT G.id FROM goods AS G INNER JOIN items AS I ON I.item = G.id INNER JOIN receipts AS R ON R.receiptnumber = I.receipt WHERE R.customerid = 15",
        "SELECT DISTINCT goods.id FROM items JOIN goods ON items.item = goods.id WHERE items.receipt IN (SELECT receipts.receiptnumber FROM receipts WHERE receipts.customerid = 15)"
      ]
    ]
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "nlq": "What are all the distinct items bought by customer 15?",
    "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT goods.id FROM goods JOIN items ON goods.id = items.item JOIN receipts ON items.receipt = receipts.receiptnumber WHERE receipts.customerid = 15",
        "SELECT DISTINCT Items.item FROM Items WHERE EXISTS (SELECT * FROM Receipts WHERE Items.receipt = Receipts.receiptnumber AND Receipts.customerid = 15)",
        "SELECT DISTINCT g.id FROM goods g INNER JOIN items i ON g.id = i.item INNER JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15",
        "SELECT DISTINCT g.id FROM goods g, items i, receipts r WHERE g.id = i.item AND i.receipt = r.receiptnumber AND r.customerid = 15",
        "SELECT DISTINCT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15",
        "SELECT DISTINCT item FROM items WHERE receipt IN (SELECT receiptnumber FROM receipts WHERE customerid = 15)",
        "SELECT DISTINCT item FROM items i INNER JOIN receipts r ON i.receipt = r.receiptnumber WHERE r.customerid = 15",
        "SELECT DISTINCT g.id FROM goods g WHERE EXISTS (SELECT i.item FROM items i JOIN receipts r ON i.receipt = r.receiptnumber WHERE i.item = g.id AND r.customerid = 15)",
        "SELECT DISTINCT i.item FROM items i WHERE i.receipt IN (SELECT r.receiptnumber FROM receipts r WHERE r.customerid = 15)",
        "SELECT DISTINCT goods.id FROM goods INNER JOIN items ON goods.id = items.item WHERE items.receipt IN (SELECT receipts.receiptnumber FROM receipts WHERE receipts.customerid = 15)"
      ]
    ]
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "nlq": "For each type of food, what are the average, maximum and minimum price?",
    "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, AVG(price) AS avg_price, MAX(price) AS max_price, MIN(price) AS min_price FROM goods GROUP BY food",
        "SELECT food, AVG(price), MAX(price), MIN(price) FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price) AS avg_price, MAX(g.price) AS max_price, MIN(g.price) AS min_price FROM goods AS g GROUP BY g.food",
        "SELECT g.food, AVG(g.price), MAX(g.price), MIN(g.price) FROM goods g GROUP BY g.food",
        "SELECT food, average_price, maximum_price, minimum_price FROM (SELECT food, AVG(price) AS average_price, MAX(price) AS maximum_price, MIN(price) AS minimum_price FROM goods GROUP BY food)",
        "SELECT DISTINCT food, AVG_PRICE, MAX_PRICE, MIN_PRICE FROM (SELECT food, AVG(price) AS AVG_PRICE, MAX(price) AS MAX_PRICE, MIN(price) AS MIN_PRICE FROM goods GROUP BY food)",
        "SELECT food AS Food_Type, AVG(price) AS Average_Price, MAX(price) AS Max_Price, MIN(price) AS Min_Price FROM goods GROUP BY food",
        "SELECT food, AVG(price) AS AveragePrice, MAX(price) AS MaximumPrice, MIN(price) AS MinimumPrice FROM goods GROUP BY food",
        "SELECT GOOD.food, AVG(GOOD.price) AS Average_Price, MAX(GOOD.price) AS Maximum_Price, MIN(GOOD.price) AS Minimum_Price FROM goods AS GOOD GROUP BY GOOD.food"
      ]
    ]
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "nlq": "What are the average, minimum and maximum prices for each food?",
    "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, AVG(price) AS Average_Price, MIN(price) AS Min_Price, MAX(price) AS Max_Price FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price) AS Average_Price, MIN(g.price) AS Min_Price, MAX(g.price) AS Max_Price FROM goods g GROUP BY g.food",
        "SELECT food, AVG(price) AS Average_Price, MIN(price) AS Minimum_Price, MAX(price) AS Maximum_Price FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price), MIN(g.price), MAX(g.price) FROM goods g GROUP BY g.food",
        "SELECT food, AVG(price), MIN(price), MAX(price) FROM goods GROUP BY food",
        "SELECT g.food AS Food_Type, AVG(g.price) AS Avg_Price, MIN(g.price) AS Min_Price, MAX(g.price) AS Max_Price FROM goods AS g GROUP BY g.food",
        "SELECT food, AVG(price) AS AveragePrice, MIN(price) AS MinPrice, MAX(price) AS MaxPrice FROM goods GROUP BY food",
        "SELECT food, AVG(price) AS Avg_Price, MIN(price) AS Minimum_Price, MAX(price) AS Maximum_Price FROM goods GROUP BY food"
      ]
    ]
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "nlq": "Find the receipt numbers where both Cake and Cookie were bought.",
    "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
    "infer_predictions": [
      [
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'Cake' INTERSECT SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food = 'Cookie'",
        "SELECT DISTINCT r.receiptnumber FROM receipts r INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE g.food IN ('Cake', 'Cookie') GROUP BY r.receiptnumber HAVING COUNT(DISTINCT g.food) = 2",
        "SELECT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT i.receipt FROM items i INNER JOIN goods g ON i.item = g.id WHERE g.food = 'Cake') AND receiptnumber IN (SELECT i.receipt FROM items i INNER JOIN goods g ON i.item = g.id WHERE g.food = 'Cookie')",
        "SELECT receiptnumber FROM (SELECT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.food = 'Cake') a WHERE a.receiptnumber IN (SELECT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.food = 'Cookie')",
        "SELECT r1.receiptnumber FROM receipts r1 JOIN items i1 ON r1.receiptnumber = i1.receipt JOIN goods g1 ON i1.item = g1.id WHERE g1.food = 'Cake' AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.item = g2.id WHERE g2.food = 'Cookie' AND i2.receipt = r1.receiptnumber)",
        "WITH CakeReceipts AS (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'Cake'), CookieReceipts AS (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'Cookie') SELECT r.receiptnumber FROM receipts r WHERE r.receiptnumber IN (SELECT receipt FROM CakeReceipts) AND r.receiptnumber IN (SELECT receipt FROM CookieReceipts)",
        "SELECT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'Cake' AND i.receipt = r.receiptnumber) AND EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'Cookie' AND i.receipt = r.receiptnumber)",
        "SELECT DISTINCT i1.receipt FROM items i1 JOIN goods g1 ON i1.item = g1.id JOIN items i2 ON i1.receipt = i2.receipt JOIN goods g2 ON i2.item = g2.id WHERE g1.food = 'Cake' AND g2.food = 'Cookie'",
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.receiptnumber HAVING SUM(CASE WHEN g.food = 'Cake' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN g.food = 'Cookie' THEN 1 ELSE 0 END) > 0",
        "SELECT r.receiptnumber FROM receipts r JOIN items i1 ON r.receiptnumber = i1.receipt JOIN goods g1 ON i1.item = g1.id JOIN items i2 ON i1.receipt = i2.receipt JOIN goods g2 ON i2.item = g2.id WHERE g1.food = 'Cake' AND i1.receipt = i2.receipt and g2.food = 'Cookie'"
      ]
    ]
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "nlq": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g1 ON i.item = g1.id WHERE g1.food = 'cake' AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.item = g2.id WHERE g2.food = 'cookie' AND i2.receipt = r.receiptnumber)",
        "SELECT DISTINCT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cake' AND i.receipt = r.receiptnumber) AND EXISTS (SELECT 1 FROM items i2 JOIN goods g2 ON i2.item = g2.id WHERE g2.food = 'cookie' AND i2.receipt = r.receiptnumber)",
        "SELECT r.receiptnumber FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cake') AND r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cookie') GROUP BY r.receiptnumber",
        "SELECT r.receiptnumber FROM receipts r INNER JOIN items ic ON r.receiptnumber = ic.receipt INNER JOIN goods gc ON ic.item = gc.id AND gc.food = 'cake' INNER JOIN items icc ON r.receiptnumber = icc.receipt INNER JOIN goods gcc ON icc.item = gcc.id AND gcc.food = 'cookie' GROUP BY r.receiptnumber",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.food IN ('cake', 'cookie') GROUP BY r.receiptnumber HAVING COUNT(DISTINCT g.food) = 2",
        "SELECT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.food = 'cake' AND EXISTS (SELECT 1 FROM items i2, goods g2 WHERE i2.item = g2.id AND g2.food = 'cookie' AND i2.receipt = r.receiptnumber)",
        "SELECT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items, goods WHERE items.item = goods.id AND goods.food = 'cake') AND receiptnumber IN (SELECT receipt FROM items, goods WHERE items.item = goods.id AND goods.food = 'cookie')",
        "SELECT DISTINCT r.receiptnumber FROM receipts r, items i1, items i2, goods g1, goods g2 WHERE r.receiptnumber = i1.receipt AND i1.item = g1.id AND g1.food = 'cake' AND r.receiptnumber = i2.receipt AND i2.item = g2.id AND g2.food = 'cookie'",
        "SELECT r.receiptnumber FROM receipts r JOIN (SELECT DISTINCT receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cake') cake_receipts ON r.receiptnumber = cake_receipts.receipt JOIN (SELECT DISTINCT receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.food = 'cookie') cookie_receipts ON r.receiptnumber = cookie_receipts.receipt"
      ]
    ]
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "nlq": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
    "infer_predictions": [
      [
        "SELECT receipts.receiptnumber FROM receipts JOIN customers ON receipts.customerid = customers.id JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE customers.lastname = 'LOGAN' AND goods.food = 'Croissant'",
        "SELECT DISTINCT receipts.receiptnumber FROM receipts, customers, items, goods WHERE receipts.customerid = customers.id AND items.receipt = receipts.receiptnumber AND items.item = goods.id AND customers.lastname = 'LOGAN' AND goods.food = 'Croissant'",
        "SELECT r.receiptnumber FROM receipts r INNER JOIN customers c ON r.customerid = c.id INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE c.lastname = 'LOGAN' AND g.food = 'Croissant'",
        "SELECT receipts.receiptnumber FROM receipts INNER JOIN customers ON receipts.customerid = customers.id WHERE customers.lastname = 'LOGAN' AND EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE receipts.receiptnumber = items.receipt AND goods.food = 'Croissant')",
        "SELECT r.receiptnumber FROM customers c, goods g, items i, receipts r WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND c.lastname = 'LOGAN' AND g.food = 'Croissant'",
        "SELECT receiptnumber FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE lastname = 'LOGAN') AND receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'Croissant'))",
        "SELECT r.receiptnumber FROM receipts r, customers c, items i, goods g WHERE r.customerid = c.id AND i.receipt = r.receiptnumber AND i.item = g.id AND c.lastname = 'LOGAN' AND g.food = 'Croissant'",
        "SELECT r.receiptnumber FROM receipts r LEFT JOIN customers c ON r.customerid = c.id LEFT JOIN items i ON r.receiptnumber = i.receipt LEFT JOIN goods g ON i.item = g.id WHERE c.lastname = 'LOGAN' AND g.food = 'Croissant'",
        "SELECT r.receiptnumber FROM receipts r, customers c, goods g, items i WHERE r.customerid = c.id AND i.receipt = r.receiptnumber AND i.item = g.id AND c.lastname = 'LOGAN' AND g.food = 'Croissant'"
      ]
    ]
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "nlq": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN customers c ON r.customerid = c.id JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE c.lastname = 'Logan' AND g.food = 'croissant'",
        "SELECT r.receiptnumber FROM receipts r INNER JOIN customers c ON r.customerid = c.id INNER JOIN items i ON i.receipt = r.receiptnumber INNER JOIN goods g ON g.id = i.item WHERE c.lastname = 'Logan' AND g.food = 'croissant' GROUP BY r.receiptnumber",
        "SELECT DISTINCT receiptnumber FROM receipts WHERE customerid IN (SELECT id FROM customers WHERE lastname = 'Logan') AND receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'croissant'))",
        "SELECT r.receiptnumber FROM receipts r, customers c, items i, goods g WHERE r.customerid = c.id AND r.receiptnumber = i.receipt AND i.item = g.id AND c.lastname = 'Logan' AND g.food = 'croissant'",
        "SELECT receiptnumber FROM receipts WHERE customerid = (SELECT id FROM customers WHERE lastname = 'Logan') AND receiptnumber IN (SELECT receipt FROM items WHERE item = (SELECT id FROM goods WHERE food = 'croissant'))",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN customers c ON r.customerid = c.id JOIN items i ON i.receipt = r.receiptnumber WHERE c.lastname = 'Logan' AND i.item IN (SELECT id FROM goods WHERE food = 'croissant')",
        "SELECT r.receiptnumber FROM receipts r LEFT JOIN customers c ON r.customerid = c.id JOIN items i ON r.receiptnumber = i.receipt LEFT JOIN goods g ON i.item = g.id WHERE c.lastname = 'Logan' AND g.food LIKE 'croissant'",
        "SELECT r.receiptnumber FROM receipts AS r JOIN customers AS c ON r.customerid = c.id JOIN items AS i ON r.receiptnumber = i.receipt JOIN goods AS g ON i.item = g.id WHERE c.lastname LIKE 'Logan' AND g.food = 'croissant'",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN customers c ON r.customerid = c.id WHERE c.lastname = 'Logan' AND EXISTS (SELECT * FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.food = 'croissant')",
        "SELECT r.receiptnumber FROM receipts r, customers c, items i, goods g WHERE r.customerid = c.id AND c.lastname = 'Logan' AND r.receiptnumber = i.receipt AND i.item = g.id AND g.food LIKE 'croissant'"
      ]
    ]
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "nlq": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT r.receiptnumber, r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id ORDER BY g.price DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id ORDER BY g.price DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts AS r INNER JOIN items AS i ON r.receiptnumber = i.receipt INNER JOIN goods AS g ON i.item = g.id ORDER BY g.price DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts r INNER JOIN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods ORDER BY price DESC LIMIT 1)) AS i ON r.receiptnumber = i.receipt",
        "SELECT receiptnumber, date FROM receipts WHERE receiptnumber = (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id ORDER BY g.price DESC LIMIT 1)",
        "SELECT r.receiptnumber, r.date FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber ORDER BY g.price DESC LIMIT 1)",
        "SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item = (SELECT id FROM goods ORDER BY price DESC LIMIT 1))",
        "WITH HighestPrice AS (SELECT MAX(price) AS price FROM goods) SELECT r.receiptnumber, r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price = (SELECT price FROM HighestPrice)",
        "SELECT r.receiptnumber, r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price = (SELECT MAX(g.price) FROM goods g) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "nlq": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT R.receiptnumber, R.date FROM receipts R JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id WHERE G.price = (SELECT MAX(G.price) FROM goods G JOIN items I ON G.id = I.item)",
        "SELECT receipts.receiptnumber, receipts.date FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.price = (SELECT MAX(price) FROM goods)",
        "SELECT receiptnumber, date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods)))",
        "SELECT R.receiptnumber, R.date FROM receipts R, items I, goods G WHERE R.receiptnumber = I.receipt AND I.item = G.id AND G.price = (SELECT MAX(price) FROM goods)",
        "SELECT receiptnumber, date FROM receipts WHERE receiptnumber = (SELECT receipt FROM items WHERE item = (SELECT id FROM goods ORDER BY price DESC LIMIT 1))",
        "SELECT R.receiptnumber, R.date FROM receipts R WHERE EXISTS (SELECT 1 FROM items I JOIN goods G ON I.item = G.id WHERE G.price = (SELECT MAX(price) FROM goods) AND I.receipt = R.receiptnumber)",
        "SELECT receiptnumber, date FROM receipts WHERE receiptnumber = (SELECT items.receipt FROM goods JOIN items ON goods.id = items.item WHERE goods.price = (SELECT MAX(price) FROM goods))",
        "SELECT R.receiptnumber, R.date FROM receipts R JOIN items I ON R.receiptnumber = I.receipt WHERE I.item = (SELECT id FROM goods WHERE price = (SELECT MAX(price) FROM goods))"
      ]
    ]
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "nlq": "What is the item that was bought the least number of times?",
    "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT item FROM items GROUP BY item ORDER BY COUNT(item) ASC LIMIT 1",
        "SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT goods.id FROM goods JOIN items ON goods.id = items.item GROUP BY goods.id ORDER BY COUNT(goods.id) ASC LIMIT 1",
        "SELECT t.item FROM (SELECT item, COUNT(item) AS item_count FROM items GROUP BY item) t ORDER BY t.item_count ASC LIMIT 1",
        "SELECT I.item FROM items I GROUP BY I.item HAVING COUNT(I.item) = (SELECT MIN(Count) FROM (SELECT COUNT(item) Count FROM items GROUP BY item))",
        "SELECT item FROM (SELECT item, RANK() OVER (ORDER BY COUNT(item) ASC) AS rk FROM items GROUP BY item) WHERE rk = 1",
        "SELECT goods.id FROM items INNER JOIN goods ON items.item = goods.id GROUP BY goods.id ORDER BY COUNT(items.item) ASC LIMIT 1",
        "SELECT items.item FROM items LEFT JOIN goods ON items.item = goods.id GROUP BY items.item ORDER BY COUNT(items.item) ASC LIMIT 1",
        "SELECT i.item FROM items i WHERE i.item IN (SELECT item FROM items GROUP BY item ORDER BY COUNT(item) ASC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "nlq": "Which item was bought the fewest times?",
    "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT items.item FROM items GROUP BY items.item ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.item) ASC LIMIT 1",
        "SELECT item FROM (SELECT items.item FROM items GROUP BY items.item ORDER BY COUNT(*) ASC) LIMIT 1",
        "SELECT i.item FROM (SELECT item, COUNT(*) as item_count FROM items GROUP BY item ORDER BY item_count ASC) AS i LIMIT 1",
        "SELECT i.item FROM items i LEFT JOIN (SELECT item, COUNT(*) AS count FROM items GROUP BY item) q ON i.item = q.item ORDER BY q.count ASC LIMIT 1",
        "SELECT i.item AS LeastBoughtItem FROM items i GROUP BY i.item ORDER BY COUNT(*) ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "nlq": "How many goods are available for each food type?",
    "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, COUNT(*) FROM goods GROUP BY food",
        "SELECT food, COUNT(id) AS count FROM goods GROUP BY food",
        "SELECT g.food, COUNT(g.id) FROM goods g GROUP BY g.food",
        "SELECT DISTINCT food, COUNT(*) OVER (PARTITION BY food) FROM goods",
        "SELECT food, COUNT(food) FROM goods GROUP BY food",
        "SELECT food, COUNT(*) AS Total FROM goods GROUP BY food",
        "SELECT food, COUNT(id) FROM goods GROUP BY food ORDER BY food",
        "SELECT DISTINCT food, (SELECT COUNT(*) FROM goods WHERE food = g.food) AS count FROM goods g",
        "SELECT g.food, COUNT(DISTINCT g.id) FROM goods g GROUP BY g.food"
      ]
    ]
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "nlq": "Count the number of goods for each food type.",
    "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, COUNT(*) AS num_goods FROM goods GROUP BY food",
        "SELECT g.food, COUNT(g.id) FROM goods AS g GROUP BY g.food",
        "SELECT food, COUNT(id) AS num_goods FROM goods GROUP BY food",
        "SELECT g.food, COUNT(*) FROM goods g GROUP BY g.food",
        "SELECT g.food, COUNT(g.id) AS num_goods FROM goods g GROUP BY g.food",
        "SELECT goods.food, COUNT(goods.id) AS total FROM goods GROUP BY goods.food",
        "SELECT food, COUNT(DISTINCT id) AS count_id FROM goods GROUP BY food"
      ]
    ]
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "nlq": "What is the average price for each food type?",
    "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, AVG(price) FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price) AS avg_price FROM goods g GROUP BY g.food",
        "SELECT food, AVG(price) AS average_price FROM goods GROUP BY food",
        "SELECT food, AVG(price) AS avg_price FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price) FROM goods g GROUP BY g.food",
        "SELECT g.food, AVG(g.price) AS average_price FROM goods AS g GROUP BY g.food",
        "SELECT goods.food, AVG(goods.price) AS avg_price FROM goods GROUP BY goods.food",
        "SELECT food, AVG(price) FROM goods GROUP BY 1",
        "SELECT g.food, AVG(g.price) FROM goods AS g GROUP BY 1"
      ]
    ]
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "nlq": "Give the average price for each food type.",
    "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
    "infer_predictions": [
      [
        "SELECT food, AVG(price) AS avg_price FROM goods GROUP BY food",
        "SELECT g.food, AVG(g.price) FROM goods g GROUP BY g.food",
        "SELECT goods.food, AVG(goods.price) AS average_price FROM goods GROUP BY goods.food",
        "SELECT g.food, AVG(g.price) AS average_price FROM goods AS g GROUP BY g.food",
        "SELECT DISTINCT food, AVG(price) OVER (PARTITION BY food) FROM goods",
        "SELECT food, AVG(price) AS avg_price FROM goods GROUP BY goods.food",
        "SELECT DISTINCT g.food, AVG(price) OVER (PARTITION BY g.food) FROM goods g",
        "SELECT goods.food, AVG(price) FROM goods GROUP BY goods.food",
        "SELECT food, avg_price FROM (SELECT food, AVG(price) AS avg_price FROM goods GROUP BY food)",
        "SELECT g.food, AVG(p) FROM (SELECT id, food, price as p FROM goods) g GROUP BY g.food"
      ]
    ]
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "nlq": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;",
        "SELECT g.id FROM goods g WHERE g.flavor = 'Apricot' AND g.price < 5;",
        "SELECT id FROM goods WHERE flavor LIKE 'Apricot' AND price < 5;",
        "SELECT goods.id FROM goods WHERE goods.flavor = 'Apricot' AND goods.price < 5 ORDER BY goods.id;",
        "SELECT id FROM goods WHERE flavor = 'Apricot' AND price BETWEEN 0 AND 4.99;",
        "SELECT Clauses.id FROM goods AS Clauses WHERE Clauses.flavor = 'Apricot' AND (Clauses.price < 5);",
        "SELECT filtered.id FROM goods filtered WHERE filtered.flavor = 'Apricot' AND filtered.price < 5;"
      ]
    ]
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "nlq": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5",
        "SELECT g.id FROM goods g WHERE g.flavor = 'Apricot' AND g.price < 5",
        "SELECT id FROM goods WHERE flavor LIKE 'Apricot' AND price < 5",
        "SELECT id FROM goods WHERE flavor = 'Apricot' AND price BETWEEN 0 AND 4.99",
        "SELECT goods.id FROM goods WHERE 'Apricot' = goods.flavor AND goods.price < 5"
      ]
    ]
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "nlq": "Find flavor of cakes that cost more than 10 dollars.",
    "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
    "infer_predictions": [
      [
        "SELECT DISTINCT flavor FROM goods WHERE price > 10 AND food = 'cake'",
        "SELECT flavor FROM goods WHERE food = 'cake' GROUP BY flavor HAVING MAX(price) > 10",
        "SELECT g1.flavor FROM goods g1 WHERE g1.price > 10 AND g1.food = 'cake'",
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'cake' AND g.price > 10",
        "SELECT flavor FROM (SELECT * FROM goods WHERE food = 'cake' AND price > 10) AS subquery",
        "SELECT flavor FROM goods WHERE food = 'cake' AND price > 10 ORDER BY flavor",
        "SELECT flavor FROM goods WHERE EXISTS (SELECT 1 FROM goods g WHERE g.id = goods.id AND g.price > 10 AND g.food = 'cake')",
        "SELECT DISTINCT g.flavor FROM goods g JOIN (SELECT id FROM goods WHERE price > 10 AND food = 'cake') gg ON g.id = gg.id",
        "SELECT flavor FROM (SELECT flavor, MAX(price) AS max_price FROM goods WHERE food = 'cake' GROUP BY flavor) WHERE max_price > 10"
      ]
    ]
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "nlq": "What are the flavors of cakes that cost more than 10 dollars?",
    "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'cake' AND g.price > 10",
        "SELECT flavor FROM goods WHERE food = 'cake' AND price > 10 GROUP BY flavor",
        "SELECT g.flavor FROM goods g WHERE g.food = 'cake' AND g.price > 10.00",
        "SELECT flavor FROM goods WHERE food = 'cake' AND price > 10 ORDER BY flavor",
        "SELECT DISTINCT flavor FROM goods WHERE food LIKE 'cake' AND price > 10",
        "SELECT DISTINCT flavor FROM goods AS g WHERE g.food = 'cake' AND g.price > 10.00",
        "SELECT g.flavor FROM goods g WHERE (g.food = 'cake' AND g.price > 10) ORDER BY g.flavor",
        "SELECT DISTINCT g.flavor FROM goods g WHERE g.food = 'cake' AND g.price > 10 ORDER BY g.flavor DESC",
        "SELECT flavor FROM goods WHERE (food = 'cake' AND price > 10) GROUP BY flavor HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "nlq": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
    "infer_predictions": [
      [
        "SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods)",
        "SELECT DISTINCT id, price FROM goods WHERE goods.price < (SELECT AVG(goods.price) AS avg_price FROM goods)",
        "SELECT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods) GROUP BY id, price",
        "SELECT DISTINCT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(g.price) FROM goods g)",
        "SELECT * FROM (SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods))",
        "SELECT id, price FROM goods GROUP BY id, price HAVING price < (SELECT AVG(price) FROM goods)",
        "SELECT DISTINCT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(agg.price) FROM goods agg)"
      ]
    ]
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "nlq": "What are the distinct ids and prices for goods that cost less than the average good?",
    "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
    "infer_predictions": [
      [
        "SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods)",
        "SELECT id, price FROM goods GROUP BY id, price HAVING price < (SELECT AVG(price) FROM goods)",
        "SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) FROM goods)",
        "SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) AS avg_price FROM goods)",
        "SELECT DISTINCT id, price FROM goods a WHERE a.price < (SELECT AVG(b.price) FROM goods b)",
        "SELECT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods) GROUP BY id, price",
        "SELECT DISTINCT g.id, g.price FROM goods g CROSS JOIN (SELECT AVG(price) AS average_price FROM goods) av WHERE g.price < av.average_price"
      ]
    ]
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "nlq": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(price) FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT id FROM goods WHERE price < (SELECT price FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT id FROM goods AS g1 WHERE EXISTS (SELECT 1 FROM goods g2 WHERE g2.food = 'Tart' AND g1.price < g2.price)",
        "SELECT DISTINCT g1.id FROM goods g1, goods g2 WHERE g1.price < g2.price AND g2.food = 'Tart'",
        "SELECT DISTINCT g1.id FROM goods g1 JOIN goods g2 ON g1.price < g2.price WHERE g2.food = 'Tart'",
        "SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT price FROM goods WHERE food = 'Tart' ORDER BY price LIMIT 1)",
        "SELECT DISTINCT GOODS.id FROM goods GOODS, goods g2 WHERE GOODS.price < g2.price AND g2.food = 'Tart'",
        "SELECT id FROM goods WHERE price < (SELECT MIN(price) FROM goods g WHERE g.food = 'Tart') GROUP BY id",
        "SELECT id FROM goods WHERE EXISTS (SELECT NULL FROM goods g2 WHERE g2.food = 'Tart' AND goods.price < g2.price)"
      ]
    ]
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "nlq": "Give the distinct ids for goods that cost less than any Tart.",
    "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
    "infer_predictions": [
      [
        "SELECT DISTINCT g1.id FROM goods g1 WHERE g1.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor = 'Tart')",
        "SELECT DISTINCT g.id FROM goods g WHERE g.price < (SELECT MIN(price) FROM goods WHERE flavor = 'Tart')",
        "SELECT DISTINCT id FROM goods g1 WHERE EXISTS (SELECT 1 FROM goods g2 WHERE g2.flavor = 'Tart' AND g1.price < g2.price)",
        "SELECT id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE flavor = 'Tart') GROUP BY id",
        "SELECT id FROM goods g WHERE g.price < (SELECT price FROM goods WHERE flavor = 'Tart' ORDER BY price ASC LIMIT 1)",
        "SELECT DISTINCT id FROM goods WHERE id IN (SELECT id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE flavor = 'Tart'))",
        "SELECT DISTINCT goods.id FROM goods WHERE goods.price < (SELECT MIN(goods.price) FROM goods WHERE flavor = 'Tart')"
      ]
    ]
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "nlq": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.receiptnumber FROM receipts AS r JOIN items AS i ON r.receiptnumber = i.receipt JOIN goods AS g ON i.item = g.id WHERE g.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM receipts AS r INNER JOIN items AS i ON r.receiptnumber = i.receipt INNER JOIN goods AS g ON i.item = g.id WHERE g.price > 13",
        "SELECT DISTINCT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price > 13))",
        "SELECT DISTINCT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.price > 13)",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 13",
        "SELECT DISTINCT receiptnumber FROM receipts AS r WHERE EXISTS (SELECT * FROM items AS i LEFT JOIN goods AS g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.price > 13)",
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 13 GROUP BY r.receiptnumber",
        "SELECT DISTINCT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT * FROM items i INNER JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.price > 13)"
      ]
    ]
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "nlq": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
    "infer_predictions": [
      [
        "SELECT DISTINCT receipts.receiptnumber FROM receipts JOIN items ON items.receipt = receipts.receiptnumber JOIN goods ON items.item = goods.id WHERE goods.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM receipts r LEFT JOIN items i ON r.receiptnumber = i.receipt LEFT JOIN goods g ON i.item = g.id WHERE g.price > 13",
        "SELECT DISTINCT r.receiptnumber FROM goods g, items i, receipts r WHERE g.id = i.item AND i.receipt = r.receiptnumber AND g.price > 13",
        "SELECT r.receiptnumber FROM receipts AS r JOIN items i ON r.receiptnumber = i.receipt WHERE EXISTS (SELECT 1 FROM goods g WHERE g.id = i.item AND g.price > 13) GROUP BY r.receiptnumber",
        "SELECT DISTINCT r.receiptnumber FROM receipts AS r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 13"
      ]
    ]
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "nlq": "On which date did some customer buy a good that costs more than 15 dollars?",
    "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT R.date FROM receipts R JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id WHERE G.price > 15",
        "SELECT DATE(R.date) FROM receipts AS R, items AS I, goods AS G WHERE R.receiptnumber = I.receipt AND I.item = G.id AND G.price > 15",
        "SELECT receipts.date FROM receipts INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id WHERE goods.price > 15",
        "SELECT R.date FROM receipts R, items I, goods G WHERE R.receiptnumber = I.receipt AND I.item = G.id AND G.price > 15",
        "SELECT receipt_date.date FROM (SELECT R.date FROM receipts R JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id WHERE G.price > 15) AS receipt_date",
        "SELECT DISTINCT date FROM receipts JOIN items ON receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE price > 15",
        "SELECT MIN(date) FROM receipts JOIN items ON receiptnumber = receipt JOIN goods ON item = id WHERE price > 15",
        "SELECT DISTINCT R1.date FROM receipts R1 LEFT JOIN items I1 ON R1.receiptnumber = I1.receipt LEFT JOIN goods G1 ON I1.item = G1.id WHERE G1.price > 15",
        "SELECT MAX(R.date) AS PurchaseDate FROM receipts R, items I, goods G WHERE R.receiptnumber = I.receipt AND I.item = G.id AND G.price > 15 GROUP BY R.date",
        "SELECT R.date FROM receipts R INNER JOIN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price > 15)) AS I ON R.receiptnumber = I.receipt"
      ]
    ]
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "nlq": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 15",
        "SELECT r.date FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND g.price > 15 GROUP BY r.date",
        "SELECT r.date FROM receipts AS r INNER JOIN items AS i ON r.receiptnumber = i.receipt INNER JOIN goods AS g ON i.item = g.id WHERE g.price > 15",
        "SELECT DISTINCT date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE price > 15))",
        "SELECT date FROM receipts WHERE EXISTS (SELECT 1 FROM items INNER JOIN goods ON items.item = goods.id WHERE receipts.receiptnumber = items.receipt AND goods.price > 15)",
        "SELECT DISTINCT r.date FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 15)",
        "SELECT r.date FROM receipts r JOIN (SELECT receipt FROM items JOIN goods ON items.item = goods.id WHERE price > 15) AS subquery ON r.receiptnumber = subquery.receipt",
        "SELECT r.date FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items AS i INNER JOIN goods AS g ON i.item = g.id WHERE g.price > 15)",
        "SELECT r.date FROM receipts r INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE g.price > 15 AND i.receipt = r.receiptnumber"
      ]
    ]
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "nlq": "Give me the list of ids of all goods whose id has \"APP\".",
    "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE id LIKE '%APP%'",
        "SELECT g.id FROM goods g WHERE g.id LIKE '%APP%'",
        "SELECT id FROM goods WHERE id LIKE '%APP' AND id LIKE 'APP%'",
        "SELECT DISTINCT g.id FROM goods g WHERE g.id LIKE '_%APP%'",
        "SELECT id FROM goods WHERE id LIKE '%APP%' ORDER BY id"
      ]
    ]
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "nlq": "What are all the ids of goods with an id which contains \"APP\"?",
    "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE id LIKE '%APP%'",
        "SELECT g.id FROM goods g WHERE g.id LIKE '%APP%'",
        "SELECT id FROM goods WHERE id GLOB '*APP*'",
        "SELECT goods.id FROM goods WHERE goods.id GLOB '*APP*'",
        "SELECT id FROM goods WHERE CAST(id AS TEXT) LIKE '%APP%'",
        "SELECT g.id FROM goods g WHERE CAST(g.id AS TEXT) GLOB '*APP*'",
        "SELECT DISTINCT id FROM goods WHERE CAST(id AS TEXT) LIKE '%APP%'"
      ]
    ]
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "nlq": "Which good has \"70\" in its id? And what is its price?",
    "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
    "infer_predictions": [
      [
        "SELECT price FROM goods WHERE id LIKE '%70%'",
        "SELECT price FROM goods WHERE '70' IN (id)",
        "SELECT g.price FROM goods g WHERE g.id LIKE '%70%'",
        "SELECT price FROM goods WHERE id LIKE '70%' OR id LIKE '%70%' OR id LIKE '%70'",
        "SELECT price FROM goods WHERE instr(id, '70') > 0",
        "SELECT g.price FROM goods g WHERE instr(g.id, '70') > 0"
      ]
    ]
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "nlq": "What are the id and price for the good with \"70\" in its id?",
    "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
    "infer_predictions": [
      [
        "SELECT id, price FROM goods WHERE id LIKE '%70%'",
        "SELECT g.id, g.price FROM goods g WHERE g.id LIKE '%70%'",
        "SELECT id, price FROM goods WHERE CAST(id AS TEXT) LIKE '%70%'",
        "SELECT id, price FROM goods WHERE instr(id, '70') > 0",
        "SELECT g.id, g.price FROM goods g WHERE instr(g.id, '70') > 0",
        "SELECT g.id, g.price FROM goods g WHERE g.id GLOB '*70*'",
        "SELECT id, price FROM goods WHERE id GLOB '*70*'"
      ]
    ]
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "nlq": "List the last names of all customers in an alphabetical order.",
    "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
    "infer_predictions": [
      [
        "SELECT lastname FROM customers ORDER BY lastname ASC",
        "SELECT c.lastname FROM customers c ORDER BY c.lastname ASC",
        "SELECT LOWER(lastname) FROM customers GROUP BY lastname ORDER BY lastname ASC",
        "SELECT customers.lastname AS LastName FROM customers ORDER BY LastName",
        "SELECT lastname FROM customers WHERE lastname IS NOT NULL ORDER BY lastname ASC",
        "SELECT c.lastname FROM customers AS c ORDER BY 1",
        "SELECT lastname FROM (SELECT lastname FROM customers) ORDER BY lastname",
        "SELECT DISTINCT c.lastname FROM customers c ORDER BY c.lastname ASC"
      ]
    ]
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "nlq": "What are the last names of the customers in alphabetical order?",
    "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
    "infer_predictions": [
      [
        "SELECT DISTINCT lastname FROM customers ORDER BY lastname ASC",
        "SELECT lastname FROM (SELECT DISTINCT lastname FROM customers) ORDER BY lastname",
        "SELECT C.lastname FROM customers C GROUP BY C.lastname ORDER BY C.lastname ASC",
        "SELECT uname FROM (SELECT DISTINCT lastname AS uname FROM customers) ORDER BY uname ASC",
        "SELECT lastname FROM customers WHERE lastname IS NOT NULL GROUP BY lastname ORDER BY lastname",
        "WITH UniqueLastNames AS (SELECT DISTINCT lastname FROM customers) SELECT lastname FROM UniqueLastNames ORDER BY lastname ASC",
        "SELECT lastname FROM (SELECT DISTINCT lastname FROM customers AS C) Y ORDER BY Y.lastname ASC",
        "SELECT * FROM (SELECT distinct lastname FROM customers) ORDER BY lastname"
      ]
    ]
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "nlq": "Return the ordered list of all good ids.",
    "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
    "infer_predictions": [
      [
        "SELECT id FROM goods ORDER BY id",
        "SELECT g.id FROM goods g ORDER BY g.id ASC",
        "SELECT DISTINCT g.id FROM goods g ORDER BY g.id ASC",
        "SELECT id FROM goods GROUP BY id ORDER BY id"
      ]
    ]
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "nlq": "Order the distinct good ids.",
    "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
    "infer_predictions": [
      [
        "SELECT DISTINCT item FROM items;",
        "SELECT DISTINCT goods.id FROM goods JOIN items ON goods.id = items.item;",
        "SELECT DISTINCT it.item FROM items it;",
        "SELECT DISTINCT item AS DistinctGoodsID FROM items ORDER BY item;",
        "SELECT DISTINCT i.item FROM items i;",
        "SELECT DISTINCT id FROM goods WHERE id IN (SELECT item FROM items);",
        "SELECT id FROM goods GROUP BY id HAVING COUNT(id) = 1;",
        "SELECT items.item FROM items GROUP BY items.item;",
        "SELECT DISTINCT item FROM items WHERE item IS NOT NULL;",
        "SELECT id FROM goods WHERE EXISTS (SELECT NULL FROM items WHERE goods.id = items.item);"
      ]
    ]
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "nlq": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
    "infer_predictions": [
      [
        "SELECT DISTINCT r.receiptnumber FROM receipts r WHERE r.customerid = 12 OR r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie')",
        "SELECT r.receiptnumber FROM receipts r LEFT JOIN items i ON r.receiptnumber = i.receipt LEFT JOIN goods g ON i.item = g.id WHERE r.customerid = 12 OR (g.flavor = 'apple' AND g.food = 'pie')",
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE r.customerid = 12 OR (g.flavor = 'apple' AND g.food = 'pie') GROUP BY r.receiptnumber",
        "SELECT DISTINCT receipts.receiptnumber FROM receipts WHERE receipts.customerid = 12 UNION SELECT items.receipt FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'apple' AND goods.food = 'pie'",
        "SELECT r.receiptnumber FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie') UNION SELECT r.receiptnumber FROM receipts r WHERE r.customerid = 12",
        "SELECT DISTINCT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND (g.flavor = 'apple' AND g.food = 'pie' OR r.customerid = 12)",
        "SELECT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber AND g.flavor = 'apple' AND g.food = 'pie') OR r.customerid = 12",
        "SELECT r.receiptnumber FROM receipts r LEFT OUTER JOIN items i ON r.receiptnumber = i.receipt LEFT OUTER JOIN goods g ON i.item = g.id WHERE (g.food = 'pie' AND g.flavor = 'apple') OR r.customerid = 12 GROUP BY r.receiptnumber",
        "SELECT r.receiptnumber FROM receipts r INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id WHERE r.customerid = 12 OR (g.flavor = 'apple' AND g.food = 'pie') GROUP BY r.receiptnumber",
        "SELECT r.receiptnumber FROM receipts r, goods g, items i WHERE r.receiptnumber = i.receipt AND i.item = g.id AND (g.flavor = 'apple' AND g.food = 'pie' OR r.customerid = 12)"
      ]
    ]
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "nlq": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
    "infer_predictions": [
      [
        "SELECT DISTINCT receipts.receiptnumber FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id JOIN customers ON receipts.customerid = customers.id WHERE goods.flavor = 'apple' AND goods.food = 'pie' OR customers.id = 12",
        "SELECT receipts.receiptnumber FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.receiptnumber AND goods.flavor = 'apple' AND goods.food = 'pie') OR receipts.customerid = 12",
        "SELECT r.receiptnumber FROM receipts r INNER JOIN items i ON i.receipt = r.receiptnumber INNER JOIN goods g ON g.id = i.item WHERE g.flavor = 'apple' AND g.food = 'pie' OR r.customerid = 12",
        "SELECT DISTINCT r.receiptnumber FROM receipts r LEFT JOIN items i ON r.receiptnumber = i.receipt LEFT JOIN goods g ON i.item = g.id WHERE (g.flavor = 'apple' AND g.food = 'pie') OR r.customerid = 12",
        "SELECT r.receiptnumber FROM receipts r WHERE r.customerid = 12 UNION SELECT i.receipt FROM items i INNER JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie'",
        "SELECT DISTINCT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND (g.flavor = 'apple' AND g.food = 'pie' OR r.customerid = 12)",
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie' UNION SELECT r.receiptnumber FROM receipts r WHERE r.customerid = 12",
        "SELECT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND (g.flavor = 'apple' AND g.food = 'pie' OR r.customerid = 12) GROUP BY r.receiptnumber",
        "SELECT DISTINCT r.receiptnumber FROM receipts r WHERE r.customerid = 12 UNION ALL SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'pie'",
        "SELECT DISTINCT r.receiptnumber FROM (SELECT receiptnumber, customerid FROM receipts UNION ALL SELECT receipt, customerid FROM receipts JOIN items ON receiptnumber = receipt JOIN goods ON item = id WHERE flavor = 'apple' AND food = 'pie') r WHERE r.customerid = 12 OR EXISTS(SELECT 1 FROM goods g WHERE r.receiptnumber = g.id AND g.flavor = 'apple' AND g.food = 'pie')"
      ]
    ]
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "nlq": "Find all receipts which has the latest date. Also tell me that date.",
    "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT receiptnumber, date FROM receipts WHERE date = (SELECT MAX(date) FROM receipts)",
        "SELECT r.receiptnumber, r.date FROM receipts r WHERE r.date = (SELECT MAX(date) FROM receipts)",
        "SELECT r.receiptnumber, r.date FROM receipts r INNER JOIN (SELECT MAX(date) AS max_date FROM receipts) m ON r.date = m.max_date",
        "SELECT DISTINCT r.receiptnumber, r.date FROM receipts r WHERE r.date IN (SELECT MAX(date) FROM receipts)",
        "SELECT r1.receiptnumber, r1.date FROM receipts r1 WHERE r1.date = (SELECT MAX(r2.date) FROM receipts r2)",
        "SELECT r.receiptnumber, r.date FROM receipts r JOIN (SELECT MAX(date) AS latest_date FROM receipts) m ON r.date = m.latest_date",
        "SELECT r.receiptnumber, r.date FROM receipts r WHERE EXISTS (SELECT 1 FROM receipts r2 WHERE r2.date > r.date) = 0",
        "SELECT receiptnumber, date FROM receipts WHERE date = (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
        "SELECT r.receiptnumber, r.date FROM receipts r ORDER BY r.date DESC LIMIT 1",
        "SELECT r.receiptnumber, MAX(r.date) FROM receipts r GROUP BY r.receiptnumber HAVING r.date = (SELECT MAX(date) FROM receipts)"
      ]
    ]
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "nlq": "What is the receipt number with the latest date, and what is that date?",
    "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT receiptnumber, date FROM receipts ORDER BY date DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts r ORDER BY r.date DESC LIMIT 1",
        "SELECT r.receiptnumber, MAX(r.date) FROM receipts r GROUP BY r.receiptnumber ORDER BY r.date DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts r WHERE r.date = (SELECT MAX(date) FROM receipts) LIMIT 1",
        "SELECT MIN(r.receiptnumber) AS receiptnumber, MAX(date) AS max_date FROM receipts r GROUP BY date ORDER BY max_date DESC LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM receipts r WHERE r.date IN (SELECT MAX(date) FROM receipts rs) LIMIT 1",
        "SELECT r.receiptnumber, r.date FROM (SELECT receiptnumber, date FROM receipts ORDER BY date DESC) r LIMIT 1",
        "SELECT r1.receiptnumber, r1.date FROM receipts r1 JOIN (SELECT MAX(date) AS maxdate FROM receipts) r2 ON r1.date = r2.maxdate LIMIT 1",
        "SELECT receiptnumber, first_value(date) OVER (ORDER BY date DESC) FROM receipts GROUP BY receiptnumber LIMIT 1"
      ]
    ]
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "nlq": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT DISTINCT rc.receiptnumber FROM receipts rc LEFT JOIN items it ON rc.receiptnumber = it.receipt LEFT JOIN goods gd ON it.item = gd.id WHERE rc.date = (SELECT MIN(date) FROM receipts) OR gd.price > 10",
        "SELECT rc.receiptnumber FROM receipts rc WHERE rc.date = (SELECT MIN(date) FROM receipts) UNION SELECT it.receipt FROM items it INNER JOIN goods gd ON it.item = gd.id WHERE gd.price > 10",
        "SELECT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items INNER JOIN goods ON items.item = goods.id WHERE goods.price > 10 UNION SELECT receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))",
        "SELECT r.receiptnumber FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id AND (r.date = (SELECT MIN(date) FROM receipts) OR g.price > 10)",
        "SELECT r.receiptnumber FROM receipts r WHERE EXISTS (SELECT 1 FROM items i INNER JOIN goods g ON i.item = g.id WHERE g.price > 10 AND i.receipt = r.receiptnumber) OR r.date = (SELECT MIN(date) FROM receipts)",
        "SELECT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE r.date = (SELECT MIN(date) FROM receipts) OR g.price > 10",
        "SELECT r.receiptnumber FROM receipts r WHERE r.date = (SELECT MIN(date) FROM receipts) OR EXISTS (SELECT NULL FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 10 AND i.receipt = r.receiptnumber)",
        "SELECT receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts) UNION SELECT DISTINCT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 10",
        "SELECT r.receiptnumber FROM (SELECT receiptnumber, date FROM receipts UNION ALL SELECT items.receipt AS receiptnumber, NULL AS date FROM items JOIN goods ON items.item = goods.id WHERE goods.price > 10) r WHERE r.date = (SELECT MIN(date) FROM receipts) OR r.date IS NULL",
        "SELECT r.receiptnumber FROM receipts r LEFT JOIN (SELECT receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 10) j ON r.receiptnumber = j.receipt WHERE r.date = (SELECT MIN(date) FROM receipts) OR j.receipt IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "nlq": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
    "infer_predictions": [
      [
        "SELECT DISTINCT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items JOIN goods ON items.item = goods.id WHERE goods.price > 10) OR date = (SELECT MIN(date) FROM receipts)",
        "SELECT receipts.receiptnumber FROM receipts LEFT JOIN items ON receipts.receiptnumber = items.receipt LEFT JOIN goods ON items.item = goods.id WHERE goods.price > 10 OR receipts.date = (SELECT MIN(date) FROM receipts) GROUP BY receipts.receiptnumber",
        "SELECT r.receiptnumber FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 10) OR r.date = (SELECT MIN(date) FROM receipts)",
        "SELECT R.receiptnumber FROM receipts R LEFT OUTER JOIN (items I, goods g) ON (R.receiptnumber = I.receipt AND I.item = g.id) WHERE g.price > 10 UNION SELECT receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts)",
        "SELECT receiptnumber FROM receipts WHERE EXISTS (SELECT 1 FROM items INNER JOIN goods ON items.item = goods.id WHERE goods.price > 10 AND items.receipt = receipts.receiptnumber) OR date = (SELECT MIN(date) FROM receipts)",
        "SELECT DISTINCT r.receiptnumber FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.price > 10 OR r.date = (SELECT MIN(date) FROM receipts)",
        "SELECT receiptnumber FROM (SELECT receiptnumber, MIN(receipts.date) as MINDATE FROM receipts GROUP BY receiptnumber HAVING MIN(receipts.date) = (SELECT MIN(date) FROM receipts)) UNION SELECT receipt FROM items i JOIN goods g ON i.item = g.id WHERE g.price > 10 GROUP BY receipt",
        "WITH PriceyGoods AS (SELECT receipt FROM items INNER JOIN goods ON items.item = goods.id WHERE goods.price > 10), EarliestReceipts AS (SELECT receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts)) SELECT DISTINCT receiptnumber FROM receipts WHERE receiptnumber IN (SELECT receipt FROM PriceyGoods UNION ALL SELECT receiptnumber from EarliestReceipts)",
        "SELECT DISTINCT receipt FROM items LEFT JOIN goods ON items.item = goods.id WHERE goods.price > 10 UNION SELECT receiptnumber FROM receipts WHERE date = (SELECT MIN(date) FROM receipts)"
      ]
    ]
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "nlq": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7",
        "SELECT g.id FROM goods g WHERE g.food IN ('Cookie', 'Cake') AND g.price >= 3 AND g.price <= 7",
        "SELECT g.id FROM goods AS g WHERE g.food = 'Cookie' OR g.food = 'Cake' AND g.price > 2 AND g.price < 8",
        "SELECT id FROM goods WHERE (food = 'Cookie' OR food = 'Cake') AND price > 2 AND price < 8",
        "SELECT g.id FROM goods g WHERE g.food IN ('Cookie', 'Cake') AND g.price BETWEEN 3 AND 7",
        "SELECT DISTINCT id FROM goods WHERE food IN ('Cookie', 'Cake') AND price BETWEEN 3 AND 7",
        "SELECT id FROM goods WHERE food = 'Cookie' AND price BETWEEN 3 AND 7 UNION SELECT id FROM goods WHERE food = 'Cake' AND price BETWEEN 3 AND 7",
        "SELECT id FROM goods WHERE (food = 'Cookie' OR food = 'Cake') AND (price BETWEEN 3 AND 7)",
        "SELECT g.id FROM goods AS g WHERE g.food IN ('Cookie', 'Cake') AND g.price >= 3 AND g.price <= 7 ORDER BY g.price",
        "SELECT id FROM goods WHERE food = 'Cake' AND price BETWEEN 3 AND 7 UNION ALL SELECT id FROM goods WHERE food = 'Cookie' AND price BETWEEN 3 AND 7"
      ]
    ]
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "nlq": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE food IN ('Cookies', 'Cakes') AND price BETWEEN 3 AND 7",
        "SELECT g.id FROM goods g WHERE g.food IN ('Cookies', 'Cakes') AND g.price >= 3 AND g.price <= 7",
        "SELECT DISTINCT id FROM goods WHERE (food = 'Cookies' OR food = 'Cakes') AND price >= 3 AND price <= 7",
        "SELECT id FROM goods WHERE food = 'Cookies' AND price BETWEEN 3 AND 7 UNION SELECT id FROM goods WHERE food = 'Cakes' AND price BETWEEN 3 AND 7",
        "SELECT goods.id FROM goods WHERE goods.food = 'Cookies' AND goods.price > 2 AND goods.price < 8 UNION ALL SELECT goods.id FROM goods WHERE goods.food = 'Cakes' AND goods.price > 2 AND goods.price < 8",
        "SELECT g.id FROM goods AS g WHERE g.food IN ('Cookies', 'Cakes') AND g.price > 2.99 AND g.price < 7.01",
        "SELECT id FROM goods WHERE food IN (SELECT food FROM goods WHERE food = 'Cookies' OR food = 'Cakes') AND price BETWEEN 3 AND 7",
        "SELECT g.id FROM goods g WHERE (g.food = 'Cookies' OR g.food = 'Cakes') AND g.price IN (3, 4, 5, 6, 7)",
        "SELECT id FROM goods WHERE food = 'Cookies' AND price >= 3 AND price <= 7 UNION ALL SELECT id FROM goods WHERE food = 'Cakes' AND price >= 3 AND price <= 7",
        "SELECT g.id FROM goods g WHERE EXISTS (SELECT 1 FROM goods WHERE food IN ('Cookies', 'Cakes') AND id = g.id AND price BETWEEN 3 AND 7)"
      ]
    ]
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "nlq": "Find the first name and last name of a customer who visited on the earliest date.",
    "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
    "infer_predictions": [
      [
        "SELECT C.firstname, C.lastname FROM customers C JOIN receipts R ON C.id = R.customerid WHERE R.date = (SELECT MIN(date) FROM receipts)",
        "SELECT customers.firstname, customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid WHERE receipts.date = (SELECT MIN(receipts.date) FROM receipts)",
        "SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))",
        "SELECT c.firstname, c.lastname FROM customers AS c INNER JOIN receipts AS r ON c.id = r.customerid WHERE r.date = (SELECT MIN(date) FROM receipts AS r1)",
        "SELECT f.firstname, f.lastname FROM customers f CROSS JOIN receipts d WHERE f.id = d.customerid AND d.date = (SELECT MIN(date) FROM receipts)",
        "SELECT cus.firstname, cus.lastname FROM customers cus WHERE EXISTS (SELECT 1 FROM receipts WHERE customerid = cus.id AND date = (SELECT MIN(date) FROM receipts))",
        "SELECT firstname, lastname FROM customers WHERE id = (SELECT customerid FROM receipts ORDER BY date LIMIT 1)",
        "SELECT t1.firstname, t1.lastname FROM customers t1 WHERE t1.id = (SELECT r.customerid FROM receipts r WHERE r.date = (SELECT MIN(d.date) FROM receipts d))",
        "SELECT f.firstname, f.lastname FROM customers f WHERE f.id = (SELECT r.customerid FROM receipts r GROUP BY r.customerid HAVING MIN(r.date) = (SELECT MIN(date) FROM receipts))",
        "SELECT firstName, lastName FROM (SELECT firstName, lastName, R.date FROM customers JOIN receipts R ON id = R.customerid) WHERE date = (SELECT MIN(date) FROM receipts)"
      ]
    ]
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "nlq": "What is the full name of the customer who visited on the earliest date?",
    "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
    "infer_predictions": [
      [
        "SELECT firstname || ' ' || lastname FROM customers WHERE id = (SELECT customerid FROM receipts ORDER BY date LIMIT 1)",
        "SELECT c.firstname || ' ' || c.lastname FROM customers c JOIN receipts r ON c.id = r.customerid ORDER BY r.date ASC LIMIT 1",
        "SELECT customers.firstname || ' ' || customers.lastname FROM customers INNER JOIN receipts ON customers.id = receipts.customerid ORDER BY receipts.date ASC LIMIT 1",
        "SELECT cus.firstname || ' ' || cus.lastname FROM customers cus, receipts rcpt WHERE cus.id = rcpt.customerid ORDER BY rcpt.date ASC LIMIT 1",
        "SELECT (firstname || ' ' || lastname) AS fullname FROM customers WHERE id IN (SELECT customerid FROM receipts ORDER BY date LIMIT 1)",
        "SELECT firstname || ' ' || lastname AS fullname FROM customers WHERE id = (SELECT customerid FROM receipts WHERE date = (SELECT MIN(date) FROM receipts))",
        "SELECT firstname || ' ' || lastname FROM customers JOIN receipts ON id = customerid WHERE receipts.date = (SELECT MIN(date) FROM receipts) LIMIT 1",
        "SELECT firstname ||' '|| lastname FROM customers WHERE id = (SELECT customerid FROM receipts ORDER BY date ASC LIMIT 1)",
        "SELECT c.firstname || ' ' || c.lastname FROM customers c WHERE c.id = (SELECT customerid FROM (SELECT customerid, date FROM receipts ORDER BY date ASC LIMIT 1))"
      ]
    ]
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "nlq": "What is average price of goods whose flavor is blackberry or blueberry?",
    "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
    "infer_predictions": [
      [
        "SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')",
        "SELECT AVG(g.price) AS average_price FROM goods g WHERE g.flavor = 'blackberry' OR g.flavor = 'blueberry'",
        "SELECT AVG(price) FROM goods WHERE flavor = 'blackberry' UNION SELECT AVG(price) FROM goods WHERE flavor = 'blueberry'",
        "SELECT (SUM(price) / COUNT(*)) FROM goods WHERE flavor IN ('blackberry', 'blueberry')",
        "SELECT AVG(price) FROM goods WHERE flavor = 'blackberry' OR flavor = 'blueberry'",
        "SELECT (SELECT AVG(price) FROM goods WHERE flavor = 'blackberry') AS avg_price_blackberry, (SELECT AVG(price) FROM goods WHERE flavor = 'blueberry') AS avg_price_blueberry",
        "SELECT AVG(price) AS AveragePrice FROM goods WHERE flavor IN (SELECT DISTINCT flavor FROM goods WHERE flavor = 'blackberry' OR flavor = 'blueberry')",
        "SELECT AVG(price) FROM goods g WHERE EXISTS (SELECT 1 FROM goods WHERE flavor = g.flavor AND (flavor = 'blackberry' OR flavor = 'blueberry'))",
        "SELECT AVG(case when flavor = 'blackberry' then price when flavor = 'blueberry' then price else null end) FROM goods"
      ]
    ]
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "nlq": "What are the average prices of goods with blackberry or blueberry flavor?",
    "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
    "infer_predictions": [
      [
        "SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry')",
        "SELECT AVG(price) AS average_price FROM goods WHERE flavor = 'blackberry' OR flavor = 'blueberry'",
        "SELECT AVG(g.price) FROM goods g WHERE g.flavor = 'blackberry' OR g.flavor = 'blueberry'",
        "SELECT AVG(price) FROM goods WHERE flavor LIKE 'blackberry' OR flavor LIKE 'blueberry'",
        "SELECT AVG(price) FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE flavor = 'blackberry' OR flavor = 'blueberry')",
        "SELECT AVG(price) FROM goods g WHERE g.flavor IN ('blackberry', 'blueberry')",
        "SELECT AVG(price) AS avg_price FROM goods WHERE flavor IN (SELECT DISTINCT flavor FROM goods WHERE flavor LIKE 'blackberry' OR flavor LIKE 'blueberry')",
        "SELECT AVG(price) FROM goods g WHERE EXISTS (SELECT 1 FROM goods WHERE flavor = g.flavor AND (flavor = 'blueberry' OR flavor = 'blackberry'))"
      ]
    ]
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "nlq": "Return the cheapest price for goods with cheese flavor.",
    "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
    "infer_predictions": [
      [
        "SELECT MIN(price) FROM goods WHERE flavor = 'cheese'",
        "SELECT price FROM goods WHERE flavor = 'cheese' ORDER BY price ASC LIMIT 1",
        "SELECT g.price FROM goods g WHERE g.flavor = 'cheese' ORDER BY g.price LIMIT 1",
        "SELECT MIN(price) AS CheapestPrice FROM goods WHERE flavor = 'cheese'"
      ]
    ]
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "nlq": "What is the cheapest good with cheese flavor?",
    "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE flavor = 'cheese' ORDER BY price LIMIT 1",
        "SELECT MIN(price), id FROM goods WHERE flavor = 'cheese' GROUP BY id ORDER BY price LIMIT 1",
        "SELECT id FROM goods WHERE flavor = 'cheese' AND price = (SELECT MIN(price) FROM goods WHERE flavor = 'cheese')",
        "SELECT g.id FROM goods g WHERE g.flavor = 'cheese' AND g.price = (SELECT MIN(price) FROM goods WHERE flavor = 'cheese')",
        "SELECT id FROM (SELECT id, price FROM goods WHERE flavor = 'cheese' ORDER BY price) LIMIT 1",
        "SELECT g1.id FROM goods g1 WHERE g1.flavor = 'cheese' AND g1.price = (SELECT MIN(g2.price) FROM goods g2 WHERE g2.flavor = 'cheese')",
        "SELECT * FROM (SELECT id FROM goods WHERE flavor = 'cheese' ORDER BY price ASC) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "nlq": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
    "infer_predictions": [
      [
        "SELECT flavor, MAX(price) AS highest, MIN(price) AS lowest, AVG(price) AS average FROM goods GROUP BY flavor ORDER BY flavor",
        "SELECT g.flavor, MAX(g.price) AS highest, MIN(g.price) AS lowest, AVG(g.price) AS average FROM goods g GROUP BY g.flavor ORDER BY g.flavor",
        "SELECT goods.flavor, MAX(goods.price) AS highest, MIN(goods.price) AS lowest, AVG(goods.price) AS average FROM goods GROUP BY goods.flavor ORDER BY goods.flavor",
        "SELECT flav, MAX(pric) AS highest, MIN(pric) AS lowest, AVG(pric) AS average FROM (SELECT price AS pric, flavor AS flav FROM goods) GROUP BY flav ORDER BY flav",
        "SELECT flavor AS Flv, MAX(price) AS MaxPrice, MIN(price) AS MinPrice, AVG(price) AS AvgPrice FROM goods GROUP BY Flv ORDER BY Flv",
        "SELECT flavour, MAX(price_val) AS highest, MIN(price_val) AS lowest, AVG(price_val) AS average FROM (SELECT flavor AS flavour, price AS price_val FROM goods) GROUP BY flavour ORDER BY flavour",
        "SELECT DISTINCT flavor, (SELECT MAX(price) FROM goods WHERE flavor = g.flavor) AS highest, (SELECT MIN(price) FROM goods WHERE flavor = g.flavor) AS lowest, (SELECT AVG(price) FROM goods WHERE flavor = g.flavor) AS average FROM goods g ORDER BY flavor",
        "SELECT flavour, MAX(price_points) AS highest, MIN(price_points) AS lowest, AVG(price_points) AS average FROM (SELECT flavor AS flavour, price AS price_points FROM goods ORDER BY price_points DESC, flavour) GROUP BY flavour"
      ]
    ]
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "nlq": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
    "infer_predictions": [
      [
        "SELECT flavor, MAX(price) AS max_price, MIN(price) AS min_price, AVG(price) AS avg_price FROM goods GROUP BY flavor ORDER BY flavor",
        "SELECT g.flavor, MAX(g.price) AS max_price, MIN(g.price) AS min_price, AVG(g.price) AS avg_price FROM goods AS g GROUP BY g.flavor ORDER BY g.flavor",
        "SELECT goods.flavor, MAX(goods.price) AS max_price, MIN(goods.price) AS min_price, AVG(goods.price) AS avg_price FROM goods GROUP BY goods.flavor ORDER BY goods.flavor",
        "SELECT flav, MAX(p) AS max_price, MIN(p) AS min_price, AVG(p) AS avg_price FROM (SELECT flavor AS flav, price AS p FROM goods) GROUP BY flav ORDER BY flav",
        "SELECT flavor, MAX(price) AS MaximumPrice, MIN(price) AS MinimumPrice, AVG(price) AS AveragePrice FROM goods GROUP BY flavor ORDER BY flavor ASC",
        "SELECT g.flavor AS Flavor, MAX(g.price) AS MaximumPrice, MIN(g.price) AS MinimumPrice, AVG(g.price) AS AveragePrice FROM goods g GROUP BY Flavor ORDER BY Flavor",
        "SELECT flavor, MAX(price) maximum, MIN(price) minimum, AVG(price) average FROM goods GROUP BY flavor ORDER BY flavor ASC",
        "SELECT flavor AS f, MAX(price) AS MaxPrice, MIN(price) AS MinPrice, AVG(price) AS AvgPrice FROM goods GROUP BY f ORDER BY f"
      ]
    ]
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "nlq": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
    "infer_predictions": [
      [
        "SELECT food, MIN(price) AS LowestPrice, MAX(price) AS HighestPrice FROM goods GROUP BY food ORDER BY food;",
        "SELECT g.food, MIN(g.price) AS MinPrice, MAX(g.price) AS MaxPrice FROM goods g GROUP BY g.food ORDER BY g.food;",
        "SELECT food, MIN(price) AS MinValue, MAX(price) AS MaxValue FROM goods GROUP BY food ORDER BY food ASC;",
        "SELECT g.food, MIN(g.price), MAX(g.price) FROM goods g GROUP BY g.food ORDER BY g.food ASC;",
        "SELECT DISTINCT food, MIN(price) OVER (PARTITION BY food) AS MinPrice, MAX(price) OVER (PARTITION BY food) AS MaxPrice FROM goods ORDER BY food;",
        "SELECT food, MIN(price) AS MinimumPrice, MAX(price) AS MaximumPrice FROM goods GROUP BY food ORDER BY food ASC;",
        "SELECT goods.food, MIN(goods.price) AS Min_Price, MAX(goods.price) AS Max_Price FROM goods GROUP BY goods.food ORDER BY goods.food;",
        "SELECT DISTINCT(food) AS FoodType, MIN(price) AS LowestPriceever, MAX(price) AS HighestPriceever FROM goods GROUP BY FoodType ORDER BY FoodType;",
        "SELECT food, MIN(price) AS Lowest_Price, MAX(price) AS Highest_Price FROM goods GROUP BY food ORDER BY food ASC;"
      ]
    ]
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "nlq": "What are the minimum and maximum prices of food goods, ordered by food?",
    "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
    "infer_predictions": [
      [
        "SELECT food, MIN(price) AS MinPrice, MAX(price) AS MaxPrice FROM goods GROUP BY food ORDER BY food",
        "SELECT g.food, MIN(g.price) AS MinPrice, MAX(g.price) MaxPrice FROM goods g GROUP BY g.food ORDER BY g.food",
        "SELECT food, MIN(price) AS LowestPrice, MAX(price) AS HighestPrice FROM goods GROUP BY food ORDER BY food ASC",
        "SELECT goods.food, MIN(goods.price) AS MinimumPrice, MAX(goods.price) AS MaximumPrice FROM goods GROUP BY goods.food ORDER BY goods.food ASC",
        "SELECT food, MIN(price), MAX(price) FROM goods GROUP BY food ORDER BY food ASC",
        "SELECT g.food, MIN(g.price), MAX(g.price) FROM goods g GROUP BY g.food ORDER BY g.food ASC",
        "SELECT food AS FoodItem, MIN(price) AS MinPrice, MAX(price) AS MaxPrice FROM goods GROUP BY FoodItem ORDER BY FoodItem",
        "SELECT food, MIN(price) MinimumPrice, MAX(price) MaximumPrice FROM goods GROUP BY food ORDER BY food",
        "SELECT g.food AS Food, MIN(g.price) AS MinPrice, MAX(g.price) AS MaxPrice FROM goods g GROUP BY g.food ORDER BY g.food",
        "SELECT goods.food, MIN(goods.price) AS Minimum, MAX(goods.price) AS Maximum FROM goods GROUP BY food ORDER BY food"
      ]
    ]
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "nlq": "Find the top three dates with the most receipts.",
    "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT date FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC LIMIT 3",
        "SELECT r.date FROM receipts r GROUP BY r.date ORDER BY COUNT(r.receiptnumber) DESC LIMIT 3",
        "SELECT date FROM (SELECT date, COUNT(receiptnumber) AS num_receipts FROM receipts GROUP BY date) ORDER BY num_receipts DESC LIMIT 3",
        "SELECT r.date FROM receipts AS r GROUP BY r.date ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT r.date, COUNT(r.receiptnumber) as TotalReceipts FROM receipts r GROUP BY r.date ORDER BY TotalReceipts DESC LIMIT 3",
        "SELECT date FROM receipts GROUP BY date HAVING COUNT(receiptnumber) = (SELECT MAX(c) FROM (SELECT COUNT(receiptnumber) as c FROM receipts GROUP BY date)) LIMIT 3",
        "SELECT r.date, COUNT(r.receiptnumber) FROM receipts r GROUP BY r.date ORDER BY COUNT(r.receiptnumber) DESC LIMIT 3",
        "SELECT date, COUNT(receiptnumber) FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "nlq": "What are the three dates for which the most receipts were given?",
    "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT date FROM receipts GROUP BY date ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT r.date FROM receipts r GROUP BY r.date ORDER BY COUNT(r.receiptnumber) DESC LIMIT 3",
        "SELECT r.date, COUNT(r.date) AS total FROM receipts r GROUP BY r.date ORDER BY total DESC LIMIT 3",
        "SELECT date FROM (SELECT date, COUNT(receiptnumber) as cnt FROM receipts GROUP BY date) ORDER BY cnt DESC LIMIT 3",
        "SELECT r.date FROM receipts r GROUP BY r.date HAVING COUNT(r.receiptnumber) > (SELECT COUNT(receiptnumber) FROM receipts GROUP BY date LIMIT 2) ORDER BY COUNT(r.receiptnumber) DESC LIMIT 3",
        "WITH DateCounts AS (SELECT date, COUNT(receiptnumber) AS num_receipts FROM receipts GROUP BY date) SELECT date FROM DateCounts ORDER BY num_receipts DESC LIMIT 3",
        "SELECT r.date FROM (SELECT date, COUNT(receiptnumber) as total_receipts FROM receipts GROUP BY date) r ORDER BY r.total_receipts DESC LIMIT 3",
        "SELECT r.date, COUNT(r.receiptnumber) as Quantity FROM receipts r GROUP BY r.date ORDER BY Quantity DESC LIMIT 3",
        "WITH RankedDates AS (SELECT date, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank FROM receipts GROUP BY date) SELECT date FROM RankedDates WHERE rank <= 3",
        "SELECT date FROM receipts GROUP BY date ORDER BY COUNT(receiptnumber) DESC, date DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "nlq": "Which customer shopped most often? How many times?",
    "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT customers.firstname, customers.lastname, COUNT(*) AS shopping_count FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id ORDER BY shopping_count DESC LIMIT 1",
        "SELECT C.firstname, C.lastname, COUNT(R.receiptnumber) AS times_shopped FROM customers C INNER JOIN receipts R ON C.id = R.customerid GROUP BY C.id ORDER BY times_shopped DESC LIMIT 1",
        "SELECT firstname, lastname, MAX(visit_count) FROM (SELECT customers.firstname AS firstname, customers.lastname AS lastname, COUNT(receipts.receiptnumber) AS visit_count FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id) GROUPED_RESULTS",
        "SELECT DISTINCT customers.firstname, customers.lastname, visit_counts.visit_count FROM customers JOIN (SELECT customerid, COUNT(*) AS visit_count FROM receipts GROUP BY customerid) visit_counts ON customers.id = visit_counts.customerid ORDER BY visit_counts.visit_count DESC LIMIT 1",
        "SELECT C.firstname, C.lastname, COUNT(*) AS shopping_count FROM receipts R JOIN customers C ON R.customerid = C.id GROUP BY C.id ORDER BY shopping_count DESC LIMIT 1",
        "SELECT F.firstname, F.lastname FROM (SELECT customers.firstname AS firstname, customers.lastname AS lastname, COUNT(receipts.receiptnumber) AS num_receipts FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id ORDER BY num_receipts DESC LIMIT 1) F",
        "SELECT customers.firstname, customers.lastname, COUNT(DISTINCT receipts.receiptnumber) AS number_of_shopping_trips FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id ORDER BY number_of_shopping_trips DESC LIMIT 1",
        "SELECT firstname, lastname FROM customers WHERE id = (SELECT customerid FROM receipts GROUP BY customerid ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH CustomerReceipts AS (SELECT customerid, COUNT(receiptnumber) AS VisitCount FROM receipts GROUP BY customerid) SELECT customers.firstname, customers.lastname FROM customers JOIN CustomerReceipts CR ON customers.id = CR.customerid ORDER BY CR.VisitCount DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "nlq": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT customerid, COUNT(*) AS num_purchases FROM receipts GROUP BY customerid ORDER BY num_purchases DESC LIMIT 1",
        "SELECT r.customerid, COUNT(*) AS total_purchases FROM receipts r GROUP BY r.customerid ORDER BY total_purchases DESC LIMIT 1",
        "SELECT c.id, COUNT(receiptnumber) AS purchase_count FROM customers c JOIN receipts r ON c.id = r.customerid GROUP BY c.id ORDER BY purchase_count DESC LIMIT 1",
        "SELECT top_customer.customerid, top_customer.total_purchases FROM (SELECT customerid, COUNT(*) as total_purchases FROM receipts GROUP BY customerid) as top_customer ORDER BY top_customer.total_purchases DESC LIMIT 1",
        "SELECT r.customerid, COUNT(r.receiptnumber) AS purchases FROM receipts r GROUP BY r.customerid ORDER BY purchases DESC LIMIT 1",
        "SELECT first_place.customerid, MAX(first_place.purchase_numbers) FROM (SELECT customerid, COUNT(*) as purchase_numbers FROM receipts GROUP BY customerid) first_place",
        "SELECT customerid AS top_buyer_id, MAX(purchases) AS max_purchases FROM (SELECT customerid, COUNT(*) AS purchases FROM receipts GROUP BY customerid) GROUP BY customerid ORDER BY max_purchases DESC LIMIT 1",
        "SELECT c.id FROM customers c JOIN (SELECT customerid, COUNT(*) FROM receipts GROUP BY customerid ORDER BY COUNT(*) DESC LIMIT 1) p ON c.id = p.customerid",
        "SELECT customerid, COUNT(receiptnumber) FROM receipts GROUP BY customerid ORDER BY COUNT(receiptnumber) DESC LIMIT 1",
        "SELECT c.id, (SELECT COUNT(*) FROM receipts r WHERE r.customerid = c.id) AS purchase_totals FROM customers c ORDER BY purchase_totals DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "nlq": "For each date, return how many distinct customers visited on that day.",
    "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
    "infer_predictions": [
      [
        "SELECT date, COUNT(DISTINCT customerid) FROM receipts GROUP BY date",
        "SELECT r.date, COUNT(DISTINCT r.customerid) FROM receipts r GROUP BY r.date",
        "SELECT r.date, COUNT(DISTINCT c.id) FROM receipts r JOIN customers c ON r.customerid = c.id GROUP BY r.date",
        "SELECT r.date, COUNT(DISTINCT r.customerid) AS distinct_visitors FROM receipts r WHERE r.customerid IN (SELECT id FROM customers) GROUP BY r.date",
        "SELECT receipts.date AS visit_date, COUNT(DISTINCT receipts.customerid) AS unique_customers FROM receipts GROUP BY visit_date",
        "SELECT date, COUNT(DISTINCT customerid) AS distinct_customers_count FROM receipts GROUP BY date",
        "SELECT r.date, COUNT(DISTINCT customerid) FROM receipts r WHERE EXISTS (SELECT 1 FROM customers WHERE id = r.customerid) GROUP BY r.date",
        "SELECT date(date), COUNT(DISTINCT customerid) FROM receipts GROUP BY date(date)",
        "SELECT DISTINCT r.date, (SELECT COUNT(DISTINCT customerid) FROM receipts rec WHERE rec.date = r.date) FROM receipts r",
        "SELECT r.date, COUNT(DISTINCT customerid) FROM receipts r LEFT JOIN customers c ON r.customerid = c.id GROUP BY r.date"
      ]
    ]
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "nlq": "How many cusomters visited on each date?",
    "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
    "infer_predictions": [
      [
        "SELECT r.date, COUNT(DISTINCT r.customerid) FROM receipts r GROUP BY r.date",
        "SELECT date, COUNT(DISTINCT customerid) FROM receipts GROUP BY date",
        "SELECT r.date, COUNT(r.customerid) FROM receipts r GROUP BY r.date HAVING COUNT(DISTINCT r.customerid)",
        "SELECT date, COUNT(DISTINCT customerid) AS visit_count FROM receipts GROUP BY date",
        "SELECT date AS visit_date, COUNT(DISTINCT customerid) AS number_of_customers FROM receipts GROUP BY visit_date",
        "SELECT tmp.date, COUNT(*) FROM (SELECT DISTINCT date, customerid FROM receipts) as tmp GROUP BY tmp.date"
      ]
    ]
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "nlq": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
    "infer_predictions": [
      [
        "SELECT c.firstname, c.lastname FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE g.flavor = 'apple' AND g.food = 'Tart'",
        "SELECT DISTINCT customers.firstname, customers.lastname FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id WHERE goods.flavor = 'apple' AND goods.food = 'Tart'",
        "SELECT f.firstname, f.lastname FROM customers AS f, receipts AS r, items AS i, goods AS g WHERE f.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND g.flavor = 'apple' AND g.food = 'Tart'",
        "SELECT firstname, lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tart')))",
        "SELECT c.firstname, c.lastname FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id AND g.flavor = 'apple' AND g.food = 'Tart'",
        "SELECT customers.firstname, customers.lastname FROM customers WHERE customers.id IN (SELECT receipts.customerid FROM receipts INNER JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.flavor = 'apple' AND goods.food = 'Tart')",
        "SELECT C.firstname, C.lastname FROM customers AS C LEFT JOIN receipts AS R ON C.id = R.customerid LEFT JOIN items AS I ON I.receipt = R.receiptnumber LEFT JOIN goods AS G ON I.item = G.id WHERE G.flavor = 'apple' AND G.food = 'Tart'",
        "SELECT CPRISTS.firstname, CPRISTS.lastname FROM customers CPRISTS WHERE EXISTS (SELECT 1 FROM receipts RECE, items ITEMS, goods FOODS WHERE RECE.customerid = CPRISTS.id AND RECE.receiptnumber = ITEMS.receipt AND ITEMS.item = FOODS.id AND FOODS.flavor = 'apple' AND FOODS.food = 'Tart')",
        "SELECT fn.firstname, fn.lastname FROM customers fn CROSS JOIN receipts rc CROSS JOIN items it CROSS JOIN goods gd WHERE fn.id = rc.customerid AND rc.receiptnumber = it.receipt AND it.item = gd.id AND gd.flavor = 'apple' AND gd.food = 'Tart'"
      ]
    ]
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "nlq": "What are the full names of customers who bought apple flavored Tarts?",
    "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
    "infer_predictions": [
      [
        "SELECT customers.firstname || ' ' || customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'Tarts' AND goods.flavor = 'apple'",
        "SELECT firstname || ' ' || lastname FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'apple' AND food = 'Tarts')))",
        "SELECT C.firstname || ' ' || C.lastname FROM customers C JOIN receipts R ON C.id = R.customerid JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id WHERE G.flavor = 'apple' AND G.food = 'Tarts'",
        "SELECT firstname || ' ' || lastname FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON items.receipt = receipts.receiptnumber INNER JOIN goods ON goods.id = items.item WHERE goods.flavor = 'apple' AND goods.food = 'Tarts'",
        "SELECT DISTINCT firstname || ' ' || lastname FROM customers, receipts, items JOIN goods ON items.item = goods.id WHERE customers.id = receipts.customerid AND receipts.receiptnumber = items.receipt AND goods.flavor = 'apple' AND goods.food = 'Tarts'",
        "SELECT C.firstname || ' ' || C.lastname FROM customers C, receipts R, goods G, items I WHERE C.id = R.customerid AND R.receiptnumber = I.receipt AND I.item = G.id AND G.flavor = 'apple' AND G.food = 'Tarts'",
        "SELECT DISTINCT customers.firstname || ' ' || customers.lastname FROM customers CROSS JOIN items LEFT JOIN receipts ON customers.id = receipts.customerid LEFT JOIN goods ON items.item = goods.id WHERE goods.flavor = 'apple' AND goods.food = 'Tarts'",
        "SELECT customers.firstname || ' ' || customers.lastname FROM customers WHERE EXISTS (SELECT 1 FROM receipts LEFT JOIN items ON receipts.receiptnumber = items.receipt LEFT JOIN goods ON items.item = goods.id WHERE customers.id = receipts.customerid AND goods.flavor = 'apple' AND goods.food = 'Tarts')",
        "SELECT firstname || ' ' || lastname FROM customers WHERE id IN (SELECT customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'Tarts' AND goods.flavor = 'apple')"
      ]
    ]
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "nlq": "What are the ids of Cookies whose price is lower than any Croissant?",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "infer_predictions": [
      [
        "SELECT G.id FROM goods G WHERE G.food = 'Cookies' AND G.price < (SELECT MIN(price) FROM goods WHERE food = 'Croissant')",
        "SELECT goods.id FROM goods WHERE goods.food = 'Cookies' AND goods.price < (SELECT MIN(goods.price) FROM goods WHERE goods.food = 'Croissant')",
        "SELECT id FROM goods G1 WHERE G1.food = 'Cookies' AND G1.price < (SELECT MIN(G2.price) FROM goods G2 WHERE G2.food = 'Croissant')",
        "SELECT g.id FROM goods g WHERE g.food = 'Cookies' AND EXISTS (SELECT 1 FROM goods g2 WHERE g2.food = 'Croissant' AND g.price < g2.price)",
        "SELECT id FROM goods WHERE food = 'Cookies' AND price < (SELECT price FROM goods WHERE food = 'Croissant' ORDER BY price ASC LIMIT 1)",
        "SELECT G.id FROM goods AS G INNER JOIN (SELECT MIN(price) AS MinPrice FROM goods WHERE food = 'Croissant') AS G2 ON G.price < G2.MinPrice WHERE G.food = 'Cookies'"
      ]
    ]
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "nlq": "Give the ids of cookes that are cheaper than any croissant.",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE price < (SELECT MIN(price) FROM goods WHERE food = 'croissant') AND food = 'cookies'",
        "SELECT id FROM goods g WHERE g.food = 'cookies' AND g.price < (SELECT price FROM goods WHERE food = 'croissant' ORDER BY price ASC LIMIT 1)",
        "SELECT G1.id FROM goods G1 CROSS JOIN goods G2 WHERE G1.food = 'cookies' AND G2.food = 'croissant' AND G1.price < G2.price LIMIT 1",
        "SELECT g.id FROM goods g WHERE g.food = 'cookies' AND NOT EXISTS (SELECT 1 FROM goods gg WHERE gg.food = 'croissant' AND gg.price <= g.price)",
        "SELECT g1.id FROM goods g1 WHERE g1.food = 'cookies' AND g1.price IN (SELECT MIN(g2.price) FROM goods g2 WHERE g2.food = 'croissant')"
      ]
    ]
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "nlq": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
    "infer_predictions": [
      [
        "SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart')",
        "SELECT id FROM goods WHERE food = 'Cake' AND price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart')",
        "SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart')",
        "SELECT id FROM goods WHERE food = 'Cake' AND price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart')",
        "SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(price) FROM goods g2 WHERE g2.food = 'Tart')",
        "SELECT id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart')",
        "SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(g2.price) FROM goods AS g2 WHERE g2.food = 'Tart')",
        "SELECT id FROM goods WHERE food = 'Cake' AND price >= (SELECT AVG(p.price) FROM goods p WHERE p.food = 'Tart')"
      ]
    ]
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "nlq": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE food = 'cake' AND price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT g.id FROM goods g WHERE g.food = 'cake' AND g.price >= (SELECT AVG(price) FROM goods WHERE food = 'Tart')",
        "SELECT id FROM goods WHERE food = 'cake' AND price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart')",
        "SELECT g.id FROM goods g WHERE g.food = 'cake' AND g.price >= (SELECT AVG(p.price) FROM goods p WHERE p.food = 'Tart')",
        "SELECT id FROM goods g1 WHERE g1.food = 'cake' AND g1.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart')",
        "SELECT g.id FROM goods g WHERE g.food = 'cake' AND g.price >= (SELECT AVG(p.price) FROM goods p WHERE p.food = 'Tart' GROUP BY p.food)",
        "SELECT goods.id FROM goods WHERE goods.food = 'cake' AND goods.price >= (SELECT AVG(g.price) FROM goods g WHERE g.food = 'Tart')"
      ]
    ]
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "nlq": "What are the ids of goods whose price is above twice the average price of all goods?",
    "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)",
        "SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods)",
        "SELECT goods.id FROM goods WHERE goods.price > (SELECT 2 * AVG(price) FROM goods)",
        "SELECT id FROM goods WHERE price > 2 * (SELECT average_price FROM (SELECT AVG(price) AS average_price FROM goods))",
        "SELECT g.id FROM goods g INNER JOIN (SELECT AVG(price) AS avg_price FROM goods) avg_g ON g.price > 2 * avg_g.avg_price",
        "SELECT goods.id FROM goods CROSS JOIN (SELECT AVG(price) AS average_price FROM goods) subquery WHERE goods.price > 2 * subquery.average_price",
        "SELECT id FROM goods WHERE price > (SELECT 2 * AVG(price) FROM goods AS sub_goods)",
        "SELECT id FROM goods WHERE price > (SELECT AVG_price * 2 FROM (SELECT AVG(price) AS AVG_price FROM goods) AS a)"
      ]
    ]
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "nlq": "Give the ids of goods that are more than twice as expensive as the average good.",
    "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
    "infer_predictions": [
      [
        "SELECT id FROM goods WHERE price > 2 * (SELECT AVG(price) FROM goods)",
        "SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods)",
        "SELECT id FROM goods WHERE price > 2 * (SELECT AVG(g.price) FROM goods g)",
        "SELECT g.id FROM goods g WHERE g.price > (SELECT 2 * AVG(price) FROM goods)",
        "SELECT DISTINCT id FROM goods WHERE price > (SELECT AVG(price) * 2 FROM goods)",
        "SELECT goods.id FROM goods WHERE goods.price > (2 * (SELECT AVG(price) FROM goods))",
        "SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(g2.price) FROM goods g2)",
        "SELECT id FROM goods g1 WHERE g1.price > (SELECT 2 * AVG(g2.price) AS avgPrice FROM goods g2)",
        "SELECT DISTINCT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods g2)"
      ]
    ]
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "nlq": "List the id, flavor and type of food of goods ordered by price.",
    "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
    "infer_predictions": [
      [
        "SELECT id, flavor, food FROM goods ORDER BY price",
        "SELECT id AS ItemID, flavor AS Taste, food AS Type FROM goods ORDER BY price ASC",
        "SELECT foo.id, foo.flavor, foo.food FROM goods foo ORDER BY foo.price",
        "SELECT first.id, first.flavor, first.food FROM goods first ORDER BY first.price",
        "SELECT id, flavor, food FROM goods GROUP BY id, flavor, food ORDER BY price",
        "SELECT goo.id, goo.flavor, goo.food FROM goods goo ORDER BY goo.price ASC"
      ]
    ]
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "nlq": "What are the ids, flavors, and food types of goods, ordered by price?",
    "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
    "infer_predictions": [
      [
        "SELECT id, flavor, food FROM goods ORDER BY price",
        "SELECT id, flavor, food FROM goods g ORDER BY g.price ASC",
        "SELECT id FROM goods ORDER BY price ASC, flavor, food",
        "SELECT goods.id AS id, goods.flavor AS flavor, goods.food AS food FROM goods ORDER BY goods.price",
        "SELECT A.id, A.flavor, A.food FROM goods A ORDER BY A.price",
        "SELECT t1.id, t1.flavor, t1.food FROM goods t1 ORDER BY t1.price ASC"
      ]
    ]
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "nlq": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
    "infer_predictions": [
      [
        "SELECT g.id, g.flavor FROM goods g JOIN items i ON g.id = i.item WHERE g.food = 'Cake' ORDER BY g.flavor",
        "SELECT id, flavor FROM goods WHERE id IN (SELECT item FROM items WHERE item IN (SELECT id FROM goods WHERE food = 'Cake')) ORDER BY flavor",
        "SELECT goods.id, goods.flavor FROM goods INNER JOIN items ON goods.id = items.item WHERE goods.food = 'Cake' ORDER BY goods.flavor",
        "SELECT DISTINCT goods.id, goods.flavor FROM goods, items WHERE goods.id = items.item AND goods.food = 'Cake' ORDER BY goods.flavor",
        "SELECT flavor, id FROM goods WHERE food = 'Cake' AND id IN (SELECT item FROM items) ORDER BY flavor",
        "SELECT g.id AS 'ID', g.flavor AS 'Flavor' FROM goods g, items i WHERE g.id = i.item AND g.food = 'Cake' ORDER BY g.flavor",
        "SELECT goods.id AS ID, goods.flavor AS Flavor FROM goods JOIN items ON goods.id = items.item WHERE goods.food = 'Cake' ORDER BY Flavor",
        "SELECT id, flavor FROM (SELECT id, flavor FROM goods WHERE food = 'Cake') ORDER BY flavor",
        "SELECT a.id, a.flavor FROM goods a JOIN items b ON a.id = b.item WHERE a.food = 'Cake' ORDER BY a.flavor",
        "SELECT g.id, g.flavor FROM goods AS g JOIN items AS i ON i.item = g.id WHERE g.food = 'Cake' ORDER BY g.flavor ASC"
      ]
    ]
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "nlq": "What are the ids and flavors of cakes, ordered by flavor?",
    "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
    "infer_predictions": [
      [
        "SELECT id, flavor FROM goods WHERE food = 'cake' ORDER BY flavor",
        "SELECT goods.flavor, goods.id FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE food = 'cake') ORDER BY flavor",
        "SELECT g.flavor, g.id FROM goods g WHERE g.food = 'cake' ORDER BY flavor ASC",
        "SELECT g.id AS 'Item ID', g.flavor AS 'Flavor' FROM goods g WHERE g.food = 'cake' ORDER BY g.flavor ASC",
        "SELECT * FROM (SELECT id, flavor FROM goods WHERE food = 'cake') ORDER BY flavor",
        "SELECT x.id, x.flavor FROM (SELECT id, flavor, food FROM goods) as x WHERE x.food = 'cake' ORDER BY x.flavor ASC"
      ]
    ]
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "nlq": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
    "infer_predictions": [
      [
        "SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' AND (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10",
        "SELECT DISTINCT g.id FROM goods g INNER JOIN items i ON g.id = i.item WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.item) <= 10",
        "SELECT item FROM (SELECT item, COUNT(item) as count FROM items INNER JOIN goods ON items.item = goods.id WHERE goods.flavor = 'chocolate' GROUP BY item) WHERE count <= 10",
        "SELECT goods.id FROM goods INNER JOIN items ON goods.id = items.item WHERE goods.flavor = 'chocolate' GROUP BY goods.id HAVING COUNT(*) <= 10",
        "SELECT DISTINCT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(DISTINCT i.receipt) <= 10",
        "SELECT id FROM goods WHERE id IN (SELECT item FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'chocolate') GROUP BY item HAVING COUNT(item) <= 10)",
        "SELECT item FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'chocolate') GROUP BY item HAVING SUM(1) <= 10",
        "SELECT id FROM goods g WHERE flavor = 'chocolate' AND (SELECT COUNT(item) FROM items WHERE item = g.id) <= 10",
        "SELECT g.id FROM goods g WHERE g.flavor = 'chocolate' GROUP BY g.id HAVING (SELECT COUNT(*) FROM items i WHERE i.item = g.id) <= 10",
        "SELECT goods.id FROM goods JOIN items ON goods.id = items.item AND goods.flavor = 'chocolate' GROUP BY goods.id HAVING COUNT(items.item) <= 10"
      ]
    ]
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "nlq": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
    "infer_predictions": [
      [
        "SELECT item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'chocolate' GROUP BY item HAVING COUNT(*) <= 10",
        "SELECT i.item FROM items i INNER JOIN goods g ON i.item = g.id WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.item) <= 10",
        "SELECT DISTINCT i.item FROM items i, goods g WHERE i.item = g.id AND g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.item) <= 10",
        "SELECT i.item FROM items i LEFT JOIN goods g ON i.item = g.id WHERE g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(*) <= 10",
        "SELECT A.item FROM items A JOIN goods B ON A.item = B.id WHERE B.flavor = 'chocolate' GROUP BY A.item HAVING COUNT(*) <= 10",
        "SELECT item FROM (SELECT item FROM items WHERE item IN (SELECT id FROM goods WHERE flavor = 'chocolate')) GROUP BY item HAVING COUNT(item) <= 10",
        "SELECT items.item FROM items JOIN goods ON items.item = goods.id WHERE goods.flavor = 'chocolate' AND items.item IN (SELECT item FROM items GROUP BY item HAVING COUNT(item) <= 10)",
        "SELECT i.item FROM items i, goods g WHERE i.item = g.id AND g.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(*) <= 10",
        "SELECT i.item FROM (SELECT items.item, goods.flavor FROM items INNER JOIN goods ON items.item = goods.id) AS i WHERE i.flavor = 'chocolate' GROUP BY i.item HAVING COUNT(i.item) <= 10"
      ]
    ]
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "nlq": "What are the flavors available for Cake but not for Tart?",
    "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g1.flavor FROM goods g1 WHERE g1.food = 'Cake' AND g1.flavor NOT IN (SELECT g2.flavor FROM goods g2 WHERE g2.food = 'Tart')",
        "SELECT flavor FROM goods WHERE food = 'Cake' EXCEPT SELECT flavor FROM goods WHERE food = 'Tart'",
        "SELECT DISTINCT flavor FROM goods WHERE flavor IN (SELECT flavor FROM goods WHERE food = 'Cake') AND flavor NOT IN (SELECT flavor FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT CakeGoods.flavor FROM goods AS CakeGoods LEFT JOIN goods AS TartGoods ON CakeGoods.flavor = TartGoods.flavor AND TartGoods.food = 'Tart' WHERE CakeGoods.food = 'Cake' AND TartGoods.flavor IS NULL",
        "SELECT DISTINCT flavor FROM (SELECT flavor FROM goods WHERE food = 'Cake') EXCEPT SELECT flavor FROM (SELECT flavor FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT g1.flavor FROM goods g1 LEFT JOIN goods g2 ON g1.flavor = g2.flavor AND g2.food = 'Tart' WHERE g1.food = 'Cake' AND g2.id IS NULL",
        "SELECT cake.flavor FROM (SELECT DISTINCT flavor FROM goods WHERE food = 'Cake') cake WHERE NOT EXISTS (SELECT 1 FROM goods tart WHERE tart.food = 'Tart' AND tart.flavor = cake.flavor)",
        "WITH CakeFlavors AS (SELECT DISTINCT flavor FROM goods WHERE food = 'Cake'), TartFlavors AS (SELECT DISTINCT flavor FROM goods WHERE food = 'Tart') SELECT CakeFlavors.flavor FROM CakeFlavors LEFT JOIN TartFlavors ON CakeFlavors.flavor = TartFlavors.flavor WHERE TartFlavors.flavor IS NULL",
        "SELECT DISTINCT flavor FROM goods WHERE food = 'Cake' AND flavor NOT IN (SELECT DISTINCT flavor FROM goods WHERE food = 'Tart')",
        "WITH ExcludedFlavors AS (SELECT flavor FROM goods WHERE food = 'Tart') SELECT DISTINCT flavor FROM goods WHERE food = 'Cake' AND flavor NOT IN (SELECT flavor FROM ExcludedFlavors)"
      ]
    ]
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "nlq": "Give the flavors of Cakes that are not available for Tart.",
    "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g1.flavor FROM goods g1 WHERE g1.food = 'Cake' AND g1.flavor NOT IN (SELECT g2.flavor FROM goods g2 WHERE g2.food = 'Tart')",
        "SELECT g.flavor FROM goods g LEFT JOIN goods t ON g.flavor = t.flavor AND t.food = 'Tart' WHERE g.food = 'Cake' AND t.id IS NULL",
        "SELECT flavor FROM goods WHERE food = 'Cake' AND flavor NOT IN (SELECT flavor FROM goods WHERE food = 'Tart')",
        "SELECT g1.flavor FROM goods g1 WHERE g1.food = 'Cake' EXCEPT SELECT g2.flavor FROM goods g2 WHERE g2.food = 'Tart'",
        "SELECT DISTINCT flavor FROM goods g WHERE g.food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods t WHERE t.food = 'Tart' AND t.flavor = g.flavor)",
        "SELECT flavor FROM (SELECT flavor FROM goods WHERE food = 'Cake') AS c WHERE c.flavor NOT IN (SELECT flavor FROM goods WHERE food = 'Tart')",
        "SELECT flavor FROM (SELECT DISTINCT flavor FROM goods WHERE food = 'Cake') EXCEPT SELECT flavor FROM (SELECT DISTINCT flavor FROM goods WHERE food = 'Tart')",
        "SELECT DISTINCT g1.flavor FROM goods g1 LEFT OUTER JOIN goods g2 ON g1.flavor = g2.flavor AND g2.food = 'Tart' WHERE g1.food = 'Cake' AND g2.flavor IS NULL",
        "SELECT cake.flavor FROM goods cake WHERE cake.food = 'Cake' AND cake.flavor NOT IN (SELECT tart.flavor FROM goods tart WHERE tart.food = 'Tart')"
      ]
    ]
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "nlq": "What is the three most popular goods in this bakery?",
    "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT goods.id, COUNT(*) AS popularity FROM items JOIN goods ON items.item = goods.id GROUP BY goods.id ORDER BY popularity DESC LIMIT 3",
        "SELECT g.id, COUNT(*) AS pop FROM items i INNER JOIN goods g ON i.item = g.id GROUP BY g.id ORDER BY pop DESC LIMIT 3",
        "SELECT g.id FROM goods g INNER JOIN items i ON g.id = i.item GROUP BY g.id ORDER BY COUNT(i.item) DESC LIMIT 3",
        "SELECT id FROM goods WHERE id IN (SELECT item FROM items GROUP BY item ORDER BY COUNT(item) DESC LIMIT 3)",
        "SELECT goods.id, COUNT(items.item) AS total_sold FROM goods JOIN items ON goods.id = items.item GROUP BY goods.id ORDER BY total_sold DESC LIMIT 3",
        "SELECT goods.id FROM goods JOIN (SELECT item, COUNT(item) AS item_count FROM items GROUP BY item ORDER BY item_count DESC LIMIT 3) popular_items ON goods.id = popular_items.item",
        "SELECT i.item AS id, COUNT(*) AS sold_count FROM items i JOIN goods g ON i.item = g.id GROUP BY i.item ORDER BY sold_count DESC LIMIT 3",
        "SELECT goods.id FROM goods, items WHERE goods.id = items.item GROUP BY goods.id ORDER BY COUNT(items.item) DESC LIMIT 3",
        "WITH PopularGoods AS (SELECT item, COUNT(*) AS SalesCount FROM items GROUP BY item) SELECT g.id FROM goods g JOIN PopularGoods pg ON g.id = pg.item ORDER BY pg.SalesCount DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "nlq": "Give the three most purchased items at this bakery.",
    "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT goods.id FROM goods JOIN items ON goods.id = items.item GROUP BY goods.id ORDER BY COUNT(*) DESC LIMIT 3",
        "SELECT I.item FROM items I JOIN goods G ON I.item = G.id GROUP BY I.item ORDER BY COUNT(I.item) DESC LIMIT 3",
        "SELECT goods.id FROM items INNER JOIN goods ON items.item = goods.id GROUP BY goods.id ORDER BY COUNT(items.item) DESC LIMIT 3",
        "SELECT G.id FROM goods G LEFT JOIN items I ON G.id = I.item GROUP BY G.id ORDER BY COUNT(I.item) DESC LIMIT 3",
        "SELECT id FROM goods WHERE id IN (SELECT item FROM items GROUP BY item ORDER BY COUNT(item) DESC LIMIT 3)",
        "SELECT G.id FROM goods G, items I WHERE G.id = I.item GROUP BY G.id HAVING COUNT(*) > (SELECT COUNT(*) FROM items B GROUP BY B.item HAVING I.item = B.item) LIMIT 3",
        "SELECT goods.id FROM goods JOIN items ON goods.id = items.item GROUP BY goods.id ORDER BY COUNT(goods.id) DESC LIMIT 3",
        "SELECT item FROM items GROUP BY item ORDER BY COUNT(*) DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "nlq": "Find the ids of customers who have spent more than 150 dollars in total.",
    "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
    "infer_predictions": [
      [
        "SELECT DISTINCT cu.id FROM customers cu JOIN receipts re ON cu.id = re.customerid JOIN items it ON it.receipt = re.receiptnumber JOIN goods go ON it.item = go.id GROUP BY cu.id HAVING SUM(go.price) > 150",
        "SELECT cu.id FROM customers cu INNER JOIN receipts re ON cu.id = re.customerid INNER JOIN items it ON it.receipt = re.receiptnumber INNER JOIN goods go ON it.item = go.id GROUP BY cu.id HAVING SUM(go.price) > 150",
        "SELECT id FROM customers WHERE id IN (SELECT customerid FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items INNER JOIN goods ON items.item = goods.id GROUP BY receipt HAVING SUM(price) > 150))",
        "SELECT customer.id FROM customers customer WHERE (SELECT SUM(goods.price) FROM items JOIN goods ON items.item = goods.id JOIN receipts ON items.receipt = receipts.receiptnumber WHERE receipts.customerid = customer.id GROUP BY receipts.customerid) > 150",
        "SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.customerid HAVING SUM(g.price) > 150",
        "SELECT DISTINCT cu.id FROM customers cu, receipts re, items it, goods go WHERE cu.id = re.customerid AND re.receiptnumber = it.receipt AND it.item = go.id GROUP BY cu.id HAVING SUM(go.price) > 150",
        "SELECT cu.id FROM customers cu WHERE EXISTS (SELECT 1 FROM receipts re JOIN items it ON re.receiptnumber = it.receipt JOIN goods go ON it.item = go.id WHERE re.customerid = cu.id GROUP BY re.customerid HAVING SUM(go.price) > 150)",
        "SELECT cu.id FROM customers cu JOIN (SELECT re.customerid FROM receipts re JOIN items it ON re.receiptnumber = it.receipt JOIN goods go ON it.item = go.id GROUP BY re.customerid HAVING SUM(go.price) > 150) t ON t.customerid = cu.id",
        "SELECT cu.id FROM customers cu JOIN receipts re ON cu.id = re.customerid JOIN items it ON re.receiptnumber = it.receipt JOIN goods go ON it.item = go.id GROUP BY cu.id HAVING SUM(go.price) > 150",
        "SELECT customerid FROM (SELECT r.customerid, SUM(g.price) AS total_spent FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.customerid) WHERE total_spent > 150"
      ]
    ]
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "nlq": "What are the ids of customers who have spent over 150 dollars in total?",
    "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
    "infer_predictions": [
      [
        "SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING SUM(goods.price) > 150",
        "SELECT DISTINCT customers.id FROM customers, receipts, items, goods WHERE customers.id = receipts.customerid AND receipts.receiptnumber = items.receipt AND items.item = goods.id GROUP BY customers.id HAVING SUM(goods.price) > 150",
        "SELECT c.id FROM customers c INNER JOIN receipts r ON c.id = r.customerid INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id GROUP BY c.id HAVING SUM(g.price) > 150",
        "SELECT c.id FROM customers AS c, receipts AS r, items AS i, goods AS g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id GROUP BY c.id HAVING SUM(g.price) > 150",
        "SELECT DISTINCT c.id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE r.customerid = c.id GROUP BY r.customerid HAVING SUM(g.price) > 150)",
        "SELECT c.id FROM customers AS c JOIN receipts AS r ON c.id = r.customerid, items AS i JOIN goods AS g ON i.item = g.id WHERE i.receipt = r.receiptnumber GROUP BY c.id HAVING TOTAL(g.price) > 150",
        "SELECT id FROM (SELECT customers.id AS id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING SUM(goods.price) > 150)",
        "SELECT customers.id FROM customers WHERE customers.id IN (SELECT receipts.customerid FROM receipts INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id GROUP BY receipts.customerid HAVING SUM(goods.price) > 150)",
        "SELECT customers.id FROM customers INNER JOIN (SELECT receipts.customerid, SUM(goods.price) AS total_spent FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY receipts.customerid HAVING total_spent > 150) AS spending_summary ON customers.id = spending_summary.customerid",
        "SELECT DISTINCT id FROM (SELECT c.id AS id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id HAVING SUM(g.price) > 150)"
      ]
    ]
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "nlq": "Find the ids of customers whose average spending for each good is above 5.",
    "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
    "infer_predictions": [
      [
        "SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING AVG(goods.price) > 5",
        "SELECT customers.id FROM customers WHERE customers.id IN (SELECT receipts.customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY receipts.customerid HAVING AVG(goods.price) > 5)",
        "SELECT DISTINCT customers.id FROM customers, receipts, items, goods WHERE customers.id = receipts.customerid AND receipts.receiptnumber = items.receipt AND items.item = goods.id GROUP BY customers.id HAVING AVG(goods.price) > 5",
        "SELECT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id HAVING AVG(g.price) > 5",
        "SELECT DISTINCT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id GROUP BY c.id HAVING AVG(g.price) > 5",
        "SELECT c.id FROM customers c INNER JOIN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.customerid HAVING AVG(g.price) > 5) sub ON c.id = sub.customerid",
        "SELECT DISTINCT id FROM (SELECT customers.id, AVG(goods.price) as average_price FROM customers JOIN receipts ON customers.id = receipts.customerid JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY customers.id) WHERE average_price > 5",
        "SELECT customers.id FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING AVG(goods.price) > 5",
        "SELECT customer_id FROM (SELECT customerid AS customer_id FROM receipts INNER JOIN items ON receiptnumber = receipt JOIN goods ON item = id GROUP BY customerid HAVING AVG(price) > 5)"
      ]
    ]
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "nlq": "What are the ids of customers who spend more than 5 on average for each good?",
    "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
    "infer_predictions": [
      [
        "SELECT DISTINCT c.id FROM customers c JOIN receipts r ON c.id = r.customerid JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY c.id HAVING AVG(g.price) > 5",
        "SELECT c.id FROM customers c WHERE c.id IN (SELECT r.customerid FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.customerid HAVING AVG(g.price) > 5)",
        "SELECT DISTINCT customers.id FROM customers INNER JOIN receipts ON customers.id = receipts.customerid INNER JOIN items ON receipts.receiptnumber = items.receipt INNER JOIN goods ON items.item = goods.id GROUP BY customers.id HAVING AVG(goods.price) > 5",
        "SELECT c.id FROM customers c WHERE EXISTS (SELECT 1 FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id WHERE r.customerid = c.id GROUP BY r.customerid HAVING AVG(g.price) > 5)",
        "SELECT DISTINCT Customer.id FROM customers AS Customer JOIN receipts AS Receipt ON Customer.id = Receipt.customerid JOIN items AS Item ON Receipt.receiptnumber = Item.receipt JOIN goods AS Product ON Item.item = Product.id GROUP BY Customer.id HAVING AVG(Product.price) > 5",
        "SELECT c.id FROM customers AS c JOIN (SELECT r.customerid FROM receipts AS r INNER JOIN items AS i ON r.receiptnumber = i.receipt INNER JOIN goods AS g ON i.item = g.id GROUP BY r.customerid HAVING AVG(g.price) > 5) AS AvgCost ON c.id = AvgCost.customerid",
        "SELECT DISTINCT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id GROUP BY c.id HAVING AVG(g.price) > 5",
        "SELECT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id GROUP BY c.id HAVING AVG(g.price) > 5",
        "SELECT c.id FROM customers c, receipts r, items i, goods g WHERE c.id = r.customerid AND r.receiptnumber = i.receipt AND i.item = g.id GROUP BY c.id, c.firstname, c.lastname HAVING AVG(g.price) > 5"
      ]
    ]
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "nlq": "On which day did the bakery sell more than 100 dollars in total.",
    "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
    "infer_predictions": [
      [
        "SELECT r.date FROM receipts r JOIN items i ON r.receiptnumber = i.receipt JOIN goods g ON i.item = g.id GROUP BY r.date HAVING SUM(g.price) > 100;",
        "SELECT DISTINCT r.date FROM receipts AS r, items AS i, goods AS g WHERE r.receiptnumber = i.receipt AND i.item = g.id GROUP BY r.date HAVING SUM(g.price) > 100;",
        "SELECT r.date FROM receipts r INNER JOIN items i ON r.receiptnumber = i.receipt INNER JOIN goods g ON i.item = g.id GROUP BY r.date HAVING SUM(g.price) > 100;",
        "SELECT r.date FROM receipts r WHERE EXISTS (SELECT NULL FROM items i JOIN goods g ON i.item = g.id WHERE i.receipt = r.receiptnumber GROUP BY i.receipt HAVING SUM(g.price) > 100);",
        "SELECT r.date FROM receipts r, items i, goods g WHERE r.receiptnumber = i.receipt AND i.item = g.id GROUP BY r.date HAVING TOTAL(g.price) > 100;",
        "SELECT r.date FROM (SELECT date, SUM(price) AS daily_total FROM receipts JOIN items ON receiptnumber = receipt JOIN goods ON item = id GROUP BY date) r WHERE r.daily_total > 100;",
        "SELECT r.date FROM receipts AS r JOIN items AS i ON r.receiptnumber = i.receipt JOIN goods AS g ON i.item = g.id GROUP BY r.date HAVING SUM(g.price) > 100;",
        "SELECT r.date FROM receipts r WHERE r.receiptnumber IN (SELECT i.receipt FROM items i JOIN goods g ON i.item = g.id GROUP BY i.receipt HAVING SUM(g.price) > 100);",
        "SELECT r.date FROM receipts AS r LEFT JOIN items AS i ON r.receiptnumber = i.receipt LEFT JOIN goods AS g ON i.item = g.id GROUP BY r.date HAVING SUM(g.price) > 100;"
      ]
    ]
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "nlq": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
    "infer_predictions": [
      [
        "SELECT R.date FROM receipts R JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id GROUP BY R.date HAVING SUM(G.price) > 100",
        "SELECT date FROM receipts WHERE receiptnumber IN (SELECT receipt FROM items WHERE item IN (SELECT id FROM goods GROUP BY id HAVING SUM(price) > 100))",
        "SELECT DISTINCT R.date FROM receipts R, items I, goods G WHERE R.receiptnumber = I.receipt AND I.item = G.id GROUP BY R.date HAVING SUM(G.price) > 100",
        "SELECT R.date FROM receipts AS R INNER JOIN items AS I ON R.receiptnumber = I.receipt INNER JOIN goods AS G ON I.item = G.id GROUP BY R.date HAVING TOTAL(G.price) > 100",
        "SELECT date FROM (SELECT R.date, SUM(G.price) AS total_sales FROM receipts R JOIN items I ON R.receiptnumber = I.receipt JOIN goods G ON I.item = G.id GROUP BY R.date) WHERE total_sales > 100",
        "SELECT date FROM receipts WHERE receiptnumber IN (SELECT I.receipt FROM items I JOIN goods G ON I.item = G.id GROUP BY I.receipt HAVING SUM(G.price) > 100)",
        "SELECT R.date FROM receipts R WHERE EXISTS (SELECT NULL FROM items I JOIN goods G ON I.item = G.id WHERE I.receipt = R.receiptnumber GROUP BY I.receipt HAVING SUM(G.price) > 100)",
        "SELECT DISTINCT date FROM (SELECT R.date, SUM(G.price) AS daily_total FROM receipts R LEFT JOIN items I ON R.receiptnumber = I.receipt LEFT JOIN goods G ON I.item = G.id GROUP BY R.date) WHERE daily_total > 100",
        "SELECT R.date FROM receipts R WHERE R.receiptnumber IN (SELECT I.receipt FROM items I, goods G WHERE I.item = G.id GROUP BY I.receipt HAVING SUM(G.price) > 100)",
        "SELECT date FROM receipts GROUP BY date HAVING SUM((SELECT price FROM goods WHERE id IN (SELECT item FROM items WHERE receipt = receiptnumber))) > 100"
      ]
    ]
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "nlq": "How many drivers are there?",
    "gold": "SELECT count(*) FROM driver",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM driver",
        "SELECT COUNT(driver_id) FROM driver",
        "SELECT COUNT(1) FROM driver",
        "SELECT COUNT(driver_id) FROM (SELECT driver_id FROM driver) AS driver_count",
        "SELECT SUM(1) FROM driver",
        "SELECT COUNT(*) FROM (SELECT * FROM driver) AS new_table",
        "SELECT COUNT(*) FROM driver WHERE driver_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "nlq": "Find the total number of drivers.",
    "gold": "SELECT count(*) FROM driver",
    "infer_predictions": [
      [
        "SELECT COUNT(driver_id) FROM driver",
        "SELECT COUNT(*) FROM driver",
        "SELECT COUNT(1) FROM driver",
        "SELECT SUM(1) FROM driver",
        "SELECT COUNT(driver.driver_id) AS total_drivers FROM driver",
        "SELECT COUNT(*) AS NumberOfDrivers FROM driver",
        "SELECT COUNT(driver_id) AS TotalDrivers FROM driver"
      ]
    ]
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "nlq": "Find the number of drivers whose points are greater than 150 for each make.",
    "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
    "infer_predictions": [
      [
        "SELECT make, COUNT(driver_id) FROM driver WHERE points > 150 GROUP BY make",
        "SELECT d.make, COUNT(d.driver_id) AS NumberOfDrivers FROM driver AS d WHERE d.points > 150 GROUP BY d.make",
        "SELECT make, COUNT(*) FROM driver WHERE points > 150 GROUP BY make",
        "SELECT d.make, COUNT(d.driver_id) FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT d.make, COUNT(*) FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT make, COUNT(driver_id) AS CountOfDrivers FROM driver WHERE points > 150 GROUP BY make",
        "SELECT d.make, COUNT(driver_id) FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT make, COUNT(driver_id) FROM driver GROUP BY make HAVING points > 150"
      ]
    ]
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "nlq": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
    "infer_predictions": [
      [
        "SELECT make, COUNT(*) FROM driver WHERE points > 150 GROUP BY make",
        "SELECT d.make, COUNT(d.driver_id) FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT d.make AS Make, COUNT(*) AS DriverCount FROM driver d WHERE d.points > 150 GROUP BY Make",
        "SELECT make, COUNT(driver_id) FROM driver WHERE points > 150 GROUP BY make",
        "SELECT COUNT(driver_id) as NumDrivers, make FROM driver WHERE points > 150 GROUP BY make",
        "SELECT d.make, COUNT(d.make) FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT d.make, COUNT(d.driver) AS Total FROM driver d WHERE d.points > 150 GROUP BY d.make",
        "SELECT make, COUNT(*) as DriversCount FROM driver WHERE points > 150 GROUP BY make",
        "SELECT make, COUNT(driver) as HighScorers FROM driver WHERE points > 150 GROUP BY make",
        "SELECT make, COUNT(*) FROM driver GROUP BY make HAVING points > 150"
      ]
    ]
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "nlq": "Find the average age of drivers for each make.",
    "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
    "infer_predictions": [
      [
        "SELECT make, AVG(age) AS average_age FROM driver GROUP BY make",
        "SELECT d.make, AVG(d.age) AS avg_age FROM driver AS d GROUP BY d.make",
        "SELECT make, AVG(age) FROM driver GROUP BY make",
        "SELECT d.make, AVG(d.age) FROM driver d GROUP BY d.make",
        "SELECT driver.make, AVG(driver.age) AS avg_driver_age FROM driver GROUP BY driver.make",
        "SELECT d.make, average_age FROM (SELECT make, AVG(age) AS average_age FROM driver GROUP BY make) d",
        "SELECT d.make, avg(d.age) as AvgAge FROM driver d GROUP BY d.make",
        "SELECT make, avg_age FROM (SELECT make, AVG(age) as avg_age FROM driver GROUP BY make)"
      ]
    ]
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "nlq": "What is the average age of drivers for each make? Return the average age and make.",
    "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
    "infer_predictions": [
      [
        "SELECT make, AVG(age) AS average_age FROM driver GROUP BY make",
        "SELECT d.make, AVG(d.age) AS avg_age FROM driver AS d GROUP BY d.make",
        "SELECT AVG(age) average_age, make FROM driver GROUP BY make",
        "SELECT make, AVG(age) FROM driver GROUP BY make",
        "SELECT maker.make, AVG(maker.age) AS average_age FROM (SELECT make, age FROM driver) AS maker GROUP BY maker.make",
        "SELECT driver.make, AVG(driver.age) AS avg_age FROM driver GROUP BY driver.make",
        "SELECT make, AVG(age) AS average_age FROM (SELECT make, age FROM driver) GROUP BY make",
        "SELECT A.make, AVG(A.age) AS avg_age FROM driver A GROUP BY A.make",
        "SELECT B.make, AVG(B.age) FROM (SELECT age, make FROM driver) AS B GROUP BY B.make",
        "SELECT AVG(Age) AS Avg_Age, Make FROM driver GROUP BY Make"
      ]
    ]
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "nlq": "What are the average laps of all the drivers who are younger than 20?",
    "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
    "infer_predictions": [
      [
        "SELECT AVG(laps) FROM driver WHERE age < 20",
        "SELECT AVG(d.laps) FROM driver d WHERE d.age < 20",
        "SELECT AVG(laps) AS AvgLaps FROM driver WHERE age < 20",
        "SELECT AVG(dr.laps) FROM driver dr WHERE dr.age < 20",
        "SELECT AVG(laps) FROM driver GROUP BY age HAVING age < 20",
        "SELECT AVG(laps) AS AverageLaps FROM driver WHERE driver.age < 20",
        "SELECT AVG(laps) FROM driver WHERE age < 20 GROUP BY age HAVING age < 20"
      ]
    ]
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "nlq": "Compute the average laps of drivers under the age of 20.",
    "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
    "infer_predictions": [
      [
        "SELECT AVG(d.laps) FROM driver d WHERE d.age < 20",
        "SELECT AVG(laps) AS AverageLaps FROM driver WHERE age < 20",
        "SELECT AVG(driver.laps) FROM driver WHERE driver.age < 20 GROUP BY driver.driver_id",
        "SELECT AVG(d.laps) AS avg_laps FROM driver AS d WHERE d.age < 20",
        "SELECT AVG(laps) FROM driver WHERE age < 20 AND driver_id IN (SELECT driver_id FROM driver)",
        "SELECT AVG(laps) FROM (SELECT laps FROM driver WHERE age < 20) subquery",
        "SELECT AVG(d.laps) AVG_LAPS FROM driver d WHERE d.age < 20 AND laps <> 0",
        "SELECT AVG(l.age) FROM driver AS l WHERE l.age BETWEEN 0 AND 19",
        "SELECT AVG(d.laps) FROM driver as d GROUP BY d.driver_id HAVING d.age < 20",
        "SELECT AVG(sub_driver.laps) FROM (SELECT laps FROM driver WHERE age < 20) AS sub_driver"
      ]
    ]
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "nlq": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
    "infer_predictions": [
      [
        "SELECT manager, sponsor FROM team ORDER BY car_owner",
        "SELECT t.manager, t.sponsor FROM team t ORDER BY t.car_owner",
        "SELECT manager AS team_manager, sponsor AS team_sponsor FROM team ORDER BY car_owner ASC",
        "SELECT DISTINCT t.manager, t.sponsor FROM team t ORDER BY t.car_owner ASC",
        "SELECT t.manager AS Manager, t.sponsor AS Sponsor FROM team AS t ORDER BY t.car_owner ASC",
        "SELECT t.manager AS 'Team Manager', t.sponsor AS 'Team Sponsor' FROM team AS t ORDER BY t.car_owner ASC",
        "SELECT * FROM (SELECT manager, sponsor, car_owner FROM team) ORDER BY car_owner",
        "SELECT manager, sponsor FROM team GROUP BY car_owner, manager, sponsor ORDER BY car_owner"
      ]
    ]
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "nlq": "Find the manager and sponsor for each team and order them by the car owner.",
    "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
    "infer_predictions": [
      [
        "SELECT manager, sponsor FROM team ORDER BY car_owner",
        "SELECT t.manager, t.sponsor FROM team t ORDER BY t.car_owner",
        "SELECT t.manager AS Manager, t.sponsor AS Sponsor FROM team AS t ORDER BY t.car_owner ASC",
        "SELECT manager AS Manager, sponsor AS Sponsor FROM team ORDER BY car_owner ASC",
        "SELECT DISTINCT t.manager, t.sponsor FROM team t ORDER BY t.car_owner",
        "SELECT DISTINCT t.manager AS Manager, t.sponsor AS Sponsor FROM team AS t ORDER BY t.car_owner ASC",
        "SELECT DISTINCT manager AS Manager, sponsor AS Sponsor FROM team ORDER BY car_owner ASC",
        "SELECT manager, sponsor FROM team GROUP BY team_id, manager, sponsor ORDER BY car_owner",
        "SELECT t.manager, t.sponsor FROM team t GROUP BY t.team_id, t.manager, t.sponsor ORDER BY t.car_owner"
      ]
    ]
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "nlq": "Find the make that has more than one team.",
    "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1",
        "SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1",
        "SELECT DISTINCT t1.make FROM team t1 JOIN team t2 ON t1.make = t2.make AND t1.team_id != t2.team_id",
        "SELECT t.make FROM team t WHERE t.make IN (SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1)",
        "SELECT make FROM (SELECT make, COUNT(team_id) AS team_count FROM team GROUP BY make) WHERE team_count > 1",
        "SELECT t.make FROM team t INNER JOIN (SELECT make, COUNT(*) as cnt FROM team GROUP BY make HAVING cnt > 1) as sub ON t.make = sub.make GROUP BY t.make",
        "SELECT DISTINCT make FROM team WHERE make IN (SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1)",
        "SELECT t.make FROM team t JOIN (SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1) as sub ON t.make = sub.make GROUP BY t.make",
        "SELECT make FROM team t GROUP BY make HAVING COUNT(DISTINCT team_id) > 1",
        "SELECT t.make FROM (SELECT make FROM team GROUP BY make HAVING COUNT(DISTINCT team_id) > 1) t"
      ]
    ]
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "nlq": "Which make has more than one team?",
    "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1",
        "SELECT T.make FROM team T GROUP BY T.make HAVING COUNT(*) > 1",
        "SELECT make FROM team WHERE make IN (SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1)",
        "SELECT distinct T.make FROM team T WHERE (SELECT COUNT(*) FROM team WHERE make = T.make) > 1",
        "SELECT T.make FROM (SELECT make FROM team GROUP BY make) T JOIN team TM ON T.make = TM.make GROUP BY T.make HAVING COUNT(DISTINCT TM.team_id) > 1",
        "SELECT DISTINCT T.make FROM team T JOIN (SELECT make, COUNT(team_id) AS NumTeams FROM team GROUP BY make) TT ON T.make = TT.make WHERE TT.NumTeams > 1",
        "SELECT make FROM (SELECT make, COUNT(*) AS total FROM team GROUP BY make) WHERE total > 1",
        "SELECT make as TeamMake FROM (SELECT make, COUNT(team_id) as c FROM team GROUP BY make) WHERE c > 1",
        "SELECT T1.make FROM team T1 WHERE (SELECT COUNT(T2.team_id) FROM team T2 WHERE T2.make = T1.make) > 1"
      ]
    ]
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "nlq": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT team.make FROM team WHERE team.car_owner = 'Buddy Arrington'",
        "SELECT make FROM team GROUP BY make HAVING car_owner = 'Buddy Arrington'",
        "SELECT team.make FROM team WHERE car_owner = 'Buddy Arrington' AND make IS NOT NULL",
        "SELECT DISTINCT t.make FROM team t WHERE t.car_owner = 'Buddy Arrington'",
        "SELECT DISTINCT t1.make FROM team t1 WHERE t1.car_owner = 'Buddy Arrington'",
        "SELECT * FROM (SELECT DISTINCT make FROM team WHERE car_owner = 'Buddy Arrington')",
        "SELECT t.make FROM team t WHERE EXISTS (SELECT 1 FROM team t2 WHERE t2.car_owner = 'Buddy Arrington' AND t2.team_id = t.team_id)"
      ]
    ]
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "nlq": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
    "infer_predictions": [
      [
        "SELECT make FROM team WHERE car_owner = 'Buddy Arrington'",
        "SELECT t1.make FROM team t1 WHERE t1.car_owner = 'Buddy Arrington' LIMIT 1",
        "SELECT make FROM team WHERE car_owner = 'Buddy Arrington' AND team_id IN (SELECT team_id FROM team)",
        "SELECT t.make FROM team t WHERE t.car_owner LIKE 'Buddy Arrington'",
        "SELECT CASE WHEN car_owner = 'Buddy Arrington' THEN make ELSE NULL END FROM team WHERE car_owner = 'Buddy Arrington'",
        "SELECT t.make FROM (SELECT make, car_owner FROM team) t WHERE t.car_owner = 'Buddy Arrington'"
      ]
    ]
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "nlq": "What are the maximum and minimum points of drivers.",
    "gold": "SELECT max(Points) ,  min(Points) FROM driver",
    "infer_predictions": [
      [
        "SELECT MAX(points) AS MaximumPoints, MIN(points) AS MinimumPoints FROM driver",
        "SELECT MAX(d.points) AS MaxPoints, MIN(d.points) AS MinPoints FROM driver d",
        "SELECT (SELECT MAX(points) FROM driver) AS MaxPoints, (SELECT MIN(points) FROM driver) AS MinPoints",
        "WITH Stats AS (SELECT MAX(points) as MaxPoints, MIN(points) as MinPoints FROM driver) SELECT MaxPoints, MinPoints FROM Stats",
        "SELECT MAX(points) AS Maximum_Points, MIN(points) AS Minimum_Points FROM driver GROUP BY driver_id",
        "SELECT * FROM (SELECT MAX(points) as max_points, MIN(points) as min_points FROM driver) temp"
      ]
    ]
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "nlq": "Find the highest and lowest points of drivers.",
    "gold": "SELECT max(Points) ,  min(Points) FROM driver",
    "infer_predictions": [
      [
        "SELECT MAX(points) AS HighestPoints, MIN(points) AS LowestPoints FROM driver",
        "SELECT MAX(d.points) AS HighestPoints, MIN(d.points) AS LowestPoints FROM driver d",
        "SELECT (SELECT MAX(points) FROM driver) AS HighestPoints, (SELECT MIN(points) FROM driver) AS LowestPoints",
        "SELECT (SELECT MAX(driver.points) FROM driver) AS Highest, (SELECT MIN(driver.points) FROM driver) AS Lowest",
        "SELECT (SELECT MAX(d.points) FROM driver d) AS MaxPoints, (SELECT MIN(d.points) FROM driver d) AS MinPoints",
        "SELECT MAX(p.points) AS Max_Points, MIN(p.points) AS Min_Points FROM (SELECT points FROM driver) p",
        "SELECT MAX(drv.points) AS Highest_Points, MIN(drv.points) AS Lowest_Points FROM driver drv",
        "SELECT MAX(d.points), MIN(d.points) FROM driver d",
        "SELECT MAX(points) AS Highest, MIN(points) AS Lowest FROM driver GROUP BY 'all'"
      ]
    ]
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "nlq": "How many drivers have points smaller than 150?",
    "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM driver WHERE points < 150",
        "SELECT COUNT(driver_id) FROM driver WHERE points < 150",
        "SELECT COUNT(1) FROM driver WHERE driver.points < 150",
        "SELECT COUNT(*) FROM (SELECT driver_id FROM driver WHERE points < 150)",
        "SELECT COUNT(*) FROM driver d WHERE d.points < 150",
        "SELECT COUNT(DISTINCT d.driver_id) FROM driver d WHERE d.points < 150",
        "SELECT COUNT(driver_id) FROM (SELECT driver_id FROM driver WHERE points < 150) AS drv",
        "SELECT COUNT(driver.driver_id) AS numberOfDrivers FROM driver WHERE points < 150"
      ]
    ]
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "nlq": "Count the number of drivers whose points are below 150.",
    "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM driver WHERE points < 150",
        "SELECT COUNT(driver_id) FROM driver WHERE points < 150",
        "SELECT COUNT(1) FROM driver WHERE points < 150",
        "SELECT COUNT(*) FROM driver d WHERE d.points < 150",
        "SELECT COUNT(driver_id) FROM driver d WHERE d.points < 150",
        "SELECT COUNT(d.driver_id) FROM driver d WHERE d.points < 150",
        "SELECT COUNT(*) FROM (SELECT driver_id FROM driver WHERE points < 150)",
        "SELECT COUNT(*) FROM driver WHERE points < (SELECT 150)"
      ]
    ]
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "nlq": "List all the driver names in ascending order of age.",
    "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
    "infer_predictions": [
      [
        "SELECT driver FROM driver ORDER BY age ASC",
        "SELECT d.driver FROM driver d ORDER BY d.age ASC",
        "SELECT driver FROM driver d ORDER BY d.age",
        "SELECT d.driver FROM driver d ORDER BY age ASC",
        "SELECT driver FROM driver d ORDER BY d.age ASC",
        "SELECT driver AS DriverName FROM driver ORDER BY age ASC",
        "SELECT driver.driver AS DriverName FROM driver driver ORDER BY driver.age ASC"
      ]
    ]
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "nlq": "Sort the driver names by age in ascending order.",
    "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
    "infer_predictions": [
      [
        "SELECT driver FROM driver ORDER BY age ASC;",
        "SELECT D.driver FROM driver D ORDER BY D.age ASC;",
        "SELECT driver FROM driver WHERE age IS NOT NULL ORDER BY age;",
        "SELECT driver FROM driver WHERE age > 0 ORDER BY age;",
        "SELECT D.driver FROM driver D WHERE D.age >= 0 ORDER BY D.age ASC;",
        "SELECT d.driver FROM driver d WHERE EXISTS (SELECT 1) ORDER BY d.age ASC;",
        "SELECT driver FROM driver WHERE age IN (SELECT age FROM driver) ORDER BY age;",
        "SELECT drv.driver FROM driver drv ORDER BY drv.age ASC"
      ]
    ]
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "nlq": "List all the driver names in descending order of points.",
    "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
    "infer_predictions": [
      [
        "SELECT driver FROM driver ORDER BY points DESC",
        "SELECT d.driver FROM driver d ORDER BY d.points DESC",
        "SELECT driver FROM driver d ORDER BY d.points DESC",
        "SELECT d.driver FROM (SELECT * FROM driver) AS d ORDER BY d.points DESC",
        "SELECT driver FROM (SELECT driver, points FROM driver ORDER BY points DESC) AS sorted_drivers",
        "SELECT driver FROM (SELECT driver, points FROM driver) ORDER BY points DESC"
      ]
    ]
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "nlq": "What is the list of drivers ordered by points in descending order?",
    "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
    "infer_predictions": [
      [
        "SELECT driver FROM driver ORDER BY points DESC",
        "SELECT D.driver FROM driver D ORDER BY D.points DESC",
        "SELECT driver FROM driver ORDER BY driver.points DESC, driver.driver_id ASC",
        "SELECT driver.driver FROM driver AS driver ORDER BY driver.points DESC, driver.driver_id ASC",
        "SELECT D.driver FROM driver D ORDER BY points DESC, driver_id ASC",
        "SELECT driver FROM driver ORDER BY points DESC LIMIT 9999",
        "SELECT driver FROM driver ORDER BY points DESC, driver_id ASC LIMIT 9999"
      ]
    ]
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "nlq": "Please show the names of drivers, and countries they are from.",
    "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
    "infer_predictions": [
      [
        "SELECT driver.driver, driver.country FROM driver",
        "SELECT d.driver, d.country FROM driver d",
        "SELECT driver.driver AS DriverName, driver.country AS DriverCountry FROM driver",
        "SELECT DISTINCT d.driver, d.country FROM driver d",
        "SELECT driver FROM driver JOIN country ON driver.country = country.country",
        "SELECT d.driver FROM driver d JOIN country c ON d.country = c.country",
        "SELECT d.driver, c.country FROM driver d, country c WHERE d.country = c.country",
        "SELECT DISTINCT driver.driver FROM driver INNER JOIN country ON driver.country = country.country",
        "SELECT d.driver, c.country FROM driver d INNER JOIN country c ON d.country = c.country",
        "SELECT d.driver AS DriverName, c.country AS CountryName FROM driver d JOIN country c ON d.country = c.country"
      ]
    ]
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "nlq": "For each driver, return his or her name and country.",
    "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
    "infer_predictions": [
      [
        "SELECT driver.driver, driver.country FROM driver",
        "SELECT D.driver, D.country FROM driver D",
        "SELECT driver FROM driver, country WHERE driver.country = country.country",
        "SELECT DISTINCT D.driver, D.country FROM driver D",
        "SELECT name.driver, name.country FROM driver name",
        "SELECT T1.driver, T1.country FROM driver T1",
        "SELECT X.driver, X.country FROM driver X",
        "SELECT d1.driver, d1.country FROM driver d1"
      ]
    ]
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "nlq": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "infer_predictions": [
      [
        "SELECT MAX(driver.points) FROM driver JOIN country ON driver.country = country.country WHERE country.capital = 'Dublin'",
        "SELECT MAX(d.points) FROM driver AS d INNER JOIN country AS c ON d.country = c.country WHERE c.capital = 'Dublin'",
        "SELECT MAX(points) FROM driver, country WHERE driver.country = country.country AND country.capital = 'Dublin'",
        "SELECT MAX(p.points) FROM (SELECT points FROM driver WHERE country IN (SELECT country FROM country WHERE capital = 'Dublin')) AS p",
        "SELECT MAX(driver.points) AS max_points FROM driver INNER JOIN country ON driver.country = country.country WHERE country.capital = 'Dublin'",
        "SELECT MAX(points) FROM (SELECT driver.points FROM driver JOIN country ON driver.country = country.country WHERE country.capital = 'Dublin')",
        "SELECT MAX(points) FROM driver WHERE country = (SELECT country FROM country WHERE capital = 'Dublin')",
        "SELECT MAX(points) FROM driver d WHERE EXISTS (SELECT 1 FROM country c WHERE c.capital = 'Dublin' AND d.country = c.country)",
        "SELECT MAX(driver.points) FROM driver, country WHERE driver.country = country.country AND country.capital = 'Dublin'",
        "SELECT MAX(d.points) FROM driver d JOIN country c ON d.country = c.country WHERE c.capital = 'Dublin'"
      ]
    ]
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "nlq": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "infer_predictions": [
      [
        "SELECT MAX(d.points) FROM driver d JOIN country c ON d.country = c.country WHERE c.capital = 'Dublin'",
        "SELECT MAX(points) FROM driver WHERE country IN (SELECT country FROM country WHERE capital = 'Dublin')",
        "SELECT MAX(pts) FROM (SELECT points AS pts FROM driver WHERE country IN (SELECT country FROM country WHERE capital = 'Dublin'))",
        "SELECT MAX(points) FROM driver d JOIN country c ON d.country = c.country AND c.capital = 'Dublin'",
        "SELECT MAX(d.points) FROM driver d, country c WHERE d.country = c.country AND c.capital = 'Dublin'",
        "SELECT MAX(driver.points) FROM driver, country WHERE driver.country = country.country AND country.capital = 'Dublin'",
        "SELECT MAX(points) FROM driver WHERE country = (SELECT country FROM country WHERE capital = 'Dublin' LIMIT 1)",
        "SELECT MAX(points) FROM driver d WHERE EXISTS (SELECT 1 FROM country c WHERE c.country = d.country AND c.capital = 'Dublin')",
        "SELECT MAX(points) AS max_points FROM driver JOIN country ON driver.country = country.country WHERE country.capital = 'Dublin'",
        "SELECT MAX(d.points) FROM driver AS d INNER JOIN country AS c ON d.country = c.country WHERE c.capital = 'Dublin'"
      ]
    ]
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "nlq": "What is the average age of drivers from countries with official native language \"English\"",
    "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
    "infer_predictions": [
      [
        "SELECT AVG(D.age) FROM driver D JOIN country C ON D.country = C.country WHERE C.official_native_language = 'English'",
        "SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM country WHERE official_native_language = 'English')",
        "SELECT AVG(D.age) FROM driver AS D INNER JOIN country AS C ON D.country = C.country AND C.official_native_language = 'English'",
        "SELECT AVG(driver.age) FROM driver INNER JOIN country ON driver.country = country.country WHERE country.official_native_language = 'English'",
        "SELECT AVG(D.age) FROM driver D, country C WHERE D.country = C.country AND C.official_native_language = 'English'",
        "SELECT AVG(driver.age) AS AverageAge FROM driver, country WHERE driver.country = country.country AND country.official_native_language = 'English'",
        "SELECT AVG(A.age) FROM (SELECT driver.age FROM driver JOIN country ON driver.country = country.country WHERE country.official_native_language = 'English') A",
        "SELECT AVG(age) AS AvgAge FROM driver WHERE EXISTS (SELECT 1 FROM country WHERE country = driver.country AND official_native_language = 'English')",
        "SELECT AVG(D.age) FROM driver D WHERE EXISTS (SELECT 1 FROM country C WHERE C.country = D.country AND C.official_native_language = 'English')"
      ]
    ]
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "nlq": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
    "infer_predictions": [
      [
        "SELECT AVG(d.age) FROM driver d JOIN country c ON d.country = c.country WHERE c.official_native_language = 'English'",
        "SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM country WHERE official_native_language = 'English')",
        "SELECT AVG(driver.age) AS average_age FROM driver INNER JOIN country ON driver.country = country.country WHERE country.official_native_language = 'English'",
        "SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM country WHERE official_native_language = 'English') GROUP BY country",
        "SELECT AVG(d.age) FROM driver d, country c WHERE d.country = c.country AND c.official_native_language = 'English'",
        "SELECT AVG(d.age) AS AverageAge FROM driver d INNER JOIN country c ON d.country = c.country AND c.official_native_language = 'English'",
        "WITH EnglishSpeakingCountries AS (SELECT country FROM country WHERE official_native_language = 'English') SELECT AVG(age) FROM driver WHERE country IN (SELECT country FROM EnglishSpeakingCountries)",
        "SELECT AVG(D.age) FROM driver D JOIN country C ON D.country = C.country WHERE C.official_native_language = 'English'",
        "SELECT AVG(DRIVER.age) FROM DRIVER INNER JOIN COUNTRY ON DRIVER.country = COUNTRY.country WHERE COUNTRY.official_native_language = 'English'"
      ]
    ]
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "nlq": "What are the countries that have drivers with points larger than 150?",
    "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
    "infer_predictions": [
      [
        "SELECT DISTINCT country FROM driver WHERE points > 150",
        "SELECT country FROM driver WHERE points > 150 GROUP BY country",
        "SELECT country FROM driver GROUP BY country HAVING MAX(points) > 150",
        "SELECT d.country FROM (SELECT country, points FROM driver) AS d WHERE d.points > 150",
        "SELECT DISTINCT country FROM driver WHERE points > 150 ORDER BY country",
        "SELECT d1.country FROM driver AS d1 WHERE EXISTS (SELECT 1 FROM driver AS d2 WHERE d1.country = d2.country AND d2.points > 150)",
        "SELECT country FROM (SELECT DISTINCT country, points FROM driver WHERE points > 150) AS sub",
        "SELECT DISTINCT d.country FROM driver d WHERE d.points > 150"
      ]
    ]
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "nlq": "Find all the countries where some drivers have points above 150.",
    "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
    "infer_predictions": [
      [
        "SELECT DISTINCT country.country FROM country JOIN driver ON country.country = driver.country WHERE driver.points > 150;",
        "SELECT country.country FROM country WHERE country_id IN (SELECT country_id FROM country JOIN driver ON country.country = driver.country WHERE driver.points > 150);",
        "SELECT country FROM country WHERE EXISTS (SELECT 1 FROM driver WHERE driver.country = country.country AND driver.points > 150);",
        "SELECT c.country FROM country c INNER JOIN driver d ON c.country = d.country WHERE d.points > 150 GROUP BY c.country;",
        "SELECT DISTINCT c.country FROM country c, driver d WHERE c.country = d.country AND d.points > 150;",
        "SELECT c.country FROM country c WHERE c.country IN (SELECT d.country FROM driver d WHERE d.points > 150);",
        "SELECT DISTINCT c.country FROM country c JOIN driver d ON c.country = d.country AND d.points > 150;",
        "SELECT c.country FROM country c WHERE EXISTS (SELECT * FROM driver d WHERE d.country = c.country AND d.points > 150);",
        "SELECT country.country FROM country INNER JOIN (SELECT DISTINCT country FROM driver WHERE points > 150) AS high_scorers ON country.country = high_scorers.country;"
      ]
    ]
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "nlq": "What is the capital of the country where the driver with the most points is from?",
    "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT capital FROM country WHERE country = (SELECT country FROM driver ORDER BY points DESC LIMIT 1)",
        "SELECT c.capital FROM country c JOIN driver d ON c.country = d.country ORDER BY d.points DESC LIMIT 1",
        "SELECT capital FROM country WHERE country IN (SELECT country FROM driver WHERE points = (SELECT MAX(points) FROM driver))",
        "SELECT capital FROM country WHERE country = (SELECT country FROM (SELECT country, MAX(points) AS max_points FROM driver GROUP BY country) ORDER BY max_points DESC LIMIT 1)",
        "SELECT c.capital FROM country c INNER JOIN (SELECT country FROM driver ORDER BY points DESC LIMIT 1) d ON c.country = d.country",
        "SELECT capital FROM country WHERE country IN (SELECT d.country FROM driver d WHERE d.points = (SELECT MAX(points) from driver d2 WHERE d2.country = d.country)) LIMIT 1",
        "SELECT c.capital FROM country c WHERE EXISTS (SELECT 1 FROM driver d WHERE d.country = c.country AND d.points = (SELECT MAX(points) FROM driver))",
        "SELECT c.capital FROM (SELECT country, capital FROM country) c JOIN (SELECT country, MAX(points) FROM driver GROUP BY country ORDER BY MAX(points) DESC LIMIT 1) d ON c.country = d.country",
        "SELECT capital FROM country, (SELECT country FROM driver ORDER BY points DESC LIMIT 1) AS max_scored_driver WHERE country.country = max_scored_driver.country"
      ]
    ]
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "nlq": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT capital FROM country WHERE country = (SELECT country FROM driver WHERE driver_id = (SELECT driver_id FROM driver ORDER BY points DESC LIMIT 1))",
        "SELECT c.capital FROM country c JOIN driver d ON c.country = d.country WHERE d.driver_id = (SELECT driver_id FROM driver ORDER BY points DESC LIMIT 1)",
        "SELECT country.capital FROM country JOIN driver ON country.country = driver.country WHERE driver.driver_id IN (SELECT driver_id FROM driver ORDER BY points DESC LIMIT 1)",
        "SELECT capital FROM country WHERE country.country IN (SELECT country FROM driver WHERE driver_id = (SELECT driver_id FROM driver ORDER BY points DESC LIMIT 1))",
        "SELECT c.capital FROM country c, driver d WHERE c.country = d.country AND d.driver_id = (SELECT driver_id FROM driver ORDER BY points DESC LIMIT 1)",
        "SELECT (SELECT capital FROM country WHERE country = d.country) AS capital FROM driver d WHERE d.driver_id = (SELECT MAX(driver_id) FROM driver WHERE points = (SELECT MAX(points) FROM driver))",
        "SELECT (SELECT c.capital FROM country c WHERE c.country = d.country) FROM driver d ORDER BY d.points DESC LIMIT 1",
        "SELECT country.capital FROM country JOIN (SELECT country FROM driver ORDER BY points DESC LIMIT 1) sub ON country.country = sub.country",
        "SELECT capital FROM country WHERE country_id = (SELECT country_id FROM driver WHERE points = (SELECT MAX(points) FROM driver))"
      ]
    ]
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "nlq": "List each make with the number of drivers with that make.",
    "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
    "infer_predictions": [
      [
        "SELECT make, COUNT(driver_id) FROM driver GROUP BY make",
        "SELECT d.make, COUNT(d.driver_id) AS total_drivers FROM driver d GROUP BY d.make",
        "SELECT make, COUNT(*) AS num_drivers FROM driver GROUP BY make",
        "SELECT make, COUNT(driver_id) AS driver_count FROM driver GROUP BY make ORDER BY make",
        "SELECT make, COUNT(driver) FROM driver GROUP BY make",
        "SELECT d.make, COUNT(*) FROM driver d GROUP BY d.make",
        "SELECT d.make, COUNT(d.driver_id) FROM driver d GROUP BY d.make ORDER BY d.make DESC",
        "SELECT COUNT(d.driver_id), d.make FROM driver d GROUP BY d.make",
        "SELECT d.make, COUNT(d.driver_id) FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) > 0"
      ]
    ]
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "nlq": "For each make, return the make and the count of drivers with that make.",
    "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
    "infer_predictions": [
      [
        "SELECT d.make, COUNT(d.driver_id) FROM driver d GROUP BY d.make",
        "SELECT driver.make, COUNT(driver.driver_id) AS driver_count FROM driver GROUP BY driver.make",
        "SELECT make, COUNT(*) FROM driver GROUP BY make",
        "SELECT d.make, COUNT(d.driver_id) FROM driver AS d GROUP BY d.make",
        "SELECT make AS Make, COUNT(driver_id) AS NumberOfDrivers FROM driver GROUP BY make",
        "SELECT driver.make, COUNT(*) AS count_of_drivers FROM driver GROUP BY driver.make",
        "SELECT d.make, COUNT(*) FROM driver d GROUP BY d.make",
        "SELECT d.make, COUNT(DISTINCT d.driver_id) FROM driver d GROUP BY d.make",
        "SELECT make, COUNT(driver_id) AS TotalDrivers FROM driver GROUP BY make",
        "SELECT make, COUNT(driver_id) FROM driver WHERE make IS NOT NULL GROUP BY make"
      ]
    ]
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "nlq": "List the make that are associated with most drivers.",
    "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT D.make FROM driver D JOIN team_driver TD ON D.driver_id = TD.driver_id GROUP BY D.make ORDER BY COUNT(D.driver_id) DESC LIMIT 1",
        "SELECT make FROM (SELECT make, COUNT(driver_id) AS num_drivers FROM driver GROUP BY make ORDER BY num_drivers DESC LIMIT 1)",
        "SELECT make FROM driver GROUP BY make ORDER BY COUNT(driver_id) DESC LIMIT 1",
        "WITH DriverCounts AS (SELECT make, COUNT(driver_id) AS Quantity FROM driver GROUP BY make) SELECT make FROM DriverCounts ORDER BY Quantity DESC LIMIT 1",
        "SELECT make FROM (SELECT make FROM driver GROUP BY make ORDER BY COUNT(driver_id) DESC) AS RankedMakes LIMIT 1",
        "SELECT make FROM driver D WHERE (SELECT COUNT(driver_id) FROM driver WHERE make = D.make) = (SELECT MAX(Count) FROM (SELECT COUNT(driver_id) AS Count FROM driver GROUP BY make) T)",
        "SELECT make, COUNT(driver_id) AS total FROM driver GROUP BY make ORDER BY total DESC LIMIT 1",
        "WITH Ranked AS (SELECT make, RANK() OVER (ORDER BY COUNT(driver_id) DESC) AS rank FROM driver GROUP BY make) SELECT make FROM Ranked WHERE rank = 1"
      ]
    ]
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "nlq": "Which make does the most drivers have?",
    "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT make FROM driver GROUP BY make ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT D.make FROM driver D GROUP BY D.make ORDER BY COUNT(D.driver_id) DESC LIMIT 1",
        "SELECT top_make.make FROM (SELECT make, COUNT(driver_id) AS count FROM driver GROUP BY make) top_make ORDER BY top_make.count DESC LIMIT 1",
        "SELECT make FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp WHERE num_drivers = (SELECT MAX(num_drivers) FROM (SELECT make, COUNT(*) as num_drivers FROM driver GROUP BY make) temp2)",
        "SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) = (SELECT MAX(driver_count) FROM (SELECT COUNT(driver_id) AS driver_count FROM driver GROUP BY make) as counts)",
        "SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) = (SELECT MAX(c.cntDrivers) FROM (SELECT COUNT(driver_id) AS cntDrivers FROM driver GROUP BY make) c)",
        "SELECT first_element.make FROM (SELECT make, ROW_NUMBER() OVER (ORDER BY COUNT(driver_id) DESC) AS rn FROM driver GROUP BY make) first_element WHERE first_element.rn = 1",
        "WITH RankedMakes AS (SELECT make, RANK() OVER (ORDER BY COUNT(*) DESC) rank FROM driver GROUP BY make) SELECT make FROM RankedMakes WHERE rank = 1",
        "SELECT make FROM driver WHERE ROWID IN (SELECT ROWID FROM driver GROUP BY make ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT make FROM (SELECT make FROM driver GROUP BY make ORDER BY COUNT(driver_id) DESC LIMIT 1) AS selected_make"
      ]
    ]
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "nlq": "List the driver makes that are associated with at least three drivers.",
    "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3",
        "SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3",
        "SELECT distinct driver.make FROM driver GROUP by make, driver_id HAVING COUNT(*) > 2",
        "SELECT d1.make FROM driver d1 GROUP BY d1.make HAVING COUNT(d1.driver_id) >= 3",
        "SELECT make FROM (SELECT make, COUNT(driver_id) as num_drivers FROM driver GROUP BY make) WHERE num_drivers >= 3",
        "SELECT d.make FROM (SELECT make, COUNT(driver_id) as cnt FROM driver GROUP BY make) d WHERE d.cnt >= 3",
        "SELECT Make FROM driver WHERE make IN (SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3)",
        "SELECT make FROM driver WHERE make IN (SELECT make FROM (SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3) as subquery)"
      ]
    ]
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "nlq": "Which make is associated with 3 or more drivers?",
    "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
    "infer_predictions": [
      [
        "SELECT make FROM driver GROUP BY make HAVING COUNT(*) >= 3",
        "SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3",
        "SELECT d.make FROM (SELECT make, COUNT(driver_id) as num_drivers FROM driver GROUP BY make) d WHERE d.num_drivers >= 3",
        "SELECT DISTINCT d.make FROM driver d WHERE (SELECT COUNT(*) FROM driver WHERE make = d.make) >= 3",
        "SELECT m.make FROM (SELECT make, COUNT(*) as total FROM driver GROUP BY make HAVING total >= 3) m",
        "SELECT DISTINCT make FROM driver WHERE make IN (SELECT make FROM driver GROUP BY make HAVING COUNT(driver_id) >= 3)",
        "SELECT d.make FROM (SELECT make FROM driver GROUP BY make HAVING COUNT(driver) >= 3) as d",
        "SELECT make FROM (SELECT make FROM driver GROUP BY make) where (SELECT COUNT(driver_id) FROM driver as d WHERE d.make = make) >= 3",
        "SELECT DISTINCT t.make FROM driver t GROUP BY t.make HAVING COUNT(t.driver_id) >= 3",
        "SELECT DISTINCT first.make FROM driver first, driver second WHERE first.make = second.make GROUP BY first.make HAVING COUNT(second.driver_id) >= 3"
      ]
    ]
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "nlq": "List the names of teams that do not have any drivers.",
    "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
    "infer_predictions": [
      [
        "SELECT team FROM team WHERE team_id NOT IN (SELECT team_id FROM team_driver)",
        "SELECT T.team FROM team T LEFT JOIN team_driver TD ON T.team_id = TD.team_id WHERE TD.driver_id IS NULL",
        "SELECT DISTINCT team FROM team WHERE team_id NOT IN (SELECT DISTINCT team_id FROM team_driver)",
        "SELECT team FROM team T WHERE NOT EXISTS (SELECT 1 FROM team_driver TD WHERE TD.team_id = T.team_id)",
        "SELECT team FROM team EXCEPT SELECT T.team FROM team T INNER JOIN team_driver TD ON T.team_id = TD.team_id",
        "SELECT team FROM team WHERE team_id NOT IN (SELECT team_id FROM team_driver WHERE driver_id IS NOT NULL)",
        "SELECT T.team FROM team T WHERE T.team_id NOT IN (SELECT team_id FROM team_driver TD)",
        "SELECT T.team FROM team T WHERE NOT EXISTS (SELECT NULL FROM team_driver TD WHERE TD.team_id = T.team_id)",
        "SELECT team FROM team LEFT JOIN team_driver ON team.team_id = team_driver.team_id WHERE team_driver.driver_id IS NULL",
        "SELECT T.team FROM team T LEFT OUTER JOIN team_driver TD ON T.team_id = TD.team_id WHERE TD.team_id IS NULL"
      ]
    ]
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "nlq": "Which team does not have drivers?",
    "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
    "infer_predictions": [
      [
        "SELECT t.team FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id WHERE td.driver_id IS NULL",
        "SELECT team FROM team WHERE team_id NOT IN (SELECT team_id FROM team_driver)",
        "SELECT team.team FROM team WHERE NOT EXISTS (SELECT NULL FROM team_driver WHERE team_driver.team_id = team.team_id)",
        "SELECT t.team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.team_id = t.team_id)",
        "SELECT t.team FROM team t LEFT OUTER JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team HAVING COUNT(td.driver_id) = 0",
        "SELECT team FROM team EXCEPT SELECT team FROM team, team_driver WHERE team.team_id = team_driver.team_id",
        "SELECT DISTINCT team.team FROM team LEFT JOIN team_driver ON team.team_id = team_driver.team_id WHERE team_driver.driver_id IS NULL",
        "SELECT t1.team FROM team t1 WHERE t1.team_id NOT IN (SELECT distinct t2.team_id FROM team_driver t2)",
        "SELECT team FROM team AS t1 WHERE NOT EXISTS (SELECT '' FROM team_driver AS t2 WHERE t2.team_id = t1.team_id)",
        "SELECT DISTINCT t.team FROM team t LEFT OUTER JOIN team_driver td ON t.team_id = td.team_id WHERE td.driver_id IS NULL"
      ]
    ]
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "nlq": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.country FROM driver d WHERE d.make = 'Dodge' AND EXISTS (SELECT 1 FROM driver WHERE make = 'Chevrolet' AND country = d.country)",
        "SELECT country FROM (SELECT country, make FROM driver WHERE make IN ('Dodge', 'Chevrolet') GROUP BY country HAVING COUNT(DISTINCT make) = 2)",
        "SELECT d1.country FROM driver d1 JOIN driver d2 ON d1.country = d2.country WHERE d1.make = 'Dodge' AND d2.make = 'Chevrolet'",
        "SELECT DISTINCT country FROM driver WHERE make = 'Dodge' INTERSECT SELECT DISTINCT country FROM driver WHERE make = 'Chevrolet'",
        "SELECT d.country FROM driver d GROUP BY d.country HAVING SUM(d.make = 'Dodge') > 0 AND SUM(d.make = 'Chevrolet') > 0",
        "SELECT country FROM (SELECT DISTINCT country, make FROM driver) WHERE make IN ('Dodge', 'Chevrolet') GROUP BY country HAVING COUNT(*) = 2",
        "WITH Dodge_Drivers AS (SELECT country FROM driver WHERE make = 'Dodge'), Chevrolet_Drivers AS (SELECT country FROM driver WHERE make = 'Chevrolet') SELECT DISTINCT d.country FROM Dodge_Drivers d JOIN Chevrolet_Drivers c ON d.country = c.country",
        "SELECT d.country FROM driver d WHERE exists (SELECT 1 FROM driver x WHERE x.country = d.country AND x.make = 'Chevrolet') AND d.make = 'Dodge'",
        "SELECT DISTINCT d.country FROM driver d, (SELECT country FROM driver WHERE make = 'Chevrolet') c WHERE d.country = c.country AND d.make = 'Dodge'"
      ]
    ]
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "nlq": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT d.country FROM driver d WHERE d.make IN ('Dodge', 'Chevrolet') GROUP BY d.country HAVING COUNT(DISTINCT d.make) = 2",
        "SELECT d.country FROM driver d WHERE d.make = 'Dodge' INTERSECT SELECT d.country FROM driver d WHERE d.make = 'Chevrolet'",
        "SELECT d1.country FROM driver d1 JOIN driver d2 ON d1.country = d2.country WHERE d1.make = 'Dodge' AND d2.make = 'Chevrolet'",
        "SELECT d.country FROM driver d WHERE d.make IN ('Chevrolet', 'Dodge') GROUP BY d.country HAVING MIN(d.make) != MAX(d.make)",
        "SELECT country FROM (SELECT d.country, COUNT(DISTINCT d.make) AS cnt FROM driver d WHERE d.make IN ('Chevrolet', 'Dodge') GROUP BY d.country) tmp WHERE cnt > 1",
        "SELECT d1.country FROM driver d1 CROSS JOIN driver d2 WHERE d1.country = d2.country AND d1.make = 'Chevrolet' AND d2.make = 'Dodge'",
        "WITH ChevroletDrivers AS (SELECT country FROM driver WHERE make = 'Chevrolet'), DodgeDrivers AS (SELECT country FROM driver WHERE make = 'Dodge') SELECT ChevroletDrivers.country FROM ChevroletDrivers JOIN DodgeDrivers ON ChevroletDrivers.country = DodgeDrivers.country",
        "SELECT country FROM driver WHERE make = 'Dodge' AND country IN (SELECT country FROM driver WHERE make = 'Chevrolet')",
        "SELECT DISTINCT d.country FROM driver d, driver d2 WHERE d.country = d2.country AND d.make = 'Dodge' AND d2.make = 'Chevrolet'"
      ]
    ]
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "nlq": "Show total and average points of all drivers.",
    "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
    "infer_predictions": [
      [
        "SELECT SUM(points) AS total_points, AVG(points) AS average_points FROM driver;",
        "SELECT TOTAL(points) AS total_points, AVG(points) AS average_points FROM driver;",
        "SELECT SUM(driver.points) AS total_points, AVG(driver.points) AS average_points FROM driver;",
        "SELECT TOTAL(driver.points) AS total_points, AVG(driver.points) AS average_points FROM driver;",
        "SELECT (SELECT SUM(points) FROM driver) AS total_points, (SELECT AVG(points) FROM driver) AS average_points;",
        "SELECT (SELECT SUM(points) FROM driver) AS total_points, ROUND(AVG(points), 2) AS average_points FROM driver;",
        "SELECT SUM(d.points) AS total_points, AVG(d.points) AS average_points FROM driver d;",
        "SELECT TOTAL(d.points) AS total_points, AVG(d.points) AS average_points FROM driver d;",
        "SELECT SUM(points), AVG(points) FROM driver;",
        "SELECT (SELECT Sum(points) FROM driver), (SELECT Avg(points) FROM driver);"
      ]
    ]
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "nlq": "What are the total and average points of drivers?",
    "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
    "infer_predictions": [
      [
        "SELECT SUM(points) AS TotalPoints, AVG(points) AS AveragePoints FROM driver",
        "SELECT SUM(d.points) AS TotalPoints, AVG(d.points) AS AveragePoints FROM driver d",
        "SELECT TOTAL(points) AS TotalPoints, AVG(points) AS AveragePoints FROM driver",
        "SELECT TOTAL(d.points) AS TotalPoints, AVG(d.points) AS AveragePoints FROM driver d",
        "SELECT (SELECT SUM(points) FROM driver) AS TotalPoints, (SELECT AVG(points) FROM driver) AS AveragePoints",
        "SELECT (SELECT SUM(d.points) FROM driver d) AS TotalPoints, (SELECT AVG(d.points) FROM driver d) AS AveragePoints",
        "SELECT COUNT(*), SUM(points) AS TotalPoints, AVG(points) AS AveragePoints FROM driver",
        "SELECT COUNT(*), SUM(d.points) AS TotalPoints, AVG(d.points) AS AveragePoints FROM driver d",
        "SELECT COUNT(driver_id) AS NumberOfDrivers, SUM(points) AS TotalPoints, AVG(points) AS AveragePoints FROM driver",
        "SELECT COUNT(driver_id) AS NumberOfDrivers, SUM(d.points) AS TotalPoints, AVG(d.points) AS AveragePoints FROM driver d"
      ]
    ]
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "nlq": "Find the countries where no driver come from.",
    "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
    "infer_predictions": [
      [
        "SELECT country FROM country WHERE country NOT IN (SELECT country FROM driver)",
        "SELECT c.country FROM country c LEFT JOIN driver d ON c.country = d.country WHERE d.country IS NULL",
        "SELECT country.country FROM country LEFT JOIN driver ON country.country = driver.country WHERE driver.country IS NULL",
        "SELECT country FROM country WHERE country NOT IN (SELECT DISTINCT country FROM driver)",
        "SELECT c.country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.country = c.country)",
        "SELECT DISTINCT country.country FROM country LEFT OUTER JOIN driver ON country.country = driver.country WHERE driver.driver_id IS NULL",
        "SELECT country FROM country EXCEPT SELECT country FROM driver",
        "SELECT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d)",
        "SELECT c.country FROM country c LEFT OUTER JOIN driver d ON c.country = d.country WHERE d.driver_id IS NULL",
        "SELECT DISTINCT c.country FROM country c WHERE NOT EXISTS (SELECT NULL FROM driver d WHERE d.country = c.country)"
      ]
    ]
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "nlq": "Which countries do not have any drivers?",
    "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
    "infer_predictions": [
      [
        "SELECT country FROM country WHERE country NOT IN (SELECT country FROM driver)",
        "SELECT c.country FROM country c LEFT JOIN driver d ON c.country = d.country WHERE d.country IS NULL",
        "SELECT country.country FROM country LEFT OUTER JOIN driver ON country.country = driver.country WHERE driver.country IS NULL",
        "SELECT c.country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE c.country = d.country)",
        "SELECT country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d)",
        "SELECT c.country FROM country as c LEFT JOIN driver as d ON c.country = d.country WHERE d.country IS NULL",
        "SELECT country FROM country WHERE country NOT IN (SELECT DISTINCT d.country FROM driver d)",
        "SELECT DISTINCT c.country FROM country c WHERE c.country NOT IN (SELECT d.country FROM driver d)",
        "SELECT country.country FROM country LEFT JOIN driver ON country.country = driver.country GROUP BY country.country HAVING COUNT(driver.driver_id) = 0",
        "SELECT c.country FROM country c WHERE c.country NOT IN (SELECT DISTINCT country FROM driver)"
      ]
    ]
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "nlq": "What are the manager and sponsor of the team that has the most drivers?",
    "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT t.manager, t.sponsor FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ORDER BY COUNT(td.driver_id) DESC LIMIT 1",
        "SELECT manager, sponsor FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH DriverCounts AS (SELECT team_id, COUNT(*) AS num_drivers FROM team_driver GROUP BY team_id) SELECT t.manager, t.sponsor FROM team t INNER JOIN DriverCounts dc ON t.team_id = dc.team_id WHERE dc.num_drivers = (SELECT MAX(num_drivers) FROM DriverCounts)",
        "SELECT manager, sponsor FROM team WHERE team_id = (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1)",
        "SELECT manager, sponsor FROM team WHERE team.team_id = (SELECT team_id FROM (SELECT team_id, COUNT(driver_id) AS total_drivers FROM team_driver GROUP BY team_id) AS sub_query ORDER BY total_drivers DESC LIMIT 1)",
        "SELECT manager, sponsor FROM (SELECT t.team_id, t.manager, t.sponsor, COUNT(td.driver_id) AS driver_count FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id ORDER BY driver_count DESC LIMIT 1) tmp",
        "SELECT t.manager, t.sponsor FROM team_driver td JOIN team t ON td.team_id = t.team_id GROUP BY t.team_id HAVING COUNT(*) = (SELECT MAX(driver_count) FROM (SELECT team_id, COUNT(*) AS driver_count FROM team_driver GROUP BY team_id) AS counts)",
        "SELECT t.manager, t.sponsor FROM team t WHERE t.team_id = (SELECT top_team.team_id FROM (SELECT team_id, COUNT(driver_id) driver_count FROM team_driver GROUP BY team_id ORDER BY driver_count DESC LIMIT 1) top_team)",
        "SELECT manager, sponsor FROM team WHERE team_id = (SELECT TEAM_ID FROM (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1) SQ)",
        "WITH cte AS (SELECT td.team_id, COUNT(td.driver_id) AS no_of_drivers FROM team_driver td GROUP BY td.team_id) SELECT t.manager, t.sponsor FROM cte JOIN team t ON cte.team_id = t.team_id WHERE no_of_drivers = (SELECT MAX(no_of_drivers) FROM cte) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "nlq": "Find the manager and sponsor of the team that has the most drivers.",
    "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT team.manager, team.sponsor FROM team JOIN team_driver ON team.team_id = team_driver.team_id GROUP BY team.team_id ORDER BY COUNT(team_driver.driver_id) DESC LIMIT 1",
        "SELECT manager, sponsor FROM team WHERE team_id = (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT T.manager, T.sponsor FROM team AS T INNER JOIN (SELECT team_id, COUNT(driver_id) AS driver_count FROM team_driver GROUP BY team_id ORDER BY driver_count DESC LIMIT 1) AS TD ON T.team_id = TD.team_id",
        "SELECT manager, sponsor FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) = (SELECT MAX(c) FROM (SELECT COUNT(driver_id) AS c FROM team_driver GROUP BY team_id)))",
        "SELECT manager, sponsor FROM team INNER JOIN (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(*) DESC LIMIT 1) T ON team.team_id = T.team_id",
        "SELECT (SELECT manager FROM team WHERE team_id = TD.team_id), (SELECT sponsor FROM team WHERE team_id = TD.team_id) FROM (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1) TD",
        "SELECT T.manager, T.sponsor FROM team T JOIN (SELECT team_id FROM team_driver GROUP BY team_id ORDER BY COUNT(driver_id) DESC LIMIT 1) D ON T.team_id = D.team_id"
      ]
    ]
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "nlq": "What are the manager and car owner of the team that has at least 2 drivers?",
    "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT DISTINCT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id HAVING COUNT(DISTINCT td.driver_id) >= 2",
        "SELECT t.manager, t.car_owner FROM team t WHERE t.team_id IN (SELECT td.team_id FROM team_driver td GROUP BY td.team_id HAVING COUNT(td.driver_id) >= 2)",
        "SELECT manager, car_owner FROM team WHERE EXISTS (SELECT 1 FROM team_driver WHERE team_driver.team_id = team.team_id GROUP BY team_driver.team_id HAVING COUNT(*) >= 2)",
        "SELECT t.manager, t.car_owner FROM team t INNER JOIN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2) AS sub ON t.team_id = sub.team_id",
        "SELECT t.manager, t.car_owner FROM team AS t WHERE (SELECT COUNT(*) FROM team_driver AS td WHERE td.team_id = t.team_id) >= 2",
        "SELECT t.manager, t.car_owner FROM team t WHERE t.team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(*) > 1)",
        "SELECT manager, car_owner FROM (SELECT t.manager, t.car_owner, COUNT(td.driver_id) AS driver_count FROM team t LEFT JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id) sub WHERE driver_count >= 2",
        "SELECT manager, car_owner FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) > 1)",
        "WITH CTE AS (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2) SELECT t.manager, t.car_owner FROM team t JOIN CTE ON t.team_id = CTE.team_id",
        "SELECT DISTINCT t.manager, t.car_owner FROM team t WHERE 2 <= (SELECT COUNT(*) FROM team_driver td WHERE td.team_id = t.team_id)"
      ]
    ]
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "nlq": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT manager, car_owner FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) >= 2)",
        "SELECT t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id HAVING COUNT(td.driver_id) >= 2",
        "SELECT manager, car_owner FROM team WHERE team_id IN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(*) >= 2)",
        "SELECT t.manager, t.car_owner FROM team t INNER JOIN (SELECT team_id FROM team_driver GROUP BY team_id HAVING COUNT(driver_id) > 1) q ON t.team_id = q.team_id",
        "SELECT t.manager, t.car_owner FROM (SELECT * FROM team) t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id HAVING COUNT(td.driver_id) > 1",
        "SELECT manager, car_owner FROM team WHERE EXISTS (SELECT 1 FROM team_driver WHERE team.team_id = team_driver.team_id GROUP BY team_id HAVING COUNT(driver_id) >= 2)",
        "SELECT manager, car_owner FROM team as T WHERE (SELECT COUNT(driver_id) FROM team_driver WHERE team_id = T.team_id) >= 2",
        "SELECT manager, car_owner FROM (SELECT team.manager, team.car_owner FROM team JOIN team_driver ON team.team_id = team_driver.team_id GROUP BY team.team_id HAVING COUNT(team_driver.driver_id) >= 2) AS Result",
        "SELECT T.manager, T.car_owner FROM team AS T, team_driver AS TD WHERE T.team_id = TD.team_id GROUP BY T.team_id HAVING COUNT(TD.driver_id) >= 2"
      ]
    ]
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "nlq": "How many institutions are there?",
    "gold": "SELECT count(*) FROM institution",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM institution",
        "SELECT COUNT(institution_id) FROM institution",
        "SELECT COUNT(1) FROM institution",
        "SELECT COUNT(institution_id) FROM (SELECT institution_id FROM institution)",
        "SELECT COUNT(institution_id) FROM institution GROUP BY institution_id HAVING COUNT(institution_id) >= 1",
        "SELECT COUNT(*) FROM (SELECT DISTINCT institution_id FROM institution)",
        "SELECT COUNT(*) FROM institution WHERE institution_id IS NOT NULL",
        "SELECT COUNT(DISTINCT institution) FROM (SELECT institution_id AS institution FROM institution)"
      ]
    ]
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "nlq": "Count the number of institutions.",
    "gold": "SELECT count(*) FROM institution",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM institution",
        "SELECT COUNT(institution_id) FROM institution",
        "SELECT COUNT(1) FROM institution",
        "SELECT COUNT(*) AS total_institutions FROM institution",
        "SELECT COUNT(i.institution_id) FROM institution i"
      ]
    ]
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "nlq": "List the names of institutions in ascending alphabetical order.",
    "gold": "SELECT Name FROM institution ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM institution ORDER BY name ASC",
        "SELECT name FROM institution ORDER BY 1",
        "SELECT name AS InstitutionName FROM institution ORDER BY InstitutionName",
        "SELECT name FROM institution ORDER BY LOWER(name) ASC",
        "SELECT INSTITUTION.name FROM institution AS INSTITUTION ORDER BY INSTITUTION.name ASC",
        "SELECT MIN(name) AS name FROM institution GROUP BY name ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "nlq": "What are the names of institutions, ordered alphabetically?",
    "gold": "SELECT Name FROM institution ORDER BY Name ASC",
    "infer_predictions": [
      [
        "SELECT name FROM institution ORDER BY name ASC;",
        "SELECT i.name FROM institution i ORDER BY i.name ASC;",
        "SELECT inst.name FROM institution inst ORDER BY inst.name ASC;",
        "SELECT name FROM institution GROUP BY name ORDER BY name;",
        "SELECT institution.name AS InstitutionName FROM institution ORDER BY InstitutionName;",
        "SELECT name FROM (SELECT name FROM institution ORDER BY name) AS sorted_names;"
      ]
    ]
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "nlq": "List the names of institutions in ascending order of founded year.",
    "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
    "infer_predictions": [
      [
        "SELECT name FROM institution ORDER BY founded ASC",
        "SELECT i.name FROM institution i ORDER BY i.founded",
        "SELECT name FROM institution i ORDER BY i.founded ASC",
        "SELECT inst.name FROM institution inst ORDER BY inst.founded",
        "SELECT DISTINCT i.name FROM institution i ORDER BY i.founded ASC"
      ]
    ]
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "nlq": "What are the names of institutions, ordered by the years in which they were founded?",
    "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
    "infer_predictions": [
      [
        "SELECT name FROM institution ORDER BY founded",
        "SELECT institution.name FROM institution AS institution ORDER BY institution.founded ASC",
        "SELECT name FROM institution WHERE institution_id IS NOT NULL ORDER BY founded",
        "SELECT name AS InstitutionName FROM institution ORDER BY founded",
        "SELECT institution.name AS InstitutionName FROM institution WHERE name IS NOT NULL ORDER BY institution.founded ASC"
      ]
    ]
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "nlq": "What are the cities and provinces of institutions?",
    "gold": "SELECT City ,  Province FROM institution",
    "infer_predictions": [
      [
        "SELECT DISTINCT city, province FROM institution",
        "SELECT city, province FROM institution GROUP BY city, province",
        "SELECT DISTINCT I.city AS 'City', I.province AS 'Province' FROM institution I",
        "SELECT DISTINCT I1.city, I1.province FROM institution I1",
        "SELECT CITY, PROVINCE FROM (SELECT DISTINCT city AS CITY, province AS PROVINCE FROM institution)",
        "SELECT DISTINCT city, province FROM institution WHERE province IS NOT NULL",
        "SELECT DISTINCT city, province FROM institution WHERE city IN (SELECT DISTINCT city FROM institution)",
        "SELECT city FROM institution GROUP BY city HAVING COUNT(province) > 0",
        "SELECT province FROM institution GROUP BY province, city ORDER BY city ASC"
      ]
    ]
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "nlq": "Return the cities and provinces of institutions.",
    "gold": "SELECT City ,  Province FROM institution",
    "infer_predictions": [
      [
        "SELECT city, province FROM institution",
        "SELECT i.city, i.province FROM institution i",
        "SELECT city AS c, province AS p FROM institution",
        "SELECT city, province FROM institution ORDER BY city",
        "SELECT city, province FROM institution GROUP BY city, province",
        "SELECT i.city, i.province FROM institution i WHERE i.city IS NOT NULL",
        "SELECT city, province FROM institution WHERE city IN (SELECT city FROM institution)",
        "SELECT DISTINCT i.city, i.province FROM institution i WHERE EXISTS (SELECT 1 FROM institution WHERE city = i.city)",
        "SELECT city, province FROM institution WHERE institution_id IN (SELECT institution_id FROM institution)"
      ]
    ]
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "nlq": "What are the maximum and minimum enrollment of all institutions?",
    "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
    "infer_predictions": [
      [
        "SELECT MAX(enrollment) AS MaxEnrollment, MIN(enrollment) AS MinEnrollment FROM institution",
        "SELECT MAX(institution.enrollment) AS maximum_enrollment, MIN(institution.enrollment) AS minimum_enrollment FROM institution",
        "SELECT (SELECT MAX(enrollment) FROM institution) AS MaximumEnrollment, (SELECT MIN(enrollment) FROM institution) AS MinimumEnrollment",
        "SELECT MAX(I.enrollment) AS MaxEnrolment, MIN(I.enrollment) AS MinEnrolment FROM institution AS I",
        "SELECT MAX(enrollment) AS Max_Enrollment, MIN(enrollment) AS Min_Enrollment FROM institution GROUP BY name HAVING name LIKE '%'",
        "SELECT MAX(I.enrollment), MIN(I.enrollment) FROM institution I WHERE I.enrollment IS NOT NULL",
        "SELECT MAX(enrollment) AS \"Maximum Enrollment\", MIN(enrollment) AS \"Minimum Enrollment\" FROM institution WHERE enrollment BETWEEN 0 AND 100000",
        "SELECT (SELECT MAX(enrollment) FROM institution), (SELECT MIN(enrollment) FROM institution)",
        "SELECT MAX(I.enrollment) AS MaxE, MIN(I.enrollment) AS MinE FROM institution AS I WHERE I.enrollment BETWEEN (SELECT MIN(I.enrollment) FROM institution I) AND (SELECT MAX(I.enrollment) FROM institution I)",
        "SELECT MAX(enrollment), MIN(enrollment) FROM institution WHERE institution_id IN (SELECT institution_id FROM institution)"
      ]
    ]
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "nlq": "Return the maximum and minimum enrollment across all institutions.",
    "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
    "infer_predictions": [
      [
        "SELECT MAX(enrollment) AS MaxEnrollment, MIN(enrollment) AS MinEnrollment FROM institution",
        "SELECT MAX(i.enrollment) AS Maximum, MIN(i.enrollment) AS Minimum FROM institution i",
        "SELECT MaxEnrollment, MinEnrollment FROM (SELECT MAX(enrollment) AS MaxEnrollment, MIN(enrollment) AS MinEnrollment FROM institution)",
        "SELECT (SELECT MAX(enrollment) FROM institution) AS MaxEnroll, (SELECT MIN(enrollment) FROM institution) AS MinEnroll",
        "SELECT MAX(enrollment) AS MaximumEnrollment, MIN(enrollment) AS MinimumEnrollment FROM institution",
        "SELECT * FROM (SELECT MAX(enrollment) AS MaxValue, MIN(enrollment) AS MinValue FROM institution)",
        "SELECT MAX(enrollment) MaxEnroll, MIN(enrollment) MinEnroll FROM institution",
        "WITH InstitutionStats AS (SELECT MAX(enrollment) as MaximumEnrollment, MIN(enrollment) as MinimumEnrollment FROM institution) SELECT MaximumEnrollment, MinimumEnrollment FROM InstitutionStats",
        "SELECT A.MaxEnroll, A.MinEnroll FROM (SELECT MAX(enrollment) AS MaxEnroll, MIN(enrollment) AS MinEnroll FROM institution) A",
        "SELECT InstitutionMaxMin.Max, InstitutionMaxMin.Min FROM (SELECT MAX(enrollment) AS Max, MIN(enrollment) AS Min FROM institution) InstitutionMaxMin"
      ]
    ]
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "nlq": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT affiliation FROM institution WHERE city != 'Vancouver'",
        "SELECT affiliation FROM institution WHERE NOT city = 'Vancouver'",
        "SELECT i.affiliation FROM institution i WHERE i.city <> 'Vancouver'",
        "SELECT DISTINCT i.affiliation FROM institution i WHERE i.city NOT IN ('Vancouver')",
        "SELECT affiliation FROM institution WHERE city NOT LIKE 'Vancouver'",
        "SELECT i.affiliation FROM institution i WHERE i.city IS NOT 'Vancouver'",
        "SELECT affiliation FROM institution EXCEPT SELECT affiliation FROM institution WHERE city = 'Vancouver'",
        "SELECT DISTINCT affiliation FROM institution i WHERE NOT EXISTS (SELECT 1 FROM institution WHERE city = 'Vancouver' AND institution_id = i.institution_id)",
        "SELECT affiliation FROM institution WHERE city != 'Vancouver' GROUP BY affiliation",
        "SELECT DISTINCT affiliation FROM institution WHERE 'Vancouver' != city"
      ]
    ]
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "nlq": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
    "infer_predictions": [
      [
        "SELECT affiliation FROM institution WHERE city != 'Vancouver'",
        "SELECT i.affiliation FROM institution i WHERE i.city NOT LIKE 'Vancouver'",
        "SELECT affiliation FROM institution WHERE NOT (city = 'Vancouver')",
        "SELECT distinct(affiliation) FROM institution WHERE city <> 'Vancouver'",
        "SELECT i.affiliation FROM institution i WHERE i.city != 'Vancouver'",
        "SELECT DISTINCT i.affiliation FROM institution i WHERE i.city <> 'Vancouver'",
        "SELECT affiliation FROM institution WHERE city NOT IN ('Vancouver')",
        "SELECT DISTINCT affiliation FROM institution WHERE city NOT LIKE 'Vancouver'"
      ]
    ]
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "nlq": "What are the stadiums of institutions in descending order of the capacity.",
    "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
    "infer_predictions": [
      [
        "SELECT stadium FROM institution ORDER BY capacity DESC",
        "SELECT i.stadium FROM institution i ORDER BY i.capacity DESC",
        "SELECT s.stadium FROM (SELECT stadium, capacity FROM institution ORDER BY capacity DESC) s",
        "SELECT stadium FROM institution ORDER BY capacity DESC, institution_id ASC"
      ]
    ]
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "nlq": "Return the stadiums of institutions, ordered by capacity descending.",
    "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
    "infer_predictions": [
      [
        "SELECT stadium FROM institution ORDER BY capacity DESC",
        "SELECT stadium FROM institution ORDER BY capacity DESC, institution_id ASC",
        "SELECT i.stadium FROM institution i WHERE i.stadium IS NOT NULL ORDER BY i.capacity DESC",
        "SELECT stadium FROM institution GROUP BY stadium ORDER BY MAX(capacity) DESC",
        "SELECT stadium FROM institution WHERE capacity IS NOT NULL ORDER BY capacity DESC",
        "SELECT stadium FROM institution ORDER BY capacity DESC LIMIT 10000",
        "SELECT st.stadium FROM (SELECT stadium, capacity FROM institution) AS st ORDER BY st.capacity DESC"
      ]
    ]
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "nlq": "What is the stadium of the institution with the largest enrollment?",
    "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution);",
        "SELECT i.stadium FROM institution i ORDER BY i.enrollment DESC LIMIT 1;",
        "SELECT i.stadium FROM institution i WHERE i.enrollment = (SELECT MAX(enrollment) FROM institution);",
        "SELECT stadium FROM institution WHERE institution_id = (SELECT institution_id FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution));",
        "SELECT i.stadium FROM institution i WHERE i.institution_id = (SELECT institution_id FROM institution ORDER BY enrollment DESC LIMIT 1);",
        "SELECT stadium FROM institution WHERE institution_id IN (SELECT institution_id FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution));",
        "SELECT i.stadium FROM institution i JOIN (SELECT institution_id, MAX(enrollment) AS max_enrollment FROM institution GROUP BY institution_id) j ON i.institution_id = j.institution_id WHERE i.enrollment = j.max_enrollment;",
        "SELECT i.stadium FROM institution i, (SELECT MAX(enrollment) max_enrollment FROM institution) max_En WHERE i.enrollment = max_En.max_enrollment;"
      ]
    ]
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "nlq": "Give the stadium of the institution which is the greatest enrollment.",
    "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(enrollment) FROM institution)",
        "SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1",
        "SELECT stadium FROM institution WHERE enrollment IN (SELECT MAX(enrollment) FROM institution)",
        "SELECT I.stadium FROM institution AS I JOIN (SELECT MAX(enrollment) AS max_enrollment FROM institution) AS Temp ON I.enrollment = Temp.max_enrollment",
        "SELECT stadium FROM institution WHERE enrollment = (SELECT MAX(I2.enrollment) FROM institution I2)",
        "SELECT I.stadium FROM institution I WHERE I.enrollment = (SELECT MAX(enrollment) FROM institution)"
      ]
    ]
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "nlq": "What are the names and nicknames of institutions?",
    "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
    "infer_predictions": [
      [
        "SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id",
        "SELECT name, nickname FROM institution JOIN championship USING (institution_id)",
        "SELECT institution.name, championship.nickname FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id",
        "SELECT inst.name, champ.nickname FROM institution inst, championship champ WHERE inst.institution_id = champ.institution_id",
        "SELECT i.name AS InstitutionName, c.nickname AS ChampionshipNickname FROM institution AS i INNER JOIN championship AS c ON i.institution_id = c.institution_id",
        "SELECT inst.name, champ.nickname FROM institution AS inst INNER JOIN championship AS champ ON inst.institution_id = champ.institution_id",
        "SELECT name, nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id",
        "SELECT i.name, c.nickname FROM institution i, championship c WHERE i.institution_id = c.institution_id",
        "SELECT name, nickname FROM institution CROSS JOIN championship ON institution.institution_id = championship.institution_id",
        "SELECT i.name AS Institution_Name, c.nickname AS Nick_Name FROM institution i JOIN championship c ON i.institution_id = c.institution_id"
      ]
    ]
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "nlq": "Return the names of institutions, as well as their nicknames.",
    "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
    "infer_predictions": [
      [
        "SELECT i.name, c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id",
        "SELECT institution.name, championship.nickname FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id",
        "SELECT name, nickname FROM institution, championship WHERE institution.institution_id = championship.institution_id",
        "SELECT i.name AS InstitutionName, c.nickname AS InstitutionNickname FROM institution AS i, championship AS c WHERE i.institution_id = c.institution_id",
        "SELECT Name, Nickname FROM (SELECT name FROM institution JOIN championship USING(institution_id)), (SELECT nickname FROM championship JOIN institution USING(institution_id))",
        "SELECT institution.name, championship.nickname FROM institution, championship WHERE institution.institution_id = championship.institution_id",
        "SELECT name, nickname FROM institution JOIN championship ON institution.institution_id = championship.institution_id",
        "SELECT DISTINCT name AS institute_name, nickname FROM institution i INNER JOIN championship ch ON i.institution_id = ch.institution_id",
        "SELECT I.name, C.nickname FROM institution I, championship C WHERE I.institution_id = C.institution_id ORDER BY I.name",
        "SELECT institution.name as Institution_Name, championship.nickname as Institution_Nickname FROM institution JOIN championship ON institution.institution_id = championship.institution_id GROUP BY institution.name, championship.nickname"
      ]
    ]
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "nlq": "What is the nickname of the institution with the smallest enrollment?",
    "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.nickname FROM championship c JOIN institution i ON c.institution_id = i.institution_id ORDER BY i.enrollment ASC LIMIT 1",
        "SELECT nickname FROM championship WHERE institution_id = (SELECT institution_id FROM institution ORDER BY enrollment LIMIT 1)",
        "SELECT c.nickname FROM championship c WHERE c.institution_id = (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1)",
        "SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i ORDER BY i.enrollment ASC LIMIT 1",
        "SELECT nickname FROM championship WHERE institution_id IN (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1)",
        "SELECT nickname FROM championship c WHERE EXISTS (SELECT 1 FROM institution i WHERE i.institution_id = c.institution_id ORDER BY i.enrollment LIMIT 1)",
        "SELECT (SELECT c.nickname FROM championship c WHERE c.institution_id = i.institution_id) AS nickname FROM institution i ORDER BY i.enrollment LIMIT 1",
        "SELECT c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.enrollment LIMIT 1"
      ]
    ]
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "nlq": "Return the nickname of the institution with the lowest enrollment.",
    "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT c.nickname FROM championship c JOIN institution i ON c.institution_id = i.institution_id WHERE i.enrollment = (SELECT MIN(enrollment) FROM institution)",
        "SELECT nickname FROM championship WHERE institution_id IN (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1)",
        "SELECT nickname FROM championship WHERE institution_id = (SELECT institution_id FROM institution WHERE enrollment = (SELECT MIN(enrollment) FROM institution))",
        "SELECT c.nickname FROM championship c WHERE c.institution_id = (SELECT i.institution_id FROM institution i ORDER BY i.enrollment LIMIT 1)",
        "SELECT nickname FROM championship WHERE institution_id = (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1)",
        "SELECT c.nickname FROM championship c, institution i WHERE c.institution_id = i.institution_id AND i.enrollment = (SELECT MIN(enrollment) FROM institution)",
        "SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i WHERE enrollment = (SELECT MIN(enrollment) FROM institution)",
        "SELECT nickname FROM championship WHERE institution_id = (SELECT institution_id FROM institution WHERE enrollment = (SELECT MIN(enrollment) FROM institution LIMIT 1))",
        "SELECT c.nickname FROM championship c INNER JOIN institution i ON c.institution_id = i.institution_id WHERE i.enrollment = (SELECT MIN(i2.enrollment) FROM institution i2)",
        "SELECT c.nickname FROM (SELECT institution_id FROM institution ORDER BY enrollment ASC LIMIT 1) AS low_enroll JOIN championship c ON c.institution_id = low_enroll.institution_id"
      ]
    ]
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "nlq": "List the names of institutions in descending order of the number of championships.",
    "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
    "infer_predictions": [
      [
        "SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship ORDER BY number_of_championships DESC)",
        "SELECT inst.name FROM institution inst INNER JOIN championship champ ON inst.institution_id = champ.institution_id ORDER BY champ.number_of_championships DESC",
        "SELECT i.name FROM institution i, championship c WHERE i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT inst.name FROM institution inst INNER JOIN championship c ON inst.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT i.name FROM institution i WHERE EXISTS (SELECT 1 FROM championship c WHERE c.institution_id = i.institution_id) ORDER BY (SELECT number_of_championships FROM championship c WHERE c.institution_id = i.institution_id) DESC",
        "SELECT institution.name FROM institution JOIN championship ON institution.institution_id = championship.institution_id ORDER BY championship.number_of_championships DESC",
        "SELECT i.name FROM institution i JOIN (SELECT institution_id FROM championship ORDER BY number_of_championships DESC) c ON i.institution_id = c.institution_id"
      ]
    ]
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "nlq": "What are the names of institutions, ordered descending by their number of championships?",
    "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
    "infer_predictions": [
      [
        "SELECT i.name FROM institution i INNER JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship ORDER BY number_of_championships DESC)",
        "SELECT inst.name FROM institution inst JOIN championship champ ON inst.institution_id = champ.institution_id ORDER BY champ.number_of_championships DESC",
        "SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship ORDER BY number_of_championships DESC) LIMIT 10",
        "SELECT inst.name FROM institution AS inst INNER JOIN championship AS champ ON inst.institution_id = champ.institution_id ORDER BY champ.number_of_championships DESC",
        "SELECT DISTINCT i.name FROM institution i, championship c WHERE i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT i.name FROM institution AS i JOIN championship AS c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT i.name FROM institution i LEFT JOIN championship c ON i.institution_id = c.institution_id ORDER BY c.number_of_championships DESC",
        "SELECT institution.name FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id ORDER BY championship.number_of_championships DESC"
      ]
    ]
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "nlq": "List the names of institutions with at least one championship.",
    "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE c.number_of_championships >= 1",
        "SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships > 0)",
        "SELECT DISTINCT institution.name FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id AND championship.number_of_championships > 0",
        "SELECT DISTINCT inst.name FROM institution inst, championship champ WHERE inst.institution_id = champ.institution_id AND champ.number_of_championships > 0",
        "SELECT DISTINCT i.name FROM institution i WHERE EXISTS (SELECT 1 FROM championship c WHERE c.institution_id = i.institution_id AND c.number_of_championships > 0)",
        "SELECT name FROM institution WHERE institution_id IN (SELECT DISTINCT institution_id FROM championship WHERE number_of_championships >= 1)",
        "SELECT name FROM institution i WHERE i.institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships > 0)",
        "SELECT name FROM institution WHERE EXISTS (SELECT * FROM championship WHERE championship.institution_id = institution.institution_id AND number_of_championships > 0)",
        "SELECT institution.name FROM institution JOIN championship ON institution.institution_id = championship.institution_id WHERE championship.number_of_championships >= 1 GROUP BY institution.name",
        "SELECT i.name FROM institution i INNER JOIN championship c ON i.institution_id = c.institution_id GROUP BY i.name HAVING SUM(c.number_of_championships) > 0"
      ]
    ]
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "nlq": "What are the names of institutions that have 1 or more championships?",
    "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
    "infer_predictions": [
      [
        "SELECT i.name FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE c.number_of_championships >= 1",
        "SELECT name FROM institution WHERE institution_id IN (SELECT institution_id FROM championship WHERE number_of_championships >= 1)",
        "SELECT DISTINCT i.name FROM institution i, championship c WHERE i.institution_id = c.institution_id AND c.number_of_championships >= 1",
        "SELECT name FROM institution WHERE EXISTS (SELECT 1 FROM championship WHERE championship.institution_id = institution.institution_id AND number_of_championships >= 1)",
        "SELECT i.name FROM institution i INNER JOIN championship c ON i.institution_id = c.institution_id AND c.number_of_championships >= 1",
        "SELECT name FROM institution i WHERE i.institution_id IN (SELECT institution_id FROM championship c WHERE c.number_of_championships >= 1)",
        "SELECT i.name FROM institution i WHERE (SELECT COUNT(*) FROM championship c WHERE c.institution_id = i.institution_id AND c.number_of_championships >= 1) > 0",
        "SELECT name FROM institution WHERE institution_id IN (SELECT c.institution_id FROM championship c WHERE c.number_of_championships >= 1 GROUP BY c.institution_id)",
        "SELECT i.name FROM institution i INNER JOIN (SELECT institution_id FROM championship WHERE number_of_championships >= 1) c ON i.institution_id = c.institution_id"
      ]
    ]
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "nlq": "What is the total number of championship of institution with public affiliation?",
    "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
    "infer_predictions": [
      [
        "SELECT SUM(championship.number_of_championships) FROM championship JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public'",
        "SELECT SUM(number_of_championships) FROM championship INNER JOIN institution USING (institution_id) WHERE affiliation = 'Public'",
        "SELECT TOTAL(number_of_championships) FROM championship INNER JOIN institution ON institution.institution_id = championship.institution_id WHERE affiliation = 'Public'",
        "SELECT SUM(c.number_of_championships) FROM championship c JOIN institution i ON i.institution_id = c.institution_id WHERE i.affiliation = 'Public'",
        "SELECT TOTAL(c.number_of_championships) FROM championship c INNER JOIN institution i ON c.institution_id = i.institution_id WHERE i.affiliation = 'Public'",
        "SELECT SUM(number_of_championships) AS TotalChampionships FROM institution JOIN championship ON institution.institution_id = championship.institution_id WHERE institution.affiliation = 'Public'",
        "SELECT TOTAL(c.number_of_championships) FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE i.affiliation = 'Public'",
        "SELECT SUM(number_of_championships) FROM (SELECT number_of_championships FROM championship JOIN institution ON championship.institution_id = institution.institution_id WHERE institution.affiliation = 'Public')",
        "SELECT TOTAL(number_of_championships) FROM (SELECT number_of_championships, affiliation FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id) AS result WHERE affiliation = 'Public'",
        "SELECT SUM(championship.number_of_championships) FROM institution INNER JOIN championship USING (institution_id) WHERE institution.affiliation = 'Public'"
      ]
    ]
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "nlq": "Return the total number of championships of institutions that have a Public affiliation.",
    "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
    "infer_predictions": [
      [
        "SELECT SUM(c.number_of_championships) FROM institution i JOIN championship c ON i.institution_id = c.institution_id WHERE i.affiliation = 'Public'",
        "SELECT SUM(number_of_championships) FROM institution INNER JOIN championship ON institution.institution_id = championship.institution_id WHERE affiliation = 'Public'",
        "SELECT TOTAL(championship.number_of_championships) FROM institution JOIN championship ON institution.institution_id = championship.institution_id WHERE institution.affiliation = 'Public'",
        "SELECT SUM(number_of_championships) AS total_championships FROM institution INNER JOIN championship USING(institution_id) WHERE affiliation = 'Public'",
        "SELECT TOTAL(c.number_of_championships) FROM institution i INNER JOIN championship c ON i.institution_id = c.institution_id WHERE i.affiliation = 'Public'",
        "SELECT SUM(c.number_of_championships) AS TotalChampionships FROM institution AS i JOIN championship AS c ON i.institution_id = c.institution_id WHERE i.affiliation = 'Public'",
        "SELECT SUM(championship.number_of_championships) FROM institution JOIN championship ON institution.institution_id = championship.institution_id WHERE institution.affiliation = 'Public'",
        "SELECT TOTAL(c.number_of_championships) FROM championship c JOIN institution i ON c.institution_id = i.institution_id WHERE i.affiliation = 'Public'",
        "SELECT COUNT(*) * (SELECT number_of_championships FROM championship) FROM institution JOIN championship ON institution.institution_id = championship.institution_id WHERE affiliation = 'Public' GROUP BY affiliation",
        "SELECT SUM(n.number_of_championships) FROM institution i INNER JOIN championship n ON i.institution_id = n.institution_id WHERE i.affiliation = 'Public'"
      ]
    ]
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "nlq": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
    "infer_predictions": [
      [
        "SELECT affiliation, COUNT(*) AS num_institutions FROM institution GROUP BY affiliation",
        "SELECT DISTINCT i.affiliation, COUNT(i.institution_id) AS num_institutions FROM institution i GROUP BY i.affiliation",
        "SELECT affiliation AS type, COUNT(institution_id) AS num_institutions FROM institution GROUP BY affiliation",
        "SELECT i.affiliation, COUNT(DISTINCT i.institution_id) FROM institution i GROUP BY i.affiliation",
        "SELECT inst.affiliation, COUNT(inst.institution_id) FROM institution AS inst GROUP BY inst.affiliation",
        "SELECT t1.affiliation, COUNT(t1.institution_id) AS count_of_institutions FROM institution AS t1 GROUP BY t1.affiliation",
        "SELECT aff.affiliation, COUNT(aff.affiliation) AS institution_count FROM institution aff GROUP BY aff.affiliation",
        "SELECT b.affiliation, COUNT(DISTINCT b.institution_id) AS institutions_counter FROM institution b GROUP BY b.affiliation",
        "SELECT affili, COUNT(*) FROM (SELECT affiliation AS affili FROM institution) GROUP BY affili",
        "SELECT inst_aff.affiliation, COUNT(*) AS count FROM institution inst_aff GROUP BY inst_aff.affiliation"
      ]
    ]
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "nlq": "How many institutions are there for each type of affiliation?",
    "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
    "infer_predictions": [
      [
        "SELECT affiliation, COUNT(*) AS total_institutions FROM institution GROUP BY affiliation",
        "SELECT i.affiliation, COUNT(i.institution_id) as total_institutions FROM institution i GROUP BY i.affiliation",
        "SELECT affiliation, COUNT(institution_id) FROM institution GROUP BY affiliation",
        "SELECT i.affiliation, COUNT(*) FROM institution i GROUP BY i.affiliation",
        "SELECT COUNT(*) as total_institutions, affiliation FROM institution GROUP BY affiliation",
        "SELECT a.affiliation, COUNT(a.institution_id) FROM institution a GROUP BY a.affiliation",
        "SELECT i.affiliation, COUNT(i.name) AS total_institutions FROM institution i GROUP BY i.affiliation",
        "SELECT DISTINCT affiliation, COUNT(affiliation) OVER (PARTITION BY affiliation) AS total_institutions FROM institution",
        "SELECT affiliation, COUNT(institution_id) AS total_institutions FROM institution GROUP BY affiliation ORDER BY affiliation",
        "SELECT affiliation AS TYPE_OF_AFFILIATION, COUNT(institution_id) AS COUNT_OF_INSTITUTIONS FROM institution GROUP BY TYPE_OF_AFFILIATION"
      ]
    ]
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "nlq": "What is the most common type of affiliation for institutions?",
    "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT I.affiliation FROM institution I GROUP BY I.affiliation ORDER BY COUNT(I.affiliation) DESC LIMIT 1",
        "SELECT affiliation FROM (SELECT affiliation, COUNT(*) AS cnt FROM institution GROUP BY affiliation) ORDER BY cnt DESC LIMIT 1",
        "SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM institution GROUP BY affiliation))",
        "SELECT I.affiliation FROM (SELECT affiliation, COUNT(affiliation) as affiliation_count FROM institution GROUP BY affiliation) I ORDER BY I.affiliation_count DESC LIMIT 1",
        "SELECT I.affiliation FROM (SELECT affiliation, COUNT(*) AS total FROM institution GROUP BY affiliation) AS I ORDER BY total DESC LIMIT 1",
        "SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(institution_id) DESC LIMIT 1",
        "SELECT I.affiliation FROM institution I GROUP BY I.affiliation ORDER BY COUNT(I.institution_id) DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "nlq": "Return the most common type of affiliation across all institutions.",
    "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT affiliation FROM (SELECT affiliation, COUNT(*) AS num FROM institution GROUP BY affiliation) ORDER BY num DESC LIMIT 1",
        "SELECT I.affiliation FROM institution I GROUP BY I.affiliation ORDER BY COUNT(I.affiliation) DESC LIMIT 1",
        "SELECT top_affiliations.affiliation FROM (SELECT affiliation, COUNT(*) AS frequency FROM institution GROUP BY affiliation) AS top_affiliations ORDER BY top_affiliations.frequency DESC LIMIT 1",
        "WITH CountedAffiliations AS (SELECT affiliation, COUNT(*) cnt FROM institution GROUP BY affiliation) SELECT affiliation FROM CountedAffiliations ORDER BY cnt DESC LIMIT 1",
        "SELECT DISTINCT affiliation FROM institution WHERE affiliation = (SELECT affiliation FROM institution GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT affiliation FROM institution GROUP BY affiliation HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) Cnt FROM institution GROUP BY affiliation))",
        "WITH RankAffiliations AS (SELECT affiliation, RANK() OVER (ORDER BY COUNT(*) DESC) as rnk FROM institution GROUP BY affiliation) SELECT affiliation FROM RankAffiliations WHERE rnk = 1"
      ]
    ]
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "nlq": "In which years were more than one institution founded?",
    "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT founded FROM institution GROUP BY founded HAVING COUNT(*) > 1",
        "SELECT i.founded FROM institution i GROUP BY i.founded HAVING COUNT(i.institution_id) > 1",
        "SELECT founded FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1",
        "SELECT r.founded FROM (SELECT founded, COUNT(*) AS c FROM institution GROUP BY founded) r WHERE r.c > 1",
        "SELECT founded FROM (SELECT founded FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1)",
        "SELECT t.founded FROM (SELECT founded, COUNT(*) AS num FROM institution GROUP BY founded) t WHERE num > 1",
        "SELECT founded FROM (SELECT founded, count(*) as count_num FROM institution GROUP BY founded) WHERE count_num > 1",
        "SELECT DISTINCT i.founded FROM institution i WHERE (SELECT COUNT(*) FROM institution WHERE founded = i.founded) > 1",
        "SELECT x.founded FROM (SELECT founded, COUNT(institution_id) count_inst FROM institution GROUP BY founded) x WHERE x.count_inst > 1"
      ]
    ]
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "nlq": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
    "infer_predictions": [
      [
        "SELECT founded, COUNT(*) AS count FROM institution GROUP BY founded HAVING COUNT(*) > 1",
        "SELECT i.founded, COUNT(institution_id) AS total FROM institution AS i GROUP BY i.founded HAVING COUNT(i.institution_id) > 1",
        "SELECT founded, COUNT(institution_id) FROM institution GROUP BY founded HAVING COUNT(institution_id) > 1",
        "SELECT i.founded, COUNT(*) FROM institution i GROUP BY i.founded HAVING COUNT(*) > 1",
        "SELECT founded, COUNT(*) AS institutions_count FROM institution GROUP BY founded HAVING institutions_count > 1",
        "SELECT founded AS year, COUNT(*) AS total_found FROM institution GROUP BY year HAVING total_found > 1",
        "WITH founded_groups AS (SELECT founded, COUNT(*) AS total FROM institution GROUP BY founded) SELECT founded, total FROM founded_groups WHERE total > 1",
        "SELECT t.founded, t.count FROM (SELECT founded, COUNT(*) AS count FROM institution GROUP BY founded) t WHERE t.count > 1",
        "SELECT founded AS founding_year, COUNT(*) AS count_of_institutions FROM institution GROUP BY founding_year HAVING count_of_institutions > 1",
        "SELECT founded, COUNT(institution_id) AS num_institutions FROM institution GROUP BY founded HAVING num_institutions > 1"
      ]
    ]
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "nlq": "List the nicknames of institutions in descending order of capacity.",
    "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
    "infer_predictions": [
      [
        "SELECT c.nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.capacity DESC",
        "SELECT nickname FROM championship WHERE institution_id IN (SELECT institution_id FROM institution ORDER BY capacity DESC)",
        "SELECT nickname FROM championship AS c JOIN institution AS i ON c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT c.nickname FROM championship c, institution i WHERE c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT c.nickname FROM institution i INNER JOIN championship c ON i.institution_id = c.institution_id ORDER BY i.capacity DESC",
        "SELECT (SELECT nickname FROM championship WHERE institution_id = i.institution_id) FROM institution i ORDER BY capacity DESC",
        "SELECT nickname FROM (SELECT c.nickname, i.capacity FROM championship c LEFT JOIN institution i ON c.institution_id = i.institution_id) ORDER BY capacity DESC",
        "SELECT nickname FROM championship INNER JOIN institution USING (institution_id) ORDER BY capacity DESC",
        "SELECT SUB.nickname FROM institution AS INS INNER JOIN (SELECT institution_id, nickname FROM championship) AS SUB ON INS.institution_id = SUB.institution_id ORDER BY INS.capacity DESC"
      ]
    ]
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "nlq": "What are the nicknames of institutions, ordered descending by their capacities?",
    "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
    "infer_predictions": [
      [
        "SELECT c.nickname FROM championship c JOIN institution i ON c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT nickname FROM championship WHERE institution_id IN (SELECT institution_id FROM institution ORDER BY capacity DESC)",
        "SELECT c.nickname FROM championship AS c INNER JOIN institution AS i ON c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT nickname FROM (SELECT * FROM championship JOIN institution USING (institution_id) ORDER BY capacity DESC)",
        "SELECT championship.nickname FROM championship JOIN institution ON championship.institution_id = institution.institution_id ORDER BY institution.capacity DESC",
        "SELECT c.nickname FROM championship c, institution i WHERE c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT c.nickname FROM (SELECT * FROM institution ORDER BY capacity DESC) i JOIN championship c ON c.institution_id = i.institution_id",
        "SELECT nickname FROM championship c JOIN institution i ON c.institution_id = i.institution_id ORDER BY i.capacity DESC",
        "SELECT nickname FROM (SELECT championship.nickname, institution.capacity FROM championship INNER JOIN institution ON championship.institution_id = institution.institution_id) ORDER BY capacity DESC",
        "SELECT nickname FROM championship INNER JOIN institution ON championship.institution_id = institution.institution_id ORDER BY capacity DESC"
      ]
    ]
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "nlq": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
    "infer_predictions": [
      [
        "SELECT SUM(enrollment) FROM institution WHERE city IN ('Vancouver', 'Calgary')",
        "SELECT SUM(i.enrollment) FROM institution i WHERE i.city = 'Vancouver' OR i.city = 'Calgary'",
        "SELECT TOTAL(institution.enrollment) FROM institution WHERE institution.city = 'Calgary' OR institution.city = 'Vancouver'",
        "SELECT SUM(enrollment) AS total_enrollment FROM institution WHERE city = 'Calgary' UNION ALL SELECT SUM(enrollment) FROM institution WHERE city = 'Vancouver'",
        "SELECT SUM(enrollment) FROM institution WHERE city LIKE 'Vancouver' OR city LIKE 'Calgary'",
        "SELECT SUM( CASE WHEN city = 'Calgary' THEN enrollment WHEN city = 'Vancouver' THEN enrollment ELSE 0 END ) FROM institution",
        "SELECT SUM(enrollment) FROM institution WHERE city = 'Vancouver' UNION SELECT SUM(enrollment) FROM institution WHERE city = 'Calgary'",
        "SELECT TOTAL(enrollment) FROM institution WHERE city IN ('Calgary', 'Vancouver')",
        "SELECT SUM(i.enrollment) FROM institution AS i WHERE i.city IN('Calgary', 'Vancouver')",
        "SELECT (SELECT SUM(enrollment) FROM institution WHERE city = 'Calgary') + (SELECT SUM(enrollment) FROM institution WHERE city = 'Vancouver') AS total_enrollment"
      ]
    ]
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "nlq": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
    "infer_predictions": [
      [
        "SELECT enrollment FROM institution WHERE city IN ('Calgary', 'Vancouver')",
        "SELECT institution.enrollment FROM institution WHERE institution.city = 'Calgary' OR institution.city = 'Vancouver'",
        "SELECT i.enrollment FROM institution i WHERE i.city IN ('Vancouver', 'Calgary')",
        "SELECT e.enrollment FROM institution e WHERE e.city IN ('Vancouver', 'Calgary')",
        "SELECT en.enrollment FROM institution en WHERE en.city = 'Calgary' OR en.city = 'Vancouver'",
        "SELECT i.enrollment FROM institution as i WHERE i.city IN ('Vancouver', 'Calgary')",
        "SELECT e.enrollment FROM institution e WHERE e.city = 'Calgary' OR e.city = 'Vancouver'",
        "SELECT ins.enrollment FROM institution as ins WHERE ins.city IN ('Vancouver', 'Calgary')"
      ]
    ]
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "nlq": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
    "infer_predictions": [
      [
        "SELECT DISTINCT i1.province FROM institution i1, institution i2 WHERE i1.province = i2.province AND i1.founded < 1920 AND i2.founded > 1950",
        "SELECT DISTINCT province FROM institution WHERE province IN (SELECT province FROM institution WHERE founded < 1920) AND province IN (SELECT province FROM institution WHERE founded > 1950)",
        "SELECT DISTINCT i1.province FROM institution i1 JOIN institution i2 ON i1.province = i2.province WHERE i1.founded < 1920 AND i2.founded > 1950",
        "SELECT i1.province FROM institution i1 WHERE EXISTS (SELECT 1 FROM institution i2 WHERE i1.province = i2.province AND i2.founded > 1950) AND i1.founded < 1920",
        "SELECT DISTINCT p.province FROM institution p WHERE (SELECT COUNT(*) FROM institution WHERE province = p.province AND founded < 1920) > 0 AND (SELECT COUNT(*) FROM institution WHERE province = p.province AND founded > 1950) > 0",
        "SELECT DISTINCT province FROM institution WHERE founded < 1920 INTERSECT SELECT DISTINCT province FROM institution WHERE founded > 1950",
        "SELECT DISTINCT province FROM (SELECT province, MIN(founded) AS earliest, MAX(founded) AS latest FROM institution GROUP BY province) WHERE earliest < 1925 AND latest > 1950",
        "SELECT sub.province FROM (SELECT province, COUNT(CASE WHEN founded < 1920 THEN 1 ELSE NULL END) AS before1920, COUNT(CASE WHEN founded > 1950 THEN 1 ELSE NULL END) AS after1950 FROM institution GROUP BY province) sub WHERE sub.before1920 > 0 AND sub.after1950 > 0",
        "WITH year_segments AS (SELECT province, founded FROM institution GROUP BY province, founded) SELECT DISTINCT y1.province FROM year_segments y1, year_segments y2 WHERE y1.province = y2.province AND y1.founded < 1920 AND y2.founded > 1950"
      ]
    ]
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "nlq": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
    "infer_predictions": [
      [
        "SELECT DISTINCT i1.province FROM institution i1 WHERE i1.founded < 1920 AND EXISTS (SELECT i2.province FROM institution i2 WHERE i2.province = i1.province AND i2.founded > 1950)",
        "SELECT province FROM institution GROUP BY province HAVING MIN(founded) < 1920 AND MAX(founded) > 1950",
        "SELECT A.province FROM institution A JOIN institution B ON A.province = B.province WHERE A.founded < 1920 AND B.founded > 1950",
        "SELECT A.province FROM (SELECT province FROM institution WHERE founded < 1920) A JOIN (SELECT province FROM institution WHERE founded > 1950) B ON A.province = B.province",
        "SELECT province FROM (SELECT DISTINCT province FROM institution WHERE founded < 1920 INTERSECT SELECT DISTINCT province FROM institution WHERE founded > 1950) T",
        "SELECT DISTINCT first.province FROM institution first, institution second WHERE first.province = second.province AND first.founded < 1920 AND second.founded > 1950",
        "SELECT DISTINCT B.province FROM institution AS A, institution AS B WHERE A.province = B.province AND A.founded < 1920 AND B.founded > 1950",
        "SELECT DISTINCT province FROM institution WHERE province IN (SELECT province FROM institution WHERE founded < 1920) AND province IN (SELECT province FROM institution WHERE founded > 1950)",
        "SELECT X.province FROM (SELECT province FROM institution WHERE founded < 1920) AS X INNER JOIN (SELECT province FROM institution WHERE founded > 1950) AS Y ON X.province = Y.province",
        "SELECT province FROM institution i WHERE EXISTS (SELECT 1 FROM institution WHERE province = i.province AND founded < 1920) AND EXISTS (SELECT 1 FROM institution WHERE province = i.province AND founded > 1950)"
      ]
    ]
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "nlq": "How many distinct provinces are the institutions in?",
    "gold": "SELECT count(DISTINCT Province) FROM institution",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT province) FROM institution",
        "SELECT COUNT(*) FROM (SELECT DISTINCT province FROM institution)",
        "SELECT COUNT(province) FROM (SELECT DISTINCT province FROM institution)",
        "SELECT COUNT(DISTINCT province) FROM institution GROUP BY province",
        "SELECT DISTINCT COUNT(province) FROM (SELECT DISTINCT province FROM institution)",
        "SELECT COUNT(DISTINCT province) FROM (SELECT province FROM institution GROUP BY province)",
        "SELECT COUNT(*) FROM (SELECT province FROM institution GROUP BY province)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT province FROM institution) as distinct_provinces"
      ]
    ]
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "nlq": "Count the number of different provinces that have institutions.",
    "gold": "SELECT count(DISTINCT Province) FROM institution",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT province) FROM institution",
        "SELECT COUNT(*) FROM (SELECT DISTINCT province FROM institution)",
        "SELECT COUNT(DISTINCT i.province) FROM institution i",
        "SELECT COUNT(*) FROM (SELECT province FROM institution GROUP BY province)",
        "SELECT COUNT(DISTINCT province) AS distinct_provinces_count FROM institution",
        "SELECT COUNT(*) FROM (SELECT DISTINCT i.province FROM institution i)",
        "SELECT COUNT(*) FROM (SELECT 1 FROM institution GROUP BY province)"
      ]
    ]
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "nlq": "Select all details of all warehouses.",
    "gold": "SELECT * FROM warehouses",
    "infer_predictions": [
      [
        "SELECT * FROM warehouses",
        "SELECT location, code, capacity FROM warehouses",
        "SELECT location AS Location, code AS Code, capacity AS Capacity FROM warehouses",
        "SELECT location, code, capacity FROM warehouses WHERE 1 = 1",
        "SELECT w.* FROM warehouses w",
        "SELECT w.location, w.code, w.capacity FROM warehouses w",
        "SELECT ALL location, code, capacity FROM warehouses",
        "SELECT w.location AS Location, w.code AS Code, w.capacity AS Capacity FROM warehouses w"
      ]
    ]
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "nlq": "What is all the information about the warehouses?",
    "gold": "SELECT * FROM warehouses",
    "infer_predictions": [
      [
        "SELECT * FROM warehouses;",
        "SELECT code, location, capacity FROM warehouses;",
        "SELECT DISTINCT warehouses.* FROM warehouses;",
        "SELECT ALL code, location, capacity FROM warehouses;",
        "SELECT * FROM warehouses WHERE code IS NOT NULL;",
        "SELECT * FROM warehouses ORDER BY code;",
        "SELECT * FROM warehouses WHERE location LIKE '%';",
        "SELECT code AS 'Warehouse Code', location AS 'Warehouse Location', capacity AS 'Warehouse Capacity' FROM warehouses;"
      ]
    ]
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "nlq": "Find all different contents stored in New York.",
    "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT boxes.contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York'",
        "SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York') GROUP BY contents",
        "SELECT DISTINCT b.contents FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location = 'New York'",
        "SELECT DISTINCT contents FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code AND warehouses.location = 'New York'",
        "SELECT DISTINCT b.contents FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location = 'New York'",
        "SELECT DISTINCT contents FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York'",
        "SELECT DISTINCT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code AND w.location = 'New York'",
        "SELECT DISTINCT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT b.contents FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location = 'New York' GROUP BY b.contents"
      ]
    ]
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "nlq": "What are all the different contents stored in boxes in New York?",
    "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York'",
        "SELECT DISTINCT b.contents FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location = 'New York'",
        "SELECT DISTINCT contents FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code AND warehouses.location = 'New York'",
        "SELECT DISTINCT b.contents FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location = 'New York'",
        "SELECT DISTINCT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT contents FROM boxes WHERE EXISTS (SELECT 1 FROM warehouses WHERE warehouses.code = boxes.warehouse AND location = 'New York')",
        "SELECT DISTINCT boxes.contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code AND warehouses.location = 'New York'",
        "SELECT DISTINCT b.contents FROM warehouses w JOIN boxes b ON w.code = b.warehouse AND w.location = 'New York'",
        "SELECT DISTINCT contents FROM (SELECT contents, warehouse FROM boxes) AS boxes_join WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT c.contents FROM boxes c JOIN warehouses w ON c.warehouse = w.code WHERE w.location = 'New York'"
      ]
    ]
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "nlq": "Select contents of all boxes with a value larger than $150.",
    "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
    "infer_predictions": [
      [
        "SELECT contents FROM boxes WHERE value > 150",
        "SELECT b.contents FROM boxes AS b WHERE b.value > 150",
        "SELECT boxes.contents FROM boxes WHERE boxes.value > 150",
        "SELECT contents FROM boxes WHERE value > 150.0",
        "SELECT b.contents FROM boxes b WHERE b.value > 150.0",
        "SELECT contents FROM boxes b WHERE b.value > 150",
        "SELECT contents FROM boxes WHERE value > 150;",
        "SELECT contents FROM boxes WHERE value > '$150'"
      ]
    ]
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "nlq": "What are the contents of boxes with value greater than 150?",
    "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
    "infer_predictions": [
      [
        "SELECT contents FROM boxes WHERE value > 150",
        "SELECT boxes.contents FROM boxes WHERE value > 150",
        "SELECT b.contents FROM boxes b WHERE b.value > 150",
        "SELECT contents FROM boxes WHERE boxes.value > 150",
        "SELECT contents FROM (SELECT * FROM boxes WHERE value > 150) AS filtered_boxes",
        "SELECT b.contents FROM boxes AS b WHERE b.value > 150",
        "SELECT contents FROM boxes b WHERE b.value > 150",
        "SELECT B.contents FROM (SELECT * FROM boxes) B WHERE B.value > 150",
        "SELECT contents FROM (SELECT contents, value FROM boxes) AS temp WHERE value > 150",
        "SELECT (SELECT contents FROM boxes WHERE value > 150)"
      ]
    ]
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "nlq": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT b.warehouse, AVG(b.value) FROM boxes b GROUP BY b.warehouse",
        "SELECT b.warehouse, AVG(value) AS average_value FROM boxes AS b GROUP BY b.warehouse",
        "SELECT warehouse, AVG(value) FROM boxes GROUP BY warehouse",
        "SELECT warehouse AS warehouse_code, AVG(value) AS avg_value FROM boxes GROUP BY warehouse_code",
        "SELECT b.warehouse, AVG(b.value) AS AverageValue FROM boxes b GROUP BY b.warehouse",
        "SELECT w.code, AVG(b.value) FROM warehouses w JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT warehouse, AVG(value) FROM (SELECT warehouse, value FROM boxes) GROUP BY warehouse",
        "SELECT warehouse_code, AVERAGE_value FROM (SELECT warehouse AS warehouse_code, AVG(value) AS AVERAGE_value FROM boxes GROUP BY warehouse) t",
        "SELECT wh.code, AVG(bx.value) FROM warehouses wh JOIN boxes bx ON wh.code = bx.warehouse GROUP BY wh.code",
        "SELECT warehouse_code, avg_val FROM (SELECT b.warehouse AS warehouse_code, AVG(b.value) AS avg_val FROM boxes AS b GROUP BY b.warehouse) sub_query"
      ]
    ]
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "nlq": "What is the average value of boxes for each warehouse?",
    "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT AVG(boxes.value) AS average_value, warehouse FROM boxes GROUP BY warehouse",
        "SELECT warehouse, AVG(value) AS average_value FROM boxes GROUP BY warehouse",
        "SELECT b.warehouse, AVG(b.value) FROM boxes AS b GROUP BY b.warehouse",
        "SELECT AVG(value) AVG_VAL, warehouse WHEREHOUSE_CODE FROM boxes GROUP BY warehouse",
        "SELECT AVG(value), warehouse AS WH_Code FROM boxes GROUP BY WH_Code",
        "SELECT warehouse, ROUND(AVG(value), 2) AS AvgValue FROM boxes GROUP BY warehouse",
        "SELECT AVG(BOX.value) AS AverageVal, BOX.warehouse FROM boxes AS BOX GROUP BY BOX.warehouse",
        "SELECT ROUND(AVG(boxes.value), 2), boxes.warehouse FROM boxes GROUP BY boxes.warehouse"
      ]
    ]
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "nlq": "Find the average and total values of all boxes.",
    "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
    "infer_predictions": [
      [
        "SELECT AVG(value) AS AverageValue, SUM(value) AS TotalValue FROM boxes",
        "SELECT AVG(value) AS AverageValue, TOTAL(value) AS TotalValue FROM boxes",
        "SELECT (SELECT AVG(value) FROM boxes) AS AverageValue, (SELECT SUM(value) FROM boxes) AS TotalValue",
        "SELECT (SELECT AVG(value) FROM boxes) AS AverageValue, (SELECT TOTAL(value) FROM boxes) AS TotalValue",
        "SELECT AVG(b.value) AS AverageValue, SUM(b.value) AS TotalValue FROM boxes b",
        "SELECT AVG(VALUE) AS AverageValue, SUM(VALUE) AS TotalValue FROM boxes",
        "SELECT AB.AverageValue, AB.TotalValue FROM (SELECT AVG(value) AS AverageValue, SUM(value) AS TotalValue FROM boxes) AB",
        "SELECT AVG(value) AS 'AverageValue', SUM(value) AS 'TotalValue' FROM boxes"
      ]
    ]
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "nlq": "What are the average and total values across all boxes?",
    "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
    "infer_predictions": [
      [
        "SELECT AVG(value), SUM(value) FROM boxes",
        "SELECT AVG(value) AS average_value, SUM(value) AS total_value FROM boxes",
        "SELECT (SELECT AVG(value) FROM boxes), (SELECT SUM(value) FROM boxes)",
        "SELECT AVG(b.value) AS Average, SUM(b.value) AS Total FROM boxes AS b",
        "SELECT (SELECT AVG(value) FROM boxes b1), (SELECT SUM(value) FROM boxes b2)",
        "SELECT AVG(b.value), SUM(b.value) FROM boxes b GROUP BY b.code",
        "SELECT AVG(boxes.value), SUM(boxes.value) FROM boxes",
        "SELECT AVG(value), SUM(value) FROM (SELECT value FROM boxes) AS temp",
        "SELECT AVG(value) AS avg_val, SUM(value) AS sum_val FROM (SELECT value FROM boxes) AS a",
        "SELECT AVG(value) avg_Value, SUM(value) sum_Value FROM (SELECT value FROM boxes) box"
      ]
    ]
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "nlq": "Find the average and total capacity of all warehouses.",
    "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT AVG(capacity) AS avg_capacity, SUM(capacity) AS total_capacity FROM warehouses",
        "SELECT AVG(warehouses.capacity) AS avg_capacity, SUM(warehouses.capacity) AS total_capacity FROM warehouses",
        "SELECT AVG(w.capacity) AS avg_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w",
        "SELECT (SELECT AVG(capacity) FROM warehouses) AS avg_capacity, (SELECT SUM(capacity) FROM warehouses) AS total_capacity",
        "SELECT AVG(capacity), SUM(capacity) FROM warehouses",
        "SELECT AVG(w.capacity), SUM(w.capacity) FROM warehouses w",
        "SELECT (SELECT AVG(capacity) FROM warehouses), (SELECT SUM(capacity) FROM warehouses)",
        "SELECT AVG(cap), SUM(cap) FROM (SELECT capacity AS cap FROM warehouses)",
        "SELECT A.avg_capacity, T.total_capacity FROM (SELECT AVG(capacity) AS avg_capacity FROM warehouses) A, (SELECT SUM(capacity) AS total_capacity FROM warehouses) T"
      ]
    ]
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "nlq": "What are the average and total capacities across all warehouses?",
    "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT AVG(capacity) AS average_capacity, SUM(capacity) AS total_capacity FROM warehouses",
        "SELECT AVG(w.capacity) AS average_capacity, SUM(w.capacity) AS total_capacity FROM warehouses w",
        "SELECT AVG(w.capacity), SUM(w.capacity) FROM warehouses w",
        "SELECT (SELECT AVG(capacity) FROM warehouses), (SELECT SUM(capacity) FROM warehouses)",
        "SELECT AVG(ware.capacity), SUM(ware.capacity) FROM warehouses ware",
        "SELECT AVG(capacity), SUM(capacity) FROM (SELECT capacity FROM warehouses)",
        "SELECT (SELECT AVG(warehouses.capacity)), (SELECT SUM(warehouses.capacity)) FROM warehouses",
        "SELECT * FROM (SELECT AVG(capacity) AS average_capacity, SUM(capacity) AS total_capacity FROM warehouses)",
        "SELECT AVG(w.capacity) AS AVERAGE_CAPACITY, SUM(w.capacity) AS TOTAL_CAPACITY FROM warehouses AS w",
        "SELECT AVG(CAPACITY) AS AVERAGE, SUM(CAPACITY) AS TOTAL FROM warehouses"
      ]
    ]
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "nlq": "Find the average and maximum value for each different content.",
    "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT contents, AVG(value) AS AverageValue, MAX(value) AS MaxValue FROM boxes GROUP BY contents"
      ]
    ]
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "nlq": "What are the average and maximum values for each type of content in boxes?",
    "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT contents, AVG(value) AS average_value, MAX(value) AS maximum_value FROM boxes GROUP BY contents",
        "SELECT b.contents, AVG(b.value) AS avg_val, MAX(b.value) AS max_val FROM boxes b GROUP BY b.contents",
        "SELECT contents, AVG(value) average, MAX(value) max FROM boxes GROUP BY contents",
        "SELECT boxes.contents, AVG(boxes.value) AS average_value, MAX(boxes.value) AS maximum_value FROM boxes GROUP BY boxes.contents",
        "SELECT b.contents AS type, AVG(b.value) AS avg_value, MAX(b.value) AS max_value FROM boxes b GROUP BY b.contents",
        "SELECT contents, average_value, maximum_value FROM (SELECT contents, AVG(value) AS average_value, MAX(value) AS maximum_value FROM boxes GROUP BY contents) q",
        "SELECT q.contents, q.avg_value, q.max_value FROM (SELECT contents, AVG(value) AS avg_value, MAX(value) AS max_value FROM boxes GROUP BY contents) q",
        "SELECT contents, AVG(value) AS \"Average Value\", MAX(value) AS \"Maximum Value\" FROM boxes GROUP BY contents",
        "SELECT boxes.contents AS ContentsType, AVG(boxes.value) AS AverageValue, MAX(boxes.value) As MaxValue FROM boxes GROUP BY ContentsType",
        "SELECT q.Contents, q.AvgVal, q.MaxVal FROM (SELECT contents AS Contents, AVG(value) AS AvgVal, MAX(value) AS MaxVal FROM boxes GROUP BY Contents) q"
      ]
    ]
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "nlq": "Find the content that has the highest total values in all boxes.",
    "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT contents FROM boxes GROUP BY contents ORDER BY SUM(value) DESC LIMIT 1",
        "SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY SUM(b.value) DESC LIMIT 1",
        "SELECT boxes.contents FROM boxes GROUP BY boxes.contents ORDER BY SUM(boxes.value) DESC LIMIT 1",
        "SELECT t.contents FROM (SELECT contents, SUM(value) AS total_value FROM boxes GROUP BY contents) t WHERE t.total_value = (SELECT MAX(t2.total_value) FROM (SELECT SUM(value) AS total_value FROM boxes GROUP BY contents) t2)",
        "SELECT contents FROM (SELECT contents, SUM(value) AS total FROM boxes GROUP BY contents ORDER BY total DESC LIMIT 1) AS TopContent",
        "SELECT contents FROM boxes GROUP BY contents HAVING SUM(value) = (SELECT MAX(total) FROM (SELECT SUM(value) AS total FROM boxes GROUP BY contents) sub)",
        "SELECT X.contents FROM (SELECT contents, SUM(value) AS total_value FROM boxes GROUP BY contents) X ORDER BY X.total_value DESC LIMIT 1",
        "SELECT B.contents FROM (SELECT contents, SUM(value) AS total_value FROM boxes GROUP BY contents) B WHERE B.total_value = (SELECT MAX(total_value) FROM (SELECT SUM(value) as total_value FROM boxes GROUP BY contents) C)"
      ]
    ]
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "nlq": "What is the content with the greatest value across all boxes?",
    "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT contents FROM boxes ORDER BY value DESC LIMIT 1",
        "SELECT B.contents FROM boxes B WHERE B.value = (SELECT MAX(value) FROM boxes)",
        "SELECT contents FROM boxes WHERE value = (SELECT MAX(value) FROM boxes)",
        "SELECT B.contents FROM boxes B ORDER BY B.value DESC LIMIT 1",
        "SELECT contents FROM (SELECT contents, value FROM boxes ORDER BY value DESC LIMIT 1)",
        "SELECT contents FROM boxes WHERE value IN (SELECT MAX(value) FROM boxes)"
      ]
    ]
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "nlq": "Select the average value of all the boxes.",
    "gold": "SELECT avg(value) FROM boxes",
    "infer_predictions": [
      [
        "SELECT AVG(value) FROM boxes",
        "SELECT AVG(b.value) AS average_value FROM boxes AS b",
        "SELECT AVG(value) AS avg_value FROM boxes",
        "SELECT AVG(boxes.value) FROM boxes",
        "SELECT AVG(value) AS AverageValue FROM boxes",
        "SELECT (SUM(value)/COUNT(value)) AS average_val FROM boxes",
        "SELECT AVG(BOXES.VALUE) AS AVG_VAL FROM BOXES",
        "SELECT /* AVG calculation */ AVG(value) FROM boxes",
        "SELECT AVG(B.value) FROM boxes B",
        "SELECT AVG(value) AVG_VAL FROM boxes WHERE value IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "nlq": "What is the average value of boxes?",
    "gold": "SELECT avg(value) FROM boxes",
    "infer_predictions": [
      [
        "SELECT AVG(value) FROM boxes",
        "SELECT AVG(b.value) AS average_value FROM boxes b",
        "SELECT AVG(value) AS AvgValue FROM boxes",
        "SELECT AVG(b.value) FROM boxes AS b",
        "SELECT AVG(VALUE) FROM boxes",
        "SELECT AVG(value) FROM boxes b",
        "SELECT (SUM(value) / COUNT(value)) FROM boxes",
        "SELECT (SUM(b.value) / COUNT(*) ) AS average_value FROM boxes b",
        "SELECT AVG(b.value) FROM boxes b WHERE 1 = 1",
        "SELECT AVG(VALUE) AS avg_val FROM boxes"
      ]
    ]
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "nlq": "Select all distinct contents in all the boxes.",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes",
        "SELECT DISTINCT B.contents FROM boxes B",
        "SELECT contents FROM boxes GROUP BY contents",
        "SELECT B.contents FROM boxes B GROUP BY B.contents",
        "SELECT DISTINCT B.contents FROM (SELECT contents FROM boxes) B",
        "SELECT contents FROM (SELECT DISTINCT contents FROM boxes) AS UniqueContents",
        "SELECT DISTINCT contents FROM (SELECT contents FROM boxes) AS B",
        "SELECT B.contents FROM (SELECT DISTINCT contents FROM boxes) B",
        "SELECT contents AS distinct_contents FROM boxes GROUP BY contents"
      ]
    ]
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "nlq": "What are the different contents in boxes?",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes;",
        "SELECT contents FROM boxes GROUP BY contents;",
        "SELECT contents FROM (SELECT DISTINCT contents FROM boxes);",
        "SELECT DISTINCT b.contents FROM boxes b;",
        "SELECT b.contents FROM boxes b GROUP BY b.contents;",
        "SELECT a.contents FROM (SELECT DISTINCT contents FROM boxes) a;",
        "SELECT DISTINCT contents FROM boxes WHERE contents IS NOT NULL;",
        "SELECT x.contents FROM (SELECT DISTINCT contents FROM boxes) x;",
        "SELECT DISTINCT contents FROM boxes b ORDER BY contents;",
        "SELECT b.contents FROM (SELECT DISTINCT contents FROM boxes) b;"
      ]
    ]
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "nlq": "Find the number of all distinct contents in all the boxes.",
    "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT contents) FROM boxes",
        "SELECT COUNT(*) FROM (SELECT DISTINCT contents FROM boxes)",
        "SELECT COUNT(DISTINCT contents) AS num_contents FROM boxes",
        "SELECT COUNT(DISTINCT b.contents) FROM boxes b",
        "SELECT COUNT(DISTINCT c) FROM (SELECT contents AS c FROM boxes)",
        "SELECT COUNT(DISTINCT b.contents) FROM boxes AS b GROUP BY b.contents HAVING COUNT(*) >= 1",
        "SELECT DISTINCT COUNT(contents) FROM boxes GROUP BY contents ORDER BY contents",
        "SELECT SUM(count) FROM (SELECT COUNT(DISTINCT contents) AS count FROM boxes GROUP BY contents)"
      ]
    ]
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "nlq": "How many different contents are stored in boxes?",
    "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT contents) FROM boxes",
        "SELECT COUNT(*) FROM (SELECT DISTINCT contents FROM boxes)",
        "SELECT COUNT(*) FROM (SELECT contents FROM boxes GROUP BY contents)",
        "SELECT COUNT(contents) FROM (SELECT DISTINCT contents FROM boxes AS B)",
        "SELECT COUNT(DISTINCT contents) FROM (SELECT contents FROM boxes)",
        "SELECT COUNT(DISTINCT(contents)) FROM boxes",
        "SELECT COUNT(contents) FROM (SELECT DISTINCT contents FROM boxes GROUP BY contents)",
        "SELECT COUNT(DISTINCT contents) FROM (SELECT contents FROM boxes B)"
      ]
    ]
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "nlq": "Find all distinct locations of warehouses.",
    "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM warehouses;",
        "SELECT location FROM warehouses GROUP BY location;",
        "SELECT DISTINCT w.location FROM warehouses w;",
        "SELECT w.location FROM warehouses w GROUP BY w.location;",
        "SELECT DISTINCT location FROM warehouses ORDER BY location;",
        "SELECT location FROM warehouses WHERE location IS NOT NULL GROUP BY location;",
        "SELECT DISTINCT location FROM warehouses WHERE location IS NOT NULL;",
        "SELECT location FROM warehouses WHERE location IN (SELECT location FROM warehouses) GROUP BY location;",
        "SELECT location FROM (SELECT DISTINCT location FROM warehouses) AS unique_locations;",
        "SELECT DISTINCT w1.location FROM warehouses w1 WHERE EXISTS (SELECT w2.location FROM warehouses w2 WHERE w1.location = w2.location);"
      ]
    ]
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "nlq": "What are the different locations of warehouses?",
    "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT DISTINCT location FROM warehouses;",
        "SELECT location FROM warehouses GROUP BY location;",
        "SELECT location AS 'Locations' FROM warehouses GROUP BY location;",
        "SELECT DISTINCT W.location FROM warehouses W;",
        "SELECT DISTINCT location FROM warehouses ORDER BY location ASC;",
        "SELECT * FROM (SELECT DISTINCT location FROM warehouses);",
        "SELECT location FROM warehouses WHERE location IS NOT NULL GROUP BY location;",
        "SELECT DISTINCT L.location FROM (SELECT location FROM warehouses) AS L;",
        "SELECT DISTINCT location FROM warehouses WHERE location IN (SELECT location FROM warehouses);",
        "SELECT location FROM (SELECT DISTINCT location FROM warehouses) AS UniqueLocations;"
      ]
    ]
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "nlq": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago' OR w.location = 'New York'",
        "SELECT box.code FROM boxes box INNER JOIN warehouses wh ON box.warehouse = wh.code WHERE wh.location IN ('Chicago', 'New York')",
        "SELECT b.code FROM boxes b, warehouses w WHERE b.warehouse = w.code AND (w.location = 'Chicago' OR w.location = 'New York')",
        "SELECT boxes.code FROM boxes WHERE EXISTS (SELECT 1 FROM warehouses WHERE warehouses.code = boxes.warehouse AND location IN ('Chicago','New York'))",
        "SELECT boxes1.code FROM boxes boxes1 INNER JOIN warehouses warehouses1 ON boxes1.warehouse = warehouses1.code WHERE warehouses1.location = 'New York' OR warehouses1.location = 'Chicago'",
        "SELECT code FROM boxes WHERE warehouse IN (SELECT warehouses.code FROM warehouses WHERE location = 'Chicago' OR location = 'New York')",
        "SELECT d.code FROM boxes d JOIN warehouses e ON d.warehouse = e.code WHERE e.location IN ('Chicago', 'New York')",
        "SELECT A.code FROM boxes A WHERE A.warehouse IN (SELECT B.code FROM warehouses B WHERE B.location = 'Chicago' OR B.location = 'New York')",
        "SELECT i.code FROM boxes i WHERE EXISTS (SELECT 1 FROM warehouses j WHERE j.code = i.warehouse AND (j.location = 'Chicago' OR j.location = 'New York'))"
      ]
    ]
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "nlq": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York')",
        "SELECT DISTINCT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT w.code FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location = 'Chicago' OR w.location = 'New York'",
        "SELECT b.code FROM boxes b, warehouses w WHERE b.warehouse = w.code AND (w.location = 'Chicago' OR w.location = 'New York')",
        "SELECT boxes.code FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago' OR warehouses.location = 'New York'",
        "SELECT b.code FROM boxes b WHERE EXISTS (SELECT 1 FROM warehouses w WHERE w.code = b.warehouse AND w.location IN ('Chicago', 'New York'))",
        "SELECT boxes.code FROM boxes INNER JOIN warehouses ON warehouses.code = boxes.warehouse WHERE warehouses.location IN ('Chicago', 'New York')",
        "SELECT b.code FROM boxes b INNER JOIN warehouses w ON w.code = b.warehouse WHERE w.location = 'New York' OR w.location = 'Chicago'",
        "SELECT DISTINCT b.code FROM boxes b LEFT JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')"
      ]
    ]
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "nlq": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT SUM(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York')",
        "SELECT TOTAL(boxes.value) AS total_value FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location IN ('Chicago', 'New York')",
        "SELECT SUM(b.value) FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago' OR w.location = 'New York'",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT TOTAL(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT SUM(value) FROM boxes b, warehouses w WHERE b.warehouse = w.code AND (w.location = 'Chicago' OR w.location = 'New York')",
        "SELECT SUM(b.value) AS TotalValue FROM boxes b CROSS JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT TOTAL(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'New York' OR w.location = 'Chicago'",
        "SELECT SUM(boxes.value) FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago' OR warehouses.location = 'New York'"
      ]
    ]
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "nlq": "What is the total value of boxes located in Chicago or New York?",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT SUM(value) FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE location IN ('Chicago', 'New York')",
        "SELECT SUM(b.value) FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago' OR w.location = 'New York'",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York')",
        "SELECT TOTAL(boxes.value) FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location IN ('Chicago', 'New York')",
        "SELECT SUM(value) FROM boxes b, warehouses w WHERE b.warehouse = w.code AND (w.location = 'Chicago' OR w.location = 'New York')",
        "SELECT TOTAL(value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT SUM(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT SUM(value) AS TotalValue FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location in ('Chicago', 'New York')",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT SUM(value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('New York', 'Chicago')"
      ]
    ]
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "nlq": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT DISTINCT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' OR location = 'New York')",
        "SELECT contents FROM (SELECT DISTINCT contents, warehouse FROM boxes) WHERE warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT DISTINCT b.contents FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York')",
        "SELECT DISTINCT c.contents FROM (SELECT * FROM boxes) AS c JOIN (SELECT * FROM warehouses WHERE location IN ('New York', 'Chicago')) AS d ON c.warehouse = d.code",
        "SELECT DISTINCT contents FROM boxes WHERE exists (SELECT 1 FROM warehouses WHERE (location = 'Chicago' OR location = 'New York') AND code = warehouse)",
        "SELECT DISTINCT bx.contents FROM boxes bx, warehouses wh WHERE bx.warehouse = wh.code AND wh.location IN ('Chicago', 'New York')",
        "SELECT contents FROM boxes GROUP BY contents HAVING warehouse IN (SELECT code FROM warehouses WHERE location IN ('Chicago', 'New York'))",
        "SELECT DISTINCT contents FROM boxes b WHERE b.warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago' UNION SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT bx.contents FROM boxes bx WHERE EXISTS (SELECT * FROM warehouses wh WHERE (wh.location = 'Chicago' OR wh.location = 'New York') AND wh.code = bx.warehouse)"
      ]
    ]
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "nlq": "Find the contents that are stored in both Chicago and New York.",
    "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.contents FROM boxes AS b JOIN warehouses AS w1 ON b.warehouse = w1.code JOIN warehouses AS w2 ON b.warehouse = w2.code WHERE w1.location = 'Chicago' AND w2.location = 'New York'",
        "SELECT b.contents FROM boxes AS b WHERE EXISTS (SELECT 1 FROM warehouses AS w WHERE w.code = b.warehouse AND w.location = 'Chicago') AND EXISTS (SELECT 1 FROM warehouses AS w WHERE w.code = b.warehouse AND w.location = 'New York') GROUP BY b.contents HAVING COUNT(DISTINCT b.warehouse) > 1",
        "SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago') INTERSECT SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT contents FROM boxes AS b1 WHERE b1.warehouse IN (SELECT DISTINCT code FROM warehouses WHERE location = 'Chicago') AND contents IN (SELECT DISTINCT contents FROM boxes AS b2 WHERE b2.warehouse IN (SELECT DISTINCT code FROM warehouses WHERE location = 'New York'))",
        "SELECT contents FROM boxes AS b WHERE EXISTS (SELECT 1 FROM warehouses AS w WHERE w.code = b.warehouse AND w.location = 'Chicago') INTERSECT SELECT contents FROM boxes AS b WHERE EXISTS (SELECT 1 FROM warehouses AS w WHERE w.code = b.warehouse AND w.location = 'New York')",
        "SELECT b.contents FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location IN ('Chicago', 'New York') GROUP BY b.contents HAVING COUNT(DISTINCT w.location) = 2",
        "SELECT b.contents FROM boxes AS b, warehouses AS w1, warehouses AS w2 WHERE b.warehouse = w1.code AND w1.location = 'Chicago' AND b.warehouse = w2.code AND w2.location = 'New York'",
        "WITH chicago_boxes AS (SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago'), newyork_boxes AS (SELECT contents FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'New York') SELECT chicago_boxes.contents FROM chicago_boxes JOIN newyork_boxes ON chicago_boxes.contents = newyork_boxes.contents",
        "SELECT contents FROM boxes b WHERE EXISTS (SELECT w1.code FROM warehouses w1 WHERE w1.location = 'Chicago' AND b.warehouse = w1.code) AND EXISTS (SELECT w2.code FROM warehouses w2 WHERE w2.location = 'New York' AND b.warehouse = w2.code)"
      ]
    ]
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "nlq": "Find the type of contents that are not in the warehouses located at New York.",
    "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT b.contents FROM boxes b WHERE b.warehouse NOT IN (SELECT w.code FROM warehouses w WHERE w.location = 'New York')",
        "SELECT contents FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT contents FROM boxes AS b WHERE NOT EXISTS (SELECT 1 FROM warehouses AS w WHERE w.location = 'New York' AND w.code = b.warehouse)",
        "SELECT contents FROM boxes EXCEPT SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT b.contents FROM boxes b LEFT JOIN warehouses w ON b.warehouse = w.code WHERE w.location != 'New York' OR w.location IS NULL",
        "SELECT b.contents FROM boxes b WHERE b.warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT contents FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York') GROUP BY contents",
        "SELECT boxes.contents FROM (SELECT contents, warehouse FROM boxes) boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT b.contents FROM boxes b LEFT OUTER JOIN warehouses w ON b.warehouse = w.code WHERE w.location <> 'New York' OR w.location IS NULL",
        "SELECT DISTINCT contents FROM boxes AS b LEFT JOIN warehouses w ON b.warehouse = w.code WHERE w.location <> 'New York' OR w.location IS NULL"
      ]
    ]
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "nlq": "What types of contents cannot be found in warehouses in New York?",
    "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "SELECT DISTINCT b.contents FROM boxes AS b LEFT JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location <> 'New York' OR w.location IS NULL",
        "SELECT DISTINCT contents FROM boxes WHERE contents NOT IN (SELECT b.contents FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'New York')",
        "SELECT contents FROM (SELECT contents FROM boxes EXCEPT SELECT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'New York'))",
        "SELECT DISTINCT b.contents FROM boxes b WHERE NOT EXISTS (SELECT 1 FROM warehouses w WHERE b.warehouse = w.code AND w.location = 'New York')",
        "SELECT DISTINCT contents FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location != 'New York' OR location IS NULL)",
        "SELECT DISTINCT contents FROM boxes AS b WHERE NOT EXISTS (SELECT 1 FROM warehouses AS w WHERE w.code = b.warehouse AND w.location = 'New York')",
        "SELECT b.contents FROM boxes b WHERE b.warehouse NOT IN (SELECT w.code FROM warehouses w WHERE w.location = 'New York') GROUP BY b.contents",
        "SELECT DISTINCT contents FROM boxes b WHERE b.warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'New York')",
        "WITH NYWarehouses AS (SELECT code FROM warehouses WHERE location = 'New York') SELECT DISTINCT contents FROM boxes WHERE warehouse NOT IN (SELECT code FROM NYWarehouses)"
      ]
    ]
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "nlq": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT w.location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes b WHERE b.contents = 'Rocks' AND b.warehouse = w.code) AND NOT EXISTS (SELECT 1 FROM boxes b WHERE b.contents = 'Scissors' AND b.warehouse = w.code)",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT DISTINCT location FROM warehouses INNER JOIN boxes ON warehouses.code = boxes.warehouse WHERE boxes.contents = 'Rocks' AND warehouses.code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes WHERE contents = 'Rocks' AND warehouse = w.code) AND NOT EXISTS (SELECT 1 FROM boxes WHERE contents = 'Scissors' AND warehouse = w.code)",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' GROUP BY warehouse HAVING SUM(CASE WHEN contents = 'Scissors' THEN 1 ELSE 0 END) = 0)",
        "SELECT w.location FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse AND b.contents = 'Scissors' WHERE w.code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND b.code IS NULL",
        "SELECT location FROM warehouses WHERE code IN (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT location FROM warehouses AS w WHERE (SELECT COUNT(*) FROM boxes WHERE warehouse = w.code AND contents = 'Rocks') > 0 AND (SELECT COUNT(*) FROM boxes WHERE warehouse = w.code AND contents = 'Scissors') = 0",
        "SELECT location FROM warehouses w WHERE 0 = (SELECT COUNT(*) FROM boxes b WHERE b.warehouse = w.code AND contents = 'Scissors') AND EXISTS (SELECT 1 FROM boxes b2 WHERE b2.contents = 'Rocks' AND b2.warehouse = w.code)",
        "SELECT w.location FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' GROUP BY w.location HAVING COUNT(CASE WHEN b.contents = 'Scissors' THEN 1 END) = 0"
      ]
    ]
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "nlq": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT DISTINCT w.location FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' AND b.warehouse NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' EXCEPT SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT w.location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes WHERE contents = 'Rocks' AND warehouse = w.code) AND NOT EXISTS (SELECT 1 FROM boxes WHERE contents = 'Scissors' AND warehouse = w.code)",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' GROUP BY warehouse HAVING SUM(CASE WHEN contents = 'Scissors' THEN 1 ELSE 0 END) = 0)",
        "SELECT DISTINCT w.location FROM warehouses w, boxes b WHERE w.code = b.warehouse AND b.contents = 'Rocks' AND b.warehouse NOT IN (SELECT boxes.warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT DISTINCT location FROM warehouses AS w JOIN boxes AS b ON w.code = b.warehouse WHERE b.contents LIKE 'Rocks' AND NOT EXISTS (SELECT * FROM boxes AS b2 WHERE b2.contents = 'Scissors' AND b2.warehouse = w.code)",
        "SELECT w.location FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' AND b.warehouse NOT IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors') GROUP BY w.location",
        "SELECT DISTINCT location FROM warehouses WHERE code IN (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks') AND NOT EXISTS (SELECT 1 FROM boxes b2 WHERE b2.contents = 'Scissors' AND b2.warehouse = warehouses.code)"
      ]
    ]
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "nlq": "Find the warehouses which store contents Rocks or Scissors.",
    "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT DISTINCT warehouses.location FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse WHERE boxes.contents IN ('Rocks', 'Scissors')",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' OR contents = 'Scissors')",
        "SELECT W.location FROM warehouses W INNER JOIN boxes B ON W.code = B.warehouse WHERE B.contents = 'Rocks' OR B.contents = 'Scissors'",
        "SELECT location FROM warehouses WHERE EXISTS (SELECT 1 FROM boxes WHERE warehouse = warehouses.code AND (contents = 'Rocks' OR contents = 'Scissors'))",
        "SELECT warehouses.location FROM warehouses, boxes WHERE warehouses.code = boxes.warehouse AND (boxes.contents = 'Rocks' OR boxes.contents = 'Scissors')",
        "SELECT DISTINCT W.location FROM warehouses W, boxes B WHERE W.code = B.warehouse AND B.contents IN ('Rocks', 'Scissors')",
        "SELECT location FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse WHERE boxes.contents IN ('Rocks', 'Scissors') GROUP BY location",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors'))",
        "SELECT W.location FROM warehouses W LEFT JOIN boxes B ON W.code = B.warehouse WHERE B.contents = 'Rocks' OR B.contents = 'Scissors'",
        "SELECT location FROM warehouses WHERE code IN (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks' OR contents = 'Scissors')"
      ]
    ]
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "nlq": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT DISTINCT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors')",
        "SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents = 'Rocks' OR b.contents = 'Scissors'",
        "SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks' UNION SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Scissors'",
        "SELECT w.code FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents IN ('Rocks', 'Scissors') GROUP BY w.code",
        "SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents IN ('Rocks', 'Scissors')",
        "SELECT DISTINCT b.warehouse FROM boxes b WHERE EXISTS (SELECT 1 FROM boxes bx WHERE bx.warehouse = b.warehouse AND bx.contents IN ('Rocks', 'Scissors'))",
        "SELECT DISTINCT w.code FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' OR b.contents = 'Scissors'",
        "SELECT warehouse FROM (SELECT DISTINCT warehouse, contents FROM boxes) WHERE contents IN ('Rocks', 'Scissors')",
        "SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents LIKE 'Rocks' OR b.contents LIKE 'Scissors'"
      ]
    ]
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "nlq": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT DISTINCT w.location FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents IN ('Rocks', 'Scissors') GROUP BY w.location HAVING COUNT(DISTINCT b.contents) = 2",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' INTERSECT SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT w.location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes b WHERE b.warehouse = w.code AND b.contents = 'Rocks') AND EXISTS (SELECT 1 FROM boxes b WHERE b.warehouse = w.code AND b.contents = 'Scissors')",
        "SELECT DISTINCT w.location FROM warehouses w, boxes b WHERE w.code = b.warehouse AND b.contents = 'Rocks' AND w.code IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') AND code IN (SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT DISTINCT location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes WHERE contents = 'Rocks' AND warehouse = w.code) AND EXISTS (SELECT 1 FROM boxes WHERE contents = 'Scissors' AND warehouse = w.code)",
        "SELECT DISTINCT w.location FROM warehouses w INNER JOIN boxes b1 ON w.code = b1.warehouse INNER JOIN boxes b2 ON w.code = b2.warehouse WHERE b1.contents = 'Rocks' AND b2.contents = 'Scissors'",
        "SELECT location FROM warehouses WHERE code IN (SELECT b.warehouse FROM boxes b GROUP BY b.warehouse HAVING SUM(CASE WHEN b.contents = 'Rocks' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN b.contents = 'Scissors' THEN 1 ELSE 0 END) > 0)",
        "SELECT location FROM warehouses w JOIN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' UNION SELECT warehouse FROM boxes WHERE contents = 'Scissors') b ON w.code = b.warehouse GROUP BY location HAVING COUNT(*) = 2",
        "SELECT DISTINCT location FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' OR b.contents = 'Scissors' GROUP BY w.location HAVING COUNT(DISTINCT b.contents) = 2"
      ]
    ]
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "nlq": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "infer_predictions": [
      [
        "SELECT DISTINCT w.location FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' OR b.contents = 'Scissors'",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors'))",
        "SELECT w.location FROM warehouses w WHERE EXISTS (SELECT 1 FROM boxes b WHERE b.warehouse = w.code AND b.contents IN ('Rocks', 'Scissors'))",
        "SELECT location FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks' UNION SELECT warehouse FROM boxes WHERE contents = 'Scissors')",
        "SELECT DISTINCT w.location FROM warehouses w, boxes b WHERE w.code = b.warehouse AND (b.contents = 'Rocks' OR b.contents = 'Scissors')",
        "SELECT w.location FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks' OR b.contents = 'Scissors'",
        "SELECT location FROM (SELECT DISTINCT warehouse FROM boxes WHERE contents IN ('Rocks', 'Scissors')) AS w JOIN warehouses ON w.warehouse = warehouses.code",
        "SELECT DISTINCT w1.location FROM warehouses AS w1 LEFT JOIN boxes AS b2 ON w1.code = b2.warehouse WHERE b2.contents IN ('Rocks', 'Scissors')",
        "SELECT DISTINCT location FROM warehouses WHERE code IN (SELECT b.warehouse FROM boxes b WHERE b.contents IN ('Rocks', 'Scissors'))",
        "SELECT location FROM warehouses AS w WHERE EXISTS (SELECT NULL FROM boxes AS b WHERE b.warehouse = w.code AND (b.contents = 'Scissors' OR b.contents = 'Rocks'))"
      ]
    ]
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "nlq": "List the code and contents of all boxes sorted by their values.",
    "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
    "infer_predictions": [
      [
        "SELECT code, contents FROM boxes ORDER BY value",
        "SELECT b.code, b.contents FROM boxes b ORDER BY b.value",
        "SELECT b.code, b.contents FROM boxes AS b ORDER BY b.value ASC",
        "SELECT b.code, contents FROM boxes AS b ORDER BY b.value ASC",
        "SELECT code, b.contents FROM boxes b ORDER BY b.value ASC",
        "SELECT b.code, b.contents FROM boxes AS b ORDER BY b.value",
        "SELECT code as Code, contents as Contents FROM boxes ORDER BY value ASC",
        "SELECT boxes.code, boxes.contents FROM boxes ORDER BY boxes.value",
        "SELECT code, contents FROM boxes ORDER BY value ASC",
        "SELECT boxes.code, boxes.contents FROM boxes ORDER BY value"
      ]
    ]
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "nlq": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
    "infer_predictions": [
      [
        "SELECT code, contents FROM boxes ORDER BY value",
        "SELECT code, contents FROM boxes ORDER BY value ASC",
        "SELECT b.code, b.contents FROM boxes b ORDER BY b.value",
        "SELECT b.code, b.contents FROM boxes AS b ORDER BY b.value ASC",
        "SELECT boxes.code, boxes.contents FROM boxes ORDER BY boxes.value",
        "SELECT boxes.code, boxes.contents FROM boxes ORDER BY boxes.value ASC"
      ]
    ]
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "nlq": "Find the code and contents of the box with the lowest value.",
    "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
    "infer_predictions": [
      [
        "SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)",
        "SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1",
        "SELECT code, contents FROM boxes WHERE value = (SELECT value FROM boxes ORDER BY value ASC LIMIT 1)",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value = (SELECT MIN(value) FROM boxes)",
        "SELECT code, contents FROM boxes ORDER BY value LIMIT 1",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value IN (SELECT MIN(value) FROM boxes)",
        "SELECT boxes.code, boxes.contents FROM boxes INNER JOIN (SELECT MIN(value) AS min_value FROM boxes) min_box ON boxes.value = min_box.min_value",
        "SELECT b.code, b.contents FROM (SELECT * FROM boxes ORDER BY value ASC) b LIMIT 1",
        "SELECT code, contents FROM boxes WHERE value = (SELECT value FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)) LIMIT 1",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value = (SELECT MIN(b2.value) FROM boxes b2)"
      ]
    ]
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "nlq": "What is the code and contents for the box that has the smallest value?",
    "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
    "infer_predictions": [
      [
        "SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes)",
        "SELECT b.code, b.contents FROM boxes b ORDER BY b.value ASC LIMIT 1",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value IN (SELECT MIN(value) FROM boxes)",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value = (SELECT MIN(b2.value) FROM boxes b2)",
        "SELECT b.code, b.contents FROM boxes AS b JOIN (SELECT MIN(value) AS min_val FROM boxes) AS bm ON b.value = bm.min_val",
        "SELECT code, contents FROM boxes WHERE value = (SELECT MIN(value) FROM boxes LIMIT 1)",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value = (SELECT value FROM boxes ORDER BY value ASC LIMIT 1)",
        "SELECT b1.code, b1.contents FROM boxes b1 WHERE b1.value = (SELECT MIN(b2.value) FROM boxes b2 WHERE b2.code = b1.code)",
        "SELECT code, contents FROM boxes WHERE value = (SELECT value FROM boxes ORDER BY value LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "nlq": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
    "infer_predictions": [
      [
        "SELECT DISTINCT B.contents FROM boxes B WHERE B.value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(B2.value) FROM boxes B2)",
        "SELECT DISTINCT B.contents FROM boxes B WHERE B.value > (SELECT AVG(B2.value) FROM boxes B2)",
        "SELECT DISTINCT contents FROM boxes AS B1 WHERE B1.value > (SELECT AVG(B2.value) FROM boxes AS B2)",
        "SELECT DISTINCT boxes.contents FROM boxes WHERE boxes.value > (SELECT AVG(boxes.value) FROM boxes)",
        "SELECT DISTINCT boxes.contents FROM boxes WHERE boxes.value > (SELECT AVG(value) FROM boxes AS B)",
        "SELECT DISTINCT B.contents FROM boxes AS B WHERE B.value > (SELECT AVG(boxes.value) FROM boxes)",
        "SELECT DISTINCT B.contents FROM boxes B WHERE B.value > (SELECT AVG(value) FROM boxes AS B2 WHERE B2.code = B.code)",
        "SELECT DISTINCT contents FROM boxes B WHERE value > (SELECT AVG(value) FROM boxes) GROUP BY contents HAVING COUNT(*) >= 1"
      ]
    ]
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "nlq": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT b.contents FROM boxes b WHERE b.value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT contents FROM boxes b1 WHERE b1.value > (SELECT AVG(b2.value) FROM boxes b2)",
        "SELECT contents FROM (SELECT DISTINCT contents, value FROM boxes) WHERE value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT contents FROM boxes WHERE value > (SELECT AVG(b.value) FROM boxes b)",
        "SELECT DISTINCT b.contents FROM boxes b WHERE b.value > (SELECT AVG(value) FROM boxes AS subquery)",
        "SELECT DISTINCT contents FROM boxes b WHERE b.value > (SELECT AVG(value) FROM boxes b2)",
        "SELECT DISTINCT boxes.contents FROM boxes WHERE boxes.value > (SELECT AVG(value) FROM boxes)",
        "SELECT DISTINCT b.contents FROM boxes AS b WHERE b.value > (SELECT AVG(value) FROM boxes WHERE code = b.code)"
      ]
    ]
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "nlq": "List all different types of contents ordered by contents.",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes ORDER BY contents",
        "SELECT contents FROM boxes GROUP BY contents ORDER BY contents",
        "SELECT DISTINCT b.contents FROM boxes b ORDER BY b.contents",
        "SELECT DISTINCT(Boxes.contents) FROM boxes Boxes ORDER BY Boxes.contents",
        "SELECT contents FROM (SELECT DISTINCT contents FROM boxes) ORDER BY contents",
        "SELECT * FROM (SELECT DISTINCT contents FROM boxes ORDER BY contents) AS unique_contents"
      ]
    ]
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "nlq": "What are the different contents of boxes, ordered alphabetically?",
    "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT DISTINCT contents FROM boxes ORDER BY contents ASC",
        "SELECT contents FROM (SELECT DISTINCT contents FROM boxes) ORDER BY contents",
        "SELECT contents FROM boxes GROUP BY contents ORDER BY contents",
        "SELECT b.contents FROM boxes b GROUP BY b.contents ORDER BY b.contents",
        "SELECT b.contents FROM (SELECT DISTINCT contents FROM boxes) b ORDER BY b.contents",
        "SELECT unique_contents.contents FROM (SELECT DISTINCT contents FROM boxes) AS unique_contents ORDER BY unique_contents.contents",
        "SELECT b.contents FROM boxes b WHERE contents IS NOT NULL GROUP BY b.contents ORDER BY b.contents",
        "SELECT DISTINCT b.contents FROM boxes b ORDER BY b.contents",
        "SELECT DISTINCT b.contents FROM (SELECT contents FROM boxes) b ORDER BY b.contents",
        "SELECT contents FROM boxes WHERE contents IN (SELECT DISTINCT contents FROM boxes) ORDER BY contents"
      ]
    ]
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "nlq": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "infer_predictions": [
      [
        "SELECT DISTINCT b1.code FROM boxes b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT code FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks')",
        "SELECT b.code FROM boxes AS b WHERE b.value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks')",
        "SELECT code FROM boxes b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT b1.code FROM boxes AS b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes AS b2 WHERE b2.contents = 'Rocks')",
        "SELECT DISTINCT b.code FROM boxes b WHERE b.value > (SELECT MAX(value) from boxes WHERE contents = 'Rocks')",
        "SELECT code FROM boxes b WHERE value > (SELECT MAX(b.value) FROM boxes b WHERE b.contents = 'Rocks')",
        "SELECT BOXES.code FROM boxes as BOXES WHERE BOXES.value > (SELECT MAX(b.value) FROM boxes AS b WHERE b.contents = 'Rocks')",
        "SELECT boxes.code FROM boxes WHERE boxes.value > (SELECT MAX(value) FROM boxes b WHERE b.contents = 'Rocks')"
      ]
    ]
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "nlq": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "infer_predictions": [
      [
        "SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT code FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks')",
        "SELECT b1.code FROM boxes b1 WHERE b1.value > (SELECT MAX(value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks' GROUP BY contents)",
        "SELECT code FROM boxes WHERE value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT DISTINCT b.code FROM boxes b WHERE b.value > (SELECT MAX(value) FROM boxes WHERE contents = 'Rocks')",
        "SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(value) FROM boxes b2 WHERE b2.contents = 'Rocks')",
        "SELECT b.code FROM boxes b WHERE b.value > (SELECT MAX(value) FROM (SELECT value FROM boxes WHERE contents = 'Rocks'))"
      ]
    ]
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "nlq": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "infer_predictions": [
      [
        "SELECT b.code, b.contents FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors')",
        "SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors')",
        "SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes b WHERE b.contents = 'Scissors')",
        "SELECT code, contents FROM boxes AS b WHERE b.value > (SELECT MAX(b2.value) FROM boxes AS b2 WHERE b2.contents = 'Scissors')",
        "SELECT b1.code, b1.contents FROM boxes b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors')",
        "SELECT b.code, b.contents FROM boxes b WHERE b.value > (SELECT MAX(value) FROM boxes b2 WHERE b2.contents = 'Scissors')",
        "SELECT b1.code, b1.contents FROM boxes b1 WHERE EXISTS (SELECT 1 FROM boxes b2 WHERE b2.contents = 'Scissors' AND b1.value > b2.value)",
        "SELECT code, contents FROM boxes b1 WHERE b1.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors' GROUP BY b2.contents)",
        "SELECT b.code, b.contents FROM boxes AS b WHERE b.value > (SELECT Max(value) FROM boxes WHERE contents = 'Scissors')"
      ]
    ]
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "nlq": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "infer_predictions": [
      [
        "SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors')",
        "SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors') AND contents != 'Scissors'",
        "SELECT code, contents FROM boxes AS a WHERE a.value > (SELECT MAX(b.value) FROM boxes b WHERE b.contents = 'Scissors')",
        "SELECT B.code, B.contents FROM boxes B WHERE B.value > (SELECT MAX(value) FROM boxes WHERE contents = 'Scissors')",
        "SELECT code, contents FROM boxes WHERE value > (SELECT MAX(value) FROM boxes B WHERE B.contents = 'Scissors' GROUP BY B.contents)",
        "SELECT code, contents FROM boxes as T WHERE T.value > (SELECT MAX(B.value) from boxes B WHERE B.contents = 'Scissors')",
        "SELECT code, contents FROM boxes b WHERE b.value > (SELECT MAX(b2.value) FROM boxes b2 WHERE b2.contents = 'Scissors')",
        "SELECT a.code, a.contents FROM boxes a WHERE a.value > (SELECT MAX(b.value) FROM boxes b WHERE b.contents = 'Scissors')"
      ]
    ]
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "nlq": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT SUM(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.capacity = (SELECT MAX(capacity) FROM warehouses)",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses))",
        "SELECT TOTAL(boxes.value) FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.capacity = (SELECT MAX(capacity) FROM warehouses)",
        "SELECT SUM(value) AS TotalValue FROM boxes WHERE warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1)",
        "SELECT SUM(value) FROM boxes b WHERE b.warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1)",
        "SELECT SUM(b.value) FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.capacity = (SELECT MAX(capacity) FROM warehouses w2)",
        "SELECT SUM(value) FROM boxes b WHERE EXISTS (SELECT 1 FROM warehouses w WHERE w.code = b.warehouse AND w.capacity = (SELECT MAX(capacity) FROM warehouses))",
        "SELECT SUM(b.value) FROM boxes b INNER JOIN (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses)) w ON w.code = b.warehouse",
        "SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses))",
        "SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = w.code) FROM warehouses w WHERE capacity = (SELECT MAX(capacity) FROM warehouses) LIMIT 1"
      ]
    ]
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "nlq": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT SUM(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code ORDER BY w.capacity DESC LIMIT 1",
        "SELECT (SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1))",
        "SELECT SUM(value) FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code GROUP BY boxes.warehouse ORDER BY MAX(warehouses.capacity) DESC LIMIT 1",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses))",
        "SELECT SUM(b.value) FROM boxes b INNER JOIN (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses)) maxcap ON b.warehouse = maxcap.code",
        "WITH max_capacity AS (SELECT code FROM warehouses ORDER BY capacity DESC LIMIT 1) SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM max_capacity)",
        "SELECT SUM(b.value) FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.capacity = (SELECT MAX(capacity) FROM warehouses)",
        "SELECT total_value FROM (SELECT SUM(value) as total_value, warehouse FROM boxes GROUP BY warehouse HAVING warehouse = (SELECT code FROM warehouses WHERE capacity = (SELECT MAX(capacity) FROM warehouses)))",
        "SELECT SUM(value) FROM boxes WHERE warehouse = (SELECT code FROM warehouses w ORDER BY w.capacity DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "nlq": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
    "infer_predictions": [
      [
        "SELECT warehouses.code, AVG(boxes.value) AS avg_value FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY warehouses.code HAVING AVG(boxes.value) > 150",
        "SELECT w.code, AVG(b.value) AS average_value FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code GROUP BY w.code HAVING AVG(b.value) > 150",
        "SELECT B.warehouse, AVG(B.value) FROM boxes B, warehouses W WHERE B.warehouse = W.code GROUP BY B.warehouse HAVING AVG(B.value) > 150",
        "SELECT b.warehouse AS 'code', AVG(b.value) AS 'average_value' FROM boxes b, warehouses w WHERE b.warehouse = w.code GROUP BY b.warehouse HAVING AVG(b.value) > 150",
        "SELECT wh.code, AverageValue FROM warehouses wh INNER JOIN (SELECT warehouse, AVG(value) AS AverageValue FROM boxes GROUP BY warehouse) AS AvgValues ON wh.code = AvgValues.warehouse WHERE AvgValues.AverageValue > 150",
        "SELECT wrh.code, AVG(box.value) AS Average_Val FROM warehouses wrh LEFT JOIN boxes box ON wrh.code = box.warehouse GROUP BY wrh.code HAVING Average_Val > 150",
        "SELECT wrh.code, averageBoxValue FROM (SELECT warehouse, AVG(value) AS averageBoxValue FROM boxes GROUP BY warehouse) wrhBoxes JOIN warehouses wrh ON wrhBoxes.warehouse = wrh.code WHERE averageBoxValue > 150",
        "SELECT w.code, (SELECT AVG(value) FROM boxes b WHERE b.warehouse = w.code GROUP BY b.warehouse HAVING AVG(value) > 150) AS avgBoxValue FROM warehouses w",
        "SELECT code, AVGValue FROM (SELECT wh.code AS code, AVG(bxes.value) AS AVGValue FROM warehouses wh JOIN boxes bxes ON wh.code = bxes.warehouse GROUP BY wh.code) t WHERE AVGValue > 150"
      ]
    ]
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "nlq": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
    "infer_predictions": [
      [
        "SELECT boxes.warehouse, AVG(boxes.value) AS average_value FROM boxes GROUP BY boxes.warehouse HAVING average_value > 150",
        "SELECT w.code, AVG(value) AS AvgValue FROM boxes b JOIN warehouses w ON b.warehouse = w.code GROUP BY w.code HAVING AvgValue > 150",
        "SELECT w.code, AVG(b.value) AS average_value FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code GROUP BY w.code HAVING average_value > 150",
        "SELECT b.warehouse, AVG(b.value) FROM boxes b GROUP BY b.warehouse HAVING AVG(b.value) > 150",
        "SELECT warehouse, AVG(value) FROM boxes GROUP BY warehouse HAVING AVG(value) > 150",
        "SELECT b.warehouse, average_value FROM (SELECT warehouse, AVG(value) AS average_value FROM boxes GROUP BY warehouse) b WHERE b.average_value > 150",
        "SELECT b.warehouse, AVG(value) AS AvgVal FROM boxes b GROUP BY b.warehouse HAVING AVG(b.value) > 150",
        "SELECT boxes.warehouse, AVG(value) average_value FROM boxes GROUP BY warehouse HAVING average_value > 150",
        "SELECT w.code, AVG(b.value) AvgValue FROM boxes b JOIN warehouses w ON b.warehouse = w.code GROUP BY w.code HAVING AVG(b.value) > 150"
      ]
    ]
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "nlq": "Find the total value and number of boxes for each content type.",
    "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT contents, SUM(value) AS total_value, COUNT(*) AS num_boxes FROM boxes GROUP BY contents",
        "SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.contents) AS num_boxes FROM boxes b GROUP BY b.contents",
        "SELECT contents, TOTAL(value) AS total_value, COUNT(contents) AS num_boxes FROM boxes GROUP BY contents",
        "SELECT DISTINCT contents, SUM(value) AS total_value, COUNT(contents) AS num_boxes FROM boxes GROUP BY contents",
        "SELECT b.contents, SUM(b.value) AS total_value, COUNT(*) AS num_boxes FROM boxes AS b GROUP BY b.contents",
        "SELECT contents, SUM(value) AS total_value, COUNT(contents) as num_boxes FROM (SELECT contents, value FROM boxes) GROUP BY contents",
        "SELECT b1.contents, SUM(b1.value) AS total_value, COUNT(b1.contents) AS num_boxes FROM boxes b1 GROUP BY b1.contents",
        "SELECT contents AS ContentType, SUM(value) AS TotalValue, COUNT(contents) AS BoxCount FROM boxes GROUP BY ContentType",
        "SELECT b.contents, SUM(b.value) total_value, COUNT(*) num_boxes FROM boxes b GROUP BY b.contents"
      ]
    ]
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "nlq": "For each content, what is the total value and number of boxes?",
    "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "infer_predictions": [
      [
        "SELECT contents, SUM(value) AS total_value, COUNT(*) AS num_boxes FROM boxes GROUP BY contents",
        "SELECT boxes.contents, SUM(boxes.value) AS total_value, COUNT(boxes.contents) AS num_boxes FROM boxes GROUP BY boxes.contents",
        "SELECT b.contents, SUM(b.value) AS total_value, COUNT(b.contents) AS num_boxes FROM boxes b GROUP BY b.contents",
        "SELECT contents, SUM(value) total_value, COUNT(contents) num_boxes FROM boxes GROUP BY contents",
        "SELECT contents, SUM(value), COUNT(1) FROM boxes GROUP BY contents",
        "SELECT b.contents, SUM(b.value), COUNT(b.contents) FROM boxes b GROUP BY b.contents",
        "SELECT contents, TOTAL(value) AS total_value, COUNT(*) AS num_boxes FROM boxes GROUP BY contents",
        "SELECT contents, SUM(value) AS total_value, COUNT(contents) AS num_boxes FROM boxes GROUP BY contents HAVING COUNT(contents) > 0",
        "SELECT boxes.contents, SUM(boxes.value) AS total_value, COUNT(boxes.value) AS num_boxes FROM boxes GROUP BY boxes.contents",
        "SELECT b.contents, TOTAL(b.value) AS total_value, COUNT(*) AS num_boxes FROM boxes b GROUP BY b.contents"
      ]
    ]
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "nlq": "Find the total, average, and maximum capacity for different locations.",
    "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
    "infer_predictions": [
      [
        "SELECT SUM(capacity) AS total_capacity, AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM warehouses GROUP BY location",
        "SELECT location, SUM(capacity) total_capacity, AVG(capacity) average_capacity, MAX(capacity) max_capacity FROM warehouses GROUP BY location",
        "SELECT location, SUM(warehouses.capacity) AS total_capacity, AVG(warehouses.capacity) AS average_capacity, MAX(warehouses.capacity) AS max_capacity FROM warehouses GROUP BY location",
        "SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM warehouses w GROUP BY w.location",
        "SELECT location, TOTAL(capacity) total_capacity, AVG(capacity) average_capacity, MAX(capacity) max_capacity FROM warehouses GROUP BY location",
        "SELECT w.location, SUM(capacity), AVG(capacity), MAX(capacity) FROM warehouses w GROUP BY w.location",
        "SELECT location, SUM(capacity) AS total, AVG(capacity) AS avg, MAX(capacity) AS max FROM warehouses GROUP BY location ORDER BY location",
        "SELECT w.location, SUM(w.capacity) total, AVG(w.capacity) avg, MAX(w.capacity) max FROM warehouses w GROUP BY w.location ORDER BY w.location",
        "SELECT location, SUM(capacity), AVG(capacity), MAX(capacity) FROM warehouses GROUP BY location",
        "SELECT location, TOTAL(warehouses.capacity) AS TotalCapacity, AVG(warehouses.capacity) AS AverageCapacity, MAX(warehouses.capacity) AS MaxCapacity FROM warehouses GROUP BY location"
      ]
    ]
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "nlq": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
    "infer_predictions": [
      [
        "SELECT location, SUM(capacity) AS total_capacity, AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM warehouses GROUP BY location",
        "SELECT w.location, SUM(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM warehouses AS w GROUP BY w.location",
        "SELECT location, TOTAL(capacity), AVG(capacity), MAX(capacity) FROM warehouses GROUP BY location",
        "SELECT w.location, SUM(w.capacity), AVG(w.capacity), MAX(w.capacity) FROM warehouses w GROUP BY w.location",
        "SELECT location, SUM(capacity) total_capacity, AVG(capacity) average_capacity, MAX(capacity) max_capacity FROM warehouses GROUP BY location",
        "SELECT w.location, SUM(w.capacity) total_capacity, AVG(w.capacity) average_capacity, MAX(w.capacity) max_capacity FROM warehouses AS w GROUP BY w.location",
        "SELECT location, SUM(capacity) AS Total_Capacity, AVG(capacity) AS Average_Capacity, MAX(capacity) AS Maximum_Capacity FROM warehouses GROUP BY location",
        "SELECT w.location, w.total_capacity, w.average_capacity, w.max_capacity FROM (SELECT location, SUM(capacity) AS total_capacity, AVG(capacity) AS average_capacity, MAX(capacity) AS max_capacity FROM warehouses GROUP BY location) AS w",
        "SELECT w.location, TOTAL(w.capacity) AS total_capacity, AVG(w.capacity) AS average_capacity, MAX(w.capacity) AS max_capacity FROM warehouses w GROUP BY w.location"
      ]
    ]
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "nlq": "Find the total capacity of all warehouse locations.",
    "gold": "SELECT sum(capacity) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT SUM(capacity) FROM warehouses;",
        "SELECT TOTAL(warehouses.capacity) FROM warehouses;",
        "SELECT SUM(w.capacity) FROM warehouses w;",
        "SELECT TOTAL(w.capacity) FROM warehouses w;",
        "SELECT SUM(capacity) AS total_capacity FROM warehouses;",
        "SELECT TOTAL(capacity) AS total_capacity FROM warehouses;",
        "SELECT SUM(w.capacity) AS total_capacity FROM warehouses w;",
        "SELECT TOTAL(w.capacity) AS total_capacity FROM warehouses w;",
        "SELECT (SELECT SUM(capacity) FROM warehouses);",
        "SELECT (SELECT TOTAL(capacity) FROM warehouses);"
      ]
    ]
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "nlq": "What is the total capacity of all warehouses?",
    "gold": "SELECT sum(capacity) FROM warehouses",
    "infer_predictions": [
      [
        "SELECT SUM(capacity) FROM warehouses",
        "SELECT SUM(warehouses.capacity) AS total_capacity FROM warehouses",
        "SELECT TOTAL(capacity) FROM warehouses",
        "SELECT TOTAL(warehouses.capacity) AS total_capacity FROM warehouses",
        "SELECT SUM(w.capacity) FROM warehouses w",
        "SELECT TOTAL(w.capacity) FROM warehouses AS w",
        "SELECT SUM(capacity) AS total_capacity FROM warehouses WHERE capacity IS NOT NULL",
        "SELECT SUM(w.capacity) AS total_capacity FROM warehouses w WHERE w.capacity > 0",
        "SELECT TOTAL(capacity) FROM warehouses WHERE capacity > 0",
        "SELECT TOTAL(w.capacity) AS sum_capacity FROM warehouses AS w WHERE w.capacity IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "nlq": "Find the value of the most expensive boxes saved in each warehouse location.",
    "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
    "infer_predictions": [
      [
        "SELECT MAX(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code GROUP BY w.location",
        "SELECT location, MAX(value) AS max_value FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY warehouses.location",
        "SELECT w.location, MAX(b.value) FROM boxes b, warehouses w WHERE b.warehouse = w.code GROUP BY w.location",
        "SELECT warehouses.location, (SELECT MAX(boxes.value) FROM boxes WHERE boxes.warehouse = warehouses.code) AS max_value FROM warehouses",
        "SELECT w.location, MAX(value) FROM boxes JOIN warehouses w ON boxes.warehouse = w.code GROUP BY location",
        "SELECT (SELECT location FROM warehouses WHERE code = b.warehouse), MAX(b.value) FROM boxes b GROUP BY b.warehouse",
        "SELECT location, MAX(value) FROM (SELECT warehouses.location AS location, boxes.value FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code) GROUP BY location",
        "SELECT w.location AS Warehouse_Location, MAX(b.value) AS Most_Expensive_Box FROM warehouses w JOIN boxes b ON w.code = b.warehouse GROUP BY w.location"
      ]
    ]
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "nlq": "For each warehouse location, what is the value of the most expensive box?",
    "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
    "infer_predictions": [
      [
        "SELECT w.location, MAX(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code GROUP BY w.location",
        "SELECT w.location, MAX(value) AS max_value FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse GROUP BY w.location",
        "SELECT w.location, MAX(b.value) FROM warehouses w, boxes b WHERE w.code = b.warehouse GROUP BY w.location",
        "SELECT location, (SELECT MAX(value) FROM boxes WHERE warehouse = warehouses.code) FROM warehouses",
        "SELECT location, MAX(value) FROM (SELECT w.location, b.value FROM boxes b JOIN warehouses w ON b.warehouse = w.code) GROUP BY location",
        "SELECT (SELECT location FROM warehouses WHERE code = b.warehouse), MAX(b.value) FROM boxes b GROUP BY b.warehouse",
        "SELECT location, (SELECT MAX(b.value) FROM boxes b WHERE b.warehouse = warehouses.code) FROM warehouses",
        "SELECT location, MAX(b.value) max_value FROM boxes b JOIN warehouses ON b.warehouse = warehouses.code GROUP BY location",
        "SELECT w.location, MAX(b.value) max_val FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.location"
      ]
    ]
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "nlq": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "gold": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT warehouses.code, COUNT(boxes.code) FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT w.code, (SELECT COUNT(*) FROM boxes b WHERE b.warehouse = w.code) FROM warehouses w",
        "SELECT wh.code, COUNT(bx.code) FROM warehouses wh LEFT JOIN boxes bx ON wh.code = bx.warehouse GROUP BY wh.code",
        "SELECT x.code, COUNT(y.code) FROM warehouses AS x LEFT JOIN boxes AS y ON x.code = y.warehouse GROUP BY x.code",
        "SELECT WH.code, COUNT(BX.code) AS NumBoxes FROM warehouses AS WH LEFT JOIN boxes AS BX ON WH.code = BX.warehouse GROUP BY WH.code",
        "SELECT a.code, COUNT(b.code) FROM warehouses a LEFT JOIN boxes b ON a.code = b.warehouse GROUP BY a.code",
        "SELECT code, (SELECT COUNT(*) FROM boxes WHERE warehouse = warehouses.code) FROM warehouses",
        "SELECT u.code, COUNT(v.code) FROM warehouses u JOIN boxes v ON u.code = v.warehouse GROUP BY u.code"
      ]
    ]
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "nlq": "How many boxes are there with each warehouse ?",
    "gold": "select warehouse ,  count(*) from boxes group by warehouse",
    "infer_predictions": [
      [
        "SELECT warehouse, COUNT(*) AS box_count FROM boxes GROUP BY warehouse",
        "SELECT b.warehouse, COUNT(b.code) AS num_boxes FROM boxes b GROUP BY b.warehouse",
        "SELECT warehouse AS warehouse_code, COUNT(code) AS total_boxes FROM boxes GROUP BY warehouse",
        "SELECT b1.warehouse, COUNT(b1.code) AS boxes_per_warehouse FROM boxes b1 GROUP BY b1.warehouse",
        "SELECT warehouses.code, COUNT(boxes.code) AS box_total FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT w.code, COUNT(b.code) AS box_count FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT warehouses.code, IFNULL(COUNT(boxes.code), 0) AS total_boxes FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT box.warehouse, COUNT(*) FROM boxes box GROUP BY box.warehouse",
        "SELECT wh.code AS warehouse_code, (SELECT COUNT(*) FROM boxes WHERE warehouse = wh.code) AS count_boxes FROM warehouses wh",
        "SELECT warehouse, COUNT(code) AS number_of_boxes FROM boxes GROUP BY warehouse ORDER BY warehouse"
      ]
    ]
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "nlq": "Find the number of different locations where Rocks are stored.",
    "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT location) FROM warehouses WHERE code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks')",
        "SELECT COUNT(DISTINCT w.location) FROM warehouses w JOIN boxes b ON w.code = b.warehouse WHERE b.contents = 'Rocks'",
        "SELECT COUNT(DISTINCT location) FROM warehouses WHERE EXISTS (SELECT 1 FROM boxes WHERE warehouse = warehouses.code AND contents = 'Rocks')",
        "SELECT COUNT(DISTINCT w.location) FROM warehouses w WHERE w.code IN (SELECT warehouse FROM boxes WHERE contents = 'Rocks')",
        "SELECT COUNT(DISTINCT location) FROM warehouses w INNER JOIN (SELECT warehouse FROM boxes WHERE contents = 'Rocks') b ON w.code = b.warehouse",
        "SELECT COUNT(DISTINCT location) FROM (SELECT location FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse WHERE boxes.contents = 'Rocks')",
        "SELECT COUNT(DISTINCT w.location) FROM warehouses w WHERE EXISTS (SELECT NULL FROM boxes b WHERE b.warehouse = w.code AND b.contents = 'Rocks')",
        "SELECT COUNT(DISTINCT location) FROM warehouses, boxes WHERE warehouses.code = boxes.warehouse AND boxes.contents = 'Rocks'"
      ]
    ]
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "nlq": "In how many different warehouses are Rocks stored within boxes?",
    "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT warehouse) FROM boxes WHERE contents = 'Rocks';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks');",
        "SELECT COUNT(*) FROM (SELECT warehouse FROM boxes WHERE contents = 'Rocks' GROUP BY warehouse);",
        "SELECT COUNT(DISTINCT b.warehouse) FROM boxes b WHERE b.contents = 'Rocks';",
        "SELECT COUNT(*) FROM (SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents = 'Rocks');",
        "WITH RockWarehouses AS (SELECT DISTINCT warehouse FROM boxes WHERE contents = 'Rocks') SELECT COUNT(*) FROM RockWarehouses;",
        "SELECT COUNT(DISTINCT warehouse) FROM boxes b WHERE b.contents = 'Rocks';",
        "WITH RW AS (SELECT warehouse FROM boxes WHERE contents = 'Rocks' GROUP BY warehouse) SELECT COUNT(*) FROM RW;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT b.warehouse FROM boxes b WHERE b.contents = 'Rocks') RW;"
      ]
    ]
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "nlq": "Select the code of each box, along with the name of the city the box is located in.",
    "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
    "infer_predictions": [
      [
        "SELECT boxes.code, warehouses.location FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code",
        "SELECT b.code, w.location FROM boxes b JOIN warehouses w ON b.warehouse = w.code",
        "SELECT b.code, w.location FROM boxes AS b, warehouses AS w WHERE b.warehouse = w.code",
        "SELECT b.code AS box_code, w.location AS city FROM boxes b JOIN warehouses w ON b.warehouse = w.code",
        "SELECT DISTINCT b.code, w.location FROM boxes b, warehouses w WHERE b.warehouse = w.code",
        "SELECT b.code, w.location FROM boxes b LEFT JOIN warehouses w ON b.warehouse = w.code",
        "SELECT boxes.code, warehouses.location FROM boxes LEFT OUTER JOIN warehouses ON boxes.warehouse = warehouses.code",
        "SELECT b.code, w.location FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code WHERE b.code IS NOT NULL",
        "SELECT b.code, w.location FROM boxes b CROSS JOIN warehouses w ON b.warehouse = w.code"
      ]
    ]
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "nlq": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
    "infer_predictions": [
      [
        "SELECT b.code, w.location FROM boxes AS b JOIN warehouses AS w ON b.warehouse = w.code",
        "SELECT boxes.code, warehouses.location FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code",
        "SELECT warehouses.code, location FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code",
        "SELECT b.code AS box_code, w.location AS warehouse_location FROM boxes b, warehouses w WHERE b.warehouse = w.code",
        "SELECT b.code, w.location FROM boxes b CROSS JOIN warehouses w WHERE b.warehouse = w.code",
        "SELECT DISTINCT b.code, w.location FROM boxes b LEFT JOIN warehouses w ON b.warehouse = w.code",
        "SELECT DISTINCT b.code, w.location FROM boxes AS b, warehouses AS w WHERE b.warehouse = w.code",
        "SELECT b.code AS BoxCode, w.location AS WarehouseLocation FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code",
        "SELECT b.code, w.location FROM warehouses w, boxes b WHERE w.code = b.warehouse"
      ]
    ]
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "nlq": "Select the codes of all the boxes located in Chicago.",
    "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
    "infer_predictions": [
      [
        "SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago'",
        "SELECT b.code FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location = 'Chicago'",
        "SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago')",
        "SELECT boxes.code FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago'",
        "SELECT b.code FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location = 'Chicago'",
        "SELECT boxes.code FROM boxes JOIN warehouses ON boxes.warehouse = warehouses.code AND warehouses.location = 'Chicago'",
        "SELECT b.code FROM boxes b WHERE EXISTS (SELECT 1 FROM warehouses w WHERE w.code = b.warehouse AND w.location = 'Chicago')",
        "SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location LIKE 'Chicago')",
        "SELECT b.code FROM boxes b WHERE b.warehouse = (SELECT w.code FROM warehouses w WHERE w.location = 'Chicago')"
      ]
    ]
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "nlq": "What are the codes of boxes stored in warehouses in Chicago?",
    "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
    "infer_predictions": [
      [
        "SELECT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago'",
        "SELECT code FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location = 'Chicago')",
        "SELECT b.code FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location = 'Chicago'",
        "SELECT boxes.code FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE warehouses.location = 'Chicago'",
        "SELECT boxes.code FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code AND warehouses.location = 'Chicago'",
        "SELECT b.code FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago'",
        "SELECT DISTINCT b.code FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location = 'Chicago'",
        "SELECT b.code FROM boxes b WHERE EXISTS (SELECT 1 FROM warehouses w WHERE w.code = b.warehouse AND w.location = 'Chicago')",
        "SELECT boxes.code FROM boxes WHERE EXISTS (SELECT 1 FROM warehouses where code = boxes.warehouse AND location = 'Chicago')"
      ]
    ]
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "nlq": "Find the number of boxes saved in each warehouse.",
    "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT w.code, COUNT(b.code) FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT warehouses.code, COUNT(boxes.code) AS box_count FROM warehouses LEFT JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT w.code, COALESCE(COUNT(b.code), 0) FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT code, (SELECT COUNT(*) FROM boxes WHERE warehouse = warehouses.code) AS num_boxes FROM warehouses",
        "SELECT warehouses.code, (SELECT COUNT(*) FROM boxes b WHERE b.warehouse = warehouses.code) AS CountBoxes FROM warehouses",
        "SELECT W.code, IFNULL(COUNT(B.warehouse),0) FROM warehouses W LEFT JOIN boxes B ON W.code = B.warehouse GROUP BY W.code",
        "SELECT warehouses.code, COALESCE(COUNT(boxes.code), 0) FROM warehouses LEFT OUTER JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code"
      ]
    ]
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "nlq": "How many boxes are stored in each warehouse?",
    "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT boxes.warehouse, COUNT(*) as total_boxes FROM boxes GROUP BY boxes.warehouse",
        "SELECT w.code, COUNT(b.code) as box_count FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT w.code AS warehouse_code, COUNT(b.code) AS number_of_boxes FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse GROUP BY warehouse_code",
        "SELECT warehouse, COUNT(code) as num_boxes FROM boxes GROUP BY warehouse",
        "SELECT w.code as warehouse_code, (SELECT COUNT(*) FROM boxes WHERE warehouse = w.code) as box_count FROM warehouses w",
        "SELECT bc.warehouse_code, bc.count_of_boxes FROM (SELECT warehouse AS warehouse_code, COUNT(1) AS count_of_boxes FROM boxes GROUP BY warehouse) bc",
        "SELECT b.warehouse, COUNT(b.code) as total_boxes FROM boxes b LEFT JOIN warehouses on b.warehouse = warehouses.code GROUP BY b.warehouse",
        "SELECT wh.code, (SELECT COUNT(*) FROM boxes WHERE warehouse = wh.code GROUP BY warehouse) AS count_boxes FROM warehouses wh",
        "SELECT b.warehouse, COUNT(b.code) AS total_boxes FROM boxes b GROUP BY b.warehouse ORDER BY b.warehouse"
      ]
    ]
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "nlq": "Find the number of distinct types of contents in each warehouse.",
    "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT w.location, COUNT(DISTINCT b.contents) FROM warehouses w JOIN boxes b ON w.code = b.warehouse GROUP BY w.code",
        "SELECT location, COUNT(DISTINCT contents) AS distinct_contents FROM boxes JOIN warehouses ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT w1.location, COUNT(DISTINCT b1.contents) AS TypesOfContents FROM boxes as b1 INNER JOIN warehouses AS w1 ON b1.warehouse = w1.code GROUP BY w1.location",
        "SELECT (SELECT location FROM warehouses WHERE code = boxes.warehouse), COUNT(DISTINCT contents) FROM boxes GROUP BY warehouse",
        "SELECT w2.location, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w2.code) FROM warehouses w2",
        "SELECT location, (SELECT COUNT(DISTINCT contents) FROM boxes b WHERE b.warehouse = warehouses.code) AS type_count FROM warehouses",
        "SELECT location, COUNT(DISTINCT b.contents) as ContentVariety FROM boxes b INNER JOIN warehouses ON b.warehouse = warehouses.code GROUP BY warehouses.code, warehouses.location",
        "SELECT location, COUNT(DISTINCT contents) FROM boxes, warehouses WHERE boxes.warehouse = warehouses.code GROUP BY warehouses.location",
        "SELECT w.location, (SELECT COUNT(DISTINCT contents) FROM boxes WHERE warehouse = w.code) AS unique_contents FROM warehouses w",
        "SELECT warehouses.location, COUNT(DISTINCT boxes.contents) FROM boxes JOIN warehouses ON warehouses.code = boxes.warehouse GROUP BY warehouses.location"
      ]
    ]
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "nlq": "How many different types of contents are stored in each warehouse?",
    "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
    "infer_predictions": [
      [
        "SELECT warehouse, COUNT(DISTINCT contents) FROM boxes GROUP BY warehouse",
        "SELECT warehouse, COUNT(DISTINCT contents) AS TypesOfContents FROM boxes GROUP BY warehouse",
        "SELECT warehouses.code, COUNT(DISTINCT boxes.contents) FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code",
        "SELECT b.warehouse, COUNT(DISTINCT b.contents) FROM boxes b GROUP BY b.warehouse",
        "SELECT w.code, COUNT(DISTINCT cont.contents) FROM warehouses w JOIN boxes cont ON w.code = cont.warehouse GROUP BY w.code",
        "SELECT w.location, COUNT(DISTINCT b.contents) FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse GROUP BY w.location",
        "SELECT warehouses.code AS WarehouseCode, COUNT(DISTINCT boxes.contents) AS UniqueContents FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code GROUP BY WarehouseCode",
        "SELECT ware.code, COUNT(DISTINCT box.contents) FROM boxes box, warehouses ware WHERE box.warehouse = ware.code GROUP BY ware.code"
      ]
    ]
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "nlq": "Select the codes of all warehouses that are above capacity.",
    "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
    "infer_predictions": [
      [
        "SELECT w.code FROM warehouses w WHERE w.capacity < (SELECT COUNT(*) FROM boxes b WHERE b.warehouse = w.code)",
        "SELECT code FROM warehouses WHERE (SELECT COUNT(*) FROM boxes WHERE warehouse = code) > capacity",
        "SELECT warehouses.code FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code HAVING COUNT(boxes.code) > warehouses.capacity",
        "SELECT w.code FROM warehouses w JOIN (SELECT warehouse, COUNT(*) AS cnt FROM boxes GROUP BY warehouse) b ON w.code = b.warehouse WHERE b.cnt > w.capacity",
        "SELECT code FROM warehouses AS w WHERE (SELECT COUNT(warehouse) FROM boxes AS b WHERE b.warehouse = w.code) > w.capacity",
        "SELECT DISTINCT w.code FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.warehouse) > w.capacity",
        "SELECT code FROM warehouses WHERE capacity < (SELECT COUNT(*) FROM boxes GROUP BY warehouse HAVING warehouse = code)",
        "SELECT w.code FROM warehouses AS w WHERE w.capacity < (SELECT COUNT(b.warehouse) from boxes b WHERE b.warehouse = w.code)",
        "SELECT w.code FROM warehouses w LEFT JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity"
      ]
    ]
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "nlq": "What are the codes of warehouses that have more boxes than their capacity?",
    "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
    "infer_predictions": [
      [
        "SELECT warehouses.code FROM warehouses JOIN boxes ON warehouses.code = boxes.warehouse GROUP BY warehouses.code HAVING COUNT(boxes.code) > warehouses.capacity",
        "SELECT w.code FROM warehouses w INNER JOIN boxes b ON w.code = b.warehouse GROUP BY w.code HAVING COUNT(b.code) > w.capacity",
        "SELECT code FROM warehouses WHERE code IN (SELECT warehouse FROM boxes GROUP BY warehouse HAVING COUNT(*) > (SELECT capacity FROM warehouses WHERE code = warehouse))",
        "SELECT wh.code FROM warehouses wh WHERE (SELECT COUNT(*) FROM boxes WHERE warehouse = wh.code) > wh.capacity",
        "SELECT warehouse FROM (SELECT warehouse, COUNT(*) AS box_count FROM boxes GROUP BY warehouse) AS B WHERE box_count > (SELECT capacity FROM warehouses WHERE code = B.warehouse)",
        "SELECT wh.code FROM warehouses as wh WHERE EXISTS (SELECT 1 FROM boxes WHERE warehouse = wh.code GROUP BY warehouse HAVING COUNT(*) > wh.capacity)",
        "SELECT a.code FROM warehouses a WHERE (SELECT COUNT(b.code) FROM boxes b WHERE b.warehouse = a.code) > a.capacity",
        "SELECT t1.code FROM warehouses t1, (SELECT warehouse, COUNT(*) AS cnt FROM boxes GROUP BY warehouse) AS t2 WHERE t1.code = t2.warehouse AND t2.cnt > t1.capacity",
        "SELECT code FROM warehouses AS w JOIN (SELECT warehouse, COUNT(*) as total_boxes FROM boxes GROUP BY warehouse) AS b ON w.code = b.warehouse WHERE b.total_boxes > w.capacity",
        "SELECT distinct wh.code FROM warehouses wh, boxes bx WHERE wh.code = bx.warehouse GROUP BY wh.code, wh.capacity HAVING COUNT(bx.code) > wh.capacity"
      ]
    ]
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "nlq": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
    "infer_predictions": [
      [
        "SELECT SUM(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location != 'Chicago'",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location != 'Chicago')",
        "SELECT SUM(b.value) FROM boxes AS b, warehouses AS w WHERE b.warehouse = w.code AND w.location != 'Chicago'",
        "SELECT TOTAL(b.value) FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code WHERE NOT w.location = 'Chicago'",
        "SELECT SUM(value) FROM boxes WHERE warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'Chicago')",
        "SELECT SUM(b.value) FROM boxes b WHERE b.warehouse NOT IN (SELECT code FROM warehouses WHERE location = 'Chicago')",
        "SELECT SUM(value) FROM boxes b LEFT JOIN warehouses w ON b.warehouse = w.code WHERE w.location <> 'Chicago'",
        "SELECT SUM(b.value) FROM boxes b INNER JOIN warehouses w ON b.warehouse = w.code AND w.location <> 'Chicago'",
        "SELECT SUM(value) FROM boxes WHERE EXISTS (SELECT 1 FROM warehouses WHERE code = boxes.warehouse AND location != 'Chicago')",
        "SELECT SUM(value) FROM boxes b WHERE NOT EXISTS (SELECT 1 FROM warehouses w WHERE w.code = b.warehouse AND w.location = 'Chicago')"
      ]
    ]
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "nlq": "What is the total value of boxes contained in any location but Chicago?",
    "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
    "infer_predictions": [
      [
        "SELECT SUM(b.value) AS TotalValue FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE w.location != 'Chicago'",
        "SELECT TOTAL(b.value) FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location <> 'Chicago'",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location NOT LIKE 'Chicago')",
        "SELECT SUM(box.value) FROM boxes box, warehouses wh WHERE box.warehouse = wh.code AND wh.location NOT LIKE 'Chicago'",
        "SELECT SUM(value) FROM boxes INNER JOIN warehouses ON boxes.warehouse = warehouses.code WHERE location NOT IN ('Chicago')",
        "SELECT SUM(b.value) FROM boxes b, warehouses w WHERE b.warehouse = w.code AND w.location NOT IN ('Chicago')",
        "SELECT SUM(b.value) FROM boxes AS b INNER JOIN warehouses AS w ON b.warehouse = w.code WHERE w.location <> 'Chicago'",
        "SELECT TOTAL(b.value) FROM boxes b JOIN warehouses w ON b.warehouse = w.code WHERE NOT w.location = 'Chicago'",
        "SELECT SUM(value) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses WHERE location != 'Chicago')",
        "SELECT SUM(b.value) FROM boxes b WHERE EXISTS (SELECT w.code FROM warehouses w WHERE w.code = b.warehouse AND w.location <> 'Chicago')"
      ]
    ]
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "nlq": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
    "infer_predictions": [
      [
        "SELECT university_name, city, state FROM university ORDER BY university_name ASC",
        "SELECT U.university_name, U.city, U.state FROM university U ORDER BY U.university_name",
        "SELECT university_name AS Name, city AS City, state AS State FROM university ORDER BY Name",
        "SELECT university_name, city, state FROM university ORDER BY 1",
        "SELECT * FROM (SELECT university_name, city, state FROM university) ORDER BY university_name ASC",
        "SELECT u.university_name, u.city, u.state FROM university u ORDER BY u.university_name ASC",
        "SELECT university_name AS University_Name, city AS City, state AS State FROM university ORDER BY University_Name"
      ]
    ]
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "nlq": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
    "infer_predictions": [
      [
        "SELECT university_name, city, state FROM university ORDER BY university_name ASC",
        "SELECT u.university_name, u.city, u.state FROM university u ORDER BY 1",
        "SELECT university_name AS Name, city AS City, state AS State FROM university ORDER BY Name ASC",
        "SELECT university.university_name AS UniversityName, university.city AS City, university.state AS State FROM university ORDER BY UniversityName"
      ]
    ]
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "nlq": "How many universities are in Illinois or Ohio?",
    "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM university WHERE state IN ('Illinois', 'Ohio')",
        "SELECT COUNT(university_id) FROM university WHERE state = 'Illinois' OR state = 'Ohio'",
        "SELECT COUNT(DISTINCT university_id) FROM university WHERE state IN ('Illinois', 'Ohio')",
        "SELECT COUNT(*) FROM university WHERE state = 'Illinois' UNION ALL SELECT COUNT(*) FROM university WHERE state = 'Ohio'",
        "SELECT SUM(count) FROM (SELECT COUNT(*) AS count FROM university WHERE state = 'Illinois' UNION ALL SELECT COUNT(*) AS count FROM university WHERE state = 'Ohio')",
        "SELECT COUNT(1) FROM university WHERE state IN ('Illinois', 'Ohio')",
        "SELECT COUNT(university_id) AS NumberOfUniversities FROM university WHERE state IN ('Illinois', 'Ohio')",
        "SELECT TOTAL(count) FROM (SELECT COUNT(*) AS count FROM university WHERE state = 'Illinois' UNION SELECT COUNT(*) AS count FROM university WHERE state = 'Ohio')",
        "SELECT COUNT(*) FROM university u WHERE u.state IN ('Illinois', 'Ohio')",
        "SELECT COUNT(u.university_id) FROM university u WHERE u.state = 'Illinois' OR u.state = 'Ohio'"
      ]
    ]
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "nlq": "What is the total number of universities located in Illinois or Ohio?",
    "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM university WHERE state IN ('Illinois', 'Ohio');",
        "SELECT COUNT(university_id) FROM university WHERE state = 'Illinois' OR state = 'Ohio';",
        "SELECT COUNT(DISTINCT university_id) FROM university WHERE state IN ('Illinois', 'Ohio');",
        "SELECT COUNT(1) FROM university WHERE state IN ('Illinois', 'Ohio');",
        "SELECT COUNT(*) AS total_universities FROM university WHERE state = 'Illinois' OR state = 'Ohio';",
        "SELECT COUNT(*) FROM (SELECT university_id FROM university WHERE state IN ('Illinois', 'Ohio'));",
        "SELECT COUNT(university_id) FROM university WHERE state = 'Illinois' UNION ALL SELECT COUNT(university_id) FROM university WHERE state = 'Ohio';",
        "SELECT COUNT(DISTINCT university_name) FROM university WHERE state IN ('Ohio', 'Illinois');",
        "SELECT COUNT(u.university_id) FROM university u WHERE u.state IN ('Illinois', 'Ohio');",
        "SELECT SUM(cnt) FROM (SELECT COUNT(*) AS cnt FROM university WHERE state = 'Illinois' UNION ALL SELECT COUNT(*) AS cnt FROM university WHERE state = 'Ohio');"
      ]
    ]
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "nlq": "What is the maximum, average, and minimum enrollment for universities?",
    "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
    "infer_predictions": [
      [
        "SELECT MAX(enrollment) AS MaxEnrollment, AVG(enrollment) AS AvgEnrollment, MIN(enrollment) AS MinEnrollment FROM university",
        "SELECT MAX(u.enrollment), AVG(u.enrollment), MIN(u.enrollment) FROM university u",
        "SELECT MAX(enrollment) Max, AVG(enrollment) Avg, MIN(enrollment) Min FROM university",
        "SELECT (SELECT MAX(enrollment) FROM university), (SELECT AVG(enrollment) FROM university), (SELECT MIN(enrollment) FROM university)",
        "SELECT university.MaxEnrollment, university.AvgEnrollment, university.MinEnrollment FROM (SELECT MAX(enrollment) AS MaxEnrollment, AVG(enrollment) AS AvgEnrollment, MIN(enrollment) AS MinEnrollment FROM university) university",
        "SELECT MAX(u.enrollment) AS 'Maximum Enrollment', AVG(u.enrollment) AS 'Average Enrollment', MIN(u.enrollment) AS 'Minimum Enrollment' FROM university u",
        "SELECT aggregates.Max, aggregates.Avg, aggregates.Min FROM (SELECT MAX(enrollment) AS Max, AVG(enrollment) AS Avg, MIN(enrollment) AS Min FROM university) AS aggregates"
      ]
    ]
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "nlq": "What is the maximum, average, and minimum enrollment for all universities?",
    "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
    "infer_predictions": [
      [
        "SELECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM university",
        "SELECT MAX(u.enrollment), AVG(u.enrollment), MIN(u.enrollment) FROM university u",
        "SELECT MAX(enrollment) AS MaxEnrollment, AVG(enrollment) AS AvgEnrollment, MIN(enrollment) AS MinEnrollment FROM university",
        "SELECT MAX(u.enrollment) AS MaximumEnrollment, AVG(u.enrollment) AS AverageEnrollment, MIN(u.enrollment) AS MinimumEnrollment FROM university u",
        "SELECT (SELECT MAX(enrollment) FROM university), (SELECT AVG(enrollment) FROM university), (SELECT MIN(enrollment) FROM university)",
        "SELECT MAX(enrollment) Maximum, AVG(enrollment) Average, MIN(enrollment) Minimum FROM university",
        "SELECT (SELECT MAX(enrollment) FROM university), AVG(enrollment), (SELECT MIN(enrollment) FROM university) FROM university",
        "SELECT * FROM (SELECT MAX(enrollment) max_e, AVG(enrollment) avg_e, MIN(enrollment) min_e FROM university) sub",
        "SELECT * FROM (SELECT MAX(u.enrollment) AS Max, AVG(u.enrollment) AS Average, MIN(u.enrollment) AS Min FROM university u) AS ResultTable"
      ]
    ]
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "nlq": "List team name for all universities with enrollments above the average.",
    "gold": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
    "infer_predictions": [
      [
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(u.enrollment) FROM university u)",
        "SELECT U.team_name FROM university U WHERE U.enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT t.team_name FROM university t WHERE t.enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(U.enrollment) FROM university U)",
        "SELECT U.team_name FROM university U WHERE U.enrollment > (SELECT Average FROM (SELECT AVG(enrollment) AS Average FROM university))",
        "SELECT t.team_name FROM university t WHERE t.enrollment > (SELECT Average FROM (SELECT AVG(enrollment) AS Average FROM university))",
        "SELECT team_name FROM university WHERE enrollment > (SELECT Average FROM (SELECT AVG(enrollment) AS Average FROM university t))"
      ]
    ]
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "nlq": "What are the names of all teams from universities that have more people enrolled than average ?",
    "gold": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
    "infer_predictions": [
      [
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(u.enrollment) AS avg_enrollment FROM university u)",
        "SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2)",
        "SELECT DISTINCT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(enrollment) FROM university)",
        "SELECT DISTINCT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2)",
        "SELECT DISTINCT team_name FROM university WHERE enrollment > (SELECT AVG(u.enrollment) AS avg_enrollment FROM university u)",
        "SELECT team_name FROM university WHERE enrollment > (SELECT AVG(enrollment) FROM university GROUP BY university_id)",
        "SELECT team_name FROM university AS u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2)"
      ]
    ]
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "nlq": "Show all home conferences.",
    "gold": "SELECT DISTINCT home_conference FROM University",
    "infer_predictions": [
      [
        "SELECT DISTINCT home_conference FROM university;",
        "SELECT DISTINCT u.home_conference FROM university u;",
        "SELECT home_conference FROM university GROUP BY home_conference;",
        "SELECT home_conference FROM (SELECT DISTINCT home_conference FROM university);",
        "SELECT DISTINCT univers.home_conference FROM university AS univers WHERE home_conference IS NOT NULL;",
        "SELECT IFNULL(home_conference, 'Unknown') FROM university GROUP BY home_conference;",
        "SELECT DISTINCT home_conference FROM university UNION SELECT DISTINCT home_conference FROM university;"
      ]
    ]
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "nlq": "What are the different home conferences from the university table?",
    "gold": "SELECT DISTINCT home_conference FROM University",
    "infer_predictions": [
      [
        "SELECT DISTINCT home_conference FROM university;",
        "SELECT DISTINCT U.home_conference FROM university U;",
        "SELECT home_conference FROM university GROUP BY home_conference;",
        "SELECT U.home_conference FROM university U GROUP BY U.home_conference;",
        "SELECT DISTINCT home_conf FROM (SELECT home_conference AS home_conf FROM university);",
        "SELECT DISTINCT conf FROM (SELECT home_conference AS conf FROM university U);",
        "SELECT home_conference FROM (SELECT DISTINCT home_conference FROM university) AS distinct_conferences;"
      ]
    ]
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "nlq": "Show all home conferences and the number of universities in each conference.",
    "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
    "infer_predictions": [
      [
        "SELECT home_conference, COUNT(university_id) AS total_universities FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.home_conference",
        "SELECT university.home_conference, COUNT(*) AS num_universities FROM university GROUP BY university.home_conference",
        "SELECT home_conference, COUNT(1) FROM university GROUP BY home_conference",
        "SELECT COUNT(university_id), home_conference FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(DISTINCT u.university_id) FROM university u GROUP BY u.home_conference",
        "SELECT home_conference, COUNT(university_name) FROM university GROUP BY home_conference",
        "SELECT COUNT(*) AS UniversityCount, home_conference FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(u.university_id) FROM university u GROUP BY u.home_conference",
        "SELECT COUNT(DISTINCT university.university_id) AS Count, university.home_conference FROM university GROUP BY university.home_conference"
      ]
    ]
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "nlq": "For every home conference, how many universities attended that conference?",
    "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
    "infer_predictions": [
      [
        "SELECT home_conference, COUNT(university_id) FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(*) FROM university u GROUP BY u.home_conference",
        "SELECT home_conference, COUNT(university_id) AS num_universities FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(u.university_id) AS university_count FROM university u GROUP BY u.home_conference",
        "SELECT home_conference, COUNT(*) FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(distinct u.university_id) FROM university u GROUP BY u.home_conference",
        "SELECT u.home_conference, COUNT(DISTINCT university_id) FROM university u GROUP BY u.home_conference",
        "SELECT home_conference, COUNT(distinct university_id) AS university_count FROM university GROUP BY home_conference",
        "SELECT u.home_conference, COUNT(*) AS count_of_universities FROM university u GROUP BY u.home_conference"
      ]
    ]
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "nlq": "Which state has most number of universities?",
    "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM university GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT u.state FROM university AS u GROUP BY u.state ORDER BY COUNT(u.university_id) DESC LIMIT 1",
        "SELECT state, COUNT(state) AS count FROM university GROUP BY state ORDER BY count DESC LIMIT 1",
        "SELECT top.state FROM (SELECT state, COUNT(*) AS total FROM university GROUP BY state) top ORDER BY top.total DESC LIMIT 1",
        "SELECT a.state FROM (SELECT state, COUNT(*) as num_universities FROM university GROUP BY state) a ORDER BY a.num_universities DESC LIMIT 1",
        "SELECT state FROM university GROUP BY state HAVING COUNT(*) = (SELECT MAX(total) FROM (SELECT COUNT(*) AS total FROM university GROUP BY state))",
        "SELECT SUB.state FROM (SELECT state, COUNT(university_id) AS university_count FROM university GROUP BY state ) AS SUB ORDER BY SUB.university_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "nlq": "What is the state with the most universities?",
    "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT state FROM university GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT u.state FROM university u GROUP BY u.state ORDER BY COUNT(u.university_id) DESC LIMIT 1",
        "SELECT s FROM (SELECT state AS s, COUNT(*) AS num FROM university GROUP BY state) ORDER BY num DESC LIMIT 1",
        "SELECT state FROM (SELECT state, COUNT(university_id) AS uni_count FROM university GROUP BY state ORDER BY uni_count DESC) LIMIT 1",
        "SELECT u.state FROM (SELECT state, COUNT(*) AS cnt FROM university GROUP BY state) u ORDER BY u.cnt DESC LIMIT 1",
        "WITH RankedStates AS (SELECT state, RANK() OVER (ORDER BY COUNT(university_id) DESC) as rank FROM university GROUP BY state) SELECT state FROM RankedStates WHERE rank = 1",
        "SELECT state FROM university GROUP BY state HAVING COUNT(university_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(university_id) AS cnt FROM university GROUP BY state))",
        "SELECT state, MAX(c) FROM (SELECT state, COUNT(*) AS c FROM university GROUP BY state) GROUP BY state ORDER BY c DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "nlq": "Show all home conferences with average enrollment of universities above 2000.",
    "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
    "infer_predictions": [
      [
        "SELECT home_conference, AVG(enrollment) FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000",
        "SELECT u.home_conference, AVG(u.enrollment) AS average_enrollment FROM university u GROUP BY u.home_conference HAVING average_enrollment > 2000",
        "SELECT home_conference, AVG(enrollment) AS enrollment_avg FROM university GROUP BY home_conference HAVING enrollment_avg > 2000",
        "SELECT temp.home_conference FROM (SELECT home_conference, AVG(enrollment) as avg_enrollment FROM university GROUP BY home_conference) temp WHERE temp.avg_enrollment > 2000",
        "WITH university_avg AS (SELECT home_conference, AVG(enrollment) as avg_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM university_avg WHERE avg_enrollment > 2000",
        "SELECT home_conference, AVG(enrollment) AVG_ENROLLMENT FROM university GROUP BY home_conference HAVING AVG_ENROLLMENT > 2000",
        "SELECT DISTINCT home_conference FROM university WHERE university_id IN (SELECT university_id FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000)",
        "SELECT u.home_conference FROM university u WHERE EXISTS (SELECT 1 FROM university WHERE home_conference = u.home_conference GROUP BY home_conference HAVING AVG(enrollment) > 2000) GROUP BY u.home_conference",
        "SELECT u.home_conference, avg_enrollment FROM (SELECT home_conference, AVG(enrollment) as avg_enrollment FROM university GROUP BY home_conference) as u WHERE u.avg_enrollment > 2000"
      ]
    ]
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "nlq": "What are the home conferences that have an average university enrollment above 2000?",
    "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
    "infer_predictions": [
      [
        "SELECT home_conference FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000",
        "SELECT u.home_conference FROM university u GROUP BY u.home_conference HAVING AVG(u.enrollment) > 2000",
        "SELECT DISTINCT university.home_conference FROM university WHERE university.home_conference IN (SELECT university.home_conference FROM university GROUP BY university.home_conference HAVING AVG(university.enrollment) > 2000)",
        "SELECT home_conference FROM (SELECT home_conference, AVG(enrollment) AS avg_enrollment FROM university GROUP BY home_conference) WHERE avg_enrollment > 2000",
        "SELECT u.home_conference FROM (SELECT home_conference, AVG(enrollment) AS avg_enrollment FROM university GROUP BY home_conference) u WHERE u.avg_enrollment > 2000",
        "SELECT DISTINCT u.home_conference FROM university u WHERE u.enrollment > 2000 GROUP BY u.home_conference HAVING AVG(u.enrollment) > 2000",
        "SELECT university.home_conference FROM university INNER JOIN (SELECT home_conference FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000) AS AvgFilter ON AvgFilter.home_conference = university.home_conference GROUP BY university.home_conference",
        "SELECT DISTINCT final.home_conference FROM (SELECT home_conference, AVG(enrollment) AS avg_enrollment FROM university GROUP BY home_conference HAVING AVG(enrollment) > 2000) final",
        "SELECT home_conf FROM (SELECT home_conference AS home_conf, AVG(enrollment) AS av_enroll FROM university GROUP BY home_conf) WHERE av_enroll > 2000"
      ]
    ]
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "nlq": "Which conference has the least number of total enrollment?",
    "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1",
        "SELECT U.home_conference FROM university U GROUP BY U.home_conference ORDER BY SUM(U.enrollment) ASC LIMIT 1",
        "SELECT home FROM (SELECT home_conference AS home, SUM(enrollment) AS total_enrollment FROM university GROUP BY home_conference) ORDER BY total_enrollment ASC LIMIT 1",
        "SELECT home_conference FROM university GROUP BY home_conference HAVING SUM(enrollment) = (SELECT MIN(T.total_enrollment) FROM (SELECT SUM(enrollment) AS total_enrollment FROM university GROUP BY home_conference) T)",
        "SELECT U.home_conference FROM university U LEFT JOIN university U2 ON U.university_id = U2.university_id GROUP BY U.home_conference ORDER BY SUM(U2.enrollment) ASC LIMIT 1",
        "SELECT first_value(home_conference) OVER (ORDER BY SUM(enrollment) ASC) as smallest_conf FROM university GROUP BY home_conference",
        "SELECT reduction FROM (SELECT home_conference as reduction, SUM(enrollment) as total_pop FROM university GROUP BY home_conference ORDER BY total_pop ASC) LIMIT 1",
        "WITH Enrollment_Sums AS (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) SELECT home_conference FROM Enrollment_Sums WHERE total_enrollment = (SELECT MIN(total_enrollment) FROM Enrollment_Sums)",
        "SELECT item FROM (SELECT home_conference as item, row_number() OVER (ORDER BY SUM(enrollment) ASC) AS row_id FROM university GROUP BY home_conference) WHERE row_id = 1"
      ]
    ]
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "nlq": "What are the home conferences with the fewest number of people enrolled?",
    "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
    "infer_predictions": [
      [
        "SELECT U.home_conference FROM university U GROUP BY U.home_conference ORDER BY SUM(U.enrollment) ASC LIMIT 1",
        "SELECT home_conference FROM university GROUP BY home_conference HAVING SUM(enrollment) = (SELECT MIN(TMP.total_enrollment) FROM (SELECT home_conference, SUM(enrollment) as total_enrollment FROM university GROUP BY home_conference) TMP)",
        "SELECT home_conference FROM university GROUP BY home_conference ORDER BY SUM(enrollment) ASC LIMIT 1",
        "SELECT top_conference FROM (SELECT home_conference AS top_conference, SUM(enrollment) AS total_enrollment FROM university GROUP BY home_conference ORDER BY total_enrollment ASC) LIMIT 1",
        "SELECT MIN_GROUP.home_conference FROM (SELECT home_conference, SUM(enrollment) AS summed_enrollment FROM university GROUP BY home_conference) AS MIN_GROUP ORDER BY MIN_GROUP.summed_enrollment ASC LIMIT 1",
        "WITH RankedConferences AS (SELECT home_conference, SUM(enrollment) AS enrollment_total FROM university GROUP BY home_conference) SELECT home_conference FROM RankedConferences ORDER BY enrollment_total ASC LIMIT 1",
        "SELECT HC FROM (SELECT home_conference AS HC, SUM(enrollment) AS total_enroll FROM university GROUP BY home_conference ORDER BY total_enroll ASC LIMIT 1) AS RESULT",
        "WITH EnrollmentSums AS (SELECT home_conference, SUM(enrollment) AS TotalEnrollment FROM university GROUP BY home_conference) SELECT home_conference FROM EnrollmentSums ORDER BY TotalEnrollment ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "nlq": "List all major name and major code in the order of their major code",
    "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
    "infer_predictions": [
      [
        "SELECT major_name, major_code FROM major ORDER BY major_code",
        "SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code",
        "SELECT major_name AS MajorName, major_code AS Code FROM major ORDER BY Code",
        "SELECT m.major_name AS MajorName, m.major_code AS Code FROM major m ORDER BY m.major_code",
        "SELECT M.major_name, M.major_code FROM major M ORDER BY M.major_code ASC",
        "SELECT MajorName, MajorCode FROM (SELECT major_name AS MajorName, major_code AS MajorCode FROM major) ORDER BY MajorCode"
      ]
    ]
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "nlq": "What are the names and codes for all majors ordered by their code?",
    "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
    "infer_predictions": [
      [
        "SELECT major_name, major_code FROM major ORDER BY major_code",
        "SELECT main.major_name, main.major_code FROM major main ORDER BY main.major_code ASC",
        "SELECT main.major_name AS MajorName, main.major_code AS MajorCode FROM major main ORDER BY MajorCode",
        "SELECT mn, mc FROM (SELECT major_name AS mn, major_code AS mc FROM major) ORDER BY mc"
      ]
    ]
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "nlq": "Show all majors and major ranks for the university with name Augustana College.",
    "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "infer_predictions": [
      [
        "SELECT m.major_name, mr.rank FROM major m JOIN major_ranking mr ON m.major_id = mr.major_id JOIN university u ON mr.university_id = u.university_id WHERE u.university_name = 'Augustana College'",
        "SELECT major.major_name, major_ranking.rank FROM major INNER JOIN major_ranking ON major.major_id = major_ranking.major_id INNER JOIN university ON major_ranking.university_id = university.university_id WHERE university.university_name = 'Augustana College'",
        "SELECT M.major_name, MR.rank FROM major AS M, major_ranking AS MR, university AS U WHERE M.major_id = MR.major_id AND MR.university_id = U.university_id AND U.university_name = 'Augustana College'",
        "SELECT M.major_name, R.rank FROM major M, major_ranking R, university U WHERE M.major_id = R.major_id AND R.university_id = U.university_id AND U.university_name = 'Augustana College'",
        "SELECT major.major_name, rank FROM major, major_ranking, university WHERE major.major_id = major_ranking.major_id AND major_ranking.university_id = university.university_id AND university.university_name = 'Augustana College'",
        "SELECT m.major_name, r.rank FROM major m INNER JOIN major_ranking r ON m.major_id = r.major_id INNER JOIN university u ON r.university_id = u.university_id WHERE u.university_name = 'Augustana College'",
        "SELECT major_name, rank FROM major JOIN major_ranking ON major.major_id = major_ranking.major_id JOIN university ON major_ranking.university_id = university.university_id WHERE university_name = 'Augustana College'",
        "SELECT m.major_name, mr.rank FROM major m CROSS JOIN major_ranking mr ON m.major_id = mr.major_id CROSS JOIN university u ON mr.university_id = u.university_id WHERE u.university_name = 'Augustana College'",
        "SELECT m.major_name, mr.rank FROM university u JOIN major_ranking mr ON u.university_id = mr.university_id JOIN major m ON mr.major_id = m.major_id WHERE u.university_name = 'Augustana College'",
        "SELECT M.major_name, MR.rank FROM major AS M, university AS U, major_ranking AS MR WHERE M.major_id = MR.major_id AND MR.university_id = U.university_id AND U.university_name = 'Augustana College'"
      ]
    ]
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "nlq": "What are the ranks and names of all majors at Augustana College?",
    "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "infer_predictions": [
      [
        "SELECT m.major_name, mr.rank FROM university u JOIN major_ranking mr ON u.university_id = mr.university_id JOIN major m ON mr.major_id = m.major_id WHERE u.university_name = 'Augustana College'",
        "SELECT m.major_name, mr.rank FROM major_ranking mr INNER JOIN university u ON mr.university_id = u.university_id INNER JOIN major m ON m.major_id = mr.major_id WHERE u.university_name = 'Augustana College'",
        "SELECT major_name, rank FROM major JOIN major_ranking ON major.major_id = major_ranking.major_id JOIN university ON university.university_id = major_ranking.university_id WHERE university_name = 'Augustana College'",
        "SELECT major_name, rank FROM university NATURAL JOIN major_ranking NATURAL JOIN major WHERE university_name = 'Augustana College'",
        "SELECT m.major_name, r.rank FROM major m, major_ranking r, university u WHERE m.major_id = r.major_id AND r.university_id = u.university_id AND u.university_name = 'Augustana College'",
        "SELECT m.major_name, mr.rank FROM university u, major_ranking mr, major m WHERE u.university_id = mr.university_id AND mr.major_id = m.major_id AND u.university_name = 'Augustana College'",
        "WITH ranked_majors AS (SELECT major_id, rank FROM major_ranking WHERE university_id = (SELECT university_id FROM university WHERE university_name = 'Augustana College')) SELECT major.major_name, ranked_majors.rank FROM major INNER JOIN ranked_majors ON major.major_id = ranked_majors.major_id",
        "SELECT m.major_name, (SELECT rank FROM major_ranking WHERE major_ranking.major_id = m.major_id AND major_ranking.university_id = (SELECT university_id FROM university WHERE university_name = 'Augustana College')) AS rank FROM major m"
      ]
    ]
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "nlq": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
    "infer_predictions": [
      [
        "SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE rank = 1 AND major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting'))",
        "SELECT U.university_name, U.city, U.state FROM university AS U JOIN major_ranking AS MR ON U.university_id = MR.university_id JOIN major AS M ON MR.major_id = M.major_id WHERE MR.rank = 1 AND M.major_name = 'Accounting'",
        "SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.rank = 1 AND major.major_name = 'Accounting')",
        "SELECT U.university_name, U.city, U.state FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR JOIN major M ON MR.major_id = M.major_id WHERE MR.university_id = U.university_id AND MR.rank = 1 AND M.major_name = 'Accounting')",
        "SELECT U.university_name, U.city, U.state FROM university U, major_ranking MR, major M WHERE U.university_id = MR.university_id AND MR.major_id = M.major_id AND MR.rank = 1 AND M.major_name = 'Accounting'",
        "SELECT university_name, city, state FROM university NATURAL JOIN (SELECT university_id FROM major_ranking NATURAL JOIN major WHERE rank = 1 AND major_name = 'Accounting')",
        "SELECT U.university_name, U.city, U.state FROM university AS U WHERE U.university_id = (SELECT MR.university_id FROM major_ranking AS MR JOIN major AS M ON MR.major_id = M.major_id WHERE MR.rank = 1 AND M.major_name = 'Accounting' LIMIT 1)",
        "SELECT U.university_name, U.city, U.state FROM university U INNER JOIN major_ranking MR ON U.university_id = MR.university_id INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank = 1",
        "SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE rank = 1 AND major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting'))"
      ]
    ]
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "nlq": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
    "infer_predictions": [
      [
        "SELECT U.university_name, U.city, U.state FROM university U JOIN major_ranking R ON R.university_id = U.university_id JOIN major M ON M.major_id = R.major_id WHERE M.major_name = 'Accounting' AND R.rank = 1",
        "SELECT U.university_name, U.city, U.state FROM university AS U, major_ranking AS R, major AS M WHERE U.university_id = R.university_id AND R.major_id = M.major_id AND M.major_name = 'Accounting' AND R.rank = 1",
        "SELECT university_name, city, state FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting') AND rank = 1)",
        "SELECT U.university_name, U.city, U.state FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking R INNER JOIN major M ON M.major_id = R.major_id WHERE R.university_id = U.university_id AND M.major_name = 'Accounting' AND R.rank = 1)",
        "SELECT university.university_name, university.city, university.state FROM university INNER JOIN major_ranking ON university.university_id = major_ranking.university_id INNER JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank = 1",
        "SELECT U.university_name, U.city, U.state FROM university U JOIN (SELECT R.university_id FROM major_ranking R INNER JOIN major M ON R.major_id = M.major_id WHERE M.major_name = 'Accounting' AND R.rank = 1) AS A ON U.university_id = A.university_id",
        "SELECT U.university_name, U.city, U.state FROM university U WHERE U.university_id IN (SELECT R.university_id FROM major_ranking R JOIN major M on R.major_id = M.major_id WHERE M.major_name = 'Accounting' AND R.rank = 1)",
        "SELECT (SELECT university_name FROM university WHERE university_id = R.university_id) as university_name, (SELECT city FROM university WHERE university_id = R.university_id) as city, (SELECT state FROM university WHERE university_id = R.university_id) as state FROM major_ranking R JOIN major M ON R.major_id = M.major_id WHERE M.major_name = 'Accounting' AND R.rank = 1",
        "SELECT U.university_name, U.city, U.state FROM university AS U WHERE EXISTS (SELECT * FROM major_ranking AS R JOIN major AS M ON R.major_id = M.major_id AND M.major_name = 'Accounting' AND R.rank = 1 AND R.university_id = U.university_id)",
        "SELECT U.university_name, U.city, U.state FROM (SELECT university_id FROM major_ranking WHERE rank = 1 AND major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting')) AS SubRank JOIN university U ON SubRank.university_id = U.university_id"
      ]
    ]
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "nlq": "What is the name of the university that has most number of majors with rank 1?",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT u.university_name FROM university u JOIN major_ranking m ON u.university_id = m.university_id WHERE m.rank = 1 GROUP BY u.university_name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(major_id) DESC LIMIT 1)",
        "WITH RankedUniversities AS (SELECT university_id, COUNT(major_id) AS MajorCount FROM major_ranking WHERE rank = 1 GROUP BY university_id) SELECT u.university_name FROM university u JOIN RankedUniversities r ON u.university_id = r.university_id ORDER BY r.MajorCount DESC LIMIT 1",
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(major_id) DESC LIMIT 1)",
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT u.university_name FROM university u WHERE u.university_id IN (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT SUB.university_name FROM (SELECT u.university_name, COUNT(m.major_id) AS MajorCount FROM university u LEFT JOIN major_ranking m ON u.university_id = m.university_id WHERE m.rank = 1 GROUP BY u.university_name ORDER BY MajorCount DESC LIMIT 1) AS SUB",
        "SELECT (SELECT university_name FROM university WHERE university_id = Temp.university_id) FROM (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1) as Temp"
      ]
    ]
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "nlq": "What is the name of the university with the most majors ranked number 1?",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT U.university_name FROM university AS U JOIN (SELECT university_id, COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id HAVING c = (SELECT MAX(c) FROM (SELECT COUNT(*) AS c FROM major_ranking WHERE rank = 1 GROUP BY university_id))) AS R ON U.university_id = R.university_id",
        "SELECT U.university_name FROM university U WHERE U.university_id = (SELECT MR.university_id FROM major_ranking MR WHERE MR.rank = 1 GROUP BY MR.university_id ORDER BY COUNT(MR.major_id) DESC LIMIT 1)",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(major_id) DESC LIMIT 1)",
        "SELECT sub.university FROM (SELECT U.university_name AS university, COUNT(*) AS ranked_no1 FROM university U JOIN major_ranking M ON U.university_id = M.university_id WHERE M.rank = 1 GROUP BY M.university_id) AS sub WHERE sub.ranked_no1 = (SELECT MAX(ranked_no1) FROM (SELECT COUNT(*) AS ranked_no1 FROM major_ranking WHERE rank = 1 GROUP BY university_id) AS f)",
        "SELECT U.university_name FROM (SELECT university_id, COUNT(*) AS top_ranked FROM major_ranking WHERE rank = 1 GROUP BY university_id) M INNER JOIN university U ON U.university_id = M.university_id ORDER BY M.top_ranked DESC LIMIT 1",
        "SELECT U.university_name FROM university AS U WHERE EXISTS (SELECT 1 FROM major_ranking MR WHERE MR.university_id = U.university_id AND MR.rank = 1 GROUP BY MR.university_id HAVING COUNT(MR.major_id) = (SELECT MAX(Count_major_id) FROM (SELECT COUNT(MR.major_id) AS Count_major_id FROM major_ranking MR WHERE rank = 1 GROUP BY MR.university_id) AS MaxRanked))",
        "SELECT U.university_name FROM university U WHERE U.university_id = (SELECT university_id FROM (SELECT university_id, COUNT(*) AS no_of_ones FROM major_ranking WHERE rank = 1 GROUP BY university_id ORDER BY COUNT(*) DESC LIMIT 1) AS D)"
      ]
    ]
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "nlq": "Show all university names without a major with rank 1?",
    "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
    "infer_predictions": [
      [
        "SELECT u.university_name FROM university u WHERE NOT EXISTS (SELECT * FROM major_ranking mr WHERE mr.rank = 1 AND mr.university_id = u.university_id)",
        "SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)",
        "SELECT university.university_name FROM university LEFT JOIN major_ranking ON university.university_id = major_ranking.university_id AND major_ranking.rank = 1 WHERE major_ranking.university_id IS NULL",
        "SELECT u.university_name FROM university u WHERE u.university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)",
        "SELECT un.university_name FROM university un LEFT OUTER JOIN major_ranking mrk ON un.university_id = mrk.university_id AND mrk.rank = 1 WHERE mrk.university_id IS NULL",
        "SELECT u_name.university_name FROM university u_name LEFT JOIN major_ranking m_rank ON u_name.university_id = m_rank.university_id AND m_rank.rank = 1 WHERE m_rank.rank IS NULL",
        "SELECT univ_name.university_name FROM university AS univ_name WHERE NOT EXISTS (SELECT 1 FROM major_ranking WHERE major_ranking.university_id = univ_name.university_id AND rank = 1)",
        "SELECT name.university_name FROM university AS name LEFT OUTER JOIN major_ranking AS rank ON name.university_id = rank.university_id WHERE rank.rank <> 1 OR rank.rank IS NULL"
      ]
    ]
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "nlq": "What are the names of all universities without any majors ranked number 1?",
    "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
    "infer_predictions": [
      [
        "SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)",
        "SELECT U.university_name FROM university U LEFT JOIN major_ranking M ON U.university_id = M.university_id WHERE M.rank = 1 GROUP BY U.university_id HAVING COUNT(M.rank) = 0",
        "SELECT university_name FROM university WHERE university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1 GROUP BY university_id)",
        "SELECT U.university_name FROM university U WHERE NOT EXISTS (SELECT 1 FROM major_ranking M WHERE M.university_id = U.university_id AND M.rank = 1)",
        "SELECT university_name FROM university U WHERE U.university_id NOT IN (SELECT university_id FROM major_ranking WHERE rank = 1)",
        "SELECT university_name FROM university U WHERE NOT EXISTS (SELECT NULL FROM major_ranking M WHERE M.university_id = U.university_id AND M.rank = 1)",
        "SELECT DISTINCT U.university_name FROM university U LEFT JOIN major_ranking M ON U.university_id = M.university_id WHERE M.rank != 1 OR M.rank IS NULL",
        "SELECT U.university_name FROM university U WHERE U.university_id NOT IN (SELECT DISTINCT M.university_id FROM major_ranking M WHERE M.rank = 1)",
        "SELECT U.university_name FROM university U WHERE U.university_id NOT IN (SELECT M.university_id FROM major_ranking M WHERE M.rank = 1 AND M.university_id IS NOT NULL)",
        "SELECT DISTINCT U.university_name FROM university U LEFT OUTER JOIN major_ranking M ON U.university_id = M.university_id AND M.rank = 1 WHERE M.university_id IS NULL"
      ]
    ]
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "nlq": "Show all university names with both major Accounting and major Urban Education.",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "infer_predictions": [
      [
        "SELECT DISTINCT U.university_name FROM university U WHERE EXISTS (SELECT 1 FROM major M JOIN major_ranking MR ON M.major_id = MR.major_id WHERE MR.university_id = U.university_id AND M.major_name = 'Accounting') AND EXISTS (SELECT 1 FROM major M JOIN major_ranking MR ON M.major_id = MR.major_id WHERE MR.university_id = U.university_id AND M.major_name = 'Urban Education')",
        "SELECT DISTINCT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major_ranking MR JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting') AND university_id IN (SELECT MR.university_id FROM major_ranking MR JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Urban Education')",
        "SELECT U.university_name FROM university U JOIN major_ranking MR1 ON U.university_id = MR1.university_id JOIN major M1 ON MR1.major_id = M1.major_id JOIN major_ranking MR2 ON U.university_id = MR2.university_id JOIN major M2 ON MR2.major_id = M2.major_id WHERE M1.major_name = 'Accounting' AND M2.major_name = 'Urban Education'",
        "SELECT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' INTERSECT SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Urban Education')",
        "SELECT DISTINCT U.university_name FROM university U, major_ranking MR, major M WHERE U.university_id = MR.university_id AND MR.major_id = M.major_id AND M.major_name IN ('Accounting', 'Urban Education') GROUP BY U.university_name HAVING COUNT(DISTINCT M.major_name) = 2",
        "SELECT U1.university_name FROM university U1 WHERE EXISTS (SELECT 1 FROM major M1, major_ranking MR1 WHERE M1.major_id = MR1.major_id AND MR1.university_id = U1.university_id AND M1.major_name = 'Accounting') INTERSECT SELECT U2.university_name FROM university U2 WHERE EXISTS (SELECT 1 FROM major M2, major_ranking MR2 WHERE M2.major_id = MR2.major_id AND MR2.university_id = U2.university_id AND M2.major_name = 'Urban Education')",
        "SELECT U.university_name FROM university U WHERE U.university_id IN (SELECT MR.university_id FROM major M JOIN major_ranking MR ON M.major_id = MR.major_id WHERE M.major_name = 'Accounting') INTERSECT SELECT U.university_name FROM university U WHERE U.university_id IN (SELECT MR.university_id FROM major M JOIN major_ranking MR ON M.major_id = MR.major_id WHERE M.major_name = 'Urban Education')",
        "SELECT DISTINCT U.university_name FROM university U JOIN (SELECT DISTINCT MR.university_id FROM major_ranking MR JOIN major M ON MR.major_id = M.major_id WHERE M.major_name IN ('Accounting', 'Urban Education') GROUP BY MR.university_id HAVING COUNT(DISTINCT M.major_name) = 2) Q ON U.university_id = Q.university_id",
        "SELECT U.university_name FROM university U WHERE EXISTS (SELECT * FROM major_ranking MR JOIN major M ON M.major_id = MR.major_id WHERE MR.university_id = U.university_id AND M.major_name = 'Accounting') AND EXISTS (SELECT * FROM major_ranking MR JOIN major M ON M.major_id = MR.major_id WHERE MR.university_id = U.university_id AND M.major_name = 'Urban Education')",
        "SELECT U.university_name FROM university U INNER JOIN (SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id GROUP BY MR.university_id HAVING SUM(CASE WHEN M.major_name = 'Accounting' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN M.major_name = 'Urban Education' THEN 1 ELSE 0 END) > 0) SubQ ON U.university_id = SubQ.university_id"
      ]
    ]
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "nlq": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "infer_predictions": [
      [
        "SELECT university_name FROM university WHERE university_id IN (SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Accounting' INTERSECT SELECT mr.university_id FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Urban Education')",
        "SELECT u.university_name FROM university u WHERE EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Accounting' AND mr.university_id = u.university_id) AND EXISTS (SELECT 1 FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Urban Education' AND mr.university_id = u.university_id)",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting') INTERSECT SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Urban Education'))",
        "SELECT u.university_name FROM university u JOIN major_ranking mr ON u.university_id = mr.university_id JOIN major m ON mr.major_id = m.major_id WHERE m.major_name = 'Accounting' GROUP BY u.university_id HAVING COUNT(DISTINCT m.major_name) = 2",
        "SELECT u.university_name FROM university u WHERE u.university_id IN (SELECT mr1.university_id FROM major_ranking mr1 JOIN major m1 ON mr1.major_id = m1.major_id AND m1.major_name = 'Accounting' JOIN major_ranking mr2 ON mr1.university_id = mr2.university_id JOIN major m2 ON mr2.major_id = m2.major_id AND m2.major_name = 'Urban Education')",
        "SELECT u.university_name FROM university u JOIN major_ranking mr1 ON u.university_id = mr1.university_id JOIN major m1 ON mr1.major_id = m1.major_id AND m1.major_name = 'Accounting' JOIN major_ranking mr2 ON u.university_id = mr2.university_id JOIN major m2 ON mr2.major_id = m2.major_id AND m2.major_name = 'Urban Education'",
        "SELECT u.university_name FROM university u WHERE (SELECT COUNT(DISTINCT m.major_name) FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE m.major_name IN ('Accounting', 'Urban Education') AND mr.university_id = u.university_id) = 2",
        "SELECT u.university_name FROM university u WHERE EXISTS (SELECT mr1.university_id, mr2.university_id FROM major_ranking mr1 JOIN major m1 ON mr1.major_id = m1.major_id AND m1.major_name = 'Accounting', major_ranking mr2 JOIN major m2 ON mr2.major_id = m2.major_id AND m2.major_name = 'Urban Education' WHERE mr1.university_id = mr2.university_id AND mr1.university_id = u.university_id)",
        "SELECT university_name FROM (SELECT u.university_name, m.major_name FROM university u LEFT JOIN major_ranking mr ON u.university_id = mr.university_id LEFT JOIN major m ON mr.major_id = m.major_id) GROUP BY university_name HAVING SUM(CASE WHEN major_name IN ('Accounting', 'Urban Education') THEN 1 ELSE 0 END) = 2"
      ]
    ]
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "nlq": "What is the name and overall ranking of universities in Wisconsin state?",
    "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
    "infer_predictions": [
      [
        "SELECT university_name, rank FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin'",
        "SELECT u.university_name, r.rank FROM university u, overall_ranking r WHERE u.university_id = r.university_id AND u.state = 'Wisconsin'",
        "SELECT u.university_name, ork.rank FROM university u JOIN overall_ranking ork ON u.university_id = ork.university_id WHERE u.state = 'Wisconsin'",
        "SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin'",
        "SELECT university.university_name, overall_ranking.rank FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE university.state = 'Wisconsin'",
        "SELECT univ.university_name AS name, rank.rank AS overall_rank FROM university AS univ JOIN overall_ranking AS rank ON univ.university_id = rank.university_id WHERE univ.state = 'Wisconsin'",
        "SELECT un.university_name, rk.rank FROM university AS un INNER JOIN overall_ranking AS rk ON un.university_id = rk.university_id WHERE un.state = 'Wisconsin'",
        "SELECT u2.university_name, r2.rank FROM university AS u2 INNER JOIN overall_ranking AS r2 ON u2.university_id = r2.university_id WHERE u2.state = 'Wisconsin'",
        "SELECT u1.university_name, ra1.rank FROM university u1 INNER JOIN overall_ranking ra1 ON u1.university_id = ra1.university_id WHERE u1.state = 'Wisconsin'",
        "SELECT university.university_name, rank FROM university CROSS JOIN overall_ranking USING(university_id) WHERE state = 'Wisconsin'"
      ]
    ]
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "nlq": "What is the name and rank of every university in Wisconsin?",
    "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
    "infer_predictions": [
      [
        "SELECT university_name, rank FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin'",
        "SELECT U.university_name, O.rank FROM university U, overall_ranking O WHERE U.university_id = O.university_id AND U.state = 'Wisconsin'",
        "SELECT name, rank FROM (SELECT university_name AS name, rank FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin')",
        "SELECT u.university_name, o.rank FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE u.state = 'Wisconsin'",
        "SELECT univ.university_name, orank.rank FROM university univ INNER JOIN overall_ranking orank ON univ.university_id = orank.university_id WHERE univ.state = 'Wisconsin'",
        "SELECT university_name AS u_name, rank FROM university JOIN overall_ranking USING (university_id) WHERE state = 'Wisconsin'",
        "SELECT UN.university_name, ORK.rank FROM university AS UN INNER JOIN overall_ranking AS ORK ON UN.university_id = ORK.university_id WHERE UN.state = 'Wisconsin'",
        "SELECT university.university_name, overall_ranking.rank FROM university, overall_ranking WHERE university.state = 'Wisconsin' AND university.university_id = overall_ranking.university_id",
        "SELECT UN.university_name, rank FROM university UN JOIN overall_ranking outrk ON UN.university_id = outrk.university_id WHERE UN.state = 'Wisconsin'",
        "SELECT university_name AS Institute, rank AS InstitutionRank FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE state = 'Wisconsin'"
      ]
    ]
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "nlq": "What is the university name with highest research point?",
    "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1)",
        "SELECT uni.university_name FROM university uni JOIN overall_ranking rank ON uni.university_id = rank.university_id ORDER BY rank.research_point DESC LIMIT 1",
        "SELECT U.university_name FROM university U INNER JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.research_point = (SELECT MAX(research_point) FROM overall_ranking)",
        "SELECT U.university_name FROM university U WHERE U.university_id IN (SELECT university_id FROM overall_ranking WHERE research_point = (SELECT MAX(research_point) FROM overall_ranking))",
        "SELECT U.university_name FROM (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1) AS TopResearchId JOIN university U ON U.university_id = TopResearchId.university_id",
        "SELECT U.university_name FROM university U, overall_ranking R WHERE U.university_id = R.university_id AND R.research_point = (SELECT MAX(R2.research_point) FROM overall_ranking R2)",
        "SELECT U.university_name FROM university U WHERE EXISTS (SELECT 1 FROM overall_ranking R WHERE R.university_id = U.university_id ORDER BY R.research_point DESC LIMIT 1)",
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM overall_ranking ORDER BY research_point DESC, university_id ASC LIMIT 1)",
        "SELECT U.university_name FROM university U JOIN (SELECT university_id, MAX(research_point) AS MaxResearch FROM overall_ranking GROUP BY university_id) AS MaxR ON U.university_id = MaxR.university_id AND MaxR.MaxResearch = (SELECT MAX(research_point) FROM overall_ranking)"
      ]
    ]
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "nlq": "What is the name of the university with the most research points?",
    "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT U.university_name FROM university U JOIN overall_ranking O ON U.university_id = O.university_id ORDER BY O.research_point DESC LIMIT 1",
        "SELECT university_name FROM university WHERE university_id = (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1)",
        "SELECT university_name FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY research_point DESC LIMIT 1",
        "SELECT U.university_name FROM overall_ranking AS O, university AS U WHERE O.university_id = U.university_id ORDER BY O.research_point DESC LIMIT 1",
        "SELECT U.university_name FROM university U WHERE EXISTS (SELECT 1 FROM overall_ranking O WHERE O.university_id = U.university_id ORDER BY O.research_point DESC LIMIT 1)",
        "SELECT U.university_name FROM university U WHERE U.university_id = (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1)",
        "SELECT university_name FROM university INNER JOIN (SELECT university_id FROM overall_ranking ORDER BY research_point DESC LIMIT 1) AS MaxResearch ON university.university_id = MaxResearch.university_id",
        "SELECT university_name FROM university, overall_ranking WHERE university.university_id = overall_ranking.university_id ORDER BY overall_ranking.research_point DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "nlq": "List all university names in ascending order of their reputation points.",
    "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
    "infer_predictions": [
      [
        "SELECT university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY reputation_point ASC",
        "SELECT university_name FROM university, overall_ranking WHERE university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point ASC",
        "SELECT university.university_name FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point ASC",
        "SELECT university_name FROM university INNER JOIN overall_ranking USING(university_id) ORDER BY reputation_point ASC"
      ]
    ]
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "nlq": "What are the names of all universities in ascending order of reputation points?",
    "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
    "infer_predictions": [
      [
        "SELECT university.university_name FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id ORDER BY overall_ranking.reputation_point ASC",
        "SELECT u.university_name FROM university AS u INNER JOIN overall_ranking AS ork ON u.university_id = ork.university_id ORDER BY ork.reputation_point",
        "SELECT U.university_name FROM university U, overall_ranking ORK WHERE U.university_id = ORK.university_id ORDER BY ORK.reputation_point ASC",
        "SELECT u.university_name FROM university u JOIN overall_ranking ork ON ork.university_id = u.university_id ORDER BY ork.reputation_point ASC",
        "SELECT (SELECT university_name FROM university WHERE university_id = ork.university_id) AS university_name FROM overall_ranking ork ORDER BY ork.reputation_point ASC",
        "SELECT u.university_name FROM overall_ranking ork LEFT JOIN university u ON u.university_id = ork.university_id ORDER BY ork.reputation_point",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking ORDER BY reputation_point ASC)",
        "SELECT u.name FROM (SELECT university_id, university_name AS name FROM university) AS u JOIN overall_ranking ON overall_ranking.university_id = u.university_id ORDER BY overall_ranking.reputation_point ASC",
        "SELECT un.university_name FROM university un INNER JOIN (SELECT university_id, reputation_point FROM overall_ranking) ork ON un.university_id = ork.university_id ORDER BY ork.reputation_point",
        "SELECT un.university_name FROM university AS un WHERE EXISTS (SELECT 1 FROM overall_ranking WHERE overall_ranking.university_id = un.university_id ORDER BY reputation_point ASC)"
      ]
    ]
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "nlq": "What is the name of university with major Accounting ranked 3 or above?",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
    "infer_predictions": [
      [
        "SELECT university.university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank <= 3",
        "SELECT U.university_name FROM university U INNER JOIN major_ranking MR ON U.university_id = MR.university_id INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3",
        "SELECT univ.university_name FROM university univ, major_ranking mrk, major mjr WHERE univ.university_id = mrk.university_id AND mrk.major_id = mjr.major_id AND mjr.major_name = 'Accounting' AND mrk.rank <= 3",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting') AND rank <= 3)",
        "SELECT university_name FROM university WHERE EXISTS (SELECT 1 FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE major_ranking.university_id = university.university_id AND major_name = 'Accounting' AND rank <= 3)",
        "SELECT university.university_name FROM university JOIN (SELECT university_id FROM major_ranking WHERE rank <= 3 AND major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting')) MQ ON university.university_id = MQ.university_id",
        "SELECT U.university_name FROM university U WHERE U.university_id IN (SELECT MR.university_id FROM major_ranking MR JOIN major M ON M.major_id = MR.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3)",
        "SELECT DISTINCT U.university_name FROM university U JOIN major_ranking MR ON U.university_id = MR.university_id JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3",
        "SELECT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major M JOIN major_ranking MR ON M.major_id = MR.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3)"
      ]
    ]
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "nlq": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
    "infer_predictions": [
      [
        "SELECT U.university_name FROM university U INNER JOIN major_ranking MR ON U.university_id = MR.university_id INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3",
        "SELECT university_name FROM university WHERE university_id IN (SELECT MR.university_id FROM major_ranking MR JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3)",
        "SELECT U.university_name FROM university U, major_ranking MR, major M WHERE U.university_id = MR.university_id AND MR.major_id = M.major_id AND M.major_name = 'Accounting' AND MR.rank <= 3",
        "SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM major_ranking WHERE major_id IN (SELECT major_id FROM major WHERE major_name = 'Accounting') AND rank <= 3)",
        "SELECT U.university_name FROM university U WHERE EXISTS (SELECT 1 FROM major_ranking MR, major M WHERE MR.university_id = U.university_id AND MR.major_id = M.major_id AND M.major_name = 'Accounting' AND MR.rank <= 3)",
        "SELECT DISTINCT U.university_name FROM university U INNER JOIN major_ranking MR ON MR.university_id = U.university_id INNER JOIN major M ON M.major_id = MR.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3",
        "SELECT U.university_name FROM university U WHERE U.university_id IN (SELECT MR.university_id FROM major_ranking MR INNER JOIN major M ON MR.major_id = M.major_id WHERE M.major_name = 'Accounting' AND MR.rank <= 3)",
        "WITH Ranked_Universities AS (SELECT university_id FROM major_ranking WHERE major_id = (SELECT major_id FROM major WHERE major_name = 'Accounting') AND rank <= 3) SELECT university_name FROM university WHERE university_id IN (SELECT university_id FROM Ranked_Universities)",
        "SELECT university_name FROM university JOIN major_ranking ON university.university_id = major_ranking.university_id JOIN major ON major_ranking.major_id = major.major_id WHERE major.major_name = 'Accounting' AND major_ranking.rank <= 3",
        "SELECT university_name FROM university WHERE EXISTS (SELECT * FROM major_ranking JOIN major ON major_ranking.major_id = major.major_id WHERE university.university_id = major_ranking.university_id AND major.major_name = 'Accounting' AND major_ranking.rank <= 3)"
      ]
    ]
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "nlq": "What is the total enrollment of universities with a overall rank 5 or below?",
    "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
    "infer_predictions": [
      [
        "SELECT SUM(u.enrollment) FROM university AS u JOIN overall_ranking AS o ON u.university_id = o.university_id WHERE o.rank <= 5",
        "SELECT SUM(enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank <= 5)",
        "SELECT SUM(university.enrollment) FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 5",
        "SELECT SUM(u.enrollment) FROM university u, overall_ranking o WHERE u.university_id = o.university_id AND o.rank <= 5",
        "SELECT TOTAL(university.enrollment) FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 5",
        "SELECT SUM(university.enrollment) FROM university, overall_ranking WHERE university.university_id = overall_ranking.university_id AND overall_ranking.rank <= 5",
        "SELECT SUM(u.enrollment) FROM university u INNER JOIN overall_ranking o ON u.university_id = o.university_id WHERE o.rank <= 5",
        "SELECT SUM(A.enrollment) FROM university A JOIN overall_ranking B ON A.university_id = B.university_id WHERE B.rank <= 5",
        "SELECT SUM(u.enrollment) FROM university AS u WHERE EXISTS (SELECT 1 FROM overall_ranking AS o WHERE o.university_id = u.university_id AND o.rank <= 5)"
      ]
    ]
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "nlq": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
    "infer_predictions": [
      [
        "SELECT SUM(university.enrollment) FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 5",
        "SELECT SUM(enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank <= 5)",
        "SELECT TOTAL(university.enrollment) FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 5",
        "SELECT SUM(u.enrollment) FROM university u JOIN overall_ranking ork ON u.university_id = ork.university_id WHERE ork.rank <= 5",
        "SELECT SUM(enrollment) FROM university WHERE university_id IN (SELECT ork.university_id FROM overall_ranking ork WHERE ork.rank <= 5)",
        "SELECT SUM(u.enrollment) FROM university u WHERE EXISTS (SELECT 1 FROM overall_ranking ork WHERE ork.rank <= 5 AND ork.university_id = u.university_id)",
        "SELECT SUM(u.enrollment) FROM university u WHERE u.university_id IN (SELECT university_id FROM overall_ranking WHERE rank <= 5)",
        "SELECT TOTAL(u.enrollment) FROM university u, overall_ranking ork WHERE u.university_id = ork.university_id AND ork.rank <= 5",
        "SELECT TOTAL(u.enrollment) FROM university u INNER JOIN overall_ranking ork ON u.university_id = ork.university_id WHERE rank <= 5",
        "SELECT SUM(enrollment) AS TotalEnrollment FROM university WHERE university_id IN (SELECT DISTINCT(university_id) FROM overall_ranking WHERE rank <= 5)"
      ]
    ]
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "nlq": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT U.university_name, O.citation_point FROM university U JOIN overall_ranking O ON U.university_id = O.university_id WHERE O.rank <= 3",
        "SELECT U.university_name, O.citation_point FROM overall_ranking O INNER JOIN university U ON O.university_id = U.university_id WHERE O.rank IN (1, 2, 3)",
        "SELECT univ.university_name, rank.citation_point FROM university univ, overall_ranking rank WHERE univ.university_id = rank.university_id AND rank.rank BETWEEN 1 AND 3",
        "SELECT university_name, citation_point FROM university INNER JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 3",
        "SELECT U.university_name, O.citation_point FROM university AS U, overall_ranking AS O WHERE U.university_id = O.university_id AND O.rank <= 3",
        "SELECT a.university_name, b.citation_point FROM university a JOIN overall_ranking b ON a.university_id = b.university_id AND b.rank <= 3",
        "SELECT U.university_name, citation_point FROM (SELECT university_id, citation_point FROM overall_ranking WHERE rank <= 3) AS BestRank JOIN university U ON U.university_id = BestRank.university_id",
        "SELECT university.university_name, overall_ranking.citation_point FROM university JOIN overall_ranking ON university.university_id = overall_ranking.university_id WHERE overall_ranking.rank <= 3",
        "SELECT (SELECT university_name FROM university WHERE university_id = O.university_id) AS Name, citation_point FROM overall_ranking O WHERE O.rank <= 3",
        "SELECT U.university_name, citation_point FROM university U JOIN (SELECT university_id, citation_point FROM overall_ranking WHERE rank IN (1, 2, 3)) AS SubRank ON U.university_id = SubRank.university_id"
      ]
    ]
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "nlq": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT university.university_name, overall_ranking.citation_point FROM overall_ranking JOIN university ON overall_ranking.university_id = university.university_id ORDER BY overall_ranking.reputation_point DESC LIMIT 3",
        "SELECT university_name, citation_point FROM university NATURAL JOIN overall_ranking ORDER BY reputation_point DESC LIMIT 3",
        "SELECT university.university_name, overall_ranking.citation_point FROM overall_ranking, university WHERE overall_ranking.university_id = university.university_id ORDER BY reputation_point DESC LIMIT 3",
        "SELECT U.university_name, O.citation_point FROM university U, overall_ranking O WHERE U.university_id = O.university_id ORDER BY O.reputation_point DESC LIMIT 3",
        "WITH TopUniversities AS (SELECT university_id FROM overall_ranking ORDER BY reputation_point DESC LIMIT 3) SELECT university_name, citation_point FROM university JOIN TopUniversities ON university.university_id = TopUniversities.university_id JOIN overall_ranking ON TopUniversities.university_id = overall_ranking.university_id",
        "SELECT U.university_name, O.citation_point FROM (SELECT university_id, citation_point FROM overall_ranking ORDER BY reputation_point DESC LIMIT 3) O JOIN university U ON U.university_id = O.university_id",
        "SELECT U.university_name, citation_point FROM university U JOIN (SELECT university_id, citation_point FROM overall_ranking ORDER BY reputation_point DESC LIMIT 3) AS ORank ON U.university_id = ORank.university_id",
        "WITH RankedUni AS (SELECT university_id, citation_point FROM overall_ranking ORDER BY reputation_point DESC LIMIT 3) SELECT university_name, citation_point FROM university JOIN RankedUni ON university.university_id = RankedUni.university_id"
      ]
    ]
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "nlq": "which states do have more than two universities with enrollment smaller than 3000?",
    "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT state FROM university GROUP BY state HAVING COUNT(university_id) > 2 AND MAX(enrollment) < 3000",
        "SELECT U.state FROM university U WHERE U.enrollment < 3000 GROUP BY U.state HAVING COUNT(U.university_id) > 2",
        "SELECT state FROM (SELECT state, university_id FROM university WHERE enrollment < 3000) GROUP BY state HAVING COUNT(university_id) > 2",
        "SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(*) > 2",
        "SELECT DISTINCT U.state FROM university U INNER JOIN (SELECT university_id FROM university WHERE enrollment < 3000) AS Filtered ON U.university_id = Filtered.university_id GROUP BY U.state HAVING COUNT(U.university_id) > 2",
        "SELECT state FROM university WHERE university_id IN (SELECT university_id FROM university WHERE enrollment < 3000) GROUP BY state HAVING COUNT(*) > 2",
        "SELECT U.state FROM university U GROUP BY U.state HAVING SUM(CASE WHEN U.enrollment < 3000 THEN 1 ELSE 0 END) > 2",
        "SELECT state FROM (SELECT DISTINCT state, university_id FROM university WHERE enrollment < 3000) AS Table1 GROUP BY state HAVING COUNT(university_id) > 2",
        "SELECT u.state FROM (SELECT state, university_id, COUNT(*) AS UniCount FROM university WHERE enrollment < 3000 GROUP BY state, university_id HAVING COUNT(university_id) > 1) u GROUP BY u.state HAVING SUM(u.UniCount) > 2",
        "SELECT university.state FROM university WHERE enrollment < 3000 GROUP BY state HAVING COUNT(DISTINCT university_id) > 2"
      ]
    ]
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "nlq": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT state FROM university GROUP BY state HAVING COUNT(university_id) > 2 AND SUM(CASE WHEN enrollment < 3000 THEN 1 ELSE 0 END) > 2",
        "SELECT u.state FROM university AS u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(*) > 2",
        "SELECT state FROM (SELECT state, university_id FROM university WHERE enrollment < 3000) AS subquery GROUP BY state HAVING COUNT(university_id) > 2",
        "SELECT u.state FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.university_id) > 2",
        "SELECT state FROM university GROUP BY state HAVING COUNT(university_id) FILTER (WHERE enrollment < 3000) > 2",
        "WITH filtered_uni AS (SELECT state, university_id FROM university WHERE enrollment < 3000) SELECT state FROM filtered_uni GROUP BY state HAVING COUNT(university_id) > 2",
        "SELECT COUNT(c.state) AS count_state, c.state FROM university c WHERE c.enrollment < 3000 GROUP BY c.state HAVING count_state > 2",
        "SELECT u.state, COUNT(u.state) FROM university u WHERE u.enrollment < 3000 GROUP BY u.state HAVING COUNT(u.state) > 2",
        "SELECT u1.state FROM university u1 INNER JOIN (SELECT university_id FROM university WHERE enrollment < 3000) u2 ON u1.university_id = u2.university_id GROUP BY u1.state HAVING COUNT(u1.university_id) > 2"
      ]
    ]
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "nlq": "Find the titles of movies that don\u2019t have any rating.",
    "gold": "SELECT title FROM movies WHERE rating  =  'null'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE rating IS NULL",
        "SELECT m.title FROM movies m WHERE m.rating IS NULL",
        "SELECT title FROM movies WHERE IFNULL(rating, '') = ''",
        "SELECT title FROM movies WHERE rating NOT BETWEEN 1 AND 10",
        "SELECT m.title FROM movies AS m WHERE m.rating IS NULL",
        "SELECT m.title FROM movies m WHERE NOT EXISTS (SELECT 1 FROM movies mm WHERE mm.rating IS NOT NULL AND mm.code = m.code)",
        "SELECT title FROM movies WHERE LENGTH(rating) = 0",
        "SELECT title FROM movies WHERE rating IS NULL OR rating = ''",
        "SELECT DISTINCT m.title FROM movies m WHERE m.rating IS NULL"
      ]
    ]
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "nlq": "What are the names of movies that do not have any ratings?",
    "gold": "SELECT title FROM movies WHERE rating  =  'null'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE rating IS NULL",
        "SELECT m.title FROM movies m WHERE m.rating IS NULL",
        "SELECT title FROM movies WHERE COALESCE(rating, '') = ''",
        "SELECT DISTINCT title FROM movies WHERE rating IS NULL",
        "SELECT m.title FROM movies AS m WHERE m.rating IS NULL",
        "SELECT title FROM movies m LEFT JOIN movietheaters t ON m.code = t.movie WHERE m.rating IS NULL",
        "SELECT m.title FROM movies m WHERE NOT EXISTS (SELECT 1 FROM movietheaters t WHERE t.movie = m.code) AND m.rating IS NULL",
        "SELECT title FROM movies WHERE LENGTH(rating) = 0",
        "SELECT m.title FROM movies AS m WHERE m.rating IS NULL AND NOT EXISTS (SELECT 1 FROM movietheaters t WHERE t.movie = m.code)",
        "SELECT M.title FROM movies M WHERE M.rating IS NULL GROUP BY M.title"
      ]
    ]
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "nlq": "Find the names of movies whose rating is \u2018G\u2019.",
    "gold": "SELECT title FROM movies WHERE rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE rating = 'G'",
        "SELECT M.title FROM movies M WHERE M.rating = 'G'",
        "SELECT title FROM movies WHERE rating LIKE 'G'",
        "SELECT title FROM movies WHERE rating IS 'G'",
        "SELECT M.title FROM movies M WHERE M.rating LIKE 'G'",
        "SELECT DISTINCT M.title FROM movies M WHERE M.rating = 'G'",
        "SELECT title FROM movies WHERE 'G' = rating"
      ]
    ]
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "nlq": "What are names of movies that have a 'G' ratings?",
    "gold": "SELECT title FROM movies WHERE rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE rating = 'G'",
        "SELECT m.title FROM movies m WHERE m.rating = 'G'",
        "SELECT title FROM movies WHERE rating LIKE 'G'",
        "SELECT DISTINCT m.title FROM movies m WHERE m.rating LIKE 'G'",
        "SELECT m.title FROM movies m WHERE m.rating = 'G' GROUP BY m.title",
        "SELECT title FROM movies WHERE UPPER(rating) = 'G'",
        "SELECT DISTINCT title FROM (SELECT title FROM movies WHERE rating = 'G')"
      ]
    ]
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "nlq": "Find the title of the movie that is played in the Odeon theater.",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT m.title FROM movies m JOIN movietheaters t ON m.code = t.movie WHERE t.name = 'Odeon'",
        "SELECT title FROM movies WHERE code = (SELECT movie FROM movietheaters WHERE name = 'Odeon' LIMIT 1)",
        "SELECT movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT distinct title FROM movies, movietheaters WHERE movietheaters.name = 'Odeon' AND movies.code = movietheaters.movie",
        "SELECT mtitle FROM (SELECT m.code as mcode, m.title as mtitle FROM movies m) JOIN movietheaters t ON t.movie = mcode WHERE t.name = 'Odeon'",
        "SELECT (SELECT title FROM movies WHERE code = movietheaters.movie) AS title FROM movietheaters WHERE name = 'Odeon'",
        "SELECT title FROM (SELECT movies.code, movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon')",
        "SELECT GROUP_CONCAT(title) FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT title FROM movies INNER JOIN movietheaters t ON movies.code = t.movie WHERE t.name = 'Odeon' GROUP BY title"
      ]
    ]
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "nlq": "What are the movie titles for ones that are played in the Odeon theater?",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "infer_predictions": [
      [
        "SELECT m.title FROM movies m JOIN movietheaters mt ON mt.movie = m.code WHERE mt.name = 'Odeon'",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT m.title FROM movies AS m, movietheaters AS mt WHERE m.code = mt.movie AND mt.name = 'Odeon'",
        "SELECT title FROM movies WHERE EXISTS (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND name = 'Odeon')",
        "SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT DISTINCT movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT title FROM movies INNER JOIN (SELECT movie FROM movietheaters WHERE name = 'Odeon') mt ON movies.code = mt.movie",
        "SELECT m.title FROM movietheaters mt, movies m WHERE mt.movie = m.code AND mt.name = 'Odeon'",
        "SELECT movies.title FROM movies CROSS JOIN movietheaters WHERE movies.code = movietheaters.movie AND movietheaters.name = 'Odeon'",
        "SELECT m.title FROM movies m WHERE m.code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')"
      ]
    ]
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "nlq": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT movies.title, movietheaters.name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code",
        "SELECT title, name FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie",
        "SELECT m.title, mt.name FROM movies m, movietheaters mt WHERE m.code = mt.movie",
        "SELECT m.title AS Movie_Title, mt.name AS Theater_Name FROM movies m JOIN movietheaters mt ON m.code = mt.movie",
        "SELECT title, name FROM movietheaters, movies WHERE movietheaters.movie = movies.code",
        "SELECT movies.title, movietheaters.name FROM movietheaters, movies WHERE movietheaters.movie = movies.code",
        "SELECT title AS MovieName, name AS TheaterName FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie"
      ]
    ]
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "nlq": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT movies.title, movietheaters.name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code",
        "SELECT title, name FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie",
        "SELECT m.title, mt.name FROM movies m, movietheaters mt WHERE m.code = mt.movie",
        "SELECT m.title, mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code",
        "SELECT movies.title, movietheaters.name FROM movietheaters, movies WHERE movietheaters.movie = movies.code",
        "SELECT DISTINCT movies.title, movietheaters.name FROM movies, movietheaters WHERE movietheaters.movie = movies.code",
        "SELECT title, name FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY title, name",
        "SELECT m.title, mt.name FROM movies m INNER JOIN movietheaters mt ON m.code = mt.movie ORDER BY mt.name",
        "SELECT movies.title, movietheaters.name FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie ORDER BY title;"
      ]
    ]
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "nlq": "Find the number of movies whose rating is \u2018G\u2019.",
    "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM movies WHERE rating = 'G'",
        "SELECT COUNT(movies.code) FROM movies WHERE movies.rating = 'G'",
        "SELECT COUNT(1) FROM movies WHERE rating = 'G'",
        "SELECT COUNT(*) AS count FROM movies WHERE movies.rating = 'G'",
        "SELECT (SELECT COUNT(*) FROM movies WHERE rating = 'G')",
        "SELECT SUM(CASE WHEN rating = 'G' THEN 1 ELSE 0 END) FROM movies",
        "SELECT (SELECT COUNT(code) FROM movies WHERE rating = 'G')",
        "SELECT COUNT(code) FROM (SELECT code FROM movies WHERE rating = 'G') AS SubQuery"
      ]
    ]
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "nlq": "How many movies had a 'G' rating?",
    "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM movies WHERE rating = 'G'",
        "SELECT COUNT(*) AS total_g_rated FROM movies WHERE rating = 'G'",
        "SELECT COUNT(movies.code) FROM movies WHERE movies.rating = 'G'",
        "SELECT COUNT(code) FROM movies WHERE rating LIKE 'G'",
        "SELECT COUNT(1) FROM movies WHERE rating = 'G'",
        "SELECT COUNT(*) FROM movies GROUP BY rating HAVING rating = 'G'",
        "SELECT (SELECT COUNT(*) FROM movies WHERE rating = 'G')",
        "SELECT COUNT(code) FROM movies m WHERE m.rating = 'G'",
        "SELECT COUNT(*) FROM (SELECT 1 FROM movies WHERE rating = 'G')"
      ]
    ]
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "nlq": "How many movies are playing across all theaters?",
    "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT movie) FROM movietheaters",
        "SELECT COUNT(*) FROM (SELECT DISTINCT movie FROM movietheaters)",
        "SELECT COUNT(*) FROM (SELECT movie FROM movietheaters GROUP BY movie)",
        "SELECT COUNT(DISTINCT mt.movie) FROM movietheaters mt",
        "SELECT COUNT(*) FROM (SELECT DISTINCT movie AS playing_movies FROM movietheaters)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT mt.movie FROM movietheaters mt)",
        "SELECT COUNT(*) FROM (SELECT movie FROM movietheaters GROUP BY movie HAVING COUNT(movie) >= 1)"
      ]
    ]
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "nlq": "How many movies are playing in theaters?",
    "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT movie) FROM movietheaters",
        "SELECT COUNT(unique_code) FROM (SELECT DISTINCT movie as unique_code FROM movietheaters)",
        "SELECT COUNT(*) FROM (SELECT movie FROM movietheaters GROUP BY movie)",
        "SELECT COUNT(DISTINCT code) FROM (SELECT movie AS code FROM movietheaters)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT movie AS movie_code FROM movietheaters)",
        "SELECT COUNT(DISTINCT movie) FROM movietheaters WHERE movie IS NOT NULL",
        "SELECT COUNT(DISTINCT movies.code) FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie",
        "SELECT COUNT(DISTINCT m.code) FROM movies m JOIN movietheaters mt ON m.code = mt.movie",
        "SELECT COUNT(*) FROM (SELECT DISTINCT m.code FROM movies m INNER JOIN movietheaters mt ON m.code = mt.movie)"
      ]
    ]
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "nlq": "How many distinct movies are on in theaters?",
    "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT movie) FROM movietheaters;",
        "SELECT COUNT(DISTINCT mt.movie) FROM movietheaters mt;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT movie FROM movietheaters);",
        "SELECT COUNT(*) FROM (SELECT DISTINCT mt.movie FROM movietheaters mt);",
        "SELECT COUNT(DISTINCT m.code) FROM movies m JOIN movietheaters mt ON mt.movie = m.code;",
        "SELECT SUM(CASE WHEN movie IS NOT NULL THEN 1 ELSE 0 END) AS CinemaMovies FROM (SELECT DISTINCT movie FROM movietheaters);",
        "SELECT COUNT(DISTINCT movie) AS TotalMoviesInCinema FROM movietheaters;"
      ]
    ]
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "nlq": "How many different movies are playing?",
    "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT movie) FROM movietheaters",
        "SELECT COUNT(*) FROM (SELECT DISTINCT movie FROM movietheaters)",
        "SELECT COUNT(DISTINCT code) FROM movietheaters",
        "SELECT COUNT(DISTINCT mt.movie) FROM movietheaters mt",
        "SELECT COUNT(DISTINCT mt.code) FROM movietheaters mt",
        "SELECT COUNT(*) FROM (SELECT DISTINCT mt.movie FROM movietheaters mt)",
        "SELECT COUNT(*) FROM (SELECT DISTINCT mt.code FROM movietheaters mt)",
        "SELECT COUNT(DISTINCT movie) FROM (SELECT movie FROM movietheaters GROUP BY movie)",
        "SELECT COUNT(DISTINCT movie) AS NumberOfMovies FROM movietheaters"
      ]
    ]
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "nlq": "How many distinct movie theaters are there?",
    "gold": "SELECT count(DISTINCT name) FROM movietheaters",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT name) FROM movietheaters;",
        "SELECT COUNT(*) FROM (SELECT DISTINCT name FROM movietheaters);",
        "SELECT COUNT(*) FROM (SELECT name FROM movietheaters GROUP BY name);",
        "SELECT COUNT(DISTINCT name) AS count_theaters FROM movietheaters;",
        "SELECT COUNT(DISTINCT t.name) FROM movietheaters t;",
        "SELECT COUNT(name) FROM (SELECT DISTINCT name FROM movietheaters) AS unique_theaters;",
        "SELECT COUNT(*) FROM (SELECT name FROM movietheaters GROUP BY name) AS grouped_theaters;"
      ]
    ]
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "nlq": "How many different movie theaters exist?",
    "gold": "SELECT count(DISTINCT name) FROM movietheaters",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT name) FROM movietheaters",
        "SELECT COUNT(*) FROM (SELECT DISTINCT name FROM movietheaters)",
        "SELECT SUM(CASE WHEN COUNTed THEN 1 ELSE 0 END) COUNTed FROM (SELECT name, TRUE COUNTed FROM movietheaters GROUP BY name)",
        "SELECT COUNT(name) FROM (SELECT DISTINCT name FROM movietheaters)",
        "SELECT COUNT(DISTINCT name) AS numberOfTheaters FROM movietheaters",
        "SELECT COUNT(*) FROM (SELECT name FROM movietheaters GROUP BY name)",
        "SELECT COUNT(name) FROM (SELECT name FROM movietheaters GROUP BY name HAVING COUNT(name)>0)",
        "SELECT COUNT(DISTINCT name) FROM movietheaters WHERE name IS NOT NULL",
        "SELECT SUM(cnt) FROM (SELECT 1 AS cnt FROM movietheaters GROUP BY name)"
      ]
    ]
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "nlq": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
    "infer_predictions": [
      [
        "SELECT rating FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name LIKE '%Citizen%')",
        "SELECT M.rating FROM movies M JOIN movietheaters MT ON M.code = MT.movie WHERE MT.name LIKE '%Citizen%'",
        "SELECT movies.rating FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name LIKE '%Citizen%'",
        "SELECT rating FROM movies WHERE code = (SELECT movie FROM movietheaters WHERE name LIKE '%Citizen%' LIMIT 1)",
        "SELECT rating FROM movies WHERE EXISTS (SELECT 1 FROM movietheaters WHERE movie = movies.code AND name LIKE '%Citizen%')",
        "SELECT movies.rating FROM movies, movietheaters WHERE movies.code = movietheaters.movie AND movietheaters.name LIKE '%Citizen%'",
        "SELECT (SELECT rating FROM movies WHERE code = MT.movie) FROM movietheaters MT WHERE MT.name LIKE '%Citizen%' LIMIT 1",
        "SELECT DISTINCT movies.rating FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name LIKE '%Citizen%'",
        "SELECT rating FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name LIKE '%Citizen%' GROUP BY movie)",
        "SELECT M.rating FROM movies M, movietheaters MT WHERE M.code = MT.movie AND MT.name LIKE '%Citizen%'"
      ]
    ]
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "nlq": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
    "infer_predictions": [
      [
        "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
        "SELECT m.rating FROM movies m WHERE m.title LIKE '%Citizen%'",
        "SELECT rating FROM movies WHERE instr(title, 'Citizen') > 0",
        "SELECT movies.rating FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movies.title LIKE '%Citizen%'",
        "SELECT m.rating FROM movies m INNER JOIN movietheaters mt ON m.code = mt.movie WHERE m.title LIKE '%Citizen%'",
        "SELECT rating FROM movies WHERE title GLOB '*Citizen*'",
        "SELECT rating FROM (SELECT * FROM movies WHERE title LIKE '%Citizen%')",
        "SELECT rating FROM movies WHERE title LIKE '%Citizen%' AND length(title) > 0",
        "SELECT DISTINCT m.rating FROM movies m WHERE m.title LIKE '%Citizen%'"
      ]
    ]
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "nlq": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
    "infer_predictions": [
      [
        "SELECT DISTINCT mt.name FROM movietheaters AS mt JOIN movies AS m ON mt.movie = m.code WHERE m.rating IN ('G', 'PG')",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G' OR rating = 'PG')",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies m ON mt.movie = m.code WHERE m.rating = 'G' OR m.rating = 'PG'",
        "SELECT mt.name FROM movietheaters mt, movies m WHERE mt.movie = m.code AND (m.rating = 'G' OR m.rating = 'PG')",
        "SELECT mt.name FROM movietheaters AS mt WHERE EXISTS (SELECT 1 FROM movies AS m WHERE m.code = mt.movie AND m.rating IN ('G', 'PG'))",
        "SELECT DISTINCT name FROM movietheaters mt WHERE movie IN (SELECT code FROM movies WHERE rating = 'PG' UNION SELECT code FROM movies WHERE rating = 'G')",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating in ('G', 'PG'))",
        "SELECT mt.name FROM movietheaters AS mt LEFT JOIN movies AS m ON mt.movie = m.code WHERE m.rating = 'G' OR m.rating = 'PG'",
        "SELECT mt1.name FROM movietheaters mt1 WHERE EXISTS (SELECT NULL FROM movies m1 WHERE m1.code = mt1.movie AND m1.rating IN ('G', 'PG'))",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies m ON mt.movie = m.code AND m.rating IN ('G', 'PG')"
      ]
    ]
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "nlq": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
    "infer_predictions": [
      [
        "SELECT DISTINCT mt.name FROM movietheaters mt JOIN movies mv ON mt.movie = mv.code WHERE mv.rating IN ('G', 'PG')",
        "SELECT DISTINCT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G' OR rating = 'PG')",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating IN ('G', 'PG')) GROUP BY name",
        "SELECT mt.name FROM movietheaters mt, movies mv WHERE mt.movie = mv.code AND (mv.rating = 'G' OR mv.rating = 'PG') GROUP BY mt.name",
        "SELECT name FROM movietheaters mt WHERE EXISTS (SELECT 1 FROM movies mv WHERE mt.movie = mv.code AND mv.rating IN ('G', 'PG'))",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies mv ON mt.movie = mv.code WHERE mv.rating IN ('G', 'PG') GROUP BY mt.name",
        "SELECT mt.name FROM movietheaters mt LEFT JOIN movies mv ON mt.movie = mv.code WHERE mv.rating = 'G' OR mv.rating = 'PG'",
        "SELECT mt.name FROM movietheaters AS mt JOIN movies AS mv ON mt.movie = mv.code WHERE mv.rating = 'PG' OR mv.rating = 'G'",
        "SELECT DISTINCT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE 'PG' = rating UNION SELECT code FROM movies WHERE 'G' = rating)",
        "SELECT name FROM movietheaters mt INNER JOIN (SELECT code FROM movies WHERE rating IN ('G', 'PG')) mv ON mt.movie = mv.code"
      ]
    ]
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "nlq": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "infer_predictions": [
      [
        "SELECT DISTINCT movies.title FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movietheaters.name IN ('Odeon', 'Imperial')",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')",
        "SELECT m.title FROM movies m INNER JOIN movietheaters mt ON m.code = mt.movie WHERE mt.name = 'Odeon' OR mt.name = 'Imperial'",
        "SELECT m.title FROM movies m, movietheaters mt WHERE m.code = mt.movie AND (mt.name = 'Odeon' OR mt.name = 'Imperial')",
        "SELECT DISTINCT title FROM movies WHERE EXISTS (SELECT 1 FROM movietheaters WHERE movie = movies.code AND (name = 'Odeon' OR name = 'Imperial'))",
        "SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Odeon', 'Imperial')",
        "SELECT title FROM movies m WHERE EXISTS (SELECT 1 FROM movietheaters mt WHERE mt.movie = m.code AND mt.name IN ('Odeon', 'Imperial'))",
        "SELECT DISTINCT m.title FROM movies m JOIN movietheaters mt ON mt.movie = m.code WHERE mt.name IN ('Imperial', 'Odeon')",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name IN ('Odeon', 'Imperial'))",
        "SELECT m.title FROM movies m JOIN movietheaters mt ON m.code = mt.movie WHERE mt.name = 'Imperial' OR mt.name = 'Odeon'"
      ]
    ]
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "nlq": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "infer_predictions": [
      [
        "SELECT DISTINCT movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Odeon', 'Imperial')",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon' OR name = 'Imperial')",
        "SELECT m.title FROM movies m INNER JOIN movietheaters t ON m.code = t.movie WHERE t.name = 'Odeon' OR t.name = 'Imperial'",
        "SELECT title FROM movies WHERE EXISTS (SELECT 1 FROM movietheaters WHERE (name = 'Odeon' OR name = 'Imperial') AND movie = code)",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name IN ('Odeon', 'Imperial'))",
        "SELECT movies.title FROM movies LEFT JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon' OR movietheaters.name = 'Imperial'",
        "SELECT DISTINCT title FROM movies, movietheaters WHERE movies.code = movietheaters.movie AND (movietheaters.name = 'Imperial' OR movietheaters.name = 'Odeon')",
        "SELECT m.title FROM movies m, movietheaters t WHERE m.code = t.movie AND (t.name = 'Odeon' OR t.name = 'Imperial')",
        "SELECT title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Odeon', 'Imperial')",
        "SELECT DISTINCT title FROM movies WHERE EXISTS (SELECT NULL FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name IN ('Odeon', 'Imperial'))"
      ]
    ]
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "nlq": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT m.title FROM movies m JOIN movietheaters mt ON m.code = mt.movie WHERE mt.name = 'Imperial' INTERSECT SELECT m.title FROM movies m JOIN movietheaters mt ON m.code = mt.movie WHERE mt.name = 'Odeon'",
        "SELECT movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Imperial' INTERSECT SELECT movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT title FROM movies WHERE exists (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name = 'Imperial') AND exists (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name = 'Odeon')",
        "SELECT DISTINCT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Imperial', 'Odeon') GROUP BY title HAVING COUNT(DISTINCT movietheaters.name) = 2",
        "SELECT title FROM movies m WHERE EXISTS (SELECT movie FROM movietheaters WHERE name = 'Imperial' AND movie = m.code) AND EXISTS (SELECT movie FROM movietheaters WHERE name = 'Odeon' AND movie = m.code)",
        "SELECT title FROM movies, movietheaters WHERE movies.code = movietheaters.movie AND movietheaters.name = 'Imperial' INTERSECT SELECT title FROM movies, movietheaters WHERE movies.code = movietheaters.movie AND movietheaters.name = 'Odeon'",
        "SELECT DISTINCT m.title FROM movies m, movietheaters mt WHERE m.code = mt.movie AND mt.name = 'Imperial' INTERSECT SELECT DISTINCT m.title FROM movies m, movietheaters mt WHERE m.code = mt.movie AND mt.name = 'Odeon'",
        "SELECT m.title FROM movies AS m WHERE m.code IN (SELECT mt.movie FROM movietheaters mt WHERE mt.name = 'Imperial') AND m.code IN (SELECT mt.movie FROM movietheaters mt WHERE mt.name = 'Odeon')",
        "SELECT movies.title FROM movies JOIN movietheaters AS t1 ON movies.code = t1.movie AND t1.name = 'Imperial' JOIN movietheaters AS t2 ON movies.code = t2.movie AND t2.name = 'Odeon'"
      ]
    ]
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "nlq": "What movie is playing at both the Odeon and Imperial theater?",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "infer_predictions": [
      [
        "SELECT movies.title FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movietheaters.name = 'Imperial' INTERSECT SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name = 'Odeon'",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters WHERE name = 'Imperial') AND code IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT m.title FROM movies m WHERE EXISTS (SELECT 1 FROM movietheaters mt WHERE mt.movie = m.code AND mt.name = 'Imperial') AND EXISTS (SELECT 1 FROM movietheaters mt WHERE mt.movie = m.code AND mt.name = 'Odeon')",
        "SELECT distinct movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.name IN ('Imperial', 'Odeon') GROUP BY movies.title HAVING COUNT(DISTINCT movietheaters.name) = 2",
        "SELECT title FROM ( SELECT movies.title, movietheaters.name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code ) WHERE name = 'Imperial' INTERSECT SELECT title FROM ( SELECT movies.title, movietheaters.name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code ) WHERE name = 'Odeon'",
        "WITH Imperial_Movies AS ( SELECT movie FROM movietheaters WHERE name = 'Imperial'), Odeon_Movies AS ( SELECT movie FROM movietheaters WHERE name = 'Odeon') SELECT title FROM movies WHERE code IN ( SELECT movie FROM Imperial_Movies INTERSECT SELECT movie FROM Odeon_Movies )",
        "SELECT m.title FROM movies m INNER JOIN ( SELECT movie FROM movietheaters WHERE name = 'Imperial' INTERSECT SELECT movie FROM movietheaters WHERE name = 'Odeon' ) mt ON m.code = mt.movie",
        "SELECT mg.title FROM movies mg WHERE 2 = (SELECT count(distinct mt.name) FROM movietheaters mt WHERE mt.movie = mg.code AND mt.name IN ('Imperial', 'Odeon'))",
        "SELECT mo.title FROM movies mo WHERE mo.title IN (SELECT m.title FROM movietheaters mp JOIN movies m ON mp.movie = m.code WHERE mp.name = 'Imperial') AND mo.title IN (SELECT m.title FROM movietheaters mp JOIN movies m ON mp.movie = m.code WHERE mp.name = 'Odeon')",
        "SELECT DISTINCT(movies.title) FROM movies WHERE EXISTS ( SELECT 1 FROM movietheaters WHERE name = 'Imperial' AND movie = movies.code) AND EXISTS ( SELECT 1 FROM movietheaters WHERE name = 'Odeon' AND movie = movies.code)"
      ]
    ]
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "nlq": "Find the name of all movies that are not played in Odeon theater.",
    "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "infer_predictions": [
      [
        "SELECT DISTINCT movies.title FROM movies WHERE movies.code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT title FROM movies WHERE NOT EXISTS (SELECT 1 FROM movietheaters WHERE movietheaters.movie = movies.code AND movietheaters.name = 'Odeon')",
        "SELECT m.title FROM movies m LEFT JOIN movietheaters mt ON m.code = mt.movie AND mt.name = 'Odeon' WHERE mt.movie IS NULL",
        "SELECT title FROM movies m WHERE m.code NOT IN (SELECT mt.movie FROM movietheaters mt WHERE mt.name = 'Odeon')",
        "SELECT DISTINCT m.title FROM movies m WHERE NOT EXISTS (SELECT mt.movie FROM movietheaters mt WHERE mt.name = 'Odeon' AND mt.movie = m.code)",
        "SELECT labels.title FROM movies labels WHERE labels.code NOT IN (SELECT seated.movie FROM movietheaters seated WHERE seated.name = 'Odeon')",
        "SELECT m.title FROM movies m WHERE NOT EXISTS (SELECT movie FROM movietheaters WHERE name = 'Odeon' AND movie = m.code)"
      ]
    ]
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "nlq": "What are the names of every movie that is not playing at the Odeon theater?",
    "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT M.title FROM movies M LEFT JOIN movietheaters T ON M.code = T.movie WHERE T.name IS NULL OR T.name != 'Odeon'",
        "SELECT M.title FROM movies M WHERE NOT EXISTS (SELECT 1 FROM movietheaters T WHERE T.movie = M.code AND T.name = 'Odeon')",
        "SELECT title FROM movies EXCEPT SELECT movies.title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie AND movietheaters.name = 'Odeon'",
        "SELECT DISTINCT title FROM movies M WHERE M.code NOT IN (SELECT movie FROM movietheaters WHERE name = 'Odeon')",
        "SELECT M.title FROM movies M WHERE M.code NOT IN (SELECT T.movie FROM movietheaters T WHERE T.name = 'Odeon')",
        "SELECT title FROM movies WHERE NOT EXISTS (SELECT movie FROM movietheaters WHERE name = 'Odeon' AND movietheaters.movie = movies.code)",
        "SELECT M.title FROM movies M LEFT JOIN movietheaters T ON M.code = T.movie AND T.name = 'Odeon' WHERE T.movie IS NULL"
      ]
    ]
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "nlq": "List in alphabetical order the titles of all movies.",
    "gold": "SELECT title FROM movies ORDER BY title",
    "infer_predictions": [
      [
        "SELECT title FROM movies ORDER BY title ASC",
        "SELECT m.title FROM movies m ORDER BY m.title",
        "SELECT title FROM movies ORDER BY 1",
        "SELECT m.title FROM movies m ORDER BY m.title ASC",
        "SELECT title FROM (SELECT title FROM movies) ORDER BY title ASC",
        "SELECT title FROM movies GROUP BY title ORDER BY title",
        "SELECT title FROM movies ORDER BY LOWER(title) ASC"
      ]
    ]
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "nlq": "What are the movie names in alphabetical order?",
    "gold": "SELECT title FROM movies ORDER BY title",
    "infer_predictions": [
      [
        "SELECT DISTINCT name FROM movietheaters ORDER BY name ASC",
        "SELECT name FROM movietheaters GROUP BY name ORDER BY name ASC",
        "SELECT name FROM (SELECT name FROM movietheaters) ORDER BY name ASC",
        "SELECT M.name FROM movietheaters M GROUP BY M.name ORDER BY M.name ASC",
        "SELECT DISTINCT M.name FROM movietheaters M ORDER BY M.name ASC",
        "SELECT DISTINCT name FROM (SELECT name FROM movietheaters) A ORDER BY name",
        "SELECT M.name FROM (SELECT name FROM movietheaters GROUP BY name) AS M ORDER BY M.name ASC",
        "SELECT M.name FROM movietheaters M WHERE M.name IN (SELECT name FROM movietheaters) ORDER BY M.name ASC",
        "SELECT name FROM (SELECT DISTINCT name FROM movietheaters) ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "nlq": "Find the titles of all movies sorted by their ratings.",
    "gold": "SELECT title FROM movies ORDER BY rating",
    "infer_predictions": [
      [
        "SELECT title FROM movies ORDER BY rating",
        "SELECT movies.title FROM movies ORDER BY movies.rating DESC",
        "SELECT m.title FROM movies m ORDER BY m.rating DESC",
        "SELECT M.title FROM movies M ORDER BY M.rating ASC",
        "SELECT movies.title AS title FROM movies ORDER BY movies.rating"
      ]
    ]
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "nlq": "What are the movie names sorted by rating?",
    "gold": "SELECT title FROM movies ORDER BY rating",
    "infer_predictions": [
      [
        "SELECT name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code ORDER BY rating",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies m ON mt.movie = m.code ORDER BY m.rating",
        "SELECT mt.name FROM movietheaters mt, movies m WHERE mt.movie = m.code ORDER BY m.rating",
        "SELECT mt.name FROM movietheaters mt LEFT JOIN movies m ON mt.movie = m.code ORDER BY m.rating ASC",
        "SELECT name FROM movietheaters INNER JOIN movies ON movietheaters.movie = movies.code ORDER BY movies.rating ASC",
        "SELECT movietheaters.name FROM movietheaters INNER JOIN movies ON movietheaters.movie = movies.code ORDER BY movies.rating",
        "SELECT name FROM movietheaters, movies WHERE movietheaters.movie = movies.code ORDER BY rating ASC",
        "SELECT name FROM movietheaters mt JOIN movies m ON mt.movie = m.code ORDER BY m.rating"
      ]
    ]
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "nlq": "Find the name of the theater that is playing the most number of movies.",
    "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(movie) DESC LIMIT 1",
        "SELECT name FROM (SELECT name, COUNT(*) AS movie_count FROM movietheaters GROUP BY name) ORDER BY movie_count DESC LIMIT 1",
        "SELECT name FROM movietheaters GROUP BY name HAVING COUNT(movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(movie) AS movie_count FROM movietheaters GROUP BY name))",
        "SELECT name FROM movietheaters GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM movietheaters m GROUP BY name ORDER BY COUNT(m.movie) DESC LIMIT 1",
        "SELECT mt.name FROM movietheaters mt LEFT JOIN movies mo ON mt.movie = mo.code GROUP BY mt.name ORDER BY COUNT(mt.movie) DESC LIMIT 1",
        "SELECT name FROM (SELECT name, COUNT(movie) as CountOfMovies FROM movietheaters GROUP BY name) ORDER BY CountOfMovies DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "nlq": "What is the name of the theater playing the most movies?",
    "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT m.name FROM movietheaters m GROUP BY m.name ORDER BY COUNT(m.movie) DESC LIMIT 1",
        "SELECT name FROM (SELECT name, COUNT(movie) as total_movies FROM movietheaters GROUP BY name ORDER BY total_movies DESC LIMIT 1)",
        "SELECT top_theater.name FROM (SELECT name, COUNT(movie) as movie_count FROM movietheaters GROUP BY name) as top_theater ORDER BY top_theater.movie_count DESC LIMIT 1",
        "SELECT MT.name FROM movietheaters AS MT GROUP BY MT.name ORDER BY COUNT(MT.movie) DESC LIMIT 1",
        "SELECT MT.name FROM (SELECT name, COUNT(movie) movie_count FROM movietheaters GROUP BY name) MT ORDER BY MT.movie_count DESC LIMIT 1",
        "SELECT MT.name FROM movietheaters MT GROUP BY MT.name HAVING COUNT(MT.movie) = (SELECT MAX(movie_count) FROM (SELECT COUNT(movie) AS movie_count FROM movietheaters GROUP BY name))",
        "SELECT name, COUNT(movie) AS cnt FROM movietheaters GROUP BY name ORDER BY cnt DESC LIMIT 1",
        "WITH TheaterMovieCount AS (SELECT name, COUNT(movie) AS total_movies FROM movietheaters GROUP BY name) SELECT name FROM TheaterMovieCount ORDER BY total_movies DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "nlq": "Find the name of the movie that is played in the most number of theaters.",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY movies.title ORDER BY COUNT(movietheaters.name) DESC LIMIT 1",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT M.title FROM movies M WHERE M.code = (SELECT T.movie FROM movietheaters T GROUP BY T.movie ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT (SELECT title FROM movies WHERE code = T.movie) FROM movietheaters T GROUP BY T.movie ORDER BY COUNT(T.name) DESC LIMIT 1",
        "SELECT title FROM movies WHERE code = (SELECT movie FROM movietheaters GROUP BY movie HAVING COUNT(movie) = (SELECT MAX(Cnt) FROM (SELECT COUNT(movie) AS Cnt FROM movietheaters GROUP BY movie)))",
        "SELECT M.title FROM (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(name) DESC LIMIT 1) AS TMP JOIN movies M ON TMP.movie = M.code",
        "SELECT title FROM movies JOIN (SELECT movie, COUNT(*) as Cnt FROM movietheaters GROUP BY movie ORDER BY Cnt DESC, movie LIMIT 1) T ON movies.code = T.movie",
        "SELECT DISTINCT title FROM movies INNER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.movie IN (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT M.title FROM movies M INNER JOIN (SELECT movie FROM movietheaters GROUP BY movie HAVING COUNT(name) = (SELECT MAX(C) FROM (SELECT COUNT(name) AS C FROM movietheaters GROUP BY movie))) AS MaxMovies ON M.code = MaxMovies.movie",
        "SELECT title FROM (SELECT movies.title, COUNT(movietheaters.name) AS TheatreCount FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY movies.title ORDER BY TheatreCount DESC LIMIT 1) AS Result"
      ]
    ]
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "nlq": "What is the name of the film playing at the most number of theaters?",
    "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie GROUP BY movietheaters.movie ORDER BY COUNT(movietheaters.name) DESC LIMIT 1",
        "SELECT title FROM movies WHERE code IN (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT M.title FROM movies M WHERE M.code = (SELECT movie FROM movietheaters GROUP BY movie ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT title FROM movies WHERE code = (SELECT movie FROM movietheaters GROUP BY movie HAVING COUNT(name) = (SELECT MAX(Cnt) FROM (SELECT COUNT(name) AS Cnt FROM movietheaters GROUP BY movie)))",
        "SELECT (SELECT title FROM movies WHERE code = MT.movie) AS Film FROM movietheaters MT GROUP BY MT.movie ORDER BY COUNT(MT.name) DESC LIMIT 1",
        "SELECT movie.title FROM (SELECT movie, COUNT(*) AS theater_count FROM movietheaters GROUP BY movie ORDER BY theater_count DESC LIMIT 1) AS MostPlay JOIN movies AS movie ON MostPlay.movie = movie.code",
        "SELECT title FROM movies M WHERE M.code IN (SELECT MT.movie FROM movietheaters MT GROUP BY MT.movie ORDER BY COUNT(MT.name) DESC LIMIT 1)",
        "SELECT MX.title FROM movies MX WHERE MX.code = (SELECT MA.movie FROM movietheaters MA GROUP BY MA.movie ORDER BY COUNT(MA.movie) DESC LIMIT 1)",
        "SELECT movies.title FROM movies JOIN (SELECT movie, COUNT(name) AS theaters_count FROM movietheaters GROUP BY movie) AS theater_popularity ON movies.code = theater_popularity.movie ORDER BY theaters_count DESC LIMIT 1",
        "SELECT MS.title FROM movies MS JOIN (SELECT MO.movie FROM movietheaters MO GROUP BY MO.movie HAVING COUNT(*) = (SELECT MAX(AC.cnt) FROM (SELECT COUNT(*) AS cnt FROM movietheaters GROUP BY movie) AS AC)) AS D ON MS.code = D.movie"
      ]
    ]
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "nlq": "Find the number of movies in each rating.",
    "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
    "infer_predictions": [
      [
        "SELECT rating, COUNT(*) AS NumberOfMovies FROM movies GROUP BY rating",
        "SELECT m.rating, COUNT(m.code) AS NumberOfMovies FROM movies m GROUP BY m.rating",
        "SELECT rating, COUNT(code) AS NumberOfMovies FROM movies GROUP BY rating",
        "SELECT rating, COUNT(DISTINCT code) AS NumberOfMovies FROM movies GROUP BY rating",
        "SELECT m.rating, COUNT(DISTINCT m.code) FROM movies m GROUP BY m.rating",
        "SELECT rating, COUNT(*) FROM movies GROUP BY rating",
        "SELECT rating, COUNT(DISTINCT code) FROM movies GROUP BY 1",
        "SELECT rating, COUNT(1) AS NumberOfMovies FROM movies GROUP BY rating",
        "SELECT m.rating, COUNT(1) FROM movies m GROUP BY m.rating",
        "SELECT rating AS MovieRating, COUNT(*) AS NumberOfMovies FROM movies GROUP BY MovieRating"
      ]
    ]
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "nlq": "How many movies exist for each rating?",
    "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
    "infer_predictions": [
      [
        "SELECT rating, COUNT(*) AS num_movies FROM movies GROUP BY rating",
        "SELECT rating, COUNT(code) FROM movies GROUP BY rating",
        "SELECT m.rating, COUNT(m.code) AS movie_count FROM movies m GROUP BY m.rating",
        "SELECT m.rating, COUNT(1) FROM movies m GROUP BY m.rating",
        "SELECT rating AS movie_rating, COUNT(code) AS movie_count FROM movies GROUP BY movie_rating",
        "SELECT rating, COUNT(*) FROM (SELECT rating FROM movies) GROUP BY rating",
        "SELECT DISTINCT m.rating, (SELECT COUNT(*) FROM movies WHERE rating = m.rating) AS count FROM movies m",
        "SELECT rating, COUNT(*) FROM movies GROUP BY rating HAVING COUNT(*) > 0"
      ]
    ]
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "nlq": "Find the number of movies whose rating is not null.",
    "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL",
        "SELECT COUNT(movies.code) FROM movies WHERE movies.rating IS NOT NULL",
        "SELECT COUNT(1) FROM movies WHERE NOT movies.rating IS NULL",
        "SELECT COUNT(all rating) FROM movies WHERE rating IS NOT NULL",
        "SELECT total_non_null_ratings FROM (SELECT COUNT(rating) AS total_non_null_ratings FROM movies WHERE rating IS NOT NULL)",
        "SELECT COUNT(movies.code) FROM movies WHERE EXISTS (SELECT rating FROM movies AS m WHERE m.code = movies.code AND m.rating IS NOT NULL)",
        "SELECT SUM(CASE WHEN rating IS NOT NULL THEN 1 ELSE 0 END) FROM movies",
        "SELECT COUNT(rating) FROM movies GROUP BY '' HAVING rating IS NOT NULL",
        "SELECT (SELECT COUNT(*) FROM movies) - (SELECT COUNT(*) FROM movies WHERE rating IS NULL)"
      ]
    ]
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "nlq": "How many movies have a rating that is not null?",
    "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL",
        "SELECT COUNT(rating) FROM movies WHERE rating IS NOT NULL",
        "SELECT SUM(CASE WHEN rating IS NOT NULL THEN 1 ELSE 0 END) FROM movies",
        "SELECT COUNT(1) FROM movies WHERE rating IS NOT NULL",
        "SELECT COUNT(DISTINCT code) FROM movies WHERE rating IS NOT NULL",
        "SELECT COUNT(code) FROM movies WHERE NOT rating IS NULL",
        "SELECT COUNT(*) FROM movies m WHERE m.rating IS NOT NULL",
        "SELECT COUNT(*) FROM (SELECT code, title FROM movies WHERE rating IS NOT NULL)",
        "SELECT COUNT(rating) AS Total FROM movies WHERE rating IS NOT NULL",
        "SELECT COUNT(m.code) FROM movies m WHERE m.rating IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "nlq": "Find the name of theaters that has at least one movie playing.",
    "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT mt.name FROM movietheaters mt WHERE mt.movie IN (SELECT m.code FROM movies m)",
        "SELECT mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code GROUP BY mt.name",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies)",
        "SELECT DISTINCT name FROM movietheaters WHERE EXISTS (SELECT 1 FROM movies WHERE movies.code = movietheaters.movie)",
        "SELECT mt.name FROM movietheaters mt WHERE EXISTS (SELECT 1 FROM movies m WHERE m.code = mt.movie)",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies m ON mt.movie = m.code WHERE mt.movie IS NOT NULL",
        "SELECT DISTINCT mt.name FROM movietheaters mt, movies m WHERE mt.movie = m.code",
        "SELECT name FROM (SELECT DISTINCT mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code) AS subquery",
        "SELECT movietheaters.name FROM movietheaters LEFT JOIN movies ON movietheaters.movie = movies.code WHERE movies.code IS NOT NULL",
        "SELECT DISTINCT mt.name FROM (SELECT mt.name, m.code FROM movietheaters mt, movies m WHERE mt.movie = m.code) AS mt"
      ]
    ]
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "nlq": "What are the names of every theater with at least one movie playing?",
    "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT mt.name FROM movietheaters mt WHERE mt.movie IS NOT NULL",
        "SELECT mt.name FROM movietheaters mt GROUP BY mt.name HAVING mt.movie IS NOT NULL",
        "SELECT name FROM movietheaters WHERE EXISTS (SELECT 1 FROM movies WHERE movies.code = movietheaters.movie)",
        "SELECT DISTINCT name FROM movietheaters WHERE movie IN (SELECT code FROM movies)",
        "SELECT DISTINCT mt.name FROM movietheaters mt JOIN movies m ON mt.movie = m.code",
        "SELECT mt.name FROM movietheaters mt WHERE mt.movie IN (SELECT code FROM movies m WHERE m.code = mt.movie)",
        "SELECT DISTINCT mt.name FROM movietheaters mt INNER JOIN movies m ON mt.movie = m.code",
        "SELECT name FROM movietheaters WHERE movie IS NOT NULL AND movie <> ''",
        "SELECT mt.name FROM movietheaters mt WHERE EXISTS (SELECT NULL FROM movies m WHERE m.code = mt.movie)"
      ]
    ]
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "nlq": "Select the name of all movie theaters that are not currently showing a movie.",
    "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
    "infer_predictions": [
      [
        "SELECT name FROM movietheaters WHERE movie IS NULL",
        "SELECT name FROM movietheaters WHERE movie = ''",
        "SELECT m.name FROM movietheaters m WHERE m.movie IS NULL",
        "SELECT m.name FROM movietheaters m WHERE m.movie = ''",
        "SELECT name FROM movietheaters WHERE movie NOT IN (SELECT code FROM movies)",
        "SELECT m.name FROM movietheaters m LEFT JOIN movies mo ON m.movie = mo.code WHERE mo.code IS NULL",
        "SELECT name FROM movietheaters WHERE NOT EXISTS (SELECT 1 FROM movies WHERE code = movietheaters.movie)",
        "SELECT name FROM movietheaters AS m WHERE m.movie IS NULL",
        "SELECT movietheaters.name FROM movietheaters LEFT JOIN movies ON movietheaters.movie = movies.code WHERE movies.code IS NULL",
        "SELECT m.name FROM movietheaters m WHERE NOT EXISTS (SELECT 1 FROM movies mo WHERE mo.code = m.movie)"
      ]
    ]
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "nlq": "What are the names of all cinemas not showing any movies?",
    "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
    "infer_predictions": [
      [
        "SELECT name FROM movietheaters WHERE movie IS NULL",
        "SELECT name FROM movietheaters WHERE movie NOT IN (SELECT code FROM movies)",
        "SELECT mt.name FROM movietheaters mt LEFT JOIN movies mv ON mt.movie = mv.code WHERE mv.code IS NULL",
        "SELECT mt.name FROM movietheaters mt WHERE NOT EXISTS (SELECT 1 FROM movies mv WHERE mv.code = mt.movie)",
        "SELECT name FROM movietheaters WHERE movie = ''",
        "SELECT mt.name FROM movietheaters mt WHERE mt.movie NOT IN (SELECT mv.code FROM movies mv)",
        "SELECT name FROM movietheaters EXCEPT SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies)",
        "SELECT mt.name FROM movietheaters mt LEFT OUTER JOIN movies mv ON mt.movie = mv.code WHERE mv.title IS NULL",
        "SELECT mt.name FROM movietheaters mt WHERE mt.movie IS NULL OR mt.movie NOT IN (SELECT mv.code FROM movies mv)",
        "SELECT DISTINCT mt.name FROM movietheaters mt LEFT JOIN movies mv ON mt.movie = mv.code WHERE mv.code IS NULL"
      ]
    ]
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "nlq": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT mt.name FROM movietheaters mt JOIN movies mo ON mt.movie = mo.code WHERE mo.rating = 'G'",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G')",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies mo ON mt.movie = mo.code AND mo.rating = 'G'",
        "SELECT movietheaters.name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movies.rating = 'G'",
        "SELECT mt.name FROM movietheaters AS mt, movies AS mo WHERE mt.movie = mo.code AND mo.rating = 'G'",
        "SELECT mt.name FROM movietheaters mt INNER JOIN movies mo ON mt.movie = mo.code WHERE mo.rating = 'G'",
        "SELECT name FROM movietheaters WHERE EXISTS (SELECT 1 FROM movies WHERE movies.code = movietheaters.movie AND movies.rating = 'G')"
      ]
    ]
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "nlq": "What are the names of theaters playing 'G' rated movies?",
    "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
    "infer_predictions": [
      [
        "SELECT DISTINCT name FROM movietheaters JOIN movies ON movietheaters.movie = movies.code WHERE movies.rating = 'G'",
        "SELECT name FROM movietheaters WHERE movie IN (SELECT code FROM movies WHERE rating = 'G') GROUP BY name",
        "SELECT DISTINCT T.name FROM movietheaters T INNER JOIN movies M ON T.movie = M.code WHERE M.rating = 'G'",
        "SELECT T1.name FROM movietheaters T1 JOIN movies T2 ON T1.movie = T2.code WHERE T2.rating = 'G' GROUP BY T1.name",
        "SELECT DISTINCT mt.name FROM movietheaters mt, movies mo WHERE mt.movie = mo.code AND mo.rating = 'G'",
        "SELECT name FROM movietheaters WHERE EXISTS (SELECT 1 FROM movies WHERE movies.code = movietheaters.movie AND rating = 'G')",
        "SELECT name FROM (SELECT DISTINCT name FROM movietheaters mt INNER JOIN movies mv ON mt.movie = mv.code WHERE mv.rating = 'G')",
        "SELECT DISTINCT movietheaters.name FROM movietheaters, movies WHERE movietheaters.movie = movies.code AND movies.rating = 'G'",
        "SELECT differentTheaters.name FROM (SELECT DISTINCT mtheater.name FROM movietheaters mtheater, movies mflicks WHERE mtheater.movie = mflicks.code AND mflicks.rating = 'G') AS differentTheaters",
        "SELECT name FROM movietheaters NATURAL JOIN movies WHERE rating = 'G'"
      ]
    ]
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "nlq": "Select the title of all movies.",
    "gold": "SELECT title FROM movies",
    "infer_predictions": [
      [
        "SELECT title FROM movies",
        "SELECT m.title FROM movies m",
        "SELECT title FROM (SELECT title FROM movies)",
        "SELECT title FROM movies WHERE title IS NOT NULL",
        "SELECT movies.title FROM movies GROUP BY movies.title",
        "SELECT title FROM movies ORDER BY title",
        "SELECT * FROM movies WHERE EXISTS (SELECT title FROM movies WHERE movies.title = title)"
      ]
    ]
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "nlq": "What are all of the movie names?",
    "gold": "SELECT title FROM movies",
    "infer_predictions": [
      [
        "SELECT name FROM movietheaters",
        "SELECT mt.name FROM movietheaters mt",
        "SELECT DISTINCT mt.name FROM movietheaters mt",
        "SELECT name FROM movietheaters GROUP BY name",
        "SELECT name FROM movietheaters WHERE name IS NOT NULL",
        "SELECT mt.name FROM movietheaters mt WHERE mt.name IS NOT NULL",
        "SELECT name FROM movietheaters WHERE name <> ''"
      ]
    ]
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "nlq": "Show all the distinct ratings in the database.",
    "gold": "SELECT DISTINCT rating FROM movies",
    "infer_predictions": [
      [
        "SELECT DISTINCT rating FROM movies;",
        "SELECT DISTINCT m.rating FROM movies m;",
        "SELECT rating FROM movies GROUP BY rating;",
        "SELECT m.rating FROM movies m GROUP BY m.rating;",
        "SELECT DISTINCT(m.rating) FROM movies m;",
        "SELECT rating FROM movies WHERE rating IS NOT NULL GROUP BY rating;",
        "SELECT DISTINCT rating FROM movies WHERE rating IS NOT NULL;",
        "SELECT m.rating FROM movies m WHERE m.rating IS NOT NULL GROUP BY m.rating;",
        "SELECT DISTINCT(m.rating) FROM movies m WHERE m.rating IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "nlq": "What are the different movie ratings?",
    "gold": "SELECT DISTINCT rating FROM movies",
    "infer_predictions": [
      [
        "SELECT DISTINCT rating FROM movies;",
        "SELECT rating FROM movies GROUP BY rating;",
        "SELECT DISTINCT m.rating FROM movies m;",
        "SELECT rating FROM movies WHERE rating IS NOT NULL GROUP BY rating;",
        "SELECT m.rating FROM movies m GROUP BY m.rating;",
        "SELECT DISTINCT rating FROM (SELECT rating FROM movies);",
        "SELECT r FROM (SELECT DISTINCT rating AS r FROM movies);",
        "SELECT DISTINCT m.rating FROM movies m WHERE m.rating IS NOT NULL;",
        "SELECT DISTINCT rating FROM movies ORDER BY rating ASC;",
        "SELECT rating FROM movies WHERE rating IN (SELECT rating FROM movies) GROUP BY rating;"
      ]
    ]
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "nlq": "Show all information of all unrated movies.",
    "gold": "SELECT * FROM movies WHERE rating  =  'null'",
    "infer_predictions": [
      [
        "SELECT * FROM movies WHERE rating IS NULL",
        "SELECT * FROM movies WHERE rating = ''",
        "SELECT movies.* FROM movies LEFT JOIN movietheaters ON movies.code = movietheaters.movie WHERE movies.rating IS NULL",
        "SELECT M.* FROM movies M WHERE M.rating IS NULL",
        "SELECT title, code, rating FROM movies WHERE rating IS NULL",
        "SELECT m.title, m.code, m.rating FROM movies m WHERE m.rating IS NULL",
        "SELECT title, code, rating FROM movies WHERE length(rating) = 0",
        "SELECT m.title, m.code, m.rating FROM movies m WHERE length(m.rating) = 0",
        "SELECT DISTINCT m.* FROM movies m WHERE m.rating IS NULL",
        "SELECT movies.title, movies.code, movies.rating FROM movies WHERE movies.rating IS NULL"
      ]
    ]
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "nlq": "What is all the information about the unrated movies?",
    "gold": "SELECT * FROM movies WHERE rating  =  'null'",
    "infer_predictions": [
      [
        "SELECT * FROM movies WHERE rating IS NULL",
        "SELECT movies.* FROM movies WHERE movies.rating IS NULL",
        "SELECT movies.rating, movies.code, movies.title FROM movies WHERE movies.rating IS NULL",
        "SELECT title, code, rating FROM movies WHERE rating IS NULL",
        "SELECT m.* FROM movies AS m WHERE m.rating IS NULL",
        "SELECT m.rating, m.code, m.title FROM movies AS m WHERE m.rating IS NULL",
        "SELECT rating, title, code FROM movies WHERE rating IS NULL",
        "SELECT m.title, m.code, m.rating FROM movies m WHERE m.rating IS NULL",
        "SELECT * FROM movies WHERE movies.rating IS NULL",
        "SELECT rating, code, title FROM movies WHERE rating IS NULL"
      ]
    ]
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "nlq": "Show the titles of movies not currently being shown in any theaters.",
    "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
    "infer_predictions": [
      [
        "SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)",
        "SELECT m.title FROM movies m LEFT JOIN movietheaters mt ON m.code = mt.movie WHERE mt.movie IS NULL",
        "SELECT title FROM movies WHERE code NOT IN (SELECT DISTINCT movie FROM movietheaters)",
        "SELECT title FROM movies EXCEPT SELECT movies.title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie",
        "SELECT m.title FROM movies m WHERE NOT EXISTS (SELECT 1 FROM movietheaters mt WHERE mt.movie = m.code)",
        "SELECT DISTINCT m.title FROM movies m LEFT OUTER JOIN movietheaters mt ON m.code = mt.movie WHERE mt.movie IS null",
        "SELECT m.title FROM movies m WHERE m.code NOT IN (SELECT mt.movie FROM movietheaters mt)",
        "SELECT m.title FROM movies m WHERE NOT EXISTS (SELECT null FROM movietheaters mt WHERE mt.movie = m.code)",
        "SELECT title FROM movies WHERE NOT EXISTS (SELECT 1 FROM movietheaters WHERE movies.code = movietheaters.movie)",
        "SELECT title FROM movies m WHERE m.code NOT IN (SELECT movie FROM movietheaters mt WHERE mt.movie IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "nlq": "What are the names of the movies not being shown in any theaters?",
    "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
    "infer_predictions": [
      [
        "SELECT M.title FROM movies M WHERE NOT EXISTS (SELECT 1 FROM movietheaters T WHERE T.movie = M.code)",
        "SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)",
        "SELECT title FROM movies WHERE code NOT IN (SELECT DISTINCT movie FROM movietheaters)",
        "SELECT title FROM movies EXCEPT SELECT title FROM movies JOIN movietheaters ON movies.code = movietheaters.movie",
        "SELECT M.title FROM movies M LEFT JOIN movietheaters T ON M.code = T.movie WHERE T.movie IS NULL",
        "SELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters WHERE movie IS NOT NULL)",
        "SELECT movies.title FROM movies LEFT OUTER JOIN movietheaters ON movies.code = movietheaters.movie WHERE movietheaters.movie IS NULL",
        "SELECT M.title FROM movies M LEFT JOIN movietheaters T ON M.code = T.movie AND T.movie IS NULL",
        "SELECT title FROM movies WHERE NOT EXISTS (SELECT movie FROM movietheaters WHERE movietheaters.movie = movies.code)",
        "SELECT movies.title FROM movies WHERE movies.code NOT IN (SELECT T.movie FROM movietheaters T)"
      ]
    ]
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "nlq": "Who receieved the heaviest package?",
    "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT C.name FROM client C JOIN package P ON C.accountnumber = P.recipient WHERE P.weight = (SELECT MAX(weight) FROM package)",
        "SELECT C.name FROM client C, package P WHERE C.accountnumber = P.recipient AND P.weight = (SELECT MAX(weight) FROM package)",
        "SELECT name FROM client WHERE accountnumber IN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package))",
        "SELECT client.name FROM client INNER JOIN package ON client.accountnumber = package.recipient WHERE package.weight = (SELECT MAX(weight) FROM package)",
        "SELECT name FROM client WHERE accountnumber = (SELECT recipient FROM package WHERE weight = (SELECT MAX(package.weight) FROM package))",
        "SELECT C.name FROM client C INNER JOIN (SELECT recipient FROM package WHERE weight = (SELECT MAX(weight) FROM package) LIMIT 1) AS heavy ON C.accountnumber = heavy.recipient",
        "SELECT name FROM client WHERE accountnumber = (SELECT recipient FROM package ORDER BY weight DESC LIMIT 1)",
        "SELECT C.name FROM client C WHERE C.accountnumber = (SELECT P.recipient FROM package P WHERE P.weight = (SELECT MAX(P.weight) FROM package P))",
        "SELECT recipient_name.name FROM package, client AS recipient_name WHERE package.recipient = recipient_name.accountnumber AND package.weight = (SELECT MAX(weight) FROM package)"
      ]
    ]
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "nlq": "What is the name of the client who received the heaviest package?",
    "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT client.name FROM client JOIN package ON client.accountnumber = package.recipient ORDER BY package.weight DESC LIMIT 1",
        "SELECT c.name FROM client c INNER JOIN package p ON c.accountnumber = p.recipient ORDER BY p.weight DESC LIMIT 1",
        "SELECT name FROM client WHERE accountnumber = (SELECT recipient FROM package ORDER BY weight DESC LIMIT 1)",
        "SELECT c.name FROM client as c, package as p WHERE c.accountnumber = p.recipient ORDER BY p.weight DESC LIMIT 1",
        "SELECT cli.name FROM client cli INNER JOIN (SELECT recipient FROM package ORDER BY weight DESC LIMIT 1) sub ON cli.accountnumber = sub.recipient",
        "SELECT c.name FROM client c WHERE c.accountnumber IN (SELECT recipient FROM package ORDER BY weight DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "nlq": "What is the total weight of all the packages that customer Leo Wong sent?",
    "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "infer_predictions": [
      [
        "SELECT SUM(P.weight) FROM package P JOIN client C ON P.sender = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT SUM(P.weight) FROM package P, client C WHERE P.sender = C.accountnumber AND C.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT SUM(package.weight) FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package AS P INNER JOIN client AS C ON P.sender = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT TOTAL(P.weight) FROM package P JOIN client C ON P.sender = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT SUM(package.weight) FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong'"
      ]
    ]
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "nlq": "What is the total weight for all packages that Leo Wong sent?",
    "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "infer_predictions": [
      [
        "SELECT SUM(weight) FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT TOTAL(package.weight) FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT SUM(p.weight) FROM package p INNER JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT SUM(p.weight) FROM package p, client c WHERE p.sender = c.accountnumber AND c.name = 'Leo Wong'",
        "SELECT SUM(weight) AS TotalWeight FROM package INNER JOIN client ON client.accountnumber = package.sender WHERE client.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT SUM(p.weight) FROM package p JOIN client c ON c.accountnumber = p.sender WHERE c.name = 'Leo Wong'",
        "SELECT TOTAL(p.weight) FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT SUM(weight) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')"
      ]
    ]
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "nlq": "What is the position of Amy Wong?",
    "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
    "infer_predictions": [
      [
        "SELECT position FROM employee WHERE name = 'Amy Wong'",
        "SELECT e.position FROM employee e WHERE e.name = 'Amy Wong'",
        "SELECT position FROM employee WHERE name LIKE 'Amy Wong'",
        "SELECT position FROM employee WHERE LOWER(name) = 'amy wong'",
        "SELECT emp.position FROM employee emp WHERE emp.name = 'Amy Wong'",
        "SELECT position FROM employee WHERE name IN (SELECT name FROM employee WHERE name = 'Amy Wong')",
        "SELECT e.position FROM employee e WHERE trim(e.name) = trim('Amy Wong')"
      ]
    ]
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "nlq": "What position does Amy Wong have?",
    "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
    "infer_predictions": [
      [
        "SELECT position FROM employee WHERE name = 'Amy Wong'",
        "SELECT e.position FROM employee e WHERE e.name = 'Amy Wong'",
        "SELECT pos.position FROM employee pos WHERE pos.name = 'Amy Wong'",
        "SELECT position FROM employee WHERE name LIKE 'Amy Wong'",
        "SELECT tbl.position FROM employee tbl WHERE tbl.name = 'Amy Wong'"
      ]
    ]
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "nlq": "What is Turanga Leela's salary and position?",
    "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT salary, position FROM employee WHERE name = 'Turanga Leela'",
        "SELECT e.salary, e.position FROM employee e WHERE e.name = 'Turanga Leela'",
        "SELECT employee.salary AS Salary, employee.position AS Position FROM employee WHERE employee.name = 'Turanga Leela'",
        "SELECT employeee.salary, employeee.position FROM employee employeee WHERE employeee.name = 'Turanga Leela'",
        "SELECT e.salary, e.position FROM (SELECT * FROM employee WHERE name = 'Turanga Leela') AS e",
        "SELECT e.salary, e.position FROM (SELECT name, salary, position FROM employee) AS e WHERE e.name = 'Turanga Leela'",
        "SELECT salary, position FROM (SELECT name, salary, position FROM employee WHERE name = 'Turanga Leela')"
      ]
    ]
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "nlq": "What is the salary and position of the employee named Turanga Leela?",
    "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT position, salary FROM employee WHERE name = 'Turanga Leela'",
        "SELECT e.position, e.salary FROM employee e WHERE e.name = 'Turanga Leela'",
        "SELECT E.position, E.salary FROM employee E WHERE E.name = 'Turanga Leela'",
        "SELECT emp.position, emp.salary FROM employee emp WHERE emp.name = 'Turanga Leela'"
      ]
    ]
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "nlq": "What is the average salary of all intern jobs?",
    "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
    "infer_predictions": [
      [
        "SELECT AVG(salary) FROM employee WHERE position = 'Intern'",
        "SELECT AVG(e.salary) FROM employee e WHERE e.position = 'Intern'",
        "SELECT AVG(salary) AS average_salary FROM employee WHERE position = 'Intern'",
        "SELECT (SUM(salary) / COUNT(employeeid)) FROM employee WHERE position = 'Intern'",
        "SELECT AVG(e.salary) FROM employee e WHERE e.position LIKE 'Intern'",
        "SELECT AVG(EMP.salary) FROM employee EMP WHERE EMP.position = 'Intern'",
        "SELECT SUM(e.salary) / COUNT(e.employeeid) FROM employee e WHERE e.position = 'Intern'",
        "SELECT AVG(salary) FROM employee WHERE position = 'Intern' GROUP BY position",
        "SELECT AVG(salary) FROM employee WHERE position MATCH 'Intern'"
      ]
    ]
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "nlq": "What is the average salary of an intern?",
    "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
    "infer_predictions": [
      [
        "SELECT AVG(salary) FROM employee WHERE position = 'Intern'",
        "SELECT AVG(e.salary) AS AverageSalary FROM employee e WHERE e.position = 'Intern'",
        "SELECT AVG(salary) AS AvgSalary FROM employee WHERE position = 'Intern'",
        "SELECT AVG(e.salary) FROM employee e WHERE e.position = 'Intern'",
        "SELECT AVG(salary) FROM employee WHERE position LIKE 'Intern'",
        "SELECT AVG(salary) FROM employee WHERE position IN ('Intern')",
        "SELECT AVG(e.salary) FROM employee e WHERE e.position LIKE 'Intern'",
        "SELECT AVG(salary) FROM employee WHERE trim(position) = 'Intern'"
      ]
    ]
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "nlq": "What level is Physician?",
    "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT h.level FROM has_clearance h JOIN employee e ON h.employee = e.employeeid WHERE e.position = 'Physician'",
        "SELECT DISTINCT level FROM has_clearance WHERE employee IN (SELECT employeeid FROM employee WHERE position = 'Physician')",
        "SELECT DISTINCT h.level FROM has_clearance h INNER JOIN employee e ON h.employee = e.employeeid AND e.position = 'Physician'",
        "SELECT DISTINCT h.level FROM employee e, has_clearance h WHERE e.employeeid = h.employee AND e.position = 'Physician'",
        "SELECT DISTINCT has_clearance.level FROM has_clearance JOIN employee ON has_clearance.employee = employee.employeeid WHERE employee.position = 'Physician'",
        "SELECT DISTINCT has_clearance.level FROM has_clearance INNER JOIN employee ON has_clearance.employee = employee.employeeid WHERE employee.position = 'Physician'",
        "SELECT DISTINCT level FROM has_clearance, employee WHERE has_clearance.employee = employee.employeeid AND employee.position = 'Physician'",
        "SELECT has_clearance.level FROM has_clearance JOIN employee ON has_clearance.employee = employee.employeeid WHERE employee.position = 'Physician' GROUP BY has_clearance.level",
        "SELECT h.level FROM has_clearance h INNER JOIN employee e ON h.employee = e.employeeid WHERE e.position = 'Physician' GROUP BY h.level",
        "SELECT DISTINCT level FROM has_clearance INNER JOIN employee ON has_clearance.employee = employee.employeeid WHERE position = 'Physician'"
      ]
    ]
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "nlq": "What is the clearance level of a physician?",
    "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
    "infer_predictions": [
      [
        "SELECT h.level FROM has_clearance h JOIN employee e ON e.employeeid = h.employee WHERE e.position = 'Physician'",
        "SELECT level FROM has_clearance WHERE employee IN (SELECT employeeid FROM employee WHERE position = 'Physician')",
        "SELECT hs.level FROM has_clearance hs, employee emp WHERE hs.employee = emp.employeeid AND emp.position = 'Physician'",
        "SELECT DISTINCT(l.level) FROM has_clearance l INNER JOIN employee p ON l.employee = p.employeeid WHERE p.position = 'Physician'",
        "SELECT hclr.level FROM employee empl JOIN has_clearance hclr ON empl.employeeid = hclr.employee WHERE empl.position = 'Physician'",
        "SELECT cl.level FROM employee ep JOIN has_clearance cl ON ep.employeeid = cl.employee WHERE ep.position = 'Physician'",
        "SELECT MAX(level) FROM has_clearance WHERE employee = (SELECT employeeid FROM employee WHERE position = 'Physician')",
        "SELECT MIN(level) FROM has_clearance WHERE employee = (SELECT employeeid FROM employee WHERE position = 'Physician')",
        "SELECT level FROM has_clearance hc INNER JOIN employee em ON hc.employee = em.employeeid WHERE em.position = 'Physician' GROUP BY level",
        "SELECT DISTINCT h.level FROM has_clearance h INNER JOIN employee e ON e.employeeid = h.employee WHERE e.position = 'Physician'"
      ]
    ]
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "nlq": "List Package Number of all package sent by Leo Wong?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "infer_predictions": [
      [
        "SELECT P.packagenumber FROM package P INNER JOIN client C ON P.sender = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT packagenumber FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT packagenumber FROM (SELECT packagenumber, sender FROM package) P JOIN (SELECT accountnumber FROM client WHERE name = 'Leo Wong') C ON P.sender = C.accountnumber",
        "SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT P.packagenumber FROM package P, client C WHERE P.sender = C.accountnumber AND C.name = 'Leo Wong'",
        "SELECT P.packagenumber FROM package AS P JOIN client AS C ON P.sender = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE EXISTS (SELECT 1 FROM client WHERE name = 'Leo Wong' AND accountnumber = package.sender)",
        "SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client C WHERE C.name = 'Leo Wong')"
      ]
    ]
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "nlq": "What is the number of all packages that Leo Wong sent?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT COUNT(packagenumber) FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT COUNT(package.packagenumber) FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT COUNT(DISTINCT package.packagenumber) FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT COUNT(p.packagenumber) FROM package p WHERE p.sender = (SELECT c.accountnumber FROM client c WHERE c.name = 'Leo Wong')",
        "SELECT COUNT(*) FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM package WHERE EXISTS (SELECT 1 FROM client WHERE name = 'Leo Wong' AND accountnumber = package.sender)",
        "SELECT COUNT(*) FROM (SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong'))",
        "SELECT COUNT(*) FROM package p, client c WHERE p.sender = c.accountnumber AND c.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM (SELECT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong') AS LeoPackages"
      ]
    ]
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "nlq": "List all package numbers received by Leo Wong ?",
    "gold": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";",
    "infer_predictions": [
      [
        "SELECT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE recipient IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT packagenumber FROM package p INNER JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT p.packagenumber FROM package p, client c WHERE p.recipient = c.accountnumber AND c.name = 'Leo Wong'",
        "SELECT p.packagenumber FROM package p WHERE p.recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT distinct packagenumber FROM package WHERE EXISTS (SELECT 1 FROM client WHERE name = 'Leo Wong' AND accountnumber = package.recipient)",
        "SELECT packagenumber FROM package p WHERE recipient = (SELECT accountnumber FROM client c WHERE c.name = 'Leo Wong')",
        "SELECT p.packagenumber FROM package p WHERE EXISTS (SELECT 1 FROM client c WHERE c.name = 'Leo Wong' AND c.accountnumber = p.recipient)",
        "SELECT DISTINCT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name LIKE 'Leo Wong'",
        "SELECT DISTINCT packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber AND c.name = 'Leo Wong'"
      ]
    ]
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "nlq": "What are all of the package numbers received by Leo Wong?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
    "infer_predictions": [
      [
        "SELECT packagenumber FROM package JOIN client ON package.recipient = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT package.packagenumber FROM package INNER JOIN client ON package.recipient = client.accountnumber AND client.name = 'Leo Wong'",
        "SELECT P.packagenumber FROM package P, client C WHERE P.recipient = C.accountnumber AND C.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE recipient IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT P.packagenumber FROM package P INNER JOIN client C ON P.recipient = C.accountnumber WHERE C.name = 'Leo Wong'",
        "SELECT packagenumber FROM package WHERE EXISTS (SELECT 1 FROM client WHERE package.recipient = client.accountnumber AND client.name = 'Leo Wong')"
      ]
    ]
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "nlq": "List all package sent or received by Leo Wong.",
    "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber OR p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT DISTINCT pack.packagenumber FROM package pack INNER JOIN client cl ON pack.sender = cl.accountnumber OR pack.recipient = cl.accountnumber WHERE cl.name = 'Leo Wong'",
        "SELECT DISTINCT package.packagenumber FROM package JOIN client ON package.sender = client.accountnumber OR package.recipient = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT DISTINCT p.packagenumber FROM package p, client c WHERE (p.sender = c.accountnumber OR p.recipient = c.accountnumber) AND c.name = 'Leo Wong'",
        "SELECT DISTINCT pkg.packagenumber FROM package as pkg WHERE pkg.sender IN (SELECT ac.accountnumber FROM client ac WHERE ac.name = 'Leo Wong') OR pkg.recipient IN (SELECT ac.accountnumber FROM client ac WHERE ac.name = 'Leo Wong')",
        "SELECT DISTINCT p.packagenumber FROM package p WHERE p.sender IN (SELECT c.accountnumber FROM client c WHERE c.name = 'Leo Wong') OR p.recipient IN (SELECT c.accountnumber FROM client c WHERE c.name = 'Leo Wong')",
        "SELECT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong' UNION SELECT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT DISTINCT p.packagenumber FROM package p CROSS JOIN client c WHERE (p.sender = c.accountnumber OR p.recipient = c.accountnumber) AND c.name = 'Leo Wong'",
        "SELECT DISTINCT pack.packagenumber FROM package as pack LEFT JOIN client as client ON pack.sender = client.accountnumber OR pack.recipient = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT DISTINCT p.packagenumber FROM package p INNER JOIN client c ON c.accountnumber IN (p.sender, p.recipient) WHERE c.name = 'Leo Wong'"
      ]
    ]
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "nlq": "What are all the different package numbers that Leo Wong sent or received?",
    "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Leo Wong' UNION SELECT DISTINCT p.packagenumber FROM package p JOIN client c ON p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT p.packagenumber FROM package p, client c WHERE p.sender = c.accountnumber AND c.name = 'Leo Wong' UNION SELECT p.packagenumber FROM package p, client c WHERE p.recipient = c.accountnumber AND c.name = 'Leo Wong'",
        "SELECT DISTINCT packagenumber FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong') UNION SELECT DISTINCT packagenumber FROM package WHERE recipient IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT packagenumber FROM (SELECT packagenumber, sender AS parties FROM package UNION ALL SELECT packagenumber, recipient AS parties FROM package) sub JOIN client c ON sub.parties = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT DISTINCT packagenumber FROM package JOIN client ON package.sender = client.accountnumber OR package.recipient = client.accountnumber WHERE client.name = 'Leo Wong'",
        "SELECT p.packagenumber FROM client c, package p WHERE (p.sender = c.accountnumber OR p.recipient = c.accountnumber) AND c.name = 'Leo Wong'",
        "SELECT DISTINCT packagenumber FROM (SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Leo Wong') UNION ALL SELECT packagenumber FROM package WHERE recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong'))",
        "SELECT DISTINCT p.packagenumber FROM package p INNER JOIN client c ON p.sender = c.accountnumber OR p.recipient = c.accountnumber WHERE c.name = 'Leo Wong'",
        "SELECT DISTINCT p.packagenumber FROM client c LEFT JOIN package p ON (p.sender = c.accountnumber OR p.recipient = c.accountnumber) WHERE c.name = 'Leo Wong'",
        "SELECT DISTINCT p.packagenumber FROM package p WHERE EXISTS (SELECT 1 FROM client c WHERE (p.sender = c.accountnumber OR p.recipient = c.accountnumber) AND c.name = 'Leo Wong')"
      ]
    ]
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "nlq": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM package JOIN client AS sender ON package.sender = sender.accountnumber JOIN client AS recipient ON package.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'",
        "SELECT COUNT(package.packagenumber) FROM package INNER JOIN client AS senderClient ON package.sender = senderClient.accountnumber INNER JOIN client AS recipientClient ON package.recipient = recipientClient.accountnumber WHERE senderClient.name = 'Ogden Wernstrom' AND recipientClient.name = 'Leo Wong'",
        "SELECT COUNT(p.packagenumber) FROM package p, client c1, client c2 WHERE p.sender = c1.accountnumber AND p.recipient = c2.accountnumber AND c1.name = 'Ogden Wernstrom' AND c2.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM package INNER JOIN client s ON s.accountnumber = package.sender INNER JOIN client r ON r.accountnumber = package.recipient WHERE s.name = 'Ogden Wernstrom' AND r.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM (SELECT 1 FROM package p JOIN client send ON p.sender = send.accountnumber JOIN client recv ON p.recipient = recv.accountnumber WHERE send.name = 'Ogden Wernstrom' AND recv.name = 'Leo Wong')",
        "SELECT COUNT(pk.packagenumber) FROM package pk LEFT JOIN client clSend ON pk.sender = clSend.accountnumber LEFT JOIN client clRecv ON pk.recipient = clRecv.accountnumber WHERE clSend.name = 'Ogden Wernstrom' AND clRecv.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Ogden Wernstrom') AND recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT COUNT(DISTINCT package.packagenumber) FROM package, client cs, client cr WHERE package.sender = cs.accountnumber AND cs.name = 'Ogden Wernstrom' AND package.recipient = cr.accountnumber AND cr.name = 'Leo Wong'",
        "SELECT (SELECT COUNT(packagenumber) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Ogden Wernstrom') AND recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')) AS count_packages"
      ]
    ]
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "nlq": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM package p JOIN client sender ON p.sender = sender.accountnumber JOIN client recipient ON p.recipient = recipient.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND recipient.name = 'Leo Wong'",
        "SELECT COUNT(packagenumber) FROM package JOIN client AS c1 ON package.sender = c1.accountnumber JOIN client AS c2 ON package.recipient = c2.accountnumber WHERE c1.name = 'Ogden Wernstrom' AND c2.name = 'Leo Wong'",
        "SELECT COUNT(p.packagenumber) FROM package p, client c1, client c2 WHERE p.sender = c1.accountnumber AND p.recipient = c2.accountnumber AND c1.name = 'Ogden Wernstrom' AND c2.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Ogden Wernstrom') AND recipient IN (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT COUNT(DISTINCT p.packagenumber) FROM package p INNER JOIN client sender ON sender.accountnumber = p.sender INNER JOIN client receiver ON receiver.accountnumber = p.recipient WHERE sender.name = 'Ogden Wernstrom' AND receiver.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM (SELECT p.packagenumber FROM package p INNER JOIN client as fieldsender ON p.sender = fieldsender.accountnumber INNER JOIN client fieldrecipient ON p.recipient = fieldrecipient.accountnumber WHERE fieldsender.name = 'Ogden Wernstrom' AND fieldrecipient.name = 'Leo Wong')",
        "SELECT COUNT(*) FROM package p JOIN client s ON p.sender = s.accountnumber JOIN client r ON p.recipient = r.accountnumber WHERE s.name = 'Ogden Wernstrom' AND r.name = 'Leo Wong'",
        "SELECT COUNT(p.packagenumber) FROM package p, client s1, client s2 WHERE p.sender = s1.accountnumber AND s1.name = 'Ogden Wernstrom' AND p.recipient = s2.accountnumber AND s2.name = 'Leo Wong'",
        "SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Ogden Wernstrom') AND recipient = (SELECT accountnumber FROM client WHERE name = 'Leo Wong')",
        "SELECT COUNT(*) FROM (SELECT 1 FROM package p JOIN client sender ON p.sender = sender.accountnumber JOIN client receiver ON p.recipient = receiver.accountnumber WHERE sender.name = 'Ogden Wernstrom' AND receiver.name = 'Leo Wong') AS result"
      ]
    ]
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "nlq": "What are the contents of package sent by John Zoidfarb?",
    "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
    "infer_predictions": [
      [
        "SELECT contents FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'John Zoidfarb')",
        "SELECT p.contents FROM package AS p JOIN client AS c ON p.sender = c.accountnumber WHERE c.name = 'John Zoidfarb'",
        "SELECT p.contents FROM package p, client c WHERE p.sender = c.accountnumber AND c.name = 'John Zoidfarb'",
        "SELECT package.contents FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'John Zoidfarb'",
        "SELECT p.contents FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'John Zoidfarb'",
        "SELECT package.contents FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'John Zoidfarb'",
        "SELECT contents FROM package WHERE EXISTS (SELECT 1 FROM client WHERE client.accountnumber = package.sender AND client.name = 'John Zoidfarb')",
        "SELECT p.contents FROM package AS p WHERE p.sender IN (SELECT c.accountnumber FROM client AS c WHERE c.name = 'John Zoidfarb')",
        "SELECT contents FROM package p WHERE p.sender IN (SELECT accountnumber FROM client WHERE name = 'John Zoidfarb')"
      ]
    ]
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "nlq": "What are the package contents of all those sent by John Zoidfarb?",
    "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
    "infer_predictions": [
      [
        "SELECT contents FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'John Zoidfarb'",
        "SELECT P.contents FROM package P JOIN client C ON P.sender = C.accountnumber WHERE C.name = 'John Zoidfarb'",
        "SELECT package.contents FROM package, client WHERE package.sender = client.accountnumber AND client.name = 'John Zoidfarb'",
        "SELECT contents FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'John Zoidfarb')",
        "SELECT p.contents FROM package p WHERE p.sender IN (SELECT c.accountnumber FROM client c WHERE c.name = 'John Zoidfarb')",
        "SELECT contents FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'John Zoidfarb')",
        "SELECT P.contents FROM package AS P INNER JOIN client AS C ON P.sender = C.accountnumber WHERE C.name = 'John Zoidfarb'",
        "SELECT package.contents FROM package JOIN client ON package.sender = client.accountnumber AND client.name = 'John Zoidfarb'",
        "SELECT contents FROM package p WHERE EXISTS (SELECT 1 FROM client c WHERE c.accountnumber = p.sender AND c.name = 'John Zoidfarb')",
        "SELECT contents FROM package p INNER JOIN client c ON p.sender = c.accountnumber AND c.name = 'John Zoidfarb'"
      ]
    ]
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "nlq": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
    "infer_predictions": [
      [
        "SELECT P.packagenumber, P.weight FROM package P JOIN client C ON P.sender = C.accountnumber WHERE C.name LIKE '%John%' ORDER BY P.weight DESC LIMIT 1",
        "SELECT packagenumber, weight FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name LIKE '%John%') ORDER BY weight DESC LIMIT 1",
        "SELECT P.packagenumber, max(P.weight) as MaxWeight FROM package P INNER JOIN client C ON P.sender = C.accountnumber WHERE C.name LIKE '%John%' GROUP BY P.packagenumber ORDER BY MaxWeight DESC LIMIT 1",
        "SELECT P.packagenumber, P.weight FROM package P WHERE P.sender = (SELECT C.accountnumber FROM client C WHERE C.name LIKE '%John%' AND C.accountnumber = P.sender) ORDER BY P.weight DESC LIMIT 1",
        "SELECT P.packagenumber, P.weight FROM client C JOIN package P ON C.accountnumber = P.sender WHERE C.name LIKE '%John%' ORDER BY P.weight DESC LIMIT 1",
        "SELECT packagenumber, weight FROM (SELECT packagenumber, weight FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name LIKE '%John%')) ORDER BY weight DESC LIMIT 1",
        "SELECT P.packagenumber, P.weight FROM package P WHERE EXISTS (SELECT 1 FROM client C WHERE C.name LIKE '%John%' AND C.accountnumber = P.sender) ORDER BY P.weight DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "nlq": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
    "infer_predictions": [
      [
        "SELECT package.packagenumber, package.weight FROM package JOIN client ON package.sender = client.accountnumber WHERE client.name LIKE 'John%' ORDER BY package.weight DESC LIMIT 1",
        "SELECT P.packagenumber, P.weight FROM package P INNER JOIN client C ON P.sender = C.accountnumber WHERE C.name GLOB 'John*' ORDER BY P.weight DESC LIMIT 1",
        "SELECT packagenumber, weight FROM package, client WHERE package.sender = client.accountnumber AND client.name LIKE 'John%' ORDER BY weight DESC LIMIT 1",
        "SELECT P.packagenumber, P.weight FROM package P, client C WHERE P.sender = C.accountnumber AND C.name LIKE 'John%' ORDER BY P.weight DESC LIMIT 1",
        "SELECT p_number, p_weight FROM (SELECT packagenumber AS p_number, weight AS p_weight FROM package JOIN client ON sender = accountnumber WHERE name LIKE 'John%') ORDER BY p_weight DESC LIMIT 1",
        "SELECT packagenumber AS Num, weight AS Wt FROM (SELECT packagenumber, weight, name FROM package JOIN client ON client.accountnumber = sender) WHERE name LIKE 'John%' ORDER BY Wt DESC LIMIT 1",
        "SELECT p_num, p_weight FROM (SELECT package.packagenumber AS p_num, package.weight AS p_weight FROM client JOIN package ON client.accountnumber = package.sender WHERE client.name LIKE 'John%') ORDER BY p_weight DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "nlq": "List package number and weight of top 3 lightest packages.",
    "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
    "infer_predictions": [
      [
        "SELECT packagenumber, weight FROM package ORDER BY weight ASC LIMIT 3",
        "SELECT p.packagenumber, p.weight FROM package p ORDER BY p.weight ASC LIMIT 3",
        "SELECT packagenumber, weight FROM package WHERE weight IN (SELECT MIN(weight) FROM package) LIMIT 3",
        "SELECT A.packagenumber, A.weight FROM package A ORDER BY A.weight ASC LIMIT 3",
        "SELECT top.packagenumber, top.weight FROM (SELECT packagenumber, weight FROM package ORDER BY weight) as top LIMIT 3",
        "SELECT DISTINCT packagenumber, weight FROM package GROUP BY packagenumber, weight ORDER BY weight ASC LIMIT 3",
        "SELECT first_3.packagenumber, first_3.weight FROM (SELECT packagenumber, weight FROM package ORDER BY weight ASC) as first_3 LIMIT 3"
      ]
    ]
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "nlq": "What is the package number and weight of the 3 lightest packages?",
    "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
    "infer_predictions": [
      [
        "SELECT packagenumber, weight FROM package ORDER BY weight ASC LIMIT 3",
        "SELECT p.packagenumber, p.weight FROM package p ORDER BY p.weight ASC LIMIT 3",
        "SELECT p.packagenumber, p.weight FROM package p ORDER BY p.weight LIMIT 3",
        "SELECT p.packagenumber AS \"Package Number\", p.weight AS \"Weight\" FROM package AS p ORDER BY weight ASC LIMIT 3",
        "SELECT first.packagenumber, first.weight FROM package first ORDER BY first.weight ASC LIMIT 3"
      ]
    ]
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "nlq": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT cl.name, COUNT(*) AS packages_sent FROM package p JOIN client cl ON p.sender = cl.accountnumber GROUP BY p.sender ORDER BY packages_sent DESC LIMIT 1",
        "SELECT name, MAX(package_count) FROM (SELECT cl.name, COUNT(p.packagenumber) AS package_count FROM package p INNER JOIN client cl ON p.sender = cl.accountnumber GROUP BY p.sender)",
        "SELECT client.name, COUNT(*) AS NumOfPackages FROM package JOIN client ON package.sender = client.accountnumber GROUP BY package.sender ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT c.name, COUNT(p.packagenumber) FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name ORDER BY COUNT(p.packagenumber) DESC LIMIT 1",
        "SELECT (SELECT name FROM client WHERE accountnumber = p.sender) AS senderName, COUNT(*) AS sentPackages FROM package p GROUP BY p.sender ORDER BY sentPackages DESC LIMIT 1",
        "SELECT cl.name AS client_name, COUNT(*) AS num_packages FROM package p INNER JOIN client cl ON p.sender = cl.accountnumber GROUP BY cl.name HAVING COUNT(*) = (SELECT MAX(Cnt) FROM (SELECT COUNT(*) Cnt FROM package GROUP BY sender))"
      ]
    ]
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "nlq": "What is the name of the client who sent the most packages and how many were there?",
    "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT cl.name, COUNT(*) AS packages_sent FROM client cl JOIN package pk ON cl.accountnumber = pk.sender GROUP BY cl.name ORDER BY packages_sent DESC LIMIT 1",
        "SELECT client.name, MAX(package_count) FROM client INNER JOIN (SELECT sender, COUNT(*) AS package_count FROM package GROUP BY sender) p ON client.accountnumber = p.sender",
        "SELECT name, COUNT(pkg.packagenumber) AS total FROM client JOIN package pkg ON client.accountnumber = pkg.sender GROUP BY client.accountnumber ORDER BY total DESC LIMIT 1",
        "SELECT c.name, MAX(cnt) FROM client c JOIN (SELECT sender, COUNT(*) cnt FROM package GROUP BY sender) p ON c.accountnumber = p.sender",
        "SELECT A.name FROM client A, (SELECT sender, COUNT(*) AS count FROM package GROUP BY sender ORDER BY count DESC LIMIT 1) B WHERE A.accountnumber = B.sender",
        "SELECT TopClient.name FROM (SELECT client.name, COUNT(package.packagenumber) as Count From client JOIN package ON client.accountnumber = package.sender GROUP BY client.name ORDER BY COUNT DESC LIMIT 1) AS TopClient",
        "SELECT (SELECT name FROM client WHERE accountnumber = (SELECT sender FROM package GROUP BY sender ORDER BY COUNT(*) DESC LIMIT 1)), COUNT(*) FROM package GROUP BY sender ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT first.name, total_max FROM client AS first JOIN (SELECT sender, COUNT(packagenumber) AS total_max FROM package GROUP BY sender ORDER BY total_max DESC LIMIT 1) temp ON first.accountnumber = temp.sender",
        "SELECT client.name, count(package.packagenumber) AS sent_packages FROM client INNER JOIN package ON client.accountnumber = package.sender GROUP BY client.name HAVING sent_packages = (SELECT MAX(sent) FROM (SELECT count(package.packagenumber) AS sent FROM package GROUP BY package.sender) sub)"
      ]
    ]
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "nlq": "Who received least number of packages ? List client name and number of packages received by that client .",
    "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
    "infer_predictions": [
      [
        "SELECT name, COUNT(packagenumber) AS NumPackages FROM client JOIN package ON client.accountnumber = package.recipient GROUP BY client.accountnumber ORDER BY NumPackages ASC LIMIT 1",
        "SELECT client.name, COUNT(package.packagenumber) FROM package LEFT JOIN client ON package.recipient = client.accountnumber GROUP BY package.recipient ORDER BY COUNT(package.packagenumber) ASC LIMIT 1",
        "SELECT c.name, MIN(cPackageCount) FROM client c JOIN (SELECT recipient, COUNT(*) as cPackageCount FROM package GROUP BY recipient) AS subq ON c.accountnumber = subq.recipient",
        "WITH RecipientCount AS (SELECT recipient, COUNT(*) AS NumPackages FROM package GROUP BY recipient) SELECT client.name, RecipientCount.NumPackages FROM client JOIN RecipientCount ON client.accountnumber = RecipientCount.recipient ORDER BY RecipientCount.NumPackages ASC LIMIT 1",
        "SELECT c.name, (SELECT COUNT(p.packagenumber) FROM package p WHERE p.recipient = c.accountnumber) AS NumPackages FROM client c ORDER BY NumPackages ASC LIMIT 1",
        "SELECT A.name, A.NumPackages FROM (SELECT client.name, COUNT(package.packagenumber) AS NumPackages FROM client LEFT JOIN package ON client.accountnumber = package.recipient GROUP BY client.accountnumber) AS A ORDER BY A.NumPackages ASC LIMIT 1",
        "SELECT name, (SELECT count(*) FROM package WHERE recipient = cl.accountnumber) as packages_received FROM client cl ORDER BY packages_received LIMIT 1",
        "SELECT name, ReceivedPackages FROM client JOIN (SELECT recipient, COUNT(packagenumber) AS ReceivedPackages FROM package GROUP BY recipient) AS packageCount ON client.accountnumber = packageCount.recipient ORDER BY ReceivedPackages LIMIT 1"
      ]
    ]
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "nlq": "What is the smallest number of packages received and by whom ?",
    "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
    "infer_predictions": [
      [
        "SELECT c.name, COUNT(p.packagenumber) AS num_packages FROM package p JOIN client c ON p.recipient = c.accountnumber GROUP BY p.recipient ORDER BY num_packages ASC LIMIT 1",
        "SELECT name, MIN(package_count) FROM (SELECT c.name, COUNT(p.packagenumber) as package_count FROM client c JOIN package p ON c.accountnumber = p.recipient GROUP BY c.accountnumber)",
        "SELECT name FROM client WHERE accountnumber IN ( SELECT recipient FROM package GROUP BY recipient ORDER BY COUNT(*) ASC LIMIT 1 )",
        "SELECT c.name FROM client c WHERE c.accountnumber = (SELECT p.recipient FROM package p GROUP BY p.recipient ORDER BY COUNT(p.packagenumber) ASC LIMIT 1)",
        "SELECT name, COUNT(packagenumber) AS count FROM client JOIN package ON client.accountnumber = package.recipient GROUP BY client.accountnumber ORDER BY count LIMIT 1",
        "SELECT name FROM client WHERE accountnumber = ( SELECT recipient FROM ( SELECT recipient, COUNT(packagenumber) AS counts FROM package GROUP BY recipient ) WHERE counts = ( SELECT MIN(counts) FROM ( SELECT recipient, COUNT(packagenumber) AS counts FROM package GROUP BY recipient ) ) )",
        "SELECT c.name FROM client c INNER JOIN (SELECT recipient, COUNT(*) as num_packages FROM package GROUP BY recipient ORDER BY num_packages) p ON c.accountnumber = p.recipient LIMIT 1"
      ]
    ]
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "nlq": "Who sent more than one packages? List the client's name.",
    "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
    "infer_predictions": [
      [
        "SELECT c.name FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY c.name HAVING COUNT(*) > 1",
        "SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(packagenumber) > 1)",
        "SELECT C.name FROM client C WHERE EXISTS (SELECT 1 FROM package P WHERE P.sender = C.accountnumber GROUP BY P.sender HAVING COUNT(P.packagenumber) > 1)",
        "SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1)",
        "SELECT client.name FROM client INNER JOIN package ON client.accountnumber = package.sender GROUP BY client.name HAVING COUNT(package.packagenumber) > 1",
        "SELECT DISTINCT cl.name FROM client cl INNER JOIN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1) AS subq ON cl.accountnumber = subq.sender",
        "SELECT DISTINCT c.name FROM client c, package p WHERE c.accountnumber = p.sender GROUP BY c.name, c.accountnumber HAVING COUNT(p.sender) > 1",
        "SELECT c.name FROM client AS c JOIN package AS p ON c.accountnumber = p.sender GROUP BY c.accountnumber HAVING COUNT(*) > 1",
        "SELECT c.name FROM client c WHERE (SELECT COUNT(*) FROM package p WHERE p.sender = c.accountnumber) > 1",
        "SELECT DISTINCT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(DISTINCT packagenumber) > 1)"
      ]
    ]
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "nlq": "What is the name of all clients who sent more than one package?",
    "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
    "infer_predictions": [
      [
        "SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(*) > 1)",
        "SELECT DISTINCT name FROM client c JOIN package p ON c.accountnumber = p.sender GROUP BY p.sender HAVING COUNT(p.packagenumber) > 1",
        "SELECT c.name FROM client c WHERE EXISTS (SELECT 1 FROM package p WHERE c.accountnumber = p.sender GROUP BY p.sender HAVING COUNT(*) > 1)",
        "SELECT name FROM client WHERE accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(packagenumber) > 1)",
        "SELECT c.name FROM client c JOIN (SELECT sender FROM package GROUP BY sender HAVING COUNT(sender) > 1) p ON c.accountnumber = p.sender",
        "SELECT name FROM client c WHERE (SELECT COUNT(p.packagenumber) FROM package p WHERE p.sender = c.accountnumber) > 1",
        "SELECT DISTINCT c.name FROM client c, package p WHERE c.accountnumber = p.sender GROUP BY p.sender HAVING COUNT(p.packagenumber) > 1",
        "SELECT name FROM client c WHERE c.accountnumber IN (SELECT sender FROM package GROUP BY sender HAVING COUNT(DISTINCT packagenumber) > 1)",
        "SELECT c.name FROM client c INNER JOIN package p ON c.accountnumber = p.sender GROUP BY p.sender HAVING COUNT(distinct p.packagenumber) > 1",
        "SELECT c.name FROM client c WHERE c.accountnumber IN (SELECT t.sender FROM (SELECT sender, count(packagenumber) as total_packages FROM package GROUP BY sender) t WHERE t.total_packages > 1)"
      ]
    ]
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "nlq": "What are the Coordinates of planet Mars?",
    "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
    "infer_predictions": [
      [
        "SELECT coordinates FROM planet WHERE name = 'Mars'",
        "SELECT P.coordinates FROM planet P WHERE P.name = 'Mars'",
        "SELECT coordinates FROM planet WHERE name LIKE 'Mars'",
        "SELECT coordinates FROM planet WHERE name = 'Mars' LIMIT 1",
        "SELECT coordinates FROM planet WHERE name IN ('Mars')",
        "SELECT coordinates FROM planet WHERE name LIKE '%Mars%' AND LENGTH(planet.name) = LENGTH('Mars')"
      ]
    ]
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "nlq": "What are the coordinates of the planet named Mars?",
    "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
    "infer_predictions": [
      [
        "SELECT coordinates FROM planet WHERE name = 'Mars';",
        "SELECT p.coordinates FROM planet p WHERE p.name = 'Mars';",
        "SELECT pt.coordinates FROM planet pt WHERE pt.name = 'Mars';",
        "SELECT a.coordinates FROM planet a WHERE a.name = 'Mars';",
        "SELECT * FROM (SELECT coordinates FROM planet WHERE name = 'Mars') AS CoordQuery;",
        "SELECT pl.coordinates FROM planet pl WHERE pl.name = 'Mars';"
      ]
    ]
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "nlq": "List all Planets' names and coordinates in alphabetical order of name.",
    "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
    "infer_predictions": [
      [
        "SELECT name, coordinates FROM planet ORDER BY name ASC",
        "SELECT p.name, p.coordinates FROM planet p ORDER BY p.name ASC",
        "SELECT p.name AS Planet_Name, p.coordinates AS Coordinates FROM planet p ORDER BY Planet_Name",
        "SELECT name AS 'Planet Name', coordinates AS 'Coordinates' FROM planet ORDER BY 'Planet Name'",
        "SELECT * FROM (SELECT name, coordinates FROM planet) ORDER BY name",
        "SELECT name, coordinates FROM planet p ORDER BY p.name",
        "SELECT 'name', 'coordinates' FROM planet ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "nlq": "What are the names and coordinates of all planets in alphabetical order by name?",
    "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
    "infer_predictions": [
      [
        "SELECT name, coordinates FROM planet ORDER BY name ASC",
        "SELECT p.name, p.coordinates FROM planet p ORDER BY p.name",
        "SELECT name as PlanetName, coordinates as Coords FROM planet ORDER BY PlanetName",
        "SELECT p.name AS Name, p.coordinates AS Coord FROM planet AS p ORDER BY Name ASC",
        "SELECT p.name, p.coordinates FROM planet p ORDER BY p.name ASC",
        "SELECT planet.name, planet.coordinates FROM planet ORDER BY 1",
        "SELECT * FROM planet ORDER BY name ASC"
      ]
    ]
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "nlq": "List all shipment id under Phillip J. Fry's management.",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
    "infer_predictions": [
      [
        "SELECT shipmentid FROM shipment JOIN employee ON shipment.manager = employee.employeeid WHERE employee.name = 'Phillip J. Fry'",
        "SELECT s.shipmentid FROM shipment s INNER JOIN employee e ON s.manager = e.employeeid WHERE e.name = 'Phillip J. Fry'",
        "SELECT sh.shipmentid FROM shipment sh, employee em WHERE sh.manager = em.employeeid AND em.name = 'Phillip J. Fry'",
        "SELECT shipment.shipmentid FROM shipment, employee WHERE shipment.manager = employee.employeeid AND employee.name = 'Phillip J. Fry'",
        "SELECT shipmentid FROM shipment WHERE manager IN (SELECT employeeid FROM employee WHERE name = 'Phillip J. Fry')",
        "SELECT shp.shipmentid FROM shipment shp JOIN employee emp ON shp.manager = emp.employeeid WHERE emp.name = 'Phillip J. Fry'",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN employee ON shipment.manager = employee.employeeid WHERE employee.name = 'Phillip J. Fry'",
        "SELECT id FROM (SELECT shipmentid AS id FROM shipment JOIN employee ON manager = employeeid WHERE name = 'Phillip J. Fry')",
        "SELECT ship.shipmentid FROM shipment ship WHERE ship.manager = (SELECT emp.employeeid FROM employee emp WHERE emp.name = 'Phillip J. Fry')",
        "SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT e.employeeid FROM employee e WHERE e.name = 'Phillip J. Fry')"
      ]
    ]
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "nlq": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
    "infer_predictions": [
      [
        "SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid WHERE e.name = 'Phillip J Fry'",
        "SELECT shipmentid FROM shipment WHERE manager IN (SELECT employeeid FROM employee WHERE name = 'Phillip J Fry')",
        "SELECT s.shipmentid FROM shipment s, employee e WHERE s.manager = e.employeeid AND e.name = 'Phillip J Fry'",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN employee ON shipment.manager = employee.employeeid WHERE employee.name = 'Phillip J Fry'",
        "SELECT shipmentid FROM shipment s WHERE EXISTS (SELECT 1 FROM employee e WHERE s.manager = e.employeeid AND e.name = 'Phillip J Fry')",
        "SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT employeeid FROM employee WHERE name = 'Phillip J Fry')",
        "SELECT ship.shipmentid FROM shipment ship JOIN employee emp ON ship.manager = emp.employeeid WHERE emp.name = 'Phillip J Fry'",
        "SELECT DISTINCT shipmentid FROM shipment WHERE manager = (SELECT employeeid FROM employee WHERE name = 'Phillip J Fry')",
        "SELECT shipmentid FROM shipment JOIN employee ON employeeid = shipment.manager WHERE name = 'Phillip J Fry'",
        "SELECT shipmentid FROM shipment AS s INNER JOIN employee AS e ON s.manager = e.employeeid WHERE e.name = 'Phillip J Fry'"
      ]
    ]
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "nlq": "List the dates of all shipments.",
    "gold": "SELECT Date FROM Shipment;",
    "infer_predictions": [
      [
        "SELECT date FROM shipment",
        "SELECT date FROM shipment GROUP BY date",
        "SELECT s.date FROM shipment s",
        "SELECT s.date FROM shipment s GROUP BY s.date"
      ]
    ]
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "nlq": "What are the dates of every shipment in the database?",
    "gold": "SELECT Date FROM Shipment;",
    "infer_predictions": [
      [
        "SELECT date FROM shipment;",
        "SELECT s.date FROM shipment s;",
        "SELECT DISTINCT s.date FROM shipment s;",
        "SELECT shipment.date AS shipment_date FROM shipment;",
        "SELECT date AS ShipmentDate FROM shipment ORDER BY date;",
        "SELECT date FROM shipment GROUP BY date;",
        "SELECT date FROM shipment WHERE date IS NOT NULL;",
        "SELECT s.date FROM shipment s WHERE s.date IS NOT NULL ORDER BY s.date;"
      ]
    ]
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "nlq": "List all shipment ids for the planet Mars.",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
    "infer_predictions": [
      [
        "SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars'",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment s, planet p WHERE s.planet = p.planetid AND p.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT SHIP.shipmentid FROM shipment AS SHIP LEFT JOIN planet AS PLAN ON SHIP.planet = PLAN.planetid WHERE PLAN.name = 'Mars'",
        "SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars')",
        "SELECT shipment.shipmentid FROM shipment, planet WHERE shipment.planet = planet.planetid AND planet.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment AS s INNER JOIN planet AS p ON s.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment s LEFT JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars'"
      ]
    ]
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "nlq": "What are the shipment ids for the planet Mars?",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
    "infer_predictions": [
      [
        "SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars')",
        "SELECT s.shipmentid FROM shipment s INNER JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars')",
        "SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars'",
        "SELECT shipmentid FROM shipment, planet WHERE shipment.planet = planet.planetid AND planet.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment s, planet p WHERE s.planet = p.planetid AND p.name = 'Mars'",
        "SELECT shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT s.shipmentid FROM shipment s WHERE s.planet = (SELECT planetid FROM planet WHERE name = 'Mars')",
        "SELECT s.shipmentid FROM shipment s WHERE EXISTS (SELECT 1 FROM planet p WHERE p.planetid = s.planet AND p.name = 'Mars')",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN planet ON shipment.planet = planet.planetid AND planet.name = 'Mars'"
      ]
    ]
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "nlq": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment INNER JOIN planet ON shipment.planet = planet.planetid INNER JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT shipment.shipmentid FROM shipment, planet, employee WHERE shipment.planet = planet.planetid AND shipment.manager = employee.employeeid AND planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s, planet p, employee e WHERE s.planet = p.planetid AND s.manager = e.employeeid AND p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s INNER JOIN planet p ON s.planet = p.planetid INNER JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'"
      ]
    ]
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "nlq": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars') AND manager IN (SELECT employeeid FROM employee WHERE name = 'Turanga Leela')",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN planet ON shipment.planet = planet.planetid INNER JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') AND manager = (SELECT employeeid FROM employee WHERE name = 'Turanga Leela')",
        "SELECT s.shipmentid FROM shipment s, planet p, employee e WHERE s.planet = p.planetid AND s.manager = e.employeeid AND p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s INNER JOIN planet p ON s.planet = p.planetid INNER JOIN employee e ON e.employeeid = s.manager WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipment.shipmentid FROM shipment, planet, employee WHERE shipment.planet = planet.planetid AND shipment.manager = employee.employeeid AND planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment, planet, employee WHERE shipment.planet = planet.planetid AND shipment.manager = employee.employeeid AND planet.name = 'Mars' AND employee.name = 'Turanga Leela' GROUP BY shipment.shipmentid",
        "SELECT shipmentid FROM shipment AS s WHERE EXISTS (SELECT * FROM planet AS p WHERE s.planet = p.planetid AND p.name = 'Mars') AND EXISTS (SELECT * FROM employee AS e WHERE s.manager = e.employeeid AND e.name = 'Turanga Leela')",
        "SELECT s.shipmentid FROM shipment s WHERE EXISTS (SELECT 1 FROM planet p WHERE p.planetid = s.planet AND p.name = 'Mars') AND EXISTS (SELECT 1 FROM employee e WHERE e.employeeid = s.manager AND e.name = 'Turanga Leela')"
      ]
    ]
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "nlq": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars') OR manager IN (SELECT employeeid FROM employee WHERE name = 'Turanga Leela')",
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars' UNION SELECT s.shipmentid FROM shipment s JOIN employee e ON s.manager = e.employeeid WHERE e.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s, planet p, employee e WHERE s.planet = p.planetid AND p.name = 'Mars' OR s.manager = e.employeeid AND e.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s LEFT JOIN employee e ON s.manager = e.employeeid WHERE e.name = 'Turanga Leela' UNION SELECT s.shipmentid FROM shipment s INNER JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT DISTINCT s.shipmentid FROM shipment s WHERE EXISTS (SELECT 1 FROM planet p WHERE s.planet = p.planetid AND p.name = 'Mars') OR EXISTS (SELECT 1 FROM employee e WHERE s.manager = e.employeeid AND e.name = 'Turanga Leela')",
        "SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars') OR manager = (SELECT employeeid FROM employee WHERE name = 'Turanga Leela')",
        "SELECT s.shipmentid FROM shipment s WHERE s.planet = (SELECT planetid FROM planet WHERE name = 'Mars') UNION ALL SELECT s.shipmentid FROM shipment s WHERE s.manager = (SELECT employeeid FROM employee WHERE name = 'Turanga Leela')",
        "SELECT shipmentid FROM shipment WHERE planet = (SELECT p.planetid FROM planet p WHERE p.name = 'Mars') OR manager = (SELECT e.employeeid FROM employee e WHERE e.name = 'Turanga Leela')",
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid LEFT JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' OR e.name = 'Turanga Leela'"
      ]
    ]
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "nlq": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
    "infer_predictions": [
      [
        "SELECT shipment.shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid JOIN employee ON shipment.manager = employee.employeeid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s INNER JOIN planet p ON s.planet = p.planetid INNER JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipmentid FROM shipment, planet, employee WHERE shipment.planet = planet.planetid AND shipment.manager = employee.employeeid AND planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s, planet p, employee e WHERE s.planet = p.planetid AND s.manager = e.employeeid AND p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipment.shipmentid FROM shipment INNER JOIN employee ON shipment.manager = employee.employeeid INNER JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s JOIN planet p ON s.planet = p.planetid JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s, employee e, planet p WHERE s.manager = e.employeeid AND s.planet = p.planetid AND p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s LEFT JOIN planet p ON s.planet = p.planetid LEFT JOIN employee e ON s.manager = e.employeeid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'",
        "SELECT shipment.shipmentid FROM shipment, planet, employee WHERE shipment.planet = planet.planetid AND shipment.manager = employee.employeeid AND planet.name = 'Mars' AND employee.name = 'Turanga Leela'",
        "SELECT s.shipmentid FROM shipment s LEFT JOIN employee e ON s.manager = e.employeeid LEFT JOIN planet p ON s.planet = p.planetid WHERE p.name = 'Mars' AND e.name = 'Turanga Leela'"
      ]
    ]
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "nlq": "What is the total shipments in each planet? List the planet name and total shipments.",
    "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
    "infer_predictions": [
      [
        "SELECT p.name, COUNT(s.shipmentid) AS total_shipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid",
        "SELECT name, COUNT(shipmentid) AS total_shipments FROM planet INNER JOIN shipment ON planetid = shipment.planet GROUP BY planetid",
        "SELECT name, (SELECT COUNT(*) FROM shipment WHERE shipment.planet = planet.planetid) AS total_shipments FROM planet",
        "SELECT planet.name, COUNT(shipment.shipmentid) FROM planet LEFT JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.name",
        "SELECT name, COUNT(s.shipmentid) FROM planet, shipment s WHERE planet.planetid = s.planet GROUP BY planet.name",
        "SELECT (SELECT name FROM planet WHERE planetid = s.planet), COUNT(s.shipmentid) FROM shipment s GROUP BY s.planet",
        "SELECT p.name, (SELECT COUNT(*) FROM shipment WHERE planet = p.planetid) FROM planet p",
        "SELECT name, (SELECT COUNT(ship.shipmentid) FROM shipment ship WHERE ship.planet = planet.planetid) AS total_shipments FROM planet",
        "SELECT p.name as Planet_Name, (SELECT COUNT(*) FROM shipment WHERE planet = p.planetid) AS Total_Shipments FROM planet p GROUP BY p.name"
      ]
    ]
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "nlq": "How many shipments take place on each planet?",
    "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
    "infer_predictions": [
      [
        "SELECT p.name, COUNT(s.shipmentid) FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid",
        "SELECT planet.name, COUNT(*) AS shipment_count FROM planet INNER JOIN shipment ON planet.planetid = shipment.planet GROUP BY planet.planetid",
        "SELECT name, COUNT(shipmentid) FROM planet JOIN shipment ON planetid = planet GROUP BY planetid",
        "SELECT (SELECT name FROM planet WHERE planetid = shipment.planet) AS PlanetName, COUNT(shipmentid) AS Shipments FROM shipment GROUP BY planet",
        "SELECT p.name AS PlanetName, COUNT(s.shipmentid) AS TotalShipments FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name",
        "SELECT p.name, COUNT(s.shipmentid) FROM shipment s, planet p WHERE p.planetid = s.planet GROUP BY p.name",
        "SELECT p.name AS Planet_Name, COUNT(*) AS NumberOfShipments FROM planet p LEFT JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid",
        "SELECT (SELECT name FROM planet WHERE planetid = s.planet) AS PlanetName, COUNT(s.shipmentid) AS Number_Of_Shipments FROM shipment s GROUP BY s.planet",
        "SELECT name, (SELECT COUNT(shipmentid) FROM shipment WHERE planet = planetid) AS Shipments FROM planet",
        "SELECT p.name AS Planet, COUNT(s.shipmentid) AS Shipment_Count FROM planet p LEFT JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid"
      ]
    ]
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "nlq": "Which planet has most shipments? List the planet name.",
    "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM planet WHERE planetid = (SELECT planet FROM shipment GROUP BY planet ORDER BY COUNT(planet) DESC LIMIT 1)",
        "SELECT p.name FROM planet p WHERE p.planetid IN (SELECT planet FROM shipment GROUP BY planet ORDER BY COUNT(planet) DESC LIMIT 1)",
        "SELECT name FROM (SELECT p.name, COUNT(*) as shipment_count FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.name ORDER BY shipment_count DESC LIMIT 1)",
        "SELECT p1.name FROM planet p1 WHERE (SELECT COUNT(planet) FROM shipment WHERE planet = p1.planetid GROUP BY planet ORDER BY COUNT(*) DESC LIMIT 1) IS NOT NULL",
        "SELECT name FROM planet WHERE planetid = (SELECT planet FROM shipment GROUP BY planet HAVING COUNT(*) = (SELECT MAX(counts) FROM (SELECT COUNT(*) as counts FROM shipment GROUP BY planet)))",
        "SELECT planet.name FROM planet INNER JOIN (SELECT planet, COUNT(*) as count_ship FROM shipment GROUP BY planet ORDER BY count_ship DESC LIMIT 1) tp ON planet.planetid = tp.planet"
      ]
    ]
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "nlq": "What is the name of the planet with the most shipments?",
    "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT name FROM planet WHERE planetid = (SELECT planet FROM shipment GROUP BY planet ORDER BY COUNT(planet) DESC LIMIT 1)",
        "SELECT p.name FROM planet p WHERE p.planetid IN (SELECT s.planet FROM shipment s GROUP BY s.planet ORDER BY COUNT(s.shipmentid) DESC LIMIT 1)",
        "SELECT (SELECT p.name FROM planet p WHERE p.planetid = s.planet) FROM shipment s GROUP BY s.planet ORDER BY COUNT(s.shipmentid) DESC LIMIT 1",
        "SELECT name FROM planet WHERE planetid = (SELECT planet FROM shipment s GROUP BY s.planet HAVING COUNT(*) = (SELECT MAX(cnt) FROM (SELECT COUNT(*) cnt FROM shipment GROUP BY planet)))",
        "SELECT p.name FROM planet p INNER JOIN (SELECT planet, COUNT(*) AS shipments_count FROM shipment GROUP BY planet ORDER BY shipments_count DESC LIMIT 1) sub ON p.planetid = sub.planet",
        "SELECT name FROM (SELECT p.name, COUNT(s.shipmentid) as ship_count FROM planet p LEFT JOIN shipment s ON p.planetid = s.planet GROUP BY p.planetid ORDER BY ship_count DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "nlq": "List the manger's name and number of shipments under his management.",
    "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
    "infer_predictions": [
      [
        "SELECT e.name, COUNT(s.shipmentid) FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.employeeid",
        "SELECT employee.name, COUNT(*) FROM employee INNER JOIN shipment ON employee.employeeid = shipment.manager GROUP BY employee.employeeid",
        "SELECT name, COUNT(shipmentid) FROM employee, shipment WHERE employee.employeeid = shipment.manager GROUP BY employee.employeeid",
        "SELECT e.name, COUNT(*) AS num_shipments FROM employee e, shipment s WHERE e.employeeid = s.manager GROUP BY e.employeeid",
        "SELECT name, COUNT(shipment.shipmentid) FROM employee JOIN shipment ON employeeid = manager GROUP BY employeeid",
        "SELECT employee.name, COUNT(shipmentid) as Shipments FROM shipment JOIN employee ON manager = employeeid GROUP BY manager",
        "SELECT e.name AS ManagerName, COUNT(s.shipmentid) AS TotalShipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name",
        "SELECT name, (SELECT COUNT(*) FROM shipment WHERE manager = employee.employeeid) AS shipment_count FROM employee",
        "SELECT e.name AS manager_name, (SELECT COUNT(s.shipmentid) FROM shipment s WHERE s.manager = e.employeeid) AS total_shipments FROM employee e",
        "SELECT e.name, COUNT(shipments.shipmentid) FROM employee AS e INNER JOIN shipment AS shipments ON e.employeeid = shipments.manager GROUP BY e.name"
      ]
    ]
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "nlq": "What are the number of shipments managed and names of each manager?",
    "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
    "infer_predictions": [
      [
        "SELECT e.name, COUNT(s.shipmentid) AS num_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name",
        "SELECT name, COUNT(shipmentid) AS num_shipments FROM employee JOIN shipment ON employeeid = manager GROUP BY name",
        "SELECT e.name, COUNT(*) AS num_shipments FROM employee e INNER JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name",
        "SELECT name, COUNT(*) FROM employee INNER JOIN shipment ON employee.employeeid = shipment.manager GROUP BY name",
        "SELECT e.name, COUNT(s.shipmentid) FROM employee e, shipment s WHERE e.employeeid = s.manager GROUP BY e.name",
        "SELECT name, COUNT(shipmentid) FROM employee, shipment WHERE employee.employeeid = shipment.manager GROUP BY name",
        "SELECT name, COUNT(shipmentid) AS num_shipments FROM employee e LEFT JOIN shipment s ON e.employeeid = s.manager WHERE s.manager IS NOT NULL GROUP BY e.name",
        "SELECT (SELECT name FROM employee WHERE employeeid = manager) AS manager_name, COUNT(shipmentid) AS num_shipments FROM shipment GROUP BY manager",
        "SELECT name AS Manager_Name, (SELECT COUNT(*) FROM shipment WHERE manager = employee.employeeid) AS num_shipments FROM employee WHERE employeeid IN (SELECT manager FROM shipment)",
        "SELECT e.name, COUNT(s.shipmentid) AS num_shipments FROM employee e JOIN shipment s ON e.employeeid = s.manager GROUP BY e.name ORDER BY e.name"
      ]
    ]
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "nlq": "Calculate total weight of package shipped on Mars.",
    "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "infer_predictions": [
      [
        "SELECT SUM(p.weight) FROM package p INNER JOIN shipment s ON p.shipment = s.shipmentid INNER JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Mars'",
        "SELECT SUM(weight) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT TOTAL(package.weight) FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars'",
        "SELECT SUM(pack.weight) AS total_weight FROM package pack JOIN shipment ship ON pack.shipment = ship.shipmentid JOIN planet plnt ON ship.planet = plnt.planetid WHERE plnt.name = 'Mars'",
        "SELECT SUM(weight) FROM package, shipment, planet WHERE package.shipment = shipment.shipmentid AND shipment.planet = planet.planetid AND planet.name = 'Mars'",
        "SELECT SUM(weight) FROM (SELECT weight FROM package INNER JOIN shipment ON package.shipment = shipment.shipmentid WHERE shipment.planet = (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT SUM(pack.weight) FROM package pack INNER JOIN shipment sh ON pack.shipment = sh.shipmentid WHERE EXISTS (SELECT 1 FROM planet WHERE planetid = sh.planet AND name = 'Mars')",
        "SELECT TOTAL(p.weight) FROM package p WHERE p.shipment IN (SELECT s.shipmentid FROM shipment s WHERE s.planet = (SELECT pl.planetid FROM planet pl WHERE pl.name = 'Mars'))",
        "SELECT SUM(weight) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars')",
        "SELECT SUM(p.weight) FROM package p INNER JOIN shipment s ON p.shipment = s.shipmentid INNER JOIN planet pt ON s.planet = pt.planetid WHERE pt.name = 'Mars'"
      ]
    ]
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "nlq": "what is the total weight of all packages shipped on Mars?",
    "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "infer_predictions": [
      [
        "SELECT SUM(p.weight) FROM package p JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Mars'",
        "SELECT SUM(weight) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT SUM(package.weight) AS total_weight FROM package INNER JOIN shipment ON package.shipment = shipment.shipmentid INNER JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Mars'",
        "SELECT TOTAL(package.weight) FROM package, shipment, planet WHERE package.shipment = shipment.shipmentid AND shipment.planet = planet.planetid AND planet.name = 'Mars'",
        "SELECT SUM(weight) FROM package WHERE EXISTS (SELECT 1 FROM shipment JOIN planet ON shipment.planet = planet.planetid WHERE shipment.shipmentid = package.shipment AND planet.name = 'Mars')",
        "SELECT SUM(weight) FROM (SELECT weight FROM package p JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pn ON s.planet = pn.planetid WHERE pn.name = 'Mars')",
        "SELECT SUM(p.weight) FROM package p, shipment s, planet pl WHERE p.shipment = s.shipmentid AND s.planet = pl.planetid AND pl.name = 'Mars'",
        "SELECT SUM(weight) FROM package INNER JOIN (SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars')) AS incident_shipment ON package.shipment = incident_shipment.shipmentid",
        "SELECT SUM(weight) FROM package p LEFT JOIN shipment s ON p.shipment = s.shipmentid LEFT JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Mars'",
        "SELECT SUM(p.weight) FROM package p WHERE p.shipment IN (SELECT s.shipmentid FROM shipment s WHERE s.planet IN (SELECT pl.planetid FROM planet pl WHERE pl.name = 'Mars'))"
      ]
    ]
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "nlq": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
    "infer_predictions": [
      [
        "SELECT p.name, SUM(pa.weight) AS total_weight FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package pa ON s.shipmentid = pa.shipment GROUP BY p.name",
        "SELECT pl.name, SUM(pk.weight) FROM planet pl INNER JOIN shipment sh ON pl.planetid = sh.planet INNER JOIN package pk ON sh.shipmentid = pk.shipment GROUP BY pl.name",
        "SELECT DISTINCT pl.name, total_weight FROM planet pl INNER JOIN (SELECT s.planet, SUM(p.weight) AS total_weight FROM shipment s JOIN package p ON s.shipmentid = p.shipment GROUP BY s.planet) AS temp ON pl.planetid = temp.planet",
        "SELECT Name, TotalWeight FROM (SELECT planet.name AS Name, SUM(package.weight) AS TotalWeight FROM planet JOIN shipment ON planet.planetid = shipment.planet JOIN package ON shipment.shipmentid = package.shipment GROUP BY planet.name)",
        "SELECT planet.name, SUM(package.weight) AS TotalWeight FROM planet, shipment, package WHERE planet.planetid = shipment.planet AND shipment.shipmentid = package.shipment GROUP BY planet.name",
        "SELECT NAME, SUM(WEIGHT) AS TOTALWEIGHT FROM PLANET INNER JOIN SHIPMENT ON PLANETID = PLANET INNER JOIN PACKAGE ON SHIPMENTID = SHIPMENT GROUP BY NAME",
        "SELECT NAME, WEIGHT_SUM FROM (SELECT PLANET.NAME AS NAME, SUM(PACKAGE.WEIGHT) AS WEIGHT_SUM FROM PLANET JOIN SHIPMENT ON PLANET.PLANETID = SHIPMENT.PLANET JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY PLANET.NAME) AS SUBQUERY",
        "SELECT NAME, TOTAL_WEIGHT FROM PLANET LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) AS SHIPMENT_SUM ON PLANET.PLANETID = SHIPMENT_SUM.PLANET GROUP BY NAME",
        "SELECT NAME, WEIGHT_TOTAL FROM (SELECT PL.NAME AS NAME, SUM(PK.WEIGHT) AS WEIGHT_TOTAL FROM PLANET AS PL JOIN SHIPMENT AS SH ON PL.PLANETID = SH.PLANET JOIN PACKAGE AS PK ON SH.SHIPMENTID = PK.SHIPMENT GROUP BY PL.NAME)",
        "SELECT P.NAME AS PLANET_NAME, TOTAL_WEIGHT FROM PLANET P LEFT JOIN (SELECT SHIPMENT.PLANET, SUM(PACKAGE.WEIGHT) AS TOTAL_WEIGHT FROM SHIPMENT JOIN PACKAGE ON SHIPMENT.SHIPMENTID = PACKAGE.SHIPMENT GROUP BY SHIPMENT.PLANET) S ON P.PLANETID = S.PLANET ORDER BY P.NAME"
      ]
    ]
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "nlq": "what is the total package weight for each planet, list its name ?",
    "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
    "infer_predictions": [
      [
        "SELECT p.name, SUM(pkg.weight) FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package pkg ON s.shipmentid = pkg.shipment GROUP BY p.name",
        "SELECT name, total_weight FROM (SELECT name, SUM(weight) AS total_weight FROM planet JOIN shipment ON planetid = planet JOIN package ON shipmentid = shipment GROUP BY name)",
        "SELECT pl.name, TOTAL(pack.weight) AS total_package_weight FROM planet pl INNER JOIN shipment sh ON pl.planetid = sh.planet INNER JOIN package pack ON sh.shipmentid = pack.shipment GROUP BY pl.name",
        "SELECT planet.name, SUM(package.weight) AS total_weight FROM planet, shipment, package WHERE planet.planetid = shipment.planet AND shipment.shipmentid = package.shipment GROUP BY planet.name",
        "SELECT p.name AS planet_name, SUM(pk.weight) AS total_package_weight FROM planet AS p JOIN shipment AS s ON p.planetid = s.planet JOIN package AS pk ON s.shipmentid = pk.shipment GROUP BY p.name",
        "SELECT name, SUM(weight) as Total_Weight FROM planet INNER JOIN (SELECT planet, SUM(weight) as weight FROM shipment, package WHERE shipmentid = package.shipment GROUP BY planet) AS WeightByPlanet ON planet.planetid = WeightByPlanet.planet GROUP BY name",
        "SELECT pl.name, SUM(p.weight) FROM planet pl, shipment sh, package p WHERE pl.planetid = sh.planet AND sh.shipmentid = p.shipment GROUP BY pl.name",
        "SELECT pl.name AS PlanetName, SUM(pk.weight) AS PackageTotalWeight FROM planet pl INNER JOIN shipment sh ON pl.planetid = sh.planet INNER JOIN package pk ON pk.shipment = sh.shipmentid GROUP BY pl.name",
        "SELECT pl.name, Accumulated_Weight FROM planet pl LEFT JOIN (SELECT planet, SUM(weight) AS Accumulated_Weight FROM shipment JOIN package ON shipmentid = shipment GROUP BY planet) AS WeightInfo ON pl.planetid = WeightInfo.planet",
        "SELECT pal.name, TOTAL(pac.weight) FROM planet pal JOIN shipment si ON pal.planetid = si.planet JOIN package pac ON si.shipmentid = pac.shipment GROUP BY pal.name"
      ]
    ]
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "nlq": "Which planet has total weight of shipment greater than 30? List planet name.",
    "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p WHERE EXISTS (SELECT 1 FROM shipment s JOIN package k ON s.shipmentid = k.shipment WHERE s.planet = p.planetid GROUP BY s.planet HAVING SUM(k.weight) > 30)",
        "SELECT p.name FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package k ON s.shipmentid = k.shipment GROUP BY p.name HAVING SUM(k.weight) > 30",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM shipment JOIN package ON shipmentid = package.shipment GROUP BY planet HAVING SUM(weight) > 30)",
        "SELECT name FROM (SELECT p.name AS name, SUM(k.weight) AS total_weight FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package k ON s.shipmentid = k.shipment GROUP BY p.name) WHERE total_weight > 30",
        "SELECT planet.name FROM planet INNER JOIN (SELECT s.planet FROM shipment s INNER JOIN package k ON s.shipmentid = k.shipment GROUP BY s.planet HAVING SUM(k.weight) > 30) AS weighted ON planet.planetid = weighted.planet",
        "SELECT DISTINCT name FROM planet, shipment, package WHERE planet.planetid = shipment.planet AND shipment.shipmentid = package.shipment GROUP BY planet.name, planet.planetid HAVING SUM(package.weight) > 30",
        "SELECT p.name FROM planet p WHERE p.planetid IN (SELECT s.planet FROM shipment s GROUP BY s.planet HAVING SUM((SELECT SUM(k.weight) FROM package k WHERE k.shipment = s.shipmentid)) > 30)",
        "SELECT DISTINCT p.name FROM planet p INNER JOIN shipment s ON p.planetid = s.planet INNER JOIN package k ON s.shipmentid = k.shipment GROUP BY s.planet HAVING SUM(k.weight) > 30",
        "SELECT DISTINCT name FROM planet WHERE EXISTS (SELECT planet FROM shipment INNER JOIN package ON shipmentid = shipment GROUP BY planet HAVING SUM(weight) > 30 AND planet = planetid)",
        "SELECT p.name FROM planet p WHERE (SELECT SUM(k.weight) FROM shipment s JOIN package k ON s.shipmentid = k.shipment WHERE s.planet = p.planetid GROUP BY s.planet) > 30"
      ]
    ]
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "nlq": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p JOIN shipment s ON p.planetid = s.planet JOIN package pk ON s.shipmentid = pk.shipment GROUP BY p.name HAVING SUM(pk.weight) > 30",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM shipment WHERE shipmentid IN (SELECT shipment FROM package GROUP BY shipment HAVING SUM(weight) > 30))",
        "SELECT pl.name FROM planet pl WHERE EXISTS (SELECT 1 FROM shipment sh JOIN package pa ON sh.shipmentid = pa.shipment WHERE sh.planet = pl.planetid GROUP BY sh.planet HAVING SUM(pa.weight) > 30)",
        "SELECT DISTINCT pl.name FROM planet pl INNER JOIN (SELECT s.planet, SUM(pk.weight) totalWeight FROM shipment s INNER JOIN package pk ON s.shipmentid = pk.shipment GROUP BY s.planet HAVING SUM(pk.weight) > 30) groupedShipments ON pl.planetid = groupedShipments.planet",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM shipment s JOIN package p ON s.shipmentid = p.shipment GROUP BY planet HAVING SUM(weight) > 30)",
        "SELECT pl.name FROM planet pl, shipment s, package p WHERE pl.planetid = s.planet AND s.shipmentid = p.shipment GROUP BY pl.name HAVING SUM(p.weight) > 30",
        "SELECT name FROM planet WHERE planetid IN (SELECT s.planet FROM shipment s, package p WHERE s.shipmentid = p.shipment GROUP BY s.planet HAVING SUM(p.weight) > 30)",
        "SELECT name FROM planet AS p JOIN shipment AS s ON p.planetid = s.planet JOIN package AS pk ON s.shipmentid = pk.shipment GROUP BY p.name HAVING SUM(pk.weight) > 30",
        "SELECT p.name FROM planet p WHERE EXISTS (SELECT NULL FROM shipment s JOIN package kg ON s.shipmentid = kg.shipment WHERE s.planet = p.planetid GROUP BY s.planet HAVING SUM(kg.weight) > 30)",
        "SELECT p.name FROM planet p INNER JOIN shipment s ON p.planetid = s.planet INNER JOIN package pk ON s.shipmentid = pk.shipment GROUP BY p.name HAVING SUM(pk.weight) > 30"
      ]
    ]
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "nlq": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
    "infer_predictions": [
      [
        "SELECT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8' AND c.name = 'Zapp Brannigan'",
        "SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8'))",
        "SELECT p.packagenumber FROM package p, client c, shipment s, planet pl WHERE p.sender = c.accountnumber AND p.shipment = s.shipmentid AND s.planet = pl.planetid AND c.name = 'Zapp Brannigan' AND pl.name = 'Omicron Persei 8'",
        "SELECT packagenumber FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND shipment IN (SELECT s.shipmentid FROM shipment s INNER JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8')",
        "SELECT p.packagenumber FROM package p INNER JOIN client c ON p.sender = c.accountnumber INNER JOIN shipment s ON p.shipment = s.shipmentid INNER JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8' AND c.name = 'Zapp Brannigan'",
        "SELECT DISTINCT p.packagenumber FROM package p WHERE p.sender = (SELECT c.accountnumber FROM client c WHERE c.name = 'Zapp Brannigan') AND p.shipment IN (SELECT s.shipmentid FROM shipment s JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8')",
        "SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND EXISTS (SELECT * FROM shipment JOIN planet ON planet.planetid = shipment.planet WHERE package.shipment = shipment.shipmentid AND planet.name = 'Omicron Persei 8')",
        "SELECT DISTINCT p.packagenumber FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Zapp Brannigan' AND EXISTS (SELECT 1 FROM shipment s JOIN planet pl ON s.planet = pl.planetid WHERE s.shipmentid = p.shipment AND pl.name = 'Omicron Persei 8')",
        "SELECT p.packagenumber FROM package p INNER JOIN client c ON c.accountnumber = p.sender INNER JOIN shipment s ON s.shipmentid = p.shipment INNER JOIN planet pl ON pl.planetid = s.planet WHERE c.name = 'Zapp Brannigan' AND pl.name = 'Omicron Persei 8'",
        "SELECT packagenumber FROM package WHERE (sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')) AND shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8'))"
      ]
    ]
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "nlq": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
    "infer_predictions": [
      [
        "SELECT COUNT(p.packagenumber) FROM package p JOIN client c ON p.sender = c.accountnumber JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid WHERE c.name = 'Zapp Brannigan' AND pl.name = 'Omicron Persei 8'",
        "SELECT COUNT(*) FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8'))",
        "SELECT COUNT(DISTINCT packagenumber) FROM package AS p JOIN client AS c ON p.sender = c.accountnumber JOIN shipment AS s ON p.shipment = s.shipmentid WHERE c.name = 'Zapp Brannigan' AND s.planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')",
        "SELECT COUNT(p.packagenumber) FROM package p, client c, shipment s, planet pl WHERE p.sender = c.accountnumber AND p.shipment = s.shipmentid AND s.planet = pl.planetid AND c.name = 'Zapp Brannigan' AND pl.name = 'Omicron Persei 8'",
        "SELECT COUNT(1) FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8'))",
        "SELECT COUNT(package.packagenumber) FROM package INNER JOIN client ON package.sender = client.accountnumber INNER JOIN shipment ON package.shipment = shipment.shipmentid INNER JOIN planet ON shipment.planet = planet.planetid WHERE client.name = 'Zapp Brannigan' AND planet.name = 'Omicron Persei 8'",
        "SELECT COUNT(*) FROM package p WHERE EXISTS (SELECT 1 FROM client c WHERE p.sender = c.accountnumber AND c.name = 'Zapp Brannigan') AND EXISTS (SELECT 1 FROM shipment s JOIN planet pl ON s.planet = pl.planetid WHERE p.shipment = s.shipmentid AND pl.name = 'Omicron Persei 8')",
        "SELECT COUNT(p.packagenumber) FROM package p, shipment s WHERE p.sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan') AND p.shipment = s.shipmentid AND s.planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')",
        "SELECT COUNT(p.packagenumber) FROM package p JOIN client c ON p.sender = c.accountnumber JOIN shipment s ON p.shipment = s.shipmentid WHERE c.name = 'Zapp Brannigan' AND s.planet IN (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')",
        "SELECT COUNT(DISTINCT p.packagenumber) FROM package AS p INNER JOIN client AS c ON p.sender = c.accountnumber INNER JOIN shipment AS s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid WHERE c.name = 'Zapp Brannigan' AND pl.name = 'Omicron Persei 8'"
      ]
    ]
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "nlq": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
    "infer_predictions": [
      [
        "SELECT DISTINCT p.packageNumber FROM package p JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid JOIN client c ON p.sender = c.accountnumber WHERE pl.name = 'Omicron Persei 8' OR c.name = 'Zapp Brannigan'",
        "SELECT p.packageNumber FROM package p, shipment s, planet pl, client c WHERE p.shipment = s.shipmentid AND s.planet = pl.planetid AND p.sender = c.accountnumber AND (pl.name = 'Omicron Persei 8' OR c.name = 'Zapp Brannigan')",
        "SELECT p.packageNumber FROM package AS p INNER JOIN shipment AS s ON p.shipment = s.shipmentid INNER JOIN planet AS pl ON s.planet = pl.planetid LEFT JOIN client AS c ON p.sender = c.accountnumber WHERE pl.name = 'Omicron Persei 8' OR c.name = 'Zapp Brannigan'",
        "SELECT DISTINCT pkg.packageNumber FROM package pkg WHERE EXISTS (SELECT 1 FROM shipment sh JOIN planet pl ON sh.planet = pl.planetid WHERE pkg.shipment = sh.shipmentid AND pl.name = 'Omicron Persei 8') OR EXISTS (SELECT 1 FROM client cl WHERE cl.accountnumber = pkg.sender AND cl.name = 'Zapp Brannigan')",
        "SELECT DISTINCT packageNumber FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) OR sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')",
        "SELECT DISTINCT p.packageNumber FROM package p WHERE p.shipment IN (SELECT s.shipmentid FROM shipment s JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8') OR p.sender IN (SELECT c.accountnumber FROM client c WHERE c.name = 'Zapp Brannigan')",
        "SELECT p.packageNumber FROM package p JOIN client c ON p.sender = c.accountnumber JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8' UNION SELECT p.packageNumber FROM package p JOIN client c ON p.sender = c.accountnumber WHERE c.name = 'Zapp Brannigan'",
        "SELECT package.packageNumber FROM package INNER JOIN shipment ON package.shipment = shipment.shipmentid INNER JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Omicron Persei 8' UNION SELECT package.packageNumber FROM package INNER JOIN client ON package.sender = client.accountnumber WHERE client.name = 'Zapp Brannigan'",
        "SELECT p.packageNumber FROM package p WHERE EXISTS (SELECT sh.shipmentid FROM shipment sh JOIN planet pl ON sh.planet = pl.planetid WHERE p.shipment = sh.shipmentid AND pl.name = 'Omicron Persei 8') UNION SELECT p.packageNumber FROM package p WHERE EXISTS (SELECT cl.accountnumber FROM client cl WHERE p.sender = cl.accountnumber AND cl.name = 'Zapp Brannigan')",
        "SELECT pkg.packageNumber FROM package AS pkg INNER JOIN shipment AS ship ON pkg.shipment = ship.shipmentid INNER JOIN planet AS pl ON ship.planet = pl.planetid WHERE pl.name = 'Omicron Persei 8' UNION SELECT pkg.packageNumber FROM package AS pkg INNER JOIN client AS cl ON pkg.sender = cl.accountnumber WHERE cl.name = 'Zapp Brannigan'"
      ]
    ]
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "nlq": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) OR sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')",
        "SELECT COUNT(DISTINCT p.packagenumber) FROM package p JOIN shipment s ON p.shipment = s.shipmentid JOIN planet pl ON s.planet = pl.planetid JOIN client c ON p.sender = c.accountnumber WHERE pl.name = 'Omicron Persei 8' OR c.name = 'Zapp Brannigan'",
        "SELECT COUNT(packagenumber) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment JOIN planet ON planet.planetid = shipment.planet WHERE name = 'Omicron Persei 8') OR sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')",
        "SELECT COUNT(*) FROM (SELECT packagenumber FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Omicron Persei 8' UNION SELECT packagenumber FROM package WHERE sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan'))",
        "SELECT COUNT(*) FROM package JOIN shipment ON package.shipment = shipment.shipmentid JOIN planet ON shipment.planet = planet.planetid WHERE planet.name = 'Omicron Persei 8' OR package.sender = (SELECT accountnumber FROM client WHERE client.name = 'Zapp Brannigan')",
        "SELECT COUNT(packagenumber) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) UNION ALL SELECT COUNT(packagenumber) FROM package WHERE sender IN (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')",
        "SELECT COUNT(*) FROM package p WHERE EXISTS (SELECT 1 FROM shipment WHERE shipmentid = p.shipment AND planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) OR p.sender = (SELECT accountnumber FROM client WHERE name = 'Zapp Brannigan')",
        "SELECT COUNT(*) FROM package WHERE shipment IN (SELECT shipmentid FROM shipment INNER JOIN planet ON planet.planetid = shipment.planet WHERE name = 'Omicron Persei 8') OR sender = (SELECT accountnumber FROM client WHERE client.name = 'Zapp Brannigan')",
        "SELECT COUNT(DISTINCT package.packagenumber) FROM package WHERE EXISTS (SELECT 1 FROM shipment WHERE shipment.shipmentid = package.shipment AND shipment.planet = (SELECT planetid FROM planet WHERE name = 'Omicron Persei 8')) OR EXISTS (SELECT 1 FROM client WHERE client.accountnumber = package.sender AND client.name = 'Zapp Brannigan')",
        "SELECT COUNT(1) AS TotalPackages FROM package WHERE package.shipment IN (SELECT shipment.shipmentid FROM shipment JOIN planet ON planet.planetid = shipment.planet AND planet.name = 'Omicron Persei 8') OR package.sender = (SELECT client.accountnumber FROM client WHERE client.name = 'Zapp Brannigan')"
      ]
    ]
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "nlq": "Which packages have weight between 10 and 30? List the package number and weight.",
    "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
    "infer_predictions": [
      [
        "SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30",
        "SELECT p.packagenumber, p.weight FROM package p WHERE p.weight > 10 AND p.weight < 30",
        "SELECT packagenumber, weight FROM package WHERE weight >= 10 AND weight <= 30",
        "SELECT packagenumber, weight FROM package WHERE package.weight > 10 AND package.weight < 30",
        "SELECT packagenumber as PackageNumber, weight as PackageWeight FROM package WHERE weight BETWEEN 10 AND 30",
        "SELECT packagenumber, weight FROM package WHERE weight > 10 AND weight <= 30",
        "SELECT p.packagenumber, p.weight FROM package p WHERE p.weight BETWEEN 10 AND 30"
      ]
    ]
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "nlq": "What are the package numbers and weights that are between 10 and 30?",
    "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
    "infer_predictions": [
      [
        "SELECT packagenumber, weight FROM package WHERE weight BETWEEN 10 AND 30",
        "SELECT pkg.packagenumber, pkg.weight FROM package AS pkg WHERE pkg.weight > 10 AND pkg.weight < 30",
        "SELECT package.packagenumber, package.weight FROM package WHERE package.weight >= 10 AND package.weight <= 30",
        "SELECT P.packagenumber, P.weight FROM package P WHERE P.weight > 9 AND P.weight < 31",
        "SELECT packagenumber, weight FROM package WHERE weight IN (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)",
        "SELECT P.packagenumber, P.weight FROM package P WHERE (10 <= P.weight AND P.weight <= 30)",
        "SELECT packagenumber, weight FROM package WHERE STRFTIME('%d', weight) BETWEEN '10' AND '30'"
      ]
    ]
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "nlq": "Which employees do not have clearance in Mars? List employee's name.",
    "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "infer_predictions": [
      [
        "SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT DISTINCT e.name FROM employee e LEFT JOIN has_clearance h ON e.employeeid = h.employee AND h.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE h.planet IS NULL",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT h.employee FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT DISTINCT name FROM employee EXCEPT SELECT DISTINCT e.name FROM employee e INNER JOIN has_clearance h ON h.employee = e.employeeid INNER JOIN planet p ON p.planetid = h.planet WHERE p.name = 'Mars'",
        "SELECT e.name FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h, planet p WHERE h.planet = p.planetid AND p.name = 'Mars')",
        "SELECT e.name FROM employee e LEFT OUTER JOIN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars') AS m ON e.employeeid = m.employee WHERE m.employee IS NULL",
        "SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT NULL FROM has_clearance h, planet p WHERE h.employee = e.employeeid AND h.planet = p.planetid AND p.name = 'Mars')",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = 'Mars')",
        "SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT h.employee FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE e.employeeid = h.employee AND p.name = 'Mars')"
      ]
    ]
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "nlq": "What are the names of all employees who don't have clearance on Mars?",
    "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "infer_predictions": [
      [
        "SELECT e.name FROM employee e WHERE NOT EXISTS (SELECT 1 FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE h.employee = e.employeeid AND p.name = 'Mars')",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT e.name FROM employee e LEFT JOIN has_clearance h ON e.employeeid = h.employee LEFT JOIN planet p ON h.planet = p.planetid WHERE p.name != 'Mars' OR p.name IS NULL",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT employee.name FROM employee LEFT OUTER JOIN (SELECT employee FROM has_clearance, planet WHERE has_clearance.planet = planet.planetid AND planet.name = 'Mars') as no_mars ON employee.employeeid = no_mars.employee WHERE no_mars.employee IS NULL",
        "SELECT name FROM employee EXCEPT SELECT e.name FROM employee e JOIN has_clearance h ON e.employeeid = h.employee JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars'",
        "SELECT e.name FROM employee e WHERE e.employeeid NOT IN (SELECT distinct employee FROM has_clearance JOIN planet ON planetid = planet WHERE name = 'Mars')",
        "SELECT name FROM employee WHERE NOT EXISTS (SELECT employee FROM has_clearance JOIN planet ON planetid = planet WHERE employeeid = employee AND name = 'Mars')",
        "SELECT e.name FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h WHERE EXISTS (SELECT 1 FROM planet p WHERE p.planetid = h.planet AND p.name = 'Mars'))",
        "SELECT name FROM employee WHERE employeeid NOT IN (SELECT h.employee FROM has_clearance h INNER JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')"
      ]
    ]
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "nlq": "Which employees have clearance in Omega III? List employees' name.",
    "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
    "infer_predictions": [
      [
        "SELECT e.name FROM employee e JOIN has_clearance hc ON e.employeeid = hc.employee JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Omega III'",
        "SELECT name FROM employee WHERE employeeid IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Omega III'))",
        "SELECT emp.name FROM employee emp INNER JOIN has_clearance clr ON emp.employeeid = clr.employee INNER JOIN planet pl ON clr.planet = pl.planetid AND pl.name = 'Omega III'",
        "SELECT DISTINCT e.name FROM employee e, has_clearance hc, planet p WHERE e.employeeid = hc.employee AND hc.planet = p.planetid AND p.name = 'Omega III'",
        "SELECT e.name FROM employee e WHERE EXISTS (SELECT 1 FROM has_clearance hc JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Omega III' AND hc.employee = e.employeeid)",
        "SELECT name FROM employee AS e WHERE employeeid IN (SELECT employee FROM has_clearance AS hc JOIN planet AS p ON hc.planet = p.planetid WHERE p.name = 'Omega III')",
        "SELECT E.name FROM employee E, has_clearance H, planet P WHERE E.employeeid = H.employee AND H.planet = P.planetid AND P.name = 'Omega III'",
        "SELECT e.name FROM employee e WHERE e.employeeid IN (SELECT hc.employee FROM has_clearance hc WHERE hc.planet IN (SELECT p.planetid FROM planet p WHERE p.name = 'Omega III'))",
        "SELECT employee.name FROM employee JOIN has_clearance ON employee.employeeid = has_clearance.employee JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = 'Omega III'",
        "SELECT e.name FROM employee e INNER JOIN has_clearance hc ON e.employeeid = hc.employee INNER JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Omega III'"
      ]
    ]
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "nlq": "What are the names of all employees with clearance on Omega III?",
    "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
    "infer_predictions": [
      [
        "SELECT e.name FROM employee e JOIN has_clearance h ON e.employeeid = h.employee JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Omega III'",
        "SELECT name FROM employee WHERE employeeid IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Omega III'))",
        "SELECT emp.name FROM employee emp, has_clearance clr, planet pl WHERE emp.employeeid = clr.employee AND clr.planet = pl.planetid AND pl.name = 'Omega III'",
        "SELECT e.name FROM employee e, planet p, has_clearance h WHERE e.employeeid = h.employee AND h.planet = p.planetid AND p.name = 'Omega III'",
        "SELECT DISTINCT e.name FROM employee e INNER JOIN has_clearance h ON e.employeeid = h.employee INNER JOIN planet p ON p.planetid = h.planet WHERE p.name = 'Omega III'",
        "SELECT e.name FROM employee e WHERE EXISTS (SELECT 1 FROM has_clearance h JOIN planet p ON p.planetid = h.planet WHERE h.employee = e.employeeid AND p.name = 'Omega III')",
        "SELECT e.name FROM employee e WHERE e.employeeid IN (SELECT hc.employee FROM has_clearance hc JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Omega III')",
        "SELECT name FROM employee WHERE employeeid IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Omega III'))",
        "SELECT e.name FROM employee e JOIN has_clearance h ON e.employeeid = h.employee WHERE h.planet IN (SELECT p.planetid FROM planet p WHERE p.name = 'Omega III')",
        "SELECT e.name FROM employee e WHERE EXISTS (SELECT * FROM has_clearance h, planet p WHERE h.employee = e.employeeid AND h.planet = p.planetid AND p.name = 'Omega III')"
      ]
    ]
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "nlq": "Which planets that have exact one employee has clearance? List planets' name.",
    "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p WHERE (SELECT COUNT(*) FROM has_clearance hc WHERE hc.planet = p.planetid) = 1",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(employee) = 1)",
        "SELECT p.name FROM planet p JOIN has_clearance hc ON hc.planet = p.planetid GROUP BY p.planetid HAVING COUNT(hc.employee) = 1",
        "SELECT p.name FROM planet p WHERE 1 = (SELECT COUNT(DISTINCT hc.employee) FROM has_clearance hc WHERE hc.planet = p.planetid)",
        "SELECT p.name FROM planet p WHERE EXISTS (SELECT 1 FROM has_clearance hc WHERE hc.planet = p.planetid GROUP BY hc.planet HAVING COUNT(*) = 1)",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(DISTINCT employee) = 1)",
        "SELECT name FROM planet WHERE (SELECT COUNT(hc.employee) FROM has_clearance hc WHERE hc.planet = planetid GROUP BY hc.planet) = 1",
        "SELECT name FROM planet AS p WHERE (SELECT COUNT(*) FROM has_clearance WHERE planet = p.planetid GROUP BY planet) = 1",
        "SELECT p.name FROM planet p INNER JOIN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(DISTINCT employee) = 1) as hc ON p.planetid = hc.planet"
      ]
    ]
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "nlq": "What are the names of all planets with one employee that has clearance?",
    "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
    "infer_predictions": [
      [
        "SELECT p.name FROM planet p WHERE 1 = (SELECT COUNT(*) FROM has_clearance h WHERE h.planet = p.planetid GROUP BY h.planet)",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(employee) = 1)",
        "SELECT p.name FROM planet p WHERE EXISTS (SELECT 1 FROM has_clearance h WHERE h.planet = p.planetid GROUP BY h.planet HAVING COUNT(h.employee) = 1)",
        "SELECT p.name FROM planet p JOIN has_clearance h ON p.planetid = h.planet GROUP BY h.planet HAVING COUNT(DISTINCT h.employee) = 1",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(DISTINCT employee) = 1)",
        "SELECT p.name FROM planet p WHERE (SELECT COUNT(DISTINCT employee) FROM has_clearance WHERE planet = p.planetid) = 1",
        "SELECT p.name FROM planet p JOIN (SELECT planet, COUNT(employee) as emp_count FROM has_clearance GROUP BY planet HAVING emp_count = 1) t ON p.planetid = t.planet",
        "SELECT name FROM planet WHERE planetid IN (SELECT planet FROM has_clearance GROUP BY planet HAVING COUNT(*) = 1)",
        "SELECT p.name FROM planet p WHERE EXISTS (SELECT planet FROM has_clearance h WHERE p.planetid = h.planet GROUP BY h.planet HAVING COUNT(*) = 1)",
        "SELECT p.name FROM planet p WHERE (SELECT COUNT(*) FROM has_clearance h WHERE h.planet = p.planetid GROUP BY h.planet) = 1"
      ]
    ]
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "nlq": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
    "infer_predictions": [
      [
        "SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000;",
        "SELECT e.name FROM employee e WHERE e.salary >= 5000 AND e.salary <= 10000;",
        "SELECT name FROM employee WHERE salary > 4999 AND salary < 10001;",
        "SELECT e.name FROM employee e WHERE e.salary BETWEEN 5000 AND 10000;",
        "SELECT e.name FROM employee e WHERE e.salary > 4999 AND e.salary < 10001;",
        "SELECT name FROM employee WHERE salary >= 5000 AND salary <= 10000;",
        "SELECT Emp.name FROM employee Emp WHERE Emp.salary BETWEEN 5000 AND 10000;"
      ]
    ]
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "nlq": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
    "infer_predictions": [
      [
        "SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000",
        "SELECT e.name FROM employee e WHERE e.salary >= 5000 AND e.salary <= 10000",
        "SELECT employee.name FROM employee WHERE employee.salary > 4999 AND employee.salary < 10001",
        "SELECT name FROM employee WHERE (salary >= 5000) AND (salary <= 10000)",
        "SELECT e.name FROM employee AS e WHERE (e.salary > 4999) AND (e.salary < 10001)",
        "SELECT employee.name FROM employee WHERE employee.salary >= 5000 AND employee.salary <= 10000",
        "SELECT employee.name FROM employee WHERE (salary BETWEEN 5000 AND 10000)"
      ]
    ]
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "nlq": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
    "infer_predictions": [
      [
        "SELECT name FROM employee WHERE salary > 5000 OR salary > (SELECT AVG(salary) FROM employee)",
        "SELECT E.name FROM employee E WHERE E.salary > 5000 OR E.salary > (SELECT AVG(salary) FROM employee)",
        "SELECT E.name FROM employee E WHERE E.salary > (SELECT AVG(E2.salary) FROM employee E2) OR E.salary > 5000",
        "SELECT DISTINCT E.name FROM employee E WHERE E.salary > 5000 OR E.salary > (SELECT AVG(salary) FROM employee)",
        "SELECT name FROM employee WHERE salary > 5000 UNION SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)",
        "SELECT E.name FROM employee E WHERE (SELECT AVG(salary) FROM employee) < E.salary OR E.salary > 5000",
        "SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee UNION SELECT 5000 AS salary)",
        "SELECT DISTINCT name FROM employee WHERE salary > 5000 OR salary > (SELECT AVG(S.salary) FROM employee S)"
      ]
    ]
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "nlq": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
    "infer_predictions": [
      [
        "SELECT name FROM employee WHERE salary > 5000 OR salary > (SELECT AVG(salary) FROM employee)",
        "SELECT e.name FROM employee e WHERE e.salary > 5000 OR e.salary > (SELECT AVG(salary) FROM employee)",
        "SELECT name FROM employee WHERE salary > 5000 OR salary > (SELECT AVG(salary) FROM employee e2)",
        "SELECT DISTINCT e.name FROM employee e WHERE e.salary > 5000 OR e.salary > (SELECT AVG(salary) FROM employee e2 WHERE e2.name != e.name)",
        "SELECT emp.name FROM employee emp WHERE emp.salary > 5000 OR emp.salary > (SELECT AVG(salary) FROM employee emp2)",
        "SELECT name FROM employee WHERE salary > (SELECT MAX(5000, AVG(salary)) FROM employee)",
        "SELECT e.name FROM employee e WHERE e.salary > (SELECT MAX(5000, AVG(e2.salary)) FROM employee e2)",
        "SELECT name FROM employee WHERE salary > 5000 UNION SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)",
        "SELECT emp.name FROM employee emp WHERE emp.salary > 5000 UNION SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee)"
      ]
    ]
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "nlq": "Find the number of employees who do not have clearance in Mars .",
    "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT e.employeeid) FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT COUNT(*) FROM (SELECT employeeid FROM employee EXCEPT SELECT hc.employee FROM has_clearance hc JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT COUNT(e.employeeid) FROM employee e LEFT JOIN (SELECT employee FROM has_clearance JOIN planet ON has_clearance.planet = planet.planetid WHERE planet.name = 'Mars') m ON e.employeeid = m.employee WHERE m.employee IS NULL",
        "SELECT COUNT(*) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT COUNT(*) FROM employee e WHERE NOT EXISTS (SELECT NULL FROM has_clearance hc JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Mars' AND hc.employee = e.employeeid)",
        "SELECT COUNT(DISTINCT e.employeeid) FROM employee e LEFT OUTER JOIN has_clearance hc ON e.employeeid = hc.employee WHERE hc.employee IS NULL OR hc.planet NOT IN (SELECT planetid FROM planet WHERE name = 'Mars') GROUP BY e.employeeid;",
        "SELECT COUNT(employeeid) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance hc JOIN planet p ON p.planetid = hc.planet WHERE p.name = 'Mars')",
        "SELECT COUNT(*) FROM employee e WHERE e.employeeid NOT IN (SELECT hc.employee FROM has_clearance hc, planet p WHERE hc.planet = p.planetid AND p.name = 'Mars')",
        "SELECT COUNT(DISTINCT e.employeeid) FROM employee e LEFT JOIN has_clearance hc ON e.employeeid = hc.employee AND hc.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE hc.employee IS NULL;",
        "SELECT COUNT(DISTINCT e.employeeid) FROM employee e WHERE e.employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'))"
      ]
    ]
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "nlq": "What is the number of employees that do not have clearance on Mars ?",
    "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT COUNT(employeeid) FROM employee WHERE NOT EXISTS (SELECT 1 FROM has_clearance JOIN planet ON has_clearance.planet = planet.planetid WHERE has_clearance.employee = employee.employeeid AND planet.name = 'Mars')",
        "SELECT COUNT(DISTINCT employee.employeeid) FROM employee LEFT JOIN has_clearance ON employee.employeeid = has_clearance.employee AND has_clearance.planet = (SELECT planetid FROM planet WHERE name = 'Mars') WHERE has_clearance.employee IS NULL",
        "SELECT COUNT(e.employeeid) FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h JOIN planet p ON h.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT COUNT(*) FROM employee e WHERE e.employeeid NOT IN (SELECT h.employee FROM has_clearance h WHERE h.planet = (SELECT p.planetid FROM planet p WHERE p.name = 'Mars'))",
        "SELECT COUNT(*) FROM employee WHERE employeeid NOT IN (SELECT hc.employee FROM has_clearance hc INNER JOIN planet p ON hc.planet = p.planetid WHERE p.name = 'Mars')",
        "SELECT COUNT(*) FROM employee EXCEPT SELECT COUNT(*) FROM employee WHERE EXISTS (SELECT 1 FROM has_clearance WHERE has_clearance.employee = employee.employeeid AND has_clearance.planet = (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT (SELECT COUNT(*) FROM employee) - (SELECT COUNT(distinct employee) FROM has_clearance WHERE planet = (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT COUNT(1) FROM employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet IN (SELECT planetid FROM planet WHERE name = 'Mars'))",
        "SELECT COUNT(employee.employeeid) - COUNT(distinct has_clearance.employee) FROM employee LEFT JOIN has_clearance ON employee.employeeid = has_clearance.employee AND has_clearance.planet = (SELECT planetid FROM planet WHERE name = 'Mars')"
      ]
    ]
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "nlq": "How many games are there?",
    "gold": "SELECT count(*) FROM game",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM game",
        "SELECT COUNT(*) AS TotalGames FROM game",
        "SELECT COUNT(game_id) FROM game",
        "SELECT COUNT(game_id) AS NumberOfGames FROM game",
        "SELECT COUNT(1) FROM game",
        "SELECT COUNT(DISTINCT game_id) AS UniqueGames FROM game",
        "SELECT C FROM (SELECT COUNT(*) AS C FROM game)",
        "SELECT COUNT_ALL FROM (SELECT COUNT(*) AS COUNT_ALL FROM game)",
        "SELECT GameCount FROM (SELECT COUNT(*) AS GameCount FROM game)"
      ]
    ]
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "nlq": "Count the number of games.",
    "gold": "SELECT count(*) FROM game",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM game;",
        "SELECT COUNT(game_id) FROM game;",
        "SELECT COUNT(1) FROM game;",
        "SELECT * FROM (SELECT COUNT(*) FROM game);",
        "SELECT game_id FROM game GROUP BY game_id HAVING COUNT(game_id);",
        "SELECT COUNT(*) as total_games FROM game;",
        "SELECT COUNT(game.game_id) as TotalCount FROM game;",
        "SELECT game_id, COUNT(*) FROM game GROUP BY game_id;"
      ]
    ]
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "nlq": "List the Title and Developers of all games ordered by units sold from large to small.",
    "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
    "infer_predictions": [
      [
        "SELECT title, developers FROM game ORDER BY units_sold_millions DESC",
        "SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC",
        "SELECT title, developers FROM game WHERE units_sold_millions IS NOT NULL ORDER BY units_sold_millions DESC",
        "SELECT g.title AS Title, g.developers AS Developers FROM game g ORDER BY g.units_sold_millions DESC",
        "SELECT title, developers FROM game ORDER BY units_sold_millions DESC, title ASC",
        "SELECT game.title AS GameTitle, game.developers AS GameDevelopers FROM game ORDER BY game.units_sold_millions DESC"
      ]
    ]
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "nlq": "What are the titles and developers of all games, sorted by units sold descending?",
    "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
    "infer_predictions": [
      [
        "SELECT title, developers FROM game ORDER BY units_sold_millions DESC",
        "SELECT g.title, g.developers FROM game g ORDER BY g.units_sold_millions DESC",
        "SELECT title, developers FROM game ORDER BY units_sold_millions DESC, game_id ASC",
        "SELECT title AS 'Game Title', developers AS 'Game Developer' FROM game ORDER BY units_sold_millions DESC"
      ]
    ]
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "nlq": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
    "infer_predictions": [
      [
        "SELECT AVG(units_sold_millions) FROM game WHERE developers != 'Nintendo'",
        "SELECT AVG(g.units_sold_millions) FROM game g WHERE g.developers <> 'Nintendo'",
        "SELECT AVG(unit_sales) FROM (SELECT units_sold_millions AS unit_sales FROM game WHERE developers NOT IN ('Nintendo'))",
        "SELECT AVG(sales) FROM game, (SELECT AVG(units_sold_millions) AS sales FROM game WHERE developers != 'Nintendo') AS subquery",
        "SELECT AVG(sales) FROM (SELECT game.units_sold_millions AS sales FROM game WHERE game.developers <> 'Nintendo')",
        "SELECT AVG(units_sold_millions) FROM game WHERE NOT (developers = 'Nintendo')",
        "SELECT (SUM(units_sold_millions) / COUNT(game_id)) AS AvgUnitsSold FROM game WHERE developers NOT LIKE 'Nintendo'",
        "SELECT AVG(g.units_sold_millions) FROM game AS g WHERE NOT EXISTS (SELECT 1 FROM game AS sub WHERE sub.developers = 'Nintendo' AND sub.game_id = g.game_id)",
        "SELECT ROUND(AVG(units_sold_millions), 2) FROM game WHERE developers != 'Nintendo'",
        "SELECT AVG(units_sold) AS AverageSales FROM (SELECT units_sold_millions AS units_sold FROM game WHERE developers != 'Nintendo') AS avgQuery"
      ]
    ]
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "nlq": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
    "infer_predictions": [
      [
        "SELECT AVG(units_sold_millions) FROM game WHERE developers <> 'Nintendo'",
        "SELECT AVG(g.units_sold_millions) AS average_units FROM game g WHERE g.developers NOT LIKE 'Nintendo'",
        "SELECT AVG(units) FROM (SELECT units_sold_millions AS units FROM game WHERE developers != 'Nintendo')",
        "SELECT AVG(units_sold_millions) AS avg_sales FROM game WHERE developers NOT IN ('Nintendo')",
        "SELECT AVG(units_sold_millions) FROM game WHERE NOT (developers = 'Nintendo')",
        "SELECT AVG(units_sold_millions) FROM game WHERE developers NOT GLOB '*Nintendo*'",
        "SELECT AVG(units_sold) FROM (SELECT units_sold_millions as units_sold FROM game WHERE developers NOT LIKE 'Nintendo')",
        "SELECT AVG(game.units_sold_millions) FROM game WHERE game.developers <> 'Nintendo'",
        "SELECT AVG(sales) FROM (SELECT units_sold_millions AS sales FROM game WHERE developers NOT LIKE 'Nint%')"
      ]
    ]
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "nlq": "What are the names and market districts of all platforms?",
    "gold": "SELECT Platform_name ,  Market_district FROM platform",
    "infer_predictions": [
      [
        "SELECT platform_name, market_district FROM platform",
        "SELECT * FROM (SELECT platform_name, market_district FROM platform)",
        "SELECT A.platform_name, A.market_district FROM platform A",
        "SELECT platform_name AS name, market_district AS district FROM platform",
        "SELECT B.platform_name, B.market_district FROM platform B",
        "SELECT SUB.PLATFORM_NAME, SUB.MARKET_DISTRICT FROM (SELECT PLATFORM_NAME, MARKET_DISTRICT FROM PLATFORM) AS SUB"
      ]
    ]
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "nlq": "Return all platform names and corresponding market districts.",
    "gold": "SELECT Platform_name ,  Market_district FROM platform",
    "infer_predictions": [
      [
        "SELECT platform_name, market_district FROM platform;",
        "SELECT p.platform_name, p.market_district FROM platform p;",
        "SELECT DISTINCT p.platform_name, p.market_district FROM platform p;",
        "SELECT platform_name AS Platform, market_district AS Market FROM platform;",
        "SELECT p.platform_name AS Platform, p.market_district AS Market FROM platform p;",
        "SELECT plat.platform_name, plat.market_district FROM platform plat;",
        "SELECT platform_name, market_district FROM platform ORDER BY platform_name;",
        "SELECT platform_name, market_district FROM platform WHERE platform_name IS NOT NULL;",
        "SELECT p.platform_name, p.market_district FROM platform AS p WHERE p.market_district IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "nlq": "What are the names and id of platforms whose download rank is 1?",
    "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
    "infer_predictions": [
      [
        "SELECT platform_id, platform_name FROM platform WHERE download_rank = 1;",
        "SELECT p.platform_id, p.platform_name FROM platform p WHERE p.download_rank = 1;",
        "SELECT platform_id as 'ID', platform_name as 'Name' FROM platform WHERE download_rank = 1;",
        "SELECT plat.platform_id, plat.platform_name FROM platform plat WHERE plat.download_rank = 1;",
        "SELECT platform_id, platform_name FROM platform WHERE download_rank = (SELECT MIN(download_rank) FROM platform);",
        "SELECT p.platform_id, p.platform_name FROM platform p WHERE p.download_rank = (1);",
        "SELECT * FROM (SELECT platform_id, platform_name FROM platform WHERE download_rank = 1);",
        "SELECT platform_id AS id, platform_name AS name FROM platform WHERE download_rank = 1;"
      ]
    ]
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "nlq": "Return the names and ids of all platforms with the download rank of 1.",
    "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
    "infer_predictions": [
      [
        "SELECT platform_name, platform_id FROM platform WHERE download_rank = 1;",
        "SELECT platform_name, platform_id FROM platform WHERE download_rank = 1 ORDER BY platform_id;",
        "SELECT platform_name, platform_id FROM platform WHERE download_rank = '1' GROUP BY platform_id;",
        "SELECT platform_name, platform_id FROM platform WHERE download_rank = (SELECT MIN(download_rank) FROM platform);",
        "SELECT * FROM (SELECT platform_name, platform_id FROM platform WHERE download_rank = 1) AS ranked_one;",
        "SELECT platform_name AS name, platform_id AS id FROM platform WHERE download_rank = 1;",
        "SELECT pll.platform_name, pll.platform_id FROM platform pll WHERE pll.download_rank = 1;"
      ]
    ]
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "nlq": "What are the maximum and minimum rank of the year of players.",
    "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
    "infer_predictions": [
      [
        "SELECT MAX(rank_of_the_year) AS MaxRank, MIN(rank_of_the_year) AS MinRank FROM player",
        "SELECT MAX(p.rank_of_the_year), MIN(p.rank_of_the_year) FROM player p",
        "SELECT (SELECT MAX(rank_of_the_year) FROM player) AS MaximumRank, (SELECT MIN(rank_of_the_year) FROM player) AS MinimumRank",
        "SELECT (SELECT MAX(rank_of_the_year) FROM player) AS MaxRank, (SELECT MIN(rank_of_the_year) FROM player AS p) AS MinRank",
        "SELECT MAX(rank_of_the_year) FROM player UNION ALL SELECT MIN(rank_of_the_year) FROM player",
        "WITH Ranking AS (SELECT rank_of_the_year AS MaxRank, rank_of_the_year AS MinRank FROM player) SELECT MAX(MaxRank) AS MaxRank, MIN(MinRank) AS MinRank FROM Ranking",
        "SELECT MAX(rank_of_the_year) OVER () AS MaximumRank, MIN(rank_of_the_year) OVER () AS MinimumRank FROM player"
      ]
    ]
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "nlq": "Give the maximum and minimum rank of the year across all players.",
    "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
    "infer_predictions": [
      [
        "SELECT MAX(rank_of_the_year) AS max_rank, MIN(rank_of_the_year) AS min_rank FROM player",
        "SELECT MAX(p.rank_of_the_year) AS Maximum_Rank, MIN(p.rank_of_the_year) AS Minimum_Rank FROM player p",
        "SELECT MAX(rank_of_the_year) AS Highest_Rank_Year, MIN(rank_of_the_year) AS Lowest_Rank_Year FROM player",
        "SELECT (SELECT MAX(rank_of_the_year) FROM player) AS Max_Rank, (SELECT MIN(rank_of_the_year) FROM player) AS Min_Rank",
        "SELECT MAX(p.rank_of_the_year), MIN(p.rank_of_the_year) FROM player p",
        "SELECT MAXIMUM.rank AS Maximum_Rank, MINIMUM.rank AS Minimum_Rank FROM (SELECT MAX(rank_of_the_year) AS rank FROM player) AS MAXIMUM, (SELECT MIN(rank_of_the_year) AS rank FROM player) AS MINIMUM",
        "SELECT (SELECT MAX(rank_of_the_year) FROM player) AS max_rank, (SELECT MIN(rank_of_the_year) FROM player) AS min_rank",
        "WITH RankExtremes AS (SELECT MAX(rank_of_the_year) AS MaxRank, MIN(rank_of_the_year) AS MinRank FROM player) SELECT MaxRank, MinRank FROM RankExtremes",
        "SELECT M.MAX_Rank, M.MIN_Rank FROM (SELECT MAX(rank_of_the_year) AS MAX_Rank, MIN(rank_of_the_year) AS MIN_Rank FROM player) M"
      ]
    ]
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "nlq": "How many players have rank of the year smaller than 3?",
    "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT player_id) FROM player WHERE rank_of_the_year < 3",
        "SELECT COUNT(*) FROM (SELECT player_id FROM player WHERE rank_of_the_year < 3 GROUP BY player_id)",
        "SELECT COUNT(DISTINCT p.player_id) FROM player p WHERE p.rank_of_the_year < 3",
        "SELECT COUNT(player_id) AS Total FROM player WHERE rank_of_the_year < 3 GROUP BY player_id HAVING rank_of_the_year < 3",
        "SELECT COUNT(DISTINCT(p.player_id)) FROM player AS p WHERE p.rank_of_the_year < 3",
        "SELECT (SELECT COUNT(*) FROM player WHERE rank_of_the_year < 3) AS PlayerCount",
        "SELECT COUNT(1) FROM player WHERE rank_of_the_year < 3",
        "SELECT COUNT(player_id) FROM (SELECT DISTINCT player_id FROM player WHERE rank_of_the_year < 3) AS UniquePlayers",
        "SELECT COUNT(player_id) FROM (SELECT player_id FROM player WHERE rank_of_the_year < 3) tmp"
      ]
    ]
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "nlq": "Count the number of players that have a rank of year of at most 3.",
    "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT player.player_id) FROM player WHERE player.rank_of_the_year <= 3;",
        "SELECT COUNT(player.player_id) FROM player WHERE rank_of_the_year <= 3 GROUP BY player.player_id;",
        "SELECT COUNT(*) FROM (SELECT player_id FROM player WHERE rank_of_the_year <= 3);",
        "SELECT COUNT(DISTINCT p.player_id) FROM player p WHERE p.rank_of_the_year <= 3;",
        "SELECT COUNT(1) FROM player WHERE rank_of_the_year <= 3;",
        "SELECT SUM(1) FROM player WHERE rank_of_the_year < 4;",
        "SELECT COUNT(player.player_id) AS num_players FROM player WHERE player.rank_of_the_year <= 3;",
        "SELECT COUNT(player_id) FROM player WHERE rank_of_the_year <= 3 AND 1 = 1;",
        "SELECT COUNT(DISTINCT player_id) AS players_count FROM player WHERE rank_of_the_year <= 3;",
        "SELECT COUNT(DISTINCT player_id) FROM (SELECT * FROM player WHERE rank_of_the_year <= 3) AS subquery;"
      ]
    ]
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "nlq": "List all player names in ascending alphabetical order.",
    "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
    "infer_predictions": [
      [
        "SELECT player_name FROM player ORDER BY player_name ASC",
        "SELECT p.player_name FROM player p ORDER BY p.player_name",
        "SELECT player_name FROM player ORDER BY 1",
        "SELECT p.player_name FROM player p ORDER BY p.player_name ASC",
        "SELECT player_name AS pn FROM player ORDER BY pn ASC"
      ]
    ]
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "nlq": "What are the names of all players in alphabetical order?",
    "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
    "infer_predictions": [
      [
        "SELECT player_name FROM player ORDER BY player_name ASC;",
        "SELECT p.player_name FROM player p ORDER BY p.player_name ASC;",
        "SELECT DISTINCT p.player_name FROM player p ORDER BY p.player_name ASC;",
        "SELECT player_name FROM player GROUP BY player_name ORDER BY player_name ASC;",
        "SELECT p.player_name FROM player p ORDER BY player_name ASC;"
      ]
    ]
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "nlq": "List names and colleges of all players in descending order of rank of the year.",
    "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
    "infer_predictions": [
      [
        "SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC;",
        "SELECT player_name, college FROM player p ORDER BY p.rank_of_the_year DESC;",
        "SELECT pl.player_name, pl.college FROM player pl ORDER BY pl.rank_of_the_year DESC;",
        "SELECT player_name, college FROM (SELECT * FROM player) ORDER BY rank_of_the_year DESC;",
        "SELECT player_name, college FROM (SELECT player_name, college, rank_of_the_year FROM player) x ORDER BY x.rank_of_the_year DESC;"
      ]
    ]
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "nlq": "What are the names and colleges of all players, ordered by rank of year descending?",
    "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
    "infer_predictions": [
      [
        "SELECT player_name, college FROM player ORDER BY rank_of_the_year DESC",
        "SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC",
        "SELECT t1.player_name, t1.college FROM player t1 ORDER BY t1.rank_of_the_year DESC",
        "SELECT P1.player_name, P1.college FROM player P1 ORDER BY rank_of_the_year DESC",
        "SELECT PD.player_name, PD.college FROM (SELECT * FROM player) AS PD ORDER BY PD.rank_of_the_year DESC"
      ]
    ]
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "nlq": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
    "infer_predictions": [
      [
        "SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title = 'Super Mario World'",
        "SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT player_id FROM game_player WHERE game_id IN (SELECT game_id FROM game WHERE title = 'Super Mario World'))",
        "SELECT p.player_name, p.rank_of_the_year FROM player p, game_player gp, game g WHERE p.player_id = gp.player_id AND gp.game_id = g.game_id AND g.title = 'Super Mario World'",
        "SELECT DISTINCT p.player_name, p.rank_of_the_year FROM player p INNER JOIN game_player gp ON p.player_id = gp.player_id INNER JOIN game g ON g.game_id = gp.game_id WHERE g.title = 'Super Mario World'",
        "SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT gp.player_id FROM game_player gp JOIN game g ON gp.game_id = g.game_id WHERE g.title = 'Super Mario World')",
        "SELECT p.player_name, p.rank_of_the_year FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE g.title = 'Super Mario World'",
        "SELECT player.player_name, player.rank_of_the_year FROM player JOIN game_player ON player.player_id = game_player.player_id JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World'",
        "SELECT p.player_name, p.rank_of_the_year FROM player p JOIN (SELECT gp.player_id FROM game_player gp JOIN game g ON gp.game_id = g.game_id WHERE g.title = 'Super Mario World') v ON p.player_id = v.player_id",
        "SELECT player_name, rank_of_the_year FROM player INNER JOIN game_player ON player.player_id = game_player.player_id INNER JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World'"
      ]
    ]
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "nlq": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
    "infer_predictions": [
      [
        "SELECT p.player_name, p.rank_of_the_year FROM player p JOIN game_player gp ON p.player_id = gp.player_id JOIN game g ON gp.game_id = g.game_id WHERE g.title = 'Super Mario World';",
        "SELECT player_name, rank_of_the_year FROM player WHERE player_id IN (SELECT game_player.player_id FROM game_player JOIN game ON game_player.game_id = game.game_id WHERE game.title = 'Super Mario World');",
        "SELECT p.player_name, p.rank_of_the_year FROM player AS p INNER JOIN game_player AS gp ON gp.player_id = p.player_id INNER JOIN game AS g ON g.game_id = gp.game_id WHERE g.title = 'Super Mario World';",
        "SELECT p.player_name, p.rank_of_the_year FROM player p WHERE EXISTS (SELECT 1 FROM game_player gp JOIN game g ON g.game_id = gp.game_id WHERE gp.player_id = p.player_id AND g.title = 'Super Mario World');",
        "SELECT p.player_name, p.rank_of_the_year FROM player p, game_player gp, game g WHERE p.player_id = gp.player_id AND gp.game_id = g.game_id AND g.title = 'Super Mario World';",
        "SELECT DISTINCT p.player_name, p.rank_of_the_year FROM player AS p JOIN game_player AS gp ON p.player_id = gp.player_id JOIN game AS g ON gp.game_id = g.game_id WHERE g.title = 'Super Mario World';",
        "SELECT p.player_name, p.rank_of_the_year FROM player p JOIN (SELECT player_id FROM game_player WHERE game_id IN (SELECT game_id FROM game WHERE title = 'Super Mario World')) AS gp ON p.player_id = gp.player_id;",
        "SELECT player.player_name, player.rank_of_the_year FROM player NATURAL JOIN (SELECT player_id FROM game_player NATURAL JOIN game WHERE title = 'Super Mario World') AS Temp;"
      ]
    ]
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "nlq": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Auburn'",
        "SELECT DISTINCT developers FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn'))",
        "SELECT DISTINCT game.developers FROM game INNER JOIN game_player ON game.game_id = game_player.game_id INNER JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn'",
        "SELECT DISTINCT developers FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON player.player_id = game_player.player_id WHERE player.college = 'Auburn'",
        "SELECT DISTINCT dev FROM (SELECT developers as dev FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn')))",
        "SELECT DISTINCT g.developers FROM game g, game_player gp, player p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND p.college = 'Auburn'",
        "SELECT DISTINCT developers FROM game WHERE EXISTS (SELECT 1 FROM game_player JOIN player ON game_player.player_id = player.player_id WHERE game_player.game_id = game.game_id AND player.college = 'Auburn')",
        "SELECT DISTINCT developers FROM game WHERE game_id IN (SELECT gp.game_id FROM game_player gp INNER JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Auburn')"
      ]
    ]
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "nlq": "What are the different developers of games that are played by players that attend Auburn college?",
    "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Auburn';",
        "SELECT DISTINCT developers FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn'));",
        "SELECT DISTINCT dev.developers FROM game dev WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player pl ON gp.player_id = pl.player_id WHERE pl.college = 'Auburn' AND gp.game_id = dev.game_id);",
        "SELECT DISTINCT developers FROM game WHERE game_id IN (SELECT game_id FROM game_player JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn');",
        "SELECT developers FROM (SELECT DISTINCT developers FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn') AS sub;",
        "SELECT DISTINCT dev.developers FROM game AS dev INNER JOIN game_player AS gp ON dev.game_id = gp.game_id INNER JOIN player AS p ON gp.player_id = p.player_id WHERE p.college = 'Auburn';",
        "SELECT DISTINCT g.developers FROM game g, game_player gp, player p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND p.college = 'Auburn';",
        "SELECT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Auburn' GROUP BY g.developers HAVING COUNT(*) > 0;",
        "WITH RelevantGames AS (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn')) SELECT DISTINCT developers FROM game WHERE game_id IN (SELECT game_id FROM RelevantGames);"
      ]
    ]
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "nlq": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "infer_predictions": [
      [
        "SELECT AVG(g.units_sold_millions) FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard'",
        "SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))",
        "SELECT AVG(units) FROM (SELECT g.units_sold_millions as units FROM game g INNER JOIN game_player gp ON g.game_id = gp.game_id INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT AVG(g.units_sold_millions) FROM player p, game_player gp, game g WHERE p.player_id = gp.player_id AND gp.game_id = g.game_id AND p.position = 'Guard'",
        "SELECT AVG(units_sold_millions) FROM game WHERE EXISTS (SELECT 1 FROM game_player JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard' AND game.game_id = game_player.game_id)",
        "SELECT AVG(g.units_sold_millions) FROM game g, game_player gp, player p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND p.position = 'Guard'",
        "SELECT AVG(units_sold_millions) AS average_sold FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard'",
        "SELECT AVG(g.units_sold_millions) FROM game g WHERE g.game_id IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT AVG(g.units_sold_millions) AS average_units_sold FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard' GROUP BY p.position",
        "WITH GuardGames AS (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') SELECT AVG(g.units_sold_millions) FROM game g JOIN GuardGames gg ON g.game_id = gg.game_id"
      ]
    ]
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "nlq": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "infer_predictions": [
      [
        "SELECT AVG(g.units_sold_millions) FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard'",
        "SELECT AVG(units_sold_millions) FROM game WHERE game_id IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT AVG(units_sold) FROM (SELECT g.units_sold_millions AS units_sold FROM game g INNER JOIN game_player gp ON g.game_id = gp.game_id INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT AVG(units_sold_millions) AS avg_units_sold FROM game g WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.position = 'Guard')",
        "SELECT AVG(game.units_sold_millions) FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard'",
        "SELECT AVG(unit_sold) FROM (SELECT game.units_sold_millions as unit_sold FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE player.position = 'Guard')",
        "SELECT AVG(g.units_sold_millions) FROM game g WHERE g.game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))",
        "SELECT AVG(units_sold_millions) FROM (SELECT g.units_sold_millions FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') u",
        "SELECT AVG(g.units_sold_millions) AS average_sold FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player pl ON pl.player_id = gp.player_id WHERE pl.position = 'Guard' GROUP BY pl.position",
        "SELECT AVG(g.units_sold_millions) FROM game as g, game_player as gp, player as p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND p.position = 'Guard'"
      ]
    ]
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "nlq": "Please list the title and platform name of games.",
    "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
    "infer_predictions": [
      [
        "SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id",
        "SELECT g.title, p.platform_name FROM game g INNER JOIN platform p ON g.platform_id = p.platform_id",
        "SELECT title, platform_name FROM game, platform WHERE game.platform_id = platform.platform_id",
        "SELECT game.title AS GameTitle, platform.platform_name AS PlatformName FROM game, platform WHERE game.platform_id = platform.platform_id",
        "SELECT title, platform_name FROM game INNER JOIN platform ON game.platform_id = platform.platform_id",
        "SELECT g.title, p.platform_name FROM game g, platform p WHERE g.platform_id = p.platform_id",
        "SELECT A.title, B.platform_name FROM game A INNER JOIN platform B ON A.platform_id = B.platform_id",
        "SELECT game.title, platform_name FROM game LEFT JOIN platform ON game.platform_id = platform.platform_id"
      ]
    ]
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "nlq": "What are the titles and platform names of all games?",
    "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
    "infer_predictions": [
      [
        "SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id",
        "SELECT title, platform_name FROM game, platform WHERE game.platform_id = platform.platform_id",
        "SELECT game.title AS GameTitle, platform.platform_name AS PlatformName FROM game INNER JOIN platform ON game.platform_id = platform.platform_id",
        "SELECT DISTINCT g.title, p.platform_name FROM game g, platform p WHERE g.platform_id = p.platform_id",
        "SELECT g1.title, p1.platform_name FROM game g1 JOIN platform p1 ON g1.platform_id = p1.platform_id",
        "SELECT g.title, p.platform_name FROM game g INNER JOIN platform p ON g.platform_id = p.platform_id ORDER BY g.title",
        "SELECT game.title, platform.platform_name FROM game JOIN platform ON game.platform_id = platform.platform_id GROUP BY game.title, platform.platform_name",
        "SELECT g.title, p.platform_name FROM game g INNER JOIN platform p USING (platform_id)",
        "SELECT title, platform_name FROM game JOIN platform USING(platform_id) ORDER BY title"
      ]
    ]
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "nlq": "Please list the title of games with platforms that have market district in Asia or USA.",
    "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
    "infer_predictions": [
      [
        "SELECT game.title FROM game INNER JOIN platform ON game.platform_id = platform.platform_id WHERE platform.market_district IN ('Asia', 'USA')",
        "SELECT title FROM game JOIN platform ON game.platform_id = platform.platform_id WHERE platform.market_district = 'Asia' OR platform.market_district = 'USA'",
        "SELECT DISTINCT g.title FROM game g, platform p WHERE g.platform_id = p.platform_id AND (p.market_district = 'Asia' OR p.market_district = 'USA')",
        "SELECT g.title FROM game g INNER JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA')",
        "SELECT title FROM game WHERE platform_id IN (SELECT platform_id FROM platform WHERE market_district = 'Asia' OR market_district = 'USA')",
        "SELECT game.title FROM game, platform WHERE game.platform_id = platform.platform_id AND (platform.market_district LIKE 'Asia' OR platform.market_district LIKE 'USA')",
        "SELECT Distinct title FROM game INNER JOIN platform ON game.platform_id = platform.platform_id WHERE 'Asia' = platform.market_district OR 'USA' = platform.market_district",
        "SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA') GROUP BY title",
        "SELECT title FROM game WHERE EXISTS (SELECT 1 FROM platform WHERE game.platform_id = platform.platform_id AND (market_district = 'Asia' OR market_district = 'USA'))"
      ]
    ]
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "nlq": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA')",
        "SELECT title FROM game WHERE platform_id IN (SELECT platform_id FROM platform WHERE market_district = 'Asia' OR market_district = 'USA')",
        "SELECT g.title FROM game g, platform p WHERE g.platform_id = p.platform_id AND (p.market_district = 'Asia' OR p.market_district = 'USA')",
        "SELECT title FROM game WHERE EXISTS (SELECT 1 FROM platform WHERE platform_id = game.platform_id AND market_district IN ('Asia', 'USA'))",
        "SELECT g.title FROM game AS g INNER JOIN platform AS p ON g.platform_id = p.platform_id WHERE p.market_district = 'Asia' OR p.market_district = 'USA'",
        "SELECT DISTINCT g.title FROM game g, platform p WHERE g.platform_id = p.platform_id AND p.market_district IN ('Asia', 'USA')",
        "SELECT game.title FROM game JOIN platform ON game.platform_id = platform.platform_id WHERE platform.market_district IN('Asia', 'USA')",
        "SELECT g.title FROM game g LEFT JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district IN ('Asia', 'USA')",
        "SELECT title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE p.market_district = 'USA' OR p.market_district = 'Asia'",
        "SELECT title FROM game g WHERE g.platform_id IN (SELECT platform_id FROM platform WHERE market_district IN ('Asia', 'USA'))"
      ]
    ]
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "nlq": "List the name of each franchise and the number of games belonging to that franchise.",
    "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
    "infer_predictions": [
      [
        "SELECT franchise, COUNT(game_id) AS number_of_games FROM game GROUP BY franchise",
        "SELECT DISTINCT g.franchise, COUNT(g.game_id) AS number_of_games FROM game g GROUP BY g.franchise",
        "SELECT g.franchise, COUNT(*) AS number_of_games FROM game g GROUP BY g.franchise",
        "SELECT g.franchise, COUNT(g.game_id) FROM game g GROUP BY g.franchise",
        "SELECT DISTINCT g.franchise, COUNT(*) FROM game g GROUP BY g.franchise",
        "SELECT franchise AS Series, COUNT(game_id) AS Game_Count FROM game GROUP BY franchise",
        "SELECT g.franchise, COUNT(g.game_id) AS Total_Games FROM game g GROUP BY 1",
        "SELECT g.franchise AS Franchise_Name, COUNT(DISTINCT g.game_id) AS Games_Count FROM game g GROUP BY g.franchise",
        "SELECT franchise, COUNT(DISTINCT game_id) AS number_of_games FROM game GROUP BY franchise",
        "SELECT g.franchise AS Franchise, COUNT(DISTINCT g.game_id) AS NumberOfGames FROM game g GROUP BY g.franchise"
      ]
    ]
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "nlq": "How many games are there from each Franchise?",
    "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
    "infer_predictions": [
      [
        "SELECT franchise, COUNT(game_id) AS game_count FROM game GROUP BY franchise",
        "SELECT g.franchise, COUNT(g.game_id) AS num_games FROM game AS g GROUP BY g.franchise",
        "SELECT game.franchise, COUNT(*) AS total_games FROM game GROUP BY game.franchise",
        "SELECT franchise, COUNT(DISTINCT game_id) FROM game GROUP BY franchise",
        "SELECT franchise, COUNT(game_id) FROM game WHERE game_id IS NOT NULL GROUP BY franchise",
        "SELECT franchise, COUNT(1) FROM game GROUP BY franchise",
        "SELECT franchise, COUNT(game_id) AS games FROM game WHERE title IS NOT NULL GROUP BY franchise",
        "SELECT game.franchise, COUNT(DISTINCT game.game_id) AS game_count FROM game GROUP BY game.franchise",
        "SELECT game.franchise, COUNT(game_id) FROM game WHERE platform_id IS NOT NULL GROUP BY franchise"
      ]
    ]
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "nlq": "List the name of franchise that have the most number of games.",
    "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(game_id) DESC LIMIT 1",
        "SELECT g.franchise FROM game g GROUP BY g.franchise ORDER BY COUNT(g.game_id) DESC LIMIT 1",
        "SELECT franchise FROM (SELECT franchise, COUNT(game_id) as total_games FROM game GROUP BY franchise) ORDER BY total_games DESC LIMIT 1",
        "SELECT g.franchise FROM (SELECT franchise, COUNT(game_id) as num_games FROM game GROUP BY franchise) g ORDER BY g.num_games DESC LIMIT 1",
        "SELECT tmp.franchise FROM (SELECT franchise, COUNT(*) as total FROM game GROUP BY franchise) as tmp ORDER BY total DESC LIMIT 1",
        "SELECT MAX(franchise_table.franchise) FROM (SELECT franchise, COUNT(game_id) as game_count FROM game GROUP BY franchise ORDER BY game_count DESC) franchise_table",
        "SELECT f.franchise FROM (SELECT franchise, COUNT(game_id) AS game_count FROM game GROUP BY franchise) f ORDER BY game_count DESC LIMIT 1",
        "SELECT g.franchise FROM (SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(game_id) DESC LIMIT 1) g",
        "SELECT franchise, COUNT(game_id) AS game_count FROM game GROUP BY franchise ORDER BY game_count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "nlq": "Which franchise has the most games?",
    "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT franchise FROM game GROUP BY franchise ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT g.franchise FROM game g GROUP BY g.franchise ORDER BY COUNT(g.game_id) DESC LIMIT 1",
        "SELECT g.franchise, COUNT(g.game_id) AS num_games FROM game g GROUP BY g.franchise ORDER BY num_games DESC LIMIT 1",
        "WITH GameCount AS (SELECT franchise, COUNT(game_id) AS total_games FROM game GROUP BY franchise) SELECT franchise FROM GameCount ORDER BY total_games DESC LIMIT 1",
        "WITH C AS (SELECT franchise, COUNT(game_id) Counted FROM game GROUP BY franchise) SELECT franchise FROM C ORDER BY Counted DESC LIMIT 1",
        "SELECT top.franchise FROM (SELECT franchise, COUNT(*) as game_count FROM game GROUP BY franchise) as top ORDER BY top.game_count DESC LIMIT 1",
        "SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) = (SELECT MAX(game_count) FROM (SELECT COUNT(game_id) as game_count FROM game GROUP BY franchise))",
        "SELECT SUB.franchise FROM (SELECT franchise, COUNT(*) AS total FROM game GROUP BY franchise) AS SUB ORDER BY SUB.total DESC LIMIT 1",
        "SELECT outcome.franchise FROM (SELECT franchise, COUNT(game_id) AS entries FROM game GROUP BY franchise) outcome ORDER BY entries DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "nlq": "List the names of franchises that have at least two games.",
    "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2",
        "SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(g.game_id) >= 2",
        "SELECT DISTINCT a.franchise FROM game a JOIN game b ON a.franchise = b.franchise AND a.game_id != b.game_id",
        "SELECT DISTINCT franchise FROM (SELECT franchise, COUNT(*) as game_count FROM game GROUP BY franchise) WHERE game_count >= 2",
        "SELECT g1.franchise FROM game g1 INNER JOIN game g2 ON g1.franchise = g2.franchise AND g1.game_id != g2.game_id GROUP BY g1.franchise",
        "SELECT franchise FROM game WHERE franchise IN (SELECT franchise FROM game GROUP BY franchise HAVING COUNT(*) > 1)",
        "SELECT g.franchise FROM (SELECT franchise, COUNT(*) as total FROM game GROUP BY franchise) g WHERE g.total >= 2",
        "SELECT a.franchise FROM game a WHERE (SELECT COUNT(*) FROM game b WHERE a.franchise = b.franchise) >= 2 GROUP BY a.franchise",
        "WITH FranchiseCounts AS (SELECT franchise, COUNT(game_id) AS num_games FROM game GROUP BY franchise) SELECT franchise FROM FranchiseCounts WHERE num_games >= 2"
      ]
    ]
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "nlq": "What are the names of franchises that have two or more games?",
    "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT franchise FROM game GROUP BY franchise HAVING COUNT(game_id) >= 2",
        "SELECT g.franchise FROM game g GROUP BY g.franchise HAVING COUNT(*) > 1",
        "SELECT DISTINCT g.franchise FROM game g WHERE (SELECT COUNT(*) FROM game WHERE franchise = g.franchise) >= 2",
        "SELECT f.franchise FROM (SELECT franchise, COUNT(game_id) AS total_games FROM game GROUP BY franchise) f WHERE f.total_games >= 2",
        "SELECT DISTINCT game.franchise FROM game, (SELECT franchise, COUNT(*) AS cnt FROM game GROUP BY franchise) b WHERE game.franchise = b.franchise AND b.cnt >= 2",
        "SELECT DISTINCT x.franchise FROM game x JOIN game y ON x.franchise = y.franchise AND x.game_id != y.game_id",
        "WITH FranchiseCount AS (SELECT franchise, COUNT(game_id) AS Count FROM game GROUP BY franchise) SELECT franchise FROM FranchiseCount WHERE Count >= 2",
        "SELECT grp.franchise FROM (SELECT franchise FROM game GROUP BY franchise HAVING COUNT(DISTINCT game_id) >= 2) AS grp",
        "SELECT game.franchise FROM game LEFT JOIN (SELECT franchise, COUNT(*) AS game_count FROM game GROUP BY franchise) AS fc ON game.franchise = fc.franchise WHERE fc.game_count >= 2"
      ]
    ]
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "nlq": "List the name of players that do not play any game.",
    "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
    "infer_predictions": [
      [
        "SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player)",
        "SELECT P.player_name FROM player P WHERE NOT EXISTS (SELECT 1 FROM game_player GP WHERE GP.player_id = P.player_id)",
        "SELECT player_name FROM player EXCEPT SELECT player_name FROM player JOIN game_player ON player.player_id = game_player.player_id",
        "SELECT P.player_name FROM player P LEFT JOIN game_player GP ON P.player_id = GP.player_id WHERE GP.player_id IS NULL",
        "SELECT player_name FROM player WHERE player_id NOT IN (SELECT DISTINCT player_id FROM game_player)",
        "SELECT P.player_name FROM player P WHERE P.player_id NOT IN (SELECT GP.player_id FROM game_player GP)",
        "SELECT player.player_name FROM player WHERE NOT EXISTS (SELECT player_id FROM game_player WHERE game_player.player_id = player.player_id)",
        "SELECT player_name FROM player WHERE player_id NOT IN (SELECT GP.player_id FROM game_player GP WHERE GP.if_active)",
        "SELECT P.player_name FROM player P LEFT OUTER JOIN game_player GP ON P.player_id = GP.player_id WHERE GP.game_id IS NULL",
        "SELECT P.player_name FROM player P WHERE P.player_id NOT IN (SELECT GP.player_id FROM game_player GP WHERE GP.if_active = 1)"
      ]
    ]
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "nlq": "What are the names of players who do not play any games?",
    "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
    "infer_predictions": [
      [
        "SELECT player.player_name FROM player LEFT JOIN game_player ON player.player_id = game_player.player_id WHERE game_player.player_id IS NULL",
        "SELECT p.player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.player_id = p.player_id)",
        "SELECT p.player_name FROM player p LEFT OUTER JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.game_id IS NULL",
        "SELECT player_name FROM player WHERE player_id NOT IN (SELECT player_id FROM game_player)",
        "SELECT player_name FROM player p WHERE NOT EXISTS (SELECT NULL FROM game_player gp WHERE gp.player_id = p.player_id)",
        "SELECT DISTINCT p.player_name FROM player p LEFT JOIN game_player gp ON p.player_id = gp.player_id WHERE gp.player_id IS NULL",
        "SELECT p.player_name FROM player p WHERE p.player_id NOT IN (SELECT gp.player_id FROM game_player gp)",
        "SELECT player.player_name FROM player WHERE NOT EXISTS (SELECT player_id FROM game_player WHERE game_player.player_id = player.player_id)",
        "SELECT p.player_name FROM player p WHERE p.player_id NOT IN (SELECT DISTINCT gp.player_id FROM game_player gp)",
        "SELECT p.player_name FROM player p LEFT OUTER JOIN game_player gp ON p.player_id = gp.player_id GROUP BY p.player_id HAVING COUNT(gp.game_id) = 0"
      ]
    ]
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "nlq": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.title FROM game AS g JOIN game_player AS gp ON g.game_id = gp.game_id JOIN player AS p ON gp.player_id = p.player_id WHERE p.college = 'Auburn' INTERSECT SELECT g.title FROM game AS g JOIN game_player AS gp ON g.game_id = gp.game_id JOIN player AS p ON gp.player_id = p.player_id WHERE p.college = 'Oklahoma'",
        "SELECT DISTINCT title FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Auburn')) AND game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Oklahoma'))",
        "SELECT g.title FROM game g INNER JOIN game_player gp ON g.game_id = gp.game_id INNER JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Oklahoma' INTERSECT SELECT g.title FROM game g INNER JOIN game_player gp ON g.game_id = gp.game_id INNER JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Auburn'",
        "SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player GP JOIN player P ON GP.player_id = P.player_id WHERE P.college = 'Auburn') INTERSECT SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player GP JOIN player P ON GP.player_id = P.player_id WHERE P.college = 'Oklahoma')",
        "SELECT title FROM (SELECT title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE college = 'Auburn') AS Auburn_games INTERSECT SELECT title FROM (SELECT title FROM game JOIN game_player ON game.game_id = game_player.game_id JOIN player ON game_player.player_id = player.player_id WHERE college = 'Oklahoma') AS Oklahoma_games",
        "SELECT title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Auburn') AND EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.college = 'Oklahoma')",
        "SELECT title FROM game WHERE EXISTS (SELECT * FROM player JOIN game_player ON player.player_id = game_player.player_id WHERE game_player.game_id = game.game_id AND player.college = 'Oklahoma') AND EXISTS (SELECT * FROM player JOIN game_player ON player.player_id = game_player.player_id WHERE game_player.game_id = game.game_id AND player.college = 'Auburn')",
        "SELECT g.title FROM game AS g INNER JOIN game_player AS gp ON g.game_id = gp.game_id INNER JOIN player AS p ON gp.player_id = p.player_id GROUP BY g.title HAVING SUM(p.college = 'Auburn') > 0 AND SUM(p.college = 'Oklahoma') > 0",
        "SELECT g.title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p on gp.player_id = p.player_id WHERE p.college = 'Auburn' AND g.game_id = gp.game_id) INTERSECT SELECT g.title FROM game AS g WHERE EXISTS (SELECT 1 FROM game_player AS gp JOIN player AS p ON gp.player_id = p.player_id WHERE p.college = 'Oklahoma' AND g.game_id = gp.game_id)",
        "SELECT DISTINCT g1.title FROM game g1 JOIN game_player gp1 ON g1.game_id = gp1.game_id JOIN player p1 ON gp1.player_id = p1.player_id WHERE p1.college = 'Auburn' AND g1.game_id IN (SELECT g2.game_id FROM game g2 JOIN game_player gp2 ON g2.game_id = gp2.game_id JOIN player p2 ON gp2.player_id = p2.player_id WHERE p2.college = 'Oklahoma')"
      ]
    ]
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "nlq": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.college IN ('Oklahoma', 'Auburn')",
        "SELECT g.title FROM game g, game_player gp, player p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND (p.college = 'Oklahoma' OR p.college = 'Auburn') GROUP BY g.title",
        "SELECT title FROM game WHERE game_id IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Oklahoma' OR college = 'Auburn'))",
        "SELECT DISTINCT title FROM (SELECT title FROM game INNER JOIN game_player ON game.game_id = game_player.game_id INNER JOIN player ON game_player.player_id = player.player_id WHERE player.college = 'Auburn' OR player.college = 'Oklahoma')",
        "SELECT DISTINCT g.title FROM game g, game_player gp, player p WHERE g.game_id = gp.game_id AND gp.player_id = p.player_id AND p.college IN ('Oklahoma', 'Auburn')",
        "SELECT title FROM game WHERE EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE gp.game_id = game.game_id AND p.college IN ('Oklahoma', 'Auburn'))",
        "SELECT g.title FROM game g WHERE g.game_id IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.college = 'Oklahoma' OR p.college = 'Auburn')",
        "SELECT g.title FROM game as g WHERE EXISTS (SELECT gp.game_id FROM game_player as gp INNER JOIN player as p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND (p.college = 'Oklahoma' OR p.college = 'Auburn'))",
        "SELECT g.title FROM game g INNER JOIN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE college = 'Oklahoma' OR college = 'Auburn')) gp ON g.game_id = gp.game_id",
        "SELECT g.title FROM game g WHERE g.game_id IN (SELECT gp.game_id FROM game_player gp, player p WHERE gp.player_id = p.player_id AND (p.college = 'Oklahoma' OR p.college = 'Auburn'))"
      ]
    ]
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "nlq": "Show all distinct franchises of games.",
    "gold": "SELECT DISTINCT Franchise FROM game",
    "infer_predictions": [
      [
        "SELECT DISTINCT franchise FROM game",
        "SELECT DISTINCT g.franchise FROM game g",
        "SELECT DISTINCT f FROM (SELECT franchise AS f FROM game)",
        "WITH UniqueFranchises AS (SELECT DISTINCT franchise FROM game) SELECT * FROM UniqueFranchises",
        "SELECT f.franchise FROM (SELECT DISTINCT franchise FROM game) AS f",
        "SELECT DISTINCT f FROM (SELECT franchise f FROM game)",
        "SELECT franchise FROM game GROUP BY franchise",
        "SELECT DISTINCT game.franchise FROM game WHERE franchise IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "nlq": "What are all the distinct franchises?",
    "gold": "SELECT DISTINCT Franchise FROM game",
    "infer_predictions": [
      [
        "SELECT DISTINCT franchise FROM game;",
        "SELECT franchise FROM game GROUP BY franchise;",
        "SELECT * FROM (SELECT DISTINCT franchise FROM game);",
        "SELECT franchise FROM (SELECT DISTINCT franchise FROM game) AS unique_franchises;",
        "SELECT COUNT(DISTINCT franchise), franchise FROM game GROUP BY franchise;",
        "SELECT DISTINCT g.franchise FROM game g;",
        "SELECT DISTINCT game.franchise FROM game ORDER BY game.franchise;",
        "SELECT DISTINCT fr.franchise FROM (SELECT franchise FROM game) AS fr;",
        "SELECT DISTINCT fr.franchise FROM (SELECT franchise FROM game) fr;"
      ]
    ]
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "nlq": "Show the title of games that are not played by any player who is in the Guard position.",
    "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "infer_predictions": [
      [
        "SELECT title FROM game WHERE game_id NOT IN (SELECT g.game_id FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.position = 'Guard')",
        "SELECT DISTINCT title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT title FROM game WHERE game_id NOT IN (SELECT gp.game_id FROM game_player gp, player p WHERE gp.player_id = p.player_id AND p.position = 'Guard')",
        "SELECT g.title FROM game g LEFT JOIN game_player gp ON g.game_id = gp.game_id LEFT JOIN player p ON gp.player_id = p.player_id WHERE p.position <> 'Guard' OR p.position IS NULL GROUP BY g.title HAVING COUNT(gp.player_id) = COUNT(CASE WHEN p.position = 'Guard' THEN 1 ELSE NULL END)",
        "SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT DISTINCT game_id FROM game_player WHERE player_id in (SELECT player_id FROM player WHERE position = 'Guard'))",
        "SELECT g.title FROM game g EXCEPT SELECT g.title FROM game g INNER JOIN game_player gp ON g.game_id = gp.game_id INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard'",
        "SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))",
        "SELECT g.title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.position = 'Guard')",
        "SELECT title FROM game g LEFT OUTER JOIN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') guards ON g.game_id = guards.game_id WHERE guards.game_id IS NULL"
      ]
    ]
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "nlq": "What are the titles of games not played by any players who play the Guard position?",
    "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "infer_predictions": [
      [
        "SELECT DISTINCT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE g.game_id = gp.game_id AND p.position = 'Guard')",
        "SELECT g.title FROM game g LEFT JOIN game_player gp ON g.game_id = gp.game_id LEFT JOIN player p ON gp.player_id = p.player_id WHERE p.position != 'Guard' OR p.position IS NULL GROUP BY g.title",
        "SELECT g.title FROM game g WHERE g.game_id NOT IN (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT g.title FROM game g EXCEPT SELECT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard'",
        "SELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player WHERE player_id IN (SELECT player_id FROM player WHERE position = 'Guard'))",
        "SELECT DISTINCT title FROM game g WHERE NOT EXISTS (SELECT NULL FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE gp.game_id = g.game_id AND p.position = 'Guard')",
        "SELECT title FROM game WHERE game_id NOT IN (SELECT gp.game_id FROM game_player gp INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard')",
        "SELECT g.title FROM game g LEFT OUTER JOIN (SELECT DISTINCT gp.game_id FROM game_player gp INNER JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard') AS guard_games ON g.game_id = guard_games.game_id WHERE guard_games.game_id IS NULL",
        "SELECT g.title FROM game g WHERE NOT EXISTS (SELECT game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE p.position = 'Guard' AND gp.game_id = g.game_id)",
        "SELECT title FROM game WHERE NOT EXISTS (SELECT gp.game_id FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE position = 'Guard' AND game_id = game.game_id)"
      ]
    ]
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "nlq": "list all the names of press in descending order of the profit of the year.",
    "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
    "infer_predictions": [
      [
        "SELECT name FROM press ORDER BY year_profits_billion DESC",
        "SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC",
        "SELECT press.name AS PressName FROM press ORDER BY press.year_profits_billion DESC",
        "SELECT name AS PressName FROM press ORDER BY year_profits_billion DESC",
        "SELECT name FROM press p ORDER BY p.year_profits_billion DESC",
        "SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC, p.name ASC",
        "SELECT press.name FROM press ORDER BY press.year_profits_billion DESC, press.name ASC"
      ]
    ]
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "nlq": "Sorted all the press by year profits in descending order, and return press names.",
    "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
    "infer_predictions": [
      [
        "SELECT name FROM press ORDER BY year_profits_billion DESC",
        "SELECT p.name FROM press p ORDER BY p.year_profits_billion DESC",
        "SELECT Name FROM (SELECT * FROM Press) ORDER BY Year_Profits_Billion DESC"
      ]
    ]
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "nlq": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
    "infer_predictions": [
      [
        "SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1",
        "SELECT name FROM press WHERE year_profits_billion > 15 UNION SELECT name FROM press WHERE month_profits_billion > 1",
        "SELECT p.name FROM press p WHERE p.year_profits_billion > 15 OR p.month_profits_billion > 1",
        "SELECT name FROM press WHERE year_profits_billion > 15 UNION ALL SELECT name FROM press WHERE month_profits_billion > 1 AND NOT (year_profits_billion > 15)",
        "SELECT DISTINCT press.name FROM press WHERE press.year_profits_billion > 15 OR press.month_profits_billion > 1 GROUP BY press.name",
        "SELECT name FROM press WHERE (year_profits_billion > 15 OR month_profits_billion > 1) AND name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "nlq": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
    "infer_predictions": [
      [
        "SELECT name FROM press WHERE year_profits_billion > 15 OR month_profits_billion > 1",
        "SELECT p.name FROM press p WHERE p.year_profits_billion > 15 OR p.month_profits_billion > 1",
        "SELECT name FROM press WHERE year_profits_billion > 15 UNION SELECT name FROM press WHERE month_profits_billion > 1",
        "SELECT press.name FROM press WHERE (press.year_profits_billion > 15 OR press.month_profits_billion > 1)",
        "SELECT Name FROM press WHERE (year_profits_billion > 15) OR (month_profits_billion > 1)",
        "SELECT p.name FROM press p WHERE (p.year_profits_billion > 15) OR (p.month_profits_billion > 1) AND ((p.month_profits_billion IS NOT NULL) OR (p.year_profits_billion IS NOT NULL))"
      ]
    ]
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "nlq": "what are the average and maximum profit of a year for all presses?",
    "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
    "infer_predictions": [
      [
        "SELECT AVG(year_profits_billion) AS Average_Profit, MAX(year_profits_billion) AS Maximum_Profit FROM press",
        "SELECT AVG(p.year_profits_billion) AS Average_Profit, MAX(p.year_profits_billion) AS Maximum_Profit FROM press p",
        "SELECT AVG(year_profits_billion), MAX(year_profits_billion) FROM press",
        "SELECT AVG(year_profits_billion) AS avg_yearly_profit, MAX(year_profits_billion) AS max_yearly_profit FROM press",
        "SELECT AVG(press.year_profits_billion) AS avg_profit, MAX(press.year_profits_billion) AS max_profit FROM press",
        "SELECT AVG(year_profits_billion) FROM press UNION SELECT MAX(year_profits_billion) FROM press",
        "SELECT AVG(p.year_profits_billion) FROM press p UNION SELECT MAX(p.year_profits_billion) FROM press p",
        "SELECT (SELECT AVG(year_profits_billion) FROM press), (SELECT MAX(year_profits_billion) FROM press)",
        "SELECT AVG(press.year_profits_billion) FROM press UNION ALL SELECT MAX(press.year_profits_billion) FROM press",
        "SELECT (SELECT AVG(p.year_profits_billion) FROM press p) AS Average_Profit, (SELECT MAX(p.year_profits_billion) FROM press p) AS Maximum_Profit"
      ]
    ]
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "nlq": "Find the average and maximum yearly profit for each press.",
    "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
    "infer_predictions": [
      [
        "SELECT press.name, AVG(press.year_profits_billion) AS avg_yearly_profit, MAX(press.year_profits_billion) AS max_yearly_profit FROM press GROUP BY press.press_id",
        "SELECT name, AVG(year_profits_billion) AS average_profit, MAX(year_profits_billion) AS maximum_profit FROM press GROUP BY press_id",
        "SELECT p.name, AVG(p.year_profits_billion) AS avg_profit, MAX(p.year_profits_billion) AS max_profit FROM press AS p GROUP BY p.press_id",
        "SELECT name, AVG(year_profits_billion), MAX(year_profits_billion) FROM press GROUP BY press_id",
        "SELECT p.name, AVG(p.year_profits_billion), MAX(p.year_profits_billion) FROM press p GROUP BY p.press_id",
        "SELECT p.name AS press_name, AVG(p.year_profits_billion) AS average_yearly_profits, MAX(p.year_profits_billion) AS max_yearly_profits FROM press p GROUP BY p.press_id",
        "SELECT press.name AS Name, AVG(press.year_profits_billion) AS Average_Profit, MAX(press.year_profits_billion) AS Maximum_Profit FROM press GROUP BY press.press_id",
        "SELECT name, AVG(year_profits_billion) AS AvgProfit, MAX(year_profits_billion) AS MaxProfit FROM press GROUP BY press_id",
        "SELECT press.name, avg(year_profits_billion) AS averageAnnualProfit, max(year_profits_billion) AS maxAnnualProfit FROM press GROUP BY press.name",
        "SELECT p.name AS PressName, AVG(p.year_profits_billion) AS avgYearProfit, MAX(p.year_profits_billion) AS maxYearProfit FROM press p GROUP BY p.press_id"
      ]
    ]
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "nlq": "Find the name of the publisher whose monthly profit is the highest.",
    "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1",
        "SELECT press.name FROM press WHERE press.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)",
        "SELECT name FROM (SELECT name FROM press ORDER BY month_profits_billion DESC) LIMIT 1",
        "SELECT name FROM press WHERE press.month_profits_billion = (SELECT MAX(p.month_profits_billion) FROM press p)",
        "SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC LIMIT 1",
        "SELECT p.name FROM press p JOIN (SELECT MAX(month_profits_billion) AS max_profit FROM press) mp ON p.month_profits_billion = mp.max_profit"
      ]
    ]
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "nlq": "Which press has the largest monthly profit? Give me the press name.",
    "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1",
        "SELECT p.name FROM press p WHERE p.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press)",
        "SELECT name FROM press WHERE month_profits_billion IN (SELECT MAX(month_profits_billion) FROM press)",
        "SELECT p.name FROM press p ORDER BY p.month_profits_billion DESC LIMIT 1",
        "SELECT name FROM (SELECT name FROM press ORDER BY month_profits_billion DESC) LIMIT 1",
        "SELECT p.name FROM press p WHERE p.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press p2)",
        "SELECT p1.name FROM press p1 WHERE p1.month_profits_billion = (SELECT MAX(p2.month_profits_billion) FROM press p2)"
      ]
    ]
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "nlq": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
    "infer_predictions": [
      [
        "SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press)",
        "SELECT name FROM press WHERE month_profits_billion IN (SELECT MAX(month_profits_billion) FROM press UNION SELECT MIN(month_profits_billion) FROM press)",
        "SELECT p1.name FROM press p1 WHERE p1.month_profits_billion = (SELECT MAX(p2.month_profits_billion) FROM press p2) OR p1.month_profits_billion = (SELECT MIN(p2.month_profits_billion) FROM press p2)",
        "SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press UNION SELECT MIN(month_profits_billion) FROM press)",
        "SELECT name FROM press p WHERE p.month_profits_billion IN (SELECT MAX(month_profits_billion) FROM press) OR p.month_profits_billion IN (SELECT MIN(month_profits_billion) FROM press)",
        "SELECT P.name FROM press P JOIN (SELECT MIN(month_profits_billion) AS min_profit, MAX(month_profits_billion) AS max_profit FROM press) AS sub ON P.month_profits_billion = sub.min_profit OR P.month_profits_billion = sub.max_profit"
      ]
    ]
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "nlq": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
    "infer_predictions": [
      [
        "SELECT p.name FROM press p WHERE p.month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR p.month_profits_billion = (SELECT MIN(month_profits_billion) FROM press)",
        "SELECT name FROM press WHERE month_profits_billion IN (SELECT MAX(month_profits_billion) FROM press UNION SELECT MIN(month_profits_billion) FROM press)",
        "WITH HighLow AS (SELECT MAX(month_profits_billion) AS MaxProfit, MIN(month_profits_billion) AS MinProfit FROM press) SELECT name FROM press, HighLow WHERE month_profits_billion = MaxProfit OR month_profits_billion = MinProfit",
        "SELECT name FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press UNION ALL SELECT MIN(month_profits_billion) FROM press)",
        "SELECT p.name FROM press p JOIN (SELECT MAX(month_profits_billion) AS MaxProfit, MIN(month_profits_billion) AS MinProfit FROM press) AS hl ON p.month_profits_billion = hl.MaxProfit OR p.month_profits_billion = hl.MinProfit",
        "SELECT p1.name FROM press p1 WHERE p1.month_profits_billion = (SELECT MAX(p2.month_profits_billion) FROM press p2) UNION SELECT p3.name FROM press p3 WHERE p3.month_profits_billion = (SELECT MIN(p4.month_profits_billion) FROM press p4)",
        "SELECT name FROM press WHERE month_profits_billion IN (SELECT month_profits_billion FROM press GROUP BY month_profits_billion HAVING COUNT(*) = 1 ORDER BY month_profits_billion DESC LIMIT 1) OR month_profits_billion IN (SELECT month_profits_billion FROM press GROUP BY month_profits_billion HAVING COUNT(*) = 1 ORDER BY month_profits_billion ASC LIMIT 1)",
        "WITH Ranked AS (SELECT name, RANK() OVER (ORDER BY month_profits_billion DESC) AS rank_desc, RANK() OVER (ORDER BY month_profits_billion ASC) AS rank_asc FROM press) SELECT name FROM Ranked WHERE rank_desc = 1 OR rank_asc = 1",
        "SELECT name FROM press WHERE month_profits_billion IN (SELECT month_profits_billion FROM press WHERE month_profits_billion = (SELECT MAX(month_profits_billion) FROM press) OR month_profits_billion = (SELECT MIN(month_profits_billion) FROM press))"
      ]
    ]
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "nlq": "how many authors are under age 30?",
    "gold": "SELECT count(*) FROM author WHERE age  <  30",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM author WHERE age < 30",
        "SELECT COUNT(author_id) FROM author WHERE age < 30",
        "SELECT COUNT(*) FROM (SELECT author_id FROM author WHERE age < 30)",
        "SELECT COUNT(author_id) AS TotalYoungAuthors FROM author WHERE age < 30",
        "SELECT COUNT(1) FROM author WHERE age < 30",
        "SELECT COUNT(author.age) FROM author WHERE author.age < 30",
        "SELECT COUNT(author_id) FROM author a WHERE a.age < 30",
        "SELECT COUNT(*) FROM (SELECT * FROM author WHERE age < 30) AS young_authors"
      ]
    ]
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "nlq": "Count the number of authors of age below 30.",
    "gold": "SELECT count(*) FROM author WHERE age  <  30",
    "infer_predictions": [
      [
        "SELECT COUNT(author_id) FROM author WHERE age < 30",
        "SELECT COUNT(*) FROM author WHERE age < 30",
        "SELECT COUNT(1) FROM author WHERE age < 30",
        "SELECT SUM(CASE WHEN age < 30 THEN 1 ELSE 0 END) FROM author",
        "SELECT COUNT(author_id) FROM author WHERE age BETWEEN 1 AND 29",
        "SELECT COUNT(author_id) FROM author GROUP BY age HAVING age < 30",
        "SELECT COUNT(*) FROM (SELECT author_id FROM author WHERE age < 30) AS young_authors",
        "SELECT COUNT(author_id) FROM author WHERE age < 30 AND age > 0"
      ]
    ]
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "nlq": "find the average age of authors for each gender.",
    "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
    "infer_predictions": [
      [
        "sql placeholder"
      ]
    ]
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "nlq": "For each gender, return gender and the average age of authors.",
    "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
    "infer_predictions": [
      [
        "SELECT gender, AVG(age) FROM author GROUP BY gender",
        "SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender",
        "SELECT gender AS AuthorGender, AVG(age) AS AverageAge FROM author GROUP BY AuthorGender",
        "SELECT a.gender, AVG(a.age) FROM author a GROUP BY a.gender",
        "SELECT gender, AVG(age) AS avg_age FROM author GROUP BY gender",
        "SELECT DISTINCT gender, (SELECT AVG(age) FROM author AS sub_author WHERE sub_author.gender = author.gender) AS AverageAge FROM author",
        "SELECT g, AVG(ag) FROM (SELECT gender AS g, age AS ag FROM author) GROUP BY g",
        "SELECT gender, AVG(age) FROM (SELECT gender, age FROM author) AS temp GROUP BY gender",
        "SELECT DISTINCT gender, (SELECT AVG(a.age) FROM author a WHERE a.gender = author.gender) FROM author"
      ]
    ]
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "nlq": "find the number of authors who are older than 30 for each gender.",
    "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
    "infer_predictions": [
      [
        "SELECT gender, COUNT(DISTINCT author_id) FROM author WHERE age > 30 GROUP BY gender;",
        "SELECT a.gender, COUNT(DISTINCT author_id) FROM author a WHERE a.age > 30 GROUP BY a.gender;",
        "SELECT gender, COUNT(*) FROM author WHERE age > 30 GROUP BY gender;",
        "SELECT a.gender, COUNT(DISTINCT a.author_id) AS num_authors FROM author a WHERE a.age > 30 GROUP BY a.gender;",
        "SELECT gender, COUNT(DISTINCT author_id) AS authors_count FROM author WHERE age > 30 GROUP BY gender;",
        "SELECT a.gender, COUNT(*) AS authors_count FROM author a WHERE a.age > 30 GROUP BY a.gender;",
        "SELECT gender, COUNT(author_id) AS num_authors FROM author WHERE age > 30 GROUP BY gender;",
        "SELECT gender, COUNT(DISTINCT author_id) AS total FROM author WHERE age > 30 GROUP BY gender;",
        "SELECT a.gender, COUNT(DISTINCT a.author_id) FROM author a WHERE a.age > 30 GROUP BY a.gender;"
      ]
    ]
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "nlq": "How many authors are of age above 30 for each gender?",
    "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
    "infer_predictions": [
      [
        "SELECT gender, COUNT(author_id) FROM author WHERE age > 30 GROUP BY gender",
        "SELECT gender, COUNT(*) AS num_authors FROM author WHERE age > 30 GROUP BY gender",
        "SELECT a.gender, COUNT(a.author_id) AS total FROM author a WHERE a.age > 30 GROUP BY a.gender",
        "SELECT a.gender, COUNT(DISTINCT a.author_id) FROM author a WHERE a.age > 30 GROUP BY a.gender",
        "SELECT gender, COUNT(author_id) FROM author GROUP BY gender HAVING age > 30",
        "SELECT COUNT(author_id) AS total_authors, gender FROM author WHERE age > 30 GROUP BY gender",
        "SELECT a.gender AS author_gender, COUNT(*) FROM author AS a WHERE a.age > 30 GROUP BY a.gender",
        "SELECT gender, COUNT(author_id) FROM author WHERE age > 30 GROUP BY gender ORDER BY COUNT(author_id)",
        "SELECT gender, COUNT(*) FROM author WHERE age > 30 GROUP BY gender ORDER BY COUNT(*) DESC"
      ]
    ]
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "nlq": "List all book titles in the order of their release date from the most recent to the past.",
    "gold": "SELECT title FROM book ORDER BY release_date DESC",
    "infer_predictions": [
      [
        "SELECT title FROM book ORDER BY release_date DESC",
        "SELECT b.title FROM book b ORDER BY b.release_date DESC",
        "SELECT title FROM book ORDER BY release_date DESC, book_id",
        "SELECT b.title FROM book b ORDER BY b.release_date DESC, b.book_id",
        "SELECT title FROM (SELECT title, release_date FROM book) ORDER BY release_date DESC",
        "SELECT title FROM (SELECT title, release_date FROM book ORDER BY release_date DESC) AS ordered_books",
        "SELECT bb.title FROM (SELECT * FROM book) AS bb ORDER BY bb.release_date DESC",
        "SELECT title FROM book ORDER BY date(release_date) DESC"
      ]
    ]
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "nlq": "Sort all the books in descending order of release date, and return the book titles.",
    "gold": "SELECT title FROM book ORDER BY release_date DESC",
    "infer_predictions": [
      [
        "SELECT title FROM book ORDER BY release_date DESC",
        "SELECT title FROM book b ORDER BY b.release_date DESC",
        "SELECT title FROM book GROUP BY book_id ORDER BY release_date DESC",
        "SELECT A.title FROM book A ORDER BY A.release_date DESC",
        "SELECT b.title FROM book b WHERE book_id IS NOT NULL ORDER BY b.release_date DESC",
        "SELECT title FROM (SELECT title, release_date FROM book ORDER BY release_date DESC) AS sorted_books",
        "SELECT title FROM book WHERE release_date IN (SELECT release_date FROM book ORDER BY release_date DESC)"
      ]
    ]
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "nlq": "Find the number of books for each series.",
    "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
    "infer_predictions": [
      [
        "SELECT book_series, COUNT(*) FROM book GROUP BY book_series",
        "SELECT b.book_series, COUNT(b.book_id) FROM book b GROUP BY b.book_series",
        "SELECT book_series, COUNT(book_id) AS number_of_books FROM book GROUP BY book_series",
        "SELECT book.book_series, COUNT(book.book_id) FROM book GROUP BY book.book_series",
        "SELECT b.book_series, COUNT(*) AS cnt FROM book b GROUP BY b.book_series",
        "SELECT book_series, COUNT(1) FROM book GROUP BY book_series",
        "SELECT b.book_series, COUNT(1) AS total_books FROM book b GROUP BY b.book_series",
        "SELECT book.book_series, COUNT(*) AS number_of_books FROM book GROUP BY book.book_series",
        "SELECT b.book_series, COUNT(b.book_id) AS count_of_books FROM book b GROUP BY b.book_series",
        "SELECT book_series, COUNT(book.book_id) AS book_count FROM book GROUP BY book_series"
      ]
    ]
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "nlq": "How many books does each book series have? Return the counts and book series.",
    "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
    "infer_predictions": [
      [
        "SELECT book_series, COUNT(*) AS number_of_books FROM book GROUP BY book_series",
        "SELECT b.book_series, COUNT(b.book_id) AS number_of_books FROM book b GROUP BY b.book_series",
        "SELECT book_series, COUNT(book_id) AS total FROM book GROUP BY book_series",
        "SELECT book_series, COUNT(*) FROM book GROUP BY book_series",
        "SELECT book.book_series, COUNT(book.book_id) FROM book GROUP BY book.book_series",
        "SELECT b.book_series, COUNT(*) FROM book b GROUP BY b.book_series",
        "SELECT b.book_series, COUNT(b.book_id) FROM book b GROUP BY b.book_series",
        "SELECT book_series AS series, COUNT(book_id) AS total_books_in_series FROM book GROUP BY book_series",
        "SELECT book_series AS book_series_name, COUNT(*) as book_count FROM book GROUP BY book_series_name"
      ]
    ]
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "nlq": "Find the titles and publish dates of the top 5 best sale books.",
    "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
    "infer_predictions": [
      [
        "SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "SELECT title, release_date FROM (SELECT * FROM book ORDER BY sale_amount DESC) LIMIT 5",
        "SELECT b.title AS BookTitle, b.release_date AS PublicationDate FROM book b ORDER BY b.sale_amount DESC LIMIT 5",
        "SELECT Title, ReleaseDate FROM (SELECT title AS Title, release_date AS ReleaseDate, sale_amount FROM book ORDER BY sale_amount DESC) LIMIT 5",
        "SELECT title, release_date FROM book ORDER BY sale_amount DESC, book_id ASC LIMIT 5",
        "SELECT title, release_date FROM book WHERE book_id IN (SELECT book_id FROM book ORDER BY sale_amount DESC LIMIT 5)"
      ]
    ]
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "nlq": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
    "infer_predictions": [
      [
        "SELECT title, release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
        "SELECT b.title, b.release_date FROM book b ORDER BY b.sale_amount DESC LIMIT 5",
        "SELECT book.title AS Title, book.release_date AS ReleaseDate FROM book ORDER BY book.sale_amount DESC LIMIT 5",
        "SELECT b.title, b.release_date FROM (SELECT * FROM book ORDER BY sale_amount DESC) AS b LIMIT 5",
        "SELECT TITLE, RELEASE_DATE FROM BOOK WHERE BOOK_ID IN (SELECT BOOK_ID FROM BOOK ORDER BY SALE_AMOUNT DESC LIMIT 5)",
        "SELECT Title, ReleaseDate FROM (SELECT title AS Title, release_date AS ReleaseDate, sale_amount FROM book) ORDER BY sale_amount DESC LIMIT 5",
        "SELECT (SELECT title FROM book ORDER BY sale_amount DESC LIMIT 5), (SELECT release_date FROM book ORDER BY sale_amount DESC LIMIT 5)"
      ]
    ]
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "nlq": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
    "infer_predictions": [
      [
        "SELECT DISTINCT book1.book_series FROM book AS book1 WHERE book1.sale_amount > 1000 AND EXISTS (SELECT 1 FROM book AS book2 WHERE book2.book_series = book1.book_series AND book2.sale_amount < 500)",
        "SELECT DISTINCT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT DISTINCT book_series FROM book WHERE sale_amount < 500",
        "SELECT DISTINCT b1.book_series FROM book AS b1 INNER JOIN book AS b2 ON b1.book_series = b2.book_series WHERE b1.sale_amount > 1000 AND b2.sale_amount < 500",
        "SELECT book_series FROM book GROUP BY book_series HAVING MAX(sale_amount) > 1000 AND MIN(sale_amount) < 500",
        "SELECT book1.book_series FROM book AS book1 JOIN book AS book2 ON book1.book_series = book2.book_series WHERE book1.sale_amount > 1000 AND book2.sale_amount < 500 GROUP BY book1.book_series",
        "WITH Higher AS (SELECT DISTINCT book_series FROM book WHERE sale_amount > 1000), Lower AS (SELECT DISTINCT book_series FROM book WHERE sale_amount < 500) SELECT book_series FROM Higher INTERSECT SELECT book_series FROM Lower",
        "SELECT b.book_series FROM book as b WHERE EXISTS (SELECT 1 FROM book WHERE book_series = b.book_series AND sale_amount > 1000) AND EXISTS (SELECT 1 FROM book WHERE book_series = b.book_series AND sale_amount < 500)",
        "SELECT DISTINCT a.book_series FROM book a, book b WHERE a.book_series = b.book_series AND a.sale_amount > 1000 AND b.sale_amount < 500",
        "SELECT book_series FROM book a WHERE (SELECT MAX(sale_amount) FROM book WHERE book_series = a.book_series) > 1000 AND (SELECT MIN(sale_amount) FROM book WHERE book_series = a.book_series) < 500",
        "WITH HighSales AS (SELECT book_series FROM book WHERE sale_amount > 1000), LowSales AS (SELECT book_series FROM book WHERE sale_amount < 500) SELECT HighSales.book_series FROM HighSales JOIN LowSales ON HighSales.book_series = LowSales.book_series"
      ]
    ]
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "nlq": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
    "infer_predictions": [
      [
        "SELECT book_series FROM book WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM book WHERE sale_amount < 500",
        "SELECT DISTINCT b1.book_series FROM book b1 WHERE EXISTS (SELECT 1 FROM book b2 WHERE b1.book_series = b2.book_series AND b2.sale_amount > 1000) AND EXISTS (SELECT 1 FROM book b2 WHERE b1.book_series = b2.book_series AND b2.sale_amount < 500)",
        "SELECT DISTINCT book_series FROM book WHERE book_series IN (SELECT book_series FROM book GROUP BY book_series HAVING MAX(sale_amount) > 1000 AND MIN(sale_amount) < 500)",
        "SELECT DISTINCT b2.book_series FROM book b1 JOIN book b2 ON b1.book_series = b2.book_series WHERE b1.sale_amount > 1000 AND b2.sale_amount < 500",
        "SELECT b1.book_series FROM book b1 JOIN book b2 ON b1.book_series = b2.book_series AND b1.sale_amount > 1000 AND b2.sale_amount < 500 GROUP BY b1.book_series",
        "SELECT DISTINCT b.book_series FROM book b WHERE (SELECT MAX(sale_amount) FROM book WHERE book_series = b.book_series) > 1000 AND (SELECT MIN(sale_amount) FROM book WHERE book_series = b.book_series) < 500",
        "WITH sub_high AS (SELECT book_series FROM book WHERE sale_amount > 1000), sub_low AS (SELECT book_series FROM book WHERE sale_amount < 500) SELECT book_series FROM sub_high INTERSECT SELECT book_series FROM sub_low",
        "SELECT book.book_series FROM book GROUP BY book.book_series HAVING SUM(CASE WHEN sale_amount > 1000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN sale_amount < 500 THEN 1 ELSE 0 END) > 0",
        "SELECT DISTINCT b.series FROM (SELECT book_series as series, sale_amount FROM book) b WHERE b.sale_amount > 1000 AND EXISTS (SELECT 1 FROM book WHERE book_series = b.series AND sale_amount < 500)"
      ]
    ]
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "nlq": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.name FROM author a JOIN book b1 ON a.author_id = b1.author_id JOIN book b2 ON a.author_id = b2.author_id WHERE b1.book_series = 'MM' AND b2.book_series = 'LT'",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'MM') INTERSECT SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'LT')",
        "SELECT name FROM author WHERE EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'MM') AND EXISTS (SELECT 1 FROM book WHERE author_id = author.author_id AND book_series = 'LT')",
        "SELECT a1.name FROM author a1 WHERE author_id IN (SELECT b.author_id FROM book b GROUP BY b.author_id HAVING SUM(b.book_series = 'MM') > 0 AND SUM(b.book_series = 'LT') > 0)",
        "SELECT a.name FROM author a, book b WHERE a.author_id = b.author_id AND b.book_series = 'MM' AND EXISTS (SELECT 1 FROM book b2 WHERE b2.author_id = a.author_id AND b2.book_series = 'LT')",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(DISTINCT book_series) > 1 AND MIN(book_series) = 'LT' AND MAX(book_series) = 'MM')",
        "SELECT a.name FROM author a JOIN book b1 ON a.author_id = b1.author_id AND b1.book_series = 'MM' JOIN book b2 ON a.author_id = b2.author_id AND b2.book_series = 'LT' GROUP BY a.name",
        "SELECT author.name FROM book INNER JOIN author ON book.author_id = author.author_id WHERE book.book_series = 'MM' OR book.book_series = 'LT' GROUP BY author.author_id HAVING COUNT(DISTINCT book.book_series) > 1",
        "SELECT z.name FROM (SELECT a.name, b.book_series FROM author a INNER JOIN book b ON a.author_id = b.author_id) z GROUP BY z.name HAVING COUNT(DISTINCT z.book_series) = 2",
        "SELECT x.name FROM (SELECT author.name, COUNT(DISTINCT book.book_series) AS series_count FROM author JOIN book ON author.author_id = book.author_id GROUP BY author.author_id HAVING series_count > 1) x"
      ]
    ]
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "nlq": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.name FROM author a JOIN book b1 ON a.author_id = b1.author_id JOIN book b2 ON a.author_id = b2.author_id WHERE b1.book_series = 'LT' AND b2.book_series = 'MM'",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'LT') INTERSECT SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book WHERE book_series = 'MM')",
        "SELECT author.name FROM author WHERE author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'LT') AND author.author_id IN (SELECT b.author_id FROM book b WHERE b.book_series = 'MM')",
        "SELECT DISTINCT author.name FROM book AS b1 JOIN author ON b1.author_id = author.author_id WHERE EXISTS (SELECT 1 FROM book AS b2 WHERE b2.author_id = b1.author_id AND b2.book_series = 'MM') AND b1.book_series = 'LT'",
        "SELECT author.name FROM author INNER JOIN book ON author.author_id = book.author_id WHERE book.book_series = 'LT' INTERSECT SELECT author.name FROM author INNER JOIN book ON author.author_id = book.author_id WHERE book.book_series = 'MM'",
        "SELECT DISTINCT Name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING SUM(CASE WHEN book_series = 'LT' THEN 1 ELSE 0 END ) > 0 AND SUM(CASE WHEN book_series = 'MM' THEN 1 ELSE 0 END) > 0)",
        "SELECT a.name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.author_id = a.author_id AND b.book_series = 'LT') AND EXISTS (SELECT 1 FROM book b WHERE b.author_id = a.author_id AND b.book_series = 'MM')",
        "SELECT a1.name FROM (SELECT a.name, a.author_id FROM author a JOIN book b ON a.author_id = b.author_id WHERE b.book_series = 'LT') a1 JOIN (SELECT a.author_id FROM author a JOIN book b ON a.author_id = b.author_id WHERE b.book_series = 'MM') a2 ON a1.author_id = a2.author_id",
        "WITH LT_Authors AS (SELECT author_id FROM book WHERE book_series = 'LT'), MM_Authors AS (SELECT author_id FROM book WHERE book_series = 'MM') SELECT DISTINCT a.name FROM author a JOIN LT_Authors la ON a.author_id = la.author_id JOIN MM_Authors ma ON a.author_id = ma.author_id",
        "SELECT au1.name FROM author au1 JOIN book b1 ON au1.author_id = b1.author_id WHERE EXISTS (SELECT NULL FROM book b2 WHERE b2.author_id = b1.author_id AND b2.book_series = 'MM') AND b1.book_series = 'LT'"
      ]
    ]
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "nlq": "Find the name and age of the authors who do not have any book in the record.",
    "gold": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
    "infer_predictions": [
      [
        "SELECT name, age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
        "SELECT A.name, A.age FROM author A LEFT JOIN book B ON A.author_id = B.author_id WHERE B.author_id IS NULL",
        "SELECT name, age FROM author WHERE author_id NOT IN (SELECT distinct author_id FROM book)",
        "SELECT author.name, author.age FROM author WHERE NOT EXISTS (SELECT 1 FROM book WHERE book.author_id = author.author_id)",
        "SELECT name, age FROM author EXCEPT SELECT name, age FROM author WHERE author_id IN (SELECT author_id FROM book)",
        "SELECT A.name, A.age FROM author A WHERE NOT EXISTS (SELECT 1 FROM book B WHERE B.author_id = A.author_id)",
        "SELECT author.name, author.age FROM author LEFT JOIN (SELECT DISTINCT author_id FROM book) B ON author.author_id = B.author_id WHERE B.author_id IS NULL",
        "SELECT name, age FROM author A WHERE A.author_id NOT IN (SELECT B.author_id FROM book B)",
        "SELECT name, age FROM author AS A WHERE NOT EXISTS (SELECT NULL FROM book AS B WHERE B.author_id = A.author_id)",
        "SELECT name, age FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE book.author_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "nlq": "Which authors in the record have not published any books ? Give me their names .",
    "gold": "select name from author where author_id not in (select author_id from book)",
    "infer_predictions": [
      [
        "SELECT A.name FROM author A LEFT JOIN book B ON A.author_id = B.author_id WHERE B.author_id IS NULL",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
        "SELECT A.name FROM author A WHERE NOT EXISTS (SELECT 1 FROM book B WHERE B.author_id = A.author_id)",
        "SELECT name FROM author EXCEPT SELECT name FROM author JOIN book ON author.author_id = book.author_id",
        "SELECT author.name FROM author LEFT JOIN book ON author.author_id = book.author_id WHERE book.title IS NULL",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT DISTINCT author_id FROM book)",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT book.author_id FROM book WHERE book.author_id IS NOT NULL)",
        "SELECT author.name FROM author LEFT OUTER JOIN book ON author.author_id = book.author_id WHERE book.book_id IS NULL",
        "SELECT A.name FROM author A WHERE A.author_id NOT IN (SELECT author_id FROM book) OR EXISTS (SELECT 1 FROM book B WHERE B.author_id IS NULL AND A.author_id = B.author_id)",
        "SELECT A.name FROM author A WHERE A.author_id NOT IN (SELECT B.author_id FROM book B WHERE B.author_id = A.author_id)"
      ]
    ]
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "nlq": "Find the names of authors who have more than one book in the database.",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT a.name FROM author a WHERE a.author_id IN (SELECT b.author_id FROM book b GROUP BY b.author_id HAVING COUNT(b.book_id) > 1)",
        "SELECT DISTINCT a.name FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.book_id) > 1",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) > 1)",
        "SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id, a.name HAVING COUNT(DISTINCT b.book_id) > 1",
        "SELECT a.name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.author_id = a.author_id GROUP BY b.author_id HAVING COUNT(*) > 1)",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM (SELECT author_id, COUNT(book_id) AS book_count FROM book GROUP BY author_id) WHERE book_count > 1)",
        "SELECT name FROM (SELECT a.name, COUNT(b.book_id) AS books FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id) WHERE books > 1",
        "SELECT a.name FROM author a, book b WHERE a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.book_id) > 1",
        "SELECT author.name FROM author JOIN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(*) > 1) subq ON author.author_id = subq.author_id"
      ]
    ]
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "nlq": "Which authors have published more than 1 book according to the database? Give me their names.",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT author.name FROM author JOIN book ON author.author_id = book.author_id GROUP BY author.author_id HAVING COUNT(book.title) > 1",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(*) > 1)",
        "SELECT a.name FROM author a, book b WHERE a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.title) > 1",
        "SELECT author.name FROM author INNER JOIN book ON author.author_id = book.author_id GROUP BY author.author_id HAVING COUNT(book.title) > 1",
        "SELECT DISTINCT a.name FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.title) > 1",
        "SELECT name FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(title) > 1)",
        "SELECT name FROM author a WHERE (SELECT COUNT(*) FROM book b WHERE b.author_id = a.author_id) > 1",
        "SELECT a.name FROM author a WHERE EXISTS (SELECT 1 FROM book b WHERE b.author_id = a.author_id GROUP BY b.author_id HAVING COUNT(b.title) > 1)",
        "SELECT a.name FROM author a, book b WHERE a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.book_id) > 1"
      ]
    ]
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "nlq": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT b.title, a.name AS author_name, p.name AS publisher_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3",
        "SELECT title, author.name, press.name FROM book INNER JOIN author ON book.author_id = author.author_id INNER JOIN press ON book.press_id = press.press_id ORDER BY sale_amount DESC LIMIT 3",
        "SELECT book.title, author.name AS author_name, press.name AS publisher_name FROM book, author, press WHERE book.author_id = author.author_id AND book.press_id = press.press_id ORDER BY book.sale_amount DESC LIMIT 3",
        "SELECT b.title, a.name, p.name FROM book b, author a, press p WHERE b.author_id = a.author_id AND b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3",
        "SELECT Title, Name, (SELECT name FROM press WHERE press_id = book.press_id) as publisher_name FROM book JOIN author ON author.author_id = book.author_id ORDER BY sale_amount DESC LIMIT 3",
        "SELECT tbl.title, aut.name, prs.name FROM (SELECT * FROM book ORDER BY sale_amount DESC LIMIT 3) as tbl JOIN author aut ON tbl.author_id = aut.author_id JOIN press prs ON tbl.press_id = prs.press_id",
        "SELECT title, (SELECT name FROM author WHERE author_id = book.author_id), (SELECT name FROM press WHERE press_id = book.press_id) FROM book ORDER BY sale_amount DESC LIMIT 3",
        "SELECT title, (SELECT a.name FROM author a WHERE a.author_id = book.author_id) as author_name, (SELECT p.name FROM press p WHERE p.press_id = book.press_id) as publisher_name FROM book ORDER BY sale_amount DESC LIMIT 3",
        "SELECT topHead.title, aut.name, pr.name FROM (SELECT * FROM book ORDER BY sale_amount DESC LIMIT 3) topHead JOIN author aut ON topHead.author_id = aut.author_id JOIN press pr ON topHead.press_id = pr.press_id",
        "SELECT b.title, (SELECT name FROM author WHERE author_id = b.author_id) as author, (SELECT name FROM press WHERE press_id = b.press_id) as publisher FROM book b ORDER BY sale_amount DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "nlq": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
    "infer_predictions": [
      [
        "SELECT title, author.name, press.name FROM book JOIN author ON book.author_id = author.author_id JOIN press ON book.press_id = press.press_id ORDER BY sale_amount DESC LIMIT 3",
        "SELECT book.title, author.name, press.name FROM book INNER JOIN author ON book.author_id = author.author_id INNER JOIN press ON book.press_id = press.press_id ORDER BY book.sale_amount DESC LIMIT 3",
        "SELECT b.title, a.name, p.name FROM book b, author a, press p WHERE b.author_id = a.author_id AND b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3",
        "SELECT b.title, a.name, p.name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3",
        "SELECT b.title AS BookTitle, a.name AS AuthorName, p.name AS PressName FROM book b LEFT JOIN author a ON b.author_id = a.author_id LEFT JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3",
        "SELECT first3.title, creators.name, publishers.name FROM book AS first3 INNER JOIN author AS creators ON first3.author_id = creators.author_id INNER JOIN press AS publishers ON first3.press_id = publishers.press_id ORDER BY first3.sale_amount DESC LIMIT 3",
        "SELECT b.title as Title, a.name as Name, p.name as Press FROM book b INNER JOIN author a JOIN press p ON b.author_id = a.author_id AND b.press_id = p.press_id ORDER BY b.sale_amount DESC LIMIT 3"
      ]
    ]
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "nlq": "Find the name and total book sale amount of each press.",
    "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
    "infer_predictions": [
      [
        "SELECT p.name, SUM(b.sale_amount) AS TotalSaleAmount FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.name",
        "SELECT p.name, TOTAL(b.sale_amount) FROM press p INNER JOIN book b ON p.press_id = b.press_id GROUP BY p.name",
        "SELECT p.name, SUM(b.sale_amount) FROM press p, book b WHERE p.press_id = b.press_id GROUP BY p.name",
        "SELECT p.name, SUM(sale_amount) AS TotalSaleAmount FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.press_id, p.name",
        "SELECT name, SUM(sale_amount) FROM press INNER JOIN book USING(press_id) GROUP BY name",
        "SELECT press.name, SUM(book.sale_amount) FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.name",
        "SELECT press.name, SUM(sale_amount) FROM press, book WHERE press.press_id = book.press_id GROUP BY press.name",
        "SELECT p.name, SUM(b.sale_amount) as Total_Sales FROM press p JOIN book b USING(press_id) GROUP BY p.name",
        "SELECT p.name, TOTAL(b.sale_amount) AS TotalSales FROM press p LEFT JOIN book b ON p.press_id = b.press_id GROUP BY p.name"
      ]
    ]
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "nlq": "What are the name and total book sale amount of each press?",
    "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
    "infer_predictions": [
      [
        "SELECT p.name, SUM(b.sale_amount) AS TotalSaleAmount FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.name",
        "SELECT name, SUM(sale_amount) FROM press INNER JOIN book ON press.press_id = book.press_id GROUP BY name",
        "SELECT p.name AS PressName, TOTAL(b.sale_amount) AS TotalBooksSold FROM press p, book b WHERE p.press_id = b.press_id GROUP BY p.name",
        "SELECT press.name, SUM(book.sale_amount) AS TotalSales FROM press, book WHERE press.press_id = book.press_id GROUP BY press.name",
        "SELECT name, SUM(sale_amount) FROM press JOIN book USING(press_id) GROUP BY name",
        "SELECT p.name, SUM(b.sale_amount) AS TotalSales FROM press AS p INNER JOIN book AS b ON p.press_id = b.press_id GROUP BY p.name",
        "SELECT name, SUM(sale_amount) AS TotalSale FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.name",
        "SELECT Name, TOTAL(sale_amount) FROM press p LEFT JOIN book b ON p.press_id = b.press_id GROUP BY Name",
        "SELECT press.name AS Name, SUM(book.sale_amount) AS TotalSaleAmount FROM book INNER JOIN press ON press.press_id = book.press_id GROUP BY press.name"
      ]
    ]
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "nlq": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
    "infer_predictions": [
      [
        "SELECT p.name, COUNT(b.book_id) FROM press p JOIN book b ON p.press_id = b.press_id WHERE b.sale_amount > 1000 GROUP BY p.press_id, p.name",
        "SELECT press.name, COUNT(book.book_id) AS total_books FROM press JOIN book ON press.press_id = book.press_id WHERE book.sale_amount > 1000 GROUP BY press.name",
        "SELECT name, COUNT(book_id) FROM press INNER JOIN book ON press.press_id = book.press_id WHERE sale_amount > 1000 GROUP BY press.name",
        "SELECT p.name, COUNT(*) FROM press p INNER JOIN book b ON p.press_id = b.press_id WHERE b.sale_amount > 1000 GROUP BY p.name",
        "SELECT name, COUNT(book_id) FROM press, book WHERE press.press_id = book.press_id AND book.sale_amount > 1000 GROUP BY press.name",
        "SELECT p.name AS press_name, COUNT(b.book_id) AS num_books FROM press p, book b WHERE p.press_id = b.press_id AND b.sale_amount > 1000 GROUP BY p.name",
        "SELECT press.name, COUNT(*) AS num_books FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.name HAVING SUM(book.sale_amount) > 1000",
        "SELECT name, COUNT(book_id) FROM book JOIN press ON book.press_id = press.press_id AND book.sale_amount > 1000 GROUP BY press.name",
        "SELECT p.name as Publisher_Name, COUNT(b.book_id) as Books_Sold FROM press p, book b WHERE p.press_id = b.press_id GROUP BY p.name HAVING MAX(b.sale_amount) > 1000"
      ]
    ]
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "nlq": "For each press, return its name and the number of books that have sale amount above 1000.",
    "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
    "infer_predictions": [
      [
        "SELECT p.name, COUNT(*) FROM press p JOIN book b ON p.press_id = b.press_id WHERE b.sale_amount > 1000 GROUP BY p.name",
        "SELECT press.name, COUNT(book.book_id) FROM press INNER JOIN book ON press.press_id = book.press_id WHERE book.sale_amount > 1000 GROUP BY press.name",
        "SELECT p.name, COUNT(book_id) AS book_count FROM press p, book b WHERE p.press_id = b.press_id AND b.sale_amount > 1000 GROUP BY p.name",
        "SELECT press.name, (SELECT COUNT(*) FROM book WHERE book.press_id = press.press_id AND book.sale_amount > 1000) AS num_books FROM press",
        "SELECT press.name, COUNT(DISTINCT book.book_id) FROM book JOIN press ON book.press_id = press.press_id WHERE book.sale_amount > 1000 GROUP BY press.name",
        "SELECT p.name, COUNT(b.book_id) FROM press AS p LEFT JOIN book AS b ON p.press_id = b.press_id WHERE b.sale_amount > 1000 GROUP BY p.name",
        "SELECT p.name, (SELECT COUNT(book_id) FROM book b WHERE b.press_id = p.press_id AND b.sale_amount > 1000) FROM press p",
        "SELECT name, SUM(CASE WHEN sale_amount > 1000 THEN 1 ELSE 0 END) FROM press JOIN book ON press.press_id = book.press_id GROUP BY name"
      ]
    ]
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "nlq": "What is the name of the author of best selling book?",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN book ON author.author_id = book.author_id ORDER BY book.sale_amount DESC LIMIT 1",
        "SELECT name FROM author WHERE author_id = (SELECT author_id FROM book ORDER BY sale_amount DESC LIMIT 1)",
        "SELECT a.name FROM author a, book b WHERE a.author_id = b.author_id ORDER BY b.sale_amount DESC LIMIT 1",
        "SELECT a.name FROM author a INNER JOIN book b ON a.author_id = b.author_id ORDER BY b.sale_amount DESC LIMIT 1",
        "SELECT a.name FROM author a WHERE a.author_id IN (SELECT author_id FROM book ORDER BY sale_amount DESC LIMIT 1)",
        "SELECT name FROM author WHERE author_id = (SELECT author_id FROM book WHERE sale_amount = (SELECT MAX(sale_amount) FROM book))",
        "WITH BestSellingBook AS (SELECT MAX(sale_amount) AS MaxSale FROM book) SELECT a.name FROM author a JOIN book b ON a.author_id = b.author_id, BestSellingBook WHERE b.sale_amount = BestSellingBook.MaxSale",
        "SELECT author.name FROM author JOIN (SELECT author_id, MAX(sale_amount) FROM book GROUP BY author_id) AS b ON author.author_id = b.author_id",
        "SELECT name FROM author WHERE author_id = (SELECT author_id FROM book GROUP BY author_id ORDER BY MAX(sale_amount) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "nlq": "Who wrote the best selling book? Give me the author name.",
    "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name FROM author JOIN book ON author.author_id = book.author_id ORDER BY book.sale_amount DESC LIMIT 1",
        "SELECT a.name FROM author a INNER JOIN book b ON a.author_id = b.author_id WHERE b.sale_amount = (SELECT MAX(sale_amount) FROM book) LIMIT 1",
        "SELECT (SELECT name FROM author WHERE author_id = b.author_id) AS author_name FROM book b WHERE sale_amount = (SELECT MAX(sale_amount) FROM book) LIMIT 1",
        "SELECT a.name FROM book b, author a WHERE b.author_id = a.author_id ORDER BY b.sale_amount DESC LIMIT 1",
        "SELECT name FROM author WHERE author_id = (SELECT author_id FROM book ORDER BY sale_amount DESC LIMIT 1)",
        "SELECT author_name.name FROM author author_name, book WHERE book.author_id = author_name.author_id AND book.sale_amount = (SELECT MAX(book.sale_amount) FROM book)",
        "WITH TopSale AS (SELECT author_id FROM book ORDER BY sale_amount DESC LIMIT 1) SELECT name FROM author JOIN TopSale ON author.author_id = TopSale.author_id"
      ]
    ]
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "nlq": "find the name and gender of the author who published the most books.",
    "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name, author.gender FROM author JOIN book ON author.author_id = book.author_id GROUP BY author.author_id ORDER BY COUNT(book.title) DESC LIMIT 1",
        "SELECT a.name, a.gender FROM author AS a INNER JOIN book AS b ON a.author_id = b.author_id GROUP BY a.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT author.name, author.gender FROM author, book WHERE author.author_id = book.author_id GROUP BY author.author_id ORDER BY COUNT(book.title) DESC LIMIT 1",
        "SELECT a.name, a.gender FROM author a, book b WHERE a.author_id = b.author_id GROUP BY a.author_id ORDER BY COUNT(b.title) DESC LIMIT 1",
        "SELECT name, gender FROM (SELECT author.name AS name, author.gender AS gender, COUNT(book.title) AS book_count FROM author JOIN book ON author.author_id = book.author_id GROUP BY author.author_id) ORDER BY book_count DESC LIMIT 1",
        "SELECT a.name, a.gender FROM author a LEFT JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id ORDER BY COUNT(b.title) DESC LIMIT 1",
        "SELECT name, gender FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(title) DESC LIMIT 1)",
        "SELECT author.name, author.gender FROM author WHERE author.author_id = (SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(title) DESC LIMIT 1)",
        "SELECT a.name, a.gender FROM (SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1) b JOIN author a ON a.author_id = b.author_id"
      ]
    ]
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "nlq": "Who wrote the largest number of books? Give me the author name and gender.",
    "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author.name, author.gender FROM author WHERE author.author_id = (SELECT book.author_id FROM book GROUP BY book.author_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT a.name, a.gender FROM author a INNER JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id ORDER BY COUNT(b.book_id) DESC LIMIT 1",
        "SELECT A.name, A.gender FROM author A JOIN (SELECT author_id, COUNT(book_id) AS total_books FROM book GROUP BY author_id ORDER BY total_books DESC LIMIT 1) B ON A.author_id = B.author_id",
        "SELECT name, gender FROM author WHERE author_id IN (SELECT author_id FROM book GROUP BY author_id ORDER BY COUNT(book_id) DESC LIMIT 1)",
        "WITH AuthorBookCount AS (SELECT author_id, COUNT(*) AS num_books FROM book GROUP BY author_id) SELECT name, gender FROM author JOIN AuthorBookCount ON author.author_id = AuthorBookCount.author_id ORDER BY num_books DESC LIMIT 1",
        "SELECT top.name, top.gender FROM (SELECT author.name AS name, author.gender AS gender, COUNT(book.author_id) AS book_count FROM author JOIN book ON author.author_id = book.author_id GROUP BY author.author_id ORDER BY book_count DESC LIMIT 1) AS top",
        "SELECT name, gender FROM author WHERE author_id = (SELECT author_id FROM book GROUP BY author_id HAVING COUNT(book_id) = (SELECT MAX(count) FROM (SELECT COUNT(book_id) AS count FROM book GROUP BY author_id)))",
        "SELECT a.name, a.gender FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.author_id HAVING COUNT(b.book_id) = (SELECT MAX(total_books) FROM (SELECT COUNT(book_id) AS total_books FROM book GROUP BY author_id) tmp)",
        "SELECT * FROM (SELECT author.name, author.gender FROM author, book WHERE author.author_id = book.author_id GROUP BY book.author_id ORDER BY COUNT(book.book_id) DESC LIMIT 1) LIMIT 1"
      ]
    ]
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "nlq": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
    "infer_predictions": [
      [
        "SELECT DISTINCT a.name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor' AND b.author_id = a.author_id)",
        "SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b INNER JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor')",
        "SELECT a.name FROM author a LEFT JOIN book b ON a.author_id = b.author_id LEFT JOIN press p ON b.press_id = p.press_id WHERE p.name != 'Accor' OR p.name IS NULL GROUP BY a.name",
        "SELECT a.name FROM author a LEFT OUTER JOIN ( SELECT b.author_id FROM book b JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor') sub ON a.author_id = sub.author_id WHERE sub.author_id IS NULL",
        "SELECT name FROM author WHERE author_id NOT IN (SELECT b.author_id FROM book b, press p WHERE b.press_id = p.press_id AND p.name = 'Accor')",
        "SELECT name FROM author WHERE NOT EXISTS (SELECT * FROM book JOIN press ON book.press_id = press.press_id WHERE press.name = 'Accor' AND book.author_id = author.author_id)",
        "SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT DISTINCT b.author_id FROM book b WHERE EXISTS (SELECT 1 FROM press p WHERE p.press_id = b.press_id AND p.name = 'Accor'))",
        "SELECT DISTINCT a.name FROM author a WHERE NOT EXISTS (SELECT * FROM book b JOIN press p ON p.press_id = b.press_id WHERE p.name = 'Accor' AND b.author_id = a.author_id)",
        "SELECT a.name FROM author a WHERE 0 = (SELECT COUNT(*) FROM book b JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor' AND b.author_id = a.author_id)",
        "SELECT DISTINCT a.name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b, press p WHERE b.press_id = p.press_id AND p.name = 'Accor')"
      ]
    ]
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "nlq": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
    "infer_predictions": [
      [
        "SELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book WHERE press_id IN (SELECT press_id FROM press WHERE name = 'Accor'))",
        "SELECT author.name FROM author LEFT JOIN book ON author.author_id = book.author_id LEFT JOIN press ON book.press_id = press.press_id WHERE press.name IS NULL OR press.name <> 'Accor'",
        "SELECT DISTINCT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book JOIN press ON book.press_id = press.press_id WHERE press.name = 'Accor')",
        "SELECT a.name FROM author a WHERE NOT EXISTS (SELECT 1 FROM book b JOIN press p ON b.press_id = p.press_id WHERE p.name = 'Accor' AND b.author_id = a.author_id)",
        "SELECT name FROM author EXCEPT SELECT author.name FROM author JOIN book ON author.author_id = book.author_id JOIN press ON book.press_id = press.press_id WHERE press.name = 'Accor'",
        "SELECT a.name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b, press p WHERE b.press_id = p.press_id AND p.name = 'Accor')",
        "SELECT author.name FROM author LEFT JOIN (SELECT * FROM book WHERE press_id IN (SELECT press_id FROM press WHERE name = 'Accor')) as b ON author.author_id = b.author_id WHERE b.book_id IS NULL",
        "SELECT a.name FROM author a WHERE NOT EXISTS (SELECT NULL FROM book b INNER JOIN press p ON b.press_id = p.press_id AND p.name = 'Accor' WHERE a.author_id = b.author_id)",
        "SELECT name FROM author a WHERE a.author_id NOT IN (SELECT b.author_id FROM book b INNER JOIN press p ON b.press_id = p.press_id AND p.name = 'Accor')"
      ]
    ]
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "nlq": "Find the name and the yearly profit in billion for press that published more than two books.",
    "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT p.name, p.year_profits_billion FROM press p WHERE (SELECT COUNT(*) FROM book b WHERE b.press_id = p.press_id) > 2",
        "SELECT name, year_profits_billion FROM press WHERE press_id IN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(book_id) > 2)",
        "SELECT press.name, press.year_profits_billion FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.press_id HAVING COUNT(book.book_id) > 2",
        "SELECT p.name, p.year_profits_billion FROM press p INNER JOIN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(*) > 2) as b ON p.press_id = b.press_id",
        "SELECT p.name, p.year_profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.press_id = p.press_id GROUP BY b.press_id HAVING COUNT(*) > 2)",
        "SELECT distinct p.name, p.year_profits_billion FROM press p, book b WHERE p.press_id = b.press_id GROUP BY p.press_id, p.name, p.year_profits_billion HAVING COUNT(b.book_id) > 2",
        "SELECT p.name, p.year_profits_billion FROM press p WHERE p.press_id IN (SELECT b.press_id FROM book b GROUP BY b.press_id HAVING COUNT(b.book_id) > 2)",
        "SELECT name, year_profits_billion FROM press WHERE press_id IN (SELECT press_id FROM book b GROUP BY press_id HAVING COUNT(DISTINCT book_id) > 2)",
        "SELECT p.name, p.year_profits_billion FROM press p JOIN (SELECT press_id, COUNT(*) as cnt FROM book GROUP BY press_id HAVING cnt > 2) b ON p.press_id = b.press_id",
        "SELECT p.name, p.year_profits_billion FROM press p WHERE (SELECT COUNT(book_id) FROM book WHERE press_id = p.press_id) > 2"
      ]
    ]
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "nlq": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
    "infer_predictions": [
      [
        "SELECT p.name, p.year_profits_billion FROM press p JOIN book b ON p.press_id = b.press_id GROUP BY p.press_id HAVING COUNT(b.book_id) > 2",
        "SELECT p.name, p.year_profits_billion FROM press p WHERE p.press_id IN (SELECT b.press_id FROM book b GROUP BY b.press_id HAVING COUNT(DISTINCT b.book_id) > 2)",
        "SELECT p.name, p.year_profits_billion FROM press p INNER JOIN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(*) > 2) AS sub ON p.press_id = sub.press_id",
        "SELECT press.name, press.year_profits_billion FROM press JOIN book ON press.press_id = book.press_id GROUP BY press.press_id HAVING COUNT(book.book_id) > 2",
        "SELECT name, year_profits_billion FROM press WHERE press_id IN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(book_id) > 2)",
        "SELECT p.name, p.year_profits_billion FROM press p WHERE EXISTS (SELECT 1 FROM book b WHERE b.press_id = p.press_id GROUP BY b.press_id HAVING COUNT(b.book_id) > 2)",
        "SELECT press.name, press.year_profits_billion FROM press, book WHERE press.press_id = book.press_id GROUP BY press.press_id HAVING COUNT(DISTINCT book.book_id) > 2",
        "SELECT name, year_profits_billion FROM press WHERE press_id IN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(DISTINCT book_id) > 2)",
        "SELECT p.name, p.year_profits_billion FROM press p LEFT JOIN (SELECT press_id FROM book GROUP BY press_id HAVING COUNT(book_id) > 2) AS pq ON p.press_id = pq.press_id WHERE pq.press_id IS NOT NULL",
        "SELECT p.name, p.year_profits_billion FROM press AS p WHERE (SELECT COUNT(*) FROM book AS b WHERE b.press_id = p.press_id) > 2"
      ]
    ]
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many authors do we have?",
    "gold": "SELECT count(*) FROM Authors",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT author_name) FROM authors",
        "SELECT COUNT(*) AS Total_Authors FROM (SELECT DISTINCT author_name FROM authors)",
        "SELECT COUNT(author_name) FROM (SELECT DISTINCT author_name FROM authors)",
        "SELECT COUNT(author_name) AS NumberOfAuthors FROM authors GROUP BY author_name HAVING COUNT(author_name) >= 1",
        "SELECT SUM(CASE WHEN author_name IS NOT NULL THEN 1 ELSE 0 END) FROM (SELECT DISTINCT author_name FROM authors)",
        "SELECT COUNT(*) FROM authors GROUP BY author_name",
        "SELECT COUNT(author_name) FROM authors WHERE author_name IS NOT NULL",
        "SELECT COUNT(DISTINCT name) FROM (SELECT author_name AS name FROM authors)",
        "SELECT COUNT(a.author_name) FROM authors a WHERE EXISTS (SELECT 1 FROM authors YES WHERE YES.author_name = a.author_name)"
      ]
    ]
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all author names.",
    "gold": "SELECT author_name FROM Authors",
    "infer_predictions": [
      [
        "SELECT author_name FROM authors",
        "SELECT a.author_name FROM authors a",
        "SELECT DISTINCT a.author_name FROM authors a",
        "SELECT author_name FROM authors GROUP BY author_name",
        "SELECT a.author_name FROM authors a WHERE a.author_name IS NOT NULL",
        "SELECT author_name FROM authors WHERE author_name IS NOT NULL GROUP BY author_name",
        "SELECT DISTINCT a.author_name FROM authors a WHERE a.author_name IS NOT NULL"
      ]
    ]
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the names and other details for all authors.",
    "gold": "SELECT author_name ,  other_details FROM Authors",
    "infer_predictions": [
      [
        "SELECT author_name, other_details FROM authors",
        "SELECT a.author_name, a.other_details FROM authors a",
        "SELECT author_name, other_details FROM authors ORDER BY author_name",
        "SELECT author_name, other_details FROM authors GROUP BY author_name, other_details",
        "SELECT * FROM authors WHERE author_name IS NOT NULL",
        "SELECT author_name AS Author, other_details AS Details FROM authors",
        "SELECT LOWER(author_name), UPPER(other_details) FROM authors"
      ]
    ]
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the other details for the author Addison Denesik.",
    "gold": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
    "infer_predictions": [
      [
        "SELECT other_details FROM authors WHERE author_name = 'Addison Denesik'",
        "SELECT a.other_details FROM authors a WHERE a.author_name = 'Addison Denesik'",
        "SELECT other_details FROM authors WHERE author_name LIKE 'Addison Denesik'",
        "SELECT other_details FROM authors WHERE author_name = 'Addison Denesik' LIMIT 1",
        "SELECT other_details FROM authors WHERE author_name = 'Addison Denesik' AND ROWID = (SELECT MIN(ROWID) FROM authors WHERE author_name = 'Addison Denesik')",
        "SELECT other_details FROM authors WHERE author_name IN (SELECT author_name FROM authors WHERE author_name = 'Addison Denesik')",
        "SELECT a.other_details FROM authors a WHERE a.author_name IN (SELECT b.author_name FROM authors b WHERE b.author_name = 'Addison Denesik')"
      ]
    ]
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the number of documents.",
    "gold": "SELECT count(*) FROM Documents",
    "infer_predictions": [
      [
        "SELECT COUNT(document_id) FROM documents",
        "SELECT COUNT(*) FROM documents",
        "SELECT COUNT(d.document_id) FROM documents d",
        "SELECT COUNT(1) FROM documents",
        "SELECT COUNT(DOCUMENT_ID) AS TOTAL_DOCUMENTS FROM DOCUMENTS",
        "SELECT (SELECT COUNT(*) FROM documents) AS TotalNumberOfDocuments"
      ]
    ]
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Who is the author of the document with id 4?",
    "gold": "SELECT author_name FROM Documents WHERE document_id  =  4",
    "infer_predictions": [
      [
        "SELECT author_name FROM documents WHERE document_id = 4",
        "SELECT D.author_name FROM documents D WHERE D.document_id = 4",
        "SELECT author_name FROM documents WHERE document_id IN (SELECT document_id FROM documents WHERE document_id = 4)",
        "SELECT documents.author_name FROM documents INNER JOIN authors ON documents.author_name = authors.author_name WHERE documents.document_id = 4",
        "SELECT author_name FROM documents WHERE exists (SELECT 1 FROM documents WHERE document_id = 4 and documents.document_id = documents.document_id)",
        "SELECT d.author_name FROM documents d JOIN authors a ON d.author_name = a.author_name WHERE d.document_id = 4",
        "SELECT DISTINCT d.author_name FROM documents d WHERE d.document_id = 4",
        "SELECT author_name FROM (SELECT * FROM documents WHERE document_id = 4)",
        "SELECT d.author_name AS author FROM documents d WHERE d.document_id = 4"
      ]
    ]
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Who is the author of the document \"Travel to Brazil\"?",
    "gold": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
    "infer_predictions": [
      [
        "SELECT d.author_name FROM documents d WHERE d.document_name = 'Travel to Brazil'",
        "SELECT documents.author_name FROM documents WHERE documents.document_name = 'Travel to Brazil'",
        "SELECT a.author_name FROM authors a JOIN documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to Brazil'",
        "SELECT documents.author_name FROM documents JOIN authors ON documents.author_name = authors.author_name WHERE documents.document_name = 'Travel to Brazil'",
        "SELECT authors.author_name FROM documents INNER JOIN authors ON documents.author_name = authors.author_name WHERE documents.document_name = 'Travel to Brazil'",
        "SELECT author_name FROM documents WHERE document_name = 'Travel to Brazil' LIMIT 1",
        "SELECT a.author_name FROM authors AS a INNER JOIN documents AS d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to Brazil'"
      ]
    ]
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many documents does has the author Era Kerluke written?",
    "gold": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM documents WHERE author_name = 'Era Kerluke'",
        "SELECT COUNT(document_id) AS Total FROM documents WHERE author_name = 'Era Kerluke'",
        "SELECT COUNT(*) AS count_of_documents FROM documents WHERE documents.author_name = 'Era Kerluke'",
        "SELECT COUNT(1) FROM documents d WHERE d.author_name = 'Era Kerluke'",
        "SELECT COUNT(document_id) FROM documents WHERE documents.author_name = 'Era Kerluke'",
        "SELECT COUNT(d.document_id) AS DocumentCount FROM documents d WHERE d.author_name = 'Era Kerluke'",
        "SELECT COUNT(*) AS DocumentCount FROM documents d WHERE d.author_name = 'Era Kerluke'",
        "SELECT COUNT(document_id) FROM documents d WHERE d.author_name = 'Era Kerluke'",
        "SELECT COUNT(*) FROM documents d WHERE d.author_name = 'Era Kerluke'"
      ]
    ]
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the names and descriptions for all documents.",
    "gold": "SELECT document_name ,  document_description FROM Documents",
    "infer_predictions": [
      [
        "SELECT document_name, document_description FROM documents",
        "SELECT d.document_name, d.document_description FROM documents d",
        "SELECT documents.document_name AS Name, documents.document_description AS Description FROM documents",
        "SELECT document_name, document_description FROM documents GROUP BY document_name, document_description",
        "SELECT document_name, document_description FROM documents ORDER BY document_name",
        "SELECT document_name, MIN(document_description) AS document_description FROM documents GROUP BY document_name",
        "SELECT document_name || ' - ' || document_description AS FullDescription FROM documents"
      ]
    ]
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the ids and names for all documents by author Bianka Cummings.",
    "gold": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
    "infer_predictions": [
      [
        "SELECT document_id, document_name FROM documents WHERE author_name = 'Bianka Cummings'",
        "SELECT d.document_id, d.document_name FROM documents d WHERE d.author_name = 'Bianka Cummings'",
        "SELECT document_id AS ID, document_name AS Name FROM documents WHERE author_name = 'Bianka Cummings'",
        "SELECT d1.document_id, d1.document_name FROM documents d1 WHERE d1.author_name = 'Bianka Cummings'",
        "SELECT d.document_id, d.document_name FROM documents d INNER JOIN authors a ON d.author_name = a.author_name WHERE a.author_name = 'Bianka Cummings'",
        "SELECT d1.document_id, d1.document_name FROM documents d1 INNER JOIN authors a on d1.author_name = a.author_name WHERE a.author_name = 'Bianka Cummings'",
        "SELECT document_id, document_name FROM documents WHERE author_name IN (SELECT author_name FROM authors WHERE author_name = 'Bianka Cummings')",
        "SELECT DISTINCT d.document_id, d.document_name FROM documents d JOIN authors a ON d.author_name = a.author_name WHERE d.author_name = 'Bianka Cummings'"
      ]
    ]
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the author name and details for the document \"Travel to China\".",
    "gold": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
    "infer_predictions": [
      [
        "SELECT authors.author_name, authors.other_details FROM documents JOIN authors ON documents.author_name = authors.author_name WHERE documents.document_name = 'Travel to China'",
        "SELECT a.author_name, a.other_details FROM authors a INNER JOIN documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
        "SELECT a1.author_name, a1.other_details FROM authors a1, documents d1 WHERE a1.author_name = d1.author_name AND d1.document_name = 'Travel to China'",
        "SELECT DISTINCT a.author_name, a.other_details FROM authors a JOIN documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China'",
        "SELECT d.author_name, a.other_details FROM documents d LEFT JOIN authors AS a ON d.author_name = a.author_name WHERE d.document_name = 'Travel to China'",
        "SELECT authorDetails.author_name, authorDetails.other_details FROM authors authorDetails JOIN documents docDetails ON authorDetails.author_name = docDetails.author_name WHERE docDetails.document_name = 'Travel to China'",
        "SELECT chosenAuthor.author_name, chosenAuthor.other_details FROM authors as chosenAuthor INNER JOIN documents as assignedDoc ON chosenAuthor.author_name = assignedDoc.author_name WHERE assignedDoc.document_name = 'Travel to China'"
      ]
    ]
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all author names and number of documents corresponding to each.",
    "gold": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
    "infer_predictions": [
      [
        "SELECT authors.author_name, COUNT(documents.document_id) FROM authors JOIN documents ON authors.author_name = documents.author_name GROUP BY authors.author_name",
        "SELECT A.author_name, COUNT(D.document_id) FROM authors A JOIN documents D ON A.author_name = D.author_name GROUP BY A.author_name",
        "SELECT AUTHOR.author_name, COUNT(*) FROM authors AUTHOR INNER JOIN documents DOC ON AUTHOR.author_name = DOC.author_name GROUP BY AUTHOR.author_name",
        "SELECT author_name, COUNT(document_id) AS total_documents FROM documents GROUP BY author_name",
        "SELECT a.author_name, COUNT(d.document_id) AS doc_count FROM authors a, documents d WHERE a.author_name = d.author_name GROUP BY a.author_name",
        "SELECT authors.author_name, COUNT(*) FROM documents, authors WHERE authors.author_name = documents.author_name GROUP BY authors.author_name",
        "SELECT author_name, (SELECT COUNT(*) FROM documents WHERE documents.author_name = authors.author_name) AS DocumentCount FROM authors ORDER BY author_name",
        "SELECT a.author_name, (SELECT COUNT(*) FROM documents WHERE author_name = a.author_name) FROM authors a GROUP BY a.author_name"
      ]
    ]
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the name of the author with most number of documents?",
    "gold": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT author_name FROM (SELECT author_name, COUNT(*) AS doc_count FROM documents GROUP BY author_name) ORDER BY doc_count DESC LIMIT 1",
        "SELECT authors.author_name FROM authors JOIN (SELECT author_name, COUNT(document_id) AS total_docs FROM documents GROUP BY author_name) doc_counts ON authors.author_name = doc_counts.author_name ORDER BY total_docs DESC LIMIT 1",
        "SELECT author_name FROM documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1",
        "SELECT d.author_name FROM documents d GROUP BY d.author_name ORDER BY COUNT(d.document_id) DESC LIMIT 1",
        "SELECT a.author_name FROM authors a WHERE a.author_name IN (SELECT d.author_name FROM documents d GROUP BY d.author_name ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT author_name FROM (SELECT author_name FROM documents GROUP BY author_name ORDER BY COUNT(*) DESC) LIMIT 1",
        "SELECT author_name FROM documents GROUP BY author_name HAVING COUNT(document_id) = (SELECT MAX(doc_counts.total_docs) FROM (SELECT COUNT(document_id) as total_docs FROM documents GROUP BY author_name) doc_counts)",
        "SELECT d.author_name FROM documents d LEFT JOIN authors a ON d.author_name = a.author_name GROUP BY d.author_name ORDER BY COUNT(d.document_id) DESC LIMIT 1",
        "SELECT author_name FROM documents d WHERE EXISTS (SELECT DISTINCT author_name from documents GROUP BY author_name ORDER BY COUNT(author_name) DESC LIMIT 1) AND d.author_name = author_name GROUP BY author_name"
      ]
    ]
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the names for authors with at least two documents.",
    "gold": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT a.author_name FROM authors a WHERE 2 <= (SELECT COUNT(*) FROM documents d WHERE d.author_name = a.author_name)",
        "SELECT authors.author_name FROM authors INNER JOIN documents ON authors.author_name = documents.author_name GROUP BY authors.author_name HAVING COUNT(documents.document_id) > 1",
        "SELECT a.author_name FROM authors a JOIN documents d ON a.author_name = d.author_name GROUP BY a.author_name HAVING COUNT(d.document_id) >= 2",
        "SELECT DISTINCT A.author_name FROM authors A WHERE (SELECT COUNT(*) FROM documents D WHERE D.author_name = A.author_name) > 1",
        "SELECT A.author_name FROM authors A WHERE EXISTS (SELECT 1 FROM documents D WHERE D.author_name = A.author_name GROUP BY D.author_name HAVING COUNT(D.document_name) > 1)",
        "SELECT T.author_name FROM (SELECT author_name, COUNT(document_id) AS doc_count FROM documents GROUP BY author_name HAVING doc_count > 1) T",
        "SELECT author.author_name FROM (SELECT author_name, COUNT(*) num_documents FROM documents GROUP BY author_name HAVING num_documents >= 2) author",
        "SELECT Author_name FROM authors WHERE author_name IN (SELECT author_name FROM documents GROUP BY author_name HAVING COUNT(document_id) > 1)",
        "SELECT author_name FROM (SELECT author_name FROM documents GROUP BY author_name HAVING COUNT(document_id) > 1) as result",
        "SELECT first.author_name FROM authors first WHERE 1 < (SELECT COUNT(*) FROM documents second WHERE second.author_name = first.author_name)"
      ]
    ]
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many business processes do we have?",
    "gold": "SELECT count(*) FROM Business_processes",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM business_processes;",
        "SELECT COUNT(process_id) FROM business_processes;",
        "SELECT SUM(1) FROM business_processes;",
        "SELECT COUNT(*) AS total_processes FROM business_processes;",
        "SELECT COUNT(DISTINCT bp.process_id) FROM business_processes bp;",
        "SELECT COUNT(*) FROM (SELECT process_id FROM business_processes) AS total;",
        "SELECT SUM(CASE WHEN process_id IS NOT NULL THEN 1 ELSE 0 END) FROM business_processes;"
      ]
    ]
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the next process id, process name, process description for process with id 9.",
    "gold": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
    "infer_predictions": [
      [
        "SELECT bp2.process_id AS next_process_id, bp2.process_name, bp2.process_description FROM business_processes bp1 JOIN business_processes bp2 ON bp1.next_process_id = bp2.process_id WHERE bp1.process_id = 9",
        "SELECT next_process.process_id AS next_process_id, next_process.process_name, next_process.process_description FROM business_processes current INNER JOIN business_processes next_process ON current.next_process_id = next_process.process_id WHERE current.process_id = 9",
        "SELECT next_process_id, process_name, process_description FROM business_processes WHERE process_id IN (SELECT next_process_id FROM business_processes WHERE process_id = 9)",
        "SELECT bp.next_process_id, bp2.process_name AS next_process_name, bp2.process_description AS next_process_description FROM business_processes bp LEFT JOIN business_processes bp2 ON bp.next_process_id = bp2.process_id WHERE bp.process_id = 9",
        "SELECT p.next_process_id, n.process_name, n.process_description FROM business_processes AS p JOIN business_processes AS n ON p.next_process_id = n.process_id WHERE p.process_id = 9",
        "SELECT next.next_process_id, next.process_name, next.process_description FROM business_processes curr INNER JOIN business_processes next ON curr.next_process_id = next.process_id WHERE curr.process_id = 9",
        "SELECT final.next_process_id, proc_info.process_name, proc_info.process_description FROM business_processes inside JOIN business_processes final ON inside.process_id = final.process_id JOIN business_processes proc_info ON final.next_process_id = proc_info.process_id WHERE inside.process_id = 9"
      ]
    ]
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the process name for the next process of the process with id 9?",
    "gold": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
    "infer_predictions": [
      [
        "SELECT bp2.process_name FROM business_processes bp1 JOIN business_processes bp2 ON bp1.next_process_id = bp2.process_id WHERE bp1.process_id = 9",
        "SELECT process_name FROM business_processes WHERE process_id = (SELECT next_process_id FROM business_processes WHERE process_id = 9)",
        "SELECT next_process.process_name FROM business_processes next_process, business_processes current_process WHERE current_process.next_process_id = next_process.process_id AND current_process.process_id = 9",
        "SELECT bp2.process_name from business_processes bp1, business_processes bp2 WHERE bp1.process_id = 9 AND bp1.next_process_id = bp2.process_id",
        "SELECT process_name FROM business_processes WHERE process_id IN (SELECT next_process_id FROM business_processes WHERE process_id = 9)",
        "SELECT b.process_name FROM business_processes b JOIN business_processes bp ON bp.next_process_id = b.process_id AND bp.process_id = 9",
        "SELECT NEXT.process_name FROM business_processes AS CURRENT JOIN business_processes AS NEXT ON CURRENT.next_process_id = NEXT.process_id WHERE CURRENT.process_id = 9",
        "SELECT process_name FROM business_processes bp1 WHERE EXISTS (SELECT 1 FROM business_processes bp2 WHERE bp2.process_id = 9 AND bp2.next_process_id = bp1.process_id)"
      ]
    ]
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the number of process outcomes.",
    "gold": "SELECT count(*) FROM Process_outcomes",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM process_outcomes",
        "SELECT COUNT(process_outcome_code) FROM process_outcomes",
        "SELECT COUNT(process_outcome_description) FROM process_outcomes WHERE process_outcome_code IS NOT NULL",
        "SELECT COUNT(1) FROM process_outcomes",
        "SELECT COUNT(*) AS CountOutcomes FROM process_outcomes",
        "SELECT COUNT(DISTINCT process_outcome_description) FROM process_outcomes",
        "SELECT COUNT(process_outcome_code) AS Number_of_Outcomes FROM process_outcomes",
        "SELECT COUNT(*) FROM process_outcomes WHERE process_outcome_description IS NOT NULL"
      ]
    ]
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "nlq": "List the codes and descriptions for all process outcomes.",
    "gold": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
    "infer_predictions": [
      [
        "SELECT process_outcome_code, process_outcome_description FROM process_outcomes",
        "SELECT process_outcome_code as Code, process_outcome_description as Description FROM process_outcomes",
        "SELECT p_o.process_outcome_code, p_o.process_outcome_description FROM process_outcomes p_o",
        "SELECT * FROM process_outcomes WHERE process_outcome_code IN (SELECT process_outcome_code FROM process_outcomes)",
        "SELECT po.process_outcome_code, po.process_outcome_description FROM process_outcomes po WHERE po.process_outcome_code IN (SELECT process_outcome_code FROM process_outcomes)",
        "SELECT DISTINCT p.process_outcome_code, p.process_outcome_description FROM process_outcomes p",
        "SELECT process_outcomes.process_outcome_code, process_outcomes.process_outcome_description FROM process_outcomes WHERE process_outcome_code IN (SELECT process_outcome_code FROM process_outcomes)"
      ]
    ]
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the description for the process outcome code working?",
    "gold": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
    "infer_predictions": [
      [
        "SELECT process_outcome_description FROM process_outcomes WHERE process_outcome_code = 'working'",
        "SELECT PO.process_outcome_description FROM process_outcomes PO WHERE PO.process_outcome_code = 'working'",
        "SELECT S.POD FROM (SELECT process_outcome_description AS POD, process_outcome_code AS POC FROM process_outcomes) S WHERE S.POC = 'working'",
        "SELECT O.process_outcome_description FROM process_outcomes O WHERE O.process_outcome_code = 'working'"
      ]
    ]
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the number of process status.",
    "gold": "SELECT count(*) FROM Process_status",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT process_status_code) FROM process_status",
        "SELECT COUNT(*) FROM (SELECT process_status_code FROM process_status GROUP BY process_status_code)",
        "SELECT COUNT(DISTINCT ps.process_status_code) FROM process_status ps",
        "SELECT COUNT(process_status_code) FROM (SELECT DISTINCT process_status_code FROM process_status)",
        "SELECT COUNT(*) FROM process_status GROUP BY process_status_code HAVING COUNT(process_status_code) >= 1",
        "SELECT COUNT(process_status_code) AS status_count FROM process_status",
        "SELECT COUNT(*) AS total_status FROM process_status",
        "SELECT COUNT(DISTINCT process_status_code) FROM process_status WHERE process_status_code IS NOT NULL",
        "SELECT COUNT(process_status_code) FROM process_status WHERE process_status_code IN (SELECT process_status_code FROM process_status GROUP BY process_status_code)",
        "SELECT COUNT(process_status_description) AS num_status FROM process_status"
      ]
    ]
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "nlq": "List the codes and descriptions for all process status.",
    "gold": "SELECT process_status_code ,  process_status_description FROM Process_status",
    "infer_predictions": [
      [
        "SELECT process_status_code, process_status_description FROM process_status;",
        "SELECT psc.process_status_code, psc.process_status_description FROM process_status psc;",
        "SELECT psc.process_status_code AS code, psc.process_status_description AS description FROM process_status psc;",
        "SELECT process_status_code AS Code, process_status_description AS Description FROM process_status;",
        "SELECT process_status.process_status_code AS StatusCode, process_status.process_status_description AS StatusDescription FROM process_status;",
        "SELECT ps.process_status_code, ps.process_status_description FROM process_status ps;",
        "SELECT psc.process_status_code, psc.process_status_description FROM process_status psc WHERE psc.process_status_code IS NOT NULL;"
      ]
    ]
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the description for process status code ct?",
    "gold": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
    "infer_predictions": [
      [
        "SELECT process_status_description FROM process_status WHERE process_status_code = 'ct'",
        "SELECT ps.process_status_description FROM process_status ps WHERE ps.process_status_code = 'ct'",
        "SELECT psd FROM (SELECT process_status_description AS psd, process_status_code FROM process_status) WHERE process_status_code = 'ct'",
        "SELECT T.process_status_description FROM process_status T WHERE T.process_status_code = 'ct'",
        "SELECT process_status_description FROM process_status WHERE (process_status_code || '') = 'ct'",
        "SELECT MAX(process_status_description) FROM process_status WHERE process_status_code = 'ct'",
        "SELECT process_status_desc FROM (SELECT process_status_description AS process_status_desc, process_status_code FROM process_status WHERE process_status_code = 'ct')",
        "SELECT process_status_description FROM process_status GROUP BY process_status_code, process_status_description HAVING process_status_code = 'ct'",
        "SELECT * FROM (SELECT process_status_description, process_status_code FROM process_status) WHERE process_status_code = 'ct'"
      ]
    ]
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many staff do we have?",
    "gold": "SELECT count(*) FROM Staff",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT staff_id) FROM staff",
        "SELECT COUNT(*) AS TotalStaff FROM (SELECT DISTINCT staff_id FROM staff)",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s",
        "SELECT COUNT(1) FROM (SELECT staff_id FROM staff GROUP BY staff_id)",
        "SELECT COUNT(DISTINCT s1.staff_id) FROM staff s1",
        "SELECT (SELECT COUNT(DISTINCT staff_id) FROM staff) AS CountOfStaff",
        "SELECT (SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM staff))"
      ]
    ]
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the ids and details for all staff.",
    "gold": "SELECT staff_id ,  staff_details FROM Staff",
    "infer_predictions": [
      [
        "SELECT staff_id, staff_details FROM staff",
        "SELECT s.staff_id, s.staff_details FROM staff s",
        "SELECT staff.staff_id, staff_details FROM staff ORDER BY staff_id",
        "SELECT staff.staff_id AS id, staff.staff_details AS details FROM staff",
        "SELECT staff_id AS ID, staff_details AS Details FROM staff",
        "SELECT * FROM staff WHERE staff_id IN (SELECT staff_id FROM staff)",
        "SELECT * FROM staff WHERE EXISTS (SELECT 1 FROM staff WHERE staff.staff_id = staff_id)",
        "SELECT staff_id, staff_details FROM staff GROUP BY staff_id, staff_details"
      ]
    ]
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What are the details for the staff member with id 100.",
    "gold": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
    "infer_predictions": [
      [
        "SELECT staff_details FROM staff WHERE staff_id = 100;",
        "SELECT s.staff_details FROM staff s WHERE s.staff_id = 100;",
        "SELECT Distinct s.staff_details FROM staff s WHERE s.staff_id = 100;",
        "SELECT st.staff_details FROM staff st WHERE st.staff_id = 100;",
        "SELECT s.staff_details AS StaffDetails FROM staff s WHERE s.staff_id = 100;"
      ]
    ]
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show the number of staff roles.",
    "gold": "SELECT count(*) FROM Ref_staff_roles",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT staff_role_code) FROM ref_staff_roles",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM ref_staff_roles)",
        "SELECT COUNT(staff_role_code) FROM (SELECT DISTINCT staff_role_code FROM ref_staff_roles)",
        "SELECT COUNT(staff_role_code) AS total_roles FROM ref_staff_roles GROUP BY staff_role_code HAVING COUNT(staff_role_code) > 0",
        "SELECT COUNT(DISTINCT sr.staff_role_code) FROM ref_staff_roles sr",
        "SELECT COUNT(DISTINCT sr.staff_role_code) AS number_of_staff_roles FROM ref_staff_roles sr",
        "SELECT COUNT(staff_role_code) FROM ref_staff_roles WHERE staff_role_code IS NOT NULL",
        "SELECT COUNT(DISTINCT staff_role_code) FROM ref_staff_roles WHERE staff_role_code IS NOT NULL",
        "SELECT COUNT(DISTINCT staff_role_code) FROM ref_staff_roles WHERE staff_role_code <> ''"
      ]
    ]
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "nlq": "List the codes and descriptions for all staff roles.",
    "gold": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
    "infer_predictions": [
      [
        "SELECT staff_role_code, staff_role_description FROM ref_staff_roles;",
        "SELECT r.staff_role_code, r.staff_role_description FROM ref_staff_roles r;",
        "SELECT staff_role_code AS role_code, staff_role_description AS description FROM ref_staff_roles;",
        "SELECT DISTINCT r.staff_role_code, r.staff_role_description FROM ref_staff_roles r;",
        "SELECT r.staff_role_code AS role_code, r.staff_role_description AS description FROM ref_staff_roles r;",
        "SELECT ref_staff_roles.staff_role_code AS role_code, ref_staff_roles.staff_role_description AS description FROM ref_staff_roles;"
      ]
    ]
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the description for staff role code HR?",
    "gold": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
    "infer_predictions": [
      [
        "SELECT staff_role_description FROM ref_staff_roles WHERE staff_role_code = 'HR'",
        "SELECT R.staff_role_description FROM ref_staff_roles R WHERE R.staff_role_code = 'HR'",
        "SELECT staff_role_description FROM ref_staff_roles WHERE staff_role_code LIKE 'HR'",
        "SELECT DISTINCT staff_role_description FROM ref_staff_roles WHERE staff_role_code IN ('HR')",
        "SELECT staff_role_description FROM ref_staff_roles WHERE 'HR' = staff_role_code",
        "SELECT sr.staff_role_description FROM ref_staff_roles sr WHERE sr.staff_role_code = 'HR'",
        "SELECT staff_role_description AS Description FROM ref_staff_roles WHERE staff_role_code = 'HR'"
      ]
    ]
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many documents have a process?",
    "gold": "SELECT count(DISTINCT document_id) FROM Documents_processes",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT document_id) FROM documents_processes",
        "SELECT COUNT(*) FROM (SELECT DISTINCT document_id FROM documents_processes)",
        "SELECT COUNT(*) FROM (SELECT document_id FROM documents_processes GROUP BY document_id)",
        "SELECT COUNT(document_id) FROM (SELECT DISTINCT document_id FROM documents_processes)",
        "SELECT COUNT(DISTINCT dp.document_id) FROM documents_processes dp",
        "SELECT COUNT(document_id) FROM documents_processes GROUP BY document_id HAVING COUNT(document_id) >= 1",
        "SELECT COUNT(DISTINCT dp.document_id) FROM documents_processes dp WHERE dp.document_id IS NOT NULL"
      ]
    ]
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "nlq": "List all process ids with a document.",
    "gold": "SELECT DISTINCT process_id FROM Documents_processes",
    "infer_predictions": [
      [
        "SELECT DISTINCT dp.process_id FROM documents_processes dp",
        "SELECT process_id FROM documents_processes GROUP BY process_id",
        "SELECT processes.process_id FROM (SELECT process_id FROM documents_processes) AS processes",
        "SELECT dp.process_id FROM documents_processes dp WHERE EXISTS (SELECT 1 FROM documents d WHERE d.document_id = dp.document_id)",
        "SELECT dp.process_id FROM documents_processes dp INNER JOIN documents d ON dp.document_id = d.document_id",
        "SELECT process_id FROM documents_processes WHERE process_id IN (SELECT process_id FROM documents_processes)",
        "SELECT process_id FROM documents_processes dp WHERE process_id IS NOT NULL",
        "SELECT dp.process_id FROM documents_processes dp WHERE dp.document_id IN (SELECT document_id FROM documents)",
        "SELECT process_id FROM (SELECT DISTINCT process_id FROM documents_processes) AS unique_processes",
        "SELECT dp.process_id FROM documents_processes dp, documents d WHERE dp.document_id = d.document_id"
      ]
    ]
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all document ids without a process.",
    "gold": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
    "infer_predictions": [
      [
        "SELECT d.document_id FROM documents d LEFT JOIN documents_processes dp ON d.document_id = dp.document_id WHERE dp.document_id IS NULL",
        "SELECT document_id FROM documents WHERE document_id NOT IN (SELECT document_id FROM documents_processes)",
        "SELECT document_id FROM documents EXCEPT SELECT document_id FROM documents_processes",
        "SELECT d.document_id FROM documents d WHERE NOT EXISTS (SELECT 1 FROM documents_processes dp WHERE dp.document_id = d.document_id)",
        "SELECT document_id FROM documents WHERE document_id NOT IN (SELECT DISTINCT document_id FROM documents_processes)",
        "SELECT d.document_id FROM documents d LEFT OUTER JOIN documents_processes dp ON d.document_id = dp.document_id WHERE dp.document_id IS NULL",
        "SELECT d.document_id FROM documents d WHERE d.document_id NOT IN (SELECT dp.document_id FROM documents_processes dp)",
        "SELECT DISTINCT d.document_id FROM documents d LEFT JOIN documents_processes dp ON d.document_id = dp.document_id WHERE dp.process_id IS NULL",
        "SELECT d.document_id FROM documents AS d WHERE NOT EXISTS (SELECT document_id FROM documents_processes as dp WHERE dp.document_id = d.document_id)"
      ]
    ]
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "nlq": "List all process ids with no document.",
    "gold": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
    "infer_predictions": [
      [
        "SELECT process_id FROM business_processes WHERE process_id NOT IN (SELECT process_id FROM documents_processes)",
        "SELECT bp.process_id FROM business_processes bp LEFT JOIN documents_processes dp ON bp.process_id = dp.process_id WHERE dp.document_id IS NULL",
        "SELECT process_id FROM business_processes EXCEPT SELECT process_id FROM documents_processes",
        "SELECT DISTINCT bp.process_id FROM business_processes bp WHERE NOT EXISTS (SELECT 1 FROM documents_processes dp WHERE dp.process_id = bp.process_id)",
        "SELECT bp.process_id FROM business_processes bp WHERE bp.process_id NOT IN (SELECT dp.process_id FROM documents_processes dp)",
        "SELECT DISTINCT process_id FROM business_processes WHERE process_id NOT IN (SELECT distinct process_id FROM documents_processes)",
        "SELECT bp.process_id FROM business_processes bp LEFT OUTER JOIN documents_processes dp ON bp.process_id = dp.process_id WHERE dp.process_id IS NULL",
        "SELECT bp.process_id FROM business_processes AS bp WHERE NOT EXISTS (SELECT NULL FROM documents_processes WHERE process_id = bp.process_id)",
        "SELECT process_id FROM business_processes WHERE process_id NOT IN (SELECT process_id FROM documents_processes WHERE document_id IS NOT NULL)",
        "SELECT business_processes.process_id FROM business_processes LEFT JOIN documents_processes ON business_processes.process_id = documents_processes.process_id WHERE documents_processes.document_id IS NULL"
      ]
    ]
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the process outcome description and process status description for the document with id 0?",
    "gold": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
    "infer_predictions": [
      [
        "SELECT po.process_outcome_description, ps.process_status_description FROM documents_processes dp JOIN process_outcomes po ON dp.process_outcome_code = po.process_outcome_code JOIN process_status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0",
        "SELECT process_outcomes.process_outcome_description, process_status.process_status_description FROM documents_processes INNER JOIN process_outcomes ON documents_processes.process_outcome_code = process_outcomes.process_outcome_code INNER JOIN process_status ON documents_processes.process_status_code = process_status.process_status_code WHERE documents_processes.document_id = 0",
        "SELECT po.process_outcome_description, ps.process_status_description FROM documents d INNER JOIN documents_processes dp ON d.document_id = dp.document_id INNER JOIN process_outcomes po ON dp.process_outcome_code = po.process_outcome_code INNER JOIN process_status ps ON dp.process_status_code = ps.process_status_code WHERE d.document_id = 0",
        "SELECT (SELECT process_outcome_description FROM process_outcomes WHERE process_outcome_code = dp.process_outcome_code) AS outcome_description, (SELECT process_status_description FROM process_status WHERE process_status_code = dp.process_status_code) AS status_description FROM documents_processes dp WHERE document_id = 0",
        "SELECT outcome.process_outcome_description, status.process_status_description FROM documents_processes LEFT JOIN process_outcomes AS outcome ON documents_processes.process_outcome_code = outcome.process_outcome_code LEFT JOIN process_status AS status ON documents_processes.process_status_code = status.process_status_code WHERE documents_processes.document_id = 0",
        "SELECT pr_o.process_outcome_description, pr_s.process_status_description FROM documents_processes dp CROSS JOIN process_outcomes pr_o CROSS JOIN process_status pr_s WHERE dp.process_outcome_code = pr_o.process_outcome_code AND dp.process_status_code = pr_s.process_status_code AND dp.document_id = 0",
        "SELECT process_outcomes.process_outcome_description, process_status.process_status_description FROM documents_processes JOIN process_outcomes USING (process_outcome_code) JOIN process_status USING (process_status_code) WHERE document_id = 0",
        "SELECT R1.process_outcome_description, R2.process_status_description FROM (SELECT * FROM documents_processes WHERE document_id = 0) AS dp INNER JOIN process_outcomes AS R1 ON dp.process_outcome_code = R1.process_outcome_code INNER JOIN process_status AS R2 ON dp.process_status_code = R2.process_status_code",
        "SELECT p_outcome_desc.process_outcome_description, p_status_desc.process_status_description FROM documents_processes, process_outcomes p_outcome_desc, process_status p_status_desc WHERE documents_processes.document_id = 0 AND documents_processes.process_outcome_code = p_outcome_desc.process_outcome_code AND documents_processes.process_status_code = p_status_desc.process_status_code",
        "WITH Outcomes AS (SELECT process_outcome_code, process_outcome_description FROM process_outcomes), Statuses AS (SELECT process_status_code, process_status_description FROM process_status) SELECT outcome.process_outcome_description, status.process_status_description FROM documents_processes AS dp INNER JOIN Outcomes AS outcome ON dp.process_outcome_code = outcome.process_outcome_code INNER JOIN Statuses AS status ON dp.process_status_code = status.process_status_code WHERE dp.document_id = 0"
      ]
    ]
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "nlq": "What is the process name for the document \"Travel to Brazil\"?",
    "gold": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
    "infer_predictions": [
      [
        "SELECT bp.process_name FROM documents d JOIN documents_processes dp ON d.document_id = dp.document_id JOIN business_processes bp ON dp.process_id = bp.process_id WHERE d.document_name = 'Travel to Brazil'",
        "SELECT process_name FROM business_processes WHERE process_id IN (SELECT process_id FROM documents_processes WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Travel to Brazil'))",
        "SELECT bp.process_name FROM business_processes bp, documents_processes dp, documents d WHERE bp.process_id = dp.process_id AND dp.document_id = d.document_id AND d.document_name = 'Travel to Brazil'",
        "SELECT bp.process_name FROM business_processes bp WHERE EXISTS (SELECT 1 FROM documents d JOIN documents_processes dp ON d.document_id = dp.document_id WHERE bp.process_id = dp.process_id AND d.document_name = 'Travel to Brazil')",
        "SELECT process_name FROM business_processes WHERE process_id = (SELECT dp.process_id FROM documents_processes dp JOIN documents d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil')",
        "SELECT process_name FROM business_processes bp JOIN documents_processes dp ON bp.process_id = dp.process_id JOIN documents d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil'",
        "SELECT process_name FROM business_processes WHERE process_id = (SELECT process_id FROM documents_processes WHERE document_id IN (SELECT document_id FROM documents WHERE document_name = 'Travel to Brazil'))",
        "SELECT process FROM (SELECT process_name as 'process' FROM business_processes INNER JOIN documents_processes ON business_processes.process_id = documents_processes.process_id INNER JOIN documents ON documents.document_id = documents_processes.document_id WHERE documents.document_name = 'Travel to Brazil')",
        "SELECT bp.process_name FROM business_processes AS bp INNER JOIN documents_processes AS dp ON bp.process_id = dp.process_id INNER JOIN documents AS d ON dp.document_id = d.document_id WHERE d.document_name = 'Travel to Brazil'",
        "SELECT DISTINCT process_name FROM business_processes WHERE process_id IN (SELECT dp.process_id FROM documents d, documents_processes dp WHERE d.document_id = dp.document_id AND document_name = 'Travel to Brazil')"
      ]
    ]
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all process ids and the number of documents in each process.",
    "gold": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
    "infer_predictions": [
      [
        "SELECT bp.process_id, COUNT(dp.document_id) FROM business_processes bp JOIN documents_processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
        "SELECT business_processes.process_id, COUNT(documents_processes.document_id) FROM business_processes INNER JOIN documents_processes ON business_processes.process_id = documents_processes.process_id GROUP BY business_processes.process_id",
        "SELECT p.process_id, COUNT(d.document_id) FROM business_processes AS p LEFT JOIN documents_processes AS d ON p.process_id = d.process_id GROUP BY p.process_id",
        "SELECT bp.process_id, COUNT(*) FROM business_processes bp LEFT JOIN documents_processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
        "SELECT p.process_id, COUNT(distinct d.document_id) FROM business_processes p, documents_processes d WHERE p.process_id = d.process_id GROUP BY p.process_id",
        "SELECT process_id, COUNT(document_id) as num_docs FROM documents_processes GROUP BY process_id",
        "SELECT bp.process_id, COUNT(dp.document_id) FROM business_processes AS bp, documents_processes AS dp WHERE bp.process_id = dp.process_id GROUP BY bp.process_id",
        "SELECT bp.process_id, COUNT(dp.document_id) AS document_count FROM business_processes bp LEFT OUTER JOIN documents_processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id",
        "SELECT bp.process_id, COUNT(DISTINCT dp.document_id) FROM business_processes AS bp LEFT JOIN documents_processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id"
      ]
    ]
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many staff are the document with id 0 and process with id 9.",
    "gold": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT staff.staff_id) FROM staff INNER JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id WHERE staff_in_processes.document_id = 0 AND staff_in_processes.process_id = 9",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff.staff_id FROM staff JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id WHERE staff_in_processes.document_id = 0 AND staff_in_processes.process_id = 9)",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s, staff_in_processes sip WHERE s.staff_id = sip.staff_id AND sip.document_id = 0 AND sip.process_id = 9",
        "SELECT COUNT(*) FROM (SELECT DISTINCT s.staff_id FROM staff s JOIN staff_in_processes sip ON s.staff_id = sip.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9)",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s INNER JOIN staff_in_processes sip ON s.staff_id = sip.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9",
        "SELECT DISTINCT COUNT(sip.staff_id) FROM staff_in_processes sip WHERE sip.document_id = 0 AND sip.process_id = 9",
        "SELECT DISTINCT COUNT(staff.staff_id) FROM staff JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id WHERE staff_in_processes.document_id = 0 AND staff_in_processes.process_id = 9",
        "SELECT COUNT(DISTINCT sip.staff_id) FROM staff_in_processes sip WHERE sip.document_id = 0 AND sip.process_id = 9",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s JOIN staff_in_processes sip ON s.staff_id = sip.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9"
      ]
    ]
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all staff ids and the number of document processes for each staff.",
    "gold": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
    "infer_predictions": [
      [
        "SELECT s.staff_id, COUNT(dp.process_id) FROM staff s JOIN staff_in_processes sip ON s.staff_id = sip.staff_id JOIN documents_processes dp ON sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY s.staff_id",
        "SELECT staff.staff_id, COUNT(*) AS process_count FROM staff JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY staff.staff_id",
        "SELECT sip.staff_id, COUNT(dp.process_id) AS num_processes FROM staff_in_processes sip, documents_processes dp WHERE sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY sip.staff_id",
        "SELECT sip.staff_id, COUNT(*) FROM staff_in_processes sip INNER JOIN documents_processes dp ON sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY sip.staff_id",
        "SELECT sip.staff_id, COUNT(dp.document_id) FROM staff_in_processes sip JOIN documents_processes dp ON sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY sip.staff_id",
        "SELECT staff.staff_id, COUNT(documents_processes.process_id) AS document_processes_count FROM staff LEFT JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id LEFT JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY staff.staff_id",
        "SELECT staff.staff_id, COUNT(distinct dp.process_id) FROM staff JOIN staff_in_processes sip ON staff.staff_id = sip.staff_id JOIN documents_processes dp ON sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY staff.staff_id",
        "SELECT DISTINCT sip.staff_id, (SELECT COUNT(process_id) FROM documents_processes dp WHERE dp.document_id = sip.document_id AND dp.process_id = sip.process_id) FROM staff_in_processes sip",
        "SELECT DISTINCT staff.staff_id, COUNT(*) OVER (PARTITION BY staff.staff_id) AS number_of_processes FROM staff JOIN staff_in_processes ON staff.staff_id = staff_in_processes.staff_id JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id"
      ]
    ]
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "nlq": "Show all staff role codes and the number of document processes for each role.",
    "gold": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
    "infer_predictions": [
      [
        "SELECT sr.staff_role_code, COUNT(dp.document_id) FROM staff_in_processes sip JOIN ref_staff_roles sr ON sip.staff_role_code = sr.staff_role_code JOIN documents_processes dp ON sip.document_id = dp.document_id AND sip.process_id = dp.process_id GROUP BY sr.staff_role_code",
        "SELECT ref_staff_roles.staff_role_code, COUNT(documents_processes.document_id) FROM staff_in_processes INNER JOIN ref_staff_roles ON staff_in_processes.staff_role_code = ref_staff_roles.staff_role_code INNER JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY ref_staff_roles.staff_role_code",
        "SELECT ref_staff_roles.staff_role_code AS RoleCode, COUNT(*) AS NumDocuments FROM staff_in_processes JOIN ref_staff_roles ON staff_in_processes.staff_role_code = ref_staff_roles.staff_role_code JOIN documents_processes ON staff_in_processes.process_id = documents_processes.process_id AND staff_in_processes.document_id = documents_processes.document_id GROUP BY ref_staff_roles.staff_role_code",
        "SELECT staff_role_code, COUNT(DISTINCT documents_processes.document_id) AS DocumentCount FROM staff_in_processes JOIN ref_staff_roles USING(staff_role_code) JOIN documents_processes ON staff_in_processes.document_id = documents_processes.document_id AND staff_in_processes.process_id = documents_processes.process_id GROUP BY staff_role_code",
        "SELECT rsp.staff_role_code, COUNT(dcp.document_id) AS NumProc FROM ref_staff_roles rsp JOIN staff_in_processes sip ON rsp.staff_role_code = sip.staff_role_code JOIN documents_processes dcp ON sip.document_id = dcp.document_id AND sip.process_id = dcp.process_id GROUP BY rsp.staff_role_code",
        "SELECT rsp.staff_role_code, COUNT(dcp.document_id) TotalDocumentProcesses FROM ref_staff_roles rsp INNER JOIN staff_in_processes sip ON rsp.staff_role_code = sip.staff_role_code INNER JOIN documents_processes dcp ON sip.document_id = dcp.document_id AND sip.process_id = dcp.process_id GROUP BY rsp.staff_role_code"
      ]
    ]
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "nlq": "How many different roles does the staff with id 3 have?",
    "gold": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT sip.staff_role_code) FROM staff_in_processes sip WHERE sip.staff_id = 3",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff_role_code FROM staff_in_processes WHERE staff_id = 3)",
        "SELECT DISTINCT COUNT(sip.staff_role_code) FROM staff_in_processes sip JOIN ref_staff_roles r ON sip.staff_role_code = r.staff_role_code WHERE sip.staff_id = 3",
        "SELECT COUNT(DISTINCT sip.staff_role_code) FROM staff_in_processes sip, ref_staff_roles refs WHERE sip.staff_id = 3 AND sip.staff_role_code = refs.staff_role_code",
        "SELECT COUNT(*) FROM (SELECT staff_role_code FROM staff_in_processes WHERE staff_id = 3 GROUP BY staff_role_code)",
        "SELECT COUNT(DISTINCT sip.staff_role_code) FROM staff_in_processes sip JOIN staff s ON sip.staff_id = s.staff_id WHERE s.staff_id = 3",
        "SELECT COUNT(DISTINCT staff_role_code) FROM staff_in_processes WHERE staff_id = 3",
        "SELECT COUNT(*) FROM (SELECT DISTINCT sip.staff_role_code FROM staff_in_processes sip WHERE sip.staff_id = 3)",
        "SELECT DISTINCT COUNT(DISTINCT sip.staff_role_code) FROM staff_in_processes sip JOIN ref_staff_roles refs ON sip.staff_role_code = refs.staff_role_code WHERE sip.staff_id = 3"
      ]
    ]
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "nlq": "How many agencies do we have?",
    "gold": "SELECT count(*) FROM Agencies",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM agencies",
        "SELECT COUNT(agency_id) FROM agencies",
        "SELECT COUNT(agency_details) FROM agencies",
        "SELECT COUNT(1) FROM agencies",
        "SELECT (SELECT COUNT(*) FROM agencies)",
        "SELECT (COUNT(agencies.agency_id)) FROM agencies",
        "SELECT COUNT(agency_id) AS TotalAgencies FROM agencies"
      ]
    ]
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of agencies.",
    "gold": "SELECT count(*) FROM Agencies",
    "infer_predictions": [
      [
        "SELECT COUNT(agency_id) FROM agencies",
        "SELECT COUNT(*) FROM agencies",
        "SELECT COUNT(1) FROM agencies",
        "SELECT COUNT(agency_id) AS agency_count FROM agencies",
        "SELECT COUNT(*) AS total_agencies FROM agencies",
        "SELECT COUNT(DISTINCT agency_details) FROM agencies",
        "SELECT * FROM (SELECT COUNT(*) FROM agencies) AS agency_count",
        "SELECT COUNT(agency_id) FROM (SELECT agency_id FROM agencies) AS temp",
        "SELECT COUNT(DISTINCT agency_id) FROM (SELECT agency_id, agency_details FROM agencies)"
      ]
    ]
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "nlq": "Show all agency ids and details.",
    "gold": "SELECT agency_id ,  agency_details FROM Agencies",
    "infer_predictions": [
      [
        "SELECT agency_id, agency_details FROM agencies",
        "SELECT agency_details, agency_id FROM agencies ORDER BY agency_id",
        "SELECT agencies.agency_id AS id, agencies.agency_details AS details FROM agencies",
        "SELECT agencies.agency_id, agency_details FROM agencies GROUP BY agency_id, agency_details",
        "SELECT A.agency_id, A.agency_details FROM agencies A",
        "SELECT agency_id as 'Agency ID', agency_details as 'Agency Details' FROM agencies",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM agencies)"
      ]
    ]
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "nlq": "What are all the agency ids and details?",
    "gold": "SELECT agency_id ,  agency_details FROM Agencies",
    "infer_predictions": [
      [
        "SELECT agency_id, agency_details FROM agencies",
        "SELECT a.agency_id, a.agency_details FROM agencies a",
        "SELECT agency_id AS agency_id, agency_details AS agency_details FROM agencies",
        "SELECT DISTINCT a.agency_id, a.agency_details FROM agencies a",
        "SELECT * FROM (SELECT agency_id, agency_details FROM agencies)",
        "SELECT agency_id, agency_details FROM agencies ORDER BY agency_id",
        "SELECT agency_id, agency_details FROM agencies GROUP BY agency_id, agency_details"
      ]
    ]
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "nlq": "Show the number of clients.",
    "gold": "SELECT count(*) FROM Clients",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM clients",
        "SELECT COUNT(client_id) FROM clients",
        "SELECT SUM(1) FROM clients",
        "SELECT COUNT(1) FROM clients",
        "SELECT COUNT(c.client_id) FROM clients c",
        "SELECT COUNT(1) AS NumberOfClients FROM clients"
      ]
    ]
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "nlq": "How many clients are there?",
    "gold": "SELECT count(*) FROM Clients",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM clients",
        "SELECT COUNT(client_id) FROM clients",
        "SELECT COUNT(1) FROM clients",
        "SELECT SUM(1) FROM clients",
        "SELECT COUNT(*) AS total_clients FROM clients",
        "SELECT COUNT(c.client_id) FROM clients c",
        "SELECT COUNT(DISTINCT c.client_id) FROM clients c",
        "SELECT (SELECT COUNT(*) FROM clients) AS total",
        "SELECT COUNT(client_id) FROM (SELECT client_id FROM clients)"
      ]
    ]
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "nlq": "List all client ids and client details.",
    "gold": "SELECT client_id ,  client_details FROM Clients",
    "infer_predictions": [
      [
        "SELECT client_id, client_details FROM clients",
        "SELECT cli.client_id, cli.client_details FROM clients cli",
        "SELECT DISTINCT c.client_id, c.client_details FROM clients c",
        "SELECT clients.client_id as client_id, clients.client_details as client_details FROM clients",
        "SELECT \"client_id\", \"client_details\" FROM clients"
      ]
    ]
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "nlq": "What are all the client ids and details?",
    "gold": "SELECT client_id ,  client_details FROM Clients",
    "infer_predictions": [
      [
        "SELECT client_id, client_details FROM clients",
        "SELECT c.client_id, c.client_details FROM clients c",
        "SELECT client_id, client_details FROM clients GROUP BY client_id, client_details",
        "SELECT client_id, client_details FROM clients ORDER BY client_id",
        "SELECT client_details, client_id FROM clients WHERE client_id IS NOT NULL",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE EXISTS (SELECT 1)",
        "SELECT c.client_id, c.client_details FROM clients c WHERE c.client_id IN (SELECT c2.client_id FROM clients c2)"
      ]
    ]
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "nlq": "Show agency ids and the number of clients for each agency.",
    "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, COUNT(clients.client_id) FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id",
        "SELECT agencies.agency_id, COUNT(*) AS client_count FROM agencies LEFT JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id",
        "SELECT a.agency_id, COUNT(c.client_id) AS num_clients FROM agencies a INNER JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
        "SELECT a.agency_id, COUNT(c.client_id) FROM agencies a, clients c WHERE a.agency_id = c.agency_id GROUP BY a.agency_id",
        "SELECT agency_id, COUNT(client_id) FROM clients GROUP BY agency_id",
        "SELECT agency_id, (SELECT COUNT(*) FROM clients WHERE clients.agency_id = agencies.agency_id) AS num_clients FROM agencies",
        "SELECT a.agency_id, (SELECT COUNT(client_id) FROM clients WHERE clients.agency_id = a.agency_id) FROM agencies a",
        "SELECT agency_id, IFNULL((SELECT COUNT(client_id) FROM clients WHERE clients.agency_id = agencies.agency_id), 0) FROM agencies",
        "SELECT agencies.agency_id, COALESCE(COUNT(clients.client_id), 0) FROM agencies LEFT JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id",
        "SELECT A.agency_id, COUNT(B.client_id) AS ClientCount FROM agencies A LEFT JOIN clients B ON A.agency_id = B.agency_id GROUP BY A.agency_id"
      ]
    ]
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "nlq": "How many clients does each agency have?",
    "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, COUNT(clients.client_id) AS client_count FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id",
        "SELECT a.agency_id, COUNT(c.client_id) AS number_of_clients FROM agencies a LEFT JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
        "SELECT agency_id, COUNT(client_id) FROM clients GROUP BY agency_id",
        "SELECT a.agency_id, IFNULL(COUNT(c.client_id), 0) AS total_clients FROM agencies a LEFT JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id",
        "SELECT agency_id, COUNT(DISTINCT client_id) AS clients_count FROM clients GROUP BY agency_id",
        "SELECT a.agency_id, COUNT(*) FROM agencies a, clients c WHERE a.agency_id = c.agency_id GROUP BY a.agency_id",
        "SELECT a.agency_id, (SELECT COUNT(*) FROM clients c WHERE c.agency_id = a.agency_id) AS client_totals FROM agencies a GROUP BY a.agency_id",
        "SELECT agency_id, SUM(CASE WHEN client_id IS NOT NULL THEN 1 ELSE 0 END) AS client_count FROM clients GROUP BY agency_id",
        "SELECT a.agency_id, COUNT(c.client_id) FROM agencies a JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id ORDER BY a.agency_id"
      ]
    ]
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "nlq": "What is the agency id and details with most number of clients?",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE A.agency_id = (SELECT B.agency_id FROM clients B GROUP BY B.agency_id ORDER BY COUNT(B.client_id) DESC LIMIT 1)",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies ORDER BY (SELECT COUNT(*) FROM clients WHERE clients.agency_id = agencies.agency_id) DESC LIMIT 1",
        "SELECT A.agency_id, A.agency_details FROM agencies A INNER JOIN (SELECT agency_id, COUNT(client_id) AS num_clients FROM clients GROUP BY agency_id) C ON A.agency_id = C.agency_id ORDER BY C.num_clients DESC LIMIT 1",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
        "SELECT agencies.agency_id, agency_details FROM agencies JOIN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) = (SELECT MAX(client_count) FROM (SELECT agency_id, COUNT(client_id) as client_count FROM clients GROUP BY agency_id))) AS max_clients ON agencies.agency_id = max_clients.agency_id",
        "SELECT AG.agency_id, AG.agency_details FROM agencies AG JOIN (SELECT agency_id, COUNT(*) AS ClientCount FROM clients GROUP BY agency_id) AS Cli ON AG.agency_id = Cli.agency_id ORDER BY Cli.ClientCount DESC LIMIT 1",
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE EXISTS (SELECT 1 FROM clients C WHERE C.agency_id = A.agency_id GROUP BY C.agency_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM (SELECT agency_id, ROW_NUMBER() OVER (ORDER BY COUNT(client_id) DESC) AS rn FROM clients GROUP BY agency_id) tmp WHERE rn = 1)"
      ]
    ]
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "nlq": "Return the agency id and details for the agency with the greatest number of clients.",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT A.agency_id, A.agency_details FROM agencies A JOIN clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id ORDER BY COUNT(C.client_id) DESC LIMIT 1",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies INNER JOIN (SELECT agency_id, COUNT(client_id) AS num_clients FROM clients GROUP BY agency_id) AS client_count ON agencies.agency_id = client_count.agency_id ORDER BY client_count.num_clients DESC LIMIT 1",
        "SELECT Ag.agency_id, Ag.agency_details FROM (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) OnlyTop JOIN agencies Ag ON OnlyTop.agency_id = Ag.agency_id",
        "SELECT A.agency_id, A.agency_details FROM agencies A LEFT JOIN clients C ON A.agency_id = C.agency_id WHERE A.agency_id = (SELECT agency_id FROM clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1)",
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE A.agency_id = (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) = (SELECT MAX(client_count) FROM (SELECT COUNT(client_id) AS client_count FROM clients GROUP BY agency_id)))"
      ]
    ]
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "nlq": "Show agency ids and details with at least 2 clients.",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id HAVING COUNT(DISTINCT clients.client_id) >= 2",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag INNER JOIN clients cl ON ag.agency_id = cl.agency_id GROUP BY ag.agency_id HAVING COUNT(DISTINCT cl.client_id) >= 2",
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE A.agency_id IN (SELECT C.agency_id FROM clients C GROUP BY C.agency_id HAVING COUNT(C.client_id) >= 2)",
        "SELECT A.agency_id, A.agency_details FROM agencies A JOIN clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(DISTINCT C.client_id) >= 2",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag WHERE EXISTS (SELECT 1 FROM clients cl WHERE cl.agency_id = ag.agency_id GROUP BY cl.agency_id HAVING COUNT(cl.client_id) >= 2)",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag WHERE ag.agency_id IN (SELECT cl.agency_id FROM clients cl GROUP BY cl.agency_id HAVING COUNT(DISTINCT cl.client_id) >= 2)",
        "SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies, clients WHERE agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id, agencies.agency_details HAVING COUNT(DISTINCT clients.client_id) >= 2",
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE (SELECT COUNT(*) FROM clients C WHERE C.agency_id = A.agency_id) >= 2",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag JOIN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2) AS cls ON ag.agency_id = cls.agency_id"
      ]
    ]
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "nlq": "What are the agency ids and details agencies with at least 2 clients?",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id HAVING COUNT(DISTINCT clients.client_id) >= 2",
        "SELECT a.agency_id, a.agency_details FROM agencies a INNER JOIN (SELECT agency_id, COUNT(*) as client_count FROM clients GROUP BY agency_id HAVING client_count >= 2) b ON a.agency_id = b.agency_id",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag WHERE ag.agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(client_id) >= 2)",
        "SELECT DISTINCT a.agency_id, a.agency_details FROM agencies a, clients c WHERE a.agency_id = c.agency_id GROUP BY a.agency_id HAVING COUNT(DISTINCT c.client_id) >= 2",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE EXISTS (SELECT 1 FROM clients c WHERE c.agency_id = a.agency_id GROUP BY c.agency_id HAVING COUNT(c.client_id) >= 2)",
        "SELECT a.agency_id, a.agency_details FROM agencies AS a JOIN clients AS c ON a.agency_id = c.agency_id GROUP BY a.agency_id HAVING COUNT(*) >= 2",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag LEFT JOIN clients cl ON ag.agency_id = cl.agency_id GROUP BY ag.agency_id HAVING COUNT(cl.client_id) >= 2",
        "WITH counted AS (SELECT agency_id, COUNT(client_id) as num_clients FROM clients GROUP BY agency_id) SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN counted ON agencies.agency_id = counted.agency_id WHERE counted.num_clients >= 2",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE (SELECT COUNT(client_id) FROM clients WHERE agency_id = a.agency_id) >= 2",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies INNER JOIN (SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(DISTINCT client_id) >= 2) client_counts ON agencies.agency_id = client_counts.agency_id"
      ]
    ]
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "nlq": "Show agency details for client with detail 'Mac'.",
    "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "infer_predictions": [
      [
        "SELECT agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id WHERE clients.client_details = 'Mac'",
        "SELECT agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM clients WHERE client_details = 'Mac')",
        "SELECT A.agency_details FROM agencies A INNER JOIN clients C ON A.agency_id = C.agency_id WHERE C.client_details = 'Mac'",
        "SELECT agency_details FROM agencies, clients WHERE agencies.agency_id = clients.agency_id AND clients.client_details = 'Mac'",
        "SELECT agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients WHERE client_details = 'Mac')",
        "SELECT agencies.agency_details FROM clients, agencies WHERE clients.agency_id = agencies.agency_id AND clients.client_details = 'Mac'",
        "SELECT agency_details FROM agencies WHERE EXISTS (SELECT 1 FROM clients WHERE clients.agency_id = agencies.agency_id AND clients.client_details = 'Mac')"
      ]
    ]
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "nlq": "What are the agency details for clients with the detail Mac?",
    "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "infer_predictions": [
      [
        "SELECT agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients WHERE client_details = 'Mac')",
        "SELECT agency_details FROM agencies WHERE agency_id IN (SELECT c.agency_id FROM clients c WHERE c.client_details = 'Mac')",
        "SELECT a.agency_details FROM agencies a JOIN clients c ON a.agency_id = c.agency_id WHERE c.client_details = 'Mac'",
        "SELECT agency_details FROM agencies INNER JOIN clients ON agencies.agency_id = clients.agency_id WHERE clients.client_details = 'Mac'",
        "SELECT agency_details FROM agencies a WHERE EXISTS (SELECT 1 FROM clients c WHERE c.client_details = 'Mac' AND c.agency_id = a.agency_id)",
        "SELECT A.agency_details FROM agencies A, clients C WHERE A.agency_id = C.agency_id AND C.client_details = 'Mac'",
        "SELECT agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM clients WHERE client_details = 'Mac' LIMIT 1)",
        "SELECT DISTINCT a.agency_details FROM agencies a, clients c WHERE a.agency_id = c.agency_id AND c.client_details = 'Mac'",
        "SELECT a.agency_details FROM agencies AS a JOIN clients AS c ON a.agency_id = c.agency_id WHERE c.client_details = 'Mac'"
      ]
    ]
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "nlq": "Show details for all clients and the details of their corresponding agents.",
    "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
    "infer_predictions": [
      [
        "SELECT clients.client_details, agencies.agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT c.client_details, a.agency_details FROM clients AS c INNER JOIN agencies AS a ON c.agency_id = a.agency_id",
        "SELECT client_details, agency_details FROM clients, agencies WHERE clients.agency_id = agencies.agency_id",
        "SELECT C.client_details, A.agency_details FROM clients C, agencies A WHERE C.agency_id = A.agency_id",
        "SELECT clientDetails.client_details, agentDetails.agency_details FROM clients AS clientDetails INNER JOIN agencies AS agentDetails ON clientDetails.agency_id = agentDetails.agency_id",
        "SELECT cl.client_details AS ClientDetails, ag.agency_details AS AgencyDetails FROM clients cl JOIN agencies ag ON cl.agency_id = ag.agency_id",
        "SELECT details.client_detail, details.agency_detail FROM (SELECT c.client_details AS client_detail, a.agency_details AS agency_detail FROM clients c JOIN agencies a ON c.agency_id = a.agency_id ) AS details",
        "SELECT cc.client_details, aa.agency_details FROM clients AS cc CROSS JOIN agencies AS aa WHERE cc.agency_id = aa.agency_id",
        "SELECT client_details || ' ' || agency_details AS full_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id"
      ]
    ]
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "nlq": "What are the client details for each client and the corresponding details of their agencies?",
    "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
    "infer_predictions": [
      [
        "SELECT clients.client_details, agencies.agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT cl.client_details, ag.agency_details FROM clients cl INNER JOIN agencies ag ON cl.agency_id = ag.agency_id",
        "SELECT client_details, agency_details FROM clients, agencies WHERE clients.agency_id = agencies.agency_id",
        "SELECT c.client_details, a.agency_details FROM clients c, agencies a WHERE c.agency_id = a.agency_id",
        "SELECT distinct clients.client_details, agencies.agency_details FROM clients, agencies WHERE clients.agency_id = agencies.agency_id",
        "SELECT client_details, agency_details FROM clients NATURAL JOIN agencies",
        "SELECT client_details, agency_details FROM clients LEFT JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT client_details AS Client_Details, agency_details AS Agency_Details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT a.agency_id, a.agency_details, c.client_id, c.client_details FROM agencies a JOIN clients c ON a.agency_id = c.agency_id"
      ]
    ]
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "nlq": "Show all sic codes and the number of clients with each code.",
    "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
    "infer_predictions": [
      [
        "SELECT sic_code, COUNT(client_id) AS client_count FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(*) FROM clients c GROUP BY c.sic_code",
        "SELECT sic_code, COUNT(client_id) FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM clients c GROUP BY c.sic_code",
        "SELECT sic_code, COUNT(*) AS number_of_clients FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(c.client_id) FROM clients c GROUP BY c.sic_code",
        "SELECT DISTINCT sic_code, (SELECT COUNT(*) FROM clients cl WHERE cl.sic_code = clients.sic_code) AS client_num FROM clients",
        "SELECT sic_code, COUNT(client_id) FROM (SELECT sic_code, client_id FROM clients) GROUP BY sic_code",
        "SELECT clients.sic_code, COUNT(*) AS total FROM clients GROUP BY clients.sic_code"
      ]
    ]
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "nlq": "How many clients are there for each sic code?",
    "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
    "infer_predictions": [
      [
        "SELECT sic_code, COUNT(client_id) FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(*) FROM clients c GROUP BY c.sic_code",
        "SELECT sic_code, COUNT(*) AS count_of_clients FROM clients GROUP BY sic_code",
        "SELECT sic_code, COUNT(client_id) AS number_of_clients FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(c.client_id) FROM clients c GROUP BY c.sic_code",
        "SELECT sic_code, COUNT(client_id) AS client_count FROM clients GROUP BY sic_code",
        "SELECT sic_code, COUNT(client_id) AS total_clients FROM clients GROUP BY sic_code",
        "SELECT c.sic_code, COUNT(c.client_id) AS client_total FROM clients c GROUP BY c.sic_code",
        "SELECT sic_code, COUNT(*) FROM clients GROUP BY sic_code"
      ]
    ]
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "nlq": "Show all client ids and details with sic code \"Bad\".",
    "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
    "infer_predictions": [
      [
        "SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad'",
        "SELECT c.client_id, c.client_details FROM clients c WHERE c.sic_code = 'Bad'",
        "SELECT client_id, client_details FROM clients WHERE clients.sic_code LIKE 'Bad'",
        "SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad' COLLATE NOCASE",
        "SELECT client_id, client_details FROM clients WHERE TRIM(sic_code) = 'Bad'",
        "SELECT client_id, client_details FROM clients WHERE LOWER(sic_code) = LOWER('Bad')",
        "SELECT a.client_id, a.client_details FROM clients AS a WHERE a.sic_code IS 'Bad'"
      ]
    ]
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "nlq": "What are the client ideas and details for clients with the sic code Bad?",
    "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
    "infer_predictions": [
      [
        "SELECT client_id, client_details FROM clients WHERE sic_code = 'Bad'",
        "SELECT c.client_id, c.client_details FROM clients c WHERE c.sic_code = 'Bad'",
        "SELECT client_id, client_details FROM clients WHERE sic_code LIKE 'Bad'",
        "SELECT client_id, client_details FROM clients WHERE UPPER(sic_code) = UPPER('Bad')",
        "SELECT client_id AS ID, client_details AS Details FROM clients WHERE sic_code = 'Bad'",
        "SELECT clnt.client_id, clnt.client_details FROM clients clnt WHERE clnt.sic_code = 'Bad'",
        "SELECT C.client_id, C.client_details FROM clients C WHERE C.sic_code = 'Bad'",
        "SELECT CLIENT.client_id, CLIENT.client_details FROM clients CLIENT WHERE CLIENT.sic_code = 'Bad'"
      ]
    ]
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "nlq": "Show all agency ids and details for agencies with a client.",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies WHERE EXISTS (SELECT 1 FROM clients WHERE clients.agency_id = agencies.agency_id)",
        "SELECT a.agency_id, a.agency_details FROM agencies a INNER JOIN clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details",
        "SELECT DISTINCT a.agency_id, a.agency_details FROM agencies a, clients c WHERE a.agency_id = c.agency_id",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients)",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE EXISTS (SELECT 1 FROM clients c WHERE c.agency_id = a.agency_id)",
        "SELECT DISTINCT a.agency_id, a.agency_details FROM agencies a JOIN clients c ON c.agency_id = a.agency_id ORDER BY a.agency_id",
        "SELECT DISTINCT a.agency_id, a.agency_details FROM clients c LEFT JOIN agencies a ON a.agency_id = c.agency_id",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies INNER JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id, agencies.agency_details",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE a.agency_id IN (SELECT DISTINCT c.agency_id FROM clients c)"
      ]
    ]
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "nlq": "What are the agency ids and agency details for all agencies who have a client?",
    "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies WHERE agency_id IN (SELECT DISTINCT agency_id FROM clients)",
        "SELECT A.agency_id, A.agency_details FROM agencies A WHERE EXISTS (SELECT 1 FROM clients C WHERE C.agency_id = A.agency_id)",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies INNER JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM clients GROUP BY agency_id)",
        "SELECT DISTINCT A.agency_id, A.agency_details FROM agencies A, clients C WHERE A.agency_id = C.agency_id",
        "SELECT A.agency_id, A.agency_details FROM agencies A JOIN clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id, A.agency_details",
        "SELECT agc.agency_id, agc.agency_details FROM agencies agc JOIN (SELECT DISTINCT agency_id FROM clients) cli ON agc.agency_id = cli.agency_id",
        "SELECT DISTINCT ag.agency_id, ag.agency_details FROM agencies ag WHERE ag.agency_id IN (SELECT cli.agency_id FROM clients cli)",
        "SELECT ag.agency_id, ag.agency_details FROM agencies ag WHERE EXISTS (SELECT NULL FROM clients cl WHERE cl.agency_id = ag.agency_id)"
      ]
    ]
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "nlq": "Show all agency ids without any client.",
    "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
    "infer_predictions": [
      [
        "SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT agency_id FROM clients)",
        "SELECT A.agency_id FROM agencies A LEFT JOIN clients C ON A.agency_id = C.agency_id WHERE C.agency_id IS NULL",
        "SELECT agency_id FROM agencies EXCEPT SELECT agency_id FROM clients",
        "SELECT agency_id FROM agencies WHERE NOT EXISTS (SELECT 1 FROM clients WHERE clients.agency_id = agencies.agency_id)",
        "SELECT DISTINCT A.agency_id FROM agencies A WHERE NOT EXISTS (SELECT 1 FROM clients C WHERE C.agency_id = A.agency_id)",
        "SELECT A.agency_id FROM agencies A WHERE A.agency_id NOT IN (SELECT DISTINCT C.agency_id FROM clients C)",
        "SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM clients)",
        "SELECT DISTINCT agency_id FROM agencies AS A WHERE NOT EXISTS (SELECT NULL FROM clients AS C WHERE C.agency_id = A.agency_id)",
        "SELECT B.agency_id FROM agencies AS A LEFT OUTER JOIN clients AS B ON A.agency_id = B.agency_id WHERE B.agency_id IS NULL",
        "SELECT A.agency_id FROM agencies A WHERE A.agency_id NOT IN (SELECT C.agency_id FROM clients C WHERE C.agency_id IS NOT NULL)"
      ]
    ]
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "nlq": "What are ids of agencies that do not have any clients?",
    "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
    "infer_predictions": [
      [
        "SELECT A.agency_id FROM agencies A WHERE NOT EXISTS (SELECT 1 FROM clients C WHERE C.agency_id = A.agency_id)",
        "SELECT A.agency_id FROM agencies A LEFT JOIN clients C ON A.agency_id = C.agency_id WHERE C.client_id IS NULL",
        "SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT agency_id FROM clients)",
        "SELECT agency_id FROM agencies EXCEPT SELECT agency_id FROM clients",
        "SELECT A.agency_id FROM agencies A WHERE A.agency_id NOT IN (SELECT DISTINCT C.agency_id FROM clients C)",
        "SELECT agencies.agency_id FROM agencies LEFT OUTER JOIN clients ON agencies.agency_id = clients.agency_id WHERE clients.client_id IS NULL",
        "SELECT A.agency_id FROM agencies A LEFT JOIN clients C ON A.agency_id = C.agency_id GROUP BY A.agency_id HAVING COUNT(C.client_id) = 0",
        "SELECT A.agency_id FROM agencies A WHERE A.agency_id NOT IN (SELECT DISTINCT agency_id FROM clients WHERE agency_id IS NOT NULL)",
        "SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT DISTINCT agency_id FROM clients WHERE clients.agency_id IS NOT NULL)",
        "SELECT DISTINCT A.agency_id FROM agencies A WHERE NOT EXISTS (SELECT NULL FROM clients C WHERE C.agency_id = A.agency_id)"
      ]
    ]
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "nlq": "How many invoices do we have?",
    "gold": "SELECT count(*) FROM Invoices",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM invoices",
        "SELECT COUNT(invoice_id) FROM invoices",
        "SELECT count(1) FROM invoices",
        "SELECT COALESCE(COUNT(*), 0) FROM invoices",
        "SELECT COALESCE(COUNT(invoice_id), 0) FROM invoices",
        "SELECT COALESCE(COUNT(invoices.invoice_id), 0) FROM invoices",
        "SELECT (SELECT COUNT(*) FROM invoices)",
        "SELECT (SELECT COUNT(invoice_id) FROM invoices)",
        "SELECT COUNT(*) AS total_invoices FROM invoices"
      ]
    ]
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of invoices.",
    "gold": "SELECT count(*) FROM Invoices",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM invoices",
        "SELECT COUNT(invoice_id) FROM invoices",
        "SELECT COUNT(1) FROM invoices",
        "SELECT COUNT(*) FROM invoices WHERE invoice_id IS NOT NULL",
        "SELECT COUNT(*) AS total_invoices FROM invoices",
        "SELECT SUM(1) FROM invoices",
        "SELECT COUNT(*) FROM (SELECT * FROM invoices) AS sub",
        "SELECT COUNT(ALL invoice_id) FROM invoices"
      ]
    ]
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "nlq": "Show ids, status codes, and details for all invoices for clients.",
    "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
    "infer_predictions": [
      [
        "SELECT invoice_id, invoice_status, invoice_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id",
        "SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices INNER JOIN clients ON invoices.client_id = clients.client_id",
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i, clients c WHERE i.client_id = c.client_id",
        "SELECT inv.invoice_id, inv.invoice_status, inv.invoice_details FROM invoices inv INNER JOIN clients cli ON inv.client_id = cli.client_id",
        "SELECT inv.invoice_id, inv.invoice_status, inv.invoice_details FROM invoices inv JOIN clients cli ON inv.client_id = cli.client_id",
        "SELECT i.invoice_id AS 'ID', i.invoice_status AS 'Status Code', i.invoice_details AS 'Details' FROM invoices i JOIN clients c ON i.client_id = c.client_id",
        "SELECT DISTINCT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i JOIN clients c ON i.client_id = c.client_id"
      ]
    ]
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "nlq": "What are the ids, statuses, and details for all invoices?",
    "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
    "infer_predictions": [
      [
        "SELECT invoice_id, invoice_status, invoice_details FROM invoices",
        "SELECT invoice_id AS ID, invoice_status AS Status, invoice_details AS Details FROM invoices",
        "SELECT inv.invoice_id, inv.invoice_status, inv.invoice_details FROM invoices inv",
        "SELECT i.invoice_id AS invoiceID, i.invoice_status AS invoiceStatus, i.invoice_details AS invoiceDetails FROM invoices i",
        "SELECT * FROM invoices WHERE invoice_id IS NOT NULL",
        "SELECT a.invoice_id, a.invoice_status, a.invoice_details FROM invoices a"
      ]
    ]
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "nlq": "Show all client ids and the number of invoices for each client.",
    "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
    "infer_predictions": [
      [
        "SELECT clients.client_id, COUNT(invoices.invoice_id) AS num_invoices FROM clients JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id",
        "SELECT client_id, COUNT(invoice_id) as num_invoices FROM invoices GROUP BY client_id",
        "SELECT c.client_id, COUNT(i.invoice_id) as num_invoices FROM clients c INNER JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id",
        "SELECT c.client_id, COUNT(*) AS num_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id",
        "SELECT client_id, COUNT(DISTINCT invoice_id) as num_invoices FROM invoices GROUP BY client_id",
        "SELECT c.client_id, COUNT(i.invoice_id) as num_invoices FROM clients c INNER JOIN invoices i ON c.client_id = i.client_id WHERE i.invoice_status IS NOT NULL GROUP BY c.client_id",
        "SELECT c.client_id, IFNULL(COUNT(i.invoice_id), 0) as total_invoices FROM clients c LEFT JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id",
        "SELECT invoices.client_id, COUNT(payment_id) as num_invoices FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.client_id",
        "SELECT client_id, (SELECT COUNT(*) FROM invoices i WHERE i.client_id = invoices.client_id) as num_invoices FROM invoices GROUP BY client_id"
      ]
    ]
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "nlq": "How many invoices are there for each client id?",
    "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
    "infer_predictions": [
      [
        "SELECT client_id, COUNT(invoice_id) AS invoice_count FROM invoices GROUP BY client_id",
        "SELECT invoices.client_id, COUNT(invoices.invoice_id) AS invoice_count FROM invoices GROUP BY invoices.client_id",
        "SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM invoices i GROUP BY i.client_id",
        "SELECT client_id, COUNT(*) AS invoice_count FROM invoices GROUP BY client_id",
        "SELECT i.client_id, COUNT(*) AS total_invoices FROM invoices i GROUP BY i.client_id",
        "SELECT client_id AS c_id, COUNT(invoice_id) AS total FROM invoices GROUP BY c_id",
        "SELECT invoices.client_id, COUNT(1) FROM invoices GROUP BY invoices.client_id",
        "SELECT client_id, COUNT(invoice_id) FROM ( SELECT client_id, invoice_id FROM invoices ) GROUP BY client_id",
        "SELECT client_id, COUNT(DISTINCT invoice_id) AS totalCountInvoices FROM invoices GROUP BY client_id",
        "SELECT client.client_id, COUNT(invoice.invoice_id) FROM invoices invoice JOIN clients client ON invoice.client_id = client.client_id GROUP BY client.client_id"
      ]
    ]
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "nlq": "List the client id and detail with most number of invoices.",
    "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT clients.client_id, clients.client_details FROM clients JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id ORDER BY COUNT(invoices.invoice_id) DESC LIMIT 1",
        "SELECT C.client_id, C.client_details FROM clients C INNER JOIN invoices I ON C.client_id = I.client_id GROUP BY C.client_id ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
        "SELECT client_id, client_details FROM clients WHERE client_id = (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "WITH InvoiceCount AS (SELECT client_id, COUNT(invoice_id) AS NumInvoices FROM invoices GROUP BY client_id) SELECT C.client_id, C.client_details FROM clients C JOIN InvoiceCount I ON C.client_id = I.client_id ORDER BY I.NumInvoices DESC LIMIT 1",
        "SELECT C.client_id, C.client_details FROM (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1) AS MaxInv JOIN clients C ON MaxInv.client_id = C.client_id",
        "SELECT client_id, client_details FROM clients WHERE client_id IN (SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(count) FROM (SELECT COUNT(invoice_id) as count FROM invoices GROUP BY client_id)))",
        "SELECT C1.client_id, C1.client_details FROM clients C1 WHERE (SELECT COUNT(*) FROM invoices WHERE client_id = C1.client_id) = (SELECT MAX(InvoiceCounts) FROM (SELECT COUNT(*) AS InvoiceCounts FROM invoices GROUP BY client_id) AS IVC)",
        "SELECT client_id, client_details FROM clients WHERE client_id = (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "nlq": "What are the client id and details for the client with the most invoices?",
    "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT clients.client_id, clients.client_details FROM clients JOIN (SELECT client_id, COUNT(*) AS total FROM invoices GROUP BY client_id ORDER BY total DESC LIMIT 1) invoiced_max ON clients.client_id = invoiced_max.client_id",
        "SELECT C.client_id, C.client_details FROM clients C INNER JOIN (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1) I ON C.client_id = I.client_id",
        "SELECT client_id, client_details FROM clients WHERE client_id = (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT C.client_id, C.client_details FROM clients C WHERE C.client_id IN (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1)",
        "SELECT C.client_id, C.client_details FROM clients C, (SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) = (SELECT MAX(cnt) FROM (SELECT COUNT(invoice_id) AS cnt FROM invoices GROUP BY client_id))) I WHERE C.client_id = I.client_id",
        "SELECT C.client_id, C.client_details FROM clients C WHERE EXISTS (SELECT 1 FROM (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1) I WHERE C.client_id = I.client_id)",
        "SELECT client_id, client_details FROM (SELECT C.client_id, C.client_details, COUNT(I.invoice_id) AS total FROM clients C JOIN invoices I ON C.client_id = I.client_id GROUP BY C.client_id ORDER BY total DESC LIMIT 1)",
        "SELECT client_id, client_details FROM clients WHERE client_id = (SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(invoice_id) DESC LIMIT 1)",
        "SELECT C.client_id, C.client_details FROM clients C JOIN (SELECT client_id, COUNT(*) AS num_invoices FROM invoices GROUP BY client_id ORDER BY num_invoices DESC LIMIT 1) V ON C.client_id = V.client_id"
      ]
    ]
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "nlq": "What are client ids for clients with at least 2 invoices.",
    "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT clients.client_id FROM clients JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id HAVING COUNT(invoices.invoice_id) >= 2",
        "SELECT c.client_id FROM clients c INNER JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2",
        "SELECT client_id FROM (SELECT client_id, COUNT(*) AS total_invoices FROM invoices GROUP BY client_id) WHERE total_invoices >= 2",
        "SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
        "SELECT client_id FROM clients WHERE client_id IN (SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(*) >= 2)",
        "SELECT DISTINCT c.client_id FROM clients c, invoices i WHERE c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(i.invoice_id) >= 2",
        "SELECT DISTINCT client_id FROM invoices i GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
        "SELECT c.client_id FROM clients c WHERE EXISTS (SELECT 1 FROM invoices i WHERE i.client_id = c.client_id GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2)",
        "SELECT t.client_id FROM (SELECT client_id, COUNT(invoice_id) AS num_invoices FROM invoices GROUP BY client_id) t WHERE t.num_invoices >= 2",
        "SELECT clients.client_id FROM clients INNER JOIN (SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2) inv ON clients.client_id = inv.client_id"
      ]
    ]
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "nlq": "Return the client ids for clients with two or more invoices?",
    "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
    "infer_predictions": [
      [
        "SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2",
        "SELECT i.client_id FROM invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2",
        "SELECT DISTINCT i.client_id FROM invoices i WHERE (SELECT COUNT(*) FROM invoices WHERE client_id = i.client_id) >= 2",
        "SELECT i.client_id FROM (SELECT client_id, COUNT(invoice_id) AS num_invoices FROM invoices GROUP BY client_id) i WHERE i.num_invoices >= 2",
        "SELECT client_id FROM (SELECT client_id, COUNT(*) as count FROM invoices GROUP BY client_id) WHERE count >= 2",
        "SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(*) >= 2",
        "SELECT DISTINCT client_id FROM invoices i1 WHERE (SELECT COUNT(*) FROM invoices i2 WHERE i2.client_id = i1.client_id) >= 2",
        "SELECT i.client_id FROM invoices i JOIN (SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(*) >= 2) j ON i.client_id = j.client_id GROUP BY i.client_id",
        "SELECT DISTINCT i.client_id FROM invoices i INNER JOIN (SELECT client_id, COUNT(*) AS cnt FROM invoices GROUP BY client_id HAVING cnt >= 2) t ON i.client_id = t.client_id",
        "SELECT i.client_id FROM invoices i WHERE EXISTS (SELECT NULL FROM invoices WHERE client_id = i.client_id GROUP BY client_id HAVING COUNT(invoice_id) >= 2)"
      ]
    ]
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "nlq": "Show all invoice status codes and the number of invoices with each status.",
    "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
    "infer_predictions": [
      [
        "SELECT invoice_status, COUNT(*) FROM invoices GROUP BY invoice_status",
        "SELECT invoice_status, COUNT(invoice_id) AS NumberOfInvoices FROM invoices GROUP BY invoice_status",
        "SELECT invoice_status, COUNT(1) AS CountOfInvoices FROM invoices GROUP BY invoice_status",
        "SELECT i.invoice_status, COUNT(i.invoice_id) FROM invoices i GROUP BY i.invoice_status",
        "SELECT invoices.invoice_status, COUNT(*) AS total FROM invoices GROUP BY invoices.invoice_status",
        "SELECT invoice_status, COUNT(invoice_status) FROM invoices GROUP BY invoice_status",
        "SELECT inv.invoice_status, COUNT(inv.invoice_id) AS TotalInvoices FROM invoices inv GROUP BY inv.invoice_status",
        "SELECT i.invoice_status, COUNT(*) FROM invoices i GROUP BY i.invoice_status",
        "SELECT DISTINCT invoice_status, COUNT(invoice_id) OVER (PARTITION BY invoice_status) FROM invoices",
        "SELECT COUNT(*), inv.invoice_status FROM invoices inv GROUP BY inv.invoice_status"
      ]
    ]
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "nlq": "How many invoices are there for each status code?",
    "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
    "infer_predictions": [
      [
        "SELECT invoice_status, COUNT(invoice_id) AS count FROM invoices GROUP BY invoice_status",
        "SELECT COUNT(*) AS total, invoice_status FROM invoices GROUP BY invoice_status",
        "SELECT invoice_status, COUNT(*) FROM invoices GROUP BY invoice_status",
        "SELECT i.invoice_status, COUNT(i.invoice_id) FROM invoices i GROUP BY i.invoice_status",
        "SELECT A.invoice_status, COUNT(A.invoice_id) FROM invoices A GROUP BY A.invoice_status",
        "SELECT i.invoice_status, COUNT(1) FROM invoices i GROUP BY i.invoice_status",
        "SELECT invoice_status, COUNT(invoice_id) AS NumberOfInvoices FROM invoices GROUP BY invoice_status",
        "SELECT invoice_status, COUNT(*) AS TotalInvoices FROM invoices GROUP BY invoice_status",
        "SELECT invoice_status AS Status, COUNT(*) AS CountOfInvoices FROM invoices GROUP BY invoice_status",
        "SELECT i.invoice_status, COUNT(i.invoice_id) AS invoice_count FROM invoices i GROUP BY i.invoice_status"
      ]
    ]
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "nlq": "What is the invoice status code with most number of invoices.",
    "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1",
        "SELECT I.invoice_status FROM invoices I GROUP BY I.invoice_status ORDER BY COUNT(I.invoice_id) DESC LIMIT 1",
        "WITH InvoiceCounts AS (SELECT invoice_status, COUNT(*) AS freq FROM invoices GROUP BY invoice_status) SELECT invoice_status FROM InvoiceCounts ORDER BY freq DESC LIMIT 1",
        "SELECT invoice_status FROM (SELECT invoice_status, COUNT(*) as count FROM invoices GROUP BY invoice_status) AS Counts ORDER BY count DESC LIMIT 1",
        "SELECT I.invoice_status FROM (SELECT invoice_status, COUNT(*) cnt FROM invoices GROUP BY invoice_status ORDER BY cnt DESC) AS I LIMIT 1",
        "SELECT invoice_status, COUNT(*) as NumInvoices FROM invoices GROUP BY invoice_status ORDER BY NumInvoices DESC LIMIT 1",
        "SELECT invoice_status FROM invoices GROUP BY invoice_status HAVING COUNT(invoice_status) = (SELECT MAX(Count) FROM (SELECT COUNT(invoice_status) Count FROM invoices GROUP BY invoice_status) Temp)",
        "SELECT I.invoice_status FROM invoices I JOIN (SELECT invoice_status, COUNT(*) AS count FROM invoices GROUP BY invoice_status) AS ic ON I.invoice_status = ic.invoice_status GROUP BY I.invoice_status ORDER BY count DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "nlq": "Return the invoice status that has the most invoices.",
    "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1",
        "SELECT i.invoice_status FROM invoices i GROUP BY i.invoice_status ORDER BY COUNT(i.invoice_status) DESC LIMIT 1",
        "SELECT top_status.invoice_status FROM (SELECT invoice_status, COUNT(invoice_id) as count_id FROM invoices GROUP BY invoice_status) top_status ORDER BY top_status.count_id DESC LIMIT 1",
        "SELECT invoice_status FROM invoices WHERE invoice_id IN (SELECT invoice_id FROM invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1)",
        "WITH StatusCounts AS (SELECT invoice_status, COUNT(*) as total FROM invoices GROUP BY invoice_status) SELECT invoice_status FROM StatusCounts ORDER BY total DESC LIMIT 1",
        "SELECT invoice_status FROM (SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC) LIMIT 1",
        "SELECT i.invoice_status FROM (SELECT invoice_status, COUNT(invoice_id) AS count FROM invoices GROUP BY invoice_status ORDER BY count DESC LIMIT 1) i",
        "SELECT invoice_status, COUNT(*) AS num_invoices FROM invoices GROUP BY invoice_status ORDER BY num_invoices DESC LIMIT 1"
      ]
    ]
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "nlq": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
    "infer_predictions": [
      [
        "SELECT invoices.invoice_status, invoices.invoice_details, clients.client_id, clients.client_details, agencies.agency_id, agencies.agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM invoices i INNER JOIN clients c ON i.client_id = c.client_id INNER JOIN agencies a ON c.agency_id = a.agency_id",
        "SELECT inv.invoice_status, inv.invoice_details, clnt.client_id, clnt.client_details, agc.agency_id, agc.agency_details FROM invoices inv, clients clnt, agencies agc WHERE inv.client_id = clnt.client_id AND clnt.agency_id = agc.agency_id",
        "SELECT invoice_status AS InvoiceStatus, invoices.invoice_details AS InvoiceDetails, client_id AS ClientID, client_details AS ClientDetails, agency_id AS AgencyID, agencies.agency_details AS AgencyDetails FROM invoices JOIN clients USING (client_id) JOIN agencies USING (agency_id)",
        "SELECT * FROM invoices INNER JOIN clients ON invoices.client_id = clients.client_id INNER JOIN agencies ON clients.agency_id = agencies.agency_id WHERE invoices.invoice_status IS NOT NULL AND clients.client_id IS NOT NULL AND agencies.agency_id IS NOT NULL",
        "SELECT invoice_status, invoice_details, client_details, agencies.agency_id, agency_details FROM invoices, clients, agencies WHERE invoices.client_id = clients.client_id AND clients.agency_id = agencies.agency_id",
        "SELECT IFNULL(i.invoice_status, '') as Status, i.invoice_details, IFNULL(c.client_id, '') as ClientID, c.client_details, a.agency_id, a.agency_details FROM invoices i JOIN clients c ON i.client_id = c.client_id JOIN agencies a ON c.agency_id = a.agency_id"
      ]
    ]
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "nlq": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
    "infer_predictions": [
      [
        "SELECT invoices.invoice_status, invoices.invoice_details, invoices.client_id, clients.client_details, agencies.agency_id, agencies.agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id",
        "SELECT inv.invoice_status, inv.invoice_details, inv.client_id, cl.client_details, ag.agency_id, ag.agency_details FROM invoices inv INNER JOIN clients cl ON inv.client_id = cl.client_id INNER JOIN agencies ag ON cl.agency_id = ag.agency_id",
        "SELECT i.invoice_status, i.invoice_details, i.client_id, c.client_details, a.agency_id, a.agency_details FROM invoices i, clients c, agencies a WHERE i.client_id = c.client_id AND c.agency_id = a.agency_id",
        "SELECT DISTINCT invoices.invoice_status, invoices.invoice_details, invoices.client_id, clients.client_details, agencies.agency_id, agencies.agency_details FROM invoices, clients, agencies WHERE invoices.client_id = clients.client_id AND clients.agency_id = agencies.agency_id",
        "SELECT inv.invoice_status AS 'Status', inv.invoice_details AS 'Details', inv.client_id AS 'Client ID', cl.client_details AS 'Client Details', ag.agency_id AS 'Agency ID', ag.agency_details AS 'Agency Details' FROM invoices inv JOIN clients cl ON inv.client_id = cl.client_id JOIN agencies ag ON cl.agency_id = ag.agency_id",
        "SELECT inv.invoice_status || ' ' || inv.invoice_details AS Invoice_Info, inv.client_id, cl.client_details, ag.agency_id, ag.agency_details FROM invoices inv JOIN clients cl ON inv.client_id = cl.client_id JOIN agencies ag ON cl.agency_id = ag.agency_id",
        "SELECT inv.invoice_status, inv.invoice_details, inv.client_id, cl.client_details, cl.agency_id, a.agency_details FROM invoices inv JOIN clients cl ON inv.client_id = cl.client_id JOIN agencies a ON cl.agency_id = a.agency_id ORDER BY inv.invoice_status",
        "SELECT * FROM (SELECT invoice_status, invoice_details, client_id FROM invoices) i JOIN (SELECT client_id, client_details, agency_id FROM clients) c ON i.client_id = c.client_id JOIN (SELECT agency_id, agency_details FROM agencies) a ON c.agency_id = a.agency_id",
        "SELECT i.invoice_status, i.invoice_details, i.client_id, c.client_details, c.agency_id as cid, a.agency_details FROM invoices i JOIN (SELECT client_id, client_details, agency_id FROM clients) c ON i.client_id = c.client_id JOIN agencies a ON a.agency_id = c.agency_id",
        "SELECT iv.invoice_status, iv.invoice_details, iv.client_id, clnt.client_details, clnt.agency_id, agcy.agency_details FROM invoices iv LEFT JOIN clients clnt ON iv.client_id = clnt.client_id LEFT JOIN agencies agcy ON clnt.agency_id = agcy.agency_id"
      ]
    ]
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "nlq": "List all meeting type codes and details.",
    "gold": "SELECT meeting_type ,  other_details FROM meetings",
    "infer_predictions": [
      [
        "SELECT DISTINCT meeting_type FROM meetings",
        "SELECT meeting_type FROM meetings GROUP BY meeting_type",
        "SELECT m.meeting_type FROM meetings m GROUP BY m.meeting_type",
        "SELECT meeting_type FROM meetings WHERE meeting_type IS NOT NULL",
        "SELECT DISTINCT m.meeting_type FROM meetings m",
        "SELECT DISTINCT meeting_type as Type FROM meetings",
        "SELECT DISTINCT Type.meeting_type FROM meetings Type",
        "SELECT m.meeting_type FROM meetings m WHERE m.meeting_type IS NOT NULL",
        "SELECT meeting_type FROM meetings ORDER BY meeting_type DESC",
        "SELECT meeting_type FROM meetings ORDER BY meeting_type ASC"
      ]
    ]
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "nlq": "What are all meeting types and other details?",
    "gold": "SELECT meeting_type ,  other_details FROM meetings",
    "infer_predictions": [
      [
        "SELECT meeting_type, other_details FROM meetings",
        "SELECT DISTINCT m.meeting_type, m.other_details FROM meetings m",
        "SELECT mt.meeting_type, mt.other_details FROM meetings mt WHERE mt.meeting_id IS NOT NULL",
        "SELECT DISTINCT mt.meeting_type, mt.other_details FROM meetings mt WHERE mt.meeting_id IS NOT NULL",
        "SELECT mtg.meeting_type, mtg.other_details FROM meetings mtg GROUP BY mtg.meeting_type, mtg.other_details",
        "SELECT DISTINCT m_type.meeting_type, m_details.other_details FROM meetings m_details INNER JOIN meetings m_type ON m_details.meeting_id = m_type.meeting_id",
        "SELECT meeting_type AS MeetingType, other_details AS MeetingDetails FROM meetings",
        "SELECT meetings.meeting_type, meetings.other_details FROM meetings GROUP BY meetings.meeting_type, meetings.other_details ORDER BY meetings.meeting_type"
      ]
    ]
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "nlq": "Show all meeting outcomes and purposes.",
    "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
    "infer_predictions": [
      [
        "SELECT meeting_outcome, purpose_of_meeting FROM meetings;",
        "SELECT m.meeting_outcome, m.purpose_of_meeting FROM meetings m;",
        "SELECT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM meetings;",
        "SELECT DISTINCT mOut.meeting_outcome, mOut.purpose_of_meeting FROM meetings mOut;",
        "SELECT mtg.meeting_outcome, mtg.purpose_of_meeting FROM meetings mtg;",
        "SELECT * FROM (SELECT meeting_outcome, purpose_of_meeting FROM meetings);",
        "SELECT mOut.meeting_outcome AS Meeting_Outcome, mOut.purpose_of_meeting AS Meeting_Purpose FROM meetings mOut;"
      ]
    ]
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "nlq": "What are all meeting outcomes and purposes?",
    "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
    "infer_predictions": [
      [
        "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM meetings",
        "SELECT meeting_outcome, purpose_of_meeting FROM meetings GROUP BY meeting_outcome, purpose_of_meeting",
        "SELECT m.meeting_outcome, m.purpose_of_meeting FROM meetings m GROUP BY m.meeting_outcome, m.purpose_of_meeting",
        "SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM meetings m",
        "SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM meetings WHERE meeting_outcome IS NOT NULL AND purpose_of_meeting IS NOT NULL",
        "SELECT m.meeting_outcome, m.purpose_of_meeting FROM meetings m WHERE m.meeting_outcome IS NOT NULL AND m.purpose_of_meeting IS NOT NULL GROUP BY m.meeting_outcome, m.purpose_of_meeting",
        "SELECT DISTINCT m.meeting_outcome AS Outcome, m.purpose_of_meeting AS Purpose FROM meetings m",
        "SELECT m.meeting_outcome, m.purpose_of_meeting FROM meetings m LEFT JOIN clients c ON m.client_id = c.client_id",
        "SELECT DISTINCT meeting_outcome AS Outcome, purpose_of_meeting AS Purpose FROM meetings WHERE meeting_outcome IN (SELECT meeting_outcome FROM meetings) AND purpose_of_meeting IN (SELECT purpose_of_meeting FROM meetings)",
        "SELECT DISTINCT m1.meeting_outcome, m1.purpose_of_meeting FROM meetings m1 JOIN meetings m2 ON m1.meeting_id = m2.meeting_id"
      ]
    ]
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "nlq": "Show all payment ids and details for invoices whose status is 'Working'.",
    "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "infer_predictions": [
      [
        "SELECT p.payment_id, p.payment_details FROM payments p JOIN invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';",
        "SELECT payment_id, payment_details FROM payments WHERE invoice_id IN (SELECT invoice_id FROM invoices WHERE invoice_status = 'Working');",
        "SELECT p.payment_id, p.payment_details FROM payments p, invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working';",
        "SELECT payment_details, payment_id FROM payments WHERE EXISTS (SELECT 1 FROM invoices WHERE invoices.invoice_id = payments.invoice_id AND invoice_status = 'Working');",
        "SELECT payment_id, payment_details FROM payments INNER JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoices.invoice_status = 'Working';",
        "SELECT p.payment_id, p.payment_details FROM payments AS p INNER JOIN invoices AS i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';",
        "SELECT p.payment_id, p.payment_details FROM payments p WHERE p.invoice_id IN (SELECT invoice_id FROM invoices i WHERE i.invoice_status = 'Working');",
        "SELECT payment_id, payment_details FROM payments WHERE invoice_id IN (SELECT invoice_id FROM invoices i WHERE i.invoice_status = 'Working');",
        "SELECT p.payment_id, p.payment_details FROM payments p INNER JOIN invoices i ON p.invoice_id = i.invoice_id AND i.invoice_status = 'Working';",
        "SELECT payments.payment_id, payments.payment_details FROM payments, invoices WHERE payments.invoice_id = invoices.invoice_id AND invoices.invoice_status = 'Working';"
      ]
    ]
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "nlq": "What are all payment ids and payment details for invoices with status Working?",
    "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "infer_predictions": [
      [
        "SELECT p.payment_id, p.payment_details FROM payments p JOIN invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
        "SELECT payment_id, payment_details FROM payments WHERE invoice_id IN (SELECT invoice_id FROM invoices WHERE invoice_status = 'Working')",
        "SELECT pay.payment_id, pay.payment_details FROM payments pay INNER JOIN invoices inv ON pay.invoice_id = inv.invoice_id WHERE inv.invoice_status = 'Working'",
        "SELECT payment_details, payment_id FROM payments WHERE EXISTS (SELECT 1 FROM invoices WHERE invoices.invoice_id = payments.invoice_id AND invoice_status = 'Working')",
        "SELECT payments.payment_id, payments.payment_details FROM payments INNER JOIN invoices ON payments.invoice_id = invoices.invoice_id WHERE invoices.invoice_status = 'Working'",
        "SELECT p.payment_id, p.payment_details FROM payments AS p JOIN invoices AS i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working'",
        "SELECT DISTINCT p.payment_id, p.payment_details FROM payments p, invoices i WHERE p.invoice_id = i.invoice_id AND i.invoice_status = 'Working'",
        "SELECT payment_id, payment_details FROM payments INNER JOIN (SELECT invoice_id FROM invoices WHERE invoice_status = 'Working') AS sub ON sub.invoice_id = payments.invoice_id",
        "SELECT payment_details, payment_id FROM payments JOIN invoices ON payments.invoice_id = invoices.invoice_id AND invoices.invoice_status = 'Working'",
        "SELECT p.payment_id, p.payment_details FROM payments p WHERE p.invoice_id IN (SELECT i.invoice_id FROM invoices i WHERE i.invoice_status = 'Working')"
      ]
    ]
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "nlq": "Show all invoice ids and statuses without a payment.",
    "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "infer_predictions": [
      [
        "SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments)",
        "SELECT inv.invoice_id, inv.invoice_status FROM invoices inv LEFT JOIN payments pay ON inv.invoice_id = pay.invoice_id WHERE pay.invoice_id IS NULL",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i WHERE NOT EXISTS (SELECT 1 FROM payments p WHERE p.invoice_id = i.invoice_id)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices AS i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM payments p)",
        "SELECT DISTINCT inv.invoice_id, inv.invoice_status FROM invoices inv WHERE inv.invoice_id NOT IN (SELECT invoice_id FROM payments)",
        "SELECT invoice_id, invoice_status FROM invoices EXCEPT SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id IN (SELECT invoice_id FROM payments)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i LEFT OUTER JOIN payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL",
        "SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT DISTINCT p.invoice_id FROM payments p)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL",
        "SELECT inv.invoice_id, inv.invoice_status FROM invoices inv WHERE NOT EXISTS (SELECT NULL FROM payments p WHERE p.invoice_id = inv.invoice_id)"
      ]
    ]
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "nlq": "What are the invoice ids and statuses for invoices without a payment?",
    "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "infer_predictions": [
      [
        "SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM payments)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL",
        "SELECT inv.invoice_id, inv.invoice_status FROM invoices inv WHERE NOT EXISTS (SELECT 1 FROM payments pay WHERE pay.invoice_id = inv.invoice_id)",
        "SELECT invoice_id, invoice_status FROM invoices EXCEPT SELECT invoices.invoice_id, invoices.invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i WHERE i.invoice_id NOT IN (SELECT DISTINCT p.invoice_id FROM payments p)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i WHERE NOT EXISTS (SELECT NULL FROM payments p WHERE p.invoice_id = i.invoice_id)",
        "SELECT p.invoice_id, invoice_status FROM invoices i LEFT OUTER JOIN payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i WHERE i.invoice_id NOT IN (SELECT invoice_id FROM payments WHERE invoice_id IS NOT NULL)",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL"
      ]
    ]
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "nlq": "How many payments do we have?",
    "gold": "SELECT count(*) FROM Payments",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM payments",
        "SELECT COUNT(payment_id) FROM payments",
        "SELECT COUNT(1) FROM payments",
        "SELECT COUNT(*) AS number_of_payments FROM payments",
        "SELECT COUNT(DISTINCT payment_id) AS payment_count FROM payments",
        "SELECT COUNT(*) FROM (SELECT * FROM payments)",
        "SELECT COUNT(*) FROM (SELECT payment_id FROM payments)",
        "SELECT COUNT(payment_id) FROM (SELECT payments.payment_id FROM payments)"
      ]
    ]
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of payments.",
    "gold": "SELECT count(*) FROM Payments",
    "infer_predictions": [
      [
        "SELECT COUNT(payment_id) FROM payments",
        "SELECT COUNT(*) FROM payments",
        "SELECT COUNT(p.payment_id) FROM payments p",
        "SELECT COUNT(1) FROM payments",
        "SELECT COUNT(payment_id) FROM payments GROUP BY invoice_id",
        "with Payment_Count AS (SELECT *, COUNT(payment_id) AS NumPayments FROM payments) SELECT SUM(NumPayments) FROM Payment_Count",
        "SELECT (SELECT COUNT(*) FROM payments) AS TotalPayments",
        "SELECT (SELECT COUNT(payment_id) FROM payments) AS PaymentCount",
        "SELECT SUM(CASE WHEN payment_id IS NOT NULL THEN 1 ELSE 0 END) FROM payments"
      ]
    ]
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "nlq": "List all payment ids and its corresponding invoice ids and details.",
    "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
    "infer_predictions": [
      [
        "SELECT p.payment_id, p.invoice_id, i.invoice_details FROM payments p INNER JOIN invoices i ON p.invoice_id = i.invoice_id",
        "SELECT p.payment_id, i.invoice_id, i.invoice_details FROM invoices i JOIN payments p ON i.invoice_id = p.invoice_id",
        "SELECT payment_id, payments.invoice_id, invoice_details FROM payments, invoices WHERE payments.invoice_id = invoices.invoice_id",
        "SELECT payments.invoice_id, payment_details, invoice_details FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT payments.payment_id, payments.invoice_id, invoices.invoice_details FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT invoice_id AS InvoiceID, payment_id AS PaymentID, invoice_details FROM invoices NATURAL JOIN payments",
        "SELECT DISTINCT p.payment_id, p.invoice_id, i.invoice_details FROM payments p, invoices i WHERE p.invoice_id = i.invoice_id",
        "SELECT p.payment_id, p.invoice_id, i.invoice_details FROM payments p CROSS JOIN invoices i ON p.invoice_id = i.invoice_id"
      ]
    ]
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "nlq": "What are the payment ids, invoice ids, and payment details for all payments?",
    "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
    "infer_predictions": [
      [
        "SELECT payment_id, invoice_id, payment_details FROM payments",
        "SELECT p1.payment_id, p1.invoice_id, p1.payment_details FROM payments p1",
        "SELECT * FROM payments WHERE payment_details IS NOT NULL",
        "SELECT pmt.payment_id, pmt.invoice_id, pmt.payment_details FROM payments pmt",
        "SELECT payment_id, invoice_id, payment_details FROM payments ORDER BY payment_id",
        "SELECT payment_id, invoice_id, payment_details FROM payments ORDER BY invoice_id",
        "SELECT payment_id, invoice_id, payment_details FROM payments WHERE payment_id > 0",
        "SELECT p.payment_id, p.invoice_id, p.payment_details FROM payments p WHERE payment_id IN (SELECT payment_id FROM payments)"
      ]
    ]
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "nlq": "Show all the different invoice ids and statuses of the payments",
    "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT invoices.invoice_id, invoices.invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT DISTINCT i.invoice_id, i.invoice_status FROM invoices AS i INNER JOIN payments AS p ON i.invoice_id = p.invoice_id",
        "SELECT DISTINCT invoice_id, invoice_status FROM invoices WHERE invoice_id IN (SELECT invoice_id FROM payments)",
        "SELECT DISTINCT i.invoice_id, i.invoice_status FROM invoices i, payments p WHERE i.invoice_id = p.invoice_id",
        "SELECT invoices.invoice_id AS id, invoices.invoice_status AS status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT i.invoice_id, i.invoice_status FROM invoices i JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status",
        "SELECT invoices.invoice_id, invoices.invoice_status FROM invoices INNER JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id, invoices.invoice_status",
        "SELECT DISTINCT t1.invoice_id, t1.invoice_status FROM invoices t1 JOIN payments t2 ON t1.invoice_id = t2.invoice_id"
      ]
    ]
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "nlq": "What are the distinct invoice ids and statuses for all payments?",
    "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT invoices.invoice_id, invoices.invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id",
        "SELECT DISTINCT i.invoice_id, i.invoice_status FROM invoices i, payments p WHERE i.invoice_id = p.invoice_id",
        "SELECT DISTINCT a.invoice_id, a.invoice_status FROM invoices a INNER JOIN payments b ON a.invoice_id = b.invoice_id",
        "SELECT invoice_id, invoice_status FROM invoices WHERE invoice_id IN (SELECT DISTINCT invoice_id FROM payments)",
        "SELECT DISTINCT invoices.invoice_id, invoices.invoice_status FROM invoices, payments WHERE invoices.invoice_id = payments.invoice_id",
        "SELECT DISTINCT tmp.invoice_id, tmp.invoice_status FROM (SELECT invoices.invoice_id, invoices.invoice_status FROM invoices JOIN payments ON invoices.invoice_id = payments.invoice_id) tmp",
        "SELECT DISTINCT i.invoice_id, i.invoice_status FROM invoices AS i JOIN payments AS p WHERE i.invoice_id = p.invoice_id ORDER BY i.invoice_id"
      ]
    ]
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "nlq": "Show all invoice ids and the number of payments for each invoice.",
    "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
    "infer_predictions": [
      [
        "SELECT invoices.invoice_id, COUNT(payments.payment_id) AS payment_count FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id",
        "SELECT i.invoice_id, COUNT(p.payment_id) AS num_payments FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id",
        "SELECT inv.invoice_id, COUNT(pay.payment_id) AS total_payments FROM invoices inv LEFT OUTER JOIN payments pay ON inv.invoice_id = pay.invoice_id GROUP BY inv.invoice_id",
        "SELECT invoice_table.invoice_id, COUNT(payment_table.payment_id) FROM invoices AS invoice_table LEFT JOIN payments AS payment_table ON invoice_table.invoice_id = payment_table.invoice_id GROUP BY invoice_table.invoice_id",
        "SELECT inv.invoice_id, (SELECT COUNT(*) FROM payments WHERE payments.invoice_id = inv.invoice_id) AS count_of_payments FROM invoices inv",
        "SELECT i.invoice_id, COUNT(p.payment_id) AS payments_count FROM invoices AS i LEFT OUTER JOIN payments AS p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id",
        "SELECT invoices.invoice_id, (SELECT COUNT(payment_id) FROM payments WHERE payments.invoice_id = invoices.invoice_id) AS payment_count FROM invoices",
        "SELECT a.invoice_id, IFNULL(b.total_payments, 0) AS number_of_payments FROM invoices a LEFT JOIN (SELECT invoice_id, COUNT(payment_id) AS total_payments FROM payments GROUP BY invoice_id) b ON a.invoice_id = b.invoice_id",
        "SELECT inv_ids.invoice_id, COALESCE(pay_count.count_pay, 0) AS payment_numbers FROM invoices inv_ids LEFT JOIN (SELECT invoice_id, COUNT(payment_id) as count_pay FROM payments GROUP BY invoice_id) pay_count ON inv_ids.invoice_id = pay_count.invoice_id"
      ]
    ]
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "nlq": "How many payments are there for each invoice?",
    "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
    "infer_predictions": [
      [
        "SELECT i.invoice_id, COUNT(p.payment_id) AS payment_count FROM invoices i LEFT JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id",
        "SELECT invoice_id, COUNT(payment_id) FROM payments GROUP BY invoice_id",
        "SELECT invo.invoice_id, COUNT(pay.payment_id) FROM invoices invo JOIN payments pay ON invo.invoice_id = pay.invoice_id GROUP BY invo.invoice_id",
        "SELECT invoice_id, COUNT(*) FROM payments GROUP BY invoice_id",
        "SELECT invoices.invoice_id, COUNT(payments.payment_id) AS number_of_payments FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id",
        "SELECT DISTINCT invoices.invoice_id, COALESCE(cnt.cnt, 0) FROM invoices LEFT OUTER JOIN (SELECT invoice_id, COUNT(payment_id) AS cnt FROM payments GROUP BY invoice_id) cnt ON invoices.invoice_id = cnt.invoice_id",
        "SELECT invoices.invoice_id, IFNULL(SUM(CASE WHEN payments.invoice_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS payment_count FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id GROUP BY invoices.invoice_id",
        "SELECT i.invoice_id, (SELECT COUNT(*) FROM payments p WHERE p.invoice_id = i.invoice_id) AS payment_count FROM invoices i",
        "SELECT invoice_id, (SELECT COUNT(payment_id) FROM payments WHERE payments.invoice_id = invoices.invoice_id) AS num_payments FROM invoices"
      ]
    ]
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "nlq": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i WHERE i.invoice_id = (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1)",
        "SELECT invoice_id, invoice_status, invoice_details FROM invoices WHERE invoice_id IN (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices INNER JOIN (SELECT invoice_id, COUNT(*) AS payment_count FROM payments GROUP BY invoice_id ORDER BY payment_count DESC LIMIT 1) p ON invoices.invoice_id = p.invoice_id",
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i JOIN (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1) p ON i.invoice_id = p.invoice_id",
        "SELECT i1.invoice_id, i1.invoice_status, i1.invoice_details FROM invoices i1 WHERE i1.invoice_id = (SELECT p.invoice_id FROM payments p GROUP BY p.invoice_id HAVING COUNT(p.payment_id) = (SELECT MAX(tot) FROM (SELECT COUNT(p2.payment_id) AS tot FROM payments p2 GROUP BY p2.invoice_id)))",
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices AS i, (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(payment_id) DESC LIMIT 1) AS top_invoice WHERE i.invoice_id = top_invoice.invoice_id",
        "SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices WHERE invoices.invoice_id = (SELECT p.invoice_id FROM payments p GROUP BY p.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM (SELECT invoice_id, COUNT(*) AS c FROM payments GROUP BY invoice_id ORDER BY c DESC LIMIT 1) AS top_payments INNER JOIN invoices i ON i.invoice_id = top_payments.invoice_id"
      ]
    ]
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "nlq": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i WHERE i.invoice_id IN (SELECT p.invoice_id FROM payments p GROUP BY p.invoice_id ORDER BY COUNT(p.payment_id) DESC LIMIT 1)",
        "SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices JOIN (SELECT invoice_id, COUNT(*) as cnt FROM payments GROUP BY invoice_id ORDER BY cnt DESC LIMIT 1) as inv_max ON invoices.invoice_id = inv_max.invoice_id",
        "SELECT DISTINCT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i INNER JOIN payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id HAVING COUNT(p.payment_id) = (SELECT MAX(counts) FROM (SELECT COUNT(payment_id) as counts FROM payments GROUP BY invoice_id) subquery)",
        "WITH PaymentCounts AS (SELECT invoice_id, COUNT(payment_id) AS num_payments FROM payments GROUP BY invoice_id), MaxPayments AS (SELECT MAX(num_payments) AS max_payments FROM PaymentCounts) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i JOIN PaymentCounts p ON i.invoice_id = p.invoice_id JOIN MaxPayments m ON p.num_payments = m.max_payments",
        "SELECT invoice_id, invoice_status, invoice_details FROM invoices WHERE invoice_id = (SELECT invoice_id FROM payments GROUP BY invoice_id ORDER BY COUNT(INVOICE_id) DESC LIMIT 1)",
        "SELECT invoice_id, invoice_status, invoice_details FROM invoices WHERE invoice_id IN (SELECT p.invoice_id FROM payments p GROUP BY p.invoice_id HAVING COUNT(p.payment_id) = (SELECT MAX(counts) FROM (SELECT COUNT(payment_id) as counts FROM payments GROUP BY invoice_id) temp))",
        "WITH invoice_payments AS (SELECT p.invoice_id, COUNT(p.payment_id) as total_payments FROM payments p GROUP BY p.invoice_id) SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i INNER JOIN invoice_payments on i.invoice_id = invoice_payments.invoice_id WHERE invoice_payments.total_payments = (SELECT MAX(total_payments) FROM invoice_payments)",
        "SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM invoices i LEFT JOIN (SELECT invoice_id, COUNT(payment_id) AS num_payments FROM payments GROUP BY invoice_id) p ON i.invoice_id = p.invoice_id WHERE p.num_payments = (SELECT MAX(num_payments) FROM (SELECT COUNT(payment_id) AS num_payments FROM payments GROUP BY invoice_id) sub)"
      ]
    ]
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "nlq": "How many staff do we have?",
    "gold": "SELECT count(*) FROM Staff",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM staff",
        "SELECT COUNT(staff.staff_id) FROM staff",
        "SELECT COUNT(1) FROM staff",
        "SELECT COUNT(*) AS total_staff FROM staff",
        "SELECT COUNT(staff_id) AS NumberOfStaff FROM staff",
        "SELECT COUNT(*) AS TotalNumberOfStaff FROM staff",
        "SELECT SUM(1) FROM staff",
        "SELECT (SELECT COUNT(*) FROM staff) as staff_count",
        "SELECT (SELECT COUNT(staff_id) FROM staff) as TotalStaff"
      ]
    ]
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of staff.",
    "gold": "SELECT count(*) FROM Staff",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM staff",
        "SELECT COUNT(staff.staff_id) FROM staff",
        "SELECT COUNT(staff_id) AS total_staff FROM staff",
        "SELECT COUNT(*) AS staff_count FROM staff",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM staff)",
        "SELECT COUNT(1) FROM staff",
        "SELECT COUNT(*) FROM staff WHERE staff_id IS NOT NULL",
        "SELECT COUNT(staff_id) FROM staff WHERE staff_id > 0"
      ]
    ]
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "nlq": "Show the agency ids and the number of staff in each agent?",
    "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
    "infer_predictions": [
      [
        "SELECT a.agency_id, COUNT(s.staff_id) FROM agencies a LEFT JOIN staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
        "SELECT agency_id, COUNT(staff_id) FROM agencies JOIN staff USING(agency_id) GROUP BY agency_id",
        "SELECT agencies.agency_id, COUNT(staff.staff_id) AS staff_count FROM agencies INNER JOIN staff ON agencies.agency_id = staff.agency_id GROUP BY agencies.agency_id",
        "SELECT ag.agency_id, COUNT(st.staff_id) FROM agencies ag, staff st WHERE ag.agency_id = st.agency_id GROUP BY ag.agency_id",
        "SELECT agencies.agency_id, (SELECT COUNT(*) FROM staff WHERE staff.agency_id = agencies.agency_id) AS number_of_staff FROM agencies",
        "SELECT a.agency_id, COUNT(s.staff_id) FROM agencies AS a LEFT JOIN staff AS s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
        "SELECT a.agency_id, (SELECT COUNT(*) FROM staff s WHERE s.agency_id = a.agency_id) AS num_staff FROM agencies a",
        "SELECT a.agency_id, IFNULL(COUNT(s.staff_id), 0) AS number_of_staff FROM agencies a LEFT JOIN staff s ON s.agency_id = a.agency_id GROUP BY a.agency_id",
        "SELECT a.agency_id, COUNT(DISTINCT s.staff_id) AS staff_number FROM agencies a LEFT JOIN staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id"
      ]
    ]
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "nlq": "Return the agency ids and number of staff in each.",
    "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, COUNT(DISTINCT staff.staff_id) FROM agencies JOIN staff ON agencies.agency_id = staff.agency_id GROUP BY agencies.agency_id",
        "SELECT a.agency_id, COUNT(s.staff_id) AS staff_count FROM agencies AS a LEFT JOIN staff AS s ON a.agency_id = s.agency_id GROUP BY a.agency_id",
        "SELECT agency_id, COUNT(staff_id) FROM (SELECT agency_id, staff_id FROM staff) GROUP BY agency_id",
        "WITH StaffCount AS (SELECT agency_id, COUNT(staff_id) as TotalStaff FROM staff GROUP BY agency_id) SELECT agencies.agency_id, StaffCount.TotalStaff FROM agencies JOIN StaffCount ON agencies.agency_id = StaffCount.agency_id",
        "SELECT a.agency_id, (SELECT COUNT(*) FROM staff WHERE staff.agency_id = a.agency_id) AS num_staff FROM agencies AS a",
        "SELECT agency_id, COUNT(*) FROM staff GROUP BY agency_id",
        "SELECT a.agency_id, (SELECT COUNT(staff_id) FROM staff s WHERE s.agency_id = a.agency_id) FROM agencies a",
        "SELECT a.agency_id, IFNULL(b.num_staff, 0) FROM agencies a LEFT JOIN (SELECT agency_id, COUNT(*) AS num_staff FROM staff GROUP BY agency_id) b ON a.agency_id = b.agency_id",
        "SELECT agency_id, COUNT(staff_id) FROM staff GROUP BY agency_id ORDER BY agency_id",
        "SELECT agency_id, SUM(CASE WHEN staff_id IS NOT NULL THEN 1 ELSE 0 END) FROM staff GROUP BY agency_id"
      ]
    ]
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "nlq": "What is the agent id and details for the agency with most staff?",
    "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT a.agency_id, a.agency_details FROM agencies a JOIN (SELECT agency_id, COUNT(staff_id) AS staff_count FROM staff GROUP BY agency_id ORDER BY staff_count DESC LIMIT 1) staff_ct ON a.agency_id = staff_ct.agency_id",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE a.agency_id = (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM staff GROUP BY agency_id HAVING COUNT(staff_id) = (SELECT MAX(st_count) FROM (SELECT COUNT(staff_id) AS st_count FROM staff GROUP BY agency_id)))",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN staff ON agencies.agency_id = staff.agency_id GROUP BY agencies.agency_id ORDER BY COUNT(staff.staff_id) DESC LIMIT 1",
        "WITH StaffCount AS (SELECT agency_id, COUNT(*) AS TotalStaff FROM staff GROUP BY agency_id) SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN StaffCount ON agencies.agency_id = StaffCount.agency_id WHERE StaffCount.TotalStaff = (SELECT MAX(TotalStaff) FROM StaffCount)",
        "WITH RankedAgencies AS (SELECT staff.agency_id, COUNT(staff.staff_id) AS staff_count, DENSE_RANK() OVER (ORDER BY COUNT(staff.staff_id) DESC) AS rank FROM staff GROUP BY staff.agency_id) SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN RankedAgencies ON agencies.agency_id = RankedAgencies.agency_id WHERE RankedAgencies.rank = 1",
        "SELECT agencies.agency_id, agency_details FROM agencies WHERE agencies.agency_id = (SELECT agency_id FROM (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC) LIMIT 1)",
        "WITH staff_counts AS (SELECT agency_id, COUNT(staff_id) AS num_staff FROM staff GROUP BY agency_id) SELECT agencies.agency_id, agencies.agency_details FROM agencies INNER JOIN staff_counts ON agencies.agency_id = staff_counts.agency_id WHERE staff_counts.num_staff = (SELECT MAX(num_staff) FROM staff_counts)",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT s.agency_id FROM staff s GROUP BY s.agency_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ]
    ]
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "nlq": "Return the id and detail for the agency with the most staff.",
    "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "infer_predictions": [
      [
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN (SELECT agency_id, COUNT(staff_id) AS staff_count FROM staff GROUP BY agency_id ORDER BY staff_count DESC LIMIT 1) as temp ON agencies.agency_id = temp.agency_id",
        "SELECT a.agency_id, a.agency_details FROM agencies a INNER JOIN (SELECT agency_id FROM staff GROUP BY agency_id HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT COUNT(*) as count FROM staff GROUP BY agency_id))) b ON a.agency_id = b.agency_id",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE a.agency_id = (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
        "SELECT agency_id, agency_details FROM agencies WHERE agency_id = (SELECT agency_id FROM staff GROUP BY agency_id HAVING COUNT(staff_id) = (SELECT MAX(c) FROM (SELECT COUNT(staff_id) as c FROM staff GROUP BY agency_id)))",
        "SELECT a.agency_id, a.agency_details FROM agencies a, (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) b WHERE a.agency_id = b.agency_id",
        "SELECT a.agency_id, a.agency_details FROM agencies a WHERE a.agency_id IN (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1)",
        "SELECT top_agency.agency_id, top_agency.agency_details FROM agencies top_agency WHERE top_agency.agency_id = (SELECT sub.agency_id FROM (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1) sub)",
        "SELECT agencies.agency_id, agencies.agency_details FROM agencies WHERE agency_id IN (SELECT agency_id FROM staff GROUP BY agency_id HAVING COUNT(staff_id) = (SELECT MAX(c) FROM (SELECT COUNT(staff_id) as c FROM staff GROUP BY agency_id)))",
        "SELECT a.agency_id, a.agency_details FROM (SELECT agency_id, agency_details FROM agencies) a JOIN (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1) s ON a.agency_id = s.agency_id",
        "SELECT agencies.agency_id, agencies.agency_details FROM (SELECT agency_id FROM staff GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1) max_staff JOIN agencies ON max_staff.agency_id = agencies.agency_id"
      ]
    ]
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "nlq": "Show meeting outcome codes and the number of meeting in each outcome.",
    "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
    "infer_predictions": [
      [
        "SELECT meeting_outcome, COUNT(*) AS outcome_count FROM meetings GROUP BY meeting_outcome",
        "SELECT meeting_outcome, COUNT(meeting_id) AS outcome_count FROM meetings GROUP BY meeting_outcome",
        "SELECT m.meeting_outcome, COUNT(m.meeting_id) AS outcome_count FROM meetings m GROUP BY m.meeting_outcome",
        "SELECT meeting_outcome, COUNT(DISTINCT meeting_id) AS outcome_count FROM meetings GROUP BY meeting_outcome",
        "SELECT m.meeting_outcome, COUNT(DISTINCT m.meeting_id) AS outcome_count FROM meetings m GROUP BY m.meeting_outcome",
        "WITH OutcomeCounts AS (SELECT meeting_outcome, COUNT(*) AS count FROM meetings GROUP BY meeting_outcome) SELECT meeting_outcome, count FROM OutcomeCounts",
        "SELECT meeting_outcome, COUNT(1) AS outcome_count FROM meetings GROUP BY meeting_outcome",
        "SELECT DISTINCT m.meeting_outcome, (SELECT COUNT(*) FROM meetings WHERE meeting_outcome = m.meeting_outcome) AS outcome_count FROM meetings m",
        "WITH RecursiveOutcome AS (SELECT meeting_outcome FROM meetings UNION ALL SELECT meeting_outcome FROM meetings) SELECT meeting_outcome, COUNT(*) FROM RecursiveOutcome GROUP BY meeting_outcome",
        "SELECT meeting_outcome, COUNT(*) AS num_of_meetings FROM meetings GROUP BY meeting_outcome ORDER BY num_of_meetings DESC"
      ]
    ]
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "nlq": "How many meetings had each meeting outcome?",
    "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
    "infer_predictions": [
      [
        "SELECT meeting_outcome, COUNT(*) AS count FROM meetings GROUP BY meeting_outcome",
        "SELECT meeting_outcome, COUNT(meeting_id) AS count FROM meetings GROUP BY meeting_outcome",
        "SELECT m.meeting_outcome, COUNT(m.meeting_id) AS total FROM meetings m GROUP BY m.meeting_outcome",
        "SELECT meeting_outcome, COUNT(1) FROM meetings GROUP BY meeting_outcome",
        "SELECT meeting_outcome, COUNT(DISTINCT meeting_id) FROM meetings GROUP BY meeting_outcome",
        "SELECT m.meeting_outcome, COUNT(*) FROM meetings m GROUP BY m.meeting_outcome",
        "SELECT meeting_outcome, COUNT(meeting_id) FROM meetings GROUP BY meeting_outcome HAVING COUNT(meeting_id) > 0",
        "SELECT m.meeting_outcome, COUNT(m.meeting_id) FROM meetings m GROUP BY m.meeting_outcome HAVING COUNT(m.meeting_id) > 0",
        "SELECT meeting_outcome, COUNT(*) AS total_meetings FROM meetings GROUP BY meeting_outcome ORDER BY total_meetings DESC",
        "SELECT m.meeting_outcome, COUNT(*) FROM meetings m GROUP BY m.meeting_outcome ORDER BY COUNT(*) DESC"
      ]
    ]
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "nlq": "List the client ids and the number of meeting for each client.",
    "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
    "infer_predictions": [
      [
        "SELECT clients.client_id, COUNT(meetings.meeting_id) AS number_of_meetings FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id",
        "SELECT c.client_id, COUNT(m.meeting_id) AS meeting_count FROM clients c INNER JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id",
        "SELECT client_id, COUNT(DISTINCT meeting_id) AS meetings_total FROM meetings GROUP BY client_id",
        "SELECT cl.client_id, (SELECT COUNT(*) FROM meetings mt WHERE mt.client_id = cl.client_id) AS meetings_sum FROM clients cl",
        "SELECT client_id, (COUNT(*)) as count_meetings FROM meetings GROUP BY client_id",
        "SELECT c1.client_id, (SELECT COUNT(m1.meeting_id) FROM meetings m1 WHERE m1.client_id = c1.client_id) AS total_meetings FROM clients c1 ORDER BY c1.client_id",
        "SELECT c.client_id, IFNULL(B.meetings_count, 0) AS total_meetings FROM clients c LEFT JOIN (SELECT client_id, COUNT(meeting_id) AS meetings_count FROM meetings GROUP BY client_id) B ON c.client_id = B.client_id",
        "SELECT cl.client_id, COALESCE(SUM(CASE WHEN mt.meeting_id IS NOT NULL THEN 1 ELSE 0 END), 0) AS num_meetings FROM clients cl LEFT OUTER JOIN meetings mt ON cl.client_id = mt.client_id GROUP BY cl.client_id",
        "SELECT DISTINCT(cl.client_id), COUNT(ALL mt.meeting_id) OVER (PARTITION BY cl.client_id) AS num_of_meetings FROM clients cl LEFT JOIN meetings mt ON cl.client_id = mt.client_id",
        "SELECT cl.client_id, COUNT(mt.meeting_id) AS meeting_nums FROM clients cl LEFT JOIN meetings mt ON cl.client_id = mt.client_id WHERE mt.client_id IS NOT NULL GROUP BY cl.client_id"
      ]
    ]
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "nlq": "How many meetings are there for each client id?",
    "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
    "infer_predictions": [
      [
        "SELECT clients.client_id, COUNT(meetings.meeting_id) AS num_meetings FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id",
        "SELECT c.client_id, COUNT(m.meeting_id) FROM clients c LEFT JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id",
        "SELECT client_id, COUNT(*) FROM meetings GROUP BY client_id",
        "SELECT COUNT(meeting_id), client_id FROM meetings GROUP BY client_id",
        "SELECT c.client_id, COUNT(*) AS total_meetings FROM clients c INNER JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id",
        "SELECT client_id, COUNT(meeting_id) AS meeting_count FROM meetings WHERE client_id IS NOT NULL GROUP BY client_id",
        "SELECT m.client_id, COUNT(m.meeting_id) FROM meetings m GROUP BY m.client_id",
        "SELECT clients.client_id, COUNT(DISTINCT meetings.meeting_id) AS meetings_count FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id",
        "SELECT c.client_id, COUNT(m.meeting_id) AS meeting_number FROM clients AS c LEFT OUTER JOIN meetings AS m ON c.client_id = m.client_id GROUP BY c.client_id",
        "WITH MeetingCounts AS (SELECT client_id, COUNT(meeting_id) AS NumMeetings FROM meetings GROUP BY client_id) SELECT client_id, NumMeetings FROM MeetingCounts"
      ]
    ]
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "nlq": "Show the meeting type codes and the number of meeting for each client.",
    "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
    "infer_predictions": [
      [
        "SELECT c.client_id, m.meeting_type, COUNT(m.meeting_type) AS number_of_meetings FROM clients c JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id, m.meeting_type",
        "SELECT c.client_id, m.meeting_type, COUNT(*) AS number_of_meetings FROM clients c INNER JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id, m.meeting_type",
        "SELECT clients.client_id, meetings.meeting_type, COUNT(meetings.meeting_type) AS number_of_meetings FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id, meetings.meeting_type",
        "SELECT client_id, meeting_type, COUNT(meeting_type) AS number_of_meetings FROM meetings GROUP BY client_id, meeting_type",
        "SELECT meeting_type, COUNT(meeting_id) AS number_of_meetings, client_id FROM meetings GROUP BY meeting_type, client_id",
        "SELECT distinct client_id, meeting_type, COUNT(meeting_id) FROM meetings GROUP BY client_id, meeting_type",
        "SELECT client_id, meeting_type, COUNT(meeting_id) AS meeting_count FROM meetings GROUP BY client_id, meeting_type",
        "SELECT clients.client_id, meeting_type, COUNT(meetings.meeting_id) AS total_meetings FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id, meetings.meeting_type",
        "SELECT c.client_id, m.meeting_type, COUNT(*) FROM clients c JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id, m.meeting_type",
        "SELECT client_id, meeting_type, COUNT(distinct meeting_id) AS meeting_count FROM meetings GROUP BY client_id, meeting_type"
      ]
    ]
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "nlq": "How many meetings are there for each meeting type?",
    "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
    "infer_predictions": [
      [
        "SELECT meeting_type, COUNT(*) AS number_of_meetings FROM meetings GROUP BY meeting_type",
        "SELECT m.meeting_type, COUNT(m.meeting_id) FROM meetings m GROUP BY m.meeting_type",
        "SELECT meetings.meeting_type, COUNT(DISTINCT meetings.meeting_id) AS total_meetings FROM meetings GROUP BY meetings.meeting_type",
        "SELECT COUNT(1), meeting_type FROM meetings GROUP BY meeting_type",
        "SELECT meeting_type, COUNT(meeting_id) AS cnt FROM meetings GROUP BY meeting_type ORDER BY cnt DESC",
        "SELECT meeting_type, COUNT(meeting_type) AS total FROM meetings GROUP BY meeting_type",
        "SELECT COUNT(*), meeting_type FROM meetings GROUP BY meeting_type ORDER BY meeting_type ASC",
        "SELECT meeting_type, COUNT(meeting_id) AS count_meeting FROM meetings GROUP BY meeting_type HAVING COUNT(meeting_type) > 0",
        "SELECT meetings.meeting_type, COUNT(*) FROM meetings GROUP BY meetings.meeting_type",
        "SELECT m.meeting_type, COUNT(m.meeting_id) AS total_meetings FROM meetings m GROUP BY m.meeting_type HAVING total_meetings > 0"
      ]
    ]
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "nlq": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings m JOIN clients c ON m.client_id = c.client_id",
        "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings INNER JOIN clients ON meetings.client_id = clients.client_id",
        "SELECT meetings.meeting_id, meetings.meeting_outcome, meetings.meeting_type, clients.client_details FROM meetings, clients WHERE meetings.client_id = clients.client_id",
        "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings AS m INNER JOIN clients AS c ON m.client_id = c.client_id",
        "SELECT m.meeting_id AS MeetingID, m.meeting_outcome AS Outcome, m.meeting_type AS Type, c.client_details AS Details FROM meetings m JOIN clients c ON m.client_id = c.client_id",
        "SELECT meetings.meeting_id, meetings.meeting_outcome, meetings.meeting_type, clients.client_details FROM meetings JOIN clients USING(client_id)",
        "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings m, clients c WHERE m.client_id = c.client_id",
        "SELECT mm.meeting_id, mm.meeting_outcome, mm.meeting_type, cc.client_details FROM meetings mm JOIN clients cc ON mm.client_id = cc.client_id",
        "SELECT meetings.meeting_id AS id, meetings.meeting_outcome AS outcome, meetings.meeting_type AS type, clients.client_details AS details FROM meetings INNER JOIN clients ON meetings.client_id = clients.client_id"
      ]
    ]
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "nlq": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings m JOIN clients c ON m.client_id = c.client_id",
        "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings NATURAL JOIN clients",
        "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM clients INNER JOIN meetings ON clients.client_id = meetings.client_id",
        "SELECT meetings.meeting_id, meetings.meeting_outcome, meetings.meeting_type, clients.client_details FROM meetings, clients WHERE meetings.client_id = clients.client_id",
        "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings CROSS JOIN clients WHERE meetings.client_id = clients.client_id",
        "SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings AS m INNER JOIN clients AS c ON m.client_id = c.client_id",
        "SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings LEFT JOIN clients ON meetings.client_id = clients.client_id",
        "SELECT DISTINCT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM meetings m JOIN clients c ON m.client_id = c.client_id",
        "WITH MeetingDetails AS (SELECT meeting_id, meeting_outcome, meeting_type, client_id FROM meetings) SELECT MeetingDetails.meeting_id, MeetingDetails.meeting_outcome, MeetingDetails.meeting_type, clients.client_details FROM MeetingDetails JOIN clients ON MeetingDetails.client_id = clients.client_id"
      ]
    ]
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "nlq": "Show the meeting ids and the number of staff in each meeting.",
    "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
    "infer_predictions": [
      [
        "SELECT meeting_id, COUNT(staff_id) FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT m.meeting_id, COUNT(s.staff_id) FROM meetings m JOIN staff_in_meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
        "SELECT sm.meeting_id, COUNT(sm.staff_id) AS num_staff FROM staff_in_meetings sm GROUP BY sm.meeting_id",
        "SELECT sm.meeting_id, COUNT(*) FROM staff_in_meetings sm GROUP BY sm.meeting_id",
        "SELECT meetings.meeting_id, COUNT(staff_in_meetings.staff_id) FROM meetings INNER JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id GROUP BY meetings.meeting_id",
        "SELECT sm.meeting_id, COUNT(DISTINCT sm.staff_id) FROM staff_in_meetings sm GROUP BY sm.meeting_id",
        "SELECT m.meeting_id, COUNT(distinct s.staff_id) AS staff_count FROM meetings m JOIN staff_in_meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
        "SELECT meeting_id, COUNT(staff_id) AS staff_count FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT sm.meeting_id, COUNT(s.staff_id) AS number_of_staff FROM meetings m JOIN staff_in_meetings sm ON m.meeting_id = sm.meeting_id INNER JOIN staff s ON sm.staff_id = s.staff_id GROUP BY sm.meeting_id",
        "SELECT m.meeting_id, COUNT(*) AS staff_numbers FROM staff_in_meetings sim JOIN meetings m ON sim.meeting_id = m.meeting_id GROUP BY m.meeting_id"
      ]
    ]
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of staff in each meeting by meeting id.",
    "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
    "infer_predictions": [
      [
        "SELECT meeting_id, COUNT(staff_id) AS staff_count FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT sim.meeting_id, COUNT(sim.staff_id) AS staff_count FROM staff_in_meetings sim GROUP BY sim.meeting_id",
        "SELECT m.meeting_id, COUNT(s.staff_id) FROM meetings m JOIN staff_in_meetings s ON m.meeting_id = s.meeting_id GROUP BY m.meeting_id",
        "SELECT sim.meeting_id, COUNT(DISTINCT sim.staff_id) AS staff_count FROM staff_in_meetings sim GROUP BY sim.meeting_id",
        "SELECT meeting_id, COUNT(*) AS staff_count FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT COUNT(staff_id) AS Total_Staff, meeting_id FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT meeting_id, COUNT(1) AS NumberOfStaff FROM staff_in_meetings GROUP BY meeting_id",
        "SELECT m.meeting_id, COUNT(si.staff_id) AS TotalStaff FROM meetings m LEFT JOIN staff_in_meetings si ON m.meeting_id = si.meeting_id GROUP BY m.meeting_id",
        "SELECT DISTINCT si.meeting_id, (SELECT COUNT(*) FROM staff_in_meetings WHERE meeting_id = si.meeting_id) AS staff_count FROM staff_in_meetings si"
      ]
    ]
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "nlq": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT s.staff_id, COUNT(*) AS num_meetings FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING num_meetings = (SELECT MIN(total_meetings) FROM (SELECT COUNT(*) AS total_meetings FROM staff_in_meetings GROUP BY staff_id))",
        "SELECT staff_id, COUNT(meeting_id) AS meeting_count FROM staff_in_meetings GROUP BY staff_id HAVING meeting_count = (SELECT MIN(counts) FROM (SELECT COUNT(*) AS counts FROM staff_in_meetings GROUP BY staff_id))",
        "SELECT s.staff_id, COUNT(sim.meeting_id) FROM staff s INNER JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id GROUP BY s.staff_id HAVING COUNT(sim.meeting_id) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) AS cnt FROM staff_in_meetings GROUP BY staff_id))",
        "SELECT DISTINCT s.staff_id, total_meetings FROM staff s JOIN (SELECT staff_id, COUNT(*) AS total_meetings FROM staff_in_meetings sim GROUP BY sim.staff_id) sim_count ON s.staff_id = sim_count.staff_id WHERE total_meetings = (SELECT MIN(cnt) FROM (SELECT staff_id, COUNT(*) cnt FROM staff_in_meetings GROUP BY staff_id))",
        "SELECT si.staff_id, MIN(meetings_count) FROM staff_in_meetings si JOIN (SELECT staff_id, COUNT(*) AS meetings_count FROM staff_in_meetings GROUP BY staff_id) grouped ON si.staff_id = grouped.staff_id GROUP BY si.staff_id",
        "SELECT staff_id, COUNT(*) AS attendance FROM staff_in_meetings GROUP BY staff_id HAVING attendance = (SELECT MIN(count_attendance) FROM (SELECT staff_id, COUNT(*) AS count_attendance FROM staff_in_meetings GROUP BY staff_id) min_attendance)",
        "SELECT s1.staff_id, c1.meeting_count FROM (SELECT staff_id, COUNT(*) AS meeting_count FROM staff_in_meetings GROUP BY staff_id) c1 JOIN staff s1 ON s1.staff_id = c1.staff_id WHERE c1.meeting_count = (SELECT MIN(c2.meeting_count) FROM (SELECT staff_id, COUNT(*) AS meeting_count FROM staff_in_meetings GROUP BY staff_id) c2)",
        "SELECT s.staff_id, MIN(meeting_total) AS least_meetings_attended FROM staff s LEFT JOIN (SELECT staff_id, COUNT(*) AS meeting_total FROM staff_in_meetings GROUP BY staff_id) tm ON s.staff_id = tm.staff_id GROUP BY s.staff_id HAVING least_meetings_attended IS NOT NULL"
      ]
    ]
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "nlq": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
    "infer_predictions": [
      [
        "SELECT staff_id FROM staff_in_meetings GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1",
        "SELECT sim.staff_id FROM staff_in_meetings AS sim GROUP BY sim.staff_id ORDER BY COUNT(sim.meeting_id) ASC LIMIT 1",
        "SELECT MINIMUM.staff_id FROM (SELECT staff_id, COUNT(meeting_id) AS count FROM staff_in_meetings GROUP BY staff_id) AS MINIMUM WHERE MINIMUM.count = (SELECT MIN(count) FROM (SELECT COUNT(meeting_id) AS count FROM staff_in_meetings GROUP BY staff_id)) LIMIT 1",
        "SELECT staff_id FROM (SELECT staff_id, COUNT(*) AS num_meetings FROM staff_in_meetings GROUP BY staff_id ORDER BY num_meetings ASC) WHERE num_meetings > 0 LIMIT 1",
        "SELECT s.staff_id FROM staff_in_meetings AS s JOIN (SELECT staff_id, COUNT(*) AS cnt FROM staff_in_meetings GROUP BY staff_id) AS counts ON s.staff_id = counts.staff_id WHERE counts.cnt = (SELECT MIN(cnt) FROM (SELECT staff_id, COUNT(*) AS cnt FROM staff_in_meetings GROUP BY staff_id) AS inner_count WHERE inner_count.cnt > 0)",
        "SELECT DISTINCT first.staff_id FROM staff_in_meetings AS first WHERE 1 = (SELECT COUNT(*) FROM staff_in_meetings AS second WHERE first.staff_id = second.staff_id) AND EXISTS (SELECT 1 FROM staff_in_meetings AS check_exists WHERE check_exists.staff_id = first.staff_id)",
        "WITH staff_counts AS (SELECT staff_id, COUNT(*) AS num_meetings FROM staff_in_meetings GROUP BY staff_id) SELECT staff_id FROM staff_counts WHERE num_meetings = (SELECT MIN(num_meetings) FROM staff_counts) LIMIT 1",
        "SELECT staff_id FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY COUNT(meeting_id) LIMIT 1",
        "SELECT si.staff_id FROM staff_in_meetings si WHERE si.meeting_id IS NOT NULL GROUP BY si.staff_id ORDER BY COUNT(si.meeting_id) ASC LIMIT 1"
      ]
    ]
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "nlq": "How many staff have attended a meeting?",
    "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM staff_in_meetings)",
        "SELECT COUNT(*) FROM (SELECT staff_id FROM staff_in_meetings GROUP BY staff_id)",
        "WITH DistinctStaff AS (SELECT DISTINCT staff_id FROM staff_in_meetings) SELECT COUNT(*) FROM DistinctStaff",
        "SELECT COUNT(DISTINCT sim.staff_id) FROM staff_in_meetings sim",
        "SELECT COUNT(*) FROM (SELECT DISTINCT sim.staff_id FROM staff_in_meetings sim)",
        "WITH UniqueStaff AS (SELECT staff_id FROM staff_in_meetings GROUP BY staff_id) SELECT COUNT(*) FROM UniqueStaff",
        "SELECT COUNT(*) FROM (SELECT sim.staff_id FROM staff_in_meetings sim GROUP BY sim.staff_id)"
      ]
    ]
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "nlq": "Return the number of distinct staff who have attended a meeting?",
    "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
    "infer_predictions": [
      [
        "SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings",
        "SELECT COUNT(*) FROM (SELECT DISTINCT staff_id FROM staff_in_meetings)",
        "SELECT COUNT(DISTINCT(s.staff_id)) FROM staff_in_meetings s",
        "SELECT DISTINCT COUNT(s.staff_id) FROM staff_in_meetings s",
        "SELECT LENGTH(DISTINCT staff_id) FROM staff_in_meetings"
      ]
    ]
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "nlq": "How many staff did not attend any meeting?",
    "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM staff_in_meetings)",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s LEFT JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id WHERE sim.staff_id IS NULL",
        "SELECT COUNT(*) FROM staff WHERE NOT EXISTS (SELECT 1 FROM staff_in_meetings WHERE staff_in_meetings.staff_id = staff.staff_id)",
        "SELECT COUNT(*) FROM staff s WHERE s.staff_id NOT IN (SELECT DISTINCT sim.staff_id FROM staff_in_meetings sim)",
        "SELECT COUNT(staff.staff_id) FROM staff LEFT JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff_in_meetings.staff_id IS NULL",
        "SELECT (SELECT COUNT(*) FROM staff) - (SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings)",
        "SELECT COUNT(*) FROM staff AS s WHERE NOT EXISTS (SELECT staff_id FROM staff_in_meetings AS sim WHERE sim.staff_id = s.staff_id)",
        "SELECT COUNT(DISTINCT staff_id) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM staff_in_meetings WHERE meeting_id IS NOT NULL)",
        "SELECT COUNT(staff_id) FROM (SELECT staff_id FROM staff EXCEPT SELECT staff_id FROM staff_in_meetings) AS s"
      ]
    ]
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "nlq": "Count the number of staff who did not attend any meeting.",
    "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
    "infer_predictions": [
      [
        "SELECT COUNT(*) FROM staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM staff_in_meetings)",
        "SELECT COUNT(DISTINCT s.staff_id) FROM staff s LEFT JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id WHERE sim.staff_id IS NULL",
        "SELECT (SELECT COUNT(*) FROM staff) - (SELECT COUNT(DISTINCT staff_id) FROM staff_in_meetings)",
        "SELECT COUNT(*) FROM staff WHERE NOT EXISTS (SELECT 1 FROM staff_in_meetings WHERE staff_in_meetings.staff_id = staff.staff_id)",
        "SELECT COUNT(staff_id) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM staff_in_meetings)",
        "SELECT COUNT(staff.staff_id) - COUNT(staff_in_meetings.staff_id) AS absent_staff_count FROM staff LEFT JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id",
        "SELECT COUNT(staff_id) FROM staff EXCEPT SELECT COUNT(staff_id) FROM staff_in_meetings",
        "SELECT COUNT(DISTINCT staff.staff_id) FROM staff LEFT JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE staff_in_meetings.meeting_id IS NULL",
        "SELECT COUNT(allStaff.staff_id) FROM (SELECT staff_id FROM staff) allStaff LEFT JOIN (SELECT DISTINCT staff_id FROM staff_in_meetings) attendedStaff ON allStaff.staff_id = attendedStaff.staff_id WHERE attendedStaff.staff_id IS NULL",
        "SELECT COUNT(*) FROM staff AS s WHERE NOT EXISTS (SELECT 1 FROM staff_in_meetings AS sim WHERE sim.staff_id = s.staff_id)"
      ]
    ]
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "nlq": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT clients.client_id, clients.client_details FROM clients WHERE clients.client_id IN (SELECT client_id FROM meetings) UNION SELECT DISTINCT clients.client_id, clients.client_details FROM clients WHERE clients.client_id IN (SELECT client_id FROM invoices)",
        "SELECT DISTINCT clients.client_id, clients.client_details FROM clients JOIN meetings ON clients.client_id = meetings.client_id UNION SELECT clients.client_id, clients.client_details FROM clients JOIN invoices ON clients.client_id = invoices.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE EXISTS (SELECT 1 FROM meetings WHERE meetings.client_id = clients.client_id) OR EXISTS (SELECT 1 FROM invoices WHERE invoices.client_id = clients.client_id)",
        "SELECT DISTINCT c.client_id, c.client_details FROM clients c, meetings m WHERE c.client_id = m.client_id UNION SELECT DISTINCT c.client_id, c.client_details FROM clients c, invoices i WHERE c.client_id = i.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients INNER JOIN (SELECT DISTINCT client_id FROM meetings UNION ALL SELECT DISTINCT client_id FROM invoices) AS sub ON clients.client_id = sub.client_id",
        "SELECT DISTINCT c.client_id, c.client_details FROM clients c WHERE c.client_id IN (SELECT m.client_id FROM meetings m) OR c.client_id IN (SELECT i.client_id FROM invoices i)",
        "SELECT DISTINCT c.client_id, c.client_details FROM clients c JOIN (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices) kl ON c.client_id = kl.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE client_id IN (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices)",
        "SELECT DISTINCT clients.client_id, clients.client_details FROM clients LEFT JOIN meetings ON clients.client_id = meetings.client_id WHERE meetings.client_id IS NOT NULL UNION SELECT DISTINCT clients.client_id, clients.client_details FROM clients LEFT JOIN invoices ON clients.client_id = invoices.client_id WHERE invoices.client_id IS NOT NULL",
        "SELECT DISTINCT c.client_id, c.client_details FROM clients c WHERE EXISTS (SELECT NULL FROM meetings m WHERE m.client_id = c.client_id UNION SELECT NULL FROM invoices i WHERE i.client_id = c.client_id)"
      ]
    ]
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "nlq": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT DISTINCT clients.client_id, clients.client_details FROM clients JOIN meetings ON clients.client_id = meetings.client_id UNION SELECT DISTINCT clients.client_id, clients.client_details FROM clients JOIN invoices ON clients.client_id = invoices.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE clients.client_id IN (SELECT meetings.client_id FROM meetings) OR clients.client_id IN (SELECT invoices.client_id FROM invoices)",
        "WITH ClientActivities AS (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices) SELECT clients.client_id, clients.client_details FROM clients JOIN ClientActivities ON clients.client_id = ClientActivities.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE EXISTS (SELECT 1 FROM meetings WHERE meetings.client_id = clients.client_id) OR EXISTS (SELECT 1 FROM invoices WHERE invoices.client_id = clients.client_id)",
        "SELECT clients.client_id, clients.client_details FROM clients INNER JOIN (SELECT client_id FROM meetings UNION ALL SELECT client_id FROM invoices) activities ON clients.client_id = activities.client_id",
        "WITH ActiveClients AS (SELECT client_id FROM meetings UNION SELECT client_id FROM invoices) SELECT clients.client_id, clients.client_details FROM clients, ActiveClients WHERE clients.client_id = ActiveClients.client_id",
        "SELECT clients.client_id, clients.client_details FROM clients LEFT JOIN meetings ON meetings.client_id = clients.client_id LEFT JOIN invoices ON invoices.client_id = clients.client_id WHERE meetings.client_id IS NOT NULL OR invoices.client_id IS NOT NULL",
        "SELECT clients.client_id, clients.client_details FROM clients WHERE clients.client_id IN (SELECT DISTINCT meetings.client_id FROM meetings UNION SELECT DISTINCT invoices.client_id FROM invoices)"
      ]
    ]
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "nlq": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id JOIN meetings ON staff_in_meetings.meeting_id = meetings.meeting_id WHERE staff.staff_details LIKE '%s%';",
        "SELECT staff.staff_id, staff.staff_details FROM staff INNER JOIN staff_in_meetings ON staff.staff_id = staff_in_meetings.staff_id WHERE EXISTS (SELECT 1 FROM meetings WHERE meetings.meeting_id = staff_in_meetings.meeting_id) AND staff.staff_details LIKE '%s%';",
        "SELECT s.staff_id, s.staff_details FROM staff s WHERE s.staff_details LIKE '%s%' AND s.staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim JOIN meetings m ON sim.meeting_id = m.meeting_id);",
        "SELECT s.staff_id, s.staff_details FROM staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim WHERE EXISTS (SELECT 1 FROM meetings m WHERE m.meeting_id = sim.meeting_id)) AND s.staff_details LIKE '%s%';",
        "SELECT s.staff_id, s.staff_details FROM staff s, staff_in_meetings sim, meetings m WHERE s.staff_id = sim.staff_id AND sim.meeting_id = m.meeting_id AND s.staff_details LIKE '%s%';",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s, staff_in_meetings sim WHERE s.staff_details LIKE '%s%' AND s.staff_id = sim.staff_id AND EXISTS (SELECT * FROM meetings WHERE meetings.meeting_id = sim.meeting_id);",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' AND (SELECT COUNT(*) FROM meetings WHERE meetings.meeting_id = sim.meeting_id) > 0;",
        "SELECT s.staff_id, s.staff_details FROM staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim INNER JOIN meetings m ON sim.meeting_id = m.meeting_id) AND s.staff_details LIKE '%s%';",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s CROSS JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' AND sim.meeting_id IN (SELECT m.meeting_id FROM meetings m);",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s CROSS JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id AND s.staff_details LIKE '%s%' WHERE EXISTS (SELECT 1 FROM meetings m WHERE m.meeting_id = sim.meeting_id);"
      ]
    ]
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "nlq": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
    "infer_predictions": [
      [
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s INNER JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id INNER JOIN meetings m ON sim.meeting_id = m.meeting_id WHERE s.staff_details LIKE '%s%'",
        "SELECT s.staff_id, s.staff_details FROM staff s WHERE s.staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim JOIN meetings m ON sim.meeting_id = m.meeting_id) AND s.staff_details LIKE '%s%'",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s, staff_in_meetings sim, meetings m WHERE s.staff_id = sim.staff_id AND sim.meeting_id = m.meeting_id AND s.staff_details LIKE '%s%'",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s JOIN staff_in_meetings sim ON s.staff_id = sim.staff_id WHERE EXISTS (SELECT 1 FROM meetings m WHERE sim.meeting_id = m.meeting_id) AND s.staff_details LIKE '%s%'",
        "SELECT s.staff_id, s.staff_details FROM staff s WHERE EXISTS (SELECT 1 FROM staff_in_meetings sim JOIN meetings m ON sim.meeting_id = m.meeting_id WHERE sim.staff_id = s.staff_id) AND s.staff_details LIKE '%s%'",
        "SELECT DISTINCT staff.staff_id, staff.staff_details FROM staff WHERE staff_id IN (SELECT staff_id FROM staff_in_meetings WHERE meeting_id IN (SELECT meeting_id FROM meetings)) AND staff_details LIKE '%s%'",
        "SELECT staff_id, staff_details FROM staff WHERE staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim INNER JOIN meetings m ON sim.meeting_id = m.meeting_id) AND staff_details LIKE '%s%'",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s WHERE s.staff_details LIKE '%s%' AND EXISTS (SELECT NULL FROM staff_in_meetings sim WHERE s.staff_id = sim.staff_id AND sim.meeting_id IN (SELECT meeting_id FROM meetings))",
        "SELECT staff_id, staff_details FROM staff WHERE staff_details LIKE '%s%' AND staff_id IN (SELECT sim.staff_id FROM staff_in_meetings sim, meetings m WHERE sim.meeting_id = m.meeting_id)",
        "SELECT DISTINCT s.staff_id, s.staff_details FROM staff s WHERE 's' IN (SELECT staff_details LIKE '%s%' FROM staff_in_meetings sim JOIN meetings m ON sim.meeting_id = m.meeting_id WHERE s.staff_id = sim.staff_id)"
      ]
    ]
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "nlq": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients JOIN meetings ON clients.client_id = meetings.client_id JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id HAVING COUNT(DISTINCT meetings.meeting_id) = 1;",
        "SELECT c.client_id, c.sic_code, c.agency_id FROM clients c INNER JOIN meetings m ON c.client_id = m.client_id INNER JOIN invoices i ON c.client_id = i.client_id WHERE (SELECT COUNT(*) FROM meetings nm WHERE nm.client_id = c.client_id) = 1 GROUP BY c.client_id;",
        "SELECT DISTINCT cl.client_id, cl.sic_code, cl.agency_id FROM clients cl, meetings mt, invoices iv WHERE cl.client_id = mt.client_id AND cl.client_id = iv.client_id GROUP BY cl.client_id HAVING COUNT(DISTINCT mt.meeting_id) = 1;",
        "SELECT client_id, sic_code, agency_id FROM (SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients JOIN meetings ON clients.client_id = meetings.client_id JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id HAVING COUNT(meetings.meeting_id) = 1) AS single_meeting_invoices;",
        "SELECT a.client_id, a.sic_code, a.agency_id FROM (SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id HAVING COUNT(meetings.meeting_id) = 1) a JOIN invoices b ON a.client_id = b.client_id;",
        "SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients INNER JOIN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) mclaims ON clients.client_id = mclaims.client_id INNER JOIN invoices on clients.client_id = invoices.client_id;",
        "SELECT DISTINCT t.client_id, t.sic_code, t.agency_id FROM (SELECT clients.client_id, clients.sic_code, clients.agency_id, COUNT(DISTINCT meetings.meeting_id) AS mt_count FROM clients JOIN meetings ON clients.client_id = meetings.client_id GROUP BY clients.client_id) t WHERE t.mt_count = 1 AND EXISTS (SELECT * FROM invoices WHERE invoices.client_id = t.client_id);",
        "SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients WHERE EXISTS (SELECT 1 FROM meetings WHERE meetings.client_id = clients.client_id GROUP BY meetings.client_id HAVING COUNT(meetings.meeting_id) = 1) AND EXISTS (SELECT 1 FROM invoices WHERE invoices.client_id = clients.client_id);",
        "SELECT client_id, sic_code, agency_id FROM clients WHERE client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(DISTINCT meeting_id) = 1) AND client_id IN (SELECT client_id FROM invoices);",
        "SELECT cli.client_id, cli.sic_code, cli.agency_id FROM clients cli WHERE (SELECT COUNT(DISTINCT met.meeting_id) FROM meetings met WHERE met.client_id = cli.client_id) = 1 AND EXISTS (SELECT 1 FROM invoices inv WHERE inv.client_id = cli.client_id);"
      ]
    ]
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "nlq": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "infer_predictions": [
      [
        "SELECT c.client_id, c.sic_code, c.agency_id FROM clients c JOIN meetings m ON c.client_id = m.client_id JOIN invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(DISTINCT m.meeting_id) = 1",
        "SELECT DISTINCT clients.client_id, clients.sic_code, clients.agency_id FROM clients INNER JOIN meetings ON clients.client_id = meetings.client_id INNER JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id HAVING COUNT(DISTINCT meetings.meeting_id) = 1",
        "SELECT c.client_id, c.sic_code, c.agency_id FROM clients c WHERE c.client_id IN (SELECT m.client_id FROM meetings m GROUP BY m.client_id HAVING COUNT(m.meeting_id) = 1) AND EXISTS (SELECT 1 FROM invoices i WHERE i.client_id = c.client_id)",
        "SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients, meetings, invoices WHERE clients.client_id = meetings.client_id AND clients.client_id = invoices.client_id GROUP BY clients.client_id HAVING COUNT(DISTINCT meetings.meeting_id) = 1",
        "SELECT DISTINCT clients.client_id, clients.sic_code, clients.agency_id FROM clients JOIN meetings ON clients.client_id = meetings.client_id JOIN invoices ON clients.client_id = invoices.client_id WHERE clients.client_id IN (SELECT meetings.client_id FROM meetings GROUP BY meetings.client_id HAVING COUNT(meetings.meeting_id) = 1)",
        "SELECT DISTINCT c.client_id, c.sic_code, c.agency_id FROM clients c, meetings m, invoices i WHERE c.client_id = m.client_id AND c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(DISTINCT m.meeting_id) = 1",
        "SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients WHERE clients.client_id IN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(DISTINCT meeting_id) = 1) AND clients.client_id IN (SELECT client_id FROM invoices)",
        "SELECT c.client_id, c.sic_code, c.agency_id FROM clients c INNER JOIN (SELECT client_id FROM meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) m ON c.client_id = m.client_id INNER JOIN invoices i ON c.client_id = i.client_id",
        "SELECT DISTINCT c.client_id, c.sic_code, c.agency_id FROM clients c WHERE EXISTS (SELECT DISTINCT client_id FROM meetings WHERE client_id = c.client_id GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND c.client_id IN (SELECT client_id FROM invoices)",
        "SELECT c.client_id, c.sic_code, c.agency_id FROM clients c WHERE c.client_id IN (SELECT m.client_id FROM meetings m GROUP BY m.client_id HAVING COUNT(m.meeting_id) = 1) AND c.client_id IN (SELECT i.client_id FROM invoices i)"
      ]
    ]
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "nlq": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
    "infer_predictions": [
      [
        "SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff_in_meetings sim ON m.meeting_id = sim.meeting_id JOIN staff s ON sim.staff_id = s.staff_id",
        "SELECT meetings.start_date_time, meetings.end_date_time, clients.client_details, staff.staff_details FROM meetings INNER JOIN clients ON meetings.client_id = clients.client_id INNER JOIN staff_in_meetings on meetings.meeting_id = staff_in_meetings.meeting_id INNER JOIN staff on staff_in_meetings.staff_id = staff.staff_id",
        "SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings m, clients c, staff s, staff_in_meetings sm WHERE m.client_id = c.client_id AND sm.meeting_id = m.meeting_id AND sm.staff_id = s.staff_id",
        "SELECT m.start_date_time AS Meeting_Start, m.end_date_time AS Meeting_End, c.client_details AS Client_Info, s.staff_details AS Staff_Info FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff_in_meetings sim ON m.meeting_id = sim.meeting_id JOIN staff s ON sim.staff_id = s.staff_id",
        "SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id",
        "SELECT m.start_date_time, m.end_date_time, c.client_details, st.staff_details FROM meetings m JOIN clients c ON c.client_id = m.client_id JOIN staff_in_meetings si ON si.meeting_id = m.meeting_id JOIN staff st ON st.staff_id = si.staff_id",
        "SELECT A.start_date_time, A.end_date_time, B.client_details, D.staff_details FROM meetings A, clients B, staff D, staff_in_meetings C WHERE A.client_id = B.client_id AND C.meeting_id = A.meeting_id AND C.staff_id = D.staff_id",
        "SELECT A.start_date_time, A.end_date_time, B.client_details, C.staff_details FROM meetings A JOIN clients B ON A.client_id = B.client_id JOIN staff_in_meetings S ON A.meeting_id = S.meeting_id JOIN staff C ON S.staff_id = C.staff_id",
        "SELECT meetings.start_date_time AS 'Start Time', meetings.end_date_time AS 'End Time', clients.client_details AS 'Client Details', staff.staff_details AS 'Staff Details' FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id",
        "SELECT A.start_date_time, A.end_date_time, B.client_details, D.staff_details FROM meetings A JOIN clients B ON A.client_id = B.client_id JOIN staff_in_meetings C ON A.meeting_id = C.meeting_id JOIN staff D ON C.staff_id = D.staff_id"
      ]
    ]
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "nlq": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
    "infer_predictions": [
      [
        "SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff_in_meetings sim ON m.meeting_id = sim.meeting_id JOIN staff s ON sim.staff_id = s.staff_id",
        "SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM meetings AS m INNER JOIN clients AS c ON m.client_id = c.client_id INNER JOIN staff_in_meetings AS sim ON m.meeting_id = sim.meeting_id INNER JOIN staff AS s ON sim.staff_id = s.staff_id",
        "SELECT start_date_time, end_date_time, client_details, staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN staff_in_meetings ON meetings.meeting_id = staff_in_meetings.meeting_id JOIN staff ON staff_in_meetings.staff_id = staff.staff_id",
        "SELECT m.start_date_time, m.end_date_time, cli.client_details, stf.staff_details FROM meetings m, clients cli, staff_in_meetings sim, staff stf WHERE m.client_id = cli.client_id AND m.meeting_id = sim.meeting_id AND sim.staff_id = stf.staff_id",
        "SELECT meeting.start_date_time, meeting.end_date_time, client.client_details, staffDetails.staff_details FROM meetings meeting LEFT JOIN clients client ON meeting.client_id = client.client_id LEFT JOIN staff_in_meetings staffMeet ON meeting.meeting_id = staffMeet.meeting_id LEFT JOIN staff staffDetails ON staffMeet.staff_id = staffDetails.staff_id",
        "SELECT m.start_date_time, m.end_date_time, clnt.client_details, stf.staff_details FROM meetings AS m INNER JOIN clients AS clnt ON m.client_id = clnt.client_id LEFT JOIN staff_in_meetings AS stm ON m.meeting_id = stm.meeting_id INNER JOIN staff AS stf ON stm.staff_id = stf.staff_id",
        "SELECT meetings.start_date_time, meetings.end_date_time, clients.client_details, staff.staff_details FROM meetings, clients, staff_in_meetings, staff WHERE meetings.client_id = clients.client_id AND meetings.meeting_id = staff_in_meetings.meeting_id AND staff_in_meetings.staff_id = staff.staff_id",
        "SELECT m.start_date_time, m.end_date_time, cl.client_details, st.staff_details FROM meetings m INNER JOIN clients cl ON m.client_id = cl.client_id INNER JOIN staff_in_meetings stm ON stm.meeting_id = m.meeting_id INNER JOIN staff st ON st.staff_id = stm.staff_id",
        "SELECT m.start_date_time AS 'Meeting Start', m.end_date_time AS 'Meeting End', c.client_details AS 'Client Details', s.staff_details AS 'Staff Details' FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff_in_meetings sm ON m.meeting_id = sm.meeting_id JOIN staff s ON sm.staff_id = s.staff_id"
      ]
    ]
  }
]