[
    {
      "id": 0,
      "db_id": "soccer_3",
      "gold": "SELECT count(*) FROM club",
      "infer_predictions": [
        [
          "select count ( * ) from club",
          "select count ( * ) from club",
          "select count( * ) from club",
          "select count ( * ) from club",
          "select count ( * )from club",
          "select count ( * ) from club"
        ]
      ]
    },
    {
      "id": 1,
      "db_id": "soccer_3",
      "gold": "SELECT count(*) FROM club",
      "infer_predictions": [
        [
          "select count ( * ) from club",
          "select count ( distinct club_id ) from club",
          "select count ( * ) from club",
          "select count ( * )from club",
          "select count ( * ) from club"
        ]
      ]
    },
    {
      "id": 2,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from club order by name asc",
          "select distinct name from club order by name asc",
          "Select name from club order by name asc",
          "select name from club order by name asc"
        ]
      ]
    },
    {
      "id": 3,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from club order by name asc",
          "select distinct name from club order by name asc",
          "Select name from club order by name asc",
          "select name from club order by name asc"
        ]
      ]
    },
    {
      "id": 4,
      "db_id": "soccer_3",
      "gold": "SELECT Manager ,  Captain FROM club",
      "infer_predictions": [
        [
          "select manager , captain from club",
          "select manager , captain from club",
          "select manager , captain from club",
          "select manager , captain from club"
        ]
      ]
    },
    {
      "id": 5,
      "db_id": "soccer_3",
      "gold": "SELECT Manager ,  Captain FROM club",
      "infer_predictions": [
        [
          "select manager , captain from club",
          "select manager , captain from club",
          "select manager , Captain from club"
        ]
      ]
    },
    {
      "id": 6,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
      "infer_predictions": [
        [
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer != 'Nike'",
          "select distinct name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer != 'Nike' != 'Nike'",
          "select name from club where manufacturer != 'Nike'"
        ]
      ]
    },
    {
      "id": 7,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
      "infer_predictions": [
        [
          "select name from club except select name from club where manufacturer = 'Nike'",
          "select name from club where manufacturer != 'Nike'",
          "select name from club where manufacturer not in ( select manufacturer from club where manufacturer = 'Nike' )",
          "select name from club where manufacturer != 'Nike' except select name from club where manufacturer = 'Nike'"
        ]
      ]
    },
    {
      "id": 8,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
      "infer_predictions": [
        [
          "select name from player order by wins_count asc",
          "Select name from player order by wins_count asc",
          "select name from player order by wins_count asc"
        ]
      ]
    },
    {
      "id": 9,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Wins_count ASC",
      "infer_predictions": [
        [
          "select name from player order by wins_count asc",
          "Select name from player order by wins_count asc"
        ]
      ]
    },
    {
      "id": 10,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings asc limit 1",
          "select name from player order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 11,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings desc limit 1",
          "select name from player order by earnings asc limit 1",
          "select name from player order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 12,
      "db_id": "soccer_3",
      "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
      "infer_predictions": [
        [
          "select distinct country from player where earnings > 1200000",
          "select distinct country from player where earnings > 1200000",
          "select distinct country from player where earnings > 120000"
        ]
      ]
    },
    {
      "id": 13,
      "db_id": "soccer_3",
      "gold": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1200000",
          "select distinct country from player where earnings > 1200000",
          "select country from player where earnings > 1200000",
          "select country from player where earnings > 120000"
        ]
      ]
    },
    {
      "id": 14,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country from player where wins_count > 2 order by earnings desc limit 1",
          "select country from player where wins_count > 2 order by earnings desc limit 1",
          "select country from player where wins_count >2 order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 15,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country from player where wins_count > 2 order by earnings desc limit 1",
          "select country from player where wins_count > 2 group by country order by sum ( earnings ) desc limit 1",
          "select country from player where wins_count > 2 order by earnings desc limit 1"
        ]
      ]
    },
    {
      "id": 16,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
      "infer_predictions": [
        [
          "select player.name , club.name from club join player on club.club_id = player.club_id",
          "select player.name , club.name from player join club on player.club_id = club.club_id"
        ]
      ]
    },
    {
      "id": 17,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
      "infer_predictions": [
        [
          "select player.name , club.name from club join player on club.club_id = player.club_id",
          "select player.name , club.name from player join club on player.club_id = club.club_id",
          "select club.name , player.name from club join player on club.club_id = player.club_id"
        ]
      ]
    },
    {
      "id": 18,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id where player.wins_count > 2",
          "select distinct club.name from club join player on club.club_id = player.club_id where player.wins_count > 2",
          "select club.name from club join player on club.club_id = player.club_id where player.wins_count >2"
        ]
      ]
    },
    {
      "id": 19,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id where player.wins_count > 2",
          "select distinct club.name from club join player on club.club_id = player.club_id where player.wins_count > 2",
          "select club.name from club join player on club.club_id = player.club_id where player.wins_count >2",
          "select club.name from player join club on player.club_id = club.club_id where player.wins_count > 2"
        ]
      ]
    },
    {
      "id": 20,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
      "infer_predictions": [
        [
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from player join club on player.club_id = club.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 21,
      "db_id": "soccer_3",
      "gold": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
      "infer_predictions": [
        [
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from player join club on player.club_id = club.club_id where club.manager = 'Sam Allardyce'",
          "select player.name from club join player on club.club_id = player.club_id where club.manager = 'Sam Allardyce'"
        ]
      ]
    },
    {
      "id": 22,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by club.name order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by club.name order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by club.club_id order by avg ( player.earnings ) desc"
        ]
      ]
    },
    {
      "id": 23,
      "db_id": "soccer_3",
      "gold": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
      "infer_predictions": [
        [
          "select club.name from club join player on club.club_id = player.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from club join player on club.club_id = player.club_id group by club.name order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by player.club_id order by avg ( player.earnings ) desc",
          "select club.name from player join club on player.club_id = club.club_id group by club.name order by avg ( player.earnings ) desc"
        ]
      ]
    },
    {
      "id": 24,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
      "infer_predictions": [
        [
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer  , count ( * ) from club group by manufacturer"
        ]
      ]
    },
    {
      "id": 25,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
      "infer_predictions": [
        [
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer",
          "select manufacturer , count ( * ) from club group by manufacturer"
        ]
      ]
    },
    {
      "id": 26,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 27,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1",
          "select manufacturer from club group by manufacturer order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 28,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) >1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 29,
      "db_id": "soccer_3",
      "gold": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) > 1",
          "select manufacturer from club group by manufacturer having count ( * ) >1"
        ]
      ]
    },
    {
      "id": 30,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select country , count ( * ) from player group by country having count ( * ) > 1",
          "select country , count ( * ) from player group by country having count ( * ) > 1",
          "select country  , count ( * ) from player group by country having count ( * ) > 1",
          "select country , count ( * ) from player group by country having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 31,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select country , count ( * ) from player group by country having count ( * ) > 1",
          "select country from player group by country having count ( * ) > 1",
          "select country , count ( * ) from player group by country having count ( * ) > 1",
          "select country , count ( * ) from player group by country having count ( * ) > 1",
          "select country  , count ( * ) from player group by country having count ( * ) > 1",
          "select country , count ( * ) from player group by country having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 32,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
      "infer_predictions": [
        [
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player)"
        ]
      ]
    },
    {
      "id": 33,
      "db_id": "soccer_3",
      "gold": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
      "infer_predictions": [
        [
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player )",
          "select name from club where club_id not in ( select club_id from player)",
          "select name from club where club_id not in ( select club_id from player )"
        ]
      ]
    },
    {
      "id": 34,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1400000 union select country from player where earnings < 1100000",
          "select country from player where earnings > 1400000 intersect select country from player where earnings < 1100000",
          "select country from player where earnings > 1400000 and earnings < 1100000"
        ]
      ]
    },
    {
      "id": 35,
      "db_id": "soccer_3",
      "gold": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
      "infer_predictions": [
        [
          "select country from player where earnings > 1400000 intersect select country from player where earnings < 1100000",
          "select country from player where earnings > 1400000 intersect select country from player where earnings <= 1100000",
          "select country from player where earnings > 140000 intersect select country from player where earnings < 1100000"
        ]
      ]
    },
    {
      "id": 36,
      "db_id": "soccer_3",
      "gold": "SELECT COUNT (DISTINCT Country) FROM player",
      "infer_predictions": [
        [
          "select count ( distinct country ) from player",
          "select count ( distinct country ) , player.player_id from player join club on player.club_id = club.club_id",
          "select count ( distinct country ) , player.player_id from player join club on player.player_id = club.club_id",
          "select count ( distinct country ) , player_id from player"
        ]
      ]
    },
    {
      "id": 37,
      "db_id": "soccer_3",
      "gold": "SELECT COUNT (DISTINCT Country) FROM player",
      "infer_predictions": [
        [
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player",
          "select count ( distinct country ) from player"
        ]
      ]
    },
    {
      "id": 38,
      "db_id": "soccer_3",
      "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
      "infer_predictions": [
        [
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia'or country = 'Zimbabwe '",
          "select earnings from player where country = 'Australia'or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwa'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'"
        ]
      ]
    },
    {
      "id": 39,
      "db_id": "soccer_3",
      "gold": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
      "infer_predictions": [
        [
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select sum ( earnings ) from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Autralia' or country = 'Zimbabwe'",
          "select earnings from player where country = 'AUS' or country = 'Zimbabwe'",
          "select earnings from player where country = 'Australia' or country = 'Zimbabwa'",
          "select earnings from player where country = 'Australie' or country = 'Zimbabwe'"
        ]
      ]
    },
    {
      "id": 40,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
      "infer_predictions": [
        [
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having sum ( order_items.product_id ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders join order_items on orders.order_id = order_items.order_id group by customers.customer_id having sum ( order_items.product_id ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 41,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
      "infer_predictions": [
        [
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having sum ( order_items.product_id ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select customers.customer_id , customers.customer_first_name , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having sum ( order_items.product_id ) > 3",
          "select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id group by customers.customer_id having count ( * ) > 2 intersect select orders.customer_id , customers.customer_first_name , customers.customer_last_name from orders join customers on orders.customer_id = customers.customer_id join order_items on orders.order_id = order_items.order_id group by customers.customer_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 42,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
      "infer_predictions": [
        [
          "select orders.order_id , orders.order_status_code , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_id , order_items.order_item_status_code , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_id , orders.order_status_code , count ( distinct order_items.product_id ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_id , order_items.order_item_status_code , count ( distinct order_items.product_id ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id"
        ]
      ]
    },
    {
      "id": 43,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
      "infer_predictions": [
        [
          "select count ( * ) , orders.order_status_code , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , orders.order_id , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select count ( distinct order_items.product_id ) , orders.order_status_code , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , orders.order_id , count ( * ) , order_items.product_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select orders.order_status_code , orders.order_id , count ( * ) from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id",
          "select count ( * ) , orders.order_status_code , orders.order_id from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id"
        ]
      ]
    },
    {
      "id": 44,
      "db_id": "e_commerce",
      "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id order by orders.date_order_placed asc limit 1",
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by date_order_placed asc limit 1",
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id order by orders.date_order_placed asc limit 1"
        ]
      ]
    },
    {
      "id": 45,
      "db_id": "e_commerce",
      "gold": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by order_items.product_id asc limit 1",
          "select orders.date_order_placed , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by order_items.product_id asc limit 1",
          "select orders.date_order_placed and orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by order_items.product_id asc limit 1",
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed having max ( order_items.product_id ) > 1",
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed having min ( orders.date_order_placed ) > 1",
          "select orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.date_order_placed order by order_items.order_id asc limit 1"
        ]
      ]
    },
    {
      "id": 46,
      "db_id": "e_commerce",
      "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customer_first_name , customer_middle_initial , customer_last_name from customers except select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers except select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id",
          "select customer_first_name , customer_middle_initial , customer_last_name from customers except select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name from customers join orders on customers.customer_id = orders.customer_id"
        ]
      ]
    },
    {
      "id": 47,
      "db_id": "e_commerce",
      "gold": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customer_first_name , customer_last_name , customer_middle_initial from customers except select customers.customer_first_name , customers.customer_last_name , customers.customer_middle_initial from customers join orders on customers.customer_id = orders.customer_id",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers except select customers.customer_first_name , customers.customer_last_name , customers.customer_middle_initial from customers join orders on customers.customer_id = orders.customer_id",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers except select customers.customer_first_name , customers.customer_last_name , customers.customer_middle_initial from customers join orders on customers.customer_id = orders.customer_id",
          "select customer_first_name , customer_last_name , customer_middle_initial from customers except select customers.customer_first_name , customers.customer_last_name , customers.customer_middle_initial from orders join customers on orders.customer_id = customers.customer_id"
        ]
      ]
    },
    {
      "id": 48,
      "db_id": "e_commerce",
      "gold": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select product_id , product_name , product_price , product_color from products except select products.product_id , products.product_name , products.product_price , products.product_color from products join order_items on products.product_id = order_items.product_id group by products.product_id having count ( * ) >= 2",
          "select product_id , product_name , product_price , product_color from products except select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) >= 2",
          "select product_id , product_name , product_price , product_color from products except select products.product_id , products.product_name , products.product_price , products.product_color from products join order_items on products.product_id = order_items.product_id group by order_items.product_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 49,
      "db_id": "e_commerce",
      "gold": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
      "infer_predictions": [
        [
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) < 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) < 2",
          "select order_items.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) < 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id having count ( * ) < 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) <= 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) < 2",
          "select products.product_id , products.product_name , products.product_price , products.product_color from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) <= 2"
        ]
      ]
    },
    {
      "id": 50,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2 order by order_items.product_id asc limit 2",
          "select orders.order_id and orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.date_order_placed , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 51,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id , orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2 order by order_items.product_id asc limit 2",
          "select orders.date_order_placed , orders.order_id from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2",
          "select orders.order_id and orders.date_order_placed from orders join order_items on orders.order_id = order_items.order_id group by orders.order_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 52,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select order_items.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select order_items.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 53,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select order_items.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by products.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from products join order_items on products.product_id = order_items.product_id group by order_items.product_id order by count ( * ) desc limit 1",
          "select products.product_id , products.product_name , products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 54,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select orders.order_id , sum ( products.product_price ) from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1",
          "select orders.order_id , sum ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1",
          "select orders.order_id , products.product_price , sum ( products.product_price ) from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1",
          "select orders.order_id , products.product_price & order_items.product_id from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1",
          "select orders.order_id , sum ( products.product_price ) from orders join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1",
          "select orders.order_id , products.product_price , sum ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by orders.order_id order by sum ( products.product_price ) asc limit 1"
        ]
      ]
    },
    {
      "id": 55,
      "db_id": "e_commerce",
      "gold": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 56,
      "db_id": "e_commerce",
      "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_Code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 57,
      "db_id": "e_commerce",
      "gold": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id group by customer_payment_methods.payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customer_payment_methods group by payment_method_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 58,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 59,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code",
          "select count ( * ) , customers.gender_code from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 60,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by customers.gender_code",
          "select count ( * ) , customers.gender_code from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 61,
      "db_id": "e_commerce",
      "gold": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
      "infer_predictions": [
        [
          "select customers.gender_code , count ( * ) from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code",
          "select customers.gender_code , count ( * ) from orders join customers on orders.customer_id = customers.customer_id group by customers.gender_code"
        ]
      ]
    },
    {
      "id": 62,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id"
        ]
      ]
    },
    {
      "id": 63,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customer_payment_methods join customers on customer_payment_methods.customer_id = customers.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id",
          "select customers.customer_first_name , customers.customer_middle_initial , customers.customer_last_name , customer_payment_methods.payment_method_code from customers join customer_payment_methods on customers.customer_id = customer_payment_methods.customer_id"
        ]
      ]
    },
    {
      "id": 64,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
      "infer_predictions": [
        [
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date and shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 65,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
      "infer_predictions": [
        [
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number",
          "select invoices.invoice_status_code , invoices.invoice_date , shipments.shipment_date from invoices join shipments on invoices.invoice_number = shipments.invoice_number"
        ]
      ]
    },
    {
      "id": 66,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 67,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        [
          "select products.product_name , shipments.shipment_date from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id join order_items on shipment_items.order_item_id = order_items.order_id join products on order_items.product_id = products.product_id",
          "select products.product_name , shipments.shipment_date from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id join order_items on order_items.order_id = shipments.order_id join products on order_items.product_id = products.product_id"
        ]
      ]
    },
    {
      "id": 68,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
      "infer_predictions": [
        [
          "select order_items.order_item_status_code , shipments.shipment_tracking_number from order_items join shipments on order_items.order_item_id = shipments.shipment_id"
        ]
      ]
    },
    {
      "id": 69,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 70,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        [
          "select products.product_name , products.product_color from order_items join products on order_items.product_id = products.product_id join shipments on order_items.order_item_id = shipments.order_id",
          "select products.product_name , products.product_color from order_items join shipments on order_items.order_item_id = shipments.order_id join products on order_items.product_id = products.product_id",
          "select products.product_name , products.product_color from order_items join shipments on order_items.order_item_id = shipments.shipment_id join products on order_items.product_id = products.product_id",
          "select products.product_name , products.product_color from order_items join shipments on order_items.order_id = shipments.order_id join products on order_items.product_id = products.product_id",
          "select products.product_name , products.product_color from order_items join shipment_items on order_items.order_item_id = shipment_items.order_item_id join products on order_items.product_id = products.product_id",
          "select products.product_name , products.product_color from order_items join products on order_items.product_id = products.product_id join shipments on order_items.order_item_id = shipments.shipment_id"
        ]
      ]
    },
    {
      "id": 71,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
      "infer_predictions": [
        [
          "select products.product_name , products.product_color from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id join order_items on order_items.order_item_id = shipments.order_id join products on order_items.product_id = products.product_id"
        ]
      ]
    },
    {
      "id": 72,
      "db_id": "e_commerce",
      "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
      "infer_predictions": [
        [
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and order_items.order_id = orders.order_id and order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and order_items.product_id = products.product_id where customers.gender_code = 'F'"
        ]
      ]
    },
    {
      "id": 73,
      "db_id": "e_commerce",
      "gold": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
      "infer_predictions": [
        [
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders on customers.customer_id = orders.customer_id join order_items on orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and order_items.order_id = orders.order_id and order_items.product_id = products.product_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and order_items.product_id = products.product_id and orders.order_id = order_items.order_id where customers.gender_code = 'F'",
          "select distinct products.product_name , products.product_price , products.product_description from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id where customers.gender_code = 'F'"
        ]
      ]
    },
    {
      "id": 74,
      "db_id": "e_commerce",
      "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
      "infer_predictions": [
        [
          "select invoice_status_code from invoices where invoice_number not in ( select invoice_number from shipments )",
          "select invoices.invoice_status_code from invoices join shipments on invoices.invoice_number = shipments.invoice_number join orders on orders.order_id = shipments.order_id where orders.order_status_code = 'Pending'",
          "select invoices.invoice_status_code from invoices join shipments on invoices.invoice_number = shipments.invoice_number join orders on orders.order_id = shipments.order_id where orders.order_status_code = 'Processing' not in ( select order_status_code from shipments )",
          "select invoices.invoice_status_code from invoices join shipments on invoices.invoice_number = shipments.invoice_number join orders on orders.order_id = shipments.order_id where orders.order_status_code = 'PENDING'"
        ]
      ]
    },
    {
      "id": 75,
      "db_id": "e_commerce",
      "gold": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
      "infer_predictions": [
        [
          "select invoice_status_code from invoices where invoice_number not in ( select invoice_number from shipments )",
          "select invoices.invoice_status_code from invoices join shipments on invoices.invoice_number = shipments.invoice_number join orders on orders.order_id = shipments.order_id where orders.order_status_code = 'PENDING'",
          "select invoices.invoice_status_code from invoices join shipments on invoices.invoice_number = shipments.invoice_number join orders on orders.order_id = shipments.order_id where orders.order_status_code = 'Pending'"
        ]
      ]
    },
    {
      "id": 76,
      "db_id": "e_commerce",
      "gold": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 77,
      "db_id": "e_commerce",
      "gold": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
      "infer_predictions": [
        [
          "select orders.order_id , orders.date_order_placed , sum ( customer_payment_methods.payment_method_code ) from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.order_id group by orders.order_id",
          "select orders.order_id , orders.date_order_placed , sum ( customer_payment_methods.payment_method_code ) from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by orders.order_id",
          "select orders.order_id , orders.date_order_placed , sum ( customer_payment_methods.customer_id ) from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.order_id group by orders.order_id",
          "select orders.order_id , orders.date_order_placed , sum ( customer_payment_methods.customer_id ) from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by orders.order_id",
          "select orders.order_id , orders.date_order_placed , sum ( customer_payment_methods.payment_method_code ) from orders join customer_payment_methods on orders.order_id = customer_payment_methods.customer_id group by orders.order_id"
        ]
      ]
    },
    {
      "id": 78,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from orders"
        ]
      ]
    },
    {
      "id": 79,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT customer_id) FROM Orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from orders",
          "select count ( distinct customer_id ) from orders",
          "select count ( distinct customer_id ) from orders",
          "select count ( distinct customer_id ) from orders"
        ]
      ]
    },
    {
      "id": 80,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
      "infer_predictions": [
        [
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_items.order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id",
          "select count ( distinct order_items.order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id where order_items.order_item_status_code = 'Complete'",
          "select count ( distinct order_items.order_item_status_code ) from order_items join orders on orders.order_id = order_items.order_id",
          "select count ( distinct order_items.order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id where order_items.order_item_status_code = 'Completed'",
          "select count ( distinct order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id",
          "select count ( distinct order_items.order_item_status_code ) from orders join order_items on orders.order_id = order_items.order_id where order_items.order_item_status_code = 'Ascending'"
        ]
      ]
    },
    {
      "id": 81,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
      "infer_predictions": [
        [
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_item_status_code ) from order_items",
          "select count ( distinct order_Item_status_code ) from order_items",
          "select count ( distinct order_item_status_code ) from order_items"
        ]
      ]
    },
    {
      "id": 82,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
      "infer_predictions": [
        [
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_Code ) from customer_payment_methods"
        ]
      ]
    },
    {
      "id": 83,
      "db_id": "e_commerce",
      "gold": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
      "infer_predictions": [
        [
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods",
          "select count ( distinct payment_method_code ) from customer_payment_methods"
        ]
      ]
    },
    {
      "id": 84,
      "db_id": "e_commerce",
      "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
      "infer_predictions": [
        [
          "select login_name , login_password from customers where phone_number like '%+12%'",
          "select login_name , login_password from customers where phone_number like '%12%'",
          "select login_name , login_password from customers where phone_number like '+12'",
          "select login_name , login_password from customers where phone_number like '+12%'",
          "select login_name , login_password from customers where phone_number like '%12%'",
          "select login_name , login_password from customers where phone_number like '%12/%'",
          "select login_name , login_password from customers where phone_number like '%12'",
          "select login_name , login_password from customers where phone_number like '%12.%'"
        ]
      ]
    },
    {
      "id": 85,
      "db_id": "e_commerce",
      "gold": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
      "infer_predictions": [
        [
          "select customer_first_name , login_password from customers where phone_number like '+12'",
          "select customer_first_name , login_password from customers where phone_number like '+12%'",
          "select customer_first_name , login_password from customers where phone_number like '%+12%'",
          "select customer_first_name , login_password from customers where phone_number like '%12%'",
          "select customer_first_name , login_password from customers where phone_number like '%+12'",
          "select customer_first_name , login_password from customers where phone_number like '%12'"
        ]
      ]
    },
    {
      "id": 86,
      "db_id": "e_commerce",
      "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
      "infer_predictions": [
        [
          "select product_size from products where product_name like '%Dell%'",
          "select distinct product_size from products where product_name like '%Dell%'",
          "select product_size from products where product_name like '%Delt%'",
          "select product_size from products where product_name like '%Dell%'",
          "select product_size from products where product_name like '%DELL%'"
        ]
      ]
    },
    {
      "id": 87,
      "db_id": "e_commerce",
      "gold": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
      "infer_predictions": [
        [
          "select product_size from products where product_name like '%Dell%'",
          "select distinct product_size from products where product_name like '%Dell%'",
          "select product_size from products where product_name like '%Delta%'",
          "select product_size from products where product_name like '%Dell%' != '%Dell%'",
          "select product_size from products where product_name like '%Dell%'"
        ]
      ]
    },
    {
      "id": 88,
      "db_id": "e_commerce",
      "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
      "infer_predictions": [
        [
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select product_price from products group by product_price order by avg ( product_price ) desc limit 1 )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_size , product_price from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 89,
      "db_id": "e_commerce",
      "gold": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
      "infer_predictions": [
        [
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products group by product_price order by avg ( product_price ) desc limit 1 )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_size , product_price from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )",
          "select product_price , product_size from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 90,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( distinct product_name ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from orders )",
          "select count ( * ) from products where product_ID not in ( select product_id from order_items )",
          "select count ( * ) from products where product_Id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )"
        ]
      ]
    },
    {
      "id": 91,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items yet )",
          "select count ( * ) from products where product_id not in ( select product_id from order_items )",
          "select count ( * ) from products where product_id not in ( select product_id from order_Items )"
        ]
      ]
    },
    {
      "id": 92,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_payment_methods )"
        ]
      ]
    },
    {
      "id": 93,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_payment_methods )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_payment_methods )"
        ]
      ]
    },
    {
      "id": 94,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
      "infer_predictions": [
        [
          "select order_status_code , date_order_placed from orders",
          "select distinct order_status_code , date_order_placed from orders",
          "select order_status_code , date_order_placed from orders"
        ]
      ]
    },
    {
      "id": 95,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code ,  date_order_placed FROM Orders",
      "infer_predictions": [
        [
          "select order_status_code , date_order_placed from orders",
          "select order_status_code , date_order_placed from orders"
        ]
      ]
    },
    {
      "id": 96,
      "db_id": "e_commerce",
      "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
      "infer_predictions": [
        [
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'United States'"
        ]
      ]
    },
    {
      "id": 97,
      "db_id": "e_commerce",
      "gold": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
      "infer_predictions": [
        [
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'USA'",
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'United States'",
          "select address_line_1 , town_city , county from customers where country = 'US'"
        ]
      ]
    },
    {
      "id": 98,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 99,
      "db_id": "e_commerce",
      "gold": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
      "infer_predictions": [
        [
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id",
          "select customers.customer_first_name , order_items.product_id from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id",
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id order by customers.customer_first_name asc",
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id group by customers.customer_id",
          "select customers.customer_first_name , products.product_name from customers join orders join order_items join products on customers.customer_id = orders.customer_id and orders.order_id = order_items.order_id and order_items.product_id = products.product_id order by customers.customer_id asc"
        ]
      ]
    },
    {
      "id": 100,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Shipment_Items",
      "infer_predictions": [
        [
          "select count ( * ) from shipments",
          "select count ( distinct shipment_items.shipment_id ) from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id",
          "select count ( distinct shipment_items.order_item_id ) from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id",
          "select count ( * ) from shipments join shipment_items on shipments.shipment_id = shipment_items.shipment_id",
          "select count ( * ) from shipments Join shipment_items on shipments.shipment_id = shipment_items.shipment_id"
        ]
      ]
    },
    {
      "id": 101,
      "db_id": "e_commerce",
      "gold": "SELECT count(*) FROM Shipment_Items",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 102,
      "db_id": "e_commerce",
      "gold": "SELECT avg(product_price) FROM Products",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products",
          "select product_price , avg ( product_price ) from products group by product_price",
          "select product_price , avg ( product_price ) from products group by product_price",
          "select product_price , avg ( product_price ) from products group by product_price"
        ]
      ]
    },
    {
      "id": 103,
      "db_id": "e_commerce",
      "gold": "SELECT avg(product_price) FROM Products",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products",
          "select product_price from products group by product_price order by avg ( product_price ) asc limit 1",
          "select product_price from products group by product_price order by avg ( product_price ) asc limit 1",
          "select product_price , avg ( product_price ) from products group by product_price"
        ]
      ]
    },
    {
      "id": 104,
      "db_id": "e_commerce",
      "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select avg ( product_price ) from products join order_items on products.product_id = order_items.product_id",
          "select avg ( product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select avg ( products.product_price ) from orders join order_items join products on orders.order_id = order_items.order_id and order_items.product_id = products.product_id"
        ]
      ]
    },
    {
      "id": 105,
      "db_id": "e_commerce",
      "gold": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select avg ( products.product_price ) from order_items join products on order_items.product_id = products.product_id",
          "select products.product_price , avg ( order_items.order_id ) from order_items join products on order_items.product_id = products.product_id group by order_items.product_id",
          "select products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by avg ( order_items.order_id ) asc limit 1",
          "select products.product_price , avg ( order_items.order_id ) from order_items join products on order_items.product_id = products.product_id group by products.product_price",
          "select avg ( product_price ) from products join order_items on products.product_id = order_items.product_id",
          "select products.product_price from order_items join products on order_items.product_id = products.product_id group by order_items.product_id order by avg ( order_items.order_id ) asc limit 1"
        ]
      ]
    },
    {
      "id": 106,
      "db_id": "e_commerce",
      "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
      "infer_predictions": [
        [
          "select email_address , town_city , county from customers group by gender_code order by count ( * ) asc limit 1",
          "select email_address , town_city , county from customers group by gender_code order by count ( * ) asc limit 1",
          "select email_address ,town_city , county from customers group by gender_code order by count ( * ) asc limit 1",
          "select email_address , town_city , county from customers group by gender_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 107,
      "db_id": "e_commerce",
      "gold": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
      "infer_predictions": [
        [
          "select customers.email_address , customers.town_city , customers.county from customers join orders on customers.customer_id = orders.customer_id where customers.gender_code = 'male' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from customers join orders on customers.customer_id = orders.customer_id where customers.gender_code = 'M' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from orders join customers on orders.customer_id = customers.customer_id where customers.gender_code = 'male' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from orders join customers on orders.customer_id = customers.customer_id where customers.gender_code = 'M' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from customers join orders on customers.customer_id = orders.customer_id where customers.gender_code = 'F' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from customers join orders on customers.customer_id = orders.customer_id group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from customers join orders on customers.customer_id = orders.customer_id where customers.gender_code = 'neutral' group by customers.gender_code order by count ( * ) asc limit 1",
          "select customers.email_address , customers.town_city , customers.county from orders join customers on orders.customer_id = customers.customer_id where customers.gender_code = 'F' group by customers.gender_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 108,
      "db_id": "e_commerce",
      "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select orders.date_order_placed from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by customer_payment_methods.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2",
          "select orders.date_order_placed from customers join orders on customers.customer_id = orders.customer_id group by customers.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by customer_payment_methods.customer_id having count ( distinct payment_method_code ) >= 2"
        ]
      ]
    },
    {
      "id": 109,
      "db_id": "e_commerce",
      "gold": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select orders.date_order_placed from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from customers join orders on customers.customer_id = orders.customer_id group by customers.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from orders join customer_payment_methods on orders.customer_id = customer_payment_methods.customer_id group by customer_payment_methods.customer_id having count ( * ) >= 2",
          "select orders.date_order_placed from customer_payment_methods join orders on customer_payment_methods.customer_id = orders.customer_id group by customer_payment_methods.customer_id having count ( distinct customer_payment_methods.payment_method_code ) >= 2"
        ]
      ]
    },
    {
      "id": 110,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from orders group by order_status_code order by count ( * ) asc limit 1",
          "select order_status_code from orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from orders group by order_status_code order by count ( distinct order_status_code ) desc limit 1"
        ]
      ]
    },
    {
      "id": 111,
      "db_id": "e_commerce",
      "gold": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from orders group by order_status_code order by count ( * ) asc limit 1",
          "select order_status_Code from orders group by order_status_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 112,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from products join order_items on products.product_id = order_items.product_id group by products.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from products join order_items on products.product_id = order_items.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 113,
      "db_id": "e_commerce",
      "gold": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from products join order_items on products.product_id = order_items.product_id group by products.product_id having count ( * ) > 3",
          "select order_items.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by order_items.product_id having count ( * ) > 3",
          "select products.product_id , products.product_description from order_items join products on order_items.product_id = products.product_id group by products.product_id having count ( * ) >= 2",
          "select products.product_id , products.product_description from products join order_items on products.product_id = order_items.product_id group by order_items.product_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 114,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by invoices.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by 2 having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 115,
      "db_id": "e_commerce",
      "gold": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , shipments.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by shipments.invoice_number having count ( * ) >= 2",
          "select invoices.invoice_date , invoices.invoice_number from invoices join shipments on invoices.invoice_number = shipments.invoice_number group by invoices.invoice_number having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 116,
      "db_id": "e_commerce",
      "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
      "infer_predictions": [
        [
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments"
        ]
      ]
    },
    {
      "id": 117,
      "db_id": "e_commerce",
      "gold": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
      "infer_predictions": [
        [
          "select shipment_tracking_number , shipment_date from shipments",
          "select shipment_tracking_number , shipment_date from shipments"
        ]
      ]
    },
    {
      "id": 118,
      "db_id": "e_commerce",
      "gold": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
      "infer_predictions": [
        [
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price <= ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )",
          "select product_color , product_description , product_size from products where product_price < ( select max ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 119,
      "db_id": "e_commerce",
      "gold": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
      "infer_predictions": [
        [
          "select product_color , product_description , product_size from products where product_price != 'maximum'",
          "select product_color , product_description , product_size from products where product_price != 100",
          "select product_color , product_description , product_size from products where product_price except select product_color , product_description , product_size from products where product_price = 100",
          "select product_color , product_description , product_size from products where product_price != '1'"
        ]
      ]
    },
    {
      "id": 120,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
      "infer_predictions": [
        [
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )",
          "select name from director where age > ( select avg ( age ) from director )"
        ]
      ]
    },
    {
      "id": 121,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from director order by age desc limit 1",
          "select name from director order by age asc limit 1",
          "select name from director order by age desc limit 1",
          "select name from director order by age desc limit 1",
          "select name from director order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 122,
      "db_id": "bbc_channels",
      "gold": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
      "infer_predictions": [
        [
          "select count ( * ) from channel where internet like '%bbc%'",
          "select count ( * ) from channel where internet like '%bbc%'",
          "select count ( * ) from channel where Internet like '%bbc%'",
          "select count ( * ) from channel where internet like '%bbc%'"
        ]
      ]
    },
    {
      "id": 123,
      "db_id": "bbc_channels",
      "gold": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
      "infer_predictions": [
        [
          "select count ( distinct digital_terrestrial_channel ) from channel",
          "select count ( distinct digital_terrestrial_channel ) from channel",
          "select count ( distinct digital_terrestrial_channel ) from channel",
          "select count ( distinct digital_terrestrial_channel ) from channel",
          "select count ( distinct digital_terrestrial_channel) from channel"
        ]
      ]
    },
    {
      "id": 124,
      "db_id": "bbc_channels",
      "gold": "SELECT title FROM program ORDER BY start_year DESC",
      "infer_predictions": [
        [
          "select title from program order by start_year desc",
          "select title from program order by start_year asc"
        ]
      ]
    },
    {
      "id": 125,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select director.name from program join director on program.director_id = director.director_id group by director.name order by count ( * ) desc limit 1",
          "select director.name from director join program on director.director_id = program.director_id group by director.name order by count ( * ) desc limit 1",
          "select director.name from program join director on program.director_id = director.director_id group by program.director_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 126,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select director.name , director.age from program join director on program.director_id = director.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name , director.age from director join program on director.director_id = program.director_id group by director.director_id order by count ( * ) desc limit 1",
          "select director.name , director.age from program join director on program.director_id = director.director_id group by director.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 127,
      "db_id": "bbc_channels",
      "gold": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
      "infer_predictions": [
        [
          "select title from program order by start_year desc limit 1",
          "select title from program order by start_year desc limit 1"
        ]
      ]
    },
    {
      "id": 128,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by program.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by channel.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from program join channel on program.channel_id = channel.channel_id group by channel.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from program join channel on program.channel_id = channel.channel_id group by program.channel_id having count ( * ) > 1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program.channel_id group by program.channel_id having count ( * ) >1",
          "select channel.name , channel.internet from channel join program on channel.channel_id = program. channel_id group by program.channel_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 129,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
      "infer_predictions": [
        [
          "select count ( * ) , channel.name from channel join program on channel.channel_id = program.channel_id group by channel.channel_id",
          "select count ( * ) , channel.name from program join channel on program.channel_id = channel.channel_id group by channel.name",
          "select count ( * ) , channel.name from channel join program on channel.channel_id = program.channel_id group by channel.name",
          "select count ( * ) , channel.name from channel join program on channel.channel_id = program.channel_id group by program.channel_id",
          "select count ( * ) , channel.name from channel join program on channel.channel_id = program.channel_id group by channel. channel_id",
          "select count ( * ) , channel.name from program join channel on program.channel_id = channel.channel_id group by program.channel_id"
        ]
      ]
    },
    {
      "id": 130,
      "db_id": "bbc_channels",
      "gold": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
      "infer_predictions": [
        [
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )",
          "select count ( * ) from channel where channel_id not in ( select channel_id from program )"
        ]
      ]
    },
    {
      "id": 131,
      "db_id": "bbc_channels",
      "gold": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
      "infer_predictions": [
        [
          "select director.name from program join director_admin on program.director_id = director_admin.director_id join channel on director_admin.channel_id = channel.channel_id join director on director_admin.director_id = director.director_id where program.title = 'Dracula'"
        ]
      ]
    },
    {
      "id": 132,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin.channel_id group by director_admin.channel_id order by count ( * ) desc limit 1",
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin.channel_id group by channel.channel_id order by count ( * ) desc limit 1",
          "select channel.name , channel.internet from director_admin join channel on director_admin.channel_id = channel.channel_id group by director_admin.channel_id order by count ( * ) desc limit 1",
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin.channel_id group by director_admin.channel_id order by count ( * ) desc limit 1",
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin. channel_id group by director_admin.channel_id order by count ( * ) desc limit 1",
          "select channel.name , channel.internet from channel join director_admin on channel.channel_id = director_admin.channel_id group by director_admin.channel_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 133,
      "db_id": "bbc_channels",
      "gold": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
      "infer_predictions": [
        [
          "select name from director where age between 30 and 60",
          "select name from director where age between 30 and 60"
        ]
      ]
    },
    {
      "id": 134,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
      "infer_predictions": [
        [
          "select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age < 40 intersect select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age > 60",
          "select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age < 40 intersect select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director_admin.director_id where director.age > 60",
          "select channel.name from director_admin join channel on director_admin.channel_id = channel.channel_id join director on director_admin.director_id = director.director_id where director.age < 40 intersect select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age > 60",
          "select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age < 40 intersect select channel.name from director_admin join channel on director_admin.channel_id = channel.channel_id join director on director_admin.director_id = director.director_id where director.age > 60",
          "select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age <= 40 intersect select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age > 60",
          "select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age < 40 intersect select channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id join director on director_admin.director_id = director.director_id where director.age >60"
        ]
      ]
    },
    {
      "id": 135,
      "db_id": "bbc_channels",
      "gold": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
      "infer_predictions": [
        [
          "select channel_id , name from channel except select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id where director_admin.director_id = 'Hank Baskett'",
          "select channel_id , name from channel except select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id where director_admin.is_first_director = 'Hank Baskett'",
          "select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id except select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id where director_admin.is_first_director = 'Hank Baskett'",
          "select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id except select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id where director_admin.director_id = 'Hank Baskett'",
          "select channel_id , name from channel except select channel.channel_id , channel.name from channel join director_admin on channel.channel_id = director_admin.channel_id where director_admin.director_id = 'Hank Baskett'"
        ]
      ]
    },
    {
      "id": 136,
      "db_id": "tv_shows",
      "gold": "SELECT count(*) FROM radio",
      "infer_predictions": [
        [
          "select count ( * ) from radio",
          "select count ( * ) from radio",
          "select count ( * ) from radio",
          "select count ( * ) from radio",
          "select count ( * ) from radio",
          "select count ( * ) from radio"
        ]
      ]
    },
    {
      "id": 137,
      "db_id": "tv_shows",
      "gold": "select transmitter from radio order by erp_kw asc",
      "infer_predictions": [
        [
          "select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc",
          "Select transmitter from radio order by erp_kw asc",
          "select transmitter from radio order by erp_kw asc"
        ]
      ]
    },
    {
      "id": 138,
      "db_id": "tv_shows",
      "gold": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
      "infer_predictions": [
        [
          "select tv_show_name , original_airdate from tv_show",
          "select tv_show_name , original_airdate from tv_show",
          "select tv_show_name , original_airdate from tv_show"
        ]
      ]
    },
    {
      "id": 139,
      "db_id": "tv_shows",
      "gold": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
      "infer_predictions": [
        [
          "select station_name from city_channel where affiliation != 'ABC'",
          "select station_name from city_channel where affiliation != 'ABC '",
          "select station_name from city_channel where affiliation != 'ABC' != 'City_channel'",
          "select station_name from city_channel where affiliation != 'ABC' != 'Station_name'",
          "select station_name from city_channel where affiliation != 'ABC' != '%City_channel%'",
          "select station_name from city_channel where affiliation != 'ABC' != '%Station_name%'"
        ]
      ]
    },
    {
      "id": 140,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
      "infer_predictions": [
        [
          "select transmitter from radio where erp_kw > 150 or erp_kw < 30",
          "select transmitter from radio where ERP_kw > 150 or ERP_kw < 30",
          "select transmitter from radio where erp_kw > 150 or erp_kw < 30",
          "select transmitter from radio where erp_kw > 150 or erp_kw <= 30",
          "select transmitter from radio where ERP_KW > 150 or ERP_KW < 30"
        ]
      ]
    },
    {
      "id": 141,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
      "infer_predictions": [
        [
          "select transmitter from radio order by erp_kw desc limit 1",
          "select transmitter from radio order by erp_kW desc limit 1",
          "select transmitter from radio order by ERP_kw desc limit 1",
          "select transmitter from radio order by ERP_kW desc limit 1",
          "select transmitter from radio order by erp_kw desc limit 1",
          "select transmitter from radio order by ERP_KW desc limit 1"
        ]
      ]
    },
    {
      "id": 142,
      "db_id": "tv_shows",
      "gold": "SELECT avg(ERP_kW) FROM radio",
      "infer_predictions": [
        [
          "select avg ( erp_kw ) from radio",
          "select erp_kw , avg ( radio.erp_kw ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.radio_id",
          "select erp_kw , avg ( radio.erp_kw ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by city_channel_radio.radio_id",
          "select erp_kw , avg ( erp_kw ) from radio group by erp_kw",
          "select erp_kw , avg ( radio.erp_kw ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.erp_kw",
          "select erp_kw , avg ( ERP_kw ) from radio group by erp_kw"
        ]
      ]
    },
    {
      "id": 143,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from city_channel group by affiliation",
          "select affiliation  , count ( * ) from city_channel group by affiliation",
          "select affiliation , count ( *) from city_channel group by affiliation",
          "select affiliation , count ( * ) from city_channel group by affiliation",
          "select affiliation , count ( * ) from city_channel group by affiliation",
          "select affiliation , count ( * ) from city_channel group by affiliation"
        ]
      ]
    },
    {
      "id": 144,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from city_channel group by affiliation order by count ( * ) desc limit 1",
          "Select affiliation from city_channel group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from city_channel group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from city_channel group by affiliation order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 145,
      "db_id": "tv_shows",
      "gold": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
      "infer_predictions": [
        [
          "select affiliation from city_channel group by affiliation having count ( * ) > 3",
          "select affiliation from city_channel group by affiliation having count ( * ) > 2",
          "select affiliation from city_channel group by affiliation having count ( * ) > 4",
          "select affiliation from city_channel group by affiliation having count ( * ) >3",
          "select affiliation from city_channel group by affiliation having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 146,
      "db_id": "tv_shows",
      "gold": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
      "infer_predictions": [
        [
          "select city_channel.city , city_channel.station_name from city_channel join city_channel_tv_show on city_channel.id = city_channel_tv_show.city_channel_id order by city_channel.station_name asc",
          "select city_channel.city , city_channel.station_name from city_channel join city_channel_tv_show on city_channel.id = city_channel_tv_show.city_channel_id order by station_name asc",
          "select city_channel.city , city_channel.station_name from city_channel join city_channel_tv_show on city_channel_tv_show.city_channel_id = city_channel.id order by city_channel.station_name asc",
          "select city_channel.city , city_channel.station_name from city_channel join city_channel_tv_show on city_channel_tv_show.city_channel_id = city_channel.id order by station_name asc",
          "select city_channel.city , city_channel.station_name from city_channel join city_channel_tv_show on city_channel_id = city_channel_tv_show.city_channel_id order by city_channel.station_name asc",
          "select city_channel.city , station_name from city_channel join city_channel_tv_show on city_channel.id = city_channel_tv_show.city_channel_id order by station_name asc"
        ]
      ]
    },
    {
      "id": 147,
      "db_id": "tv_shows",
      "gold": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
      "infer_predictions": [
        [
          "select radio.transmitter , city_channel.city from city_channel join city_channel_radio on city_channel.id = city_channel_radio.city_channel_id join radio on city_channel_radio.radio_id = radio.radio_id",
          "select radio.transmitter , city_channel.city from city_channel join city_channel_radio on city_channel_radio.city_channel_id = city_channel.id join radio on city_channel_radio.radio_id = radio.radio_id",
          "select radio.transmitter , city_channel.city from city_channel_radio join city_channel on city_channel_radio.city_channel_id = city_channel.id join radio on city_channel_radio.radio_id = radio.radio_id"
        ]
      ]
    },
    {
      "id": 148,
      "db_id": "tv_shows",
      "gold": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
      "infer_predictions": [
        [
          "select radio.transmitter , city_channel.station_name from city_channel join city_channel_radio on city_channel.id = city_channel_radio.radio_id join radio on city_channel_radio.radio_id = radio.radio_id order by radio.erp_kw desc"
        ]
      ]
    },
    {
      "id": 149,
      "db_id": "tv_shows",
      "gold": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
      "infer_predictions": [
        [
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by radio.transmitter",
          "select radio.transmitter , count ( * ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.transmitter",
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by city_channel_radio.radio_id",
          "select radio.transmitter , count ( * ) from city_channel_radio join radio on city_channel_radio.radio_id = radio.radio_id group by radio.radio_id",
          "select radio.transmitter , count ( * ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by radio.radio_id",
          "select radio.transmitter , count ( * ) from radio join city_channel_radio on radio.radio_id = city_channel_radio.radio_id group by city_channel_radio.radio_id"
        ]
      ]
    },
    {
      "id": 150,
      "db_id": "tv_shows",
      "gold": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
      "infer_predictions": [
        [
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select distinct radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select distinct radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )",
          "select distinct transmitter from radio where radio_id not in ( select radio_id from city_channel_radio )"
        ]
      ]
    },
    {
      "id": 151,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from vehicle order by top_speed desc limit 1",
          "select model from vehicle where top_speed = ( select max ( top_speed ) from vehicle where power > 6000 )",
          "select model from vehicle where top_speed > 6000 order by power desc limit 1"
        ]
      ]
    },
    {
      "id": 152,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from vehicle where power > 6000 order by top_speed desc limit 1",
          "select model from vehicle where power > 6000 order by top_speed desc limit 1",
          "select model from vehicle where power > 6500 order by top_speed desc limit 1",
          "select model from vehicle where power > 6200 order by top_speed desc limit 1",
          "select model from vehicle where power > 6000 order by top_speed desc limit 1"
        ]
      ]
    },
    {
      "id": 153,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
      "infer_predictions": [
        [
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United State'",
          "select name from driver where citizenship = 'United Stated'",
          "select name from driver where citizenship = 'United states'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'United Kingdom'"
        ]
      ]
    },
    {
      "id": 154,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver WHERE citizenship  =  'United States'",
      "infer_predictions": [
        [
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'USA'",
          "select name from driver where citizenship = 'United States'",
          "select name from driver where citizenship = 'U.S.'",
          "select name from driver where citizenship = 'United State'",
          "select name from driver where citizenship = 'USA'",
          "select name from driver where citizenship = 'U.S.A.'",
          "select name from driver where citizenship = 'United States of America'"
        ]
      ]
    },
    {
      "id": 155,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.driver_id from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , vehicle_driver.vehicle_id from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , vehicle_driver.vehicle_id from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id having count ( * ) <= 10",
          "select driver.driver_id from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id having count ( * ) <= 1"
        ]
      ]
    },
    {
      "id": 156,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.driver_id , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , count ( * ) from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.driver_id , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by vehicle_driver.driver_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 157,
      "db_id": "vehicle_driver",
      "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
      "infer_predictions": [
        [
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhouzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuhai'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhengzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'"
        ]
      ]
    },
    {
      "id": 158,
      "db_id": "vehicle_driver",
      "gold": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
      "infer_predictions": [
        [
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhouzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhengzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhuzhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Zhaozhou'",
          "select max ( power ) , avg ( power ) from vehicle where builder = 'Xhuzhou'"
        ]
      ]
    },
    {
      "id": 159,
      "db_id": "vehicle_driver",
      "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicle_id from vehicle_driver group by vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle_driver.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle_driver.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_id from vehicle_driver group by vehicle_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 160,
      "db_id": "vehicle_driver",
      "gold": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicle_id from vehicle_driver group by vehicle_id order by count ( * ) asc limit 1",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle_driver.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle_driver.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle_driver.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1",
          "select vehicle.vehicle_id from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by vehicle.vehicle_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 161,
      "db_id": "vehicle_driver",
      "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
      "infer_predictions": [
        [
          "select top_speed , power from vehicle where build_year = 1996",
          "select max ( top_speed ) , max ( power ) from vehicle where build_year = 1996",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = 1996",
          "select avg ( top_speed ) , max ( power ) from vehicle where build_year = 1996",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = '1996'",
          "select top_speed , power from vehicle where build_year = '1996'",
          "select max ( top_speed ) , max ( power ) from vehicle where build_year = '1996'",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = 1996 != '1996'"
        ]
      ]
    },
    {
      "id": 162,
      "db_id": "vehicle_driver",
      "gold": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
      "infer_predictions": [
        [
          "select top_speed , power from vehicle where build_year = 1996",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = 1996",
          "select max ( top_speed ) , max ( power ) from vehicle where build_year = 1996",
          "select top_speed , power from vehicle where build_year = '1996'",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = '1996'",
          "select avg ( top_speed ) , avg ( power ) from vehicle where build_year = 1996 != '1996'",
          "select max ( top_speed ) , max ( power ) from vehicle where build_year = '1996'"
        ]
      ]
    },
    {
      "id": 163,
      "db_id": "vehicle_driver",
      "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
      "infer_predictions": [
        [
          "select build_year , model , builder from vehicle",
          "select build_year ,model , builder from vehicle",
          "select build_year ,model ,builder from vehicle"
        ]
      ]
    },
    {
      "id": 164,
      "db_id": "vehicle_driver",
      "gold": "SELECT build_year ,  model ,  builder FROM vehicle",
      "infer_predictions": [
        [
          "select build_year , model , builder from vehicle",
          "select build_year ,model , builder from vehicle"
        ]
      ]
    },
    {
      "id": 165,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
      "infer_predictions": [
        [
          "select count ( * ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( * ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( * ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012"
        ]
      ]
    },
    {
      "id": 166,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
      "infer_predictions": [
        [
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle.vehicle_id = vehicle_driver.vehicle_id where vehicle.build_year = 2012",
          "select count ( distinct vehicle_driver.driver_id ) from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.build_year = 2012"
        ]
      ]
    },
    {
      "id": 167,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
      "infer_predictions": [
        [
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAR' != 'DARTS'"
        ]
      ]
    },
    {
      "id": 168,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
      "infer_predictions": [
        [
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( distinct driver_id ) from driver where racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAR'",
          "select count ( * ) from driver where racing_series = 'NASCAAR'"
        ]
      ]
    },
    {
      "id": 169,
      "db_id": "vehicle_driver",
      "gold": "SELECT avg(top_speed) FROM vehicle",
      "infer_predictions": [
        [
          "select avg ( top_speed ) from vehicle",
          "select top_speed , avg ( top_speed ) from vehicle group by top_speed",
          "select top_speed , avg ( top_speed ) from vehicle group by top_speed",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed  ) from vehicle",
          "select avg ( top_speed ) from vehicle"
        ]
      ]
    },
    {
      "id": 170,
      "db_id": "vehicle_driver",
      "gold": "SELECT avg(top_speed) FROM vehicle",
      "infer_predictions": [
        [
          "select avg ( top_speed ) from vehicle",
          "select top_speed , avg ( top_speed ) from vehicle group by top_speed",
          "select top_speed , avg ( top_speed ) from vehicle group by top_speed",
          "select avg ( top_speed ) from vehicle",
          "select 'avg ( _ ) from _'",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed ) from vehicle",
          "select avg ( top_speed  ) from vehicle",
          "select avg ( top_speed ) from vehicle"
        ]
      ]
    },
    {
      "id": 171,
      "db_id": "vehicle_driver",
      "gold": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
      "infer_predictions": [
        [
          "select distinct driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000",
          "select distinct driver.name from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select distinct driver.name from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select distinct driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000",
          "select distinct driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5500"
        ]
      ]
    },
    {
      "id": 172,
      "db_id": "vehicle_driver",
      "gold": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
      "infer_predictions": [
        [
          "select driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000",
          "select driver.name from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select driver.name from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.power > 5000",
          "select driver.name from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.power > 5000"
        ]
      ]
    },
    {
      "id": 173,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
      "infer_predictions": [
        [
          "select model from vehicle where total_production > 100 or top_speed > 150",
          "select model from vehicle where total_production > 100 or top_speed >150",
          "select model from vehicle where total_production > 100 and top_speed > 150",
          "select model from vehicle where total_production >100 or top_speed > 150",
          "select model from vehicle where total_production > 100 or top_speed > 150"
        ]
      ]
    },
    {
      "id": 174,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
      "infer_predictions": [
        [
          "select model from vehicle where total_production > 100 or top_speed > 150",
          "select model from vehicle where total_production >100 or top_speed > 150",
          "select model from vehicle where total_production > 100 or top_speed >150",
          "select model from vehicle where total_production > 100 or top_speed > 150"
        ]
      ]
    },
    {
      "id": 175,
      "db_id": "vehicle_driver",
      "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
      "infer_predictions": [
        [
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like 'DJ%'",
          "select model , build_year from vehicle where model like '%DJS%'",
          "select model , build_year from vehicle where model like '%Dj%'"
        ]
      ]
    },
    {
      "id": 176,
      "db_id": "vehicle_driver",
      "gold": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
      "infer_predictions": [
        [
          "select model , build_year from vehicle where model like '%DJ%'",
          "select model , build_year from vehicle where model like '%DJS%'",
          "select model , build_year from vehicle where model like 'DJ%'",
          "Select model , build_year from vehicle where model like '%DJ%'"
        ]
      ]
    },
    {
      "id": 177,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
      "infer_predictions": [
        [
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle except select vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id",
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 178,
      "db_id": "vehicle_driver",
      "gold": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
      "infer_predictions": [
        [
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )",
          "select model from vehicle where vehicle_id not in ( select vehicle_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 179,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) = 2",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Ziyang'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 180,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) = 2",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) = 2",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id group by vehicle.vehicle_id having count ( * ) = 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Ziyang'"
        ]
      ]
    },
    {
      "id": 181,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon'"
        ]
      ]
    },
    {
      "id": 182,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeff Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeffrey Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeffrey'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeffy Gordon'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where driver.name = 'Jeffy'",
          "select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by vehicle.vehicle_id having count ( * ) > 2 union select vehicle.vehicle_id , vehicle.model from vehicle join vehicle_driver on vehicle.vehicle_id = vehicle_driver.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id group by driver.driver_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 183,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
      "infer_predictions": [
        [
          "select count ( * ) from vehicle order by top_speed desc limit 1",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle order by top_speed desc limit 1 )"
        ]
      ]
    },
    {
      "id": 184,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
      "infer_predictions": [
        [
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed >= ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed > ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )",
          "select count ( * ) from vehicle where top_speed = ( select max ( top_speed ) from vehicle )"
        ]
      ]
    },
    {
      "id": 185,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver ORDER BY name",
      "infer_predictions": [
        [
          "select name from driver order by name asc"
        ]
      ]
    },
    {
      "id": 186,
      "db_id": "vehicle_driver",
      "gold": "SELECT name FROM driver ORDER BY name",
      "infer_predictions": [
        [
          "select name from driver order by name asc",
          "Select name from driver order by name asc",
          "select name from driver order by name asc"
        ]
      ]
    },
    {
      "id": 187,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
      "infer_predictions": [
        [
          "select racing_series , count ( * ) from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_series",
          "select racing_series , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id group by racing_series",
          "select racing_series , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id group by racing_series",
          "select racing_series , count ( * ) from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle_driver.vehicle_id group by racing_series"
        ]
      ]
    },
    {
      "id": 188,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
      "infer_predictions": [
        [
          "select count ( * ) , racing_series from driver group by racing_series",
          "select racing_series , count ( * ) from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_series",
          "select count ( * ) , racing_series from driver group by racing_Series"
        ]
      ]
    },
    {
      "id": 189,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
      "infer_predictions": [
        [
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'"
        ]
      ]
    },
    {
      "id": 190,
      "db_id": "vehicle_driver",
      "gold": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
      "infer_predictions": [
        [
          "select driver.name , driver.citizenship from vehicle_driver join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id join driver on vehicle_driver.driver_id = driver.driver_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from vehicle_driver join driver on vehicle_driver.driver_id = driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'",
          "select driver.name , driver.citizenship from driver join vehicle_driver on driver.driver_id = vehicle_driver.driver_id join vehicle on vehicle_driver.vehicle_id = vehicle.vehicle_id where vehicle.model = 'DJ1'"
        ]
      ]
    },
    {
      "id": 191,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
      "infer_predictions": [
        [
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 192,
      "db_id": "vehicle_driver",
      "gold": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
      "infer_predictions": [
        [
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )",
          "select count ( * ) from driver where driver_id not in ( select driver_id from vehicle_driver )"
        ]
      ]
    },
    {
      "id": 193,
      "db_id": "online_exams",
      "gold": "SELECT count(*) FROM Exams",
      "infer_predictions": [
        [
          "select count ( * ) from exams"
        ]
      ]
    },
    {
      "id": 194,
      "db_id": "online_exams",
      "gold": "SELECT count(*) FROM Exams",
      "infer_predictions": [
        [
          "select count ( * ) from exams"
        ]
      ]
    },
    {
      "id": 195,
      "db_id": "online_exams",
      "gold": "select distinct subject_code from exams order by subject_code asc",
      "infer_predictions": [
        [
          "select distinct subject_code from exams order by subject_code asc",
          "Select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc"
        ]
      ]
    },
    {
      "id": 196,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
      "infer_predictions": [
        [
          "select distinct subject_code from exams order by subject_code asc",
          "Select distinct subject_code from exams order by subject_code asc",
          "select distinct subject_code from exams order by subject_code asc"
        ]
      ]
    },
    {
      "id": 197,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
      "infer_predictions": [
        [
          "select exam_name , exam_date from exams where subject_code != 'Database'",
          "select exam_name , exam_date from exams where subject_code != 'Database'"
        ]
      ]
    },
    {
      "id": 198,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
      "infer_predictions": [
        [
          "select exam_date , exam_name from exams where subject_code != 'Database'",
          "select exam_name , exam_date from exams where subject_code != 'Database'"
        ]
      ]
    },
    {
      "id": 199,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
      "infer_predictions": [
        [
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc"
        ]
      ]
    },
    {
      "id": 200,
      "db_id": "online_exams",
      "gold": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
      "infer_predictions": [
        [
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc",
          "select exam_date from exams where subject_code like '%data%' order by exam_date desc"
        ]
      ]
    },
    {
      "id": 201,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
      "infer_predictions": [
        [
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code",
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code"
        ]
      ]
    },
    {
      "id": 202,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
      "infer_predictions": [
        [
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code",
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code",
          "select type_of_question_code , count ( * ) from questions group by type_of_question_code"
        ]
      ]
    },
    {
      "id": 203,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
      "infer_predictions": [
        [
          "select distinct student_answer_text from student_answers where comments = 'Normal'",
          "select distinct student_answer_text from student_answers where comments = 'Normal'"
        ]
      ]
    },
    {
      "id": 204,
      "db_id": "online_exams",
      "gold": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
      "infer_predictions": [
        [
          "select distinct student_answer_text from student_answers where comments = 'Normal'",
          "select distinct student_answer_text from student_answers where comments = 'Normal'"
        ]
      ]
    },
    {
      "id": 205,
      "db_id": "online_exams",
      "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
      "infer_predictions": [
        [
          "select count ( distinct comments ) from student_answers",
          "select count ( distinct comments ) from student_answers",
          "select count ( distinct comments ) from student_answers",
          "select count ( distinct Comments ) from student_answers",
          "select count ( distinct comments ) from student_answers"
        ]
      ]
    },
    {
      "id": 206,
      "db_id": "online_exams",
      "gold": "SELECT count(DISTINCT Comments) FROM Student_Answers",
      "infer_predictions": [
        [
          "select count ( distinct comments ) from student_answers",
          "select count ( distinct Comments ) from student_answers",
          "select count ( distinct comments ) from student_answers",
          "select count ( distinct comments ) from student_answers"
        ]
      ]
    },
    {
      "id": 207,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc",
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc"
        ]
      ]
    },
    {
      "id": 208,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc",
          "select student_answer_text from student_answers group by student_answer_text order by count ( * ) desc"
        ]
      ]
    },
    {
      "id": 209,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
      "infer_predictions": [
        [
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id",
          "select students.first_name , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id"
        ]
      ]
    },
    {
      "id": 210,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
      "infer_predictions": [
        [
          "select students.first_name , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id",
          "select students.first_name , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id"
        ]
      ]
    },
    {
      "id": 211,
      "db_id": "online_exams",
      "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
      "infer_predictions": [
        [
          "select students.email_adress , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id order by student_answers.date_of_answer desc",
          "select students.email_adress , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id order by student_answers.date_of_answer desc"
        ]
      ]
    },
    {
      "id": 212,
      "db_id": "online_exams",
      "gold": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
      "infer_predictions": [
        [
          "select students.email_adress , student_answers.date_of_answer from student_answers join students on student_answers.student_id = students.student_id order by student_answers.date_of_answer desc",
          "select students.email_adress , student_answers.date_of_answer from students join student_answers on students.student_id = student_answers.student_id order by student_answers.date_of_answer desc"
        ]
      ]
    },
    {
      "id": 213,
      "db_id": "online_exams",
      "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select assessment from student_assessments group by assessment order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 214,
      "db_id": "online_exams",
      "gold": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select assessment from student_assessments group by assessment order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 215,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by student_answers.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by students.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by students.first_name having count ( * ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by students.student_id having count ( * ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by student_answers.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 216,
      "db_id": "online_exams",
      "gold": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by students.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by student_answers.student_id having count ( * ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by students.student_id having count ( * ) >= 2",
          "select students.first_name from student_answers join students on student_answers.student_id = students.student_id group by students.first_name having count ( * ) >= 2",
          "select students.first_name from students join student_answers on students.student_id = student_answers.student_id group by student_answers.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 217,
      "db_id": "online_exams",
      "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select valid_answer_text from valid_answers group by valid_answer_text order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 218,
      "db_id": "online_exams",
      "gold": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select valid_answer_text from valid_answers group by valid_answer_text order by count ( * ) desc limit 1",
          "select valid_answer_text from valid_answers group by valid_answer_text order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 219,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu != 'M'"
        ]
      ]
    },
    {
      "id": 220,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu != 'M'"
        ]
      ]
    },
    {
      "id": 221,
      "db_id": "online_exams",
      "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
      "infer_predictions": [
        [
          "select gender_mfu , count ( * ) from students group by gender_mfu",
          "select gender_mfu , count ( * ) from students group by gender_mfu",
          "select gender_mfu , count ( * ) from students group by gender_mfu"
        ]
      ]
    },
    {
      "id": 222,
      "db_id": "online_exams",
      "gold": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
      "infer_predictions": [
        [
          "select gender_mfu , count ( * ) from students group by gender_mfu",
          "select gender_mfu , count ( * ) from students group by gender_mfu"
        ]
      ]
    },
    {
      "id": 223,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'",
          "select last_name from students where gender_mfu = \"F\" or gender_mfu = 'M'"
        ]
      ]
    },
    {
      "id": 224,
      "db_id": "online_exams",
      "gold": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
      "infer_predictions": [
        [
          "select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'",
          "select last_name from students where gender_mfu = \"F\" or gender_mfu = 'M'",
          "select last_name from students where gender_mfu = 'F' or gender_mfu = 'M'"
        ]
      ]
    },
    {
      "id": 225,
      "db_id": "online_exams",
      "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
      "infer_predictions": [
        [
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id",
          "select first_name from students where student_id not in ( select student_id from student_answers )",
          "select first_name from students except select students.first_name from student_answers join students on student_answers.student_id = students.student_id",
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id",
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id"
        ]
      ]
    },
    {
      "id": 226,
      "db_id": "online_exams",
      "gold": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
      "infer_predictions": [
        [
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id",
          "select first_name from students except select students.first_name from student_answers join students on student_answers.student_id = students.student_id",
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id",
          "select first_name from students except select students.first_name from students join student_answers on students.student_id = student_answers.student_id",
          "select first_name from students where student_id not in ( select student_id from student_answers )"
        ]
      ]
    },
    {
      "id": 227,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'"
        ]
      ]
    },
    {
      "id": 228,
      "db_id": "online_exams",
      "gold": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
      "infer_predictions": [
        [
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absent'",
          "select student_answer_text from student_answers where comments = 'Normal' intersect select student_answer_text from student_answers where comments = 'Absentee'"
        ]
      ]
    },
    {
      "id": 229,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 230,
      "db_id": "online_exams",
      "gold": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3",
          "select type_of_question_code from questions group by type_of_question_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 231,
      "db_id": "online_exams",
      "gold": "SELECT * FROM Students",
      "infer_predictions": [
        [
          "select * from students"
        ]
      ]
    },
    {
      "id": 232,
      "db_id": "online_exams",
      "gold": "SELECT * FROM Students",
      "infer_predictions": [
        [
          "select * from students"
        ]
      ]
    },
    {
      "id": 233,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Addresses",
      "infer_predictions": [
        [
          "select count ( * ) from addresses",
          "select count ( * ) , addresses.address_details from addresses join customers on addresses.address_id = customers.address_id",
          "select count ( * ) , addresses.address_details from addresses join customers on addresses.address_id = customers.address_id and customers.customer_id = customers.customer_id"
        ]
      ]
    },
    {
      "id": 234,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Addresses",
      "infer_predictions": [
        [
          "select count ( * ) from addresses"
        ]
      ]
    },
    {
      "id": 235,
      "db_id": "customers_and_orders",
      "gold": "SELECT address_id ,  address_details FROM Addresses",
      "infer_predictions": [
        [
          "select address_id , address_details from addresses",
          "select address_id , address_details from addresses"
        ]
      ]
    },
    {
      "id": 236,
      "db_id": "customers_and_orders",
      "gold": "SELECT address_id ,  address_details FROM Addresses",
      "infer_predictions": [
        [
          "select address_id , address_details from addresses",
          "select address_id , address_details from addresses union select address_id , address_details from addresses",
          "select address_id , address_details from addresses",
          "select address_id , address_details from addresses"
        ]
      ]
    },
    {
      "id": 237,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products",
      "infer_predictions": [
        [
          "select count ( * ) from products",
          "select count ( * ) from ( select count ( * ) from products )",
          "select count ( distinct product_id ) from products",
          "select count ( * ) from products",
          "select count ( * ) from products"
        ]
      ]
    },
    {
      "id": 238,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products",
      "infer_predictions": [
        [
          "select count ( * ) from products",
          "select count ( * ) from ( select count ( * ) from products )",
          "select count ( * ) from products",
          "select count ( * ) from products"
        ]
      ]
    },
    {
      "id": 239,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
      "infer_predictions": [
        [
          "select product_id , product_type_code , product_name from products",
          "select product_Id , product_type_code , product_name from products",
          "select product_id , product_type_code , product_name from products",
          "select product_id , product_type_code , product_name from products",
          "select product_id , product_type_code , product_name from products"
        ]
      ]
    },
    {
      "id": 240,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
      "infer_predictions": [
        [
          "select product_id , product_type_code , product_name from products",
          "select product_id , product_type_code , product_name from products",
          "select product_Id , product_type_code , product_name from products",
          "select product_type_code , product_id , product_name from products",
          "select product_id , product_type_code , product_name from products"
        ]
      ]
    },
    {
      "id": 241,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Moniteur'",
          "select product_price from products where product_name = 'Monitors'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Monitored'",
          "select product_price from products where product_name = 'Monitor'",
          "select product_price from products where product_name = \"Monitor\""
        ]
      ]
    },
    {
      "id": 242,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select product_price from products where product_name = 'Monitor'",
          "select sum ( product_price ) from products where product_name = 'Monitor'",
          "select product_price from products where product_name = 'Moniteur'",
          "select product_price from products where product_name = 'Monitors'",
          "select product_price from products where product_name = 'Monitor' != 'Computer Monitor'",
          "select product_price from products where product_name = 'Monitor' != 'Monitor'",
          "select product_price from products where product_name = 'Monitor' or product_name = 'Computer Monitor'"
        ]
      ]
    },
    {
      "id": 243,
      "db_id": "customers_and_orders",
      "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
      "infer_predictions": [
        [
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) ,avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max( product_price ) from products",
          "select min ( product_price )  , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price )from products"
        ]
      ]
    },
    {
      "id": 244,
      "db_id": "customers_and_orders",
      "gold": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
      "infer_predictions": [
        [
          "select min ( product_price ) , avg ( product_price ) , max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) and max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) and max ( product_price ) from products",
          "select min ( product_price ) , avg ( product_price ) , max ( product_price )from products",
          "select min ( product_price ) ,avg ( product_price ) , max ( product_price ) from products"
        ]
      ]
    },
    {
      "id": 245,
      "db_id": "customers_and_orders",
      "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Cloths'",
          "select avg ( product_price ) from products where product_type_code = 'CLOTHES'",
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'Clothing'"
        ]
      ]
    },
    {
      "id": 246,
      "db_id": "customers_and_orders",
      "gold": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
      "infer_predictions": [
        [
          "select avg ( product_price ) from products where product_type_code = 'Clothes'",
          "select avg ( product_price ) from products where product_name = 'Clothes'",
          "select avg ( product_price ) from products where product_type_code = 'CLOTHES'"
        ]
      ]
    },
    {
      "id": 247,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'hardware'",
          "select count ( distinct product_type_code ) from products where product_type_code = 'Hardware'",
          "select count ( distinct product_type_code ) from products where product_type_code = 'hardware'",
          "select count ( * ) from products where product_type_code = 'HARDWARE'",
          "select count ( * ) from products where product_type_code = 'HARDWARE'",
          "select count ( distinct product_type_code ) from products where product_type_code = 'HARDWARE'",
          "select count ( * ) from products where product_type_code = 'HARDTOP'"
        ]
      ]
    },
    {
      "id": 248,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
      "infer_predictions": [
        [
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( distinct product_id ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'Hardware'",
          "select count ( * ) from products where product_type_code = 'Hardware' or product_type_code = 'Computer Hardware'",
          "select count ( * ) from products where product_type_code = 'Hardware' != 'Computer Hardware'"
        ]
      ]
    },
    {
      "id": 249,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name order by avg ( product_price ) desc limit 1 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = 0 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = 0.0 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = 0.00 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = 1.0 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = 2 )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_name having avg ( product_price ) = '0' )"
        ]
      ]
    },
    {
      "id": 250,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( Select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 251,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products group by product_type_code )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'Hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products where product_type_code = 'hardware' )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products ) != ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 252,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
      "infer_predictions": [
        [
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from Products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )",
          "select product_name from products where product_price > ( select avg ( product_price ) from products )"
        ]
      ]
    },
    {
      "id": 253,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_name from products where product_type_code = 'Clothes' order by product_price desc limit 1",
          "select product_Name from products where product_type_code = 'Clothes' order by product_price desc limit 1",
          "select product_name from products where product_type_code = 'Cotton' order by product_price desc limit 1"
        ]
      ]
    },
    {
      "id": 254,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_name from products where product_type_code = 'Clothes' order by product_price desc limit 1",
          "select product_name from products where product_price = ( select product_price from products where product_type_code = 'Clothes' order by product_price desc limit 1 )",
          "select product_name from products where product_name = 'Clothes' order by product_price desc limit 1"
        ]
      ]
    },
    {
      "id": 255,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_id , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_name , product_id from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_type_code , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_Id , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_price , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1"
        ]
      ]
    },
    {
      "id": 256,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_id , product_name from products where product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_id , product_name from products where product_price = 1 and product_type_code = 'Hardware' order by product_price asc limit 1",
          "select product_id , product_name from products where product_price = ( select product_price from products order by product_price asc limit 1 )",
          "select product_id , product_name from products where product_price = 10 order by product_price asc limit 1",
          "select product_id , product_name from products where product_price = 'Hardware' order by product_price asc limit 1",
          "select product_id , product_name from products where product_price = 100 order by product_price asc limit 1"
        ]
      ]
    },
    {
      "id": 257,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
      "infer_predictions": [
        [
          "select product_name from products order by product_price desc",
          "select distinct product_name from products order by product_price desc",
          "select product_name from products order by product_price desc",
          "select product_name from products order by product_price desc"
        ]
      ]
    },
    {
      "id": 258,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products ORDER BY product_price DESC",
      "infer_predictions": [
        [
          "select product_name from products order by product_price desc",
          "select distinct product_name from products order by product_price desc",
          "select product_name from products order by product_price desc",
          "select product_name from products order by product_price desc"
        ]
      ]
    },
    {
      "id": 259,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
      "infer_predictions": [
        [
          "select product_type_code from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_type_code from products where product_type_code = 'hardware' order by product_price asc",
          "select product_type_code from products where product_type_code = 'Hardware' order by product_price",
          "select product_type_code from products where product_type_code = 'HARDWARE' order by product_price asc",
          "select product_type_code from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_type_code from products where product_type_code = 'hardware' order by product_price"
        ]
      ]
    },
    {
      "id": 260,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
      "infer_predictions": [
        [
          "select product_name from products where product_price = 'Hardware' order by product_price asc",
          "select product_name from products where product_price = 1 order by product_price asc",
          "select product_name from products where product_price = ( select product_price from products order by product_price asc )",
          "select product_name from products where product_price = 100 order by product_price asc",
          "select product_name from products where product_type_code = 'Hardware' order by product_price asc",
          "select product_name from products where product_price = 'Hardware' order by product_price asc",
          "select product_name from products where product_price = ( select product_price from products order by product_price )",
          "select product_name from products where product_price = 1 order by product_price asc"
        ]
      ]
    },
    {
      "id": 261,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code  , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( *) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 262,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code  , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select count ( * ) , product_type_code from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code",
          "select product_type_code , count ( * ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 263,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select product_type_code , avg (+ product_price ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 264,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
      "infer_predictions": [
        [
          "select product_type_code , avg ( product_price ) from products group by product_type_code",
          "select avg ( product_price ) , product_type_code from products group by product_type_code",
          "select product_Type_code , avg ( product_price ) from products group by product_type_code"
        ]
      ]
    },
    {
      "id": 265,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= ( select product_type_code from products group by product_type_code having count ( * ) >= 2 )",
          "select product_type_code from products group by product_type_code having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 266,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code having count ( * ) >= 2",
          "select product_type_code from products group by product_type_code having count ( * ) >= ( select product_type_code from products group by product_type_code having count ( * ) >= 2 )"
        ]
      ]
    },
    {
      "id": 267,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) desc limit 1",
          "select product_type_code from products group by product_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 268,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 269,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers",
      "infer_predictions": [
        [
          "select count ( * ) from customers"
        ]
      ]
    },
    {
      "id": 270,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers",
      "infer_predictions": [
        [
          "select count ( * ) from customers",
          "select sum ( customer_number ) from customers",
          "select count ( * ) from customers",
          "select count ( * ) from customers",
          "select count ( * ) from customers"
        ]
      ]
    },
    {
      "id": 271,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id ,  customer_name FROM Customers",
      "infer_predictions": [
        [
          "select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers union select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers union select customer_Id , customer_name from customers",
          "select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers"
        ]
      ]
    },
    {
      "id": 272,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id ,  customer_name FROM Customers",
      "infer_predictions": [
        [
          "select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers",
          "select customer_id , customer_name from customers"
        ]
      ]
    },
    {
      "id": 273,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerry'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeremiah'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerome'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 274,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeromy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jeremiah'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerry'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerome'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jermy'",
          "select customer_address , customer_phone , customer_email from customers where customer_name = 'Jerory'"
        ]
      ]
    },
    {
      "id": 275,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
      "infer_predictions": [
        [
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code  , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_Code"
        ]
      ]
    },
    {
      "id": 276,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
      "infer_predictions": [
        [
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code  , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code",
          "select payment_method_code , count ( * ) from customers group by payment_method_code"
        ]
      ]
    },
    {
      "id": 277,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_Code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 278,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1",
          "select payment_method_code from customers group by payment_method_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 279,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
      "infer_predictions": [
        [
          "select customer_name from customers group by payment_method_code order by count ( * ) asc limit 1",
          "select customer_name from customers where payment_method_code = ( select payment_method_code from customers group by payment_method_code order by count ( * ) asc limit 1 )",
          "select customer_name from customers where payment_method_code = ( select min ( payment_method_code ) from customers group by payment_method_code order by count ( * ) asc limit 1 )",
          "select customer_name from customers group by payment_method_code order by count ( * ) asc limit 1",
          "select customer_name from customers where payment_method_code = ( select min ( payment_method_code ) from customers )",
          "select customer_name from customers where payment_method_code = ( select min ( payment_method_code ) from customers group by payment_method_code )"
        ]
      ]
    },
    {
      "id": 280,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
      "infer_predictions": [
        [
          "select customer_name from customers group by payment_method_code order by count ( * ) asc limit 1",
          "select customer_name from customers where payment_method_code = ( select payment_method_code from customers group by payment_method_code order by count ( * ) asc limit 1 )",
          "select customer_name from customers group by payment_method_code order by count ( * ) asc limit 1",
          "select customer_name from customers where payment_method_Code = ( select payment_method_code from customers group by payment_method_code order by count ( * ) asc limit 1 )",
          "select customer_name from customers where payment_method_code = ( select payment_method_code from customers group by payment_method_code order by count ( *) asc limit 1 )"
        ]
      ]
    },
    {
      "id": 281,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeremiah'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerome'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerry'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 282,
      "db_id": "customers_and_orders",
      "gold": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeremiah'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerome'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jerry'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jermy'",
          "select payment_method_code , customer_number from customers where customer_name = 'Jeromy'"
        ]
      ]
    },
    {
      "id": 283,
      "db_id": "customers_and_orders",
      "gold": "SELECT DISTINCT payment_method_code FROM Customers",
      "infer_predictions": [
        [
          "select distinct payment_method_code from customers"
        ]
      ]
    },
    {
      "id": 284,
      "db_id": "customers_and_orders",
      "gold": "SELECT DISTINCT payment_method_code FROM Customers",
      "infer_predictions": [
        [
          "select distinct payment_method_code from customers",
          "select distinct payment_method_code from customers",
          "select distinct payment_method_code from customers",
          "Select distinct payment_method_code from customers"
        ]
      ]
    },
    {
      "id": 285,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
      "infer_predictions": [
        [
          "select product_id , product_type_code from products order by product_name asc",
          "select product_type_code , product_id from products order by product_name asc",
          "select product_name , product_id from products order by product_name asc",
          "select product_Id , product_type_code from products order by product_name asc"
        ]
      ]
    },
    {
      "id": 286,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
      "infer_predictions": [
        [
          "select product_id , product_type_code from products order by product_name asc",
          "select product_type_code , product_id from products order by product_name asc",
          "select product_Id , product_type_code from products order by product_name asc",
          "select product_name , product_id from products order by product_name asc"
        ]
      ]
    },
    {
      "id": 287,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) asc limit 1",
          "select product_type_Code from products group by product_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 288,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select product_type_code from products group by product_type_code order by count ( * ) asc limit 1",
          "select product_type_code from products group by product_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 289,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( * ) from customer_orders"
        ]
      ]
    },
    {
      "id": 290,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( * ) from customer_orders",
          "select count ( distinct order_id ) from customer_orders",
          "select count ( * ) from customer_orders",
          "select count ( * ) from customer_orders",
          "select count ( * ) from customer_orders",
          "select count ( * ) from customer_orders"
        ]
      ]
    },
    {
      "id": 291,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jermy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jerome'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customers join customer_orders on customers.customer_id = customer_orders.customer_id where customers.customer_name = 'Jeremiah'"
        ]
      ]
    },
    {
      "id": 292,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
      "infer_predictions": [
        [
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select order_id , order_date , order_status_code from customer_orders where customer_id = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeromy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jermy'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jeremiah'",
          "select customer_orders.order_id , customer_orders.order_date , customer_orders.order_status_code from customer_orders join customers on customer_orders.customer_id = customers.customer_id where customers.customer_name = 'Jerry'"
        ]
      ]
    },
    {
      "id": 293,
      "db_id": "customers_and_orders",
      "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id"
        ]
      ]
    },
    {
      "id": 294,
      "db_id": "customers_and_orders",
      "gold": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
      "infer_predictions": [
        [
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customers.customer_id",
          "select customers.customer_name , customer_orders.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id",
          "select customers.customer_name , customers.customer_id , count ( * ) from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customers.customer_id"
        ]
      ]
    },
    {
      "id": 295,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 296,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customers join customer_orders on customers.customer_id = customer_orders.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_name , customers.customer_phone , customers.customer_email from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1",
          "select customer_orders.customer_id , customers.customer_phone , customers.customer_email from customer_orders join customers on customer_orders.customer_id = customers.customer_id group by customer_orders.customer_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 297,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
      "infer_predictions": [
        [
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code  , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_Code"
        ]
      ]
    },
    {
      "id": 298,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
      "infer_predictions": [
        [
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code  , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_Code , count ( * ) from customer_orders group by order_status_code",
          "select order_status_code , count ( * ) from customer_orders group by order_status_Code"
        ]
      ]
    },
    {
      "id": 299,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_Code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 300,
      "db_id": "customers_and_orders",
      "gold": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1",
          "select order_status_code from customer_orders group by order_status_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 301,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers except select count ( * ) from customers join customer_orders on customers.customer_id = customer_orders.customer_id",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_orders )",
          "select count ( * ) from customers where customer_Id not in ( select customer_id from customer_orders )"
        ]
      ]
    },
    {
      "id": 302,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
      "infer_predictions": [
        [
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_Id from customer_orders )",
          "select count ( * ) from customers where customer_id not in ( select customer_id from customer_orders )"
        ]
      ]
    },
    {
      "id": 303,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from order_items join products on order_items.product_id = products.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_Items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items. product_id"
        ]
      ]
    },
    {
      "id": 304,
      "db_id": "customers_and_orders",
      "gold": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
      "infer_predictions": [
        [
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products where product_id not in ( select product_id from order_items )",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from order_items join products on order_items.product_id = products.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_items on products.product_id = order_items.product_id",
          "select product_name from products except select products.product_name from products join order_Items on products.product_id = order_items.product_id"
        ]
      ]
    },
    {
      "id": 305,
      "db_id": "customers_and_orders",
      "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from ( select order_items.order_quantity from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor' )",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Moniteur'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitors'",
          "select count ( * ) from ( select * from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor' )",
          "select count ( * ) from products join order_items on products.product_id = order_items.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitored'"
        ]
      ]
    },
    {
      "id": 306,
      "db_id": "customers_and_orders",
      "gold": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitors'",
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'MONITOR'",
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Moniteur'",
          "select sum ( order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = 'Monitored'",
          "select sum ( order_items.order_quantity ) from order_items join products on order_items.product_id = products.product_id where products.product_name = \"Monitor\""
        ]
      ]
    },
    {
      "id": 307,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( * ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from products join order_items on products.product_id = order_items.product_id join customer_orders on customer_orders.order_id = order_items.order_id where products.product_name = 'Monitor'",
          "select count ( * ) from products join order_items on products.product_id = order_items.product_id join customer_orders on order_items.order_id = customer_orders.order_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( * ) from order_items join products on order_items.product_id = products.product_id join customer_orders on customer_orders.order_id = order_items.order_id where products.product_name = 'Monitor'",
          "select count ( * ) from customer_orders join order_items join products on customer_orders.order_id = order_items.order_id and order_items.product_id = products.product_id where products.product_name = 'Monitor'"
        ]
      ]
    },
    {
      "id": 308,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
      "infer_predictions": [
        [
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor Product'",
          "select count ( distinct customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor'",
          "select count ( distinct customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor Product'",
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'MONITOR'",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitors'",
          "select count ( distinct customer_orders.customer_id ) from customer_orders join order_items on customer_orders.order_id = order_items.order_id join products on order_items.product_id = products.product_id where products.product_name = 'Monitor Products'"
        ]
      ]
    },
    {
      "id": 309,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders order by count ( distinct customer_id ) asc limit 1",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders order by count ( distinct customer_id )"
        ]
      ]
    },
    {
      "id": 310,
      "db_id": "customers_and_orders",
      "gold": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
      "infer_predictions": [
        [
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders",
          "select count ( distinct customer_id ) from customer_orders"
        ]
      ]
    },
    {
      "id": 311,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
      "infer_predictions": [
        [
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers except select customer_Id from customer_orders",
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers except select customer_id from customer_orders"
        ]
      ]
    },
    {
      "id": 312,
      "db_id": "customers_and_orders",
      "gold": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
      "infer_predictions": [
        [
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers except select customer_id from customer_orders",
          "select customer_id from customers except select customer_Id from customer_orders"
        ]
      ]
    },
    {
      "id": 313,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
      "infer_predictions": [
        [
          "select customer_orders.order_date , customer_orders.order_id from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 or order_items.product_id > 3",
          "select customer_orders.order_date , customer_orders.order_id from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 or order_items.product_id = 3"
        ]
      ]
    },
    {
      "id": 314,
      "db_id": "customers_and_orders",
      "gold": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
      "infer_predictions": [
        [
          "select customer_orders.order_id , customer_orders.order_date from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 or order_items.product_id > 3",
          "select customer_orders.order_id , customer_orders.order_date from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 or order_items.product_id = 3",
          "select customer_orders.order_id , customer_orders.order_date from customer_orders join order_items on customer_orders.order_id = order_items.order_id where order_items.order_quantity > 6 and order_items.product_id > 3"
        ]
      ]
    },
    {
      "id": 315,
      "db_id": "region_building",
      "gold": "SELECT count(*) FROM building",
      "infer_predictions": [
        [
          "select count ( * ) from building",
          "select count ( * ) from building",
          "select count ( * ) from building",
          "select count ( * ) from building"
        ]
      ]
    },
    {
      "id": 316,
      "db_id": "region_building",
      "gold": "SELECT count(*) FROM building",
      "infer_predictions": [
        [
          "select count ( * ) from building",
          "select count ( * ) from building",
          "select count ( * ) from building"
        ]
      ]
    },
    {
      "id": 317,
      "db_id": "region_building",
      "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
      "infer_predictions": [
        [
          "select name from building order by number_of_stories asc",
          "Select name from building order by number_of_stories asc"
        ]
      ]
    },
    {
      "id": 318,
      "db_id": "region_building",
      "gold": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
      "infer_predictions": [
        [
          "select name from building order by number_of_stories asc"
        ]
      ]
    },
    {
      "id": 319,
      "db_id": "region_building",
      "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
      "infer_predictions": [
        [
          "select address from building order by completed_year desc",
          "select address from building order by completed_year desc",
          "select address from building order by completed_year desc"
        ]
      ]
    },
    {
      "id": 320,
      "db_id": "region_building",
      "gold": "SELECT Address FROM building ORDER BY Completed_Year DESC",
      "infer_predictions": [
        [
          "select address from building order by completed_year desc",
          "select address from building order by completed_year desc"
        ]
      ]
    },
    {
      "id": 321,
      "db_id": "region_building",
      "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
      "infer_predictions": [
        [
          "select max ( number_of_stories ) from building where completed_year != 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980 != '1980'",
          "select max ( number_of_stories ) from building where completed_year > 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980"
        ]
      ]
    },
    {
      "id": 322,
      "db_id": "region_building",
      "gold": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
      "infer_predictions": [
        [
          "select max ( number_of_stories ) from building where completed_year != 1980",
          "select max ( number_of_stories ) from building where completed_year > 1980",
          "select max ( number_of_stories ) from building where completed_year != 1980"
        ]
      ]
    },
    {
      "id": 323,
      "db_id": "region_building",
      "gold": "SELECT avg(Population) FROM region",
      "infer_predictions": [
        [
          "select avg ( population ) from region",
          "select population , avg ( population ) from region group by population",
          "select avg ( population ) from region",
          "select avg ( population ) from region",
          "select avg ( population  ) from region",
          "select avg ( population ) from region"
        ]
      ]
    },
    {
      "id": 324,
      "db_id": "region_building",
      "gold": "SELECT avg(Population) FROM region",
      "infer_predictions": [
        [
          "select avg ( population ) from region",
          "select population , avg ( population ) from region group by population",
          "select 'avg ( _ ) from _'",
          "select avg ( population ) from region",
          "select avg ( population ) from region"
        ]
      ]
    },
    {
      "id": 325,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from region order by name asc",
          "Select name from region order by name asc",
          "select name from region order by name asc"
        ]
      ]
    },
    {
      "id": 326,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from region order by name asc",
          "Select name from region order by name asc",
          "select name from region order by name asc"
        ]
      ]
    },
    {
      "id": 327,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region WHERE Area  >  10000",
      "infer_predictions": [
        [
          "select capital from region where area > 10000",
          "select capital from region where area > 100000",
          "select capital from region where area > 10000 != 10000",
          "select capital from region where area > 100000",
          "select capital from region where area > 10000 != 0"
        ]
      ]
    },
    {
      "id": 328,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region WHERE Area  >  10000",
      "infer_predictions": [
        [
          "select capital from region where area > 10000",
          "select capital from region where area > 100000",
          "select capital from region where area > 10000 != 10000",
          "select capital from region where area > 10000 != 0",
          "select capital from region where area > 100000"
        ]
      ]
    },
    {
      "id": 329,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
      "infer_predictions": [
        [
          "select capital from region order by population desc limit 1",
          "select capital from region order by population desc limit 1"
        ]
      ]
    },
    {
      "id": 330,
      "db_id": "region_building",
      "gold": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
      "infer_predictions": [
        [
          "select capital from region order by population desc limit 1",
          "select capital from region order by population desc limit 1",
          "select capital from region order by population desc limit 1"
        ]
      ]
    },
    {
      "id": 331,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
      "infer_predictions": [
        [
          "select name from region order by area desc limit 5",
          "select name from region order by area desc limit 5",
          "select name from region order by area desc limit 5",
          "select name from region order by area desc limit 5 != 5"
        ]
      ]
    },
    {
      "id": 332,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
      "infer_predictions": [
        [
          "select name from region order by area desc limit 5",
          "select name from region order by area desc limit 5",
          "select name from region order by area desc limit 5 != 0",
          "select name from region order by area desc limit 5 != 5"
        ]
      ]
    },
    {
      "id": 333,
      "db_id": "region_building",
      "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from region join building on region.region_id = building.region_id"
        ]
      ]
    },
    {
      "id": 334,
      "db_id": "region_building",
      "gold": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.name , region.name from region join building on region.region_id = building.region_id",
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select region.name , building.name from building join region on building.region_id = region.region_id"
        ]
      ]
    },
    {
      "id": 335,
      "db_id": "region_building",
      "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select region.name from building join region on building.region_id = region.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 336,
      "db_id": "region_building",
      "gold": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select region.name from building join region on building.region_id = region.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by building.region_id having count ( * ) > 1",
          "select region.name from building join region on building.region_id = region.region_id group by region.region_id having count ( * ) > 1",
          "select region.name from region join building on region.region_id = building.region_id group by region.region_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 337,
      "db_id": "region_building",
      "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select region.capital from region join building on region.region_id = building.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from region join building on region.region_id = building.region_id group by region.region_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 338,
      "db_id": "region_building",
      "gold": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select region.capital from region join building on region.region_id = building.region_id group by building.region_id order by count ( * ) desc limit 1",
          "select region.capital from region join building on region.region_id = building.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by region.region_id order by count ( * ) desc limit 1",
          "select region.capital from building join region on building.region_id = region.region_id group by building.region_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 339,
      "db_id": "region_building",
      "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.address , region.capital from building join region on building.region_id = region.region_id",
          "select building.address , region.capital from region join building on region.region_id = building.region_id"
        ]
      ]
    },
    {
      "id": 340,
      "db_id": "region_building",
      "gold": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
      "infer_predictions": [
        [
          "select building.address , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from region join building on region.region_id = building.region_id",
          "select building.name , region.name from building join region on building.region_id = region.region_id",
          "select building.address , region.name from building join region on building.region_id = region.region_id where building.number_of_stories >= 2",
          "select building.address , region.name from building join region on building.region_id = region.region_id != building.region_id"
        ]
      ]
    },
    {
      "id": 341,
      "db_id": "region_building",
      "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
      "infer_predictions": [
        [
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzese'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzese'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzi'"
        ]
      ]
    },
    {
      "id": 342,
      "db_id": "region_building",
      "gold": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
      "infer_predictions": [
        [
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzo'",
          "select building.number_of_stories from building join region on building.region_id = region.region_id where region.name = 'Abruzzese'",
          "select building.number_of_stories from region join building on region.region_id = building.region_id where region.name = 'Abruzzese'"
        ]
      ]
    },
    {
      "id": 343,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
      "infer_predictions": [
        [
          "select completed_year , count ( * ) from building group by completed_year",
          "select completed_year , count ( * ) from building group by completed_year"
        ]
      ]
    },
    {
      "id": 344,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
      "infer_predictions": [
        [
          "select completed_year , count ( * ) from building group by completed_year",
          "select completed_year , count ( * ) from building group by completed_year order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 345,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 346,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1",
          "select completed_year from building group by completed_year order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 347,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
      "infer_predictions": [
        [
          "select name from region where region_id not in ( select region_id from building )"
        ]
      ]
    },
    {
      "id": 348,
      "db_id": "region_building",
      "gold": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
      "infer_predictions": [
        [
          "select name from region where region_id not in ( select region_id from building )",
          "select name from region except select region.name from region join building on region.region_id = building.region_id",
          "select name from region except select region.name from building join region on building.region_id = region.region_id"
        ]
      ]
    },
    {
      "id": 349,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
      "infer_predictions": [
        [
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories <= 15"
        ]
      ]
    },
    {
      "id": 350,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
      "infer_predictions": [
        [
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories < 15",
          "select completed_year from building where number_of_stories > 20 intersect select completed_year from building where number_of_stories <= 15"
        ]
      ]
    },
    {
      "id": 351,
      "db_id": "region_building",
      "gold": "SELECT DISTINCT Address FROM building",
      "infer_predictions": [
        [
          "select distinct address from building"
        ]
      ]
    },
    {
      "id": 352,
      "db_id": "region_building",
      "gold": "SELECT DISTINCT Address FROM building",
      "infer_predictions": [
        [
          "select distinct address from building"
        ]
      ]
    },
    {
      "id": 353,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
      "infer_predictions": [
        [
          "select completed_year from building order by number_of_stories desc"
        ]
      ]
    },
    {
      "id": 354,
      "db_id": "region_building",
      "gold": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
      "infer_predictions": [
        [
          "select completed_year from building order by number_of_stories desc"
        ]
      ]
    },
    {
      "id": 355,
      "db_id": "government_shift",
      "gold": "select channel_details from channels order by channel_details",
      "infer_predictions": [
        [
          "select channel_details from channels order by channel_details asc"
        ]
      ]
    },
    {
      "id": 356,
      "db_id": "government_shift",
      "gold": "select channel_details from channels order by channel_details",
      "infer_predictions": [
        [
          "select channel_details from channels order by channel_details asc",
          "select distinct channel_details from channels order by channel_details asc",
          "select channel_Details from channels order by channel_details asc"
        ]
      ]
    },
    {
      "id": 357,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM services",
      "infer_predictions": [
        [
          "select count ( * ) from services",
          "select count ( * ) from services",
          "select count ( * ) from services",
          "select count ( * ) from services"
        ]
      ]
    },
    {
      "id": 358,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM services",
      "infer_predictions": [
        [
          "select count ( * ) from services",
          "select count ( * ) from services",
          "select count ( * ) from services -- select count ( * ) from services"
        ]
      ]
    },
    {
      "id": 359,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 360,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select analytical_layer_type_code from analytical_layer group by analytical_layer_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 361,
      "db_id": "government_shift",
      "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
      "infer_predictions": [
        [
          "select services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select services.service_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select distinct services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select * from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 362,
      "db_id": "government_shift",
      "gold": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
      "infer_predictions": [
        [
          "select services.service_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customers on customers_and_services.customer_id = customers.customer_id where customers.customer_details = 'Hardy Kutch'",
          "select services.service_details from customers_and_services join customers on customers_and_services.customer_id = customers.customer_id join services on customers_and_services.service_id = services.service_id where customers.customer_details = 'Hardy Kutch'"
        ]
      ]
    },
    {
      "id": 363,
      "db_id": "government_shift",
      "gold": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
      "infer_predictions": [
        [
          "select services.service_details from customer_interactions join services on customer_interactions.service_id = services.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customers_and_services.service_id = customer_interactions.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join customer_interactions on customers_and_services.service_id = customer_interactions.service_id join services on customers_and_services.service_id = services.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customers_and_services.service_id = services.service_id group by customer_interactions.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by services.service_details having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by customers_and_services.service_id having count ( * ) > 3"
        ]
      ]
    },
    {
      "id": 364,
      "db_id": "government_shift",
      "gold": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
      "infer_predictions": [
        [
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by customers_and_services.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by services.service_details having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by services.service_id having count ( * ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by services.service_details having count ( customers_and_services.customers_and_services_id ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by services.service_id having count ( customers_and_services.customers_and_services_id ) > 3",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id group by customers_and_services.service_id having count ( customers_and_services.customers_and_services_id ) > 3"
        ]
      ]
    },
    {
      "id": 365,
      "db_id": "government_shift",
      "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 366,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers_and_services.customer_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 367,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 368,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) desc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 369,
      "db_id": "government_shift",
      "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
      "infer_predictions": [
        [
          "select customer_details from customers except select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id",
          "select customer_details from customers except select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id",
          "select customer_details from customers except select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join customer_interactions on customers.customer_id = customer_interactions.customer_id",
          "select customer_details from customers except select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id"
        ]
      ]
    },
    {
      "id": 370,
      "db_id": "government_shift",
      "gold": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
      "infer_predictions": [
        [
          "select customer_details from customers except select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id",
          "select customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id"
        ]
      ]
    },
    {
      "id": 371,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id group by customers.customer_id order by count ( * ) asc limit 1",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join services on customer_interactions.service_id = services.service_id group by customers.customer_id order by count ( * ) asc limit 1",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id group by customers.customer_details order by count ( * ) asc limit 1",
          "select customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id join customer_interactions on customers.customer_id = customer_interactions.customer_id group by customers.customer_id order by count ( * ) asc limit 1",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id group by customer_interactions.customer_id order by count ( * ) asc limit 1",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.service_id = ( select min ( service_id ) from customer_interactions )",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id group by customers.customer_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 372,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
      "infer_predictions": [
        [
          "select distinct customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_id order by count ( * ) asc limit 1",
          "select distinct customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id where customers_and_services.service_id = ( select service_id from customers_and_services group by service_id order by count ( * ) asc limit 1 )",
          "select distinct customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers.customer_details order by count ( * ) asc limit 1",
          "select distinct customers.customer_details from customers join customers_and_services on customers.customer_id = customers_and_services.customer_id group by customers_and_services.customer_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 373,
      "db_id": "government_shift",
      "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
      "infer_predictions": [
        [
          "select count ( distinct customers_and_services_details ) from customers_and_services",
          "select count ( distinct customers_and_services_details) from customers_and_services"
        ]
      ]
    },
    {
      "id": 374,
      "db_id": "government_shift",
      "gold": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
      "infer_predictions": [
        [
          "select count ( * ) from customers_and_services"
        ]
      ]
    },
    {
      "id": 375,
      "db_id": "government_shift",
      "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select distinct customer_details from customers where customer_details like '%Kutch%'"
        ]
      ]
    },
    {
      "id": 376,
      "db_id": "government_shift",
      "gold": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
      "infer_predictions": [
        [
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like '%Kutch%'",
          "select customer_details from customers where customer_details like '%Kutz%'",
          "select customer_details from customers where customer_details like '%Kutch%' or customer_details like '%Kutch%'"
        ]
      ]
    },
    {
      "id": 377,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
      "infer_predictions": [
        [
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Hardy Kutch' or customer_interactions.customer_id = 'Good'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Hardy Kutch' union select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id where customer_interactions.customer_id = 'Good'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Hardy Kutch' union select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customers_and_services.customer_id = customer_interactions.customer_id where customer_interactions.customer_interaction_id = 'Good'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Hardy Kutch' union select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Good'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id join customer_interactions on customer_interactions.service_id = services.service_id where customer_interactions.customer_id = 'Hardy Kutch' or customer_interactions.service_id = 'good'"
        ]
      ]
    },
    {
      "id": 378,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 379,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 380,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 381,
      "db_id": "government_shift",
      "gold": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
      "infer_predictions": [
        [
          "select services.service_details from customer_interactions join channels on customer_interactions.channel_id = channels.channel_id join services on customer_interactions.service_id = services.service_id where customer_interactions.services_and_channels_details = '' and channels.channel_details = ''",
          "select services.service_details from channels join customer_interactions on channels.channel_id = customer_interactions.channel_id join services on customer_interactions.service_id = services.service_id where customer_interactions.services_and_channels_details = '15 ij'",
          "select services.service_details from customer_interactions join channels on customer_interactions.channel_id = channels.channel_id join services on customer_interactions.service_id = services.service_id where customer_interactions.services_and_channels_details = '15 ij'",
          "select services.service_details from channels join customer_interactions on channels.channel_id = customer_interactions.channel_id join services on customer_interactions.service_id = services.service_id where customer_interactions.services_and_channels_details like '%15 ij%'",
          "select services.service_details from channels join customer_interactions on channels.channel_id = customer_interactions.channel_id join services on customer_interactions.service_id = services.service_id where customer_interactions.services_and_channels_details > ''"
        ]
      ]
    },
    {
      "id": 382,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
      "infer_predictions": [
        [
          "select services.service_details from services join customer_interactions on services.service_id = customer_interactions.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '15 ij'",
          "select services.service_details from customer_interactions join services on customer_interactions.service_id = services.service_id join channels on customer_interactions.channel_id = channels.channel_id where channels.channel_details = '15 ij'",
          "select services.service_details from customer_interactions join channels on customer_interactions.channel_id = channels.channel_id join services on customer_interactions.service_id = services.service_id where channels.channel_details = '15 ij'",
          "select services.service_details from channels join customer_interactions on channels.channel_id = customer_interactions.channel_id join services on customer_interactions.service_id = services.service_id where channels.channel_details = '15 ij'"
        ]
      ]
    },
    {
      "id": 383,
      "db_id": "government_shift",
      "gold": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = '' and customer_interactions.services_and_channels_details = ''",
          "select distinct customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Sticky' and customer_interactions.services_and_channels_details = 'Bad'",
          "select customers.customer_details from customer_interactions join customers on customer_interactions.customer_id = customers.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'"
        ]
      ]
    },
    {
      "id": 384,
      "db_id": "government_shift",
      "gold": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' intersect select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.services_and_channels_details = 'bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' and customer_interactions.services_and_channels_details = 'Bad'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.status_code = 'Stuck' intersect select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id where customer_interactions.services_and_channels_details = 'Bad'"
        ]
      ]
    },
    {
      "id": 385,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
      "infer_predictions": [
        [
          "select count ( * ) from integration_platform where integration_platform_id = 1",
          "select count ( * ) from integration_platform where integration_platform_id = '1'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success'",
          "select count ( * ) from integration_platform where integration_platform_id = 1 and customer_interaction_id = '1'",
          "select count ( * ) from integration_platform where integration_platform_id = 1 and customer_interaction_id = 1",
          "select count ( * ) from integration_platform where integration_platform_id = 2",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success%'"
        ]
      ]
    },
    {
      "id": 386,
      "db_id": "government_shift",
      "gold": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
      "infer_predictions": [
        [
          "select count ( * ) from integration_platform where integration_platform_details = 'Success'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success%'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Succeed'",
          "select count ( * ) from integration_platform where integration_platform_details = 'Success'"
        ]
      ]
    },
    {
      "id": 387,
      "db_id": "government_shift",
      "gold": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Failed'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Fail'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'FAIL'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'failed'",
          "select customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Failed'",
          "select customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Fail'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'fail'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Stopped Working'"
        ]
      ]
    },
    {
      "id": 388,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
      "infer_predictions": [
        [
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Fail'",
          "select distinct customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Fail'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Failed'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'FAIL'",
          "select customers.customer_details from customers join customer_interactions on customers.customer_id = customer_interactions.customer_id join integration_platform on customer_interactions.customer_interaction_id = integration_platform.customer_interaction_id where integration_platform.integration_platform_details = 'Failing'"
        ]
      ]
    },
    {
      "id": 389,
      "db_id": "government_shift",
      "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
      "infer_predictions": [
        [
          "select service_details from services except select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id",
          "select service_details from services except select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id",
          "select service_details from services except select services.service_details from customers_and_services join customers on customers_and_services.customer_id = customers.customer_id join services on customers_and_services.service_id = services.service_id",
          "select service_details from services where service_id not in ( select service_id from customers_and_services )",
          "select service_details from services where service_id not in ( select service_id from customer_interactions )"
        ]
      ]
    },
    {
      "id": 390,
      "db_id": "government_shift",
      "gold": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
      "infer_predictions": [
        [
          "select service_details from services where service_id not in ( select service_id from customers_and_services )",
          "select service_details from services except select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id",
          "select service_details from services except select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id",
          "select service_details from services where service_id not in ( select service_id from customer_interactions )",
          "select service_details from services where service_id not in ( select distinct service_id from customers_and_services )"
        ]
      ]
    },
    {
      "id": 391,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
      "infer_predictions": [
        [
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code",
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code"
        ]
      ]
    },
    {
      "id": 392,
      "db_id": "government_shift",
      "gold": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
      "infer_predictions": [
        [
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer_type_code",
          "select analytical_layer_type_code , count ( * ) from analytical_layer group by analytical_layer.analytical_layer_type_code"
        ]
      ]
    },
    {
      "id": 393,
      "db_id": "government_shift",
      "gold": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
      "infer_predictions": [
        [
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'Unsatisfied'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'",
          "select distinct services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'"
        ]
      ]
    },
    {
      "id": 394,
      "db_id": "government_shift",
      "gold": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
      "infer_predictions": [
        [
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'Unsatisfied'",
          "select services.service_details from services join customers_and_services on services.service_id = customers_and_services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'",
          "select services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfactory'",
          "select distinct services.service_details from customers_and_services join services on customers_and_services.service_id = services.service_id where customers_and_services.customers_and_services_details = 'unsatisfied'"
        ]
      ]
    },
    {
      "id": 395,
      "db_id": "vehicle_rent",
      "gold": "SELECT count(*) FROM vehicles",
      "infer_predictions": [
        [
          "select count ( * ) from vehicles"
        ]
      ]
    },
    {
      "id": 396,
      "db_id": "vehicle_rent",
      "gold": "SELECT count(*) FROM vehicles",
      "infer_predictions": [
        [
          "select count ( * ) from vehicles",
          "select count ( * ) from vehicles",
          "select count ( * ) from vehicles",
          "select count ( * ) from vehicles"
        ]
      ]
    },
    {
      "id": 397,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
      "infer_predictions": [
        [
          "select name from vehicles order by model_year desc"
        ]
      ]
    },
    {
      "id": 398,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles ORDER BY model_year DESC",
      "infer_predictions": [
        [
          "select name from vehicles order by model_year desc"
        ]
      ]
    },
    {
      "id": 399,
      "db_id": "vehicle_rent",
      "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
      "infer_predictions": [
        [
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles",
          "Select distinct type_of_powertrain from vehicles"
        ]
      ]
    },
    {
      "id": 400,
      "db_id": "vehicle_rent",
      "gold": "SELECT DISTINCT type_of_powertrain FROM vehicles",
      "infer_predictions": [
        [
          "select distinct type_of_powertrain from vehicles",
          "select distinct ( type_of_powertrain ) from vehicles",
          "select distinct type_of_powertrain from vehicles",
          "select distinct type_of_powertrain from vehicles"
        ]
      ]
    },
    {
      "id": 401,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
      "infer_predictions": [
        [
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 or model_year <= 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 14",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 or model_year < 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year =2014"
        ]
      ]
    },
    {
      "id": 402,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
      "infer_predictions": [
        [
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = '2013' or model_year = '2014'",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 or model_year <= 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 OR model_year = 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year >= 2013 and model_year <= 2014",
          "select name , type_of_powertrain , annual_fuel_cost from vehicles where model_year = 2013 or model_year =2014"
        ]
      ]
    },
    {
      "id": 403,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013",
          "select type_of_powertrain from vehicles where model_year >= 2014 intersect select type_of_powertrain from vehicles where model_year <= 2013",
          "select type_of_powertrain from vehicles where model_year >= 2014 intersect select type_of_powertrain from vehicles where model_year < 2013",
          "select type_of_powertrain from vehicles where model_year > 2014 intersect select type_of_powertrain from vehicles where model_year < 2013",
          "select type_of_powertrain from vehicles where model_year > 2014 intersect select type_of_powertrain from vehicles where model_year <= 2013",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 13",
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 2014"
        ]
      ]
    },
    {
      "id": 404,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 2014",
          "select type_of_powertrain from vehicles where model_year = 2013 intersect select type_of_powertrain from vehicles where model_year = 14",
          "select type_of_powertrain from vehicles where model_year = 2014 intersect select type_of_powertrain from vehicles where model_year = 2013",
          "select type_of_powertrain from vehicles where model_year = 13 intersect select type_of_powertrain from vehicles where model_year = 2014",
          "select type_of_powertrain from vehicles where model_year >= 2013 intersect select type_of_powertrain from vehicles where model_year <= 2014"
        ]
      ]
    },
    {
      "id": 405,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
      "infer_predictions": [
        [
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain  , count ( * ) from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 406,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
      "infer_predictions": [
        [
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain  , count ( * ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , count ( * ) from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 407,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles group by type_of_powertrain order by count ( * ) desc limit 1",
          "select type_of_powertrain from vehicles group by type_of_powertrain order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 408,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type_of_powertrain from vehicles group by type_of_powertrain order by count ( * ) desc limit 1",
          "select type_of_powertrain from vehicles group by type_of_powertrain order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 409,
      "db_id": "vehicle_rent",
      "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
      "infer_predictions": [
        [
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) and avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) and avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost )from vehicles"
        ]
      ]
    },
    {
      "id": 410,
      "db_id": "vehicle_rent",
      "gold": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
      "infer_predictions": [
        [
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) and avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) and avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles",
          "select min ( annual_fuel_cost ) , max ( annual_fuel_cost ) , avg ( annual_fuel_cost ) from vehicles"
        ]
      ]
    },
    {
      "id": 411,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
      "infer_predictions": [
        [
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )"
        ]
      ]
    },
    {
      "id": 412,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
      "infer_predictions": [
        [
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate <= ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )",
          "select name , model_year from vehicles where city_fuel_economy_rate < ( select min ( city_fuel_economy_rate ) from vehicles )"
        ]
      ]
    },
    {
      "id": 413,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain  , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 414,
      "db_id": "vehicle_rent",
      "gold": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2",
          "select type_of_powertrain , avg ( annual_fuel_cost ) from vehicles group by type_of_powertrain having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 415,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age ,  membership_credit FROM customers",
      "infer_predictions": [
        [
          "select name , age , membership_credit from customers",
          "select name , age , membership_credit from customers",
          "select name ,age , membership_credit from customers",
          "select name , age , membership_credit from customers"
        ]
      ]
    },
    {
      "id": 416,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age ,  membership_credit FROM customers",
      "infer_predictions": [
        [
          "select name , age , membership_credit from customers",
          "select name , membership_credit , age from customers",
          "select name ,age , membership_credit from customers",
          "select name , age , membership_credit from customers",
          "select name , age , membership_credit from customers"
        ]
      ]
    },
    {
      "id": 417,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name , age from customers order by membership_credit desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1 != 1",
          "select name , age from customers order by membership_credit desc limit 1 != 0",
          "select name , age from customers order by membership_credit desc limit 1 != 100",
          "select name , age from customers order by membership_credit desc limit 1"
        ]
      ]
    },
    {
      "id": 418,
      "db_id": "vehicle_rent",
      "gold": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name , age from customers order by membership_credit desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1 != 0",
          "select name , age from customers order by membership_credit desc limit 1 != 1",
          "select name , age from customers order by membership_credit desc limit 1",
          "select name , age from customers order by membership_credit desc limit 1"
        ]
      ]
    },
    {
      "id": 419,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
      "infer_predictions": [
        [
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select membership_credit , avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )"
        ]
      ]
    },
    {
      "id": 420,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
      "infer_predictions": [
        [
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select membership_credit , avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )",
          "select avg ( age ) from customers where membership_credit > ( select avg ( membership_credit ) from customers )"
        ]
      ]
    },
    {
      "id": 421,
      "db_id": "vehicle_rent",
      "gold": "SELECT * FROM discount",
      "infer_predictions": [
        [
          "select * from discount",
          "select name , membership_credit from discount"
        ]
      ]
    },
    {
      "id": 422,
      "db_id": "vehicle_rent",
      "gold": "SELECT * FROM discount",
      "infer_predictions": [
        [
          "select * from discount",
          "select name , membership_credit from discount",
          "select name from discount"
        ]
      ]
    },
    {
      "id": 423,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
      "infer_predictions": [
        [
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id"
        ]
      ]
    },
    {
      "id": 424,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
      "infer_predictions": [
        [
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id",
          "select vehicles.name , sum ( renting_history.total_hours ) from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id",
          "select vehicles.name , sum ( renting_history.total_hours ) from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id"
        ]
      ]
    },
    {
      "id": 425,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
      "infer_predictions": [
        [
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where Id not in ( select vehicles_id from renting_history )"
        ]
      ]
    },
    {
      "id": 426,
      "db_id": "vehicle_rent",
      "gold": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
      "infer_predictions": [
        [
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where id not in ( select vehicles_id from renting_history )",
          "select name from vehicles where Id not in ( select vehicles_id from renting_history )"
        ]
      ]
    },
    {
      "id": 427,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by customers.id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by customers.id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 428,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from customers join renting_history on customers.id = renting_history.customer_id group by customers.id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by renting_history.customer_id having count ( * ) >= 2",
          "select customers.name from renting_history join customers on renting_history.customer_id = customers.id group by customers.id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 429,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 430,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id order by count ( * ) desc limit 1",
          "select vehicles.name , vehicles.model_year from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 431,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
      "infer_predictions": [
        [
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by renting_history.total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by total_hours desc"
        ]
      ]
    },
    {
      "id": 432,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
      "infer_predictions": [
        [
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by renting_history.total_hours desc",
          "select vehicles.name from vehicles join renting_history on vehicles.id = renting_history.vehicles_id order by total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by renting_history.total_hours desc",
          "select vehicles.name from renting_history join vehicles on renting_history.vehicles_id = vehicles.id order by total_hours desc"
        ]
      ]
    },
    {
      "id": 433,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 434,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on discount.id = renting_history.discount_id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1",
          "select discount.name from renting_history join discount on renting_history.discount_id = discount.id group by discount.id order by count ( * ) desc limit 1",
          "select discount.name from discount join renting_history on renting_history.discount_id = discount.id group by renting_history.discount_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 435,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
      "infer_predictions": [
        [
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id where renting_history.total_hours > 30"
        ]
      ]
    },
    {
      "id": 436,
      "db_id": "vehicle_rent",
      "gold": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
      "infer_predictions": [
        [
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id group by vehicles.id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from vehicles join renting_history on vehicles.id = renting_history.vehicles_id where renting_history.total_hours > 30",
          "select vehicles.name , vehicles.type_of_powertrain from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by vehicles.id having sum ( renting_history.total_hours ) > 30",
          "select vehicles.name , vehicles.type_of_powertrain from renting_history join vehicles on renting_history.vehicles_id = vehicles.id group by renting_history.vehicles_id having sum ( renting_history.total_hours ) > 30"
        ]
      ]
    },
    {
      "id": 437,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
      "infer_predictions": [
        [
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 438,
      "db_id": "vehicle_rent",
      "gold": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
      "infer_predictions": [
        [
          "select avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) , type_of_powertrain from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , min ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , highway_fuel_economy_rate from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , max ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain",
          "select type_of_powertrain , avg ( city_fuel_economy_rate ) , avg ( highway_fuel_economy_rate ) from vehicles group by type_of_powertrain"
        ]
      ]
    },
    {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
      "infer_predictions": [
        [
          "select avg ( amount_of_loan ) from student_loans",
          "select amount_of_loan , avg ( amount_of_loan ) from student_loans group by amount_of_loan",
          "select 'avg ( _ ) from _'",
          "select avg ( amount_of_loan ) from student_loans",
          "select avg ( amount_of_loan ) from student_loans"
        ]
      ]
    },
    {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT avg(amount_of_loan) FROM Student_Loans",
      "infer_predictions": [
        [
          "select avg ( amount_of_loan ) from student_loans",
          "select amount_of_loan , avg ( amount_of_loan ) from student_loans group by amount_of_loan",
          "select 'avg ( _ ) from _'",
          "select avg ( amount_of_loan ) from student_loans",
          "select avg ( amount_of_loan ) from student_loans"
        ]
      ]
    },
    {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join detention on students.student_id = detention.student_id group by detention.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) < 2"
        ]
      ]
    },
    {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join detention on students.student_id = detention.student_id group by detention.student_id having count ( * ) < 2",
          "select students.bio_data , students.student_id from classes join students on classes.student_id = students.student_id join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) >= 2 union select students.bio_data , students.student_id from students join detention on students.student_id = detention.student_id group by students.student_id having count ( * ) < 2"
        ]
      ]
    },
    {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
      "infer_predictions": [
        [
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'"
        ]
      ]
    },
    {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
      "infer_predictions": [
        [
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id where classes.class_details like '%net%'",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%data%' except select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id where classes.class_details like '%net%'"
        ]
      ]
    },
    {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
      "infer_predictions": [
        [
          "select bio_data from students except select students.bio_data from students join detention on students.student_id = detention.student_id join student_loans on students.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join detention on students.student_id = detention.student_id join student_loans on student_loans.student_id = detention.student_id"
        ]
      ]
    },
    {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
      "infer_predictions": [
        [
          "select bio_data from students except select students.bio_data from students join detention on students.student_id = detention.student_id join student_loans on students.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join detention on students.student_id = detention.student_id join student_loans on student_loans.student_id = detention.student_id",
          "select bio_data from students where student_id not in ( select student_id from detention ) or student_id not in ( select student_id from student_loans )",
          "select bio_data from students except select students.bio_data from students join detention on students.student_id = detention.student_id union select bio_data from students join student_loans on students.student_id = student_loans.student_id"
        ]
      ]
    },
    {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by achievements.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join students on student_loans.student_id = students.student_id join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
      "infer_predictions": [
        [
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by achievements.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2",
          "select student_loans.amount_of_loan , student_loans.date_of_loan from achievements join student_loans on achievements.student_id = student_loans.student_id group by student_loans.student_id having count ( * ) >= 2",
          "select student_loans.date_of_loan , student_loans.amount_of_loan from student_loans join achievements on student_loans.student_id = achievements.student_id group by student_loans.student_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , teachers.teacher_id from teachers join classes on teachers.teacher_id = classes.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , teachers.teacher_id from teachers join classes on teachers.teacher_id = classes.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , classes.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , teachers.teacher_id from teachers join classes on teachers.teacher_id = classes.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_details , classes.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
      "infer_predictions": [
        [
          "select distinct ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ( ref_detention_type.detention_type_description ) from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from DETENTION join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code"
        ]
      ]
    },
    {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
      "infer_predictions": [
        [
          "select distinct ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on ref_detention_type.detention_type_code = detention.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from ref_detention_type join detention on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ( ref_detention_type.detention_type_description ) from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code",
          "select distinct ref_detention_type.detention_type_description from DETENTION join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code"
        ]
      ]
    },
    {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
      "infer_predictions": [
        [
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select ref_address_types.address_type_description , students.student_details from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select ref_address_types.address_type_description , students.student_details from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code join students on students_addresses.student_id = students.student_id",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code join students on students_addresses.student_id = students.student_id",
          "select ref_address_types.address_type_description , students.student_details from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code"
        ]
      ]
    },
    {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
      "infer_predictions": [
        [
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select ref_address_types.address_type_description , students.student_details from students join students_addresses on students.student_id = students_addresses.student_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code",
          "select students.student_details , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code join students on students_addresses.student_id = students.student_id",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code and students.student_id = students_addresses.student_id",
          "select students.student_details , ref_address_types.address_type_description from students join students_addresses on students.student_id = students_addresses.student_id join addresses on students_addresses.address_id = addresses.address_id join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code where students.student_details = ref_address_types.address_type_description"
        ]
      ]
    },
    {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id"
        ]
      ]
    },
    {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select addresses.address_details , students.bio_data from addresses join students_addresses on addresses.address_id = students_addresses.address_id join students on students_addresses.student_id = students.student_id"
        ]
      ]
    },
    {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id",
          "select bio_data , date_of_transcript from students join transcripts on students.student_id = transcripts.student_id"
        ]
      ]
    },
    {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id",
          "select students.bio_data , transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id",
          "select bio_data , date_of_transcript from students join transcripts on students.student_id = transcripts.student_id"
        ]
      ]
    },
    {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select count ( * ) , behaviour_monitoring.behaviour_monitoring_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.behaviour_monitoring_details order by count ( * ) desc limit 1",
          "select count ( * ) , behaviour_monitoring.behaviour_monitoring_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select behaviour_monitoring_details , count ( * ) from behaviour_monitoring group by behaviour_monitoring_details order by count ( * ) desc limit 1",
          "select behaviour_monitoring_details , count ( * ) , behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_details from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
      "infer_predictions": [
        [
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id where behaviour_monitoring.behaviour_monitoring_details = ( select behaviour_monitoring.behaviour_monitoring_details from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.behaviour_monitoring_details order by count ( * ) desc limit 1 )",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id where behaviour_monitoring.behaviour_monitoring_details = ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring.behaviour_monitoring_details order by count ( * ) desc limit 1 )",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by students.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
      "infer_predictions": [
        [
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from students join behaviour_monitoring on students.student_id = behaviour_monitoring.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select students.bio_data from behaviour_monitoring join students on behaviour_monitoring.student_id = students.student_id group by behaviour_monitoring.student_id order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id",
          "select students.bio_data , student_events.event_date from student_events join students on student_events.student_id = students.student_id",
          "select distinct students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id",
          "select student_events.event_date , students.bio_data from student_events join students on student_events.student_id = students.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id"
        ]
      ]
    },
    {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id",
          "select students.bio_data , student_events.event_date from student_events join students on student_events.student_id = students.student_id",
          "select students.bio_data , student_events.event_date from students join student_events on students.student_id = student_events.student_id"
        ]
      ]
    },
    {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select count ( * ) , ref_event_types.event_type_description , student_events.event_type_code from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select count ( * ) , ref_event_types.event_type_description , student_events.event_type_code from ref_event_types join student_events on ref_event_types.event_type_code = student_events.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select student_events.event_type_code , count ( * ) from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select student_events.event_type_code , count ( * ) from ref_event_types join student_events on ref_event_types.event_type_code = student_events.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select student_events.event_type_code , count ( * ) from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select student_events.event_type_code , count ( * ) from ref_event_types join student_events on ref_event_types.event_type_code = student_events.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select ref_event_types.event_type_code , ref_event_types.event_type_description , count ( * ) from ref_event_types join student_events on ref_event_types.event_type_code = student_events.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select event_type_code , count ( * ) from student_events group by event_type_code order by count ( * ) desc limit 1",
          "select ref_event_types.event_type_code , ref_event_types.event_type_description , count ( * ) from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1",
          "select student_events.event_type_code , ref_event_types.event_type_description , count ( * ) from student_events join ref_event_types on student_events.event_type_code = ref_event_types.event_type_code group by student_events.event_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
      "infer_predictions": [
        [
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from ref_achievement_type join achievements on ref_achievement_type.achievement_type_code = achievements.achievement_type_code",
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from ref_achievement_type join achievements on achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from achievements join ref_achievement_type on achievements.achievement_type_code = ref_achievement_type.achievement_type_code"
        ]
      ]
    },
    {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
      "infer_predictions": [
        [
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from ref_achievement_type join achievements on ref_achievement_type.achievement_type_code = achievements.achievement_type_code",
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from ref_achievement_type join achievements on achievements.achievement_type_code = ref_achievement_type.achievement_type_code",
          "select achievements.achievement_details , ref_achievement_type.achievement_type_description from achievements join ref_achievement_type on achievements.achievement_type_code = ref_achievement_type.achievement_type_code"
        ]
      ]
    },
    {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
      "infer_predictions": [
        [
          "select count ( * ) from classes where student_id not in ( select student_id from achievements )",
          "select count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id where students.student_id not in ( select student_id from achievements )",
          "select count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id join students on students.student_id = classes.student_id where students.student_id not in ( select student_id from achievements )"
        ]
      ]
    },
    {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
      "infer_predictions": [
        [
          "select count ( * ) from classes where teacher_id not in ( select teacher_id from achievements )",
          "select count ( distinct teacher_id ) from classes where student_id not in ( select student_id from achievements )",
          "select count ( * ) from teachers where teacher_id not in ( select teacher_id from achievements )",
          "select count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id where student_id not in ( select student_id from achievements )",
          "select count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id where students.student_id not in ( select student_id from achievements )"
        ]
      ]
    },
    {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
      "infer_predictions": [
        [
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts"
        ]
      ]
    },
    {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
      "infer_predictions": [
        [
          "select date_of_transcript , transcript_details from transcripts",
          "select date_of_transcript , transcript_details from transcripts"
        ]
      ]
    },
    {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
      "infer_predictions": [
        [
          "select achievement_type_code , achievement_details , date_achievement from achievements",
          "select achievement_type_code , achievement_details , date_achievement from achievements"
        ]
      ]
    },
    {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
      "infer_predictions": [
        [
          "select achievement_type_code , achievement_details , date_achievement from achievements",
          "select achievement_type_code , achievement_details , date_achievement from achievements"
        ]
      ]
    },
    {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start , datetime_detention_end from detention",
          "select datetime_detention_start , datetime_detention_end from Detention"
        ]
      ]
    },
    {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start , datetime_detention_end from detention",
          "select datetime_detention_start , datetime_detention_end from Detention",
          "select datetime_detention_start , datetime_detention_start from detention"
        ]
      ]
    },
    {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
      "infer_predictions": [
        [
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where student_details like '%Suite%' != '%Suite%'",
          "select bio_data from students where student_details like 'Suite%'"
        ]
      ]
    },
    {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
      "infer_predictions": [
        [
          "select bio_data from students where student_details like '%Suite%'",
          "select bio_data from students where student_details like '%Suite%' != '%Suite%'"
        ]
      ]
    },
    {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_details having count ( * ) = 1",
          "select teachers.teacher_details , classes.student_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id having count ( * ) = 1",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_details having count ( * ) = 1",
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id having count ( * ) = 1",
          "select teachers.teacher_details from teachers join classes on teachers.teacher_id = classes.teacher_id group by teachers.teacher_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
      "infer_predictions": [
        [
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_details having count ( * ) = 1",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_details having count ( * ) = 2",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_id having count ( * ) = 1",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_details",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id",
          "select teachers.teacher_details , students.student_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id group by teachers.teacher_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select count ( * ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select count ( * ) , teachers.teacher_id from teachers join classes on teachers.teacher_id = classes.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select count ( distinct class_id ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( distinct class_id ) desc limit 1",
          "select count ( distinct class_id ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select count ( distinct classes.class_id ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( distinct classes.class_id ) desc limit 1",
          "select teachers.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select count ( distinct classes.class_id ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select max ( classes.class_id ) , teachers.teacher_id from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teachers.teacher_id , count ( * ) from teachers join classes on teachers.teacher_id = classes.teacher_id group by teachers.teacher_id order by count ( * ) desc limit 1",
          "select teacher_id , count ( * ) from classes group by teacher_id order by count ( * ) desc limit 1",
          "select classes.teacher_id , count ( * ) from classes join teachers on classes.teacher_id = teachers.teacher_id group by classes.teacher_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select count ( * ) , student_id from classes group by student_id order by count ( * ) desc limit 1",
          "select count ( * ) , students.student_id from classes join students on classes.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select count ( * ) , students.student_id from students join classes on students.student_id = classes.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select count ( * ) , students.student_id from classes join students on classes.student_id = students.student_id group by classes.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select student_id , count ( * ) from classes group by student_id order by count ( * ) desc limit 1",
          "select students.student_id , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select students.student_id , count ( * ) from students join classes on students.student_id = classes.student_id group by students.student_id order by count ( * ) desc limit 1",
          "select students.student_id , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id order by count ( * ) desc limit 1",
          "select classes.student_id , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "infer_predictions": [
        [
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select classes.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
      "infer_predictions": [
        [
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by students.student_id having count ( * ) = 2",
          "select classes.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from classes join students on classes.student_id = students.student_id group by classes.student_id having count ( * ) = 2",
          "select student_id , student_details from students group by student_id having count ( * ) = 2",
          "select students.student_id , students.student_details from students join classes on students.student_id = classes.student_id group by students.student_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1",
          "select ref_detention_type.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1",
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select detention.detention_type_code , ref_detention_type.detention_type_description from detention join ref_detention_type on detention.detention_type_code = ref_detention_type.detention_type_code group by detention.detention_type_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select bio_data , student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
      "infer_predictions": [
        [
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select bio_data , student_details from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )",
          "select students.bio_data , students.student_details from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan > ( select avg ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select ( date_of_loan ) from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select max ( date_of_loan ) from student_loans",
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from student_loans order by date_of_loan asc limit 1"
        ]
      ]
    },
    {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select ( date_of_loan ) from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from student_loans order by date_of_loan asc limit 1",
          "select date_of_loan from student_loans order by date_of_loan asc limit 1"
        ]
      ]
    },
    {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by student_loans.amount_of_loan asc limit 1",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )",
          "select students.bio_data from students join student_loans on students.student_id = student_loans.student_id where student_loans.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )",
          "select students.bio_data from students join student_loans on students.student_id = student_loans.student_id order by student_loans.amount_of_loan asc limit 1",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by amount_of_loan asc limit 1",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id where student_loans.amount_of_loan = ( select min ( amount_of_loan ) from student_loans )"
        ]
      ]
    },
    {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
      "infer_predictions": [
        [
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by student_loans.amount_of_loan asc limit 1",
          "select students.bio_data from students join student_loans on students.student_id = student_loans.student_id order by student_loans.amount_of_loan asc limit 1",
          "select students.bio_data from student_loans join students on student_loans.student_id = students.student_id order by amount_of_loan asc limit 1"
        ]
      ]
    },
    {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
      "infer_predictions": [
        [
          "select transcripts.date_of_transcript from student_loans join transcripts on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id join student_loans on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id join student_loans on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id join student_loans on transcripts.student_id = student_loans.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from student_loans join transcripts on student_loans.student_id = transcripts.student_id order by amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from student_loans join transcripts on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1"
        ]
      ]
    },
    {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
      "infer_predictions": [
        [
          "select transcripts.date_of_transcript from student_loans join transcripts on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from student_loans join transcripts on student_loans.student_id = transcripts.student_id order by amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from transcripts join students on transcripts.student_id = students.student_id join student_loans on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from students join transcripts on students.student_id = transcripts.student_id join student_loans on student_loans.student_id = transcripts.student_id order by student_loans.amount_of_loan desc limit 1",
          "select transcripts.date_of_transcript from transcripts join student_loans on transcripts.student_id = student_loans.student_id order by amount_of_loan desc limit 1"
        ]
      ]
    },
    {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
      "infer_predictions": [
        [
          "select teachers.teacher_details from classes join teachers on classes.teacher_id = teachers.teacher_id join students on classes.student_id = students.student_id join transcripts on transcripts.student_id = students.student_id order by transcripts.date_of_transcript asc limit 1"
        ]
      ]
    },
    {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "gold": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id",
      "infer_predictions": [
        [
          "select student_id , sum ( amount_of_loan ) from student_loans group by student_id",
          "select student_loan_id , sum ( amount_of_loan ) from student_loans group by student_loan_id",
          "select student_loans.student_id , sum ( student_loans.amount_of_loan ) from student_loans join students on student_loans.student_id = students.student_id group by student_loans.student_id",
          "select student_loan_id , sum ( amount_of_loan ) from student_loans group by student_id",
          "select student_loans.student_id , sum ( amount_of_loan ) from student_loans join students on student_loans.student_id = students.student_id group by student_loans.student_id"
        ]
      ]
    },
    {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
      "infer_predictions": [
        [
          "select student_id , sum ( amount_of_loan ) from student_loans group by student_id",
          "select student_loans.student_id , sum ( student_loans.amount_of_loan ) from student_loans join students on student_loans.student_id = students.student_id group by student_loans.student_id",
          "select student_loans.student_id , sum ( amount_of_loan ) from student_loans join students on student_loans.student_id = students.student_id group by student_loans.student_id",
          "select student_loans.student_id , sum ( student_loans.amount_of_loan ) from student_loans join students on student_loans.student_id = students.student_id group by student_loans.student_loan_id"
        ]
      ]
    },
    {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
      "infer_predictions": [
        [
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( * ) from students join classes on students.student_id = classes.student_id group by students.student_id",
          "select classes.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id",
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id",
          "select classes.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id"
        ]
      ]
    },
    {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
      "infer_predictions": [
        [
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( * ) from students join classes on students.student_id = classes.student_id group by students.student_id",
          "select classes.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id",
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by classes.student_id",
          "select classes.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id",
          "select students.student_id , students.bio_data , count ( * ) from classes join students on classes.student_id = students.student_id group by students.student_id"
        ]
      ]
    },
    {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) FROM Detention",
      "infer_predictions": [
        [
          "select count ( distinct student_id ) from detention",
          "select count ( * ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention",
          "select count ( distinct student_id ) from detention"
        ]
      ]
    },
    {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT count(DISTINCT student_id) FROM Detention",
      "infer_predictions": [
        [
          "select count ( distinct student_id ) from detention"
        ]
      ]
    },
    {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by ref_address_types.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on students_addresses.address_type_code = ref_address_types.address_type_code group by ref_address_types.address_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by ref_address_types.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from students_addresses join ref_address_types on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on ref_address_types.address_type_code = students_addresses.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1",
          "select ref_address_types.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on students_addresses.address_type_code = ref_address_types.address_type_code group by ref_address_types.address_type_code order by count ( * ) desc limit 1",
          "select students_addresses.address_type_code , ref_address_types.address_type_description from ref_address_types join students_addresses on students_addresses.address_type_code = ref_address_types.address_type_code group by students_addresses.address_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_loans.student_id = students.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on students.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_loans.student_id = student_events.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_events.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_loans.student_id = students.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on students.student_id = student_loans.student_id"
        ]
      ]
    },
    {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
      "infer_predictions": [
        [
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_events.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_loans.student_id = student_events.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_events.event_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from students join student_events on students.student_id = student_events.student_id join student_loans on student_loans.student_id = students.student_id",
          "select students.bio_data from students join student_events on students.student_id = student_events.student_id except select students.bio_data from students join student_loans on students.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_events.student_id = student_loans.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_loans.student_id = students.student_id",
          "select bio_data from students except select students.bio_data from student_events join students on student_events.student_id = students.student_id join student_loans on student_events.event_id = student_loans.student_id"
        ]
      ]
    },
    {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
      "infer_predictions": [
        [
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.address_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.address_id = transcripts.student_id group by transcripts.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.student_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.student_id = transcripts.student_id group by transcripts.student_id having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
      "infer_predictions": [
        [
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.address_id = transcripts.student_id group by students_addresses.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.address_id = transcripts.student_id group by transcripts.student_id having count ( * ) = 2",
          "select students_addresses.date_from , students_addresses.date_to from students_addresses join transcripts on students_addresses.address_id = transcripts.student_id group by 2 having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start from detention",
          "select datetime_detention_start from detention group by datetime_detention_start having sum ( datetime_detention_start ) >= 1",
          "select datetime_detention_start from detention group by datetime_detention_start order by datetime_detention_start asc limit 1",
          "select datetime_detention_start from detention group by datetime_detention_start having count ( * ) >= 1",
          "select datetime_detention_start from detention group by datetime_detention_start order by count ( * ) desc limit 1",
          "select datetime_detention_start from detention order by datetime_detention_start asc limit 1",
          "select datetime_detention_start from detention group by datetime_detention_start having sum ( datetime_detention_start ) > 0",
          "select datetime_detention_start from detention group by datetime_detention_start having sum ( datetime_detention_start ) > 100"
        ]
      ]
    },
    {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "gold": "SELECT datetime_detention_start FROM Detention",
      "infer_predictions": [
        [
          "select datetime_detention_start from detention",
          "select distinct datetime_detention_start from detention",
          "select datetime_detention_start from detention",
          "select datetime_detention_start from Detention"
        ]
      ]
    },
    {
      "id": 515,
      "db_id": "book_1",
      "gold": "SELECT name FROM Author",
      "infer_predictions": [
        [
          "select name from author"
        ]
      ]
    },
    {
      "id": 516,
      "db_id": "book_1",
      "gold": "SELECT name FROM Author",
      "infer_predictions": [
        [
          "select name from author",
          "select name from author"
        ]
      ]
    },
    {
      "id": 517,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client",
      "infer_predictions": [
        [
          "select name , address from client",
          "select name , address from Client",
          "select name , address from client"
        ]
      ]
    },
    {
      "id": 518,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client",
      "infer_predictions": [
        [
          "select name , address from client"
        ]
      ]
    },
    {
      "id": 519,
      "db_id": "book_1",
      "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
      "infer_predictions": [
        [
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book"
        ]
      ]
    },
    {
      "id": 520,
      "db_id": "book_1",
      "gold": "SELECT title ,  isbn ,  SalePrice FROM Book",
      "infer_predictions": [
        [
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book",
          "select title , isbn , saleprice from book"
        ]
      ]
    },
    {
      "id": 521,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book",
      "infer_predictions": [
        [
          "select count ( * ) from book",
          "select count ( * ) from book -- select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book--- select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 522,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book",
      "infer_predictions": [
        [
          "select count ( * ) from book",
          "select count ( * ) from book -- select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book",
          "select count ( * ) from book -- select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 523,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author",
          "select count ( distinct idauthor ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 524,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author",
          "select count ( distinct idauthor ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 525,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Client",
      "infer_predictions": [
        [
          "select count ( * ) from client",
          "select count ( distinct idclient ) from client",
          "select count ( * ) from client",
          "select count ( * ) from client",
          "select count ( * ) from client"
        ]
      ]
    },
    {
      "id": 526,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Client",
      "infer_predictions": [
        [
          "select count ( * ) from client"
        ]
      ]
    },
    {
      "id": 527,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client ORDER BY name",
      "infer_predictions": [
        [
          "select name , address from client order by name asc",
          "Select name , address from client order by name asc"
        ]
      ]
    },
    {
      "id": 528,
      "db_id": "book_1",
      "gold": "SELECT name ,  address FROM Client ORDER BY name",
      "infer_predictions": [
        [
          "select name , address from client order by name asc",
          "Select name , address from client order by name asc",
          "select name , address from client order by name asc"
        ]
      ]
    },
    {
      "id": 529,
      "db_id": "book_1",
      "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
      "infer_predictions": [
        [
          "select book.title , author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor",
          "select book.title , author.name from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author"
        ]
      ]
    },
    {
      "id": 530,
      "db_id": "book_1",
      "gold": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
      "infer_predictions": [
        [
          "select book.title , author_book.author from book join author_book on book.isbn = author_book.isbn",
          "select book.title , book.author from book join author_book on book.isbn = author_book.isbn",
          "select book.title , author_book.author from author_book join book on author_book.isbn = book.isbn",
          "select book.title , book.author from author_book join book on author_book.isbn = book.isbn"
        ]
      ]
    },
    {
      "id": 531,
      "db_id": "book_1",
      "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select idorder , idclient from orders",
          "select idorder , client.name from orders join client on orders.idclient = client.idclient",
          "select idorder , name from client join orders on orders.idclient = client.idclient",
          "select idorder , name from client join orders on client.idclient = orders.idclient"
        ]
      ]
    },
    {
      "id": 532,
      "db_id": "book_1",
      "gold": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select orders.idorder , client.name from orders join client on orders.idclient = client.idclient",
          "select idorder , client.name from orders join client on orders.idclient = client.idclient",
          "select idorder , name from client join orders on client.idclient = orders.idclient",
          "select idorder , client.name from client join orders on client.idclient = orders.idclient",
          "select idorder , name from client join orders on orders.idclient = client.idclient"
        ]
      ]
    },
    {
      "id": 533,
      "db_id": "book_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.name",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.idauthor",
          "select author.name , count ( * ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( * ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor group by author.name",
          "select author.name , count ( * ) from author_book join author on author.idauthor = author_book.author group by author.idauthor",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.name"
        ]
      ]
    },
    {
      "id": 534,
      "db_id": "book_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.name",
          "select author.name , count ( * ) from author_book join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.idauthor",
          "select author.name , count ( * ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor group by author.name",
          "select count ( * ) , author.name from author_book join author on author_book.author = author.idauthor group by author.name",
          "select author.name , count ( * ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor group by author.idauthor",
          "select author.name , count ( * ) from author join author_book on author.idauthor = author_book.author group by author.name"
        ]
      ]
    },
    {
      "id": 535,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , count ( * ) from books_order group by isbn",
          "select ISBN , count ( * ) from books_order group by ISBN",
          "select isbn , count ( * ) from books_order group by isbn",
          "select isbn , count ( * ) from books_order group by ISbn",
          "select isbn , count ( *) from books_order group by isbn",
          "select isbn , count ( * )from books_order group by isbn"
        ]
      ]
    },
    {
      "id": 536,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , count ( * ) from books_order group by isbn",
          "select book.isbn , count ( * ) from books_order join book on books_order.isbn = book.isbn group by book.isbn",
          "select book.isbn , count ( * ) from books_order join book on books_order.isbn = book.isbn group by books_order.isbn",
          "select count ( * ) , isbn from books_order group by isbn",
          "select ISBN , count ( * ) from books_order group by ISBN",
          "select ISBN , count ( * ) from books_order group by ISbn",
          "select isbn , count ( * ) from books_order group by isbn",
          "select isbn , count ( * ) from books_order group by isbn",
          "select isbn , count ( * ) from books_order group by ISbn"
        ]
      ]
    },
    {
      "id": 537,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , sum ( amount ) from books_order group by isbn"
        ]
      ]
    },
    {
      "id": 538,
      "db_id": "book_1",
      "gold": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
      "infer_predictions": [
        [
          "select isbn , sum ( amount ) from books_order group by isbn",
          "select sum ( amount ) , isbn from books_order group by isbn",
          "select ISBN , sum ( amount ) from books_order group by ISBN",
          "select ISBN , sum ( amount ) from books_order group by ISbn"
        ]
      ]
    },
    {
      "id": 539,
      "db_id": "book_1",
      "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by book.isbn order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title , books_order.isbn from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder group by books_order.idorder order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by book.isbn order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 540,
      "db_id": "book_1",
      "gold": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by book.isbn order by count ( * ) desc limit 1",
          "select book.title , books_order.isbn from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by book.title order by count ( * ) desc limit 1",
          "select book.title from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by count ( * ) desc limit 1",
          "select book.title from book join books_order on book.isbn = books_order.isbn group by book.isbn order by count ( * ) desc limit 1",
          "select title from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 541,
      "db_id": "book_1",
      "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by book.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 542,
      "db_id": "book_1",
      "gold": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by book.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by books_order.isbn order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.idorder order by sum ( books_order.amount ) desc limit 1",
          "select book.title , book.purchaseprice from books_order join book on books_order.isbn = book.isbn group by books_order.isbn order by sum ( amount ) desc limit 1",
          "select book.title , book.purchaseprice from book join books_order on book.isbn = books_order.isbn group by book.isbn order by sum ( books_order.amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 543,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select book.title from books_order join book on books_order.isbn = book.isbn",
          "select book.title from book join books_order on book.isbn = books_order.isbn",
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder and books_order.isbn = book.isbn",
          "select book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder"
        ]
      ]
    },
    {
      "id": 544,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select distinct book.title from books_order join book on books_order.isbn = book.isbn",
          "select distinct book.title from book join books_order on book.isbn = books_order.isbn",
          "select distinct title from book join books_order on book.isbn = books_order.isbn",
          "select distinct book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn",
          "select distinct book.title from books_order join book on books_order.isbn = book.isbn join orders on books_order.idorder = orders.idorder",
          "select distinct book.title from book join books_order on book.isbn = books_order.isbn != books_order.isbn"
        ]
      ]
    },
    {
      "id": 545,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select client.name from orders join client on orders.idclient = client.idclient group by client.idclient having count ( * ) >= 1",
          "select client.name from orders join client on orders.idclient = client.idclient group by client.idclient having count ( distinct orders.idorder ) >= 1",
          "select client.name from orders join client on orders.idclient = client.idclient group by client.idclient having count ( * ) >= 1",
          "select client.name from orders join client on orders.idclient = client.idclient group by orders.idclient having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 546,
      "db_id": "book_1",
      "gold": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select distinct client.name from orders join client on orders.idclient = client.idclient",
          "select distinct client.name from client join orders on client.idclient = orders.idclient",
          "select distinct name from client join orders on client.idclient = orders.idclient"
        ]
      ]
    },
    {
      "id": 547,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.name",
          "select client.name , count ( * ) from client join orders on client.idclient = orders.idclient group by client.idclient"
        ]
      ]
    },
    {
      "id": 548,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select count ( * ) , client.name from orders join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , count ( * ) from orders join client on orders.idclient = client.idclient group by client.idclient",
          "select count ( * ) , client.name from orders join client on orders.idclient = client.idclient group by client.name",
          "select count ( * ) , client.name from client join orders on client.idclient = orders.idclient group by client.idclient"
        ]
      ]
    },
    {
      "id": 549,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from orders join client on orders.idclient = client.idclient group by client.idclient order by count ( * ) desc limit 1",
          "select client.name from client join orders on client.idclient = orders.idclient group by client.idclient order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 550,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from client join orders on client.idclient = orders.idclient group by client.idclient order by count ( * ) desc limit 1",
          "select client.name from orders join client on orders.idclient = client.idclient group by client.idclient order by count ( * ) desc limit 1",
          "select client.name from client join orders on client.idclient = orders.idclient group by orders.idclient order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 551,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from client join orders on client.idclient = orders.idclient join books_order on orders.idorder = books_order.idorder group by client.idclient",
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.name",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.name",
          "select client.name , sum ( books_order.amount ) from client join orders join books_order on orders.idorder = books_order.idorder group by client.name"
        ]
      ]
    },
    {
      "id": 552,
      "db_id": "book_1",
      "gold": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
      "infer_predictions": [
        [
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient",
          "select client.name , sum ( books_order.amount ) from client join orders on client.idclient = orders.idclient join books_order on orders.idorder = books_order.idorder group by client.idclient",
          "select client.name , sum ( books_order.amount ) from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.name",
          "select client.name , sum ( books_order.amount ) from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.name"
        ]
      ]
    },
    {
      "id": 553,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from client join orders on client.idclient = orders.idclient join books_order on orders.idorder = books_order.idorder group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from client join orders join books_order on client.idclient = orders.idclient and orders.idorder = books_order.idorder group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from client join orders on client.idclient = orders.idclient join books_order on orders.idorder = books_order.idorder group by client.name order by sum ( books_order.amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 554,
      "db_id": "book_1",
      "gold": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from client join orders on client.idclient = orders.idclient join books_order on orders.idorder = books_order.idorder group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from client join orders join books_order on client.idclient = orders.idclient and books_order.idorder = orders.idorder group by client.idclient order by sum ( books_order.amount ) desc limit 1",
          "select client.name from client join orders join books_order on orders.idorder = books_order.idorder group by client.idclient order by sum ( books_order.amount ) desc limit 1"
        ]
      ]
    },
    {
      "id": 555,
      "db_id": "book_1",
      "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book except select book.title from book join books_order on book.isbn = books_order.isbn",
          "select title from book where isbn not in ( select ISBN from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )"
        ]
      ]
    },
    {
      "id": 556,
      "db_id": "book_1",
      "gold": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
      "infer_predictions": [
        [
          "select title from book where isbn not in ( select isbn from books_order )",
          "select title from book except select book.title from book join books_order on book.isbn = books_order.isbn",
          "select title from book where isbn not in ( select ISBN from books_order )",
          "select title from book where isbn not in ( select isbn from books_order )"
        ]
      ]
    },
    {
      "id": 557,
      "db_id": "book_1",
      "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select name from client except select client.name from orders join client on orders.idclient = client.idclient",
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client except select client.name from client join orders on client.idclient = orders.idclient",
          "select name from client where idclient not in ( select Idclient from orders )"
        ]
      ]
    },
    {
      "id": 558,
      "db_id": "book_1",
      "gold": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
      "infer_predictions": [
        [
          "select name from client except select client.name from orders join client on orders.idclient = client.idclient",
          "select name from client where idclient not in ( select idclient from orders )",
          "select name from client except select client.name from client join orders on client.idclient = orders.idclient",
          "select name from client except select client.name from orders join client on orders.idclient = client.idclient"
        ]
      ]
    },
    {
      "id": 559,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) , min ( saleprice ) from book",
          "select max ( saleprice ) , min ( saleprice ) from book",
          "select max ( saleprice ) , min( saleprice ) from book",
          "select max ( saleprice ) , min ( saleprice ) from book"
        ]
      ]
    },
    {
      "id": 560,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) , min ( saleprice ) from book",
          "select max ( saleprice ) , min ( saleprice ) from book",
          "select max ( saleprice ) , min ( saleprice ) , title from book",
          "select max ( saleprice ) , min( saleprice ) from book",
          "select max ( saleprice ) , min ( saleprice ) from book"
        ]
      ]
    },
    {
      "id": 561,
      "db_id": "book_1",
      "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select purchaseprice , avg ( saleprice ) from book group by purchaseprice"
        ]
      ]
    },
    {
      "id": 562,
      "db_id": "book_1",
      "gold": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
      "infer_predictions": [
        [
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select avg ( purchaseprice ) , avg ( saleprice ) from book",
          "select purchaseprice , avg ( saleprice ) from book group by purchaseprice"
        ]
      ]
    },
    {
      "id": 563,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
      "infer_predictions": [
        [
          "select max ( saleprice ) from book",
          "select max ( saleprice - purchaseprice ) from book",
          "select max ( saleprice - purchaseprice ) from book",
          "select max ( saleprice - purchaseprice ) from book"
        ]
      ]
    },
    {
      "id": 564,
      "db_id": "book_1",
      "gold": "SELECT max(saleprice - purchaseprice) FROM Book",
      "infer_predictions": [
        [
          "select saleprice from book order by purchaseprice desc limit 1",
          "select saleprice - purchaseprice from book group by saleprice - purchaseprice order by sum ( saleprice ) desc limit 1",
          "select saleprice from book group by purchaseprice order by sum ( saleprice ) desc limit 1",
          "select saleprice - purchaseprice from book where saleprice - purchaseprice = ( select max ( saleprice ) from book )",
          "select saleprice - purchaseprice from book group by saleprice - purchaseprice order by sum ( saleprice - purchaseprice ) desc limit 1",
          "select saleprice from book where purchaseprice = ( select max ( purchaseprice ) from book )",
          "select saleprice from book where purchaseprice > ( select max ( purchaseprice ) from book )",
          "select saleprice from book group by saleprice order by sum ( purchaseprice ) desc limit 1"
        ]
      ]
    },
    {
      "id": 565,
      "db_id": "book_1",
      "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
      "infer_predictions": [
        [
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book group by title order by avg ( saleprice ) desc limit 1 )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book group by saleprice order by avg ( saleprice ) desc limit 1 )",
          "select distinct title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 566,
      "db_id": "book_1",
      "gold": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
      "infer_predictions": [
        [
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( Select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )",
          "select title from book where saleprice > ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 567,
      "db_id": "book_1",
      "gold": "select title from book order by saleprice asc limit 1",
      "infer_predictions": [
        [
          "select title from book order by saleprice asc limit 1",
          "select title from book order by saleprice asc limit 1",
          "select title from book order by saleprice asc limit 1"
        ]
      ]
    },
    {
      "id": 568,
      "db_id": "book_1",
      "gold": "select title from book order by saleprice asc limit 1",
      "infer_predictions": [
        [
          "select title from book where saleprice = ( select min ( saleprice ) from book )",
          "select title from book where saleprice = ( select min ( saleprice ) from book )",
          "select title from book where saleprice <= ( select min ( saleprice ) from book )",
          "select title from book where saleprice = ( select min ( saleprice ) from book )",
          "select title from book where saleprice = ( select min ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 569,
      "db_id": "book_1",
      "gold": "select title from book order by purchaseprice  desc limit 1",
      "infer_predictions": [
        [
          "select title from book order by purchaseprice desc limit 1",
          "select title from book order by purchaseprice desc limit 10",
          "select title from book order by purchaseprice desc limit 1",
          "select title from book order by purchaseprice desc limit 1",
          "select title from book order by purchaseprice desc limit 4",
          "select title from book order by purchaseprice desc limit 3",
          "select title from book order by purchaseprice desc limit 2"
        ]
      ]
    },
    {
      "id": 570,
      "db_id": "book_1",
      "gold": "select title from book order by purchaseprice  desc limit 1",
      "infer_predictions": [
        [
          "select title from book order by purchaseprice desc limit 1",
          "select title from book group by purchaseprice order by sum ( purchaseprice ) desc limit 1",
          "select title from book where purchaseprice = ( select max ( purchaseprice ) from book )",
          "select title from book rank order by purchaseprice desc limit 1",
          "select title from book group by title order by sum ( purchaseprice ) desc limit 1"
        ]
      ]
    },
    {
      "id": 571,
      "db_id": "book_1",
      "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
      "infer_predictions": [
        [
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn where author_book.author = 'George Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn where author_book.author = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 572,
      "db_id": "book_1",
      "gold": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
      "infer_predictions": [
        [
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( saleprice ) from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'Georgia Orwell'",
          "select avg ( book.saleprice ) from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell'"
        ]
      ]
    },
    {
      "id": 573,
      "db_id": "book_1",
      "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
      "infer_predictions": [
        [
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.title = 'Plato'"
        ]
      ]
    },
    {
      "id": 574,
      "db_id": "book_1",
      "gold": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
      "infer_predictions": [
        [
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn where author_book.author = 'Plato'",
          "select book.saleprice from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'Plato'",
          "select book.saleprice from author_book join book on author_book.isbn = book.isbn where author_book.author = 'Plato'"
        ]
      ]
    },
    {
      "id": 575,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
      "infer_predictions": [
        [
          "select title from book where author = 'George Orwell' order by saleprice asc limit 1",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name = 'George Orwell' order by book.saleprice asc limit 1",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.author = 'George Orwell' order by book.saleprice asc limit 1",
          "select title from book where author = 'George Orwell' order by book.saleprice asc limit 1",
          "select book.title from book join author_book on book.isbn = author_book.isbn where author_book.author = 'George Orwell' order by book.saleprice asc limit 1",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor order by book.saleprice asc limit 1"
        ]
      ]
    },
    {
      "id": 576,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
      "infer_predictions": [
        [
          "select title from book where author = 'George Orwell' order by saleprice asc limit 1",
          "select title from book where author = 'Georgia Orwell' order by saleprice asc limit 1",
          "select title from book where author = 'G.Orwell' order by saleprice asc limit 1",
          "select title from book where author = 'George Orwell' order by saleprice asc limit 1",
          "select title from book where author = 'G. Orwell' order by saleprice asc limit 1",
          "select title from book where author = 'Orwell' order by saleprice asc limit 1"
        ]
      ]
    },
    {
      "id": 577,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
      "infer_predictions": [
        [
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Platon' and saleprice < ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 578,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
      "infer_predictions": [
        [
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )",
          "select title from book where author = 'Plato' and saleprice < ( select avg ( saleprice ) from book )"
        ]
      ]
    },
    {
      "id": 579,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from author join author_book on author.idauthor = author_book.author join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select author.name from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride & Prejudice'"
        ]
      ]
    },
    {
      "id": 580,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select author.name from author_book join book on author_book.author = book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'",
          "select author.name from author_book join author on author_book.author = author.idauthor join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select author.name from author join author_book on author.idauthor = author_book.author join book on author_book.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select author.name from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 581,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
      "infer_predictions": [
        [
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'",
          "select distinct book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select distinct book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'"
        ]
      ]
    },
    {
      "id": 582,
      "db_id": "book_1",
      "gold": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
      "infer_predictions": [
        [
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from book join author_book on book.isbn = author_book.isbn join author on author_book.author = author.idauthor where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author.idauthor = author_book.author where author.name like '%Plato%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Plastic%'",
          "select book.title from author_book join book on author_book.isbn = book.isbn join author on author_book.author = author.idauthor where author.name like '%Planet%'"
        ]
      ]
    },
    {
      "id": 583,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select count ( * ) from book join books_order on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join orders on books_order.idorder = orders.idorder join book on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 584,
      "db_id": "book_1",
      "gold": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select count ( * ) from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from book join books_order on book.isbn = books_order.isbn where book.title = 'Pride and Prejudice'",
          "select count ( * ) from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride & Prejudice'"
        ]
      ]
    },
    {
      "id": 585,
      "db_id": "book_1",
      "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
      "infer_predictions": [
        [
          "select idorder from books_order where isbn = 'Pride and Prejudice' intersect select idorder from books_order where isbn = 'The Little Prince'",
          "select books_order.idorder from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select books_order.idorder from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'The Little Prince'",
          "select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'The Little Prince'",
          "select books_order.idorder from books_order join orders on books_order.idorder = orders.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select books_order.idorder from books_order join orders on books_order.idorder = orders.idorder join book on book.isbn = books_order.isbn where book.title = 'The Little Prince'"
        ]
      ]
    },
    {
      "id": 586,
      "db_id": "book_1",
      "gold": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
      "infer_predictions": [
        [
          "select idorder from books_order where isbn = 'Pride and Prejudice' intersect select idorder from books_order where isbn = 'The Little Prince'",
          "select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'The Little Prince'",
          "select books_order.idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice' intersect select books_order.idorder from books_order join book on books_order.isbn = book.isbn where book.title = 'The Little Prince'"
        ]
      ]
    },
    {
      "id": 587,
      "db_id": "book_1",
      "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'"
        ]
      ]
    },
    {
      "id": 588,
      "db_id": "book_1",
      "gold": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'",
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on client.idclient = orders.idorder where client.name = 'James Smith'",
          "select books_order.isbn from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient where client.name = 'Peter Doe' intersect select books_order.isbn from books_order join orders on books_order.idorder = orders.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'",
          "select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'Peter' intersect select books_order.isbn from orders join books_order on orders.idorder = books_order.idorder join client on orders.idclient = client.idclient where client.name = 'James Smith'"
        ]
      ]
    },
    {
      "id": 589,
      "db_id": "book_1",
      "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        [
          "select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where orders.idclient = 'Peter Doe' except select book.title from orders join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where orders.idclient = 'James Smith'"
        ]
      ]
    },
    {
      "id": 590,
      "db_id": "book_1",
      "gold": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 591,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 592,
      "db_id": "book_1",
      "gold": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
      "infer_predictions": [
        [
          "select client.name from orders join client on orders.idclient = client.idclient join books_order on orders.idorder = books_order.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'",
          "select client.name from orders join client on orders.idclient = client.idclient join books_order on books_order.idorder = books_order.idorder join book on books_order.isbn = book.isbn where book.title = 'Pride and Prejudice'"
        ]
      ]
    },
    {
      "id": 593,
      "db_id": "book_review",
      "gold": "SELECT count(*) FROM book",
      "infer_predictions": [
        [
          "select count ( * ) from book",
          "select count ( * ) from book -- select count ( * ) from book"
        ]
      ]
    },
    {
      "id": 594,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book ORDER BY Title ASC",
      "infer_predictions": [
        [
          "select title from book order by title asc",
          "select distinct title from book order by title asc"
        ]
      ]
    },
    {
      "id": 595,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book ORDER BY Pages DESC",
      "infer_predictions": [
        [
          "select title from book order by pages desc",
          "select title from book order by pages desc",
          "select title from book order by pages desc"
        ]
      ]
    },
    {
      "id": 596,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  Release FROM book",
      "infer_predictions": [
        [
          "select type , release from book",
          "select distinct type , release from book"
        ]
      ]
    },
    {
      "id": 597,
      "db_id": "book_review",
      "gold": "SELECT max(Chapters) ,  min(Chapters) FROM book",
      "infer_predictions": [
        [
          "select max ( chapters ) , min ( chapters ) from book",
          "select max ( chapters ) , min ( chapters ) , book.title from book join review on book.book_id = review.book_id",
          "select max ( chapters ) , min ( chapters ) , book.book_id from book join review on book.book_id = review.book_id"
        ]
      ]
    },
    {
      "id": 598,
      "db_id": "book_review",
      "gold": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
      "infer_predictions": [
        [
          "select title from book where type != 'Poet'",
          "select title from book where title not in ( select title from book where type = 'Poet' )",
          "select title from book where title != 'Poet'",
          "select title from book except select title from book where type = 'Poet'",
          "select title from book where type != 'Poet'",
          "select title from book where title not in ( select title from book where book_id = 'Poet' )"
        ]
      ]
    },
    {
      "id": 599,
      "db_id": "book_review",
      "gold": "SELECT avg(Rating) FROM review",
      "infer_predictions": [
        [
          "select avg ( rating ) from review",
          "select rating , avg ( rating ) from review group by rating",
          "select rating , avg ( rating ) from review group by rating",
          "select avg ( rating ) from review",
          "select avg ( rating ) from review"
        ]
      ]
    },
    {
      "id": 600,
      "db_id": "book_review",
      "gold": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
      "infer_predictions": [
        [
          "select book.title , review.rating from book join review on book.book_id = review.book_id"
        ]
      ]
    },
    {
      "id": 601,
      "db_id": "book_review",
      "gold": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
      "infer_predictions": [
        [
          "select review.rating from book join review on book.book_id = review.book_id order by book.chapters desc limit 1",
          "select review.rating from review join book on review.book_id = book.book_id order by book.chapters desc limit 1",
          "select review.rating from book join review on book.book_id = review.book_id group by review.book_id order by count ( * ) desc limit 1",
          "select review.rating from review join book on review.book_id = book.book_id where book.chapters = ( select max ( chapters ) from book )",
          "select review.rating from review join book on review.book_id = book.book_id group by review.book_id order by count ( * ) desc limit 1",
          "select review.rating from book join review on book.book_id = review.book_id where book.chapters = ( select max ( chapters ) from book )",
          "select review.rating from book join review on book.book_id = review.book_id group by book.book_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 602,
      "db_id": "book_review",
      "gold": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
      "infer_predictions": [
        [
          "select review.rank from book join review on book.book_id = review.book_id order by book.pages asc limit 1",
          "select review.rank from review join book on review.book_id = book.book_id order by book.pages asc limit 1",
          "select review.rank from book join review on book.book_id = review.book_id order by book.pages asc limit 1",
          "select review.rank from book join review on book.book_id = review.book_id order by book. pages asc limit 1"
        ]
      ]
    },
    {
      "id": 603,
      "db_id": "book_review",
      "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
      "infer_predictions": [
        [
          "select book.title from book join review on book.book_id = review.book_id order by review.rank asc limit 1",
          "select book.title from book join review on book.book_id = review.book_id order by rank asc limit 1",
          "select book.title from review join book on review.book_id = book.book_id order by review.rank asc limit 1",
          "select book.title from book join review on book.book_id = review.book_id order by review.rank asc limit 1"
        ]
      ]
    },
    {
      "id": 604,
      "db_id": "book_review",
      "gold": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
      "infer_predictions": [
        [
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from book join review on book.book_id = review.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where book.type = 'Novel%'",
          "select avg ( review.readers_in_million ) from review join book on review.book_id = book.book_id where type = 'Novel'"
        ]
      ]
    },
    {
      "id": 605,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
      "infer_predictions": [
        [
          "select type , count ( * ) from book group by type",
          "select type , count ( * ) from book group by type",
          "select type , count ( * ) from book group by type",
          "select type , count ( * ) from book group by type",
          "select type , count ( * )from book group by type",
          "select type , count ( *) from book group by type"
        ]
      ]
    },
    {
      "id": 606,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select type from book group by type order by count ( * ) desc limit 1",
          "select type from book group by type order by count ( * ) desc limit 1",
          "select type from book group by type order by count ( * ) desc limit 1",
          "select type from book group by type order by count ( * ) desc limit 1",
          "select type from book group by type order by count ( * ) desc limit 1",
          "select type from book group by type order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 607,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3",
          "select type from book group by type having count ( * ) >= 3."
        ]
      ]
    },
    {
      "id": 608,
      "db_id": "book_review",
      "gold": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
      "infer_predictions": [
        [
          "select book.title from book join review on book.book_id = review.book_id order by review.rating asc",
          "select book.title from review join book on review.book_id = book.book_id order by review.rating asc",
          "select book.title from book join review on book.book_id = review.book_id order by rating asc"
        ]
      ]
    },
    {
      "id": 609,
      "db_id": "book_review",
      "gold": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
      "infer_predictions": [
        [
          "select book.title , book.audio from book join review on book.book_id = review.book_id order by review.readers_in_million desc",
          "select book.title , book.audio from review join book on review.book_id = book.book_id order by review.readers_in_million desc"
        ]
      ]
    },
    {
      "id": 610,
      "db_id": "book_review",
      "gold": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
      "infer_predictions": [
        [
          "select count ( * ) from book where book_id not in ( select book_id from review )",
          "select count ( * ) from book where book_Id not in ( select book_id from review )"
        ]
      ]
    },
    {
      "id": 611,
      "db_id": "book_review",
      "gold": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
      "infer_predictions": [
        [
          "select type from book where chapters > 75 intersect select type from book where chapters < 50",
          "select type from book where chapters > 75 intersect select type from book where chapters <= 50",
          "select type from book where chapters > 75 intersect select type from book where chapters < 50"
        ]
      ]
    },
    {
      "id": 612,
      "db_id": "book_review",
      "gold": "SELECT count(DISTINCT TYPE) FROM book",
      "infer_predictions": [
        [
          "select count ( distinct type ) from book",
          "select count ( distinct type ) from book",
          "select count ( distinct type ) from book",
          "select count ( distinct type ) from book",
          "select count ( distinct type ) from book",
          "select count ( distinct type ) from book"
        ]
      ]
    },
    {
      "id": 613,
      "db_id": "book_review",
      "gold": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
      "infer_predictions": [
        [
          "select type , title from book where book_id not in ( select book_id from review )",
          "select title , type from book where book_id not in ( select book_id from review )",
          "select type ,title from book where book_id not in ( select book_id from review )"
        ]
      ]
    },
    {
      "id": 614,
      "db_id": "restaurant_bills",
      "gold": "SELECT count(*) FROM customer",
      "infer_predictions": [
        [
          "select count ( * ) from customer",
          "select count ( * ) from customer -- select count ( * ) from customer",
          "select count ( * ) from customer",
          "select count ( * ) from customer"
        ]
      ]
    },
    {
      "id": 615,
      "db_id": "restaurant_bills",
      "gold": "SELECT count(*) FROM customer",
      "infer_predictions": [
        [
          "select count ( * ) from customer",
          "select count ( * ) from customer"
        ]
      ]
    },
    {
      "id": 616,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
      "infer_predictions": [
        [
          "select name from customer order by level_of_membership asc",
          "Select name from customer order by level_of_membership asc"
        ]
      ]
    },
    {
      "id": 617,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
      "infer_predictions": [
        [
          "select name from customer order by level_of_membership asc",
          "select name from customer order by level_of_membership asc",
          "Select name from customer order by level_of_membership asc"
        ]
      ]
    },
    {
      "id": 618,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  Card_Credit FROM customer",
      "infer_predictions": [
        [
          "select nationality , card_credit from customer",
          "select nationality , card_credit from customer",
          "select nationalITY , card_credit from customer",
          "select nationality , card_credit from customer"
        ]
      ]
    },
    {
      "id": 619,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  Card_Credit FROM customer",
      "infer_predictions": [
        [
          "select nationality , card_credit from customer",
          "select nationality , card_credit from customer",
          "select nationality , card_credit from customer"
        ]
      ]
    },
    {
      "id": 620,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
      "infer_predictions": [
        [
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'UK' or nationality = 'Australia'",
          "select name from customer where nationality = 'United Kingdom' or nationality = 'Australia'",
          "select name from customer where nationality = 'English' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australie'",
          "select name from customer where nationality = 'Englaand' or nationality = 'Australia'",
          "select name from customer where nationality = 'UK' or nationality = 'AUS'"
        ]
      ]
    },
    {
      "id": 621,
      "db_id": "restaurant_bills",
      "gold": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
      "infer_predictions": [
        [
          "select name from customer where nationality = 'England' or nationality = 'Australia'",
          "select name from customer where nationality = 'UK' or nationality = 'Australia'",
          "select name from customer where nationality = 'United Kingdom' or nationality = 'Australia'",
          "select name from customer where nationality = 'England' or nationality = 'Australie'",
          "select name from customer where nationality = 'English' or nationality = 'Australia'"
        ]
      ]
    },
    {
      "id": 622,
      "db_id": "restaurant_bills",
      "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
      "infer_predictions": [
        [
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select card_credit , avg ( level_of_membership ) from customer where level_of_membership > 1 group by card_credit",
          "select avg ( card_credit ) from customer where level_of_membership >1",
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select avg ( card_credit ) from customer where level_of_membership > 1"
        ]
      ]
    },
    {
      "id": 623,
      "db_id": "restaurant_bills",
      "gold": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
      "infer_predictions": [
        [
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select card_credit , avg ( card_credit ) from customer where level_of_membership > 1 group by card_credit",
          "select avg ( card_credit ) from customer where level_of_membership >1",
          "select avg ( card_credit ) from customer where level_of_membership > 1",
          "select avg ( card_credit ) from customer where level_of_membership > 1"
        ]
      ]
    },
    {
      "id": 624,
      "db_id": "restaurant_bills",
      "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
      "infer_predictions": [
        [
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select card_credit from customer order by level_of_membership asc limit 1",
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select card_credit from customer order by level_of_membership desc limit 1"
        ]
      ]
    },
    {
      "id": 625,
      "db_id": "restaurant_bills",
      "gold": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
      "infer_predictions": [
        [
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select card_credit from customer where level_of_membership = ( select max ( level_of_membership ) from customer )",
          "select card_credit from customer order by level_of_membership asc limit 1",
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select card_credit from customer order by level_of_membership desc limit 1",
          "select name from customer order by level_of_membership desc limit 1"
        ]
      ]
    },
    {
      "id": 626,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality  , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * )from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( *) from customer group by nationality"
        ]
      ]
    },
    {
      "id": 627,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality  , count ( * ) from customer group by nationality",
          "select nationality , count ( *) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality",
          "select nationality , count ( * ) from customer group by nationality"
        ]
      ]
    },
    {
      "id": 628,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 2",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 629,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 2",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1",
          "select nationality from customer group by nationality order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 630,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
      "infer_predictions": [
        [
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 75",
          "select nationality from customer where card_credit <= 50 intersect select nationality from customer where card_credit > 75",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit >75",
          "select nationality from customer where card_credit < 50 intersect select nationality from customer where card_credit > 100"
        ]
      ]
    },
    {
      "id": 631,
      "db_id": "restaurant_bills",
      "gold": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
      "infer_predictions": [
        [
          "select nationality from customer where card_credit > 50 intersect select nationality from customer where card_credit < 75",
          "select nationality from customer where card_credit > 50 intersect select nationality from customer where card_credit <= 75"
        ]
      ]
    },
    {
      "id": 632,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , customer_order.dish_name from customer join customer_order on customer.customer_id = customer_order.customer_id"
        ]
      ]
    },
    {
      "id": 633,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id"
        ]
      ]
    },
    {
      "id": 634,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by quantity desc",
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity asc"
        ]
      ]
    },
    {
      "id": 635,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
      "infer_predictions": [
        [
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by customer_order.quantity desc",
          "select customer.name , customer_order.dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by quantity desc",
          "select customer.name , dish_name from customer_order join customer on customer_order.customer_id = customer.customer_id order by quantity desc"
        ]
      ]
    },
    {
      "id": 636,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
      "infer_predictions": [
        [
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name",
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id"
        ]
      ]
    },
    {
      "id": 637,
      "db_id": "restaurant_bills",
      "gold": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
      "infer_predictions": [
        [
          "select customer.name , sum ( customer_order.quantity ) from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name",
          "select sum ( customer_order.quantity ) , customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name",
          "select customer.name , sum ( customer_order.quantity ) from customer join customer_order on customer.customer_id = customer_order.customer_id group by customer.name"
        ]
      ]
    },
    {
      "id": 638,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
      "infer_predictions": [
        [
          "select customer_id from customer_order group by customer_id having sum ( quantity ) > 1",
          "select customer_id from customer_order group by customer_id having sum ( quantity ) >= 1",
          "select customer.customer_id from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer_id from customer_order group by customer_id having sum ( quantity ) > ( select sum ( quantity ) from customer_order )",
          "select customer.customer_id from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer_order.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer_id from customer_order group by customer_id having sum ( quantity ) >= 1"
        ]
      ]
    },
    {
      "id": 639,
      "db_id": "restaurant_bills",
      "gold": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
      "infer_predictions": [
        [
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.name having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer_order.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) >= 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > ( select sum ( quantity ) from customer_order )",
          "select distinct customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) > 1",
          "select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id group by customer.customer_id having sum ( customer_order.quantity ) >1"
        ]
      ]
    },
    {
      "id": 640,
      "db_id": "restaurant_bills",
      "gold": "SELECT DISTINCT Manager FROM branch",
      "infer_predictions": [
        [
          "select distinct manager from branch"
        ]
      ]
    },
    {
      "id": 641,
      "db_id": "restaurant_bills",
      "gold": "SELECT DISTINCT Manager FROM branch",
      "infer_predictions": [
        [
          "select distinct manager from branch"
        ]
      ]
    },
    {
      "id": 642,
      "db_id": "restaurant_bills",
      "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
      "infer_predictions": [
        [
          "select name from customer except select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select name from customer except select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id",
          "select name from customer where customer_id not in ( select customer_id from customer_order )"
        ]
      ]
    },
    {
      "id": 643,
      "db_id": "restaurant_bills",
      "gold": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
      "infer_predictions": [
        [
          "select name from customer except select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id",
          "select name from customer except select customer.name from customer join customer_order on customer.customer_id = customer_order.customer_id",
          "select name from customer except select customer.name from customer_order join customer on customer_order.customer_id = customer.customer_id"
        ]
      ]
    },
    {
      "id": 644,
      "db_id": "club_leader",
      "gold": "SELECT count(*) FROM member",
      "infer_predictions": [
        [
          "select count ( * ) from member"
        ]
      ]
    },
    {
      "id": 645,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select name from member order by age asc",
          "Select name from member order by age asc"
        ]
      ]
    },
    {
      "id": 646,
      "db_id": "club_leader",
      "gold": "SELECT Name ,  Nationality FROM member",
      "infer_predictions": [
        [
          "select name , nationality from member",
          "select name , nationality from member",
          "select name , nationality from member",
          "select name , nationality from member"
        ]
      ]
    },
    {
      "id": 647,
      "db_id": "club_leader",
      "gold": "select name from member where nationality != \"england\"",
      "infer_predictions": [
        [
          "select name from member where nationality != 'England'",
          "select name from member where nationality != 'English'",
          "select name from member where nationality != 'UK'",
          "select name from member where nationality != 'England' != 'England'",
          "select name from member where nationality != 'England' != 'UK'"
        ]
      ]
    },
    {
      "id": 648,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
      "infer_predictions": [
        [
          "select name from member where age = 19 or age = 20",
          "select name from member where age = 1919 or age = 20",
          "select name from member where age = 2019 or age = 20",
          "select name from member where age = 19 or age =20",
          "select name from member where age = 19. or age = 20",
          "select name from member where age = 19 OR age = 20"
        ]
      ]
    },
    {
      "id": 649,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from member order by age desc limit 1",
          "select name from member where age = ( select max ( age ) from member )",
          "select name from member order by age asc limit 1",
          "select name from member order by age desc limit 1",
          "select name from member order by age desc limit 1",
          "select name from member order by age desc limit 1",
          "select name from member order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 650,
      "db_id": "club_leader",
      "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
      "infer_predictions": [
        [
          "select nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * ) , nationality from member group by nationality",
          "select nationality  , count ( * ) from member group by nationality",
          "select nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * ) from member group by nationality",
          "select nationality , count ( * )from member group by nationality",
          "select nationality , count ( *) from member group by nationality"
        ]
      ]
    },
    {
      "id": 651,
      "db_id": "club_leader",
      "gold": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select nationality from member group by nationality order by count ( * ) desc limit 1",
          "select nationality from member group by nationality order by count ( * ) desc limit 1",
          "select nationality from member group by nationality order by count ( * ) desc limit 1",
          "select nationality from member group by nationality order by count ( * ) desc limit 2",
          "select nationality from member group by nationality order by count ( * ) desc limit 1",
          "select nationality from member group by nationality order by count ( * ) desc limit 1",
          "select nationality from member group by nationality order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 652,
      "db_id": "club_leader",
      "gold": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select nationality from member group by nationality having count ( * ) >= 2",
          "select nationality , count ( * ) from member group by nationality having count ( * ) >= 2",
          "select nationality from member group by nationality having count ( * ) >= 2",
          "select nationality from member group by nationality having count ( * )>= 2",
          "select nationality from member group by nationality having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 653,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
      "infer_predictions": [
        [
          "select club.club_name , club.team_leader from club join club_leader on club.club_id = club_leader.club_id",
          "select club.club_name , club.team_leader from club_leader join club on club_leader.club_id = club.club_id"
        ]
      ]
    },
    {
      "id": 654,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
      "infer_predictions": [
        [
          "select member.name from club_leader join member on club_leader.member_id = member.member_id join club on club_leader.club_id = club.club_id where club.overall_ranking > 100",
          "select member.name from club_leader join club on club_leader.club_id = club.club_id join member on club_leader.member_id = member.member_id where club.overall_ranking > 100"
        ]
      ]
    },
    {
      "id": 655,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
      "infer_predictions": [
        [
          "select member.name from club_leader join member on club_leader.member_id = member.member_id where club_leader.year_join < 2018",
          "select member.name from member join club_leader on member.member_id = club_leader.member_id where club_leader.year_join < 2018",
          "select member.name from club_leader join member on club_leader.member_id = member.member_id where club_leader.year_join <= 2018",
          "select member.name from club_leader join member on club_leader.member_id = member.member_id where year_join < 2018",
          "select name from member join club_leader on member.member_id = club_leader.member_id where club_leader.year_join < 2018"
        ]
      ]
    },
    {
      "id": 656,
      "db_id": "club_leader",
      "gold": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
      "infer_predictions": [
        [
          "select member.name from club_leader join member on club_leader.member_id = member.member_id join club on club_leader.club_id = club.club_id where club.club_name = 'Houston'",
          "select member.name from club_leader join club on club_leader.club_id = club.club_id join member on club_leader.member_id = member.member_id where club.club_name = 'Houston'"
        ]
      ]
    },
    {
      "id": 657,
      "db_id": "club_leader",
      "gold": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
      "infer_predictions": [
        [
          "select name from member where member_id not in ( select member_id from club_leader )",
          "select name from member where member_id not in ( select member_id from club_leader )"
        ]
      ]
    },
    {
      "id": 658,
      "db_id": "club_leader",
      "gold": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
      "infer_predictions": [
        [
          "select nationality from member where age > 22 intersect select nationality from member where age < 19",
          "select nationality from member where age > 22 intersect select nationality from member where age <= 19"
        ]
      ]
    },
    {
      "id": 659,
      "db_id": "club_leader",
      "gold": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
      "infer_predictions": [
        [
          "select avg ( member.age ) from club_leader join member on club_leader.member_id = member.member_id",
          "select avg ( member.age ) from member join club_leader on member.member_id = club_leader.member_id",
          "select avg ( member.age ) from club_leader join member on club_leader.member_id = member.member_id",
          "select avg ( member.age ) from club_leader join member on club_leader.member_id = member.member_id != member.member_id"
        ]
      ]
    },
    {
      "id": 660,
      "db_id": "club_leader",
      "gold": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
      "infer_predictions": [
        [
          "select club_name from club where club_name like '%state%'",
          "select distinct club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'",
          "select club_name from club where club_name like '%state%'"
        ]
      ]
    },
    {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
      "infer_predictions": [
        [
          "select collection_subset_name from collection_subsets",
          "select distinct collection_subset_name from collection_subsets",
          "select collection_subset_name from collection_subsets",
          "select collection_subset_name from collection_subsets",
          "select collection_subset_name from collection_Subsets"
        ]
      ]
    },
    {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
      "infer_predictions": [
        [
          "select collection_subset_name from collection_subsets",
          "select distinct collection_subset_name from collection_subsets",
          "select collection_subset_name from collection_subsets",
          "select collection_subset_name from collection_subsets",
          "select ( collection_subset_name ) from collection_subsets"
        ]
      ]
    },
    {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
      "infer_predictions": [
        [
          "select collecrtion_subset_details from collection_subsets where collection_subset_name = 'Top collection'"
        ]
      ]
    },
    {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
      "infer_predictions": [
        [
          "select collection_subsets.collecrtion_subset_details from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id where collection_subsets.collection_subset_name = 'Top collection'",
          "select collection_subsets.collecrtion_subset_details from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subsets.collection_subset_id where collection_subsets.collection_subset_name = 'Top collection'",
          "select collection_subsets.collecrtion_subset_details from collection_subsets join collections on collection_subsets.collection_subset_id = collections.collection_id where collection_subsets.collection_subset_name = 'Top collection'"
        ]
      ]
    },
    {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
      "infer_predictions": [
        [
          "select document_subset_name from document_subsets",
          "select document_subset_name from document_subsets",
          "select document_subset_name from document_subsets",
          "select document_subset_name from document_subsets"
        ]
      ]
    },
    {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Name FROM Document_Subsets;",
      "infer_predictions": [
        [
          "select document_subset_name from document_subsets",
          "select document_subset_name from document_subsets",
          "select document_subset_name from document_subsets"
        ]
      ]
    },
    {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best of 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best For 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best fo 2000'"
        ]
      ]
    },
    {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best of 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best For 2000'",
          "select document_subset_details from document_subsets where document_subset_name like '%Best for 2000%'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best from 2000'",
          "select document_subset_details from document_subsets where document_subset_name = 'Best fo 2000'"
        ]
      ]
    },
    {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects;",
      "infer_predictions": [
        [
          "select document_object_id from documents_in_collections",
          "select document_object_id from documents_in_collections"
        ]
      ]
    },
    {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects;",
      "infer_predictions": [
        [
          "select document_object_id from document_objects",
          "select document_object_id from document_objects except select document_object_id from document_objects",
          "select document_object_id from document_objects where parent_document_object_id = 1",
          "select document_object_id from document_objects where parent_document_object_id = '%s'"
        ]
      ]
    },
    {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
      "infer_predictions": [
        [
          "select parent_document_object_id from document_objects where owner = 'Marlin'",
          "select parent_document_Object_id from document_objects where owner = 'Marlin'",
          "select parent_document_object_id from document_objects where owner = 'Marlon'",
          "select document_object_id from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
      "infer_predictions": [
        [
          "select document_object_id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_objects where owner = 'Marlon'",
          "select document_Object_id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_objects where owner = 'Marlen'",
          "select document_object_Id from document_objects where owner = 'Marlin'",
          "select document_object_id from document_Objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
      "infer_predictions": [
        [
          "select owner from document_objects where description = 'Braeden Collection'",
          "select owner from document_objects where description = 'Breeden Collection'",
          "select owner from document_objects where description = 'The Braeden Collection'",
          "select owner from document_objects where description = 'Brayden Collection'",
          "select owner from document_objects where description = 'Braynen Collection'",
          "select owner from document_objects where description = 'Bradden Collection'",
          "select owner from document_objects where description = 'The Braden Collection'"
        ]
      ]
    },
    {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
      "infer_predictions": [
        [
          "select document_objects.owner from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join documents_in_collections on document_objects.parent_document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join collections on document_objects.parent_document_object_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join collections on document_objects.document_object_id = collections.collection_id where collections.collection_name = 'Braeden Collection'",
          "select document_objects.owner from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_description = 'Braeden Collection'"
        ]
      ]
    },
    {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
      "infer_predictions": [
        [
          "select owner from document_objects where owner = 'Marlin'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'parent_document_object_id'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 1",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'document_object_id'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'Document_Objects.parent_document_object_id'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'child_document_object_id'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'Document_objects.parent_document_object_id'",
          "select owner from document_objects where owner = 'Marlin' and parent_document_object_id = 'Nick'"
        ]
      ]
    },
    {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
      "infer_predictions": [
        [
          "select owner from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select distinct description from document_objects"
        ]
      ]
    },
    {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select distinct description from document_objects",
          "select distinct ( description ) from document_objects",
          "select distinct description from document_objects",
          "select distinct description from document_objects",
          "select distinct description from document_objects where parent_document_object_id = 1"
        ]
      ]
    },
    {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
      "infer_predictions": [
        [
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlon'",
          "select count ( * ) from document_objects where owner = 'Marlen'",
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marling'"
        ]
      ]
    },
    {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
      "infer_predictions": [
        [
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlon'",
          "select count ( * ) from document_objects where owner = 'Marlin'",
          "select count ( * ) from document_objects where owner = 'Marlen'",
          "select count ( * ) from document_objects where owner = 'Marlin'"
        ]
      ]
    },
    {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
      "infer_predictions": [
        [
          "select document_object_id from document_objects except select parent_document_object_id from document_objects",
          "select document_Object_id from document_objects except select parent_document_object_id from document_objects"
        ]
      ]
    },
    {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
      "infer_predictions": [
        [
          "select document_object_id from document_objects except select parent_document_object_id from document_objects",
          "select document_object_id from document_objects where document_object_id not in ( select parent_document_object_id from document_objects )",
          "select document_Object_id from document_objects except select parent_document_object_id from document_objects",
          "select document_object_id from document_objects except select parent_document_object_id from document_objects"
        ]
      ]
    },
    {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
      "infer_predictions": [
        [
          "select parent_document_object_id , count ( * ) from document_objects group by parent_document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id group by document_objects.parent_document_object_id",
          "select document_objects.parent_document_object_id , count ( * ) from document_objects join documents_in_collections on document_objects.parent_document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join documents_in_collections on document_objects.parent_document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id",
          "select document_object_id , count ( * ) from document_objects group by document_object_id",
          "select document_objects.parent_document_object_id , count ( * ) from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id",
          "select document_objects.parent_document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id group by document_objects.parent_document_object_id"
        ]
      ]
    },
    {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
      "infer_predictions": [
        [
          "select count ( * ) , parent_document_object_id from document_objects group by parent_document_object_id",
          "select count ( * ) , document_objects.parent_document_object_id from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id",
          "select parent_document_object_id , count ( * ) from document_objects group by parent_document_object_id",
          "select count ( * ) , document_objects.parent_document_object_id from document_objects join documents_in_collections on document_objects.parent_document_object_id = documents_in_collections.document_object_id group by document_objects.parent_document_object_id"
        ]
      ]
    },
    {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections;",
      "infer_predictions": [
        [
          "select collection_name from collections"
        ]
      ]
    },
    {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections;",
      "infer_predictions": [
        [
          "select collection_name from collections",
          "select distinct collection_name from collections"
        ]
      ]
    },
    {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_description from collections where collection_name like '%Best%'",
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_name = 'Best' )",
          "select collection_description from collections where collection_name = 'Best'",
          "select collection_description from collections where collection_name = ( select collection_name from collections where collection_description = 'Best' )",
          "select collection_description from collections where collection_name = ( select collection_name from collections order by collection_name asc limit 1 )",
          "select collection_description from collections where collection_name = ( select collection_name from collections order by collection_name desc limit 1 )",
          "select collection_description from collections where collection_name like 'Best%'"
        ]
      ]
    },
    {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_name = 'Nice'"
        ]
      ]
    },
    {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
      "infer_predictions": [
        [
          "select collection_name from collections where collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections except select parent_collection_id from collections"
        ]
      ]
    },
    {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
      "infer_predictions": [
        [
          "select collection_name from collections except select collection_name from collections",
          "select collection_name from collections where collection_id not in ( select parent_collection_id from collections )",
          "select collection_name from collections where collection_id != ( select parent_collection_id from collections )",
          "select collection_name from collections where parent_collection_id != ( select parent_collection_id from collections )",
          "select collection_name from collections where parent_collection_id != ( select collection_id from collections )"
        ]
      ]
    },
    {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select document_object_id from document_subset_members group by document_object_id having count ( * ) > 1",
          "select document_Object_id from document_subset_members group by document_Object_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select document_object_id from document_subset_members group by document_object_id having count ( * ) > 1",
          "select document_object_id from document_subset_members group by document_object_id having count ( related_document_object_id ) > 1",
          "select document_Object_id from document_subset_members group by document_Object_id having count ( * ) > 1",
          "select document_subset_id from document_subset_members group by document_subset_id having count ( * ) > 1",
          "select document_Object_id from document_subset_members group by document_object_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id join collection_subsets on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections where collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id join collection_subsets on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id join collection_subsets on collection_subset_members.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id join collection_subsets on collection_subset_members.collection_subset_id = collection_subset_members.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select document_subset_members.document_object_id from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Ransom'",
          "select document_subset_members.document_object_id from document_subset_members join document_objects on document_subset_members.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select document_subset_members.related_document_object_id from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Ransom'",
          "select document_object_id from document_objects where owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select document_object_id from document_objects where owner = ( select owner from document_objects where owner = 'Ransom' )",
          "select document_object_id from document_objects where owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
      "infer_predictions": [
        [
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_id",
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subsets.collection_subset_id group by collection_subsets.collection_subset_id",
          "select collection_subset_id , collection_subset_name , count ( * ) from collection_subsets group by collection_subset_id",
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_name",
          "select collection_subsets.collection_subset_name , collection_subsets.collection_subset_id , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_id"
        ]
      ]
    },
    {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
      "infer_predictions": [
        [
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_id",
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subsets.collection_subset_id group by collection_subsets.collection_subset_id",
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_name",
          "select collection_subsets.collection_subset_id , collection_subsets.collection_subset_name , count ( * ) from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id group by collection_subsets.collection_subset_id"
        ]
      ]
    },
    {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_objects group by document_object_id order by count ( * ) desc limit 1",
          "select document_objects.document_object_id , count ( * ) from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id group by document_objects.document_object_id order by count ( * ) desc limit 1",
          "select document_objects.document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id group by document_objects.document_object_id order by count ( * ) desc limit 1",
          "select parent_document_object_id , count ( * ) from document_objects group by parent_document_object_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select parent_document_object_id , count ( * ) from document_objects group by parent_document_object_id",
          "select document_object_id , count ( * ) from document_objects group by document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id group by document_objects.document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id group by document_objects.parent_document_object_id",
          "select document_objects.document_object_id , count ( * ) from document_objects join document_subset_members on document_objects.parent_document_object_id = document_subset_members.document_object_id group by document_objects.document_object_id",
          "select count ( * ) , parent_document_object_id from document_objects group by parent_document_object_id"
        ]
      ]
    },
    {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id order by count ( * ) asc limit 1",
          "select document_object_id , count ( * ) from document_subset_members group by related_document_object_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
      "infer_predictions": [
        [
          "select document_object_id from documents_in_collections group by document_object_id order by count ( * ) asc limit 1",
          "select document_object_id from documents_in_collections group by document_object_id order by count ( * ) asc limit 1",
          "select document_Object_id from documents_in_collections group by document_Object_id order by count ( * ) asc limit 1",
          "select document_object_id from documents_in_collections group by document_Object_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "gold": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id having count ( * ) between 2 and 4",
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id having count ( related_document_object_id ) between 2 and 4",
          "select related_document_object_id , count ( * ) from document_subset_members group by related_document_object_id having count ( * ) between 2 and 4"
        ]
      ]
    },
    {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id having count ( * ) between 2 and 4",
          "select related_document_object_id , count ( * ) from document_subset_members group by related_document_object_id having count ( * ) between 2 and 4",
          "select document_object_id , count ( * ) from document_subset_members group by document_object_id having count ( related_document_object_id ) between 2 and 4"
        ]
      ]
    },
    {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
      "infer_predictions": [
        [
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.related_document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_subset_members.related_document_object_id = 1 and document_objects.owner = 'Braeden'",
          "select distinct document_objects.owner from document_objects join document_subset_members on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.parent_document_object_id = 'Braeden'"
        ]
      ]
    },
    {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
      "infer_predictions": [
        [
          "select distinct document_subsets.document_subset_name from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id join document_objects on document_subset_members.document_object_id = document_objects.document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_subsets.document_subset_name from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id join document_objects on document_subsets.document_subset_id = document_objects.document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_subsets.document_subset_name from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id join document_objects on document_objects.document_object_id = document_subset_members.document_object_id where document_objects.owner = 'Braeden'",
          "select distinct document_subsets.document_subset_name from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id join document_objects on document_subset_members.related_document_object_id = document_objects.document_object_id where document_objects.owner = 'Braeden'"
        ]
      ]
    },
    {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
      "infer_predictions": [
        [
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subsets.document_subset_id ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subset_name ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subsets.document_subset_name ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subset_id , document_subset_name , count ( distinct document_subset_id ) from document_subsets group by document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subset_members.document_subset_id ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id"
        ]
      ]
    },
    {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
      "infer_predictions": [
        [
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subsets.document_subset_id ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subset_name ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( distinct document_subsets.document_subset_name ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subset_id , document_subset_name , count ( * ) from document_subsets group by document_subset_id",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subsets.document_subset_id group by document_subsets.document_subset_id"
        ]
      ]
    },
    {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
      "infer_predictions": [
        [
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id order by count ( * ) desc limit 1",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id order by count ( * ) desc limit 1",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subsets.document_subset_id group by document_subsets.document_subset_id order by count ( * ) desc limit 1",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_name order by count ( * ) desc limit 1",
          "select document_subset_id , document_subset_name , count ( * ) from document_subsets group by document_subset_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
      "infer_predictions": [
        [
          "select document_subset_id , document_subset_name , count ( * ) from document_subsets group by document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_members.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_members.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id order by count ( * ) desc limit 1",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id order by count ( * ) desc limit 1",
          "select document_subsets.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_members.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subset_members.document_subset_id = document_subsets.document_subset_id group by document_subset_members.document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_members.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subsets.document_subset_id group by document_subset_members.document_subset_id order by count ( * ) desc limit 1",
          "select document_subset_members.document_subset_id , document_subsets.document_subset_name , count ( * ) from document_subset_members join document_subsets on document_subset_members.document_subset_id = document_subsets.document_subset_id group by document_subsets.document_subset_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_id from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subset_members join document_subsets on document_subset_members.document_subset_id = document_subsets.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subsets.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
      "infer_predictions": [
        [
          "select document_subset_id from document_subsets where document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subset_members join document_subsets on document_subset_members.document_subset_id = document_subsets.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'",
          "select document_object_id from document_subset_members join document_subsets on document_subsets.document_subset_id = document_subset_members.document_subset_id where document_subsets.document_subset_name = 'Best for 2000'"
        ]
      ]
    },
    {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
      "infer_predictions": [
        [
          "select document_subsets.document_subset_name , document_subset_members.document_object_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subsets.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.related_document_object_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id"
        ]
      ]
    },
    {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "gold": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id",
      "infer_predictions": [
        [
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_name , document_subsets.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subsets.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subsets.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id , count ( * ) from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id",
          "select document_subsets.document_subset_name , document_subset_members.document_subset_id from document_subsets join document_subset_members on document_subsets.document_subset_id = document_subset_members.document_subset_id group by document_subset_members.document_subset_id"
        ]
      ]
    },
    {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "gold": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
      "infer_predictions": [
        [
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.parent_document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where document_objects.owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
      "infer_predictions": [
        [
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on documents_in_collections.document_object_id = document_objects.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from document_objects join documents_in_collections on document_objects.document_object_id = documents_in_collections.document_object_id join collections on documents_in_collections.collection_id = collections.collection_id where document_objects.owner = 'Ransom'",
          "select collections.collection_name from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id join document_objects on document_objects.parent_document_object_id = documents_in_collections.document_object_id where document_objects.owner = 'Ransom'"
        ]
      ]
    },
    {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select count ( * ) , document_object_id from documents_in_collections group by document_object_id",
          "select count ( * ) , document_object_id from documents_in_collections",
          "select count ( distinct document_object_id ) , collection_id from documents_in_collections",
          "select count ( distinct document_object_id ) , collection_id from documents_in_collections group by collection_id",
          "select count ( * ) , document_object_id from documents_in_collections group by document_object_id",
          "select document_object_id , count ( * ) from documents_in_collections group by document_object_id"
        ]
      ]
    },
    {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
      "infer_predictions": [
        [
          "select document_object_id , count ( * ) from documents_in_collections group by document_object_id",
          "select document_object_id , count ( distinct collection_id ) from documents_in_collections group by document_object_id",
          "select count ( * ) , document_object_id from documents_in_collections group by document_object_id",
          "select document_object_id , count ( * ) from documents_in_collections group by document_object_id",
          "select document_Object_id , count ( * ) from documents_in_collections group by document_Object_id"
        ]
      ]
    },
    {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select document_object_id from documents_in_collections where collection_id = 'Best'"
        ]
      ]
    },
    {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from documents_in_collections join collections on documents_in_collections.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by documents_in_collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_name order by count ( * ) desc limit 1",
          "select collections.collection_name , collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by documents_in_collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' group by documents_in_collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_name order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id group by collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' group by collections.collection_id order by count ( * ) desc limit 1",
          "select collections.collection_name , documents_in_collections.collection_id , count ( * ) from collections join documents_in_collections on collections.collection_id = documents_in_collections.collection_id where collections.collection_name = 'Best' group by collections.collection_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where collection_name = 'Best' )",
          "select collection_name from collections where parent_collection_id = ( select collection_id from collections where collection_name = 'Best' )",
          "select collection_name from collections where collection_id = ( select collection_id from collection_subset_members where collection_name = 'Best' )",
          "select collection_name from collections where collection_id = ( select collection_id from collections where collection_name = 'Best' )",
          "select collection_name from collections where collection_id = ( select collection_id from collection_subset_members where collection_id = 'Best' )",
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where related_collection_id = 1 )",
          "select collection_name from collections where collection_name = ( select collection_name from collections where parent_collection_id = 'Best' )",
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where collection_id = 'Best' )"
        ]
      ]
    },
    {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where collection_name = 'Best' )",
          "select collection_name from collections where collection_id = ( select collection_id from collection_subset_members where collection_name = 'Best' )",
          "select collection_name from collections where collection_id = ( select collection_id from collection_subset_members where collection_id = 'Best' )",
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where collection_id = 'Best' )",
          "select collection_name from collections where parent_collection_id = ( select collection_id from collection_subset_members where related_collection_id = 1 )",
          "select collections.collection_name from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.related_collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select count ( distinct collection_id ) from collections where collection_name = 'Best'",
          "select count ( distinct collection_subset_members.related_collection_id ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct collection_subset_members.collection_id ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct collection_name ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( * ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct collections.collection_name ) from collections join collection_subset_members on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'",
          "select count ( distinct collection_subset_members.collection_id ) from collection_subset_members join collections on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_subsets.collection_subset_name from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id join collections on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select collection_subsets.collection_subset_name from collections join collection_subsets on collections.collection_id = collection_subsets.collection_subset_id where collections.collection_name = 'Best'",
          "select collection_subsets.collection_subset_name from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subsets.collection_subset_id join collections on collection_subset_members.collection_id = collections.collection_id where collections.collection_name = 'Best'",
          "select collection_subsets.collection_subset_name from collection_subsets join collection_subset_members on collection_subsets.collection_subset_id = collection_subset_members.collection_subset_id join collections on collections.collection_id = collection_subset_members.collection_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "gold": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
      "infer_predictions": [
        [
          "select collection_subsets.collection_subset_name from collections join collection_subsets on collections.collection_id = collection_subsets.collection_subset_id where collections.collection_name = 'Best'",
          "select distinct collection_subsets.collection_subset_name from collections join collection_subsets on collections.collection_id = collection_subsets.collection_subset_id where collections.collection_name = 'Best'",
          "select collection_subsets.collection_subset_name from collection_subsets join collections on collection_subsets.collection_subset_id = collections.collection_id where collections.collection_name = 'Best'",
          "select distinct collection_subset_name from collections join collection_subsets on collections.collection_id = collection_subsets.collection_subset_id where collections.collection_name = 'Best'"
        ]
      ]
    },
    {
      "id": 741,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
      "infer_predictions": [
        [
          "select count ( * ) from songs where name like '%Love%'"
        ]
      ]
    },
    {
      "id": 742,
      "db_id": "sing_contest",
      "gold": "SELECT name FROM songs ORDER BY name",
      "infer_predictions": [
        [
          "select name from songs order by name asc",
          "select name from Songs order by name asc"
        ]
      ]
    },
    {
      "id": 743,
      "db_id": "sing_contest",
      "gold": "select name , language from songs",
      "infer_predictions": [
        [
          "select name , language from songs"
        ]
      ]
    },
    {
      "id": 744,
      "db_id": "sing_contest",
      "gold": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
      "infer_predictions": [
        [
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score",
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score",
          "select max ( voice_sound_quality ) , min ( voice_sound_quality ) from performance_score"
        ]
      ]
    },
    {
      "id": 745,
      "db_id": "sing_contest",
      "gold": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
      "infer_predictions": [
        [
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from participants join performance_score on participants.id = performance_score.participant_id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo , stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'",
          "select performance_score.voice_sound_quality , performance_score.rhythm_tempo and performance_score.stage_presence from performance_score join participants on performance_score.participant_id = participants.id where participants.name = 'Freeway'"
        ]
      ]
    },
    {
      "id": 746,
      "db_id": "sing_contest",
      "gold": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
      "infer_predictions": [
        [
          "select id , language , original_artist from songs where name != 'Love'",
          "select id , language , original_artist from songs except select songs.id , songs.language , songs.original_artist from performance_score join songs on performance_score.songs_id = songs.id where name = 'Love'",
          "select id , language , original_artist from songs except select songs.id , songs.language , songs.original_artist from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.name = 'Love'",
          "select id , language , original_artist from songs except select songs.id , songs.language , songs.original_artist from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where participants.name = 'Love'"
        ]
      ]
    },
    {
      "id": 747,
      "db_id": "sing_contest",
      "gold": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
      "infer_predictions": [
        [
          "select name , original_artist from songs where english_translation = 'All the streets of love'",
          "select name , original_artist from songs where english_translation = 'All the street of love'",
          "select name , original_artist from Songs where english_translation = 'All the streets of love'",
          "select name , original_artist from songs where English_translation = 'All the streets of love'",
          "select name , original_artist from songs where english_translation = 'All the streets are full of love'",
          "select name , original_artist from songs where english_translation = 'All the streets are lit'"
        ]
      ]
    },
    {
      "id": 748,
      "db_id": "sing_contest",
      "gold": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
      "infer_predictions": [
        [
          "select distinct performance_score.stage_presence from performance_score join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select distinct performance_score.stage_presence from songs join performance_score on songs.id = performance_score.songs_id where songs.language = 'English'"
        ]
      ]
    },
    {
      "id": 749,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id group by participants.id having count ( * ) >= 2",
          "select performance_score.participant_id , participants.name from performance_score join participants on performance_score.participant_id = participants.id group by performance_score.participant_id having count ( * ) >= 2",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id group by participants.id having count ( * ) >= 2",
          "select performance_score.participant_id , participants.name from performance_score join participants on performance_score.participant_id = participants.id group by participants.id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 750,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
      "infer_predictions": [
        [
          "select performance_score.participant_id , participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id group by performance_score.participant_id order by count ( * ) asc",
          "select participants.id , participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id group by participants.id order by count ( * ) asc",
          "select participants.id , participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id group by participants.id order by count ( * ) asc",
          "select participants.id , participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id group by performance_score.participant_id order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 751,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
      "infer_predictions": [
        [
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality = 5 or performance_score.rhythm_tempo = 5",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id where performance_score.voice_sound_quality = 5 or performance_score.rhythm_tempo = 5",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '5'",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '5'",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '4'",
          "select participants.id , participants.name from performance_score join participants on performance_score.participant_id = participants.id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '4'",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality = '5' or performance_score.rhythm_tempo = '6'",
          "select participants.id , participants.name from participants join performance_score on participants.id = performance_score.participant_id where performance_score.voice_sound_quality >= 5 or performance_score.rhythm_tempo < 5"
        ]
      ]
    },
    {
      "id": 752,
      "db_id": "sing_contest",
      "gold": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
      "infer_predictions": [
        [
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'English'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.language = 'english_translation'",
          "select performance_score.voice_sound_quality from performance_score join songs on performance_score.songs_id = songs.id where songs.name = 'The Balkan Girls' and songs.english_translation = 'English'"
        ]
      ]
    },
    {
      "id": 753,
      "db_id": "sing_contest",
      "gold": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select songs.id , songs.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id group by songs.id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id group by songs.id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join songs on performance_score.songs_id = songs.id group by songs.id order by count ( * ) desc limit 1",
          "select performance_score.songs_id , songs.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id group by performance_score.songs_id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id group by performance_score.songs_id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from songs join performance_score on songs.id = performance_score.songs_id group by songs.id order by count ( * ) desc limit 1",
          "select performance_score.songs_id , songs.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id group by performance_score.songs_id order by count ( * ) desc limit 1",
          "select songs.id , songs.name from songs join performance_score on songs.id = performance_score.songs_id join participants on performance_score.participant_id = participants.id group by songs.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 754,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
      "infer_predictions": [
        [
          "select count ( * ) from performance_score where stage_presence < 7 or stage_presence > 9",
          "select count ( * ) from performance_score where stage_presence <= 7 or stage_presence > 9",
          "select count ( * ) from performance_score where stage_presence < 7 or stage_presence > 10"
        ]
      ]
    },
    {
      "id": 755,
      "db_id": "sing_contest",
      "gold": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
      "infer_predictions": [
        [
          "select count ( * ) from songs where id not in ( select songs_id from performance_score )",
          "select count ( * ) from songs where id not in ( select Songs_id from performance_score )",
          "select count ( distinct name ) from songs where id not in ( select songs_id from performance_score )",
          "select count ( * ) from songs where id not in ( select songs_id from performance_score )"
        ]
      ]
    },
    {
      "id": 756,
      "db_id": "sing_contest",
      "gold": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
      "infer_predictions": [
        [
          "select avg ( performance_score.rhythm_tempo ) , songs.language from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select songs.language , avg ( performance_score.rhythm_tempo ) from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select language , avg ( performance_score.rhythm_tempo ) from performance_score join songs on performance_score.songs_id = songs.id group by songs.language",
          "select songs.language , avg ( performance_score.rhythm_tempo ) from performance_score join songs on performance_score.songs_id = songs.id group by songs.language"
        ]
      ]
    },
    {
      "id": 757,
      "db_id": "sing_contest",
      "gold": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
      "infer_predictions": [
        [
          "select distinct participants.name from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select distinct participants.name from participants join performance_score on participants.id = performance_score.participant_id join songs on songs.id = performance_score.songs_id where songs.language = 'English'",
          "select distinct participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'English'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id where songs.language = 'English'",
          "select distinct participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select distinct participants.name from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.english_translation = 'English'",
          "select distinct participants.name from performance_score join participants on performance_score.participant_id = participants.id join songs on performance_score.songs_id = songs.id where songs.english_translation = 'English'",
          "select distinct participants.name from performance_score join songs on performance_score.songs_id = songs.id join participants on performance_score.participant_id = participants.id where songs.english_translation = 'English'"
        ]
      ]
    },
    {
      "id": 758,
      "db_id": "sing_contest",
      "gold": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
      "infer_predictions": [
        [
          "select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'English_translation'",
          "select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'English'",
          "select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from participants join performance_score on participants.id = performance_score.participant_id join songs on performance_score.songs_id = songs.id where songs.language = 'English_translation'",
          "select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on performance_score.songs_id = songs.id where songs.language = 'English_translation'",
          "select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on songs.id = performance_score.songs_id where songs.language = 'Croatian' intersect select participants.name , participants.popularity from performance_score join participants on performance_score.participant_id = participants.id join songs on performance_score.songs_id = songs.id where songs.language = 'English'"
        ]
      ]
    },
    {
      "id": 759,
      "db_id": "sing_contest",
      "gold": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
      "infer_predictions": [
        [
          "select name from songs where name like '%Is%'",
          "select distinct name from songs where name like '%Is%'",
          "select name from songs where name like '%I%'"
        ]
      ]
    },
    {
      "id": 760,
      "db_id": "sing_contest",
      "gold": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc",
      "infer_predictions": [
        [
          "select songs.original_artist from performance_score join songs on performance_score.songs_id = songs.id where performance_score.rhythm_tempo > 5 order by voice_sound_quality desc",
          "select songs.original_artist from performance_score join songs on performance_score.songs_id = songs.id where performance_score.rhythm_tempo > 5 order by performance_score.voice_sound_quality desc",
          "select songs.original_artist from songs join performance_score on songs.id = performance_score.songs_id where performance_score.rhythm_tempo > 5 order by voice_sound_quality desc",
          "select songs.original_artist from songs join performance_score on songs.id = performance_score.songs_id where performance_score.rhythm_tempo > 5 order by performance_score.voice_sound_quality desc",
          "select songs.original_artist from performance_score join songs on performance_score.songs_id = songs.id where performance_score.rhythm_tempo > 5 order by performance_score.voice_sound_quality desc",
          "select songs.original_artist from performance_score join songs on performance_score.songs_id = songs.id where performance_score.rhythm_tempo > 5 order by voice_sound_quality desc"
        ]
      ]
    },
    {
      "id": 761,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city",
          "select count ( * ) from city",
          "select count ( * ) from city",
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 762,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city",
          "select count ( * ) from city",
          "select count ( * ) from city",
          "select count ( * ) from city"
        ]
      ]
    },
    {
      "id": 763,
      "db_id": "address_1",
      "gold": "select distinct state from city",
      "infer_predictions": [
        [
          "select distinct state from city",
          "select distinct ( state ) from city",
          "select distinct state from city",
          "select distinct state from city"
        ]
      ]
    },
    {
      "id": 764,
      "db_id": "address_1",
      "gold": "SELECT DISTINCT state FROM City",
      "infer_predictions": [
        [
          "select distinct state from city",
          "select count ( distinct state ) from city",
          "select distinct ( state ) from city"
        ]
      ]
    },
    {
      "id": 765,
      "db_id": "address_1",
      "gold": "SELECT count(DISTINCT country) FROM City",
      "infer_predictions": [
        [
          "select count ( distinct country ) from city",
          "select count ( * ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city"
        ]
      ]
    },
    {
      "id": 766,
      "db_id": "address_1",
      "gold": "SELECT count(DISTINCT country) FROM City",
      "infer_predictions": [
        [
          "select count ( * ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city",
          "select count ( distinct country ) from city"
        ]
      ]
    },
    {
      "id": 767,
      "db_id": "address_1",
      "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
      "infer_predictions": [
        [
          "select city_name , city_code , state , country from city",
          "select city.city_name , city.city_code , city.state , city.country from city join direct_distance on city.city_code = direct_distance.city1_code",
          "select city.city_name , city.city_code , state , country from city",
          "select city.city_name , city.city_code , city.state , city.country from city join direct_distance on city.city_code = direct_distance.city2_code",
          "select city.city_name , city.city_code , city.state , country from city join direct_distance on city.city_code = direct_distance.city1_code"
        ]
      ]
    },
    {
      "id": 768,
      "db_id": "address_1",
      "gold": "SELECT city_name ,  city_code ,  state ,  country FROM City",
      "infer_predictions": [
        [
          "select city_name , city_code , state , country from city",
          "select city.city_name , city.city_code , city.state , city.country from city join direct_distance on city.city_code = direct_distance.city1_code",
          "select city.city_name , city.city_code , state , country from city",
          "select city.city_name , city.city_code , city.state , city.country from city join direct_distance on city.city_code = direct_distance.city2_code"
        ]
      ]
    },
    {
      "id": 769,
      "db_id": "address_1",
      "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Boston'",
          "select latitude , longitude from city where city_name = 'Baltipool'",
          "select latitude , longitude from city where city_name = 'Baltitown'"
        ]
      ]
    },
    {
      "id": 770,
      "db_id": "address_1",
      "gold": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select latitude , longitude from city where city_name = 'Baltimore'",
          "select latitude , longitude from city where city_name = 'Boston'",
          "select latitude , longitude from city where city_name = 'Baltipool'",
          "select latitude , longitude from city where city_name = 'Baltitown'"
        ]
      ]
    },
    {
      "id": 771,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
      "infer_predictions": [
        [
          "select city_name from city where state = 'PA'",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where city.state = 'PA'"
        ]
      ]
    },
    {
      "id": 772,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE state  =  \"PA\"",
      "infer_predictions": [
        [
          "select city_name from city where state = 'PA'",
          "select city_name from city where state like '%PA%'",
          "select city_name from city where state = 'PA' != 'Pennsylvania'",
          "select city_name from city where state = 'PA' != 'Tennessee'",
          "select city_name from city where state = 'PA' != 'PA'",
          "select city_name from city where state = 'PA' != 'TX'"
        ]
      ]
    },
    {
      "id": 773,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city where country = 'Canada'",
          "select count ( distinct city_code ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada' != 'United States'",
          "select count ( * ) from city where country = 'Canada '",
          "select count ( * ) from city where country = 'Canada' != 0",
          "select count ( * ) from city where country = 'Canada'"
        ]
      ]
    },
    {
      "id": 774,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada' != 'United States'",
          "select count ( distinct city_code ) from city where country = 'Canada'",
          "select count ( * ) from city where country = 'Canada '",
          "select count ( * ) from city where country = \"Canada\"",
          "select count ( * ) from city where country = 'Canada' != 'United States of America'"
        ]
      ]
    },
    {
      "id": 775,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
      "infer_predictions": [
        [
          "select city_name from city where country = 'USA' order by latitude asc",
          "select city_name from city where country = 'United States' order by latitude asc",
          "select city_name from city where state = 'USA' order by latitude asc",
          "select city_name from city where country = 'USA' order by latitude asc"
        ]
      ]
    },
    {
      "id": 776,
      "db_id": "address_1",
      "gold": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
      "infer_predictions": [
        [
          "select city_name from city where country = 'USA' order by latitude asc",
          "select city_name from city where country = 'United States' order by latitude asc",
          "select city_name from city where state = 'USA' order by latitude asc"
        ]
      ]
    },
    {
      "id": 777,
      "db_id": "address_1",
      "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
      "infer_predictions": [
        [
          "select state , count ( * ) from city group by state"
        ]
      ]
    },
    {
      "id": 778,
      "db_id": "address_1",
      "gold": "SELECT state ,  count(*) FROM City GROUP BY state",
      "infer_predictions": [
        [
          "select count ( * ) , state from city group by state",
          "select state , count ( * ) from city group by state",
          "select count ( * ) , state from city group by state",
          "select count ( * ) , state from city group by state",
          "select count ( * ) , state from city group by State",
          "select count ( * ) , state from City group by state",
          "select count ( * ) , state from city group by city.state"
        ]
      ]
    },
    {
      "id": 779,
      "db_id": "address_1",
      "gold": "select country ,  count(*) from city group by country",
      "infer_predictions": [
        [
          "select country , count ( * ) from city group by country",
          "select country , count ( * ) , city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code group by country",
          "select country , count ( * ) , city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code group by city.country"
        ]
      ]
    },
    {
      "id": 780,
      "db_id": "address_1",
      "gold": "SELECT country ,  count(*) FROM City GROUP BY country",
      "infer_predictions": [
        [
          "select count ( * ) , country from city group by country",
          "select count ( * ) , city.country from city join direct_distance on city.city_code = direct_distance.city1_code group by city.country"
        ]
      ]
    },
    {
      "id": 781,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select state from city group by state having count ( * ) >= 2",
          "select distinct state from city group by state having count ( * ) >= 2",
          "select state from ( select state from city group by state having count ( * ) >= 2 )",
          "select state from city group by state having count ( * ) >= 2",
          "select state from city group by state having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 782,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select state from city group by state having count ( * ) >= 2",
          "select city.state from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city1_code having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 783,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from city group by state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 784,
      "db_id": "address_1",
      "gold": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from city group by state order by count ( * ) desc limit 1",
          "select state from city group by state order by count ( * ) desc limit 1",
          "select state from city group by city.state order by count ( * ) desc limit 1",
          "select state from city group by state order by count ( * ) desc limit 1",
          "select state from city group by state order by count ( * ) desc limit 1",
          "select state from city group by state order by count ( * ) desc limit 10",
          "select state from city group by state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 785,
      "db_id": "address_1",
      "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select country from city group by country order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 786,
      "db_id": "address_1",
      "gold": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
      "infer_predictions": [
        [
          "select country from city group by country order by count ( * ) asc limit 1",
          "select city.country from city join direct_distance on city.city_code = direct_distance.city1_code group by city.country order by count ( * ) asc limit 1",
          "select city.country from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city1_code order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 787,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
      "infer_predictions": [
        [
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Maryland'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where state = 'MD'",
          "select student.lname , student.fname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Md.'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Md'",
          "select student.fname , Student.lname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select student.fname , student.lname from City join student on city.city_code = student.city_code where city.state = 'MD'"
        ]
      ]
    },
    {
      "id": 788,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
      "infer_predictions": [
        [
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Maryland'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Md.'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'Md'",
          "select student.lname , student.fname from city join student on city.city_code = student.city_code where city.state = 'MD'",
          "select student.fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'MO'",
          "select student. fname , student.lname from city join student on city.city_code = student.city_code where city.state = 'MD'"
        ]
      ]
    },
    {
      "id": 789,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where city.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'Chinese'",
          "select count ( distinct student.city_code ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'"
        ]
      ]
    },
    {
      "id": 790,
      "db_id": "address_1",
      "gold": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
      "infer_predictions": [
        [
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where city.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where country = 'China'",
          "select count ( * ) from student join city on student.city_code = city.city_code where country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'Chinese'",
          "select count ( distinct student.city_code ) from city join student on city.city_code = student.city_code where city.country = 'China'",
          "select count ( * ) from city join student on city.city_code = student.city_code where city.country = 'China' and student.city_code = 'Shanghai'"
        ]
      ]
    },
    {
      "id": 791,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select fname , major from student where city_code = 'Baltimore'",
          "select student.fname , student.major from student join city on student.city_code = city.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Boston'",
          "select student.lname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from City join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from City join student on City.city_code = student.city_code where city.city_name = 'Baltimore'"
        ]
      ]
    },
    {
      "id": 792,
      "db_id": "address_1",
      "gold": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
      "infer_predictions": [
        [
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select fname , major from student where city_code = 'Baltimore'",
          "select fname , major from student join city on student.city_code = city.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from student join city on student.city_code = city.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Boston'",
          "select student.lname , student.major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select fname , major from city join student on city.city_code = student.city_code where city.city_name = 'Baltimore'",
          "select student.fname , student.major from City join student on city.city_code = student.city_code where city.city_name = 'Baltimore'"
        ]
      ]
    },
    {
      "id": 793,
      "db_id": "address_1",
      "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
      "infer_predictions": [
        [
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select city.country , count ( * ) from student join city on student.city_code = city.city_code group by city.country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by student.city_code",
          "select count ( * ) , city.country from city join student on city.city_code = student.city_code group by city.country",
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select country , count ( * ) from student join city on student.city_code = city.city_code group by country"
        ]
      ]
    },
    {
      "id": 794,
      "db_id": "address_1",
      "gold": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
      "infer_predictions": [
        [
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by city.country",
          "select city.country , count ( * ) from student join city on student.city_code = city.city_code group by city.country",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by student.city_code",
          "select city.country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by country",
          "select country , count ( * ) from student join city on student.city_code = city.city_code group by country",
          "select count ( * ) , city.country from city join student on city.city_code = student.city_code group by city.country",
          "select country , count ( * ) from city join student on city.city_code = student.city_code group by city.country"
        ]
      ]
    },
    {
      "id": 795,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
      "infer_predictions": [
        [
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by city.city_name",
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by student.city_code",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by student.city_code",
          "select count ( * ) , city.city_name from student join city on student.city_code = city.city_code group by student.city_code",
          "select city.city_name , count ( * ) from student join city on student.city_code = city.city_code group by student.city_code",
          "select count ( * ) , city.city_name from student join city on student.city_code = city.city_code group by city.city_name",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by city.city_name"
        ]
      ]
    },
    {
      "id": 796,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
      "infer_predictions": [
        [
          "select city.city_name , count ( * ) from student join city on student.city_code = city.city_code group by student.city_code",
          "select city.city_name , count ( * ) from city join student on city.city_code = student.city_code group by student.city_code",
          "select city.city_name , count ( * ) from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code group by student.city_code",
          "select city.city_name , count ( * ) from direct_distance join city on direct_distance.city1_code = city.city_code join student on student.city_code = city.city_code group by student.city_code",
          "select city.city_name , count ( * ) from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = city.city_code group by student.city_code",
          "select count ( * ) , city.city_name from city join student on city.city_code = student.city_code group by student.city_code",
          "select city.city_name , count ( * ) from student join city on student.city_code = city.city_code group by city.city_name",
          "select city.city_name , count ( * ) from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = student.city_code group by student.city_code"
        ]
      ]
    },
    {
      "id": 797,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code group by student.city_code order by count ( * ) desc limit 1",
          "select city.state from city join student on city.city_code = student.city_code group by city.state order by count ( * ) desc limit 1",
          "select city.state from student join city on student.city_code = city.city_code group by student.city_code order by count ( * ) desc limit 1",
          "select city.state from city join student on city.city_code = student.city_code group by state order by count ( * ) desc limit 1",
          "select state from city join student on city.city_code = student.city_code group by state order by count ( * ) desc limit 1",
          "select city.state from student join city on student.city_code = city.city_code group by city.state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 798,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code group by student.city_code order by count ( * ) desc limit 1",
          "select city.state from student join city on student.city_code = city.city_code group by student.city_code order by count ( * ) desc limit 1",
          "select city.state from city join student on city.city_code = student.city_code group by city.state order by count ( * ) desc limit 1",
          "select state from city join student on city.city_code = student.city_code group by state order by count ( * ) desc limit 1",
          "select city.state from city join student on city.city_code = student.city_code group by state order by count ( * ) desc limit 1",
          "select city.state from student join city on student.city_code = city.city_code group by city.state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 799,
      "db_id": "address_1",
      "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select city.country from city join student on city.city_code = student.city_code group by student.city_code order by count ( * ) asc limit 1",
          "select city.country from student join city on student.city_code = city.city_code group by student.city_code order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.country order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.city_code order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.city_name order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by country order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 800,
      "db_id": "address_1",
      "gold": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select city.country from city join student on city.city_code = student.city_code group by student.city_code order by count ( * ) asc limit 1",
          "select city.country from student join city on student.city_code = city.city_code group by student.city_code order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.country order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.city_code order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by city.city_name order by count ( * ) asc limit 1",
          "select city.country from city join student on city.city_code = student.city_code group by country order by count ( * ) asc limit 1",
          "select city.country from student join city on student.city_code = city.city_code group by city.country order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 801,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by city.city_name having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = city.city_code group by student.city_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 802,
      "db_id": "address_1",
      "gold": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
      "infer_predictions": [
        [
          "select city.city_name from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on student.city_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from city join student on city.city_code = student.city_code group by city.city_name having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = city.city_code group by student.city_code having count ( * ) >= 3",
          "select city.city_name from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = student.city_code group by student.city_code having count ( * ) >= 3"
        ]
      ]
    },
    {
      "id": 803,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) > 5",
          "select state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.city_code having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select city.state from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) > 5",
          "select state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5"
        ]
      ]
    },
    {
      "id": 804,
      "db_id": "address_1",
      "gold": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code group by student.city_code having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.state having count ( * ) > 5",
          "select city.state from student join city on student.city_code = city.city_code group by student.city_code having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by city.city_code having count ( * ) > 5",
          "select state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5",
          "select city.state from city join student on city.city_code = student.city_code group by state having count ( * ) > 5"
        ]
      ]
    },
    {
      "id": 805,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where city_code not in ( select city_code from city where country = 'USA' )",
          "select stuid from student where city_code != 'USA'",
          "select stuid from student where city_code not in ( select city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code join student on direct_distance.city2_code = student.city_code where city.country = 'USA' )",
          "select stuid from student where city_code not in ( select city_code from city where country = 'United States' )",
          "select stuid from student where city_code not in ( select city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code join student on direct_distance.city2_code = student.city_code where city.country = 'USA' )"
        ]
      ]
    },
    {
      "id": 806,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where city_code not in ( select city_code from city where country = 'USA' )",
          "select stuid from student where city_code != 'USA'",
          "select stuid from student where city_code not in ( select city_code from city where country = 'United States' )",
          "select stuid from student where city_code not in ( select city_code from city where country = 'USA' )",
          "select stuid from student where city_code not in ( select city_code from city where country = 'USA' )",
          "select stuid from student where city_code not in ( select city_code from city where country = 'US' )",
          "select stuid from student where city_code not in ( select city_code from city where country != 'USA' )"
        ]
      ]
    },
    {
      "id": 807,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
      "infer_predictions": [
        [
          "select student.stuid from city join student on city.city_code = student.city_code where city.state = 'PA' and student.sex = 'F'",
          "select student.stuid from city join student on city.city_code = student.city_code where student.sex = 'F' and city.state = 'PA'",
          "select student.stuid from city join student on city.city_code = student.city_code where sex = 'F' and state = 'PA'"
        ]
      ]
    },
    {
      "id": 808,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
      "infer_predictions": [
        [
          "select student.stuid from city join student on city.city_code = student.city_code where city.state = 'PA' and student.sex = 'F'",
          "select student.stuid from city join student on city.city_code = student.city_code where student.sex = 'F' and city.state = 'PA'",
          "select student.stuid from city join student on city.city_code = student.city_code where city.state = 'PA' and sex = 'F'",
          "select student.stuid from city join student on city.city_code = student.city_code where state = 'PA' and sex = 'F'"
        ]
      ]
    },
    {
      "id": 809,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where sex = 'M' and city_code != 'USA'",
          "select stuid from student where sex = 'M' and city_code != 'USA' except select stuid from student where sex = 'F' and city_code != 'USA'",
          "select stuid from student where sex = 'M' and city_code not in ( select city_code from direct_distance join city on direct_distance.city1_code = city.city_code )",
          "select stuid from student where sex = 'M' and city_code not in ( select city_code from direct_distance join city on direct_distance.city1_code = city.city_code )",
          "select stuid from student where sex = 'M' and city_code != 'USA' except select stuid from student where sex = 'F' and city_code = 'USA'"
        ]
      ]
    },
    {
      "id": 810,
      "db_id": "address_1",
      "gold": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
      "infer_predictions": [
        [
          "select stuid from student where sex = 'M' except select stuid from student join city on student.city_code = city.city_code where city.country = 'USA'",
          "select stuid from student where sex = 'M' except select stuid from student join city on student.city_code = city.city_code where country = 'USA'"
        ]
      ]
    },
    {
      "id": 811,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
      "infer_predictions": [
        [
          "select distance from direct_distance where city2_code = 'BAL' and city1_code = 'CHI'",
          "select distance from direct_distance where city2_code = 'BAL' union select distance from direct_distance where city1_code = 'CHI'",
          "select distance from direct_distance where city1_code = 'BAL' and city2_code = 'CHI'"
        ]
      ]
    },
    {
      "id": 812,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
      "infer_predictions": [
        [
          "select distance from direct_distance where city2_code = 'BAL' and city1_code = 'CHI'",
          "select distance from direct_distance where city2_code = 'BAL' union select distance from direct_distance where city1_code = 'CHI'",
          "select distance from direct_distance where city1_code = 'BAL' and city2_code = 'CHI'"
        ]
      ]
    },
    {
      "id": 813,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
      "infer_predictions": [
        [
          "select distance from direct_distance where city2_code = 'Boston' and city1_code = 'Newark'",
          "select distance from direct_distance where city1_code = 'Boston' and city2_code = 'Newark'",
          "select direct_distance.distance from city join direct_distance on city.city_code = direct_distance.city2_code where city.city_name = 'Boston' and city.city_name = 'Newark'"
        ]
      ]
    },
    {
      "id": 814,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
      "infer_predictions": [
        [
          "select distance from direct_distance where city2_code = 'Boston' and city1_code = 'Newark'",
          "select distance from direct_distance where city1_code = 'Boston' and city2_code = 'Newark'",
          "select distance from direct_distance where city2_code = 'Boston' union select distance from direct_distance where city1_code = 'Newark'"
        ]
      ]
    },
    {
      "id": 815,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
      "infer_predictions": [
        [
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select distance , avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance"
        ]
      ]
    },
    {
      "id": 816,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
      "infer_predictions": [
        [
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select distance , avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) and max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) and max ( distance ) from direct_distance",
          "select avg ( distance ) , min ( distance ) , max ( distance ) from direct_distance"
        ]
      ]
    },
    {
      "id": 817,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city2_code from direct_distance order by distance desc limit 2",
          "select city1_code from direct_distance order by distance desc limit 2"
        ]
      ]
    },
    {
      "id": 818,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city1_code from direct_distance order by distance desc limit 1",
          "select city1_code from direct_distance order by distance desc limit 3",
          "select city1_code from direct_distance order by distance desc limit 10",
          "select city1_code from direct_distance order by distance desc limit 2",
          "select city2_code from direct_distance order by distance desc limit 1",
          "select city1_code from direct_distance order by distance desc limit 4"
        ]
      ]
    },
    {
      "id": 819,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
      "infer_predictions": [
        [
          "select city2_code from direct_distance where distance > ( select avg ( distance ) from direct_distance )",
          "select city1_code from direct_distance where distance > ( select avg ( distance ) from direct_distance )",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance > ( select avg ( distance ) from direct_distance )"
        ]
      ]
    },
    {
      "id": 820,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
      "infer_predictions": [
        [
          "select city1_code from direct_distance where distance > ( select avg ( distance ) from direct_distance )",
          "select city2_code from direct_distance where distance > ( select avg ( distance ) from direct_distance )"
        ]
      ]
    },
    {
      "id": 821,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
      "infer_predictions": [
        [
          "select city2_code from direct_distance where distance < 1000",
          "select city1_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance < 1000",
          "select city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance < 1000 intersect select city_code from city",
          "select city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance < 1000",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance < 1000"
        ]
      ]
    },
    {
      "id": 822,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
      "infer_predictions": [
        [
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance < 1000",
          "select city_code from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance < 1000",
          "select city1_code from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance < 1000",
          "select city.city_code from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance < 1000"
        ]
      ]
    },
    {
      "id": 823,
      "db_id": "address_1",
      "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
      "infer_predictions": [
        [
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'",
          "select sum ( distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'BAL'",
          "select sum ( distance ) from direct_distance where city1_code = 'BAL' and city2_code = 'NYC'",
          "select sum ( distance ) from direct_distance where city1_code = 'BAL'",
          "select sum ( distance ) from direct_distance where city1_code = 'BAL' and city2_code = 'City'",
          "select sum ( distance ) from direct_distance where city1_code = 'BAL' and city2_code = 'BAL'"
        ]
      ]
    },
    {
      "id": 824,
      "db_id": "address_1",
      "gold": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
      "infer_predictions": [
        [
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'BAL'",
          "select sum ( distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'BAL'",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Baltic Sea'",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Baltic Seaport'",
          "select sum ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'BAL'",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Balaclava'",
          "select sum ( distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Baltic Sea'",
          "select sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Baltimore'"
        ]
      ]
    },
    {
      "id": 825,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 826,
      "db_id": "address_1",
      "gold": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
      "infer_predictions": [
        [
          "select avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance where city1_code = 'Boston'",
          "select avg ( distance ) from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Boston'",
          "select avg ( distance ) from direct_distance where city1_code = 'Boston' and city2_code = 'Chicago'"
        ]
      ]
    },
    {
      "id": 827,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
      "infer_predictions": [
        [
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'chicago' )"
        ]
      ]
    },
    {
      "id": 828,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
      "infer_predictions": [
        [
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Chicago' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'chicago' )"
        ]
      ]
    },
    {
      "id": 829,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_name = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_name = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city_name from city join direct_distance on city.city_code = direct_distance.city2_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_name = 'Boston' )"
        ]
      ]
    },
    {
      "id": 830,
      "db_id": "address_1",
      "gold": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select distance from direct_distance where city_code = 'Boston' order by distance desc limit 1 )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select min ( distance ) from direct_distance where city_code = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( distance ) from direct_distance where city_name = 'Boston' )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = ( select distance from direct_distance where city_name = 'Boston' order by distance desc limit 1 )",
          "select city.city_name from city join direct_distance on city.city_code = direct_distance.city1_code where direct_distance.distance = 1001 and city.city_name = 'Boston' order by direct_distance.distance desc limit 1"
        ]
      ]
    },
    {
      "id": 831,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
      "infer_predictions": [
        [
          "select city1_code , sum ( distance ) from direct_distance group by city1_code",
          "select city1_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city.city_code , sum ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code group by city.city_code"
        ]
      ]
    },
    {
      "id": 832,
      "db_id": "address_1",
      "gold": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
      "infer_predictions": [
        [
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_code",
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city1_code",
          "select city.city_code , sum ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_code",
          "select city.city_code , sum ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code group by city.city_code"
        ]
      ]
    },
    {
      "id": 833,
      "db_id": "address_1",
      "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
      "infer_predictions": [
        [
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city1_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by direct_distance.city2_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by direct_distance.city1_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city2_code"
        ]
      ]
    },
    {
      "id": 834,
      "db_id": "address_1",
      "gold": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
      "infer_predictions": [
        [
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city1_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by city.city_name",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by direct_distance.city2_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city2_code group by direct_distance.city1_code",
          "select city.city_name , avg ( direct_distance.distance ) from city join direct_distance on city.city_code = direct_distance.city1_code group by direct_distance.city2_code"
        ]
      ]
    },
    {
      "id": 835,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 836,
      "db_id": "address_1",
      "gold": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
      "infer_predictions": [
        [
          "select direct_distance.distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Linda Smith' intersect select direct_distance.distance from city join direct_distance on city.city_code = direct_distance.city1_code where city.city_name = 'Tracy Kim'",
          "select direct_distance.distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = city.city_code where student.lname = 'Linda Smith' intersect select direct_distance.distance from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = city.city_code where student.fname = 'Tracy Kim'"
        ]
      ]
    },
    {
      "id": 837,
      "db_id": "address_1",
      "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        [
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Linda Smith' )",
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Lindasmith' )",
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Linda Smith' )",
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city2_code = city.city_code where city.city_name = 'Linda smith' )",
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city1_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Lindasmith' )",
          "select student.fname , student.lname from student join direct_distance on student.city_code = direct_distance.city2_code where direct_distance.distance = ( select max ( direct_distance.distance ) from direct_distance join city on direct_distance.city1_code = city.city_code where city.city_name = 'Linda Smith' )"
        ]
      ]
    },
    {
      "id": 838,
      "db_id": "address_1",
      "gold": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 839,
      "db_id": "address_1",
      "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select state from city join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'LINDA'",
          "select city.state from student join city on student.city_code = city.city_code where student.lname = 'Linda'",
          "select state from student join city on student.city_code = city.city_code where student.lname = 'Linda'",
          "select city.state from City join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select city.state from city join student on city.city_code = student.city_code where student.fname = 'Linda'",
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'Lindsay'"
        ]
      ]
    },
    {
      "id": 840,
      "db_id": "address_1",
      "gold": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
      "infer_predictions": [
        [
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select city.state from city join student on city.city_code = student.city_code where student.lname = 'LINDA'",
          "select city.state from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = city.city_code where student.lname = 'Linda'",
          "select state from city join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select city.state from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city1_code = student.city_code where student.lname = 'Linda'",
          "select city.state from direct_distance join city on direct_distance.city1_code = city.city_code join student on city.city_code = student.city_code where student.lname = 'Linda'",
          "select city.state from direct_distance join city on direct_distance.city1_code = city.city_code join student on direct_distance.city2_code = student.city_code where student.lname = 'Linda'",
          "select city.state from student join city on student.city_code = city.city_code where student.lname = 'Linda'"
        ]
      ]
    },
    {
      "id": 841,
      "db_id": "boat_1",
      "gold": "SELECT * FROM Sailors WHERE age  >  30",
      "infer_predictions": [
        [
          "select * from sailors where age > 30",
          "select * from sailors where age > 30 and name != 'Sailor'",
          "select * from sailors where age > 30 and name != 'sailor'",
          "select * from sailors where age > 30 and name != 'Seaman'",
          "select * from sailors where age >30",
          "select * from sailors where age > 30 != 30"
        ]
      ]
    },
    {
      "id": 842,
      "db_id": "boat_1",
      "gold": "SELECT * FROM Sailors WHERE age  >  30",
      "infer_predictions": [
        [
          "select * from sailors where age > 30",
          "select * from sailors where age > 30 and name != 'Sailor'",
          "select * from sailors where age > 30 and name != 'Seaman'",
          "select * from sailors where age > 30 and name != 'sailor'",
          "select * from sailors where age > 30 and name != 'Seafarer'",
          "select * from sailors where age > 30 != 30",
          "select * from sailors where age > 30 and name != 'Seattle'",
          "select * from sailors where age > 30 and name != 'Season'"
        ]
      ]
    },
    {
      "id": 843,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
      "infer_predictions": [
        [
          "select name , age from sailors where age < 30",
          "select name , age from sailors where age <= 30"
        ]
      ]
    },
    {
      "id": 844,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  <  30",
      "infer_predictions": [
        [
          "select name , age from sailors where age < 30",
          "select name , age from sailors where age <= 30",
          "select name and age from sailors where age < 30",
          "select name from sailors where age < 30"
        ]
      ]
    },
    {
      "id": 845,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
      "infer_predictions": [
        [
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.name = 1",
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.name = 1",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.name = '1'",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.sid = 1",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where sailors.name = 1"
        ]
      ]
    },
    {
      "id": 846,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
      "infer_predictions": [
        [
          "select distinct reserves.bid from sailors join reserves on sailors.sid = reserves.sid where sailors.name = 1",
          "select count ( distinct reserves.bid ) from sailors join reserves on sailors.sid = reserves.sid where sailors.name = 1",
          "select count ( distinct reserves.bid ) from reserves join sailors on reserves.sid = sailors.sid where sailors.name = 1",
          "select count ( distinct reserves.bid ) from reserves join sailors on reserves.sid = sailors.sid where sailors.sid = 1",
          "select count ( distinct bid ) from reserves join sailors on reserves.sid = sailors.sid where sailors.name = 1",
          "select distinct reserves.bid from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.sid = 1",
          "select count ( distinct reserves.bid ) from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.sid = 1",
          "select distinct reserves.bid from reserves join sailors on reserves.sid = sailors.sid where sailors.name = 1"
        ]
      ]
    },
    {
      "id": 847,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
      "infer_predictions": [
        [
          "select name from boats where bid = 102",
          "select bid from reserves where sid = 102",
          "select bid from reserves where bid = 102"
        ]
      ]
    },
    {
      "id": 848,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = '102'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 102",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.name = '102'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.name = '102'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.name = 'Sailor' and boats.name = '102'"
        ]
      ]
    },
    {
      "id": 849,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves",
      "infer_predictions": [
        [
          "select distinct bid from reserves"
        ]
      ]
    },
    {
      "id": 850,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT bid FROM Reserves",
      "infer_predictions": [
        [
          "select bid from reserves",
          "select distinct bid from reserves",
          "select sid from reserves",
          "select count ( * ) from reserves",
          "select bid from reserves",
          "select distinct bid from reserves",
          "select distinct sid from reserves"
        ]
      ]
    },
    {
      "id": 851,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
      "infer_predictions": [
        [
          "select name from sailors where name like '%e%'",
          "select distinct name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%'"
        ]
      ]
    },
    {
      "id": 852,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
      "infer_predictions": [
        [
          "select name from sailors where name like '%e%'",
          "select distinct name from sailors where name like '%e%'",
          "select name from sailors where name like '%e%' != '%e%'"
        ]
      ]
    },
    {
      "id": 853,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
      "infer_predictions": [
        [
          "select distinct sid from sailors where age > ( select max ( age ) from sailors )",
          "select distinct sid from sailors where age > ( select min ( age ) from sailors )",
          "select sid from sailors where age > ( select max ( age ) from sailors )",
          "select distinct sid from sailors where age > ( select max ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 854,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
      "infer_predictions": [
        [
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )",
          "select distinct sid from sailors except select distinct sid from sailors where age = ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age != '0'",
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age != 'zero'",
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )",
          "select distinct sid from sailors where age != ( select min ( age ) from sailors )"
        ]
      ]
    },
    {
      "id": 855,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
      "infer_predictions": [
        [
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7)",
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7)"
        ]
      ]
    },
    {
      "id": 856,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
      "infer_predictions": [
        [
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7)",
          "select distinct name from sailors where age > ( select max ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating > 7 )",
          "select distinct name from sailors where age > ( select min ( age ) from sailors where rating >7 )"
        ]
      ]
    },
    {
      "id": 857,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select distinct sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( distinct reserves.bid ) >= 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 858,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select distinct sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 1",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 859,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select sailors.sid , sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) > 1",
          "select sailors.sid , sailors.name from sailors join Reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) > 1",
          "select sailors.sid , sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 860,
      "db_id": "boat_1",
      "gold": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
      "infer_predictions": [
        [
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( * ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by reserves.sid having count ( * ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( distinct reserves.sid ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( distinct reserves.bid ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.sid having count ( distinct bid ) >= 2",
          "select distinct sailors.name from sailors join reserves on sailors.sid = reserves.sid group by sailors.name having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 861,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select sailors.sid from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where boats.color = 'red' or boats.color = 'blue'",
          "select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where boats.color = 'red' or boats.color = 'blue'"
        ]
      ]
    },
    {
      "id": 862,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select distinct sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'RED' or boats.color = 'BLUE'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'Red' or boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 863,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'RED' or boats.color = 'BLUE'"
        ]
      ]
    },
    {
      "id": 864,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' or boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'RED' or boats.color = 'BLUE'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' or boats.color = 'Blue'",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' or boats.color = 'blue'"
        ]
      ]
    },
    {
      "id": 865,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'blue'",
          "select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'RED' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'BLUE'"
        ]
      ]
    },
    {
      "id": 866,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'blue'",
          "select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'RED' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'BLUE'",
          "select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'RED' intersect select sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'BLUE'",
          "select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select reserves.sid from reserves join boats on reserves.bid = boats.bid where boats.color = 'blue'"
        ]
      ]
    },
    {
      "id": 867,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'RED' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'BLUE'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 868,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'blue'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'RED' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'BLUE'",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Blue'"
        ]
      ]
    },
    {
      "id": 869,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
      "infer_predictions": [
        [
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select sid from reserves )"
        ]
      ]
    },
    {
      "id": 870,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors where sid not in ( select sid from reserves )"
        ]
      ]
    },
    {
      "id": 871,
      "db_id": "boat_1",
      "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors except select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors where sid not in ( select distinct sid from reserves )"
        ]
      ]
    },
    {
      "id": 872,
      "db_id": "boat_1",
      "gold": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select name , sid from sailors except select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select name , sid from sailors where sid not in ( select sid from reserves )",
          "select name , sid from sailors except select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid",
          "select name , sid from sailors except select sailors.name , sailors.sid from reserves join sailors on reserves.sid = sailors.sid"
        ]
      ]
    },
    {
      "id": 873,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors except select sid from reserves",
          "select sid from sailors where sid not in ( select sid from reserves )",
          "select sid from sailors except select sid from reserves"
        ]
      ]
    },
    {
      "id": 874,
      "db_id": "boat_1",
      "gold": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
      "infer_predictions": [
        [
          "select sid from sailors except select sid from reserves",
          "select sid from sailors except select sid from reserves",
          "select sid from sailors except select Sid from reserves"
        ]
      ]
    },
    {
      "id": 875,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 100",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 100 and sailors.name = '103'"
        ]
      ]
    },
    {
      "id": 876,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where bid = 103",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 100"
        ]
      ]
    },
    {
      "id": 877,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucas' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luiz' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Louis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lus' )"
        ]
      ]
    },
    {
      "id": 878,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucas' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Louis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luiz' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lus' )"
        ]
      ]
    },
    {
      "id": 879,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luiz' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lus' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucas' )"
        ]
      ]
    },
    {
      "id": 880,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Luis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucas' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors where name = 'Lucio' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Ludis' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucas' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors where name = 'Lucio' )"
        ]
      ]
    },
    {
      "id": 881,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2 and reserves.bid = 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2 intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 1",
          "select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2 and reserves.bid = 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2 intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 2",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating > 2 intersect select sailors.name , reserves.sid from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 1"
        ]
      ]
    },
    {
      "id": 882,
      "db_id": "boat_1",
      "gold": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
      "infer_predictions": [
        [
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating >= 3 and reserves.bid = 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating >= 3 intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where reserves.bid = 1",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating >= 3",
          "select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid where sailors.rating >= 3 intersect select sailors.name , sailors.sid from sailors join reserves on sailors.sid = reserves.sid"
        ]
      ]
    },
    {
      "id": 883,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
      "infer_predictions": [
        [
          "select name , age from sailors order by age desc limit 1",
          "select name , age from sailors where age = ( select max ( age ) from sailors )",
          "select name , age from sailors order by age asc limit 1",
          "select name , age from sailors order by age desc limit 1",
          "select name from sailors order by age desc limit 1",
          "select name and age from sailors order by age desc limit 1",
          "select name , age from sailors order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 884,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
      "infer_predictions": [
        [
          "select name , age from sailors order by age desc limit 1",
          "select name , age from sailors where age = ( select max ( age ) from sailors )",
          "select name and age from sailors order by age desc limit 1",
          "select name from sailors order by age desc limit 1",
          "select name , age from sailors order by age desc limit 1",
          "select name , age from sailors order by age desc limit 1 != 100"
        ]
      ]
    },
    {
      "id": 885,
      "db_id": "boat_1",
      "gold": "SELECT COUNT(*) FROM Sailors",
      "infer_predictions": [
        [
          "select count ( * ) from sailors"
        ]
      ]
    },
    {
      "id": 886,
      "db_id": "boat_1",
      "gold": "SELECT COUNT(*) FROM Sailors",
      "infer_predictions": [
        [
          "select count ( * ) from sailors",
          "select count ( distinct sid ) from sailors",
          "select count ( * ) from sailors",
          "select count ( * ) from sailors",
          "select count ( true ) from sailors",
          "select count ( * ) from sailors"
        ]
      ]
    },
    {
      "id": 887,
      "db_id": "boat_1",
      "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
      "infer_predictions": [
        [
          "select avg ( age ) from sailors where rating = 7",
          "select rating , avg ( age ) from sailors where rating = 7 group by rating",
          "select rating , avg ( age ) from sailors where rating = 7 group by rating",
          "select age , avg ( rating ) from sailors where rating = 7 group by age",
          "select rating , avg ( age ) from sailors where rating = 7 group by rating",
          "select avg ( age ) from sailors where rating = '7'",
          "select avg ( age ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7"
        ]
      ]
    },
    {
      "id": 888,
      "db_id": "boat_1",
      "gold": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
      "infer_predictions": [
        [
          "select avg ( age ) from sailors where rating = 7",
          "select rating , avg ( age ) from sailors where rating = 7 group by rating",
          "select age , avg ( rating ) from sailors where rating = 7 group by age",
          "select avg ( age ) from sailors where rating = '7'",
          "select age , avg ( rating ) from sailors where rating = 7",
          "select age , avg ( rating ) from sailors where rating = 7",
          "select avg ( age ) from sailors where rating = 7",
          "select age , avg ( rating ) from sailors where rating = 7 group by rating"
        ]
      ]
    },
    {
      "id": 889,
      "db_id": "boat_1",
      "gold": "select count(*) from sailors where name like 'd%'",
      "infer_predictions": [
        [
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( distinct name ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like '%D%'",
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like 'D%'"
        ]
      ]
    },
    {
      "id": 890,
      "db_id": "boat_1",
      "gold": "select count(*) from sailors where name like 'd%'",
      "infer_predictions": [
        [
          "select count ( * ) from sailors where name like 'D%'",
          "select count ( distinct name ) from sailors where name like 'D%'",
          "select count ( * ) from sailors where name like '%D%'",
          "select count ( * ) from sailors where name like 'D%'"
        ]
      ]
    },
    {
      "id": 891,
      "db_id": "boat_1",
      "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
      "infer_predictions": [
        [
          "select avg ( rating ) , max ( age ) from sailors",
          "select max ( rating ) , avg ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select min ( rating ) , max ( age ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select Avg ( rating ) , max ( age ) from sailors"
        ]
      ]
    },
    {
      "id": 892,
      "db_id": "boat_1",
      "gold": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
      "infer_predictions": [
        [
          "select avg ( rating ) , max ( age ) from sailors",
          "select max ( rating ) , avg ( age ) from sailors",
          "select max ( age ) , avg ( rating ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select rating , age , avg ( rating ) from sailors",
          "select avg ( rating ) , max ( age ) from sailors",
          "select Avg ( rating ) , max ( age ) from sailors"
        ]
      ]
    },
    {
      "id": 893,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select count ( * ) , boats.name from boats join Reserves on boats.bid = Reserves.bid group by boats.name"
        ]
      ]
    },
    {
      "id": 894,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name",
          "select count ( * ) , boats.name from boats join Reserves on boats.bid = Reserves.bid group by boats.name"
        ]
      ]
    },
    {
      "id": 895,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
      "infer_predictions": [
        [
          "select count ( * ) , sid from reserves where sid > 50 group by sid",
          "select count ( * ) , bid from reserves where sid > 50 group by bid",
          "select count ( * ) , sid from reserves where bid > 50 group by sid",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.name",
          "select bid , count ( * ) from reserves where sid > 50 group by bid",
          "select bid , count ( * ) from reserves where sid > 50 group by sid",
          "select count ( * ) , bid from reserves where sid > 50 group by sid"
        ]
      ]
    },
    {
      "id": 896,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid where reserves.sid > 50 group by boats.name",
          "select count ( * ) , bid from reserves where sid > 50 group by bid"
        ]
      ]
    },
    {
      "id": 897,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join Reserves on boats.bid = Reserves.bid group by boats.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 898,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join Reserves on boats.bid = Reserves.bid group by boats.name having count ( * ) > 1",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) >= 2",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid group by boats.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 899,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
      "infer_predictions": [
        [
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.name",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.rating > 1 group by boats.name"
        ]
      ]
    },
    {
      "id": 900,
      "db_id": "boat_1",
      "gold": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
      "infer_predictions": [
        [
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by sailors.sid",
          "select count ( * ) , boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.name",
          "select boats.name , count ( * ) from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.sid > 1 group by boats.name"
        ]
      ]
    },
    {
      "id": 901,
      "db_id": "boat_1",
      "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
      "infer_predictions": [
        [
          "select avg ( sailors.age ) , sailors.rating from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select avg ( sailors.age ) , sailors.rating from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select avg ( sailors.age ) , avg ( sailors.rating ) , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.name = reserves.bid where boats.color = 'red' group by reserves.sid",
          "select avg ( sailors.age ) , avg ( sailors.rating ) , reserves.sid from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' group by reserves.sid",
          "select avg ( sailors.age ) , rating from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select avg ( sailors.age ) , sailors.rating from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating"
        ]
      ]
    },
    {
      "id": 902,
      "db_id": "boat_1",
      "gold": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
      "infer_predictions": [
        [
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.rating",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.color = 'red' group by sailors.rating",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by sailors.sid",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'RED' group by sailors.rating",
          "select sailors.rating , sailors.age , reserves.sid , boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by reserves.sid",
          "select sailors.rating , sailors.age , reserves.bid , sailors.sid from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' group by reserves.sid",
          "select sailors.rating , avg ( sailors.age ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'Red' group by sailors.rating"
        ]
      ]
    },
    {
      "id": 903,
      "db_id": "boat_1",
      "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
      "infer_predictions": [
        [
          "select name , rating , age from sailors order by rating asc , age",
          "select name , rating , age from sailors order by rating asc , age",
          "select name from sailors order by rating asc , age"
        ]
      ]
    },
    {
      "id": 904,
      "db_id": "boat_1",
      "gold": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
      "infer_predictions": [
        [
          "select name , rating , age from sailors order by rating asc , age",
          "select name , rating , age from sailors order by rating asc , age"
        ]
      ]
    },
    {
      "id": 905,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats",
      "infer_predictions": [
        [
          "select count ( * ) from boats",
          "select count ( * ) from boats",
          "select count ( * ) from boats"
        ]
      ]
    },
    {
      "id": 906,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats",
      "infer_predictions": [
        [
          "select count ( * ) from boats",
          "select count ( * ) from boats",
          "select count ( * ) from boats",
          "select count ( * ) from boats"
        ]
      ]
    },
    {
      "id": 907,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
      "infer_predictions": [
        [
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'RED'",
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'R'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = \"red\""
        ]
      ]
    },
    {
      "id": 908,
      "db_id": "boat_1",
      "gold": "SELECT count(*) FROM Boats WHERE color  =  'red'",
      "infer_predictions": [
        [
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'RED'",
          "select count ( * ) from boats where color = 'Red'",
          "select count ( * ) from boats where color = 'red'",
          "select count ( * ) from boats where color = 'RED'",
          "select count ( * ) from boats where color = 'R'",
          "select count ( * ) from boats where color = \"red\""
        ]
      ]
    },
    {
      "id": 909,
      "db_id": "boat_1",
      "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
      "infer_predictions": [
        [
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.age between 20 and 30",
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.age between 20 and 30",
          "select boats.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30"
        ]
      ]
    },
    {
      "id": 910,
      "db_id": "boat_1",
      "gold": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
      "infer_predictions": [
        [
          "select boats.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where sailors.age between 20 and 30",
          "select boats.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30",
          "select boats.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where sailors.age between 20 and 30"
        ]
      ]
    },
    {
      "id": 911,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors join boats on sailors.sid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors join boats on sailors.sid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join boats on sailors.sid = boats.bid where color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join boats on sailors.sid = boats.name where boats.color = 'red' )"
        ]
      ]
    },
    {
      "id": 912,
      "db_id": "boat_1",
      "gold": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
      "infer_predictions": [
        [
          "select name from sailors where rating > ( select max ( rating ) from sailors join boats on sailors.sid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors join boats on sailors.sid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join boats on sailors.sid = boats.bid where color = 'red' )",
          "select name from sailors where rating > ( select min ( rating ) from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.color = 'red' )",
          "select name from sailors where rating > ( select max ( rating ) from sailors join reserves on sailors.sid = reserves.sid join boats on boats.name = reserves.bid where boats.color = 'red' )"
        ]
      ]
    },
    {
      "id": 913,
      "db_id": "boat_1",
      "gold": "SELECT max(rating) FROM Sailors",
      "infer_predictions": [
        [
          "select max ( rating ) from sailors",
          "select rating from sailors order by rating desc limit 1",
          "select max ( rating ) from sailors",
          "select max ( rating ) from sailors",
          "select min ( rating ) from sailors",
          "select max ( rating ) from sailors"
        ]
      ]
    },
    {
      "id": 914,
      "db_id": "boat_1",
      "gold": "SELECT max(rating) FROM Sailors",
      "infer_predictions": [
        [
          "select max ( rating ) from sailors"
        ]
      ]
    },
    {
      "id": 915,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Mellon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.name = 'Mellon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melleon'",
          "select sailors.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Melon'",
          "select sailors.name from reserves join boats on reserves.bid = boats.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Mellin'"
        ]
      ]
    },
    {
      "id": 916,
      "db_id": "boat_1",
      "gold": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
      "infer_predictions": [
        [
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Mellon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melleon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on boats.bid = reserves.bid where boats.name = 'Mellon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Melteon'",
          "select sailors.name from boats join reserves on boats.bid = reserves.bid join sailors on reserves.sid = sailors.sid where boats.name = 'Melon'",
          "select sailors.name from sailors join reserves on sailors.sid = reserves.sid join boats on reserves.bid = boats.bid where boats.name = 'Mellion'"
        ]
      ]
    },
    {
      "id": 917,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
      "infer_predictions": [
        [
          "select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc",
          "select name and age from sailors order by rating desc"
        ]
      ]
    },
    {
      "id": 918,
      "db_id": "boat_1",
      "gold": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
      "infer_predictions": [
        [
          "select name , age from sailors order by rating desc",
          "Select name , age from sailors order by rating desc",
          "select name , age from sailors order by rating desc"
        ]
      ]
    },
    {
      "id": 919,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price asc limit 1",
          "select model from headphone order by price desc limit 1 != 100"
        ]
      ]
    },
    {
      "id": 920,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1",
          "select model from headphone order by price desc limit 1 != 100",
          "select model from headphone order by price desc limit 1"
        ]
      ]
    },
    {
      "id": 921,
      "db_id": "headphone_store",
      "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
      "infer_predictions": [
        [
          "select model from headphone order by model asc",
          "select distinct model from headphone order by model asc",
          "select distinct model from headphone order by model asc",
          "select distinct model from headphone order by model asc"
        ]
      ]
    },
    {
      "id": 922,
      "db_id": "headphone_store",
      "gold": "SELECT DISTINCT model FROM headphone ORDER BY model",
      "infer_predictions": [
        [
          "select distinct model from headphone order by model asc",
          "select distinct ( model ) from headphone order by model asc",
          "Select distinct model from headphone order by model asc"
        ]
      ]
    },
    {
      "id": 923,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 924,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 1",
          "select class from headphone group by class order by count ( * ) desc limit 2",
          "select class from headphone group by class order by count ( *) desc limit 1"
        ]
      ]
    },
    {
      "id": 925,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) >2",
          "select class from headphone group by class having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 926,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) >= 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) >> 2",
          "select class from headphone group by class having count ( * ) > 2",
          "select class from headphone group by class having count ( * ) >> 2",
          "select class from headphone group by class having count ( * ) = 2"
        ]
      ]
    },
    {
      "id": 927,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
      "infer_predictions": [
        [
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class"
        ]
      ]
    },
    {
      "id": 928,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
      "infer_predictions": [
        [
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select count ( * ) , class from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class",
          "select class , count ( * ) from headphone where price > 200 group by class"
        ]
      ]
    },
    {
      "id": 929,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT earpads) FROM headphone",
      "infer_predictions": [
        [
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads ) from headphone"
        ]
      ]
    },
    {
      "id": 930,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT earpads) FROM headphone",
      "infer_predictions": [
        [
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads ) from headphone",
          "select count ( distinct earpads) from headphone",
          "select count ( distinct earpads ) from headphone"
        ]
      ]
    },
    {
      "id": 931,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select earpads from headphone group by earpads order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 932,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select earpads from headphone group by earpads order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 933,
      "db_id": "headphone_store",
      "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1"
        ]
      ]
    },
    {
      "id": 934,
      "db_id": "headphone_store",
      "gold": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1",
          "select model , class , construction from headphone order by price asc limit 1 != 10"
        ]
      ]
    },
    {
      "id": 935,
      "db_id": "headphone_store",
      "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
      "infer_predictions": [
        [
          "select construction , avg ( price ) from headphone group by construction",
          "select avg ( price ) , construction from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction"
        ]
      ]
    },
    {
      "id": 936,
      "db_id": "headphone_store",
      "gold": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
      "infer_predictions": [
        [
          "select construction , avg ( price ) from headphone group by construction",
          "select avg ( price ) , construction from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction",
          "select construction , avg ( price ) from headphone group by construction"
        ]
      ]
    },
    {
      "id": 937,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
      "infer_predictions": [
        [
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowl' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Comfort Pads' intersect select class from headphone where earpads = 'Bowls'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pad'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfy Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfortable Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort pads'"
        ]
      ]
    },
    {
      "id": 938,
      "db_id": "headphone_store",
      "gold": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
      "infer_predictions": [
        [
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Bowl' intersect select class from headphone where earpads = 'Comfort Pads'",
          "select class from headphone where earpads = 'Comfort Pads' intersect select class from headphone where earpads = 'Bowls'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfort Pad'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfortable Pads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'ComfortPads'",
          "select class from headphone where earpads = 'Bowls' intersect select class from headphone where earpads = 'Comfy Pads'"
        ]
      ]
    },
    {
      "id": 939,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
      "infer_predictions": [
        [
          "select distinct earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select distinct earpads from headphone except select distinct earpads from headphone where construction = 'plastic'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'plastic'",
          "select earpads from headphone where construction != 'plastic' except select earpads from headphone where construction = 'plastic'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'metal'",
          "select earpads from headphone where construction = 'plastic' except select earpads from headphone where construction = 'paper'"
        ]
      ]
    },
    {
      "id": 940,
      "db_id": "headphone_store",
      "gold": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
      "infer_predictions": [
        [
          "select distinct earpads from headphone where construction != 'plastic'",
          "select earpads from headphone where construction != 'plastic'",
          "select distinct earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select earpads from headphone except select earpads from headphone where construction = 'plastic'",
          "select distinct earpads from headphone except select earpads from headphone where construction = 'polycarbonate'"
        ]
      ]
    },
    {
      "id": 941,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
      "infer_predictions": [
        [
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price <= ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 942,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
      "infer_predictions": [
        [
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone group by model order by avg ( price ) asc limit 1 )",
          "select model from headphone where price <= ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone )",
          "select model from headphone where price < ( select avg ( price ) from headphone ) != ( select avg ( price ) from headphone )"
        ]
      ]
    },
    {
      "id": 943,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store ORDER BY date_opened",
      "infer_predictions": [
        [
          "select name from store order by date_opened asc"
        ]
      ]
    },
    {
      "id": 944,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store ORDER BY date_opened",
      "infer_predictions": [
        [
          "select name from store order by date_opened asc",
          "Select name from store order by date_opened asc"
        ]
      ]
    },
    {
      "id": 945,
      "db_id": "headphone_store",
      "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
      "infer_predictions": [
        [
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Targana'",
          "select name , parking from store where neighborhood = 'Tarrana'",
          "select name , parking from store where neighborhood = 'Tarrazana'",
          "select name , parking from store where neighborhood = 'Tarazana'",
          "select name and parking from store where neighborhood = 'Tarzana'"
        ]
      ]
    },
    {
      "id": 946,
      "db_id": "headphone_store",
      "gold": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
      "infer_predictions": [
        [
          "select name , parking from store where neighborhood = 'Tarzana'",
          "select name from store where neighborhood = 'Tarzana' and parking = '1'",
          "select name , parking from store where neighborhood = 'Tarzano'",
          "select name from store where neighborhood = 'Tarzana' and parking = '0'",
          "select name from store where neighborhood = 'Tarzana' and parking = 'Yes'",
          "select name and parking from store where neighborhood = 'Tarzana'",
          "select name , parking from store where neighborhood = 'Tarzana'"
        ]
      ]
    },
    {
      "id": 947,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT neighborhood) FROM store",
      "infer_predictions": [
        [
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store"
        ]
      ]
    },
    {
      "id": 948,
      "db_id": "headphone_store",
      "gold": "SELECT count(DISTINCT neighborhood) FROM store",
      "infer_predictions": [
        [
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store",
          "select count ( distinct neighborhood ) from store"
        ]
      ]
    },
    {
      "id": 949,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
      "infer_predictions": [
        [
          "select count ( * ) , neighborhood from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood"
        ]
      ]
    },
    {
      "id": 950,
      "db_id": "headphone_store",
      "gold": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
      "infer_predictions": [
        [
          "select count ( * ) , neighborhood from store group by neighborhood",
          "select neighborhood , count ( * ) from store group by neighborhood",
          "select count ( * ) , neighborhood from store group by neighborhood"
        ]
      ]
    },
    {
      "id": 951,
      "db_id": "headphone_store",
      "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by store.name order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , count ( * ) from store join stock on store.store_id = stock.store_id group by stock.store_id order by count ( * ) desc limit 1",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by store.store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock. store_id order by count ( * ) desc limit 1",
          "select store.name , count ( * ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 952,
      "db_id": "headphone_store",
      "gold": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by store.name",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id having count ( * ) >= 1",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id order by sum ( stock.quantity ) desc limit 1",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id having headphone_id = 'headphone_id'",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id having headphone_id = 1",
          "select store.name , sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id group by stock.store_id having stock.headphone_id = 1"
        ]
      ]
    },
    {
      "id": 953,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
      "infer_predictions": [
        [
          "select name from store where store_id not in ( select store_id from stock )",
          "select name from store except select store.name from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select name from store except select store.name from store join stock on store.store_id = stock.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select name from store except select store.name from stock join store on stock.store_id = store.store_id"
        ]
      ]
    },
    {
      "id": 954,
      "db_id": "headphone_store",
      "gold": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
      "infer_predictions": [
        [
          "select name from store where store_id not in ( select store_id from stock )",
          "select name from store except select store.name from stock join store on stock.store_id = store.store_id",
          "select name from store except select store.name from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select name from store except select store.name from store join stock on store.store_id = stock.store_id",
          "select name from store except select store.name from store join stock on store.store_id = stock.store_id join headphone on stock.headphone_id = headphone.headphone_id"
        ]
      ]
    },
    {
      "id": 955,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
      "infer_predictions": [
        [
          "select model from headphone where headphone_id not in ( select headphone_id from stock )"
        ]
      ]
    },
    {
      "id": 956,
      "db_id": "headphone_store",
      "gold": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
      "infer_predictions": [
        [
          "select model from headphone where headphone_id not in ( select headphone_id from stock )"
        ]
      ]
    },
    {
      "id": 957,
      "db_id": "headphone_store",
      "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.headphone_id order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by stock.headphone_id order by sum ( quantity ) desc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.headphone_id order by sum ( stock.quantity ) desc limit 1"
        ]
      ]
    },
    {
      "id": 958,
      "db_id": "headphone_store",
      "gold": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by headphone.model order by sum ( stock.quantity ) asc limit 1",
          "select headphone.model from stock join headphone on stock.headphone_id = headphone.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) asc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model order by sum ( stock.quantity ) desc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by stock.headphone_id order by sum ( stock.quantity ) asc limit 1",
          "select headphone.model from headphone join stock on headphone.headphone_id = stock.headphone_id group by headphone.model order by sum ( stock.quantity ) asc limit 1"
        ]
      ]
    },
    {
      "id": 959,
      "db_id": "headphone_store",
      "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
      "infer_predictions": [
        [
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'The Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id where store.name = 'Woodman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'Woody'",
          "select sum ( stock.headphone_id ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id where store.name = 'The Woodman'",
          "select count ( * ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodyman'"
        ]
      ]
    },
    {
      "id": 960,
      "db_id": "headphone_store",
      "gold": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
      "infer_predictions": [
        [
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woody'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'The Woodman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodyman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Wooden'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woolman'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woodmen'",
          "select sum ( stock.quantity ) from stock join store on stock.store_id = store.store_id where store.name = 'Woody Man'"
        ]
      ]
    },
    {
      "id": 961,
      "db_id": "headphone_store",
      "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
      "infer_predictions": [
        [
          "select neighborhood from store except select store.neighborhood from stock join store on stock.store_id = store.store_id",
          "select neighborhood from store except select store.neighborhood from store join stock on store.store_id = stock.store_id",
          "select neighborhood from store except select store.neighborhood from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select neighborhood from store except select store.neighborhood from store join stock on store.store_id = stock.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select neighborhood from store where store_id not in ( select store_id from stock )"
        ]
      ]
    },
    {
      "id": 962,
      "db_id": "headphone_store",
      "gold": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
      "infer_predictions": [
        [
          "select neighborhood from store except select store.neighborhood from stock join store on stock.store_id = store.store_id join headphone on stock.headphone_id = headphone.headphone_id",
          "select neighborhood from store except select store.neighborhood from store join stock on store.store_id = stock.store_id join headphone on stock.headphone_id = headphone.headphone_id"
        ]
      ]
    },
    {
      "id": 963,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author",
          "select count ( distinct author_id ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 964,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author",
      "infer_predictions": [
        [
          "select count ( * ) from author",
          "select count ( distinct author_id ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author",
          "select count ( * ) from author"
        ]
      ]
    },
    {
      "id": 965,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper",
      "infer_predictions": [
        [
          "select count ( * ) from paper",
          "select count ( * ) from paper",
          "select count ( * ) from paper",
          "select count ( * ) from paper",
          "select count ( * ) from paper"
        ]
      ]
    },
    {
      "id": 966,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper",
      "infer_predictions": [
        [
          "select count ( * ) from paper",
          "select count ( * ) from paper",
          "select count ( * ) from paper"
        ]
      ]
    },
    {
      "id": 967,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Affiliation",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation",
          "select count ( distinct affiliation_id ) from affiliation",
          "select count ( * ) from affiliation",
          "select count ( * ) from affiliation",
          "select count ( * ) from affiliation"
        ]
      ]
    },
    {
      "id": 968,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Affiliation",
      "infer_predictions": [
        [
          "select count ( * ) from affiliation",
          "select count ( distinct affiliation_id ) from affiliation",
          "select count ( * ) from affiliation",
          "select count ( * ) from affiliation",
          "select count ( * ) from affiliation",
          "select count ( * ) from affiliation"
        ]
      ]
    },
    {
      "id": 969,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 'NAACL 2000'",
          "select count ( * ) from paper where year = 2000 and paper_id = 1",
          "select count ( * ) from paper where year = '2000'",
          "select count ( * ) from paper where year = 2000 and title = 'NAACL'",
          "select count ( * ) from paper where year = 2000 and paper_id = 2",
          "select count ( * ) from paper where year = 2000 and year = 'NAACL'",
          "select count ( * ) from paper where year = '2000' and year = 'NAACL'",
          "select count ( * ) from paper where year = 'NAACL' and paper_id = 1"
        ]
      ]
    },
    {
      "id": 970,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 'NAACL 2000'",
          "select count ( * ) from paper where year = 2000 and paper_id = 1",
          "select count ( * ) from paper where year = 2000 and title = 'NAACL'",
          "select count ( * ) from paper where year = '2000'",
          "select count ( * ) from paper where year = 2000 and year = 'NAACL'",
          "select count ( * ) from paper where year = 2000 and paper_id = 2",
          "select count ( * ) from paper where year = 2000 and title = 'NAACL 2000'",
          "select count ( * ) from paper where year = 2000"
        ]
      ]
    },
    {
      "id": 971,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 2009 and venue = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 972,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year = 2009 and venue = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 973,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
      "infer_predictions": [
        [
          "select name , address from affiliation"
        ]
      ]
    },
    {
      "id": 974,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT name ,  address FROM Affiliation",
      "infer_predictions": [
        [
          "select name , address from affiliation"
        ]
      ]
    },
    {
      "id": 975,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
      "infer_predictions": [
        [
          "select venue , year from paper order by year asc",
          "select distinct venue , year from paper order by year asc",
          "select venue , year from paper order by year asc",
          "select venue , year from paper order by year asc"
        ]
      ]
    },
    {
      "id": 976,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
      "infer_predictions": [
        [
          "select distinct venue from paper order by year asc",
          "select distinct ( venue ) from paper order by year asc",
          "Select distinct venue from paper order by year asc",
          "select distinct venue from paper order by year asc",
          "select distinct venue from paper order by year asc"
        ]
      ]
    },
    {
      "id": 977,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.affiliation_id = 1 and paper.venue = 'Harvard University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id where author_list.affiliation_id = 1 and paper.venue = 'Harvard University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id where author_list.affiliation_id = 'Harvard University'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.affiliation_id = 'Harvard University'"
        ]
      ]
    },
    {
      "id": 978,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select paper.title , author_list.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address = 'Harvard University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Harvard University'",
          "select paper.title , paper.paper_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name = 'Harvard'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.address = 'Harvard University'"
        ]
      ]
    },
    {
      "id": 979,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'McKeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckenown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckenzie'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name like '%Mckeown%'"
        ]
      ]
    },
    {
      "id": 980,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'McKeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckenzie'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckenown'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckendy'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckenna'"
        ]
      ]
    },
    {
      "id": 981,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 982,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford' intersect select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'",
          "select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Stanford University' intersect select paper.title , paper.paper_id from paper join author_list on paper.paper_id = author_list.paper_id join affiliation on author_list.affiliation_id = affiliation.affiliation_id where affiliation.name = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 983,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Mckeown' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Mckeown' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 2",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Mckeown , Kathleen' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Kathleen' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Kathleen' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Owen'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Owen'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Mckeown , Kathleen' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Rambow'"
        ]
      ]
    },
    {
      "id": 984,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 2",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 and paper.title = 'Mckeown' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1"
        ]
      ]
    },
    {
      "id": 985,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'McKeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambaw'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckenown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rabow'"
        ]
      ]
    },
    {
      "id": 986,
      "db_id": "aan_1",
      "gold": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'McKeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 1 except select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 2"
        ]
      ]
    },
    {
      "id": 987,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' or author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id like '%Mckeown%' or author_list.author_id like '%Rambow%'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Owen'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' or author.name = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id and author_list.author_id = 1"
        ]
      ]
    },
    {
      "id": 988,
      "db_id": "aan_1",
      "gold": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
      "infer_predictions": [
        [
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id like '%Mckeown%' or author_list.author_id like '%Rambow%'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Owen'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' intersect select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' or author_list.author_id = 'Rambow'",
          "select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Mckeown' and author_list.author_id = 'Rambow' union select paper.title , paper.paper_id from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = 'Kathy'"
        ]
      ]
    },
    {
      "id": 989,
      "db_id": "aan_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name order by count ( * ) desc",
          "select author.name , count ( * ) from author_list join author on author_list.author_id = author.author_id group by author.name order by count ( * ) desc",
          "select author.name , count ( * ) from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name order by count ( * ) desc",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id group by author.name order by count ( * ) desc"
        ]
      ]
    },
    {
      "id": 990,
      "db_id": "aan_1",
      "gold": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name order by count ( * ) asc",
          "select author.name , count ( * ) from author_list join author on author_list.author_id = author.author_id group by author.name order by count ( * ) asc",
          "select author.name , count ( * ) from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name order by count ( * ) asc",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id group by author.name order by count ( * ) asc",
          "select count ( * ) , author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 991,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name order by count ( * ) asc",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.name order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 992,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.name order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id order by count ( * ) asc",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by author_list.affiliation_id order by count ( * ) asc",
          "select affiliation.name from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name order by count ( * ) asc",
          "select affiliation.name from author_list join affiliation on author_list.affiliation_id = affiliation.affiliation_id group by affiliation.name order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 993,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) > 50",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.author_id having count ( * ) > 50",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.name having count ( * ) > 50",
          "select author.name from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) > 50"
        ]
      ]
    },
    {
      "id": 994,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) > 50",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.author_id having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author_list.author_id having count ( * ) > 50",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.name having count ( * ) > 50"
        ]
      ]
    },
    {
      "id": 995,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from paper join author_list on paper.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author join author_list on author.author_id = author_list.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 996,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
      "infer_predictions": [
        [
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) = 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.name having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id group by author.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author_list.author_id having count ( * ) = 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id group by author.name having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 997,
      "db_id": "aan_1",
      "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select venue , year from paper group by venue order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue , year order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue & year order by count ( * ) desc limit 1",
          "select venue , year from paper group by year order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue , year order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 998,
      "db_id": "aan_1",
      "gold": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select venue , year from paper group by venue order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue , year order by count ( * ) desc limit 1",
          "select venue , year from paper group by year order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue & year order by count ( * ) desc limit 1",
          "select venue , year from paper group by venue order by count ( * ) desc limit 2",
          "select venue , year from paper group by venue , year order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 999,
      "db_id": "aan_1",
      "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) in ( select venue from paper group by venue order by count ( * ) asc limit 1 )",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1000,
      "db_id": "aan_1",
      "gold": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) and count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1",
          "select venue from paper group by venue order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1001,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation where paper_id = 'A00-1002'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = 'A00-1002'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where citation.cited_paper_id = 'A00-1002'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where citation.cited_paper_id = 1002 and paper.title = 'A00-1002'",
          "select count ( distinct citation.paper_id ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = 'A00-1002'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 'A00-1002'"
        ]
      ]
    },
    {
      "id": 1002,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation where cited_paper_id = 'A00-1002'",
          "select count ( distinct citation.cited_paper_id ) from citation join paper on citation.paper_id = paper.paper_id where citation.cited_paper_id = 'A00-1002'",
          "select count ( distinct cited_paper_id ) from citation where paper_id = 'A00-1002'",
          "select count ( * ) from citation where cited_paper_id = 'A00-1002'",
          "select count ( * ) from citation where paper_id = 'A00-1002'",
          "select count ( * ) from citation where cited_paper_id = 'A00-1002.'"
        ]
      ]
    },
    {
      "id": 1003,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper join citation on paper.paper_id = citation.paper_id where paper.title = 'D12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = 'D12-1027'",
          "select count ( * ) from paper join citation on paper.paper_id = citation.paper_id where paper.year = 2012 and citation.paper_id = 1027",
          "select count ( * ) from paper join citation on paper.paper_id = citation.paper_id where paper.paper_id = 12-1027",
          "select count ( * ) from paper join citation on paper.paper_id = citation.paper_id where paper.paper_id = 'D12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.year = 2012 and paper.paper_id = 1027"
        ]
      ]
    },
    {
      "id": 1004,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = 'D12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = '2012-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.year = 2012 and citation.cited_paper_id = 1027",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = '2011-12-1027'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.paper_id = 12-1027",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = '2010-12-27'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = '2010-12-10'",
          "select count ( * ) from citation join paper on citation.paper_id = paper.paper_id where paper.title = '2013-04-15'"
        ]
      ]
    },
    {
      "id": 1005,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.paper_id , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1006,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.paper_id , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by paper.paper_id order by count ( * ) desc limit 1",
          "select paper_id , count ( * ) from citation group by paper_id order by count ( * ) desc limit 1",
          "select paper.paper_id , count ( * ) from citation join paper on citation.cited_paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1007,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1",
          "select paper.title from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1",
          "select paper.title from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1008,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.title from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id order by count ( * ) desc limit 1",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1",
          "select paper.title from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.cited_paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1009,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
      "infer_predictions": [
        [
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "select paper.title , citation.cited_paper_id , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id order by count ( * ) desc limit 10"
        ]
      ]
    },
    {
      "id": 1010,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
      "infer_predictions": [
        [
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from paper join citation on paper.paper_id = citation.cited_paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id order by count ( * ) desc limit 10",
          "select paper.title , count ( * ) from citation join paper on citation.paper_id = paper.paper_id group by citation.cited_paper_id order by count ( * ) desc limit 10"
        ]
      ]
    },
    {
      "id": 1011,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1012,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1013,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1014,
      "db_id": "aan_1",
      "gold": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from citation join author_list on citation.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from citation join author_list on citation.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Katherine'",
          "select count ( * ) from citation join author_list on citation.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'McKeown' and author.name = 'Kathleen'",
          "select count ( * ) from citation join author_list on citation.paper_id = author_list.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'"
        ]
      ]
    },
    {
      "id": 1015,
      "db_id": "aan_1",
      "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id group by author.name order by count ( * ) desc limit 1",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id group by author.author_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1016,
      "db_id": "aan_1",
      "gold": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id group by author.name order by count ( * ) desc limit 1",
          "select author.name , count ( * ) from author join author_list on author.author_id = author_list.author_id join citation on author_list.paper_id = citation.paper_id group by author.author_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1017,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1018,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1019,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1020,
      "db_id": "aan_1",
      "gold": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1021,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1022,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where year = 2009 group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join author on author_list.author_id = author.author_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1023,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.address order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1024,
      "db_id": "aan_1",
      "gold": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where year = 2009 group by affiliation.name order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where paper.year = 2009 group by affiliation.affiliation_id order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1025,
      "db_id": "aan_1",
      "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year <= 2009",
          "select count ( * ) from paper where year < 2009",
          "select count ( * ) from paper where year <= 2009",
          "select count ( * ) from paper where year <= 2009",
          "select count ( * ) from paper where year <= 2009 and title = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 1026,
      "db_id": "aan_1",
      "gold": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year <= 2009 and venue = 'Columbia University'",
          "select count ( * ) from paper where year <= 2009 and title = 'Columbia University'"
        ]
      ]
    },
    {
      "id": 1027,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009 and title = 'Stanford University'",
          "select count ( * ) from paper where year between 2000 and 2009 and venue = 'Stanford University'",
          "select count ( * ) , year from paper where year between 2000 and 2009 group by year"
        ]
      ]
    },
    {
      "id": 1028,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
      "infer_predictions": [
        [
          "select count ( * ) from paper where year between 2000 and 2009 and venue = 'Stanford University'",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where venue = 'Stanford University' and year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where venue = 'Stanford University'",
          "select count ( * ) from paper where year between 2000 and 2009",
          "select count ( * ) from paper where year between 2000 and 2009"
        ]
      ]
    },
    {
      "id": 1029,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = ( select max ( author_id ) from author_list )",
          "select paper.title from paper join author_list on paper.paper_id = author_list.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from paper join author_list on paper.paper_id = author_list.paper_id where author_list.author_id = ( select max ( author_id ) from author_list )",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1030,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id where author_list.author_id = ( select max ( author_id ) from author_list )",
          "select paper.title from paper join author_list on paper.paper_id = author_list.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by author_list.paper_id order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id group by paper.paper_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1031,
      "db_id": "aan_1",
      "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'Kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelyn'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelynn'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelynn@mckeown.com'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelynn@gmail.com'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelyn@mckeown.com'"
        ]
      ]
    },
    {
      "id": 1032,
      "db_id": "aan_1",
      "gold": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
      "infer_predictions": [
        [
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'Kathleen'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelynn@gmail.com'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelyn'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'kate@mckeown.com'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'katelyn@gmail.com'",
          "select count ( * ) from author_list join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'kathleen@gmail.com'"
        ]
      ]
    },
    {
      "id": 1033,
      "db_id": "aan_1",
      "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select paper.title from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.email = 'kathleen' group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1034,
      "db_id": "aan_1",
      "gold": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'McKeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where author.name = 'Mckeown' and author.name = 'Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Mckeown , Kathleen' group by author.name order by count ( * ) desc limit 1",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Mckenown , Kathleen' group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1035,
      "db_id": "aan_1",
      "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
      "infer_predictions": [
        [
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where title like '%translator%'",
          "select paper_id from paper where title like '%translate%'",
          "select paper_id from paper where title like '%translatability%'",
          "select paper_id from paper where title like '%translated%'",
          "select paper_id from paper where title like '%translat_on%'",
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where title like '%translaton%'"
        ]
      ]
    },
    {
      "id": 1036,
      "db_id": "aan_1",
      "gold": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
      "infer_predictions": [
        [
          "select paper_id from paper where title like '%translation%'",
          "select paper_id from paper where title like '%translator%'",
          "select paper_id from paper where title like '%translate%'",
          "select paper_id from paper where title like '%translated%'",
          "select paper_id from paper where title like '%translat%'",
          "select paper_id from paper where title like '%translation%' != '%translation%'"
        ]
      ]
    },
    {
      "id": 1037,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
      "infer_predictions": [
        [
          "select paper_id , title from paper except select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id",
          "select paper_id , title from paper except select paper.paper_id , paper.title from citation join paper on citation.paper_id = paper.paper_id",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id except select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id",
          "select paper_id , title from paper except select citation.paper_id , paper.title from citation join paper on citation.paper_id = paper.paper_id",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id except select citation.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id",
          "select paper_id , title from paper except select citation.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id"
        ]
      ]
    },
    {
      "id": 1038,
      "db_id": "aan_1",
      "gold": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
      "infer_predictions": [
        [
          "select paper_id , title from paper where paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id where paper.title not in ( select paper.title from paper join citation on paper.paper_id = citation.paper_id )",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id where citation.paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id where paper.paper_id not in ( select paper_id from citation )",
          "select paper.paper_id , paper.title from paper join citation on paper.paper_id = citation.paper_id where citation.cited_paper_id not in ( select paper_id from citation )"
        ]
      ]
    },
    {
      "id": 1039,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.name order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.affiliation_id order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.address order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.name like '%China%' group by affiliation.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1040,
      "db_id": "aan_1",
      "gold": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.affiliation_id order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.name order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%China%' group by affiliation.address order by count ( * ) desc limit 1",
          "select affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id where affiliation.address like '%Chinese%' group by affiliation.affiliation_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1041,
      "db_id": "aan_1",
      "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
      "infer_predictions": [
        [
          "select count ( * ) , venue from paper group by year",
          "select count ( * ) , venue from paper group by venue",
          "select count ( * ) , year from paper group by year",
          "select venue , count ( * ) from paper group by year",
          "select count ( * ) , venue from paper group by venue",
          "select count ( * ) , year from paper group by year",
          "select count ( * ) , venue from paper group by year",
          "select count ( * ) , venue from paper group by year"
        ]
      ]
    },
    {
      "id": 1042,
      "db_id": "aan_1",
      "gold": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
      "infer_predictions": [
        [
          "select count ( * ) , venue , year from paper group by venue , year",
          "select venue , count ( * ) from paper group by venue , year",
          "select venue , count ( * ) from paper group by year",
          "select venue , year , count ( * ) from paper group by venue , year",
          "select venue , count ( * ) from paper group by year , venue",
          "select venue , year , count ( * ) from paper group by year , venue",
          "select venue , count ( * ) from paper group by year",
          "select venue , count ( * ) from paper group by year",
          "select count ( * ) , venue , year from paper group by venue"
        ]
      ]
    },
    {
      "id": 1043,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
      "infer_predictions": [
        [
          "select count ( * ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.name",
          "select sum ( author_list.paper_id ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name",
          "select count ( distinct affiliation.name ) , affiliation.affiliation_id from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.affiliation_id",
          "select count ( * ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id"
        ]
      ]
    },
    {
      "id": 1044,
      "db_id": "aan_1",
      "gold": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
      "infer_predictions": [
        [
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name",
          "select count ( * ) , affiliation.name from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.affiliation_id",
          "select affiliation.name , count ( * ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id group by affiliation.name",
          "select affiliation.name , count ( distinct paper.title ) from affiliation join author_list on affiliation.affiliation_id = author_list.affiliation_id join paper on author_list.paper_id = paper.paper_id group by affiliation.name"
        ]
      ]
    },
    {
      "id": 1045,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( * ) > 50",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( citation.cited_paper_id ) > 50",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( cited_paper_id ) > 50",
          "select paper.title from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id having count ( * ) > 50"
        ]
      ]
    },
    {
      "id": 1046,
      "db_id": "aan_1",
      "gold": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
      "infer_predictions": [
        [
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( * ) > 50",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( citation.cited_paper_id ) > 50",
          "select paper.title from citation join paper on citation.paper_id = paper.paper_id group by citation.paper_id having count ( cited_paper_id ) > 50",
          "select paper.title from paper join citation on paper.paper_id = citation.paper_id group by citation.paper_id having count ( * ) > 50"
        ]
      ]
    },
    {
      "id": 1047,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
      "infer_predictions": [
        [
          "select count ( distinct author_id ) from author_list where paper_id not in ( select paper_id from citation group by paper_id having count ( * ) > 50 )",
          "select count ( * ) from ( select * from author_list join paper on author_list.paper_id = paper.paper_id group by author_list.author_id having count ( * ) > 50 )"
        ]
      ]
    },
    {
      "id": 1048,
      "db_id": "aan_1",
      "gold": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
      "infer_predictions": [
        [
          "select count ( distinct author_id ) from author_list where paper_id not in ( select paper_id from citation group by paper_id having count ( * ) > 50 )",
          "select count ( * ) from author_list where author_id not in ( select author_id from citation where paper_id > 50 )",
          "select count ( * ) from author_list where author_id not in ( select author_id from citation where paper_id = 50 )",
          "select count ( distinct author_id ) from author_list where paper_id not in ( select paper_id from citation where cited_paper_id > 50 )"
        ]
      ]
    },
    {
      "id": 1049,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
      "infer_predictions": [
        [
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL' intersect select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'ACL'",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 intersect select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL'",
          "select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'NAACL' intersect select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.year = 2009 and paper.title = 'ACLS'"
        ]
      ]
    },
    {
      "id": 1050,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1051,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computing Letters'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'ACL'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advances in Computational Linguistics'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computational Linguistics'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computer Linguistics'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computer Languages'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computer Learning'"
        ]
      ]
    },
    {
      "id": 1052,
      "db_id": "aan_1",
      "gold": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'ACL'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'ACCL'",
          "select name from author except select author.name from author_list join paper on author_list.paper_id = paper.paper_id join author on author_list.author_id = author.author_id where paper.title = 'Advanced Computer Languages'"
        ]
      ]
    },
    {
      "id": 1053,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM conference",
      "infer_predictions": [
        [
          "select count ( * ) from conference",
          "select count ( * ) from ( select conference_name from conference )",
          "select count ( * ) from ( select conference_id from conference )",
          "select count ( * ) from ( select * from conference )"
        ]
      ]
    },
    {
      "id": 1054,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM conference",
      "infer_predictions": [
        [
          "select count ( * ) from conference",
          "select count ( * ) , conference.conference_name from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_id",
          "select count ( * ) , conference.conference_name from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name",
          "select count ( * ) , conference.year from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.year",
          "select count ( * ) , conference.location from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.location",
          "select count ( * ) , conference.conference_name from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name"
        ]
      ]
    },
    {
      "id": 1055,
      "db_id": "conference",
      "gold": "SELECT DISTINCT conference_name FROM conference",
      "infer_predictions": [
        [
          "select distinct conference_name from conference",
          "select distinct ( conference_name ) from conference"
        ]
      ]
    },
    {
      "id": 1056,
      "db_id": "conference",
      "gold": "SELECT DISTINCT conference_name FROM conference",
      "infer_predictions": [
        [
          "select distinct conference_name from conference"
        ]
      ]
    },
    {
      "id": 1057,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
      "infer_predictions": [
        [
          "select conference_name , year , location from conference",
          "select conference_name , year , location from conference",
          "select conference_name , year ,location from conference",
          "Select conference_name , year , location from conference",
          "select conference_name , year , location from Conference"
        ]
      ]
    },
    {
      "id": 1058,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
      "infer_predictions": [
        [
          "select conference_name , year , location from conference",
          "select conference_name  , year , location from conference",
          "select conference_name , year , location from conference",
          "select conference_name , year ,location from conference",
          "select conference_name , year , location from Conference"
        ]
      ]
    },
    {
      "id": 1059,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
      "infer_predictions": [
        [
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name",
          "select conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference_name",
          "select conference.conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name",
          "select conference_name , count ( * ) from conference join conference_participation on conference_participation.conference_id = conference.conference_id group by conference.conference_name"
        ]
      ]
    },
    {
      "id": 1060,
      "db_id": "conference",
      "gold": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
      "infer_predictions": [
        [
          "select conference_name , count ( * ) from conference group by conference_name",
          "select conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name",
          "select conference_name , count ( * ) from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference_name"
        ]
      ]
    },
    {
      "id": 1061,
      "db_id": "conference",
      "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
      "infer_predictions": [
        [
          "select year , count ( * ) from conference group by year",
          "select year , count ( * ) from conference group by year",
          "select year , count ( * ) from conference group by year",
          "select year , count ( * ) from conference group by year"
        ]
      ]
    },
    {
      "id": 1062,
      "db_id": "conference",
      "gold": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
      "infer_predictions": [
        [
          "select count ( * ) , year from conference group by year",
          "select year , count ( * ) from conference group by year",
          "select count ( * ) , year from conference group by year",
          "select count ( * ) , year from conference group by year",
          "select count ( * ) , year from conference group by year",
          "select count ( * ) , year from conference group by year"
        ]
      ]
    },
    {
      "id": 1063,
      "db_id": "conference",
      "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1064,
      "db_id": "conference",
      "gold": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year order by count ( * ) asc limit 1",
          "select year from conference group by year order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1065,
      "db_id": "conference",
      "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >=2"
        ]
      ]
    },
    {
      "id": 1066,
      "db_id": "conference",
      "gold": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * ) >= 2",
          "select location from conference group by location having count ( * )>= 2",
          "select location from conference group by location having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1067,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
      "infer_predictions": [
        [
          "select institution_name , location , founded from institution"
        ]
      ]
    },
    {
      "id": 1068,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
      "infer_predictions": [
        [
          "select institution_name , location , founded from institution",
          "select institution_name , location ,founded from institution",
          "select institution_name , location , founded from institution"
        ]
      ]
    },
    {
      "id": 1069,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
      "infer_predictions": [
        [
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and founded <= 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900"
        ]
      ]
    },
    {
      "id": 1070,
      "db_id": "conference",
      "gold": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
      "infer_predictions": [
        [
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and 1900",
          "select count ( * ) from institution where founded >= 1850 and founded <= 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900",
          "select count ( * ) from institution where founded between 1850 and 1900"
        ]
      ]
    },
    {
      "id": 1071,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
      "infer_predictions": [
        [
          "select institution_name , location from institution order by founded desc limit 1",
          "select institution_name , location from institution order by founded desc limit 1"
        ]
      ]
    },
    {
      "id": 1072,
      "db_id": "conference",
      "gold": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
      "infer_predictions": [
        [
          "select institution_name , location from institution order by founded desc limit 1",
          "select institution_name , location from institution order by founded asc limit 1",
          "select institution_name , location from institution order by founded desc limit 1"
        ]
      ]
    },
    {
      "id": 1073,
      "db_id": "conference",
      "gold": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
      "infer_predictions": [
        [
          "select institution.institution_name , count ( * ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by staff.institution_id",
          "select institution.institution_name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by staff.institution_id",
          "select institution.institution_name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_name",
          "select institution.institution_name , count ( * ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_name",
          "select institution_name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by staff.institution_id"
        ]
      ]
    },
    {
      "id": 1074,
      "db_id": "conference",
      "gold": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id",
      "infer_predictions": [
        [
          "select count ( * ) , institution.institution_name from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select count ( * ) , institution.institution_name from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select staff.name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by staff.institution_id",
          "select count ( * ) , institution.institution_name from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_name",
          "select institution.institution_name , count ( * ) from institution join staff on institution.institution_id = staff.institution_id where institution.founded > 1800 group by institution.institution_id",
          "select staff.name , count ( * ) from staff join institution on staff.institution_id = institution.institution_id where institution.founded > 1800 group by institution.institution_id"
        ]
      ]
    },
    {
      "id": 1075,
      "db_id": "conference",
      "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
      "infer_predictions": [
        [
          "select institution_name from institution where institution_id not in ( select institution_id from staff )",
          "select institution_name from institution except select institution.institution_name from staff join institution on staff.institution_id = institution.institution_id",
          "select institution_name from institution join staff on institution.institution_id = staff.institution_id where staff.institution_id not in ( select institution_id from staff )",
          "select institution_name from institution except select institution.institution_name from institution join staff on institution.institution_id = staff.institution_id",
          "select institution_name from institution join staff on institution.institution_id = staff.institution_id where staff.staff_id not in ( select institution_id from staff )",
          "select institution_name from institution join staff on institution.institution_id = staff.institution_id where staff.name not in ( select institution_name from staff )"
        ]
      ]
    },
    {
      "id": 1076,
      "db_id": "conference",
      "gold": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
      "infer_predictions": [
        [
          "select institution_name from institution where institution_id not in ( select institution_id from staff )",
          "select institution_name from institution except select institution.institution_name from institution join staff on institution.institution_id = staff.institution_id",
          "select institution_name from institution except select institution.institution_name from staff join institution on staff.institution_id = institution.institution_id"
        ]
      ]
    },
    {
      "id": 1077,
      "db_id": "conference",
      "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
      "infer_predictions": [
        [
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff group by name order by avg ( age ) desc limit 1 )",
          "select name from staff where age > ( select avg ( age ) from staff group by age order by avg ( age ) desc limit 1 )",
          "select name from staff where age > ( select avg ( age ) from staff )"
        ]
      ]
    },
    {
      "id": 1078,
      "db_id": "conference",
      "gold": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
      "infer_predictions": [
        [
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )",
          "select name from staff where age > ( select avg ( age ) from staff )"
        ]
      ]
    },
    {
      "id": 1079,
      "db_id": "conference",
      "gold": "SELECT max(age) ,  min(age) FROM staff",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from staff where nationality = 'United States'",
          "select max ( age ) , min ( age ) from staff where nationality = 'USA'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United State'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United Stated'",
          "select max ( age ) , min ( age ) from staff where nationality = 'U.S.'",
          "select max ( age ) , min ( age ) from staff where nationality = 'American'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United States of America'",
          "select max ( age ) , min ( age ) from staff where nationality = 'United Stats'"
        ]
      ]
    },
    {
      "id": 1080,
      "db_id": "conference",
      "gold": "SELECT max(age) ,  min(age) FROM staff",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from staff",
          "select max ( age ) , min ( age ) from staff",
          "select max ( age ) , min ( age ) from staff",
          "select max ( age ) , min ( age ) , name from staff",
          "select max ( age ) , min( age ) from staff",
          "select max ( age ) , min (age ) from staff"
        ]
      ]
    },
    {
      "id": 1081,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
      "infer_predictions": [
        [
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where staff.nationality = 'Canada'",
          "select conference.conference_name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canadian'"
        ]
      ]
    },
    {
      "id": 1082,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
      "infer_predictions": [
        [
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where staff.nationality = 'Canada'",
          "select conference.conference_name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'",
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canadian'",
          "select conference.conference_name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where staff.nationality = 'Canada'"
        ]
      ]
    },
    {
      "id": 1083,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
      "infer_predictions": [
        [
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = conference_participation.conference_id and conference_participation.role = 'Sponsor'"
        ]
      ]
    },
    {
      "id": 1084,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
      "infer_predictions": [
        [
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'Sponsor'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'speaker' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id where conference_participation.role = 'sponsor'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Speaker' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.role = 'Sponsor'"
        ]
      ]
    },
    {
      "id": 1085,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
      "infer_predictions": [
        [
          "select name from staff where staff_id intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = 'ACL' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = 'Naccl'",
          "select name from staff where staff_id intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = 'ACL' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = 'NACCL'",
          "select name from staff where staff_id intersect select name from staff where institution_id = 'ACL'",
          "select name from staff where staff_id intersect select name from staff where staff_id = 'ACL'",
          "select name from staff where staff_id = 2 intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id where conference_participation.conference_id = 'ACL' and conference_participation.conference_id = 'Naccl'"
        ]
      ]
    },
    {
      "id": 1086,
      "db_id": "conference",
      "gold": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
      "infer_predictions": [
        [
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.conference_name = 'ACL' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL'",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL'",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'ACL' intersect select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.conference_name = 'NACCL'"
        ]
      ]
    },
    {
      "id": 1087,
      "db_id": "conference",
      "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
      "infer_predictions": [
        [
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2014",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2014"
        ]
      ]
    },
    {
      "id": 1088,
      "db_id": "conference",
      "gold": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
      "infer_predictions": [
        [
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.year >= 2003 or conference.year <= 2004",
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from staff join conference_participation on staff.staff_id = conference_participation.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year >= 2003 or conference.year <= 2004",
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.year >= 2003 and conference.year <= 2004",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year >= 2003 or conference.year <= 2004",
          "select staff.name from conference_participation join staff on conference_participation.staff_id = staff.staff_id join conference on conference_participation.conference_id = conference.conference_id where conference.year = 2003 or conference.year = 2004",
          "select staff.name from conference_participation join conference on conference_participation.conference_id = conference.conference_id join staff on conference_participation.staff_id = staff.staff_id where conference.year >= 2003 or conference.year < 2004"
        ]
      ]
    },
    {
      "id": 1089,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
      "infer_predictions": [
        [
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference.conference_id",
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id",
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference.conference_name"
        ]
      ]
    },
    {
      "id": 1090,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
      "infer_predictions": [
        [
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id",
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference.conference_id",
          "select conference.conference_name , conference.year , count ( * ) from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id"
        ]
      ]
    },
    {
      "id": 1091,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference.conference_name order by count ( * ) desc limit 2",
          "select conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2",
          "select conference_name from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2",
          "select conference_name from conference join conference_participation on conference.conference_id = conference_participation.conference_id group by conference.conference_name order by count ( * ) desc limit 2",
          "select conference_name from conference group by conference_id order by count ( * ) desc limit 2",
          "select conference_name from conference group by conference_name order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 1092,
      "db_id": "conference",
      "gold": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
      "infer_predictions": [
        [
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference_participation.conference_id order by count ( * ) desc limit 2",
          "select conference.conference_name from conference_participation join conference on conference_participation.conference_id = conference.conference_id group by conference.conference_name order by count ( * ) desc limit 2"
        ]
      ]
    },
    {
      "id": 1093,
      "db_id": "conference",
      "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation )",
          "select name , nationality from staff except select staff.name , staff.nationality from staff join conference_participation on staff.staff_id = conference_participation.staff_id",
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation where conference_id = 'ACL' )",
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation where conference_id = 4 )"
        ]
      ]
    },
    {
      "id": 1094,
      "db_id": "conference",
      "gold": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
      "infer_predictions": [
        [
          "select name , nationality from staff where staff_id not in ( select staff_id from conference_participation )",
          "select name , nationality from staff except select staff.name , staff.nationality from staff join conference_participation on staff.staff_id = conference_participation.staff_id",
          "select name , nationality from staff except select staff.name , staff.nationality from conference_participation join staff on conference_participation.staff_id = staff.staff_id"
        ]
      ]
    },
    {
      "id": 1095,
      "db_id": "conference",
      "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1096,
      "db_id": "conference",
      "gold": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1097,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc limit 1",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills )",
          "select pilot_name from pilotskills order by age asc limit 1",
          "select pilot_name from pilotskills order by age desc limit 1",
          "select pilot_name from pilotskills order by age desc limit 1",
          "select pilot_name from pilotskills order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 1098,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc limit 1",
          "select pilot_name from pilotskills where age = ( select max ( age ) from pilotskills )",
          "select pilot_name from pilotskills order by age asc limit 1",
          "select pilot_name from pilotskills order by age desc limit 1",
          "select pilot_name from pilotskills order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 1099,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age <= ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "Select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc"
        ]
      ]
    },
    {
      "id": 1100,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age <= ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc",
          "select pilot_name from pilotskills where age < ( select avg ( age ) from pilotskills ) order by age asc"
        ]
      ]
    },
    {
      "id": 1101,
      "db_id": "pilot_1",
      "gold": "SELECT * FROM PilotSkills WHERE age  <  30",
      "infer_predictions": [
        [
          "select * from pilotskills where age < 30",
          "select * from pilotskills where age <= 30",
          "select * from pilotskills where age < 30 != '30'"
        ]
      ]
    },
    {
      "id": 1102,
      "db_id": "pilot_1",
      "gold": "select * from pilotskills where age  <  30",
      "infer_predictions": [
        [
          "select * from pilotskills where age < 30"
        ]
      ]
    },
    {
      "id": 1103,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and pilotskills.age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where age < 35",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age <= 35"
        ]
      ]
    },
    {
      "id": 1104,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age < 35 and plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 union select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 and plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age < 35 intersect select pilot_name from pilotskills where plane_name = 'Piper Cub'",
          "select pilot_name from pilotskills where age <= 35 and plane_name = 'Piper Cub'"
        ]
      ]
    },
    {
      "id": 1105,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F-14'",
          "select location from hangar where plane_name = 'F-14 fighter'",
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F14 Fighter'",
          "select location from hangar where plane_name = 'F-14 Hunter'",
          "select location from hangar where plane_name = 'F-14 Fighting Falcon'"
        ]
      ]
    },
    {
      "id": 1106,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select location from hangar where plane_name = 'F-14'",
          "select location from hangar where plane_name = 'F-14 Fighter'",
          "select location from hangar where plane_name = 'F14'",
          "select location from hangar where plane_name = 'F-14 Hunter'",
          "select location from hangar where plane_name = 'F-14'",
          "select location from hangar where plane_name = 'F-14 Fighting Falcon'",
          "select location from hangar where plane_name = 'F-14 Hawkeye'",
          "select location from hangar where plane_name = 'F14 Fighter'"
        ]
      ]
    },
    {
      "id": 1107,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
      "infer_predictions": [
        [
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar"
        ]
      ]
    },
    {
      "id": 1108,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM hangar",
      "infer_predictions": [
        [
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar",
          "select count ( distinct location ) from hangar"
        ]
      ]
    },
    {
      "id": 1109,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'",
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jonas'",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'James'",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Joes'",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Johnson'"
        ]
      ]
    },
    {
      "id": 1110,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'",
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32",
          "select plane_name from pilotskills where age = 32 and pilot_name = 'Jones'",
          "select plane_name from pilotskills where pilot_name = 'Jones' and pilotskills.age = 32",
          "select plane_name from pilotskills where pilot_name = 'Jonas' and age = 32",
          "select plane_name from pilotskills where pilot_name = 'James' and age = 32",
          "select plane_name from pilotskills where pilot_name = 'Jones' and age = 32"
        ]
      ]
    },
    {
      "id": 1111,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select * from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from ( select age from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age > 40 != 40"
        ]
      ]
    },
    {
      "id": 1112,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select age from pilotskills where age > 40 )",
          "select count ( * ) from ( select * from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from pilotskills where age > 40.",
          "select count ( * ) from pilotskills where age > 40 != 40",
          "select count ( * ) from pilotskills where age > 40 != '40'"
        ]
      ]
    },
    {
      "id": 1113,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where pilot_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.pilot_name = 'B-52 Bomber' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where pilot_name = 'B-52 Bomber' and age < 35",
          "select count ( * ) from pilotskills where pilot_name = 'B-52' and pilotskills.age < 35",
          "select count ( * ) from pilotskills where pilot_name = 'B-52' and age < 35",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.age < 35 and pilotskills.pilot_name = 'B-52 Bomber'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.age < 35 and pilotskills.plane_name = 'B-52 Bomber'"
        ]
      ]
    },
    {
      "id": 1114,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.age < 35 and pilotskills.plane_name = 'B-52'",
          "select count ( * ) from pilotskills where age < 35 and plane_name = 'B-52'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.age < 35 and pilotskills.pilot_name = 'B-52'"
        ]
      ]
    },
    {
      "id": 1115,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' order by age asc limit 1",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1116,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' order by age asc limit 1",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' order by age asc limit 1",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' order by age asc limit 1",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' and age = ( select min ( age ) from pilotskills )"
        ]
      ]
    },
    {
      "id": 1117,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1118,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1119,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "Select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1120,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1",
          "select plane_name from pilotskills group by plane_name order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1121,
      "db_id": "pilot_1",
      "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from ( select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago' )",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from ( select * from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago' )",
          "select count (* ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicagoland'"
        ]
      ]
    },
    {
      "id": 1122,
      "db_id": "pilot_1",
      "gold": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Chicago'",
          "select count ( * ) from ( select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago' )",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago'",
          "select count ( distinct pilotskills.pilot_name ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicagoland'"
        ]
      ]
    },
    {
      "id": 1123,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where age = 41 and pilot_name = 'Smith'",
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where age = 41",
          "select plane_name from pilotskills where age = 41 and pilot_name = 'Smith'",
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where age = 41"
        ]
      ]
    },
    {
      "id": 1124,
      "db_id": "pilot_1",
      "gold": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
      "infer_predictions": [
        [
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where pilot_name = 'Smith' and pilotskills.age = 41",
          "select plane_name from pilotskills where pilot_name = 'Smith' and age = 41",
          "select plane_name from pilotskills where pilot_name = 'Smith' and pilotskills.age = 41",
          "select plane_name from pilotskills where pilotskills.pilot_name = 'Smith' and pilotskills.age = 41"
        ]
      ]
    },
    {
      "id": 1125,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( * ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1126,
      "db_id": "pilot_1",
      "gold": "SELECT count(DISTINCT plane_name) FROM pilotskills",
      "infer_predictions": [
        [
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills",
          "select count ( distinct plane_name ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1127,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where pilot_name = 'Smith'",
          "select count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.pilot_name = 'Smith'",
          "select count ( * ) from ( select plane_name from pilotskills where pilot_name = 'Smith' )"
        ]
      ]
    },
    {
      "id": 1128,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1129,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select plane_name from pilotskills where age > 40 )",
          "select count ( * ) from ( select * from pilotskills where age > 40 )",
          "select count ( * ) from ( select plane_name from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Boeing 737-800'",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Airbus A320'",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Aeronautica'"
        ]
      ]
    },
    {
      "id": 1130,
      "db_id": "pilot_1",
      "gold": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40",
          "select count ( * ) from ( select plane_name from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Pilotskills.plane_name'",
          "select count ( * ) from ( select * from pilotskills where age > 40 )",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Airbus A320'",
          "select count ( * ) from pilotskills where age >40",
          "select count ( * ) from pilotskills where age > 40.",
          "select count ( * ) from pilotskills where age > 40 and plane_name = 'Galaxy'"
        ]
      ]
    },
    {
      "id": 1131,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age + 1 asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age Asc",
          "Select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc"
        ]
      ]
    },
    {
      "id": 1132,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age asc",
          "select pilot_name from pilotskills where age between 30 and 40 order by age Asc",
          "Select pilot_name from pilotskills where age between 30 and 40 order by age asc"
        ]
      ]
    },
    {
      "id": 1133,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc",
          "Select pilot_name from pilotskills order by age desc"
        ]
      ]
    },
    {
      "id": 1134,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills order by age desc",
          "Select pilot_name from pilotskills order by age desc",
          "select pilot_name from pilotskills order by age desc"
        ]
      ]
    },
    {
      "id": 1135,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
      "infer_predictions": [
        [
          "select location from hangar order by plane_name asc",
          "select location from hangar order by plane_name asc",
          "select distinct location from hangar order by plane_name asc",
          "select location from hangar order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1136,
      "db_id": "pilot_1",
      "gold": "SELECT LOCATION FROM hangar ORDER BY plane_name",
      "infer_predictions": [
        [
          "select location from hangar order by plane_name asc",
          "select distinct location from hangar order by plane_name asc",
          "select distinct location from hangar order by plane_name asc",
          "select location from hangar order by plane_name asc",
          "select count ( * ) from hangar order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1137,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "Select distinct plane_name from pilotskills order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1138,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "select distinct plane_name from pilotskills order by plane_name asc",
          "Select distinct plane_name from pilotskills order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1139,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40 or age < 30",
          "select count ( * ) from pilotskills where age > 40 or age <= 30",
          "select count ( * ) from pilotskills where age > 40 or age <30"
        ]
      ]
    },
    {
      "id": 1140,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > 40 or age < 30",
          "select count ( * ) from pilotskills where age > 40 or age <= 30",
          "select count ( * ) from pilotskills where age > 40 or age < 30.",
          "select count ( * ) from pilotskills where age > 40 or age <30"
        ]
      ]
    },
    {
      "id": 1141,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
      "infer_predictions": [
        [
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Hunter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35"
        ]
      ]
    },
    {
      "id": 1142,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
      "infer_predictions": [
        [
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 fighter' and age > 35",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' and age > 35 union select pilot_name , age from pilotskills where plane_name = 'F-14 Fighter' and age < 30",
          "select pilot_name , age from pilotskills where plane_name = 'Piper Cub' union select pilot_name , age from pilotskills where plane_name = 'F-14 Hunter' and age > 35"
        ]
      ]
    },
    {
      "id": 1143,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'B-52'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'B-52 Bomber'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'Piper Cub' except select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52'"
        ]
      ]
    },
    {
      "id": 1144,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' except select pilot_name from pilotskills where plane_name = 'B52'"
        ]
      ]
    },
    {
      "id": 1145,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'Piper Cub' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where pilotskills.plane_name = 'B-52'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Chicago' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'Piper Cub' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52 Bomber'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Piper Cub' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.plane_name = 'B-52'"
        ]
      ]
    },
    {
      "id": 1146,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B52'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' intersect select pilot_name from pilotskills where plane_name = 'B-52 Bomber'"
        ]
      ]
    },
    {
      "id": 1147,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
      "infer_predictions": [
        [
          "select avg ( age ) , min ( age ) from pilotskills",
          "select age , avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) and min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1148,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  min(age) FROM pilotskills",
      "infer_predictions": [
        [
          "select avg ( age ) , min ( age ) from pilotskills",
          "select age , avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select avg ( age ) , min ( age ) from pilotskills",
          "select Avg ( age ) , min ( age ) from pilotskills"
        ]
      ]
    },
    {
      "id": 1149,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston%'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'"
        ]
      ]
    },
    {
      "id": 1150,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Boston'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston , MA'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin' intersect select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Boston%'"
        ]
      ]
    },
    {
      "id": 1151,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter'",
          "select pilotskills.pilot_name from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Piper Cub' or hangar.plane_name = 'F-14 Fighter'"
        ]
      ]
    },
    {
      "id": 1152,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighter'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Hunter'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Fighting Falcon'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 fighter'",
          "select pilot_name from pilotskills where plane_name = 'Piper Cub' or plane_name = 'F-14 Phantom'"
        ]
      ]
    },
    {
      "id": 1153,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1154,
      "db_id": "pilot_1",
      "gold": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select avg ( age ) , plane_name from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name",
          "select plane_name , avg ( age ) from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1155,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1156,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , count ( * ) from pilotskills group by plane_name",
          "select count ( * ) , plane_name from pilotskills group by plane_name",
          "select plane_name , count ( * ) from pilotskills group by plane_name",
          "select count ( * ) , plane_name from pilotskills group by plane_name",
          "select plane_name , count ( * ) from pilotskills group by plane_name",
          "select plane_name , count ( * ) from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1157,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
      "infer_predictions": [
        [
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , plane_name , max ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name order by plane_name asc",
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1158,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , pilot_name from pilotskills order by plane_name asc",
          "select plane_name , pilot_name from pilotskills order by plane_name desc",
          "select plane_name , max ( pilot_name ) from pilotskills group by plane_name order by plane_name asc",
          "select plane_name , min ( pilot_name ) from pilotskills group by plane_name order by plane_name asc",
          "select plane_name , pilot_name from pilotskills group by plane_name order by plane_name asc",
          "select plane_name , pilot_name from pilotskills order by plane_name asc"
        ]
      ]
    },
    {
      "id": 1159,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select pilot_name , plane_name , max ( age ) from pilotskills group by plane_name",
          "select pilot_name , plane_name , min ( age ) from pilotskills group by plane_name",
          "select pilot_name , plane_name , max ( age ) from pilotskills group by plane_name",
          "select pilot_name , plane_name , max ( age ) from pilotskills group by plane_name",
          "select pilot_name , plane_name , max ( age ) from pilotskills group by plane_name",
          "select plane_name , max ( age ) from pilotskills group by plane_name"
        ]
      ]
    },
    {
      "id": 1160,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
      "infer_predictions": [
        [
          "select plane_name , pilot_name from pilotskills order by age desc limit 1",
          "select plane_name , max ( pilot_name ) from pilotskills group by plane_name",
          "select plane_name , pilot_name , min ( age ) from pilotskills group by plane_name",
          "select plane_name , pilot_name from pilotskills order by age desc limit 1",
          "select plane_name , pilot_name from pilotskills order by age desc limit 4"
        ]
      ]
    },
    {
      "id": 1161,
      "db_id": "pilot_1",
      "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
      "infer_predictions": [
        [
          "select max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select pilot_name , max ( age ) from pilotskills group by pilot_name",
          "select count ( * ) , max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select min ( age ) , pilot_name from pilotskills group by pilot_name"
        ]
      ]
    },
    {
      "id": 1162,
      "db_id": "pilot_1",
      "gold": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
      "infer_predictions": [
        [
          "select pilot_name , max ( age ) from pilotskills group by pilot_name",
          "select count ( * ) , max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select max ( age ) , pilot_name from pilotskills group by pilot_name",
          "select pilot_name , max ( age ) from pilotskills group by pilot_name",
          "select pilot_name , max ( age ) from pilotskills group by pilot_name"
        ]
      ]
    },
    {
      "id": 1163,
      "db_id": "pilot_1",
      "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
      "infer_predictions": [
        [
          "select count ( * ) , avg ( age ) , hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by location",
          "select count ( * ) , avg ( age ) , hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location"
        ]
      ]
    },
    {
      "id": 1164,
      "db_id": "pilot_1",
      "gold": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
      "infer_predictions": [
        [
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select hangar.location , count ( * ) from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select count ( * ) , avg ( age ) , hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select hangar.location , count ( * ) , avg ( pilotskills.age ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location",
          "select count ( * ) , avg ( pilotskills.age ) , hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name group by hangar.location",
          "select hangar.location , count ( * ) from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name group by hangar.location"
        ]
      ]
    },
    {
      "id": 1165,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
      "infer_predictions": [
        [
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( pilotskills.age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) <= 35"
        ]
      ]
    },
    {
      "id": 1166,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
      "infer_predictions": [
        [
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( pilotskills.age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select plane_name , count ( * ) from pilotskills group by plane_name having avg ( age ) < 35",
          "select count ( * ) , plane_name from pilotskills group by plane_name having avg ( age ) < 35"
        ]
      ]
    },
    {
      "id": 1167,
      "db_id": "pilot_1",
      "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
      "infer_predictions": [
        [
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by age asc limit 1"
        ]
      ]
    },
    {
      "id": 1168,
      "db_id": "pilot_1",
      "gold": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
      "infer_predictions": [
        [
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1",
          "select hangar.location from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name order by pilotskills.age asc limit 1"
        ]
      ]
    },
    {
      "id": 1169,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = ( select hangar.location from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin' )"
        ]
      ]
    },
    {
      "id": 1170,
      "db_id": "pilot_1",
      "gold": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
      "infer_predictions": [
        [
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from hangar join pilotskills on hangar.plane_name = pilotskills.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin , TX'",
          "select distinct pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin'",
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin , Texas'",
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin Texas'",
          "select pilotskills.pilot_name , pilotskills.age from pilotskills join hangar on pilotskills.plane_name = hangar.plane_name where hangar.location = 'Austin TX'"
        ]
      ]
    },
    {
      "id": 1171,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "Select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc"
        ]
      ]
    },
    {
      "id": 1172,
      "db_id": "pilot_1",
      "gold": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
      "infer_predictions": [
        [
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc",
          "select pilot_name from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' ) order by pilot_name asc"
        ]
      ]
    },
    {
      "id": 1173,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 fighter' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighting Eagle' )"
        ]
      ]
    },
    {
      "id": 1174,
      "db_id": "pilot_1",
      "gold": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F14' )",
          "select count ( * ) from pilotskills where age < ( select min ( age ) from pilotskills where plane_name = 'F-14 Fighter' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14 Hawkeye' )",
          "select count ( * ) from pilotskills where age < ( select max ( age ) from pilotskills where plane_name = 'F-14' )"
        ]
      ]
    },
    {
      "id": 1175,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'"
        ]
      ]
    },
    {
      "id": 1176,
      "db_id": "pilot_1",
      "gold": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
      "infer_predictions": [
        [
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'",
          "select distinct plane_name from pilotskills where plane_name like '%Bomber%'"
        ]
      ]
    },
    {
      "id": 1177,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select max ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1178,
      "db_id": "pilot_1",
      "gold": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
      "infer_predictions": [
        [
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count ( * ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )",
          "select count (* ) from pilotskills where age > ( select min ( age ) from pilotskills where plane_name = 'Piper Cub' )"
        ]
      ]
    },
    {
      "id": 1179,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from district order by area_km desc limit 1",
          "select name from district order by area_km desc limit 1",
          "select name from district order by area_km desc limit 1",
          "select name from district order by area_km desc limit 1"
        ]
      ]
    },
    {
      "id": 1180,
      "db_id": "district_spokesman",
      "gold": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
      "infer_predictions": [
        [
          "select area_km , government_website from district order by population asc limit 1",
          "select area_KM , government_website from district order by population asc limit 1",
          "select area_km , government_website from district order by population asc limit 1",
          "select area_km , government_website from district order by population asc limit 1"
        ]
      ]
    },
    {
      "id": 1181,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
      "infer_predictions": [
        [
          "select name , population from district where area_km > ( select avg ( area_km ) from district )",
          "select name , population from district where area_km > ( select avg ( area_km ) from district )"
        ]
      ]
    },
    {
      "id": 1182,
      "db_id": "district_spokesman",
      "gold": "SELECT max(area_km) ,  avg(area_km) FROM district",
      "infer_predictions": [
        [
          "select max ( area_km ) , avg ( area_km ) from district"
        ]
      ]
    },
    {
      "id": 1183,
      "db_id": "district_spokesman",
      "gold": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
      "infer_predictions": [
        [
          "select sum ( population ) from district order by area_km desc limit 3",
          "select sum ( population ) from district where area_km in ( select area_km from district order by area_km desc limit 3 )",
          "select sum ( population ) from district where area_km = ( select max ( area_km ) from district order by area_km desc limit 3 )",
          "select sum ( population ) from district where area_km = ( select area_km from district order by area_km desc limit 3 )",
          "select sum ( population ) from district where area_km = ( select max ( area_km ) from district )",
          "select sum ( population ) from district where area_km order by area_km desc limit 3",
          "select sum ( population ) from district order by area_km desc limit 3"
        ]
      ]
    },
    {
      "id": 1184,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
      "infer_predictions": [
        [
          "select district_id , name , government_website from district order by population asc",
          "select district_id , name , government_website from district order by population asc",
          "select district_id , name , government_website from district order by population asc",
          "select district_id , name and government_website from district order by population asc",
          "select district_id ,name , government_website from district order by population asc",
          "Select district_id , name , government_website from district order by population asc"
        ]
      ]
    },
    {
      "id": 1185,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
      "infer_predictions": [
        [
          "select name from district where government_website = 'gov.uk'",
          "select name from district where government_website = 'gov'",
          "select name from district where government_website = 'gov.co.uk'",
          "select name from district where government_website = 'gov.gov.uk'",
          "select name from district where government_website = 'gov.org'",
          "select name from district where government_website = 'gov.com'",
          "select name from district where government_website = 'gov.de'",
          "select name from district where government_website = 'gov.gov'"
        ]
      ]
    },
    {
      "id": 1186,
      "db_id": "district_spokesman",
      "gold": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
      "infer_predictions": [
        [
          "select district_id , name from district where population > 4000 or area_km > 3000",
          "select district.district_id , district.name from district join spokesman_district on district.district_id = spokesman_district.district_id where district.population > 4000 or district.area_km > 3000",
          "select district.district_id , district.name from district join spokesman_district on district.district_id = spokesman_district.district_id where district.population > 4000 or area_km > 3000",
          "select district.district_id , district.name from district join spokesman_district on district.district_id = spokesman_district.district_id where district.population > 4000 and district.area_km > 3000"
        ]
      ]
    },
    {
      "id": 1187,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  speach_title FROM spokesman",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1188,
      "db_id": "district_spokesman",
      "gold": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
      "infer_predictions": [
        [
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1",
          "select avg ( age ) , avg ( points ) from spokesman where rank_position = 1",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = '1'",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1",
          "select avg ( points ) , avg ( age ) from spokesman where rank_position = 1"
        ]
      ]
    },
    {
      "id": 1189,
      "db_id": "district_spokesman",
      "gold": "SELECT name ,  points FROM spokesman WHERE age  <  40",
      "infer_predictions": [
        [
          "select name , points from spokesman where age < 40",
          "select name , points from spokesman where age <= 40"
        ]
      ]
    },
    {
      "id": 1190,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from spokesman order by age desc limit 1",
          "select name from spokesman where age = ( select max ( age ) from spokesman )",
          "select name from spokesman order by age asc limit 1",
          "select name from spokesman order by age desc limit 1",
          "select name from spokesman order by age desc limit 1",
          "select name from spokesman order by age desc limit 1"
        ]
      ]
    },
    {
      "id": 1191,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
      "infer_predictions": [
        [
          "select name from spokesman where points < ( select avg ( points ) from spokesman )",
          "select name from spokesman where points < ( select avg ( points ) from spokesman )",
          "select name from spokesman where points <= ( select avg ( points ) from spokesman )",
          "select name from spokesman where points < ( select avg ( points ) from spokesman ) != ( select avg ( points ) from spokesman )",
          "select name from spokesman where points < ( select avg ( points ) from spokesman )",
          "select name from spokesman where points < ( select avg ( points ) from spokesman )"
        ]
      ]
    },
    {
      "id": 1192,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id order by count ( * ) desc limit 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id group by district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by spokesman_district.district_id order by count ( * ) desc limit 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1193,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
      "infer_predictions": [
        [
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year < 2004",
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where start_year < 2004",
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year < 2014",
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year < 04",
          "select spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year <= 2004",
          "select distinct spokesman.name from spokesman join spokesman_district on spokesman.spokesman_id = spokesman_district.spokesman_id where spokesman_district.start_year < 2004"
        ]
      ]
    },
    {
      "id": 1194,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
      "infer_predictions": [
        [
          "select count ( * ) , district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select district.name , count ( * ) from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select count ( * ) , district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id",
          "select district.name , count ( * ) from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id",
          "select count ( * ) , district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id"
        ]
      ]
    },
    {
      "id": 1195,
      "db_id": "district_spokesman",
      "gold": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
      "infer_predictions": [
        [
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 2",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 2",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id join spokesman on spokesman_district.spokesman_id = spokesman.spokesman_id where spokesman.rank_position = 1 intersect select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id join spokesman on spokesman_district.spokesman_id = spokesman_district.spokesman_id where spokesman.rank_position = 2"
        ]
      ]
    },
    {
      "id": 1196,
      "db_id": "district_spokesman",
      "gold": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by district.district_id having count ( * ) > 1",
          "select district.name from spokesman_district join district on spokesman_district.district_id = district.district_id group by spokesman_district.district_id having count ( * ) > 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by spokesman_district.district_id having count ( * ) > 1",
          "select district.name from district join spokesman_district on district.district_id = spokesman_district.district_id group by district.district_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1197,
      "db_id": "district_spokesman",
      "gold": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
      "infer_predictions": [
        [
          "select count ( * ) from district where district_id not in ( select district_id from spokesman_district )",
          "select count ( * ) from district where district_id not in ( select distinct district_id from spokesman_district )"
        ]
      ]
    },
    {
      "id": 1198,
      "db_id": "district_spokesman",
      "gold": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
      "infer_predictions": [
        [
          "select name from spokesman where spokesman_id not in ( select spokesman_id from spokesman_district )"
        ]
      ]
    },
    {
      "id": 1199,
      "db_id": "district_spokesman",
      "gold": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
      "infer_predictions": [
        [
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id",
          "select sum ( population ) , avg ( population ) from district join spokesman_district on district.district_id = spokesman_district.district_id",
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id where spokesman_district.spokesman_id = '1'",
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id where spokesman_district.spokesman_id = 'spokesman'",
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id where spokesman_district.spokesman_id = 'Spokesman'",
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id where spokesman_district.spokesman_id = 1",
          "select sum ( district.population ) , avg ( district.population ) from district join spokesman_district on district.district_id = spokesman_district.district_id where spokesman_district.spokesman_id = 'yes'",
          "select sum ( population ) , avg ( population ) from district where district_id in ( select district_id from spokesman_district )"
        ]
      ]
    },
    {
      "id": 1200,
      "db_id": "art_1",
      "gold": "select title from sculptures order by year desc limit 1",
      "infer_predictions": [
        [
          "select title from sculptures order by year desc limit 1",
          "select title , year from sculptures order by year desc limit 1",
          "select title from sculptures order by year desc limit 1",
          "select title from sculptures order by year desc limit 1 != 2013"
        ]
      ]
    },
    {
      "id": 1201,
      "db_id": "art_1",
      "gold": "select title from sculptures order by year desc limit 1",
      "infer_predictions": [
        [
          "select title from sculptures order by year desc limit 1",
          "select title , year from sculptures order by year desc limit 1",
          "select title from sculptures order by year desc limit 1 != 2013",
          "select Title from sculptures order by year desc limit 1"
        ]
      ]
    },
    {
      "id": 1202,
      "db_id": "art_1",
      "gold": "select title ,  location from paintings order by year limit 1",
      "infer_predictions": [
        [
          "select title , location from paintings order by year asc limit 1",
          "select title , location from paintings order by year desc limit 1",
          "select title , location from paintings order by year asc limit 1",
          "select title , location from paintings order by year - year asc limit 1"
        ]
      ]
    },
    {
      "id": 1203,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select title , location from paintings order by year asc limit 1",
          "select title , location from paintings order by year desc limit 1",
          "select title , location from paintings order by year - year asc limit 1",
          "select title , location from paintings order by year asc limit 1",
          "select title , location from paintings order by year asc limit 1",
          "select title , location from paintings order by year - 1 asc limit 1"
        ]
      ]
    },
    {
      "id": 1204,
      "db_id": "art_1",
      "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title from sculptures where location = 226",
          "select title from sculptures where location = '226'"
        ]
      ]
    },
    {
      "id": 1205,
      "db_id": "art_1",
      "gold": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title from sculptures where sculptureid = 226",
          "select title from sculptures where sculptureid = '226'",
          "select title from sculptures where location = '226'"
        ]
      ]
    },
    {
      "id": 1206,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM paintings",
      "infer_predictions": [
        [
          "select title , location from paintings",
          "select title , location from paintings",
          "select title , location from paintings",
          "select title , location from paintings"
        ]
      ]
    },
    {
      "id": 1207,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM paintings",
      "infer_predictions": [
        [
          "select title , location from paintings"
        ]
      ]
    },
    {
      "id": 1208,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM sculptures",
      "infer_predictions": [
        [
          "select title , location from sculptures"
        ]
      ]
    },
    {
      "id": 1209,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION FROM sculptures",
      "infer_predictions": [
        [
          "select title , location from sculptures"
        ]
      ]
    },
    {
      "id": 1210,
      "db_id": "art_1",
      "gold": "SELECT medium FROM paintings WHERE paintingID  =  80",
      "infer_predictions": [
        [
          "select medium from paintings where paintingid = 80",
          "select distinct medium from paintings where paintingid = 80",
          "select count ( * ) from paintings where paintingid = 80",
          "select count ( distinct medium ) from paintings where paintingid = 80",
          "select distinct medium from paintings where paintingid = 80"
        ]
      ]
    },
    {
      "id": 1211,
      "db_id": "art_1",
      "gold": "select medium from paintings where paintingid  =  80",
      "infer_predictions": [
        [
          "select medium from paintings where paintingid = 80",
          "select distinct medium from paintings where paintingid = 80",
          "select medium from paintings where paintingid = 80 != 'acrylic'",
          "select medium from paintings where paintingid = 80 != 'Oil'",
          "select medium from paintings where paintingid = 80 != 'Oil on Canvas'",
          "select medium from paintings where paintingid = 80 != 'watercolor'",
          "select medium from paintings where paintingid = 80 != 'oil'",
          "select medium from paintings where paintingid = 80 != 'Oil Painting'"
        ]
      ]
    },
    {
      "id": 1212,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
      "infer_predictions": [
        [
          "select fname , lname from artists where birthyear > 1850",
          "select fname , lname from artists where deathyear > 1850",
          "select fname ,lname from artists where birthyear > 1850",
          "select lname , fname from artists where birthyear > 1850"
        ]
      ]
    },
    {
      "id": 1213,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
      "infer_predictions": [
        [
          "select fname , lname from artists where birthyear > 1850",
          "select fname , lname from artists where deathyear > 1850",
          "select lname , fname from artists where birthyear > 1850",
          "select fname ,lname from artists where birthyear > 1850"
        ]
      ]
    },
    {
      "id": 1214,
      "db_id": "art_1",
      "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title , year from sculptures where location != '226'",
          "select title , year from sculptures except select title , year from sculptures where location = '226'",
          "select title , year from sculptures where location != '226' except select title , year from sculptures where location = '226'"
        ]
      ]
    },
    {
      "id": 1215,
      "db_id": "art_1",
      "gold": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
      "infer_predictions": [
        [
          "select title , year from sculptures where location != '226'",
          "select title , year from sculptures except select title , year from sculptures where location = '226'",
          "select title , year from sculptures where location != '226' except select title , year from sculptures where location = '226'"
        ]
      ]
    },
    {
      "id": 1216,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
      "infer_predictions": [
        [
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on sculptures.sculptorid = artists.artistid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year <= 1900",
          "select distinct artists.lname , artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year < 1900"
        ]
      ]
    },
    {
      "id": 1217,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
      "infer_predictions": [
        [
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year < 1900",
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year <= 1900",
          "select distinct artists.fname , artists.lname from artists join sculptures on sculptures.sculptorid = artists.artistid where sculptures.year < 1900"
        ]
      ]
    },
    {
      "id": 1218,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
      "infer_predictions": [
        [
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920",
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 1920",
          "select distinct ( artists.birthyear ) from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 20",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year> 1920"
        ]
      ]
    },
    {
      "id": 1219,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
      "infer_predictions": [
        [
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 1920",
          "select distinct artists.birthyear from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.year > 1920",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year > 20",
          "select distinct artists.birthyear from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.year> 1920"
        ]
      ]
    },
    {
      "id": 1220,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , lname from artists order by deathyear desc limit 1",
          "select fname ,lname from artists order by deathyear desc limit 1",
          "select lname , fname from artists order by deathyear desc limit 1",
          "select fname , lname from artists order by deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1221,
      "db_id": "art_1",
      "gold": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , lname from artists order by deathyear desc limit 1",
          "select fname ,lname from artists order by deathyear desc limit 1",
          "select lname , fname from artists order by deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1222,
      "db_id": "art_1",
      "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
      "infer_predictions": [
        [
          "select birthyear from artists order by deathyear asc limit 1",
          "select deathyear from artists order by deathyear asc limit 1"
        ]
      ]
    },
    {
      "id": 1223,
      "db_id": "art_1",
      "gold": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
      "infer_predictions": [
        [
          "select birthyear from artists order by deathyear asc limit 1",
          "select deathyear from artists order by deathyear asc limit 1",
          "select deathyear from artists order by birthyear asc limit 1"
        ]
      ]
    },
    {
      "id": 1224,
      "db_id": "art_1",
      "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , deathyear from artists order by deathyear desc limit 1",
          "select fname , birthyear from artists order by deathyear desc limit 1",
          "select fname , birthyear from artists order by birthyear desc limit 1",
          "select fname , deathyear from artists order by birthyear desc limit 1",
          "select lname , birthyear from artists order by deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1225,
      "db_id": "art_1",
      "gold": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
      "infer_predictions": [
        [
          "select fname , deathyear from artists order by deathyear desc limit 1",
          "select fname , birthyear from artists order by deathyear desc limit 1",
          "select fname , birthyear from artists order by birthyear desc limit 1",
          "select fname , deathyear from artists order by birthyear desc limit 1",
          "select lname , birthyear from artists order by deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1226,
      "db_id": "art_1",
      "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select count ( * ) from paintings where location = '240'",
          "select count ( * ) from paintings where location = 240",
          "select count ( * ) from paintings where location = 'Gallery 240'"
        ]
      ]
    },
    {
      "id": 1227,
      "db_id": "art_1",
      "gold": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select count ( * ) from paintings where location = 240",
          "select count ( * ) from paintings where location = '240'",
          "select count ( * ) from ( select * from paintings where location = 240 )",
          "select count ( * ) from ( select * from paintings where location = '240' )"
        ]
      ]
    },
    {
      "id": 1228,
      "db_id": "art_1",
      "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
      "infer_predictions": [
        [
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid where artists.deathyear = ( select max ( deathyear ) from artists )",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) from paintings join artists on paintings.painterid = artists.artistid order by artists.deathyear desc limit 1",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by ( artists.deathyear ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1229,
      "db_id": "art_1",
      "gold": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
      "infer_predictions": [
        [
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select paintings.title , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid order by count ( * ) desc limit 1",
          "select count ( * ) from artists join paintings on artists.artistid = paintings.painterid order by artists.deathyear desc limit 1",
          "select count ( * ) , artists.artistid from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid order by artists.deathyear desc limit 1",
          "select count ( * ) from paintings join artists on paintings.painterid = artists.artistid order by artists.deathyear desc limit 1"
        ]
      ]
    },
    {
      "id": 1230,
      "db_id": "art_1",
      "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
      "infer_predictions": [
        [
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.lname = 'Mary'",
          "select paintings.title , paintings.year from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Mary'"
        ]
      ]
    },
    {
      "id": 1231,
      "db_id": "art_1",
      "gold": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
      "infer_predictions": [
        [
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Mary'",
          "select paintings.title , paintings.year from artists join paintings on artists.artistid = paintings.painterid where artists.lname = 'Mary'",
          "select paintings.title , paintings.year from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Mary'"
        ]
      ]
    },
    {
      "id": 1232,
      "db_id": "art_1",
      "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
      "infer_predictions": [
        [
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear <= 1850",
          "select paintings.width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.paINTErid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.paintingid where artists.birthyear < 1850"
        ]
      ]
    },
    {
      "id": 1233,
      "db_id": "art_1",
      "gold": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
      "infer_predictions": [
        [
          "select width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select max ( paintings.width_mm ) from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from artists join paintings on artists.artistid = paintings.painterid where artists.birthyear < 1850",
          "select paintings.width_mm from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850",
          "select max ( width_mm ) from paintings join artists on paintings.painterid = artists.artistid where artists.birthyear < 1850"
        ]
      ]
    },
    {
      "id": 1234,
      "db_id": "art_1",
      "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
      "infer_predictions": [
        [
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.lname = 'Pablo'",
          "select distinct paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1235,
      "db_id": "art_1",
      "gold": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
      "infer_predictions": [
        [
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select location , medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from paintings join artists on paintings.painterid = artists.artistid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.mediumon from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'",
          "select paintings.location , paintings.medium from artists join paintings on artists.artistid = paintings.painterid where artists.fname = 'Pablo'"
        ]
      ]
    },
    {
      "id": 1236,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid join sculptures on sculptures.sculptorid = artists.artistid intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid join sculptures on sculptures.sculptorid = artists.artistid",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid join sculptures on sculptures.sculptorid = artists.artistid intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid join sculptures on sculptures.sculptorid = artists.artistid"
        ]
      ]
    },
    {
      "id": 1237,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid intersect select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid",
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = sculptures.sculptorid join sculptures on sculptures.sculptureid = artists.artistid"
        ]
      ]
    },
    {
      "id": 1238,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithograph'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithograph'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithographic'"
        ]
      ]
    },
    {
      "id": 1239,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithograph'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithographic'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithograph'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithoprint'",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'lithography'",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' intersect select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'lithographie'"
        ]
      ]
    },
    {
      "id": 1240,
      "db_id": "art_1",
      "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and mediumon = 'canvas'",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and medium = 'canvas'",
          "select artists.birthyear from paintings join artists on paintings.painterid = artists.artistid where paintings.year = 1884 and mediumon = 'canvas'",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and mediumon = 'canvas'",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884 and mediumon = 'Canvas'"
        ]
      ]
    },
    {
      "id": 1241,
      "db_id": "art_1",
      "gold": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884",
          "select artists.birthyear from paintings join artists on paintings.painterid = artists.artistid where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.painterid where paintings.year = 1884",
          "select artists.birthyear from artists join paintings on artists.artistid = paintings.paintingid where paintings.year = 1884"
        ]
      ]
    },
    {
      "id": 1242,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1243,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select artists.fname from paintings join artists on paintings.painterid = artists.artistid where paintings.location = 241 and medium = 'oil'",
          "select artists.fname from paintings join artists on paintings.painterid = artists.artistid where paintings.location = 241 and paintings.medium = 'oil'",
          "select artists.fname from artists join paintings on artists.artistid = paintings.painterid where paintings.location = 241 and paintings.medium = 'oil'",
          "select artists.fname from artists join paintings on artists.artistid = paintings.painterid where paintings.location = 241 and medium = 'oil'"
        ]
      ]
    },
    {
      "id": 1244,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select medium , count ( * ) from paintings group by medium",
          "select count ( * ) , medium from paintings group by medium",
          "select mediumon , count ( * ) from paintings group by mediumon",
          "select count ( * ) , medium from paintings group by medium",
          "select medium , count ( * ) from paintings group by medium"
        ]
      ]
    },
    {
      "id": 1245,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select count ( * ) , medium from paintings group by medium",
          "select medium , count ( * ) from paintings group by medium",
          "select count ( * ) , medium from paintings group by medium"
        ]
      ]
    },
    {
      "id": 1246,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , medium from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium"
        ]
      ]
    },
    {
      "id": 1247,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , medium from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select medium , avg ( height_mm ) from paintings group by medium",
          "select avg ( height_mm ) , medium from paintings group by medium"
        ]
      ]
    },
    {
      "id": 1248,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select count ( * ) , location from paintings where year < 1900 group by location",
          "select count ( * ) , location from paintings where year <= 1900 group by location",
          "select count ( distinct location ) , year < 1900 from paintings where year < 1900 group by location"
        ]
      ]
    },
    {
      "id": 1249,
      "db_id": "art_1",
      "gold": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select count ( * ) , location from paintings where year < 1900 group by location",
          "select count ( distinct location ) , year < 1900 from paintings where location != 'northern hemisphere' group by year < 1900",
          "select count ( distinct location ) , year < 1900 from paintings where location != 'null' group by location",
          "select count ( distinct location ) , year < 1900 from paintings where location != 'northern hemisphere' group by year <= 1900",
          "select count ( distinct location ) , year < 1900 from paintings where location != 'northern hemisphere' group by location",
          "select count ( distinct location ) , year < 1900 from paintings where location != 'USA' group by year < 1900",
          "select count ( distinct location ) , year < 1900 from paintings where year < 1900 group by location"
        ]
      ]
    },
    {
      "id": 1250,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
      "infer_predictions": [
        [
          "select title from paintings where year > 1910 and medium = 'oil'",
          "select title from paintings where medium = 'oil' and year > 1910",
          "select title from paintings where year > 1910 and medium = 'oils'",
          "select title from paintings where year > 1910 and medium = 'oid'",
          "select title from paintings where year > 1911 and medium = 'oil'",
          "select title from paintings where year > 1920 and medium = 'oil'",
          "select title from paintings where year > 1910 and medium = 'olive'"
        ]
      ]
    },
    {
      "id": 1251,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
      "infer_predictions": [
        [
          "select title from paintings where year > 1910 and medium = 'oil'",
          "select title from paintings where year > 1910",
          "select title from paintings where medium = 'oil'",
          "select title from paintings where year > 1910 and medium = 'Oil'",
          "select title from paintings where year > 1910",
          "select title from paintings where year > 1910 and medium = 'oils'"
        ]
      ]
    },
    {
      "id": 1252,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select distinct painterid from paintings where medium = 'oil' and location = 240"
        ]
      ]
    },
    {
      "id": 1253,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
      "infer_predictions": [
        [
          "select distinct painterid from paintings where medium = 'oil' and location = 240"
        ]
      ]
    },
    {
      "id": 1254,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
      "infer_predictions": [
        [
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canva' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings )"
        ]
      ]
    },
    {
      "id": 1255,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
      "infer_predictions": [
        [
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'Canvas' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings where medium = 'canva' )",
          "select distinct title from paintings where height_mm > ( select min ( height_mm ) from paintings )"
        ]
      ]
    },
    {
      "id": 1256,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
      "infer_predictions": [
        [
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = '240' )",
          "select distinct paintingid from paintings where year > ( select max ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 'Gallery 240' )",
          "select distinct paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 250 )"
        ]
      ]
    },
    {
      "id": 1257,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
      "infer_predictions": [
        [
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 'Gallery 240' )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = '240' )",
          "select distinct paintingid from paintings where year > ( select max ( year ) from paintings where location = 240 )",
          "select distinct paintingid from paintings where year > ( select min ( year ) from paintings where location = 'gallery 240' )",
          "select distinct paintingid from paintings where year > ( select max ( year ) from paintings where location = 'Gallery 240' )"
        ]
      ]
    },
    {
      "id": 1258,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select paintingid from paintings order by year asc limit 1",
          "select paintingid from paintings order by year desc limit 1",
          "select paintingid from paintings order by year asc limit 1",
          "select paintingid from paintings order by year asc limit 1",
          "select paintingid from paintings order by year asc limit 1"
        ]
      ]
    },
    {
      "id": 1259,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
      "infer_predictions": [
        [
          "select paintingid from paintings order by year asc limit 1",
          "select paintingid from paintings order by year desc limit 1",
          "select paintingid from paintings order by year - year asc limit 1",
          "select paintingid from paintings order by year asc limit 1",
          "select paintingid from paintings order by year asc limit 1"
        ]
      ]
    },
    {
      "id": 1260,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.title like '%female%'",
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select distinct artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.title like '%female%'",
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.title like '%Female%'",
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where title like '%female%'"
        ]
      ]
    },
    {
      "id": 1261,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid where sculptures.title like '%female%'",
          "select artists.lname , artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select artists.Fname , artists.Lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%female%'",
          "select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid where sculptures.title like '%Female%'"
        ]
      ]
    },
    {
      "id": 1262,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
      "infer_predictions": [
        [
          "select distinct title from paintings order by title asc",
          "Select distinct title from paintings order by title asc"
        ]
      ]
    },
    {
      "id": 1263,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY title",
      "infer_predictions": [
        [
          "select distinct title from paintings order by title asc",
          "select distinct title from paintings order by title asc",
          "Select distinct title from paintings order by title asc"
        ]
      ]
    },
    {
      "id": 1264,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
      "infer_predictions": [
        [
          "select distinct title from paintings order by width_mm asc",
          "Select distinct title from paintings order by width_mm asc"
        ]
      ]
    },
    {
      "id": 1265,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
      "infer_predictions": [
        [
          "select distinct title from paintings order by height_mm asc",
          "Select distinct title from paintings order by height_mm asc"
        ]
      ]
    },
    {
      "id": 1266,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.paintingid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.painterid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year >= 1900 and sculptures.year <= 1950 intersect select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year >= 1900 and sculptures.year <= 1950",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.paintingid where sculptures.year >= 1900 and sculptures.year <= 1950 intersect select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.paintingid where sculptures.year >= 1900 and sculptures.year <= 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.painterid where sculptures.year >= 1900 and sculptures.year <= 1950 intersect select paintings.title , sculptures.title from sculptures join paintings on sculptures.sculptureid = paintings.painterid where sculptures.year >= 1900 and sculptures.year <= 1950"
        ]
      ]
    },
    {
      "id": 1267,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
      "infer_predictions": [
        [
          "select title from paintings where year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.paintingid = sculptures.sculptureid where sculptures.year between 1900 and 1950",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.painterid = sculptures.sculptureid where sculptures.year between 1900 and 1950"
        ]
      ]
    },
    {
      "id": 1268,
      "db_id": "art_1",
      "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222 union select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222"
        ]
      ]
    },
    {
      "id": 1269,
      "db_id": "art_1",
      "gold": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
      "infer_predictions": [
        [
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from artists join paintings on artists.artistid = paintings.painterid join sculptures on artists.artistid = sculptures.sculptorid where artists.artistid = 222",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.painterid = sculptures.sculptureid join artists on artists.artistid = 222",
          "select paintings.title , sculptures.title from paintings join sculptures on paintings.painterid = sculptures.sculptorid join artists on artists.artistid = 222"
        ]
      ]
    },
    {
      "id": 1270,
      "db_id": "art_1",
      "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from paintings join artists on paintings.painterid = artists.artistid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year <= 1900 group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1271,
      "db_id": "art_1",
      "gold": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from paintings join artists on paintings.painterid = artists.artistid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year < 1900 group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.artistid from artists join paintings on artists.artistid = paintings.painterid where paintings.year <= 1900 group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1272,
      "db_id": "art_1",
      "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.fname order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.fname order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by sculptures.sculptorid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1273,
      "db_id": "art_1",
      "gold": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.fname order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by sculptures.sculptorid order by count ( * ) desc limit 1",
          "select artists.fname from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.fname order by count ( * ) desc limit 1",
          "select artists.fname from sculptures join artists on sculptures.sculptorid = artists.artistid group by sculptures.sculptorid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1274,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
      "infer_predictions": [
        [
          "select title from paintings where width_mm < 600 or height_mm > 800",
          "select title from paintings where width_mm <= 600 or height_mm > 800"
        ]
      ]
    },
    {
      "id": 1275,
      "db_id": "art_1",
      "gold": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
      "infer_predictions": [
        [
          "select title from paintings where width_mm < 600 or height_mm > 800",
          "select title from paintings where width_mm <= 600 or height_mm > 800",
          "select title from paintings where width_mm < 600 or height_mm >800"
        ]
      ]
    },
    {
      "id": 1276,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
      "infer_predictions": [
        [
          "select distinct location from paintings where year < 1885 or year > 1930",
          "select location from paintings where year < 1885 or year > 1930",
          "select distinct location from paintings where year <= 1885 or year > 1930",
          "select distinct location from paintings where year < 1885 or year > 1930"
        ]
      ]
    },
    {
      "id": 1277,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
      "infer_predictions": [
        [
          "select distinct location from paintings where year < 1885 or year > 1930",
          "select location from paintings where year < 1885 or year > 1930",
          "select distinct location from paintings where year <= 1885 or year > 1930",
          "select distinct location from paintings where year < 1885 or year > 1930",
          "select distinct location from paintings where year < 1885 or year > 1930"
        ]
      ]
    },
    {
      "id": 1278,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm between 500 and 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm in ( select height_mm from paintings where height_mm > 500 and height_mm < 2000 ) intersect select paintingid from paintings where height_mm in ( select height_mm from paintings where height_mm > 500 )",
          "select paintingid from paintings where height_mm in ( select height_mm from paintings where height_mm > 500 and height_mm < 2000 ) intersect select paintingid from paintings where height_mm in ( select height_mm from paintings where height_mm > 2000 )"
        ]
      ]
    },
    {
      "id": 1279,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where width_mm < 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where width_mm <= 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where height_mm < 2000",
          "select paintingid from paintings where height_mm > 500 union select paintingid from paintings where width_mm < 2000",
          "select paintingid from paintings where height_mm > 500 intersect select paintingid from paintings where height_mm <= 2000",
          "select paintingid from paintings where height_mm > 500 and width_mm < 2000"
        ]
      ]
    },
    {
      "id": 1280,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'panel' intersect select location from paintings where medium = 'canvas'",
          "select distinct location from paintings where medium = 'on panel' and medium = 'on canvas'",
          "select distinct location from paintings where medium = 'on panel' intersect select distinct location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'on canvas' intersect select location from paintings where medium = 'on panel'",
          "select distinct location from paintings where medium = 'on panel' intersect select distinct location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'board' intersect select location from paintings where medium = 'canvas'",
          "select location from paintings where medium = 'panel' intersect select location from paintings where medium = 'canvas'"
        ]
      ]
    },
    {
      "id": 1281,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where medium = 'panel' intersect select location from paintings where medium = 'canvas'",
          "select location from paintings where medium = 'on panels' intersect select location from paintings where medium = 'on canvas'",
          "select distinct location from paintings where medium = 'panel' and medium = 'canvas'",
          "select location from paintings where medium = 'on panel' intersect select location from paintings where medium = 'on canvas'",
          "select location from paintings where medium = 'panels' intersect select location from paintings where medium = 'canvas'",
          "select distinct location from paintings where medium = 'panel' intersect select distinct location from paintings where medium = 'canvas'",
          "select location from paintings where medium = 'panel' intersect select location from paintings where medium = 'canvas'",
          "select location from paintings where medium = 'panel' intersect select location from paintings where medium= 'canvas'"
        ]
      ]
    },
    {
      "id": 1282,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930",
          "select distinct location from paintings where year < 1885 intersect select distinct location from paintings where year > 1930",
          "select location from paintings where year <= 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year> 1930",
          "select distinct location from paintings where year < 1885 intersect select distinct location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930 != '1885'",
          "select location from paintings where year < 1885 intersect select location from paintings where year >> 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930 != '1930'"
        ]
      ]
    },
    {
      "id": 1283,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 intersect select location from paintings where year > 1930",
          "select location from paintings where year <= 1885 intersect select location from paintings where year > 1930",
          "select distinct location from paintings where year < 1885 intersect select distinct location from paintings where year > 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year> 1930",
          "select location from paintings where year < 1885 intersect select location from paintings where year >> 1930"
        ]
      ]
    },
    {
      "id": 1284,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = '241'",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 241",
          "select avg ( paintings.height_mm ) , avg ( paintings.width_mm ) from sculptures join paintings on sculptures.sculptureid = paintings.painterid where sculptures.location = 241 and paintings.medium = 'oil'"
        ]
      ]
    },
    {
      "id": 1285,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
      "infer_predictions": [
        [
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'Oil' and location = 241",
          "select avg ( height_mm ) , avg ( width_mm ) from paintings where medium = 'oil' and location = '241'"
        ]
      ]
    },
    {
      "id": 1286,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
      "infer_predictions": [
        [
          "select max ( height_mm ) , paintingid from paintings where year < 1900",
          "select max ( height_mm ) , max ( paintingid ) from paintings where year < 1900",
          "select max ( height_mm ) , paintingid from paintings where year <= 1900",
          "select max ( height_mm ) , paintingid from paintings where year < 1900"
        ]
      ]
    },
    {
      "id": 1287,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
      "infer_predictions": [
        [
          "select height_mm , paintingid from paintings where year < 1900 order by height_mm desc limit 1",
          "select height_mm , paintingid from paintings where year <= 1900 order by height_mm desc limit 1",
          "select height_mm , painterid from paintings where year < 1900 order by height_mm desc limit 1",
          "select max ( height_mm ) , paintingid from paintings where year < 1900"
        ]
      ]
    },
    {
      "id": 1288,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
      "infer_predictions": [
        [
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year",
          "select max ( width_mm ) , max ( height_mm ) , year from paintings group by year",
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year",
          "select max ( height_mm ) , width_mm , year from paintings group by year"
        ]
      ]
    },
    {
      "id": 1289,
      "db_id": "art_1",
      "gold": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
      "infer_predictions": [
        [
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year",
          "select max ( width_mm ) , max ( height_mm ) , year from paintings group by year",
          "select max ( height_mm ) , max ( width_mm ) , year from paintings group by year",
          "select max ( height_mm ) , width_mm , year from paintings group by year"
        ]
      ]
    },
    {
      "id": 1290,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1291,
      "db_id": "art_1",
      "gold": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1292,
      "db_id": "art_1",
      "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.paINTErid group by artists.artistid having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1293,
      "db_id": "art_1",
      "gold": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from paintings join artists on paintings.painterid = artists.artistid group by artists.fname having count ( * ) >= 2",
          "select artists.fname , count ( * ) from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) >= 2",
          "select artists.fname , count ( * ) from artists join paintings on artists.artistid = paintings.painterid group by artists.fname having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1294,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 3",
          "select artists.deathyear from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) <= 3",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 3",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 3",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 3"
        ]
      ]
    },
    {
      "id": 1295,
      "db_id": "art_1",
      "gold": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from paintings join artists on paintings.painterid = artists.artistid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) <= 4",
          "select artists.deathyear from artists join paintings on artists.artistid = paintings.painterid group by artists.artistid having count ( * ) < 4",
          "select artists.deathyear from paintings join artists on paintings.painterid = artists.artistid group by artists.deathyear having count ( * ) < 4"
        ]
      ]
    },
    {
      "id": 1296,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) asc limit 1",
          "select artists.deathyear from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.deathyear order by count ( * ) asc limit 1",
          "select artists.deathyear from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.artistid order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.fname , artists.lname order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.deathyear order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1297,
      "db_id": "art_1",
      "gold": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.artistid order by count ( * ) asc limit 1",
          "select artists.deathyear from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.artistid order by count ( * ) asc limit 1",
          "select artists.deathyear from sculptures join artists on sculptures.sculptorid = artists.artistid group by artists.deathyear order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.fname , artists.lname order by count ( * ) asc limit 1",
          "select artists.deathyear from artists join sculptures on artists.artistid = sculptures.sculptorid group by artists.deathyear order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1298,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
      "infer_predictions": [
        [
          "select paintingid , height_mm from paintings where width_mm = 240 order by width_mm desc limit 1",
          "select painterid , height_mm from paintings where width_mm = 240 order by width_mm desc limit 1",
          "select paintingid , height_mm from paintings where width_mm > 240 order by width_mm desc limit 1"
        ]
      ]
    },
    {
      "id": 1299,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
      "infer_predictions": [
        [
          "select height_mm , paintingid from paintings where width_mm >= 240",
          "select height_mm , paintingid from paintings where width_mm = 240 order by width_mm desc limit 1",
          "select height_mm , paintingid from paintings where width_mm = 240",
          "select height_mm , paintingid from paintings where width_mm > 240",
          "select height_mm , paintingid from paintings where width_mm >= 240 order by width_mm desc limit 1",
          "select height_mm , paintingid from paintings where width_mm > 240 order by width_mm desc limit 1"
        ]
      ]
    },
    {
      "id": 1300,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
      "infer_predictions": [
        [
          "select paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )"
        ]
      ]
    },
    {
      "id": 1301,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
      "infer_predictions": [
        [
          "select paintingid from paintings where year < ( select min ( year ) from paintings where location = 240 )",
          "select paintingid from paintings where year < ( select min ( year ) from paintings where location = '240' )",
          "select paintingid from paintings where year < ( select min ( year ) from paintings where location = 'Gallery 240' )",
          "select paintingid from paintings where year < ( select max ( year ) from paintings where location = 240 )"
        ]
      ]
    },
    {
      "id": 1302,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select min ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm) from paintings where year > 1900 )"
        ]
      ]
    },
    {
      "id": 1303,
      "db_id": "art_1",
      "gold": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
      "infer_predictions": [
        [
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900)",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year > 1900 )",
          "select paintingid from paintings where height_mm > ( select max ( height_mm ) from paintings where year >> 1900 )"
        ]
      ]
    },
    {
      "id": 1304,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 3",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3",
          "select artists.lname , artists.fname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1305,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1",
          "select artists.lname from artists join paintings on artists.artistid = paintings.painterid where paintings.medium = 'oil' group by artists.fname , artists.lname order by count ( * ) desc limit 1",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid where medium = 'oil' group by artists.artistid order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1306,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
      "infer_predictions": [
        [
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'oils' order by year asc",
          "select paintingid , location , title from paintings where medium = 'Oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where medium = 'oily' order by year asc"
        ]
      ]
    },
    {
      "id": 1307,
      "db_id": "art_1",
      "gold": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
      "infer_predictions": [
        [
          "select paintingid , location , title from paintings where medium = 'oil' order by year asc",
          "select paintingid , location , title from paintings where year = 2013 order by year asc",
          "select paintingid , location , title from paintings where year = 2004 order by year asc",
          "select paintingid , location , title from paintings where year = 2009 order by year asc",
          "select paintingid , location , title from paintings where year = 2000 order by year asc",
          "select paintingid , location , title from paintings where year = 2008 order by year asc",
          "select paintingid , location , title from paintings where year = 2010 order by year asc",
          "select paintingid , location , title from paintings where year = 2007 order by year asc"
        ]
      ]
    },
    {
      "id": 1308,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
      "infer_predictions": [
        [
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location and title from paintings where height_mm > 1000 order by title asc"
        ]
      ]
    },
    {
      "id": 1309,
      "db_id": "art_1",
      "gold": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
      "infer_predictions": [
        [
          "select year , location , title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm >1000 order by title asc",
          "select year , location ,title from paintings where height_mm > 1000 order by title asc",
          "select year , location , title from paintings where height_mm > 1000 order by title asc"
        ]
      ]
    },
    {
      "id": 1310,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
      "infer_predictions": [
        [
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid except select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid",
          "select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid except select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid except select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid",
          "select artists.fname , artists.lname from paintings join artists on paintings.painterid = artists.artistid except select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid"
        ]
      ]
    },
    {
      "id": 1311,
      "db_id": "art_1",
      "gold": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
      "infer_predictions": [
        [
          "select fname , lname from artists except select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid join paintings on artists.artistid = paintings.painterid",
          "select fname , lname from artists except select artists.fname , artists.lname from artists join paintings on artists.artistid = paintings.painterid join sculptures on sculptures.sculptorid = artists.artistid",
          "select fname , lname from artists except select artists.fname , artists.lname from sculptures join artists on sculptures.sculptorid = artists.artistid join paintings on paintings.painterid = artists.artistid",
          "select fname , lname from artists except select artists.fname , artists.lname from artists join sculptures on artists.artistid = sculptures.sculptorid join paintings on artists.artistid = paintings.painterid"
        ]
      ]
    },
    {
      "id": 1312,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 except select location from paintings where medium = 'mediumon'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'oil'",
          "select distinct location from paintings where year < 1885 except select distinct location from paintings where medium = 'mediumon'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'canvas'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'medium on canvas'",
          "select location from paintings where year < 1885 except select distinct location from paintings where medium = 'mediumon'",
          "select location from paintings where year < 1885 except select location from paintings where medium = 'paint' and mediumon = 'canvas'"
        ]
      ]
    },
    {
      "id": 1313,
      "db_id": "art_1",
      "gold": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
      "infer_predictions": [
        [
          "select location from paintings where year < 1885 and mediumon != 'canvas'",
          "select location from paintings where year < 1885 and medium != 'canvas'",
          "select location from paintings where year < 1885 and mediumon != 'canva'",
          "select location from paintings where year < 1885 and mediumon != 'Canvas'",
          "select location from paintings where year < 1885 and mediumon != 'canvas'",
          "select location from paintings where year < 1885 and medium != 'canvas'"
        ]
      ]
    },
    {
      "id": 1314,
      "db_id": "car_road_race",
      "gold": "SELECT count(*) FROM race",
      "infer_predictions": [
        [
          "select count ( * ) from race"
        ]
      ]
    },
    {
      "id": 1315,
      "db_id": "car_road_race",
      "gold": "SELECT count(*) FROM race",
      "infer_predictions": [
        [
          "select count ( * ) from race"
        ]
      ]
    },
    {
      "id": 1316,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
      "infer_predictions": [
        [
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from race order by winning_team asc",
          "Select winning_driver , winning_team from race order by winning_team asc"
        ]
      ]
    },
    {
      "id": 1317,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
      "infer_predictions": [
        [
          "select winning_driver , winning_team from race order by winning_team asc",
          "select winning_driver , winning_team from race order by winning_team asc",
          "Select winning_driver , winning_team from race order by winning_team asc"
        ]
      ]
    },
    {
      "id": 1318,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
      "infer_predictions": [
        [
          "select winning_driver from race where pole_position != 'Junior Strous'",
          "select distinct winning_driver from race where pole_position != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Sterous'",
          "select winning_driver from race where pole_position != 'Junior Strrous'",
          "select winning_driver from race where pole_position != 'Junior Srous'",
          "select winning_driver from race where pole_position != 'Junior Straus'"
        ]
      ]
    },
    {
      "id": 1319,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
      "infer_predictions": [
        [
          "select winning_driver from race where pole_position != 'Junior Strous'",
          "select winning_driver from race where pole_position != 'Junior Strous' except select winning_driver from race where pole_position = 'Junior Strous'",
          "select winning_driver from race where pole_position not in ( select pole_position from race where pole_position = 'Junior Strous' )",
          "select winning_driver from race where pole_position != ( select pole_position from race where driver_id = 1 )",
          "select winning_driver from race except select winning_driver from race where pole_position = 'Junior Strous'",
          "select winning_driver from race where pole_position != ( select pole_position from race where driver_id = 'Junior Strous' )"
        ]
      ]
    },
    {
      "id": 1320,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select constructor from driver order by age asc",
          "select distinct constructor from driver order by age asc",
          "select constructor from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1321,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select distinct constructor from driver order by age asc",
          "Select distinct constructor from driver order by age asc",
          "select constructor from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1322,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
      "infer_predictions": [
        [
          "select distinct entrant from driver where age >= 20",
          "select distinct ( entrant ) from driver where age >= 20",
          "select distinct entrant from driver where age > 20",
          "select distinct entrant from driver where age >= 20 != 0",
          "select distinct entrant from driver where age >= 20 != 'adult'",
          "Select distinct entrant from driver where age >= 20"
        ]
      ]
    },
    {
      "id": 1323,
      "db_id": "car_road_race",
      "gold": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
      "infer_predictions": [
        [
          "select distinct entrant from driver where age >= 20",
          "select distinct entrant from driver where age > 20",
          "select distinct ( entrant ) from driver where age >= 20",
          "select distinct entrant from driver where age >= 20 != 'null'",
          "select distinct entrant from driver where age >= 20 != 0",
          "select distinct entrant from driver where age >= 20 != 'adult'"
        ]
      ]
    },
    {
      "id": 1324,
      "db_id": "car_road_race",
      "gold": "SELECT max(Age) ,  min(Age) FROM driver",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) , min( age ) from driver",
          "select max ( age  ) , min ( age ) from driver",
          "select max ( age ) , min ( age ) from driver",
          "select max ( age ) , min ( age ) from driver"
        ]
      ]
    },
    {
      "id": 1325,
      "db_id": "car_road_race",
      "gold": "SELECT max(Age) ,  min(Age) FROM driver",
      "infer_predictions": [
        [
          "select max ( age ) , min ( age ) from driver"
        ]
      ]
    },
    {
      "id": 1326,
      "db_id": "car_road_race",
      "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
      "infer_predictions": [
        [
          "select count ( distinct engine ) from driver where age > 30 or age < 20",
          "select count ( distinct engine ) from driver where age > 30 or age <= 20",
          "select count ( distinct engine ) from driver where age > 20 or age < 30",
          "select count ( distinct engine ) from driver where age >30 or age < 20",
          "select count ( distinct engine ) from driver where age > 30 or age < 20"
        ]
      ]
    },
    {
      "id": 1327,
      "db_id": "car_road_race",
      "gold": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
      "infer_predictions": [
        [
          "select count ( distinct engine ) from driver where age > 30 or age < 20",
          "select count ( distinct engine ) from driver where age > 30 or age <= 20",
          "select count ( distinct engine ) from driver where age >> 30 or age < 20",
          "select count ( distinct engine ) from driver where age > 20 or age < 30"
        ]
      ]
    },
    {
      "id": 1328,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
      "infer_predictions": [
        [
          "select driver_name from driver order by driver_name desc",
          "select distinct driver_name from driver order by driver_name desc",
          "Select driver_name from driver order by driver_name desc"
        ]
      ]
    },
    {
      "id": 1329,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
      "infer_predictions": [
        [
          "select driver_name from driver order by driver_name desc",
          "select distinct driver_name from driver order by driver_name desc",
          "Select driver_name from driver order by driver_name desc"
        ]
      ]
    },
    {
      "id": 1330,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , race.race_name from race join driver on race.driver_id = driver.driver_id",
          "select driver.driver_name , race.race_name from driver join race on driver.driver_id = race.driver_id"
        ]
      ]
    },
    {
      "id": 1331,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , race.race_name from race join driver on race.driver_id = driver.driver_id",
          "select driver.driver_name , race.race_name from driver join race on driver.driver_id = race.driver_id"
        ]
      ]
    },
    {
      "id": 1332,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by race.driver_id",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by race.driver_id",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_id"
        ]
      ]
    },
    {
      "id": 1333,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
      "infer_predictions": [
        [
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_name",
          "select count ( * ) , driver.driver_name from driver join race on driver.driver_id = race.driver_id group by driver.driver_name",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by driver.driver_id",
          "select driver.driver_name , count ( * ) from driver join race on driver.driver_id = race.driver_id group by race.driver_id",
          "select count ( * ) , driver.driver_name from driver join race on driver.driver_id = race.driver_id group by driver.driver_id",
          "select driver.driver_name , count ( * ) from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select count ( * ) , driver.driver_name from race join driver on race.driver_id = driver.driver_id group by driver.driver_name",
          "select sum ( race.report ) , driver.driver_name from driver join race on driver.driver_id = race.driver_id group by driver.driver_name"
        ]
      ]
    },
    {
      "id": 1334,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by driver.age order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1335,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id order by count ( * ) desc limit 1",
          "select driver.age from race join driver on race.driver_id = driver.driver_id group by driver.age order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.age order by count ( * ) desc limit 1",
          "select driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1336,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_name having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1337,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by race.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from driver join race on driver.driver_id = race.driver_id group by driver.driver_id having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_name having count ( * ) >= 2",
          "select driver.driver_name , driver.age from race join driver on race.driver_id = driver.driver_id group by driver.driver_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1338,
      "db_id": "car_road_race",
      "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
      "infer_predictions": [
        [
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select distinct race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select race.race_name from driver join race on driver.driver_id = race.driver_id where driver.age >= 26",
          "select distinct race.race_name from driver join race on driver.driver_id = race.driver_id where driver.age >= 26"
        ]
      ]
    },
    {
      "id": 1339,
      "db_id": "car_road_race",
      "gold": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
      "infer_predictions": [
        [
          "select race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select race.race_name from driver join race on driver.driver_id = race.driver_id where driver.age >= 26",
          "select distinct race.race_name from race join driver on race.driver_id = driver.driver_id where driver.age >= 26",
          "select distinct race.race_name from driver join race on driver.driver_id = race.driver_id where driver.age >= 26"
        ]
      ]
    },
    {
      "id": 1340,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
      "infer_predictions": [
        [
          "select driver_name from driver where constructor != 'Bugatti'",
          "select driver_name from driver where constructor != 'Bulgati'",
          "select driver_name from driver where constructor != 'Bulgatti'",
          "select driver_name from driver where constructor != 'Bugatti' != 'Bugatti'",
          "select driver_name from driver where constructor != 'Bugatti '"
        ]
      ]
    },
    {
      "id": 1341,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
      "infer_predictions": [
        [
          "select driver_name from driver except select driver_name from driver where constructor = 'Bugatti'",
          "select driver_name from driver where constructor not in ( select constructor from driver where constructor = 'Bugatti' )",
          "select driver_name from driver where constructor != 'Bugatti'",
          "select driver_name from driver where constructor not in ( select constructor from driver where chassis = 'Bugatti' )",
          "select driver_name from driver where constructor != 'Bugatti' except select driver_name from driver where constructor = 'Bugatti'",
          "select driver_name from driver where constructor not in ( select constructor from driver where engine = 'Bugatti' )"
        ]
      ]
    },
    {
      "id": 1342,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
      "infer_predictions": [
        [
          "select constructor , count ( * ) from driver group by constructor",
          "select count ( * ) , constructor from driver group by constructor",
          "select constructor , count ( * ) from driver group by constructor",
          "select constructor , count ( * ) from driver group by constructor"
        ]
      ]
    },
    {
      "id": 1343,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
      "infer_predictions": [
        [
          "select constructor , count ( * ) from driver group by constructor",
          "select count ( * ) , constructor from driver group by constructor",
          "select constructor , count ( * ) from driver group by constructor"
        ]
      ]
    },
    {
      "id": 1344,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1345,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1",
          "select engine from driver group by engine order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1346,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine type from driver group by engine having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1347,
      "db_id": "car_road_race",
      "gold": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select engine from driver group by engine having count ( * ) >= 2",
          "select engine type from driver group by engine having count ( * ) >= 2",
          "select engine from driver group by engine having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1348,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
      "infer_predictions": [
        [
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )"
        ]
      ]
    },
    {
      "id": 1349,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
      "infer_predictions": [
        [
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )",
          "select driver_name from driver where driver_id not in ( select driver_id from race )"
        ]
      ]
    },
    {
      "id": 1350,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
      "infer_predictions": [
        [
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age <= 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 20"
        ]
      ]
    },
    {
      "id": 1351,
      "db_id": "car_road_race",
      "gold": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
      "infer_predictions": [
        [
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age <= 20 intersect select constructor from driver where age > 30",
          "select constructor from driver where age < 20 intersect select constructor from driver where age > 20"
        ]
      ]
    },
    {
      "id": 1352,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select winning_team from race group by winning_team having count ( * ) > 1",
          "select winning_team from race group by winning_team having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1353,
      "db_id": "car_road_race",
      "gold": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select winning_team from race group by winning_team having count ( * ) > 1",
          "select winning_team from race group by winning_team having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1354,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'"
        ]
      ]
    },
    {
      "id": 1355,
      "db_id": "car_road_race",
      "gold": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Jamie Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Skerlong'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe' intersect select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'Carl Scerlong'"
        ]
      ]
    },
    {
      "id": 1356,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select distinct driver_name from driver except select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select driver_name from driver except select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver_name from driver except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select driver_name from driver except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver_name from driver except select distinct driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver.driver_name from driver join race on driver.driver_id = race.driver_id except select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver.driver_name from race join driver on race.driver_id = driver.driver_id except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver_name from driver except select distinct driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'"
        ]
      ]
    },
    {
      "id": 1357,
      "db_id": "car_road_race",
      "gold": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
      "infer_predictions": [
        [
          "select driver_name from driver except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select driver_name from driver except select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select driver.driver_name from race join driver on race.driver_id = driver.driver_id except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select driver.driver_name from driver join race on driver.driver_id = race.driver_id except select driver.driver_name from driver join race on driver.driver_id = race.driver_id where race.pole_position = 'James Hinchcliffe'",
          "select distinct driver_name from driver except select driver.driver_name from race join driver on race.driver_id = driver.driver_id where race.pole_position = 'James Hinchcliffe'"
        ]
      ]
    },
    {
      "id": 1358,
      "db_id": "country_language",
      "gold": "SELECT count(*) FROM languages",
      "infer_predictions": [
        [
          "select count ( * ) from languages"
        ]
      ]
    },
    {
      "id": 1359,
      "db_id": "country_language",
      "gold": "SELECT count(*) FROM languages",
      "infer_predictions": [
        [
          "select count ( * ) from languages",
          "select count ( * ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id"
        ]
      ]
    },
    {
      "id": 1360,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages ORDER BY name ASC",
      "infer_predictions": [
        [
          "select name from languages order by name asc",
          "Select name from languages order by name asc",
          "select name from languages order by name asc"
        ]
      ]
    },
    {
      "id": 1361,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages ORDER BY name ASC",
      "infer_predictions": [
        [
          "select name from languages order by name asc",
          "Select name from languages order by name asc",
          "select name from languages order by name asc"
        ]
      ]
    },
    {
      "id": 1362,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
      "infer_predictions": [
        [
          "select name from languages where name like '%ish%'",
          "select name from languages where name like '%ish%'",
          "select name from languages where name like '%ish%'",
          "select name from countries where name like '%ish%'"
        ]
      ]
    },
    {
      "id": 1363,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
      "infer_predictions": [
        [
          "select name from languages where name like '%ish%'",
          "select name from languages where name like '%ish%'",
          "select name from languages where name like '%ish%'",
          "select name from languages where name like '/%ish%'"
        ]
      ]
    },
    {
      "id": 1364,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by overall_score desc",
          "Select name from countries order by overall_score desc"
        ]
      ]
    },
    {
      "id": 1365,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY overall_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by overall_score desc",
          "Select name from countries order by overall_score desc",
          "select name from countries order by overall_score desc"
        ]
      ]
    },
    {
      "id": 1366,
      "db_id": "country_language",
      "gold": "SELECT avg(justice_score) FROM countries",
      "infer_predictions": [
        [
          "select avg ( justice_score ) from countries",
          "select justice_score , avg ( overall_score ) from countries group by justice_score",
          "select justice_score , avg ( overall_score ) from countries group by justice_score",
          "select justice_score , avg ( justice_score ) from countries group by justice_score",
          "select justice_score , avg ( justice_score ) from countries group by justice_score"
        ]
      ]
    },
    {
      "id": 1367,
      "db_id": "country_language",
      "gold": "SELECT avg(justice_score) FROM countries",
      "infer_predictions": [
        [
          "select avg ( justice_score ) from countries",
          "select justice_score , avg ( overall_score ) from countries group by justice_score",
          "select justice_score , avg ( overall_score ) from countries group by justice_score",
          "select justice_score , avg ( justice_score ) from countries group by justice_score",
          "select justice_score , avg ( justice_score ) from countries group by justice_score"
        ]
      ]
    },
    {
      "id": 1368,
      "db_id": "country_language",
      "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
      "infer_predictions": [
        [
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'",
          "select max ( health_score ) , min ( health_score ) from countries where name not in ( select name from countries where name = 'Norway' )",
          "select max ( health_score ) , min ( health_score ) from countries where name not in ( select countries.name from countries join official_languages on countries.id = official_languages.country_id where official_languages.language_id = 'English' )",
          "select max ( health_score ) , min ( health_score ) from countries where name not in ( select countries.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.name != 'Norway' )",
          "select max ( health_score ) , min ( health_score ) from countries where name not in ( select countries.name from countries join official_languages on countries.id = official_languages.country_id where official_languages.language_id = 'Norway' )",
          "select max ( health_score ) , min ( health_score ) from countries where name not in ( select countries.name from countries join official_languages on countries.id = official_languages.country_id where official_languages.language_id = 'english' )"
        ]
      ]
    },
    {
      "id": 1369,
      "db_id": "country_language",
      "gold": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
      "infer_predictions": [
        [
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'",
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norge'",
          "select max ( health_score ) , min ( health_score ) from countries where name != 'Norway'",
          "select max ( health_score ) , min ( health_score ) from countries where name != 'NORWAY'"
        ]
      ]
    },
    {
      "id": 1370,
      "db_id": "country_language",
      "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
      "infer_predictions": [
        [
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( * ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages"
        ]
      ]
    },
    {
      "id": 1371,
      "db_id": "country_language",
      "gold": "SELECT count(DISTINCT language_id) FROM official_languages",
      "infer_predictions": [
        [
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages",
          "select count ( distinct language_id ) from official_languages"
        ]
      ]
    },
    {
      "id": 1372,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY education_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by education_score desc",
          "Select name from countries order by education_score desc"
        ]
      ]
    },
    {
      "id": 1373,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY education_score DESC",
      "infer_predictions": [
        [
          "select name from countries order by education_score desc",
          "Select name from countries order by education_score desc",
          "select name from countries order by education_score desc"
        ]
      ]
    },
    {
      "id": 1374,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from countries order by politics_score desc limit 1",
          "select name from countries order by politics_score desc limit 1"
        ]
      ]
    },
    {
      "id": 1375,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from countries order by politics_score desc limit 1",
          "select name from countries order by politics_score asc limit 1",
          "select name from countries order by politics_score desc limit 1",
          "select name from countries order by politics_score desc limit 1"
        ]
      ]
    },
    {
      "id": 1376,
      "db_id": "country_language",
      "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
      "infer_predictions": [
        [
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id"
        ]
      ]
    },
    {
      "id": 1377,
      "db_id": "country_language",
      "gold": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
      "infer_predictions": [
        [
          "select countries.name , languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id",
          "select countries.name , languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id"
        ]
      ]
    },
    {
      "id": 1378,
      "db_id": "country_language",
      "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
      "infer_predictions": [
        [
          "select official_languages.language_id , count ( * ) from countries join official_languages on countries.id = official_languages.country_id group by official_languages.language_id",
          "select languages.name , count ( * ) from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.name",
          "select language_id , count ( * ) from official_languages join countries on official_languages.country_id = countries.id group by language_id",
          "select languages.name , count ( * ) from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by official_languages.language_id",
          "select official_languages.language_id , count ( * ) from official_languages join countries on official_languages.country_id = countries.id group by official_languages.language_id"
        ]
      ]
    },
    {
      "id": 1379,
      "db_id": "country_language",
      "gold": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
      "infer_predictions": [
        [
          "select languages.name , count ( * ) from languages join official_languages on languages.id = official_languages.language_id group by languages.name",
          "select languages.name , count ( * ) from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id",
          "select languages.name , count ( * ) from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id",
          "select languages.name , count ( * ) from official_languages join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( * ) from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.name",
          "select languages.name , count ( * ) from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( * ) from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name",
          "select languages.name , count ( * ) from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by languages.name"
        ]
      ]
    },
    {
      "id": 1380,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.name order by count ( * ) desc limit 1",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 1",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id order by count ( * ) desc limit 1",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.country_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1381,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 1",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.id order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.name order by count ( * ) desc limit 1",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.id order by count ( * ) desc limit 1",
          "select language_id from official_languages group by language_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1382,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.name having count ( * ) >= 2",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.id having count ( * ) >= 2",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( * ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id having count ( * ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.id having count ( * ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.name having count ( * ) >= 2",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name having count ( * ) >= 2",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by languages.name having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1383,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.name having count ( * ) >= 2",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by languages.name having count ( * ) >= 2",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( * ) >= 2",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id having count ( * ) >= 2",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by official_languages.language_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1384,
      "db_id": "country_language",
      "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( overall_score ) from countries join official_languages on countries.id = official_languages.country_id where official_languages.language_id = 'English'"
        ]
      ]
    },
    {
      "id": 1385,
      "db_id": "country_language",
      "gold": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1386,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.name order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select official_languages.language_id from official_languages join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id group by languages.id order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1387,
      "db_id": "country_language",
      "gold": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.country_id order by count ( * ) desc limit 3",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id group by official_languages.country_id order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.name order by count ( * ) desc limit 3",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.id order by count ( * ) desc limit 3",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by count ( * ) desc limit 3",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id order by count ( * ) desc limit 3",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1388,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
      "infer_predictions": [
        [
          "select official_languages.language_id from countries join official_languages on countries.id = official_languages.country_id group by official_languages.language_id order by avg ( overall_score ) desc"
        ]
      ]
    },
    {
      "id": 1389,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by avg ( overall_score ) desc",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by official_languages.country_id order by avg ( overall_score ) desc",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by official_languages.language_id order by avg ( overall_score ) desc",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by countries.id order by avg ( overall_score ) desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.name order by avg ( overall_score ) desc",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id group by official_languages.country_id order by avg ( overall_score ) desc",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id group by languages.name order by avg ( overall_score ) desc",
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id group by languages.id order by avg ( overall_score ) desc"
        ]
      ]
    },
    {
      "id": 1390,
      "db_id": "country_language",
      "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by official_languages.country_id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.name order by count ( * ) desc limit 1",
          "select countries.name from official_languages join countries on official_languages.country_id = countries.id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by country_id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1391,
      "db_id": "country_language",
      "gold": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.name order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by official_languages.country_id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from official_languages join countries on official_languages.country_id = countries.id group by countries.id order by count ( * ) desc limit 1",
          "select countries.name from countries join official_languages on countries.id = official_languages.country_id group by country_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1392,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1393,
      "db_id": "country_language",
      "gold": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where id not in ( select language_id from official_languages )",
          "select name from languages where Id not in ( select language_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1394,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from countries where id not in ( select country_id from official_languages )",
          "select name from countries where Id not in ( select country_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1395,
      "db_id": "country_language",
      "gold": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
      "infer_predictions": [
        [
          "select name from countries where id not in ( select country_id from official_languages )",
          "select name from countries where Id not in ( select country_id from official_languages )"
        ]
      ]
    },
    {
      "id": 1396,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score < 90",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id where countries.overall_score < 90",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score < 90"
        ]
      ]
    },
    {
      "id": 1397,
      "db_id": "country_language",
      "gold": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
      "infer_predictions": [
        [
          "select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score < 90",
          "select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from languages join official_languages on languages.id = official_languages.language_id join countries on official_languages.country_id = countries.id where countries.overall_score < 90",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score > 95 intersect select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from countries join official_languages on countries.id = official_languages.country_id join languages on official_languages.language_id = languages.id where countries.overall_score < 90",
          "select languages.name from official_languages join languages on official_languages.language_id = languages.id join countries on official_languages.country_id = countries.id where countries.overall_score > 95 intersect select languages.name from official_languages join countries on official_languages.country_id = countries.id join languages on official_languages.language_id = languages.id where countries.overall_score < 90"
        ]
      ]
    },
    {
      "id": 1398,
      "db_id": "real_estate_rentals",
      "gold": "SELECT country ,  town_city FROM Addresses;",
      "infer_predictions": [
        [
          "select country , town_city from addresses"
        ]
      ]
    },
    {
      "id": 1399,
      "db_id": "real_estate_rentals",
      "gold": "SELECT country ,  town_city FROM Addresses;",
      "infer_predictions": [
        [
          "select country , town_city from addresses"
        ]
      ]
    },
    {
      "id": 1400,
      "db_id": "real_estate_rentals",
      "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
      "infer_predictions": [
        [
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id group by addresses.county_state_province",
          "select addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id group by addresses.county_state_province",
          "select addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id group by properties.property_address_id",
          "select addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id group by properties.property_address_id",
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id group by addresses.county_state_province"
        ]
      ]
    },
    {
      "id": 1401,
      "db_id": "real_estate_rentals",
      "gold": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
      "infer_predictions": [
        [
          "select addresses.county_state_province from addresses join properties on addresses.address_id = properties.property_address_id",
          "select county_state_province from addresses",
          "select addresses.county_state_province from properties join addresses on properties.property_address_id = addresses.address_id",
          "select addresses.county_state_province from addresses join properties on properties.property_address_id = addresses.address_id"
        ]
      ]
    },
    {
      "id": 1402,
      "db_id": "real_estate_rentals",
      "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
      "infer_predictions": [
        [
          "select feature_description from features where feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'roof'",
          "select feature_description from features where feature_name = 'roofed'",
          "select feature_description from features where feature_name like '%roof%'",
          "select feature_description from features where feature_name = 'roofer'",
          "select feature_description from features where feature_name = 'roof'",
          "select feature_description from features where feature_name = 'roofing'"
        ]
      ]
    },
    {
      "id": 1403,
      "db_id": "real_estate_rentals",
      "gold": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
      "infer_predictions": [
        [
          "select feature_description from features where feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'rooftop'",
          "select feature_description from features where feature_name = 'rooftop' != 'rooftop'"
        ]
      ]
    },
    {
      "id": 1404,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_name order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from property_features join features on property_features.feature_id = features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from property_features join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by properties.property_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1405,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_name order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from property_features join features on property_features.feature_id = features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from property_features join features on property_features.feature_id = features.feature_id group by features.feature_name order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from property_features join features on property_features.feature_id = features.feature_id group by features.feature_id order by count ( * ) desc limit 1",
          "select features.feature_name , features.feature_description from features join property_features on features.feature_id = property_features.feature_id group by property_features.feature_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1406,
      "db_id": "real_estate_rentals",
      "gold": "SELECT min(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select min ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1407,
      "db_id": "real_estate_rentals",
      "gold": "SELECT min(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select min ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1408,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from properties where parking_lots = 1 or garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select garage_yn from properties where parking_lots = 1",
          "select count ( * ) from properties where parking_lots = 1 and garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 or garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 OR garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 or garage_yn =1",
          "select count ( * ) from properties where parking_lots = 1 or garage_yn = 1"
        ]
      ]
    },
    {
      "id": 1409,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from properties where parking_lots = 1 or garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select count ( * ) from properties where garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 union select garage_yn from properties where parking_lots = 1",
          "select count ( * ) from properties where parking_lots = 1 or garage_yn = 1",
          "select count ( * ) from properties where parking_lots = 1 and garage_yn = 1",
          "select count ( * ) from properties where parking_lots = ( select parking_lots from properties ) or garage_yn = ( select garage_yn from properties )",
          "select count ( * ) from properties where parking_lots = ( select parking_lots from properties ) or garage_yn = 1"
        ]
      ]
    },
    {
      "id": 1410,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
      "infer_predictions": [
        [
          "select age_category_code from users where user_category_code like '%Mother%'"
        ]
      ]
    },
    {
      "id": 1411,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1412,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join properties on users.user_id = properties.owner_user_id group by users.user_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1413,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join properties on users.user_id = properties.owner_user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.owner_user_id group by users.user_id order by count ( * ) desc limit 1",
          "select users.first_name from properties join users on properties.owner_user_id = users.user_id group by users.first_name order by count ( * ) desc limit 1",
          "select users.first_name from users join user_property_history on users.user_id = user_property_history.user_id join properties on user_property_history.property_id = properties.owner_user_id group by users.first_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1414,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
      "infer_predictions": [
        [
          "select avg ( room_count ) from properties where property_type_code = 'Garden'",
          "select avg ( room_count ) from properties where property_type_code = 'GARDEN'",
          "select avg ( room_count ) from properties where property_type_code = 'GARDENS'"
        ]
      ]
    },
    {
      "id": 1415,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
      "infer_predictions": [
        [
          "select avg ( properties.room_count ) from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'Garden'",
          "select avg ( room_count ) from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'Garden'",
          "select avg ( properties.room_count ) from properties join property_features on properties.property_id = property_features.property_id join features on property_features.feature_id = features.feature_id where property_features.property_feature_description = 'Gardening'",
          "select avg ( room_count ) from properties join property_features on properties.property_id = property_features.property_id where property_features.feature_value = 'Garden'"
        ]
      ]
    },
    {
      "id": 1416,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
      "infer_predictions": [
        [
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_value = 'Swimming Pool'",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_value = 1",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_value = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'swimming pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_value = 'swimming pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id join property_features on properties.property_id = property_features.property_id where property_features.feature_id = 'pool'"
        ]
      ]
    },
    {
      "id": 1417,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
      "infer_predictions": [
        [
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'Swimming Pool'",
          "select distinct addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'Swimming Pool'",
          "select addresses.town_city from properties join addresses on properties.property_address_id = addresses.address_id where properties.property_name = 'Swimming Pool'",
          "select distinct addresses.town_city from properties join addresses on properties.property_address_id = addresses.address_id where properties.property_name = 'Swimming Pool'",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'swimming pool'",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'pool'",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name like '%pool%'",
          "select addresses.town_city from addresses join properties on addresses.address_id = properties.property_address_id where properties.property_name = 'Pool'"
        ]
      ]
    },
    {
      "id": 1418,
      "db_id": "real_estate_rentals",
      "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
      "infer_predictions": [
        [
          "select property_id , price_min from properties order by vendor_requested_price asc limit 1",
          "select property_id , price_max from properties order by vendor_requested_price asc limit 1",
          "select property_id , price_min from properties order by vendor_requested_price asc limit 1",
          "select property_Id , price_min from properties order by vendor_requested_price asc limit 1"
        ]
      ]
    },
    {
      "id": 1419,
      "db_id": "real_estate_rentals",
      "gold": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
      "infer_predictions": [
        [
          "select property_id , vendor_requested_price from properties order by vendor_requested_price asc limit 1",
          "select property_id , price_min from properties order by vendor_requested_price asc limit 1",
          "select property_id , vendor_requested_price from properties order by vendor_requested_price asc limit 1",
          "select property_Id , vendor_requested_price from properties order by vendor_requested_price asc limit 1"
        ]
      ]
    },
    {
      "id": 1420,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) from properties",
          "select avg ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1421,
      "db_id": "real_estate_rentals",
      "gold": "SELECT avg(room_count) FROM Properties;",
      "infer_predictions": [
        [
          "select avg ( room_count ) from properties",
          "select property_id , avg ( room_count ) from properties group by property_id",
          "select avg ( room_count ) from properties",
          "select property_id , avg ( room_count ) from properties group by properties.property_id",
          "select avg ( room_count ) from properties",
          "select property_id , avg ( room_count ) from properties group by room_count",
          "select avg ( room_count ) from properties"
        ]
      ]
    },
    {
      "id": 1422,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
      "infer_predictions": [
        [
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms"
        ]
      ]
    },
    {
      "id": 1423,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(DISTINCT room_size) FROM Rooms;",
      "infer_predictions": [
        [
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms",
          "select count ( distinct room_size ) from rooms"
        ]
      ]
    },
    {
      "id": 1424,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
      "infer_predictions": [
        [
          "select user_id , search_string from user_searches group by user_id having count ( * ) >= 2",
          "select user_Id , search_string from user_searches group by user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1425,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
      "infer_predictions": [
        [
          "select user_id , search_seq from user_searches group by user_id having count ( * ) >= 2",
          "select user_id , search_seq from user_searches group by user_id having count ( * ) >= 2 order by search_seq asc limit 2",
          "select user_Id , search_seq from user_searches group by user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1426,
      "db_id": "real_estate_rentals",
      "gold": "SELECT max(search_datetime) FROM User_Searches;",
      "infer_predictions": [
        [
          "select search_datetime from user_searches order by search_datetime desc limit 1",
          "select max ( search_datetime ) from user_searches",
          "select search_datetime from user_searches order by search_datetime desc limit 1",
          "select search_datetime from user_searches order by search_datetime desc limit 1"
        ]
      ]
    },
    {
      "id": 1427,
      "db_id": "real_estate_rentals",
      "gold": "SELECT max(search_datetime) FROM User_Searches;",
      "infer_predictions": [
        [
          "select search_datetime from user_searches order by search_datetime desc limit 1",
          "select max ( search_datetime ) from user_searches",
          "select search_datetime from user_searches order by search_datetime desc limit 1"
        ]
      ]
    },
    {
      "id": 1428,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
      "infer_predictions": [
        [
          "select search_datetime , search_string from user_searches order by search_string desc"
        ]
      ]
    },
    {
      "id": 1429,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
      "infer_predictions": [
        [
          "select search_string , search_datetime from user_searches order by search_string desc",
          "select search_string , search_datetime from user_searches order by search_string desc"
        ]
      ]
    },
    {
      "id": 1430,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
      "infer_predictions": [
        [
          "select zip_postcode from addresses where address_id not in ( select properties.property_address_id from properties join users on properties.owner_user_id = users.user_id group by users.user_id having count ( * ) <= 2 )"
        ]
      ]
    },
    {
      "id": 1431,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
      "infer_predictions": [
        [
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by users.user_id having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by addresses.zip_postcode having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by users.user_id having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id group by addresses.zip_postcode having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by properties.owner_user_id having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by addresses.zip_postcode having count ( * ) <= 2",
          "select zip_postcode from addresses except select addresses.zip_postcode from properties join addresses on properties.property_address_id = addresses.address_id join users on properties.owner_user_id = users.user_id group by users.user_id having count ( * ) < 2"
        ]
      ]
    },
    {
      "id": 1432,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select users.user_category_code , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_category_code , users.user_id from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_category_code , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select users.user_category_code , user_searches.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1433,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select users.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select user_searches.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by user_searches.user_id having count ( * ) = 1",
          "select user_searches.user_id , users.user_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) = 1",
          "select user_searches.user_id , users.user_category_code from user_searches join users on user_searches.user_id = users.user_id group by user_searches.user_id having count ( * ) = 1",
          "select user_searches.user_id , users.user_category_code from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1",
          "select user_id , user_category_code from users group by user_id having count ( * ) = 1",
          "select users.user_id , users.user_category_code from user_searches join users on user_searches.user_id = users.user_id group by users.user_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1434,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
      "infer_predictions": [
        [
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_seq asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id where user_searches.search_datetime = ( select search_datetime from user_searches order by search_datetime asc limit 1 )",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id where user_searches.search_seq = ( select search_seq from user_searches order by search_seq asc limit 1 )",
          "select users.age_category_code from user_searches join users on user_searches.user_id = users.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id group by users.user_id order by count ( * ) asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id where user_searches.search_seq = ( select search_seq from user_searches order by search_datetime asc limit 1 )"
        ]
      ]
    },
    {
      "id": 1435,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
      "infer_predictions": [
        [
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from user_searches join users on user_searches.user_id = users.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by search_datetime asc limit 1",
          "select user_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1",
          "select users.age_category_code from users join user_searches on users.user_id = user_searches.user_id order by user_searches.search_datetime asc limit 1"
        ]
      ]
    },
    {
      "id": 1436,
      "db_id": "real_estate_rentals",
      "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
      "infer_predictions": [
        [
          "select login_name from users where age_category_code = 'Senior' order by first_name asc",
          "select login_name from users where age_category_code = '65+' order by first_name asc",
          "select login_name from users where age_category_code = 'senior' order by first_name asc",
          "select login_name from users where age_category_code = 'old' order by first_name asc",
          "select login_name from users where age_category_code = '60+' order by first_name asc",
          "select login_name from users where age_category_code = 'SENIOR' order by first_name asc",
          "select login_name from users where age_category_code = '70+' order by first_name asc",
          "select login_name from users where age_category_code = '50+' order by first_name asc"
        ]
      ]
    },
    {
      "id": 1437,
      "db_id": "real_estate_rentals",
      "gold": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
      "infer_predictions": [
        [
          "select login_name from users where age_category_code = 'Senior' order by first_name asc",
          "select login_name from users where age_category_code = '65+' order by first_name asc",
          "select login_name from users where age_category_code = 'senior' order by first_name asc",
          "select login_name from users where age_category_code = 'old' order by first_name asc",
          "select login_name from users where age_category_code = '60+' order by first_name asc",
          "select login_name from users where age_category_code = '65' order by first_name asc",
          "select login_name from users where age_category_code = '50+' order by first_name asc",
          "select login_name from users where age_category_code = '70' order by first_name asc"
        ]
      ]
    },
    {
      "id": 1438,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'T'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Yes'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = '1'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 1",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'T'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Yes'"
        ]
      ]
    },
    {
      "id": 1439,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
      "infer_predictions": [
        [
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Y'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'Yes'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = '1'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 'T'",
          "select count ( * ) from users join user_searches on users.user_id = user_searches.user_id where users.is_buyer = 1",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = 'Yes'",
          "select count ( * ) from user_searches join users on user_searches.user_id = users.user_id where users.is_buyer = '1'"
        ]
      ]
    },
    {
      "id": 1440,
      "db_id": "real_estate_rentals",
      "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
      "infer_predictions": [
        [
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'rational'",
          "select date_registered from users where login_name = 'ration'",
          "select date_registered from users where login_name = 'ratione' != 'null'",
          "select date_registered from users where login_name = 'ratione' != 'login_name'",
          "select date_registered from users where login_name = 'ratione' != '%user_id%'",
          "select date_registered from users where login_name = 'rationale'",
          "select date_registered from users where login_name = 'ratione' != '%%'"
        ]
      ]
    },
    {
      "id": 1441,
      "db_id": "real_estate_rentals",
      "gold": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
      "infer_predictions": [
        [
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione' != 'rational'",
          "select date_registered from users where login_name = 'rational'",
          "select date_registered from users where login_name = 'ratione' != 'ratione'",
          "select date_registered from users where login_name = 'ration'",
          "select date_registered from users where login_name = 'ratione'",
          "select date_registered from users where login_name = 'ratione' != '%%'"
        ]
      ]
    },
    {
      "id": 1442,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
      "infer_predictions": [
        [
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name and login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = '1'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1"
        ]
      ]
    },
    {
      "id": 1443,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
      "infer_predictions": [
        [
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'Y'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'Yes'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'S'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'T'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = '1'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'A'",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 1",
          "select first_name , middle_name , last_name , login_name from users where is_seller = 'yes'"
        ]
      ]
    },
    {
      "id": 1444,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
      "infer_predictions": [
        [
          "select line_1_number_building , line_2_number_street , town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior'",
          "select address_id , line_1_number_building , line_2_number_street , town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior Citizen'",
          "select line_1_number_building , line_2_number_street , town_city from addresses join users on addresses.address_id = users.user_address_id where age_category_code = 'Senior'"
        ]
      ]
    },
    {
      "id": 1445,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
      "infer_predictions": [
        [
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from users join addresses on users.user_address_id = addresses.address_id where users.age_category_code = 'Senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'Senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from users join addresses on users.user_address_id = addresses.address_id where users.age_category_code = 'senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from users join addresses on users.user_address_id = addresses.address_id where users.age_category_code = 'old'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from users join addresses on users.user_address_id = addresses.address_id where users.age_category_code = '65+'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'senior'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = 'old'",
          "select addresses.line_1_number_building , addresses.line_2_number_street , addresses.town_city from addresses join users on addresses.address_id = users.user_address_id where users.age_category_code = '65+'"
        ]
      ]
    },
    {
      "id": 1446,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
      "infer_predictions": [
        [
          "select count ( * ) from ( select * from property_features group by property_id having count ( * ) >= 2 )",
          "select count ( * ) from property_features group by property_id having count ( * ) >= 2",
          "select count ( * ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( * ) >= 2",
          "select count ( * ) from ( select properties.property_id from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( * ) >= 2 )",
          "select count ( * ) from ( select property_id from property_features group by property_id having count ( * ) >= 2 )"
        ]
      ]
    },
    {
      "id": 1447,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
      "infer_predictions": [
        [
          "select count ( * ) from ( select * from property_features group by property_id having count ( * ) >= 2 )",
          "select count ( * ) from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( * ) >= 2",
          "select count ( * ) from ( select properties.property_id from properties join property_features on properties.property_id = property_features.property_id group by properties.property_id having count ( * ) >= 2 )",
          "select count ( * ) from ( select property_id from property_features group by property_id having count ( * ) >= 2 )",
          "select count ( * ) from property_features group by property_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1448,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
      "infer_predictions": [
        [
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , property_photos.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , property_id from property_photos group by property_id",
          "select properties.property_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id",
          "select count ( * ) , property_photos.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by properties.property_id",
          "select count ( * ) , property_photos.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by property_photos.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id Group by properties.property_id"
        ]
      ]
    },
    {
      "id": 1449,
      "db_id": "real_estate_rentals",
      "gold": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
      "infer_predictions": [
        [
          "select count ( * ) , property_id from property_photos group by property_id",
          "select count ( * ) , property_photos.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by property_photos.property_id",
          "select count ( * ) , property_photos.property_id from property_photos join properties on property_photos.property_id = properties.property_id group by properties.property_id",
          "select count ( * ) , properties.property_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.property_id",
          "select count ( * ) , property_id from property_photos group by property_id order by count ( * ) desc",
          "select count ( * ) , property_photos.property_id from property_photos join properties on properties.property_id = property_photos.property_id group by property_photos.property_id"
        ]
      ]
    },
    {
      "id": 1450,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
      "infer_predictions": [
        [
          "select properties.owner_user_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select properties.owner_user_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select count ( * ) , properties.owner_user_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1451,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
      "infer_predictions": [
        [
          "select properties.owner_user_id , count ( * ) from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id",
          "select count ( * ) , properties.owner_user_id from properties join property_photos on properties.property_id = property_photos.property_id group by properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1452,
      "db_id": "real_estate_rentals",
      "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
      "infer_predictions": [
        [
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 'S' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'SINGLE' or users.age_category_code = 'STUDENT'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 'SINGLE' or users.age_category_code = 'STUDENT'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 'Single' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 1 or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.user_category_code = 'Single_Mother' or users.user_category_code = 'Student'"
        ]
      ]
    },
    {
      "id": 1453,
      "db_id": "real_estate_rentals",
      "gold": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
      "infer_predictions": [
        [
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 'S' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 1 or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.is_buyer = 'S' or users.is_buyer = 'Y'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'Single' or users.age_category_code = 'Student'",
          "select sum ( price_max ) from properties join users on properties.owner_user_id = users.user_id where users.age_category_code = 'SINGLE' or users.age_category_code = 'STUDENT'"
        ]
      ]
    },
    {
      "id": 1454,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
      "infer_predictions": [
        [
          "select user_property_history.datestamp , properties.property_name from user_property_history join properties on user_property_history.property_id = properties.property_id order by user_property_history.datestamp asc",
          "select user_property_history.datestamp , properties.property_name from properties join user_property_history on properties.property_id = user_property_history.property_id order by user_property_history.datestamp asc",
          "select user_property_history.datestamp , properties.property_name from user_property_history join properties on user_property_history.property_id = properties.property_id order by datestamp asc"
        ]
      ]
    },
    {
      "id": 1455,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
      "infer_predictions": [
        [
          "select user_property_history.datestamp , properties.property_name from user_property_history join properties on user_property_history.property_id = properties.property_id order by user_property_history.datestamp asc",
          "select user_property_history.datestamp , properties.property_name from properties join user_property_history on properties.property_id = user_property_history.property_id order by user_property_history.datestamp asc"
        ]
      ]
    },
    {
      "id": 1456,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , Properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , Properties.property_type_code from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , Properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by Properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( *) desc limit 1",
          "select ref_property_types.property_type_description , Properties.property_type_code from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by Properties.property_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1457,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select ref_property_types.property_type_description , properties.property_type_code from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on ref_property_types.property_type_code = properties.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1",
          "select ref_property_types.property_type_description , properties.property_type_code from ref_property_types join properties on properties.property_type_code = ref_property_types.property_type_code group by properties.property_type_code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1458,
      "db_id": "real_estate_rentals",
      "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
      "infer_predictions": [
        [
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select 'Age_category_description' from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = '60'",
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60' != 'Over 60'"
        ]
      ]
    },
    {
      "id": 1459,
      "db_id": "real_estate_rentals",
      "gold": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
      "infer_predictions": [
        [
          "select age_category_description from ref_age_categories where age_category_code = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_description = 'Over 60'",
          "select age_category_description from ref_age_categories where age_category_code = '60'"
        ]
      ]
    },
    {
      "id": 1460,
      "db_id": "real_estate_rentals",
      "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
      "infer_predictions": [
        [
          "select room_size , count ( * ) from rooms group by room_size",
          "select room_type_code , count ( * ) from rooms group by room_size"
        ]
      ]
    },
    {
      "id": 1461,
      "db_id": "real_estate_rentals",
      "gold": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
      "infer_predictions": [
        [
          "select room_size , count ( * ) from rooms group by room_size",
          "select room_size  , count ( * ) from rooms group by room_size",
          "select room_type_code , count ( * ) from rooms group by room_size"
        ]
      ]
    },
    {
      "id": 1462,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
      "infer_predictions": [
        [
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'",
          "select addresses.country from addresses join users on addresses.address_id = users.user_address_id where users.first_name = 'Robbie'",
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robby'",
          "select addresses.country from users join addresses on user_address_id = addresses.address_id where users.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1463,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
      "infer_predictions": [
        [
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robbie'",
          "select addresses.country from addresses join users on addresses.address_id = users.user_address_id where users.first_name = 'Robbie'",
          "select addresses.country from users join addresses on users.user_address_id = addresses.address_id where users.first_name = 'Robby'",
          "select addresses.country from users join addresses on user_address_id = addresses.address_id where users.first_name = 'Robbie'"
        ]
      ]
    },
    {
      "id": 1464,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
      "infer_predictions": [
        [
          "select users.first_name , users.middle_name , users.last_name from properties join users on properties.owner_user_id = users.user_id",
          "select distinct users.first_name , users.middle_name , users.last_name from properties join users on properties.owner_user_id = users.user_id",
          "select distinct users.first_name , users.middle_name , users.last_name from users join properties on users.user_id = properties.owner_user_id",
          "select users.first_name , users.middle_name , users.last_name from properties join user_property_history on properties.property_id = user_property_history.property_id join users on user_property_history.user_id = users.user_id",
          "select users.first_name , users.middle_name , users.last_name from properties join users on properties.owner_user_id = users.user_id where properties.property_address_id = users.user_address_id",
          "select users.first_name , users.middle_name , users.last_name from users join properties on users.user_id = properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1465,
      "db_id": "real_estate_rentals",
      "gold": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
      "infer_predictions": [
        [
          "select users.first_name , users.last_name from properties join user_property_history on properties.property_id = user_property_history.property_id join users on user_property_history.user_id = users.user_id where properties.property_address_id in ( select properties.property_id from user_property_history join properties on user_property_history.property_id = properties.property_id )",
          "select users.first_name , users.last_name from properties join user_property_history on properties.property_id = user_property_history.property_id join users on user_property_history.user_id = users.user_id where properties.property_address_id in ( select properties.property_address_id from properties join user_property_history on properties.property_id = user_property_history.property_id )",
          "select users.first_name , users.last_name from properties join user_property_history on properties.property_id = user_property_history.property_id join users on user_property_history.user_id = users.user_id where properties.property_address_id in ( select properties.property_address_id from user_property_history join properties on user_property_history.property_id = properties.property_id )",
          "select users.first_name , users.last_name from properties join user_property_history on properties.property_id = user_property_history.property_id join users on user_property_history.user_id = users.user_id where properties.property_address_id in ( select properties.property_address_id from properties )"
        ]
      ]
    },
    {
      "id": 1466,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
      "infer_predictions": [
        [
          "select search_string from user_searches where user_id not in ( select owner_user_id from properties )",
          "select search_string from user_searches where user_id not in ( select user_id from properties )",
          "select search_seq from user_searches where user_id not in ( select owner_user_id from properties )"
        ]
      ]
    },
    {
      "id": 1467,
      "db_id": "real_estate_rentals",
      "gold": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
      "infer_predictions": [
        [
          "select search_string from user_searches where user_id not in ( select owner_user_id from properties )",
          "select search_string from user_searches where user_id not in ( select user_id from properties )",
          "select search_string from user_searches except select user_searches.search_string from user_searches join properties on user_searches.user_id = properties.owner_user_id"
        ]
      ]
    },
    {
      "id": 1468,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
      "infer_predictions": [
        [
          "select users.last_name , users.user_id from users join user_property_history on users.user_id = user_property_history.user_id group by users.user_id having count ( * ) >= 2 intersect select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2"
        ]
      ]
    },
    {
      "id": 1469,
      "db_id": "real_estate_rentals",
      "gold": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
      "infer_predictions": [
        [
          "select users.last_name , users.user_id from users join user_searches on users.user_id = user_searches.user_id group by users.user_id having count ( * ) <= 2 intersect select users.last_name , users.user_id from users join properties on users.user_id = properties.owner_user_id group by users.user_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1470,
      "db_id": "bike_racing",
      "gold": "SELECT count(*) FROM bike WHERE weight  >  780",
      "infer_predictions": [
        [
          "select count ( * ) from bike where weight > 780",
          "select count ( * ) from bike where weight > 700",
          "select count ( * ) from bike where weight > 781",
          "select count ( * ) from bike where weight > 880",
          "select count ( * ) from bike where weight > 779",
          "select count ( * ) from bike where weight > 7800"
        ]
      ]
    },
    {
      "id": 1471,
      "db_id": "bike_racing",
      "gold": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
      "infer_predictions": [
        [
          "select product_name , weight from bike order by price asc",
          "Select product_name , weight from bike order by price asc",
          "select product_name , weight from bike order by price asc",
          "select product_name , weight from bike order by price asc"
        ]
      ]
    },
    {
      "id": 1472,
      "db_id": "bike_racing",
      "gold": "SELECT heat ,  name ,  nation FROM cyclist",
      "infer_predictions": [
        [
          "select heat , name , nation from cyclist",
          "select heat , name , nation from cyclist",
          "select heat ,name , nation from cyclist",
          "select heat , name , nation from cyclist"
        ]
      ]
    },
    {
      "id": 1473,
      "db_id": "bike_racing",
      "gold": "SELECT max(weight) ,  min(weight) FROM bike",
      "infer_predictions": [
        [
          "select max ( weight ) , min ( weight ) from bike",
          "select max ( weight ) , min ( weight ) from bike",
          "select max ( weight ) , min ( weight ) from bike",
          "select max ( weight ) , min( weight ) from bike"
        ]
      ]
    },
    {
      "id": 1474,
      "db_id": "bike_racing",
      "gold": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
      "infer_predictions": [
        [
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select material , avg ( price ) from bike where material = 'Carbon CC' group by material",
          "select material , avg ( price ) from bike where material = 'Carbon CC'",
          "select price , avg ( material ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC'",
          "select Avg ( price ) from bike where material = 'Carbon CC'",
          "select avg ( price ) from bike where material = 'Carbon CC '",
          "select avg ( price ) from bike where material = 'Carbon CC'"
        ]
      ]
    },
    {
      "id": 1475,
      "db_id": "bike_racing",
      "gold": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
      "infer_predictions": [
        [
          "select name , result from cyclist where nation != 'Russia'",
          "select name , result from cyclist where nation != 'Russia '",
          "select name , result from cyclist where nation != 'Russia'",
          "select name , result from cyclist where nation != 'Russland'",
          "select name , result from cyclist where nation != 'Russia' != 'Russland'",
          "select name , result from cyclist where nation != 'Russia' != 'Russia'"
        ]
      ]
    },
    {
      "id": 1476,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
      "infer_predictions": [
        [
          "select distinct bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year > 2015",
          "select distinct bike.id , bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id where cyclists_own_bikes.purchase_year > 2015",
          "select distinct bike_id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id where cyclists_own_bikes.purchase_year > 2015"
        ]
      ]
    },
    {
      "id": 1477,
      "db_id": "bike_racing",
      "gold": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
      "infer_predictions": [
        [
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id group by bike.id having count ( * ) >= 4",
          "select bike.id , bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id group by cyclists_own_bikes.bike_id having count ( * ) >= 4",
          "select bike.id , bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id group by cyclists_own_bikes.bike_id having count ( * ) >= 4"
        ]
      ]
    },
    {
      "id": 1478,
      "db_id": "bike_racing",
      "gold": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select cyclist.id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by count ( * ) desc limit 1",
          "select cyclist.id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclists_own_bikes.cyclist_id order by count ( * ) desc limit 1",
          "select cyclists_own_bikes.cyclist_id , cyclist.name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclists_own_bikes.cyclist_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1479,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
      "infer_predictions": [
        [
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'Great Britain'",
          "select distinct bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'Great Britain'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'United Kingdom'",
          "select distinct bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'United Kingdom'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.nation = 'Russia' or cyclist.nation = 'UK'"
        ]
      ]
    },
    {
      "id": 1480,
      "db_id": "bike_racing",
      "gold": "SELECT count(DISTINCT heat) FROM cyclist",
      "infer_predictions": [
        [
          "select count ( distinct heat ) from cyclist",
          "select count ( distinct heat ) from cyclist",
          "select count ( distinct heat ) from cyclist",
          "select count ( distinct heat ) from cyclist"
        ]
      ]
    },
    {
      "id": 1481,
      "db_id": "bike_racing",
      "gold": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
      "infer_predictions": [
        [
          "select count ( * ) from cyclist where id not in ( select cyclist_id from cyclists_own_bikes where purchase_year > 2015 )",
          "select count ( * ) from cyclists_own_bikes where cyclist_id not in ( select cyclist_id from cyclists_own_bikes where purchase_year > 2015 )"
        ]
      ]
    },
    {
      "id": 1482,
      "db_id": "bike_racing",
      "gold": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
      "infer_predictions": [
        [
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id join bike on cyclists_own_bikes.bike_id = bike.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:21.558'",
          "select distinct bike.product_name from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.result > '4:211.558'"
        ]
      ]
    },
    {
      "id": 1483,
      "db_id": "bike_racing",
      "gold": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
      "infer_predictions": [
        [
          "select bike.product_name , bike.price from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Bradley Wiggins' intersect select bike.product_name , bike.price from cyclists_own_bikes join bike on cyclists_own_bikes.bike_id = bike.id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Antonio Tauler'",
          "select bike.product_name , bike.price from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Bradley Wiggins' intersect select bike.product_name , bike.price from bike join cyclists_own_bikes on bike.id = cyclists_own_bikes.bike_id join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id where cyclist.name = 'Antonio Tauler'"
        ]
      ]
    },
    {
      "id": 1484,
      "db_id": "bike_racing",
      "gold": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
      "infer_predictions": [
        [
          "select name , nation , result from cyclist where id not in ( select cyclist_id from cyclists_own_bikes )",
          "select name , nation , result from cyclist where id not in ( select cyclist_id from cyclists_own_bikes )",
          "select name , nation , result from cyclist where Id not in ( select cyclist_id from cyclists_own_bikes )",
          "select name , nation , result from cyclist where id not in ( select cyclist_id from cyclists_own_bikes )"
        ]
      ]
    },
    {
      "id": 1485,
      "db_id": "bike_racing",
      "gold": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
      "infer_predictions": [
        [
          "select product_name from bike where material like '%fiber%'",
          "select distinct product_name from bike where material like '%fiber%'",
          "select product_name from bike where material like '%fibre%'",
          "select product_name from bike where material like '%fiber%' != '%carbon%'",
          "select product_name from bike where material like '%fiber%' != '%cellulose%'"
        ]
      ]
    },
    {
      "id": 1486,
      "db_id": "bike_racing",
      "gold": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
      "infer_predictions": [
        [
          "select cyclist_id , count ( * ) from cyclists_own_bikes group by cyclist_id order by cyclist_id asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclist.id asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclist_id asc",
          "select cyclists_own_bikes.cyclist_id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclist.id asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by count ( * ) asc",
          "select cyclist.id , count ( * ) from cyclists_own_bikes join cyclist on cyclists_own_bikes.cyclist_id = cyclist.id group by cyclist.id order by cyclists_own_bikes.cyclist_id asc",
          "select cyclist_id , count ( * ) from cyclists_own_bikes group by cyclist_id order by count ( * ) asc"
        ]
      ]
    },
    {
      "id": 1487,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select flavor , price from goods order by price desc limit 1",
          "select price , flavor from goods order by price desc limit 1",
          "select flavor from goods order by price desc limit 1"
        ]
      ]
    },
    {
      "id": 1488,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
      "infer_predictions": [
        [
          "select id , flavor from goods order by price desc limit 1",
          "select id , flavor from goods order by price desc limit 1",
          "select id , flavor from goods order by price desc limit 1 != 10"
        ]
      ]
    },
    {
      "id": 1489,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select flavor , price from goods order by price asc limit 1",
          "select price , flavor from goods order by price asc limit 1",
          "select flavor from goods order by price asc limit 1",
          "select flavor , price from goods order by price asc limit 1 != 10"
        ]
      ]
    },
    {
      "id": 1490,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
      "infer_predictions": [
        [
          "select id , flavor from goods order by price asc limit 1",
          "select id , flavor from goods order by price asc limit 1",
          "select id , flavor from goods order by price asc limit 1",
          "select id , flavor from goods order by price asc limit 1"
        ]
      ]
    },
    {
      "id": 1491,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'apple'",
          "select id from goods where flavor like '%apple%'",
          "select id from goods where flavor = 'Apple'",
          "select id from goods where flavor like '%Apple%'",
          "select id from goods where flavor = 'APPLE'",
          "select id from goods where flavor = 'apples'",
          "select id from goods where flavor = 'apricot'",
          "select id from goods where flavor = 'apple' != 'null'"
        ]
      ]
    },
    {
      "id": 1492,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'apple'",
          "select id from goods where flavor = 'Apple'",
          "select id from goods where flavor like '%apple%'",
          "select id from goods where flavor = 'APPLE'",
          "select id from goods where flavor = 'apples'",
          "select id from goods where flavor like '%Apple%'",
          "select id from goods where flavor = 'apple' != 'null'",
          "select id from goods where flavor = 'apply'"
        ]
      ]
    },
    {
      "id": 1493,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  <  3",
      "infer_predictions": [
        [
          "select id from goods where price < 3",
          "select id from goods where price <= 3"
        ]
      ]
    },
    {
      "id": 1494,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  <  3",
      "infer_predictions": [
        [
          "select id from goods where price < 3",
          "select id from goods where price <= 3"
        ]
      ]
    },
    {
      "id": 1495,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select distinct receipts.customerid from receipts join goods on receipts.customerid = goods.id where goods.flavor = 'lemon'"
        ]
      ]
    },
    {
      "id": 1496,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select distinct receipts.customerid from receipts join goods on receipts.customerid = goods.id where goods.flavor = 'lemon'"
        ]
      ]
    },
    {
      "id": 1497,
      "db_id": "bakery_1",
      "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
      "infer_predictions": [
        [
          "select goods.food , count ( * ) from receipts join goods on receipts.customerid = goods.id group by goods.food",
          "select goods.food , count ( * ) from goods join receipts on goods.id = receipts.customerid group by goods.food"
        ]
      ]
    },
    {
      "id": 1498,
      "db_id": "bakery_1",
      "gold": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
      "infer_predictions": [
        [
          "select goods.food , count ( * ) from receipts join goods on receipts.customerid = goods.id group by goods.food",
          "select goods.food , count ( * ) from goods join receipts on goods.id = receipts.customerid group by goods.food"
        ]
      ]
    },
    {
      "id": 1499,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) >= 15",
          "select customers.id from customers join receipts on customers.id = receipts.customerid and customers.firstname = customers.firstname group by customers.id having count ( * ) >= 15",
          "select customers.id from customers join receipts on customers.id = receipts.customerid and customers.lastname = customers.firstname and customers.lastname",
          "select customers.id from customers join receipts on customers.id = receipts.customerid and customers.lastname = customers.firstname and customers.lastname group by customers.id having count ( * ) >= 15"
        ]
      ]
    },
    {
      "id": 1500,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) >= 15",
          "select customerid from receipts group by customerid having count ( * ) >= 15",
          "select customerid from receipts group by customerid having count ( * ) >= 15"
        ]
      ]
    },
    {
      "id": 1501,
      "db_id": "bakery_1",
      "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
      "infer_predictions": [
        [
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by receipts.customerid having count ( * ) > 10",
          "select customers.lastname from customers join receipts on receipts.customerid = customers.id group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid where receipts.receiptnumber > 10 group by customers.id having count ( * ) > 10",
          "select customers.lastname from receipts join customers on receipts.customerid = customers.id group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customerid having count ( * ) > 10"
        ]
      ]
    },
    {
      "id": 1502,
      "db_id": "bakery_1",
      "gold": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
      "infer_predictions": [
        [
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by receipts.customerid having count ( * ) > 10",
          "select customers.lastname from customers join receipts on receipts.customerid = customers.id group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on receipts.customerid = customers.id group by receipts.customerid having count ( * ) > 10",
          "select customers.lastname from receipts join customers on receipts.customerid = customers.id group by customers.id having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customerid having count ( * ) > 10",
          "select customers.lastname from customers join receipts on customers.id = receipts.customerid group by customers.id having count ( * ) > 10"
        ]
      ]
    },
    {
      "id": 1503,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select count ( distinct flavor ) from goods",
          "select count ( distinct food ) from goods"
        ]
      ]
    },
    {
      "id": 1504,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
      "infer_predictions": [
        [
          "select count ( distinct food ) from goods",
          "select count ( distinct goods.food ) from goods join items on goods.id = items.item",
          "select count ( distinct goods.food ) from goods join items on goods.id = items.item group by goods.id"
        ]
      ]
    },
    {
      "id": 1505,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
      "infer_predictions": [
        [
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Croissant'",
          "select distinct flavor from goods where food = 'Crispy'",
          "select distinct flavor from goods where food = 'Croissants'",
          "select distinct flavor from goods where food = 'Croissand'",
          "select distinct flavor from goods where food = 'Crisp'",
          "select distinct flavor from goods where food = 'croissant'",
          "select distinct flavor from goods where food = 'Croisette'"
        ]
      ]
    },
    {
      "id": 1506,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
      "infer_predictions": [
        [
          "select distinct flavor from goods where food = 'croissant'",
          "select distinct flavor from goods",
          "select distinct flavor from goods where food = 'cr\u00eapes'",
          "select distinct flavor from goods where food = 'cro\u00fbton'",
          "select distinct flavor from goods where food = 'cr\u00eape'",
          "select distinct flavor from goods where food = 'croissants'",
          "select distinct flavor from goods where food = 'cr\u00e8me brulee'",
          "select distinct flavor from goods where food = 'Croissant'"
        ]
      ]
    },
    {
      "id": 1507,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
      "infer_predictions": [
        [
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.id = 15",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.lastname = 'Smith' and items.ordinal = 15",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Jane'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Christine'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Lori'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Jill'"
        ]
      ]
    },
    {
      "id": 1508,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
      "infer_predictions": [
        [
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = '15'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 15",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Christine'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'M' and customers.lastname = 'L'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'John' and customers.lastname = 'Jane'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'James' and customers.lastname = 'Susan'",
          "select distinct items.item from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.firstname = 'Joe' and customers.lastname = 'Lori'"
        ]
      ]
    },
    {
      "id": 1509,
      "db_id": "bakery_1",
      "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) and min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food",
          "select food , avg ( price ) , max ( price ) , min ( price ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1510,
      "db_id": "bakery_1",
      "gold": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) , min ( price ) , max ( price ) from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) from goods",
          "select avg ( price ) , min ( price ) , max ( price ) , food from goods",
          "select food , avg ( price ) , min ( price ) , max ( price ) from goods group by food",
          "select avg ( price ) , min ( price ) , max ( price ) , flavor from goods group by food"
        ]
      ]
    },
    {
      "id": 1511,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cake' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cookie'",
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cupcake' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cookie'"
        ]
      ]
    },
    {
      "id": 1512,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'cakes' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'cookies'",
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'cake' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'cookies'",
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cake' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cookies'",
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cakes' intersect select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber where items.item = 'Cookies'"
        ]
      ]
    },
    {
      "id": 1513,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from customers join receipts on customers.id = receipts.customerid join items on receipts.receiptnumber = items.receipt where customers.lastname = 'LOGAN' and items.item = 'Croissant'",
          "select receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber join customers on receipts.customerid = customers.id where customers.lastname = 'LOGAN' and items.item = 'Croissant'",
          "select receipts.receiptnumber from customers join receipts on customers.id = receipts.customerid join items on receipts.receiptnumber = items.receipt where customers.lastname = 'LOGAN' and items.item = 'Croissant'"
        ]
      ]
    },
    {
      "id": 1514,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
      "infer_predictions": [
        [
          "select receipts.receiptnumber from customers join receipts on customers.id = receipts.customerid join items on items.receipt = receipts.receiptnumber where customers.lastname = 'Logan' and items.item = 'croissants'",
          "select receipts.receiptnumber from customers join receipts on customers.id = receipts.customerid join items on receipts.receiptnumber = items.receipt where customers.lastname = 'Logan' and items.item = 'croissants'"
        ]
      ]
    },
    {
      "id": 1515,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1516,
      "db_id": "bakery_1",
      "gold": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1517,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) in ( select item from items group by item order by count ( * ) asc limit 1 )",
          "select item from items group by item order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1518,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
      "infer_predictions": [
        [
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) in ( select item from items group by item order by count ( * ) asc limit 1 )",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select item from items group by item order by count ( * ) asc limit 1",
          "select Item from items group by Item order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1519,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , count ( * ) from goods group by food",
          "select count ( * ) , food from goods group by food",
          "select food , count ( * ) from goods group by food",
          "select distinct food , count ( * ) from goods group by food",
          "select food , count ( * ) from goods group by food",
          "select food , count ( * ) from goods group by food",
          "select food , count ( * ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1520,
      "db_id": "bakery_1",
      "gold": "SELECT count(*) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select count ( * ) , food from goods group by food",
          "select food , count ( * ) from goods group by food",
          "select count ( * ) , food from goods group by food",
          "select count ( * ) , flavor from goods group by food"
        ]
      ]
    },
    {
      "id": 1521,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) from goods group by food",
          "select avg ( price ) , food from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1522,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) ,  food FROM goods GROUP BY food",
      "infer_predictions": [
        [
          "select food , avg ( price ) from goods group by food",
          "select avg ( price ) , food from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food",
          "select food , avg ( price ) from goods group by food"
        ]
      ]
    },
    {
      "id": 1523,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apricot' and price < 5",
          "select id from goods where flavor = 'Apricot' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Apple' and price < 5",
          "select id from goods where flavor = 'Apple' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Apricot' and price <= 5",
          "select id from goods where flavor = 'Apricot' intersect select id from goods where price <= 5",
          "select id from goods where flavor = 'Papricot' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Pearl' intersect select id from goods where price < 5"
        ]
      ]
    },
    {
      "id": 1524,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'Apricot' and price < 5",
          "select id from goods where flavor = 'Apricot' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Apple' and price < 5",
          "select id from goods where flavor = 'Apple' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Apricot' and price <= 5",
          "select id from goods where flavor = 'Papricot' and price < 5",
          "select id from goods where flavor = 'Papricot' intersect select id from goods where price < 5",
          "select id from goods where flavor = 'Aprilia' and price < 5"
        ]
      ]
    },
    {
      "id": 1525,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
      "infer_predictions": [
        [
          "select flavor from goods where price > 10",
          "select distinct flavor from goods where price > 10",
          "select flavor from goods where price > 10 != 10"
        ]
      ]
    },
    {
      "id": 1526,
      "db_id": "bakery_1",
      "gold": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
      "infer_predictions": [
        [
          "select flavor from goods where price > 10",
          "select distinct flavor from goods where price > 10",
          "select flavor from goods where price > 10 != 10",
          "select flavor from goods where price > 10"
        ]
      ]
    },
    {
      "id": 1527,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price <= ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1528,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price <= ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )",
          "select distinct id , price from goods where price < ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1529,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods except select distinct id from goods where flavor = 'Tart'",
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods where food = 'Tart' )",
          "select distinct id from goods where price <= ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where flavor = 'Tart' )"
        ]
      ]
    },
    {
      "id": 1530,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods where id = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods where food = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods )",
          "select distinct id from goods where price < ( select max ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select min ( price ) from goods where flavor = 'Tart' )",
          "select distinct id from goods where price < ( select max ( price ) from goods where id )"
        ]
      ]
    },
    {
      "id": 1531,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
      "infer_predictions": [
        [
          "select distinct receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 13",
          "select distinct receipts.receiptnumber from receipts join items on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 13"
        ]
      ]
    },
    {
      "id": 1532,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
      "infer_predictions": [
        [
          "select distinct receipts.receiptnumber from items join receipts on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 13",
          "select distinct receipts.receiptnumber from receipts join items on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 13"
        ]
      ]
    },
    {
      "id": 1533,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
      "infer_predictions": [
        [
          "select receipts.date from items join receipts on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 15"
        ]
      ]
    },
    {
      "id": 1534,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1535,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
      "infer_predictions": [
        [
          "select id from goods where id like '%APP%'",
          "select distinct id from goods where id like '%APP%'"
        ]
      ]
    },
    {
      "id": 1536,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
      "infer_predictions": [
        [
          "select id from goods where id like '%APP%'",
          "select id from goods where id like '%APP%' != '%APP%'",
          "select distinct id from goods where id like '%APP%'"
        ]
      ]
    },
    {
      "id": 1537,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
      "infer_predictions": [
        [
          "select id , price from goods where id like '%70%'",
          "select price , id from goods where id like '%70%'",
          "select id , price from goods where id like '%70'",
          "select id , price from goods where id like \"%70%\"",
          "select Id , price from goods where id like '%70%'"
        ]
      ]
    },
    {
      "id": 1538,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
      "infer_predictions": [
        [
          "select id , price from goods where id like '%70%'",
          "select id , price from goods where id like \"%70%\"",
          "select id , price from goods where Id like '%70%'",
          "select id , price from goods where id like '%70'",
          "select id , price from goods where id like '%70%'"
        ]
      ]
    },
    {
      "id": 1539,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
      "infer_predictions": [
        [
          "select lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc",
          "select firstname , lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc"
        ]
      ]
    },
    {
      "id": 1540,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
      "infer_predictions": [
        [
          "select lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc",
          "select firstname , lastname from customers order by lastname asc",
          "select lastname from customers order by lastname asc"
        ]
      ]
    },
    {
      "id": 1541,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
      "infer_predictions": [
        [
          "select id from goods order by id asc",
          "select id , flavor from goods order by id asc",
          "select id , flavor from goods order by id asc",
          "select id , flavor , price from goods order by id asc"
        ]
      ]
    },
    {
      "id": 1542,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT id FROM goods ORDER BY id",
      "infer_predictions": [
        [
          "select distinct id from goods order by id asc",
          "select distinct id from goods order by id asc limit 1",
          "select distinct id from goods order by id asc",
          "select distinct id from goods order by id asc"
        ]
      ]
    },
    {
      "id": 1543,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1544,
      "db_id": "bakery_1",
      "gold": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1545,
      "db_id": "bakery_1",
      "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
      "infer_predictions": [
        [
          "select date from receipts order by date desc limit 1",
          "select date from receipts where date = ( select max ( date ) from receipts )",
          "select date from receipts where receiptnumber = ( select max ( receiptnumber ) from receipts )",
          "select date , receiptnumber from receipts order by date desc limit 1",
          "select date from receipts where receiptnumber = ( select max ( date ) from receipts )",
          "select date from receipts order by date desc limit 1 != '2016-04-19 15:06:20'",
          "select date and receiptnumber from receipts order by date desc limit 1",
          "select date from receipts order by date desc limit 1 != '2016-03-19 15:06:20'"
        ]
      ]
    },
    {
      "id": 1546,
      "db_id": "bakery_1",
      "gold": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
      "infer_predictions": [
        [
          "select receiptnumber , date from receipts order by date desc limit 1",
          "select receiptnumber , date , max ( date ) from receipts group by receiptnumber order by max ( date ) desc limit 1",
          "select receiptnumber , max ( date ) from receipts group by receiptnumber order by max ( date ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1547,
      "db_id": "bakery_1",
      "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1548,
      "db_id": "bakery_1",
      "gold": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
      "infer_predictions": [
        [
          "select receiptnumber from items join receipts on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 10 union select receiptnumber from receipts where date = ( select min ( date ) from receipts )",
          "select receiptnumber from items join receipts on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.price > 10 union select receiptnumber from receipts where date = ( select max ( date ) from receipts )"
        ]
      ]
    },
    {
      "id": 1549,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
      "infer_predictions": [
        [
          "select id from goods where price between 3 and 7",
          "select id from goods where price between 3 and 7 intersect select id from goods where food = 'Cookie'",
          "select id from goods where price between 3 and 7 intersect select id from goods where food = 'Cookie' and flavor = 'Cake'",
          "select id from goods where price between 3 and 7 intersect select id from goods where flavor = 'Cookie'",
          "select id from goods where price between 3 and 7 intersect select id from goods where food = 'Cookie' or food = 'Cake'",
          "select id from goods where price between 3 and 7 intersect select id from goods where food = 'Cookie' and food = 'Cake'",
          "select id from goods where price >= 3 and price <= 7 intersect select id from goods where food = 'Cookie'",
          "select id from goods where price >= 3 and price <= 7 intersect select id from goods where food = 'Cookie' and flavor = 'Cake'"
        ]
      ]
    },
    {
      "id": 1550,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
      "infer_predictions": [
        [
          "select id from goods where price between 3 and 7",
          "select id from goods where price between 3 and 7 in ( select price from goods where price between 3 and 7 ) or id in ( select id from goods where price between 3 and 7 )",
          "select id from goods where price between 3 and 7 and food in ( select food from goods where price between 3 and 7 )",
          "select id from goods where price between 3 and 7 and food in ( select food from goods where price between 3 and 7 ) or id in ( select id from goods where price between 3 and 7 )"
        ]
      ]
    },
    {
      "id": 1551,
      "db_id": "bakery_1",
      "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid order by receipts.date asc limit 1",
          "select customers.firstname , customers.lastname from customers join receipts on receipts.customerid = customers.id order by receipts.date asc limit 1",
          "select customers.firstname , customers.lastname from receipts join customers on receipts.customerid = customers.id order by receipts.date asc limit 1"
        ]
      ]
    },
    {
      "id": 1552,
      "db_id": "bakery_1",
      "gold": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid order by receipts.date asc limit 1",
          "select customers.firstname , customers.lastname from customers join receipts on receipts.customerid = customers.id order by receipts.date asc limit 1",
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid order by date asc limit 1"
        ]
      ]
    },
    {
      "id": 1553,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
      "infer_predictions": [
        [
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'blueberry' or flavor = 'blackberry'",
          "select flavor , avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'strawberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'bingeberry' or flavor = 'blueberry'"
        ]
      ]
    },
    {
      "id": 1554,
      "db_id": "bakery_1",
      "gold": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
      "infer_predictions": [
        [
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'blueberry' or flavor = 'blackberry'",
          "select avg ( price ) from goods where flavor = 'Blackberry' or flavor = 'Blueberry'",
          "select flavor , avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry' group by flavor",
          "select avg ( price ) from goods where flavor = 'strawberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'wild blackberry' or flavor = 'blueberry'",
          "select avg ( price ) from goods where flavor = 'bingeberry' or flavor = 'blueberry'"
        ]
      ]
    },
    {
      "id": 1555,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
      "infer_predictions": [
        [
          "select min ( price ) from goods where flavor = 'cheese'",
          "select min ( price ) from goods where flavor = 'CHEESE'",
          "select min ( price ) from goods where flavor = 'cheddar'",
          "select price from goods where flavor = 'cheese' order by price asc limit 1",
          "select min ( price ) from goods where flavor = 'cheesy'",
          "select min ( price ) from goods where flavor = 'cheder'",
          "select price from goods where flavor = 'cheese'",
          "select min ( price ) from goods where flavor = 'chese'"
        ]
      ]
    },
    {
      "id": 1556,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
      "infer_predictions": [
        [
          "select min ( price ) from goods where flavor = 'cheese'",
          "select price from goods where flavor = 'cheese' order by price asc limit 1",
          "select min ( price ) from goods where flavor = 'CHEESE'",
          "select price from goods where flavor = 'CHEESE' order by price asc limit 1",
          "select min ( price ) from goods where flavor = 'cheddar'",
          "select min ( price ) from goods where flavor = 'cheesy'",
          "select min ( price ) from goods where flavor = 'Cheese'",
          "select min ( price ) from goods where flavor = 'cheder'"
        ]
      ]
    },
    {
      "id": 1557,
      "db_id": "bakery_1",
      "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
      "infer_predictions": [
        [
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) ,avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc"
        ]
      ]
    },
    {
      "id": 1558,
      "db_id": "bakery_1",
      "gold": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
      "infer_predictions": [
        [
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , avg ( price ) , min ( price ) , flavor from goods group by flavor order by flavor asc",
          "select max ( price ) , min ( price ) , avg ( price ) , flavor from goods group by flavor order by flavor asc"
        ]
      ]
    },
    {
      "id": 1559,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
      "infer_predictions": [
        [
          "select min ( price ) , max ( price ) , food from goods group by food order by food asc",
          "select min ( price ) , max ( price ) , food from goods group by food order by flavor asc",
          "select min ( price ) , max ( price ) , food from goods group by food order by food Asc",
          "select min ( price ) , max ( price ) , flavor from goods group by food order by flavor asc"
        ]
      ]
    },
    {
      "id": 1560,
      "db_id": "bakery_1",
      "gold": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
      "infer_predictions": [
        [
          "select min ( price ) , max ( price ) , food from goods group by food order by food asc",
          "select min ( price ) , max ( price ) , food from goods group by food order by flavor asc",
          "select min ( price ) , max ( price ) , food from goods order by food asc",
          "select min ( price ) , max ( price ) , food from goods where food = 'meat' group by food order by food asc",
          "select min ( price ) , max ( price ) , food from goods where food order by food asc",
          "select min ( price ) , max ( price ) , food from goods where flavor = 'mild' order by food asc",
          "select min ( price ) , max ( price ) , food from goods where flavor = 'mild' group by food order by flavor asc",
          "select min ( price ) , max ( price ) , food from goods where food = 'meat' group by food order by flavor asc"
        ]
      ]
    },
    {
      "id": 1561,
      "db_id": "bakery_1",
      "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date , count ( * ) from receipts group by date order by count ( * ) desc limit 3",
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date from receipts group by date order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1562,
      "db_id": "bakery_1",
      "gold": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date , count ( * ) from receipts group by date order by count ( * ) desc limit 3",
          "select date from receipts group by date order by count ( * ) desc limit 3",
          "select date from receipts group by date order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1563,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.id order by count ( * ) desc limit 1",
          "select customers.firstname , customers.lastname , count ( * ) from customers join receipts on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1564,
      "db_id": "bakery_1",
      "gold": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select customers.id , count ( * ) from customers join receipts on customers.id = receipts.customerid group by customers.id order by count ( * ) desc limit 1",
          "select customers.id , count ( * ) from customers join receipts on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1",
          "select customers.id , count ( * ) from receipts join customers on receipts.customerid = customers.id group by customers.id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1565,
      "db_id": "bakery_1",
      "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
      "infer_predictions": [
        [
          "select date , count ( distinct customerid ) from receipts group by date",
          "select count ( distinct customerid ) , date from receipts group by date",
          "select date , count ( distinct customers.id ) from receipts join customers on receipts.customerid = customers.id group by date",
          "select count ( distinct customers.id ) , receipts.date from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select count ( distinct customers.id ) , receipts.date from customers join receipts on customers.id = receipts.customerid group by receipts.date"
        ]
      ]
    },
    {
      "id": 1566,
      "db_id": "bakery_1",
      "gold": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
      "infer_predictions": [
        [
          "select date , count ( * ) from receipts group by date",
          "select receipts.date , count ( * ) from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select receipts.date , count ( * ) from customers join receipts on customers.id = receipts.customerid group by receipts.date",
          "select count ( * ) , receipts.date from receipts join customers on receipts.customerid = customers.id group by receipts.date",
          "select count ( * ) , date from receipts group by date",
          "select count ( * ) , receipts.date from customers join receipts on customers.id = receipts.customerid group by receipts.date",
          "select date , count ( * ) from receipts group by date"
        ]
      ]
    },
    {
      "id": 1567,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1568,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
      "infer_predictions": [
        [
          "select customers.firstname , customers.lastname from customers join receipts on customers.id = receipts.customerid join items on items.receipt = receipts.receiptnumber join goods on items.item = goods.id where goods.flavor = 'Apple'"
        ]
      ]
    },
    {
      "id": 1569,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
      "infer_predictions": [
        [
          "select id from goods where price < ( select max ( price ) from goods where id = 'Croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where id = 'Croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where id != 'Croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where id != 'Croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where id = 1 )",
          "select id from goods where price < ( select max ( price ) from goods where id )",
          "select id from goods where price < ( select max ( price ) from goods where id = 'Crispy' )"
        ]
      ]
    },
    {
      "id": 1570,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
      "infer_predictions": [
        [
          "select id from goods where price < ( select max ( price ) from goods )",
          "select id from goods where price < ( select max ( price ) from goods where food = 'croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where food )",
          "select id from goods where price < ( select max ( price ) from goods where food != 'croissant' )",
          "select id from goods where price < ( select max ( price ) from goods where food = 'croissants' )",
          "select id from goods where price < ( select max ( price ) from goods where food = 'cr\u00eapes' )"
        ]
      ]
    },
    {
      "id": 1571,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 'Cake' )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 'Cupcake' )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 'CAKE' )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 0 )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 'Tart' )",
          "select id from goods where price >= ( select avg ( price ) from goods where id = 'Cakes' )"
        ]
      ]
    },
    {
      "id": 1572,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
      "infer_predictions": [
        [
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select distinct id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1573,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( Select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1574,
      "db_id": "bakery_1",
      "gold": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
      "infer_predictions": [
        [
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price >= ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )",
          "select id from goods where price > ( select avg ( price ) from goods )"
        ]
      ]
    },
    {
      "id": 1575,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
      "infer_predictions": [
        [
          "select id , flavor , food from goods order by price asc",
          "select id , flavor and food from goods order by price asc"
        ]
      ]
    },
    {
      "id": 1576,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
      "infer_predictions": [
        [
          "select id , flavor , food from goods order by price asc",
          "select id , flavor , food from goods order by price asc",
          "select id , flavor , food from goods order by price asc"
        ]
      ]
    },
    {
      "id": 1577,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
      "infer_predictions": [
        [
          "select id , flavor from goods order by flavor asc",
          "select id , flavor from goods where flavor = 'Cake' order by flavor asc",
          "select id , flavor from goods where flavor = 'Cakes' order by flavor asc",
          "select id , flavor from goods where flavor like '%cake%' order by flavor asc",
          "select id , flavor from goods where flavor = 'CAKE' order by flavor asc",
          "select id , flavor from goods where flavor = 'Cupcake' order by flavor asc",
          "select id , flavor from goods where flavor like '%Cake%' order by flavor asc",
          "select id , flavor from goods where flavor like '% Cake%' order by flavor asc"
        ]
      ]
    },
    {
      "id": 1578,
      "db_id": "bakery_1",
      "gold": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
      "infer_predictions": [
        [
          "select id , flavor from goods order by flavor asc",
          "select id , flavor from goods order by flavor asc"
        ]
      ]
    },
    {
      "id": 1579,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
      "infer_predictions": [
        [
          "select id from goods where flavor = 'chocolate' except select items.item from items join goods on items.item = goods.id group by items.item having count ( * ) > 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'chocolate' except select items.item from items join goods on items.item = goods.id group by items.item having count ( * ) > 10",
          "select id from goods where flavor = 'chocolate' except select items.item from items join goods on items.item = goods.id group by goods.id having count ( * ) > 10"
        ]
      ]
    },
    {
      "id": 1580,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
      "infer_predictions": [
        [
          "select goods.id from items join goods on items.item = goods.id where goods.flavor = 'chocolate' group by goods.id having count ( * ) <= 10",
          "select goods.id from items join goods on items.item = goods.id where goods.flavor = 'chocolate' group by items.item having count ( * ) <= 10",
          "select items.item from items join goods on items.item = goods.id where goods.flavor = 'chocolate' group by items.item having count ( * ) <= 10",
          "select goods.id from goods join items on goods.id = items.item where goods.flavor = 'chocolate' group by items.item having count ( * ) <= 10"
        ]
      ]
    },
    {
      "id": 1581,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
      "infer_predictions": [
        [
          "select flavor from goods where food = 'Cake' except select flavor from goods where food = 'Tart'",
          "select flavor from goods where food = 'Cupcake' except select flavor from goods where food = 'Tart'",
          "select flavor from goods where food = 'Cake' and flavor not in ( select flavor from goods where food = 'Tart' )",
          "select distinct flavor from goods where food = 'Cake' except select distinct flavor from goods where food = 'Tart'",
          "select flavor from goods except select flavor from goods where food = 'Cake'",
          "select flavor from goods where food = 'CAKE' except select flavor from goods where food = 'TART'"
        ]
      ]
    },
    {
      "id": 1582,
      "db_id": "bakery_1",
      "gold": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
      "infer_predictions": [
        [
          "select flavor from goods except select flavor from goods where food = 'Tart'",
          "select distinct flavor from goods except select flavor from goods where food = 'Tart'",
          "select distinct flavor from goods except select distinct flavor from goods where food = 'Tart'",
          "select flavor from goods except select flavor from goods where food = 'Cake'",
          "select flavor from goods where food = 'Cake' except select flavor from goods where food = 'Tart'",
          "select distinct flavor from goods except select distinct flavor from goods where food = 'Cake'",
          "select distinct flavor from goods except select flavor from goods where food = 'Cake'"
        ]
      ]
    },
    {
      "id": 1583,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select food from goods group by food order by count ( * ) desc limit 3",
          "select food from goods group by flavor order by count ( * ) desc limit 3",
          "select flavor from goods group by flavor order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1584,
      "db_id": "bakery_1",
      "gold": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
      "infer_predictions": [
        [
          "select item from items group by item order by count ( * ) desc limit 3"
        ]
      ]
    },
    {
      "id": 1585,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having sum ( receipts.receiptnumber ) > 150"
        ]
      ]
    },
    {
      "id": 1586,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
      "infer_predictions": [
        [
          "select customers.id from customers join receipts on customers.id = receipts.customerid group by customers.id having sum ( receipts.receiptnumber ) > 150"
        ]
      ]
    },
    {
      "id": 1587,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1588,
      "db_id": "bakery_1",
      "gold": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1589,
      "db_id": "bakery_1",
      "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1590,
      "db_id": "bakery_1",
      "gold": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 1591,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver",
      "infer_predictions": [
        [
          "select count ( * ) from driver"
        ]
      ]
    },
    {
      "id": 1592,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver",
      "infer_predictions": [
        [
          "select count ( * ) from driver"
        ]
      ]
    },
    {
      "id": 1593,
      "db_id": "car_racing",
      "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
      "infer_predictions": [
        [
          "select count ( * ) , make from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points > 150 group by make",
          "select count ( * ) , make from driver where points >150 group by make",
          "select count ( * ) , make from driver where points > 150 group by make",
          "select count ( * ) , make from driver where points > 150 group by make"
        ]
      ]
    },
    {
      "id": 1594,
      "db_id": "car_racing",
      "gold": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver where points > 150 group by make",
          "select count ( * ) , make from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points > 150 group by make",
          "select make , count ( * ) from driver where points >150 group by make",
          "select make , count ( * ) from driver where points > 150 Group by make"
        ]
      ]
    },
    {
      "id": 1595,
      "db_id": "car_racing",
      "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
      "infer_predictions": [
        [
          "select avg ( age ) , make from driver group by make",
          "select make , avg ( age ) from driver group by make",
          "select make , avg ( age ) from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select count ( * ) , make from driver group by make"
        ]
      ]
    },
    {
      "id": 1596,
      "db_id": "car_racing",
      "gold": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
      "infer_predictions": [
        [
          "select avg ( age ) , make from driver group by make",
          "select make , avg ( age ) from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select make , avg ( age ) from driver group by make",
          "select avg ( age ) , make from driver group by make",
          "select make , avg ( age ) from driver group by make"
        ]
      ]
    },
    {
      "id": 1597,
      "db_id": "car_racing",
      "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
      "infer_predictions": [
        [
          "select avg ( laps ) from driver where age < 20",
          "select laps , avg ( driver.driver ) from driver join team_driver on driver.driver_id = team_driver.driver_id join team on team_driver.team_id = team.team_id where driver.age < 20",
          "select laps , avg ( driver.driver ) from driver join team_driver on driver.driver_id = team_driver.driver_id where driver.age < 20",
          "select laps , avg ( driver.driver ) from driver join team_driver on driver.driver_id = team_driver.driver_id join team on team_driver.team_id = team_driver.team_id where driver.age < 20",
          "select laps , avg ( driver.driver ) from driver join team_driver on driver.driver_id = team_driver.driver_id join team on team.team_id = team_driver.team_id where driver.age < 20",
          "select laps , avg ( driver.driver ) from driver join team_driver on driver.driver_id = team_driver.driver_id where age < 20"
        ]
      ]
    },
    {
      "id": 1598,
      "db_id": "car_racing",
      "gold": "SELECT avg(Laps) FROM driver WHERE age  <  20",
      "infer_predictions": [
        [
          "select avg ( laps ) from driver where age < 20",
          "select avg ( laps ) from driver where age <= 20",
          "select laps , avg ( age ) from driver where age < 20",
          "select avg ( laps ) from driver where age < 20"
        ]
      ]
    },
    {
      "id": 1599,
      "db_id": "car_racing",
      "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
      "infer_predictions": [
        [
          "select manager , sponsor from team order by car_owner asc",
          "select manager , sponsor from team group by manager order by car_owner asc",
          "select manager , sponsor from team order by car_owner asc"
        ]
      ]
    },
    {
      "id": 1600,
      "db_id": "car_racing",
      "gold": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
      "infer_predictions": [
        [
          "select manager , sponsor from team order by car_owner asc"
        ]
      ]
    },
    {
      "id": 1601,
      "db_id": "car_racing",
      "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) >1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1602,
      "db_id": "car_racing",
      "gold": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) >1",
          "select make from team group by make having count ( * ) > 1",
          "select make from team group by make having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1603,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
      "infer_predictions": [
        [
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Bobby Arrington'",
          "select make from team where car_owner = 'Buddha Arrington'",
          "select make from team where car_owner = 'Buddhy Arrington'",
          "select make from team where car_owner = 'Buddie Arrington'",
          "select make from team where car_owner = 'Bud Arrington'"
        ]
      ]
    },
    {
      "id": 1604,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
      "infer_predictions": [
        [
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Bobby Arrington'",
          "select make from team where car_owner = 'Buddy Arrington'",
          "select make from team where car_owner = 'Buddha Arrington'",
          "select make from team where car_owner = 'Bud Arrington'",
          "select make from team where car_owner = 'Buddhy Arrington'",
          "select make from team where car_owner = 'Buddi Arrington'",
          "select make from team where car_owner = 'Buddie Arrington'"
        ]
      ]
    },
    {
      "id": 1605,
      "db_id": "car_racing",
      "gold": "SELECT max(Points) ,  min(Points) FROM driver",
      "infer_predictions": [
        [
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min ( points ) , driver from driver",
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min( points ) from driver",
          "select max ( points  ) , min ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1606,
      "db_id": "car_racing",
      "gold": "SELECT max(Points) ,  min(Points) FROM driver",
      "infer_predictions": [
        [
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min ( points ) , driver from driver",
          "select max ( points ) , min ( points ) from driver",
          "select max ( points ) , min ( points ) from driver",
          "select max ( points  ) , min ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1607,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
      "infer_predictions": [
        [
          "select count ( * ) from driver where points < 150",
          "select count ( * ) from driver where points <= 150",
          "select count ( * ) from driver where points <150"
        ]
      ]
    },
    {
      "id": 1608,
      "db_id": "car_racing",
      "gold": "SELECT count(*) FROM driver WHERE Points  <  150",
      "infer_predictions": [
        [
          "select count ( * ) from driver where points < 150",
          "select count ( * ) from driver where points <= 150"
        ]
      ]
    },
    {
      "id": 1609,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select driver from driver order by age asc",
          "Select driver from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1610,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Age ASC",
      "infer_predictions": [
        [
          "select driver from driver order by age asc",
          "Select driver from driver order by age asc",
          "select driver from driver order by age asc"
        ]
      ]
    },
    {
      "id": 1611,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
      "infer_predictions": [
        [
          "select driver from driver order by points desc",
          "Select driver from driver order by points desc",
          "select driver from driver order by points desc"
        ]
      ]
    },
    {
      "id": 1612,
      "db_id": "car_racing",
      "gold": "SELECT Driver FROM driver ORDER BY Points DESC",
      "infer_predictions": [
        [
          "select driver from driver order by points desc",
          "select driver from driver order by points desc",
          "select driver from driver order by points desc",
          "select driver from driver order by points desc"
        ]
      ]
    },
    {
      "id": 1613,
      "db_id": "car_racing",
      "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
      "infer_predictions": [
        [
          "select driver , country from driver",
          "select driver , country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id"
        ]
      ]
    },
    {
      "id": 1614,
      "db_id": "car_racing",
      "gold": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
      "infer_predictions": [
        [
          "select driver , country from driver"
        ]
      ]
    },
    {
      "id": 1615,
      "db_id": "car_racing",
      "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
      "infer_predictions": [
        [
          "select max ( driver.points ) from country join driver on country.country_id = driver.country where country.capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1616,
      "db_id": "car_racing",
      "gold": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
      "infer_predictions": [
        [
          "select max ( driver.points ) from country join driver on country.country_id = driver.country where country.capital = 'Dublin'"
        ]
      ]
    },
    {
      "id": 1617,
      "db_id": "car_racing",
      "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( driver.age ) from driver join country on driver.country = country.country_id where country.official_native_language = 'English'",
          "select avg ( age ) from driver join country on driver.country = country.country_id where country.official_native_language = 'English'"
        ]
      ]
    },
    {
      "id": 1618,
      "db_id": "car_racing",
      "gold": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
      "infer_predictions": [
        [
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( driver.age ) from driver join country on driver.country = country.country_id where country.official_native_language = 'English'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'ENGLISH'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.country where country.official_native_language = 'English'",
          "select avg ( driver.age ) from country join driver on country.country_id = driver.driver where country.official_native_language = 'English'"
        ]
      ]
    },
    {
      "id": 1619,
      "db_id": "car_racing",
      "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
      "infer_predictions": [
        [
          "select country.country from country join driver on country.country_id = driver.country where driver.points > 150",
          "select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.points > 150",
          "select country.country from country join driver on country.country_id = driver.driver where driver.points > 150",
          "select country.country from country join driver on country.country_id = driver.driver_id where driver.points > 150"
        ]
      ]
    },
    {
      "id": 1620,
      "db_id": "car_racing",
      "gold": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
      "infer_predictions": [
        [
          "select distinct country.country from country join driver on country.country_id = driver.country where driver.points > 150",
          "select distinct country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.points > 150",
          "select distinct country.country from country join driver on country.country_id = driver.driver where driver.points > 150"
        ]
      ]
    },
    {
      "id": 1621,
      "db_id": "car_racing",
      "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country.capital from country join driver on country.country_id = driver.country order by driver.points desc limit 1",
          "select country.capital from country join driver on country.country_id = driver.country order by points desc limit 1"
        ]
      ]
    },
    {
      "id": 1622,
      "db_id": "car_racing",
      "gold": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
      "infer_predictions": [
        [
          "select country.capital from country join driver on country.country_id = driver.country order by driver.points desc limit 1",
          "select country.capital from country join driver on country.country_id = driver.country order by points desc limit 1"
        ]
      ]
    },
    {
      "id": 1623,
      "db_id": "car_racing",
      "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver group by make"
        ]
      ]
    },
    {
      "id": 1624,
      "db_id": "car_racing",
      "gold": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
      "infer_predictions": [
        [
          "select make , count ( * ) from driver group by make",
          "select count ( * ) , make from driver group by make",
          "select make , count ( * ) from driver group by make"
        ]
      ]
    },
    {
      "id": 1625,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1626,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1",
          "select make from driver group by make order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1627,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count (* ) >= 3",
          "select make from driver group by make having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1628,
      "db_id": "car_racing",
      "gold": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
      "infer_predictions": [
        [
          "select make from driver group by make having count ( * ) >= 3",
          "select make from driver group by make having count ( * ) >= 2",
          "select make from driver group by make having count (* ) >= 3"
        ]
      ]
    },
    {
      "id": 1629,
      "db_id": "car_racing",
      "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
      "infer_predictions": [
        [
          "select team from team where team_id not in ( select team_id from team_driver )",
          "select team from team where team_id not in ( select team_id from team_driver)",
          "select team from team where team_id not in ( select team from team_driver )",
          "select team from team where team_id not in ( select team_id from team_driver )"
        ]
      ]
    },
    {
      "id": 1630,
      "db_id": "car_racing",
      "gold": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
      "infer_predictions": [
        [
          "select team from team except select team.team from team join team_driver on team.team_id = team_driver.team_id",
          "select team from team where team_id not in ( select team_id from team_driver )"
        ]
      ]
    },
    {
      "id": 1631,
      "db_id": "car_racing",
      "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
      "infer_predictions": [
        [
          "select country.country from country join driver on country.country_id = driver.driver_id where driver.make = 'Dodge' intersect select country.country from country join driver on country.country_id = driver.driver_id where driver.make = 'Chevrolet'",
          "select country.country from country join driver on country.country_id = driver.country where driver.make = 'Dodge' intersect select country.country from country join driver on country.country_id = driver.driver_id where driver.make = 'Chevrolet'",
          "select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Dodge' intersect select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Chevrolet'",
          "select country.country from country join driver on country.country_id = driver.country where driver.make = 'Dodge' intersect select country.country from country join driver on country.country_id = driver.country where driver.make = 'Chevrolet'",
          "select country.country from country join driver on country.country_id = driver.country where driver.make = 'Dodge' intersect select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Chevrolet'",
          "select country.country from country join driver on country.country_id = driver.driver_id where driver.make = 'Dodge' intersect select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Chevrolet'"
        ]
      ]
    },
    {
      "id": 1632,
      "db_id": "car_racing",
      "gold": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
      "infer_predictions": [
        [
          "select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Dodge' intersect select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Chevrolet'",
          "select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Dodge' intersect select country.country from country join team_driver on country.country_id = team_driver.team_id join driver on team_driver.driver_id = driver.driver_id where driver.make = 'Chevelle'"
        ]
      ]
    },
    {
      "id": 1633,
      "db_id": "car_racing",
      "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
      "infer_predictions": [
        [
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) & avg ( points ) from driver",
          "select sum ( points ) ,avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1634,
      "db_id": "car_racing",
      "gold": "SELECT sum(Points) ,  avg(Points) FROM driver",
      "infer_predictions": [
        [
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) , avg ( points ) from driver",
          "select sum ( points ) ,avg ( points ) from driver"
        ]
      ]
    },
    {
      "id": 1635,
      "db_id": "car_racing",
      "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
      "infer_predictions": [
        [
          "select country from country except select country.country from country join driver on country.country_id = driver.country",
          "select country from country except select country from driver",
          "select country from country where country_id not in ( select country from driver )",
          "select country from country where country_id not in ( select country_id from driver )"
        ]
      ]
    },
    {
      "id": 1636,
      "db_id": "car_racing",
      "gold": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
      "infer_predictions": [
        [
          "select country from country where country_id not in ( select country_id from driver )",
          "select country from country where country_id not in ( select country from driver )",
          "select country from country except select country.country from country join driver on country.country_id = driver.country",
          "select country from country except select country from driver"
        ]
      ]
    },
    {
      "id": 1637,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select team.manager , team.sponsor from team join team_driver on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team_driver join team on team_driver.team_id = team.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team_driver join team on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team join team_driver on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1638,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select team.manager , team.sponsor from team join team_driver on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team_driver join team on team_driver.team_id = team.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.manager , team.sponsor from team join team_driver on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1",
          "select team.team , team.sponsor from team join team_driver on team.team_id = team_driver.team_id group by team.team_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1639,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team_driver join team on team_driver.team_id = team.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team_driver.team_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1640,
      "db_id": "car_racing",
      "gold": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.team , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2",
          "select team.manager , team.car_owner from team join team_driver on team.team_id = team_driver.team_id group by team_driver.team_id having count ( * ) >= 2",
          "select team.manager , car_owner from team join team_driver on team.team_id = team_driver.team_id group by team.team_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 1641,
      "db_id": "institution_sports",
      "gold": "SELECT count(*) FROM institution",
      "infer_predictions": [
        [
          "select count ( * ) from institution",
          "select count ( * ) from institution"
        ]
      ]
    },
    {
      "id": 1642,
      "db_id": "institution_sports",
      "gold": "SELECT count(*) FROM institution",
      "infer_predictions": [
        [
          "select count ( * ) from institution",
          "select count ( * ) from institution",
          "select count ( * ) from institution",
          "select count ( * ) from institution"
        ]
      ]
    },
    {
      "id": 1643,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from institution order by name asc",
          "Select name from institution order by name asc",
          "select name from institution order by name asc"
        ]
      ]
    },
    {
      "id": 1644,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Name ASC",
      "infer_predictions": [
        [
          "select name from institution order by name asc",
          "Select name from institution order by name asc",
          "select name from institution order by name asc"
        ]
      ]
    },
    {
      "id": 1645,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
      "infer_predictions": [
        [
          "select name from institution order by founded asc",
          "Select name from institution order by founded asc",
          "select name from institution order by founded asc"
        ]
      ]
    },
    {
      "id": 1646,
      "db_id": "institution_sports",
      "gold": "SELECT Name FROM institution ORDER BY Founded ASC",
      "infer_predictions": [
        [
          "select name from institution order by founded asc",
          "Select name from institution order by founded asc",
          "select name from institution order by founded asc"
        ]
      ]
    },
    {
      "id": 1647,
      "db_id": "institution_sports",
      "gold": "SELECT City ,  Province FROM institution",
      "infer_predictions": [
        [
          "select city , province from institution"
        ]
      ]
    },
    {
      "id": 1648,
      "db_id": "institution_sports",
      "gold": "SELECT City ,  Province FROM institution",
      "infer_predictions": [
        [
          "select city , province from institution",
          "select city , Province from institution"
        ]
      ]
    },
    {
      "id": 1649,
      "db_id": "institution_sports",
      "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
      "infer_predictions": [
        [
          "select max ( enrollment ) , min ( enrollment ) from institution"
        ]
      ]
    },
    {
      "id": 1650,
      "db_id": "institution_sports",
      "gold": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
      "infer_predictions": [
        [
          "select max ( enrollment ) , min ( enrollment ) from institution"
        ]
      ]
    },
    {
      "id": 1651,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
      "infer_predictions": [
        [
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver' != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver '",
          "select affiliation from institution where city != 'Vancouver' != 'Alberta'",
          "select affiliation from institution where city != \"Vancouver\"",
          "select affiliation from institution where city != 'Vancouver' != 'Toronto'"
        ]
      ]
    },
    {
      "id": 1652,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
      "infer_predictions": [
        [
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver' != 'Vancouver'",
          "select affiliation from institution where city != 'Vancouver '",
          "select affiliation from institution where city != 'Vancouve'",
          "select affiliation from institution where city != 'Vancouver'",
          "select affiliation from institution where city != \"Vancouver\""
        ]
      ]
    },
    {
      "id": 1653,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
      "infer_predictions": [
        [
          "select stadium from institution order by capacity desc",
          "Select stadium from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1654,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
      "infer_predictions": [
        [
          "select stadium from institution order by capacity desc",
          "select stadium from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1655,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
      "infer_predictions": [
        [
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1"
        ]
      ]
    },
    {
      "id": 1656,
      "db_id": "institution_sports",
      "gold": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
      "infer_predictions": [
        [
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1",
          "select stadium from institution order by enrollment desc limit 1"
        ]
      ]
    },
    {
      "id": 1657,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
      "infer_predictions": [
        [
          "select institution.name , championship.nickname from institution join championship on institution.institution_id = championship.institution_id",
          "select institution.name , championship.nickname from championship join institution on championship.institution_id = institution.institution_id",
          "select name , nickname from institution join championship on institution.institution_id = championship.institution_id",
          "select institution.name , championship.nickname from Institution join championship on institution.institution_id = championship.institution_id"
        ]
      ]
    },
    {
      "id": 1658,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
      "infer_predictions": [
        [
          "select institution.name , championship.nickname from institution join championship on institution.institution_id = championship.institution_id",
          "select institution.name , championship.nickname from championship join institution on championship.institution_id = institution.institution_id",
          "select institution.name , championship.nickname from Institution join championship on institution.institution_id = championship.institution_id"
        ]
      ]
    },
    {
      "id": 1659,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
      "infer_predictions": [
        [
          "select name from institution order by enrollment asc limit 1",
          "select name from institution order by enrollment asc limit 1",
          "select name from institution order by enrollment asc limit 1"
        ]
      ]
    },
    {
      "id": 1660,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
      "infer_predictions": [
        [
          "select name from institution order by enrollment asc limit 1",
          "select name from institution order by enrollment asc limit 1"
        ]
      ]
    },
    {
      "id": 1661,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by championship.number_of_championships desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by championship.number_of_championships desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id order by count ( * ) desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id group by championship.institution_id order by count ( * ) desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by number_of_championships desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by number_of_championships desc"
        ]
      ]
    },
    {
      "id": 1662,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by championship.number_of_championships desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id order by championship.number_of_championships desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id order by count ( * ) desc",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id group by championship.institution_id order by count ( * ) desc",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id order by number_of_championships desc",
          "select institution.name from Championship join institution on championship.institution_id = institution.institution_id order by championship.number_of_championships desc"
        ]
      ]
    },
    {
      "id": 1663,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by institution.institution_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 1664,
      "db_id": "institution_sports",
      "gold": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
      "infer_predictions": [
        [
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by institution.institution_id having count ( * ) >= 1",
          "select institution.name from championship join institution on championship.institution_id = institution.institution_id group by championship.institution_id having count ( * ) >= 1",
          "select institution.name from institution join championship on institution.institution_id = championship.institution_id group by Championship.institution_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 1665,
      "db_id": "institution_sports",
      "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
      "infer_predictions": [
        [
          "select sum ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'public'",
          "select sum ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'public'",
          "select sum ( championship.number_of_championships ) , institution.institution_id from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'public'",
          "select sum ( championship.number_of_championships ) from Institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'public'"
        ]
      ]
    },
    {
      "id": 1666,
      "db_id": "institution_sports",
      "gold": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
      "infer_predictions": [
        [
          "select sum ( championship.number_of_championships ) from institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from championship join institution on championship.institution_id = institution.institution_id where institution.affiliation = 'Public'",
          "select sum ( championship.number_of_championships ) from Institution join championship on institution.institution_id = championship.institution_id where institution.affiliation = 'Public'"
        ]
      ]
    },
    {
      "id": 1667,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from institution group by affiliation"
        ]
      ]
    },
    {
      "id": 1668,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
      "infer_predictions": [
        [
          "select affiliation , count ( * ) from institution group by affiliation",
          "select count ( * ) , affiliation from institution group by affiliation",
          "select affiliation  , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( * ) from institution group by affiliation",
          "select affiliation , count ( *) from institution group by affiliation"
        ]
      ]
    },
    {
      "id": 1669,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 2",
          "Select affiliation from institution group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1670,
      "db_id": "institution_sports",
      "gold": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1",
          "select affiliation from institution group by affiliation order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1671,
      "db_id": "institution_sports",
      "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select founded from institution group by founded having count ( * ) > 1",
          "select distinct founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( distinct founded ) > 1",
          "select founded from institution group by founded having count ( * ) >1",
          "select founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1",
          "select founded from institution group by founded having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1672,
      "db_id": "institution_sports",
      "gold": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
      "infer_predictions": [
        [
          "select founded , count ( * ) from institution group by founded having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1673,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
      "infer_predictions": [
        [
          "select name from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1674,
      "db_id": "institution_sports",
      "gold": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
      "infer_predictions": [
        [
          "select name from institution order by capacity desc",
          "Select name from institution order by capacity desc"
        ]
      ]
    },
    {
      "id": 1675,
      "db_id": "institution_sports",
      "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
      "infer_predictions": [
        [
          "select sum ( enrollment ) from institution where city = 'Vancouver' or city = 'Calgary'",
          "select sum ( enrollment ) from institution where city = 'Toronto' or city = 'Calgary'",
          "select sum ( enrollment ) from institution where city = 'Victoria' or city = 'Calgary'"
        ]
      ]
    },
    {
      "id": 1676,
      "db_id": "institution_sports",
      "gold": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
      "infer_predictions": [
        [
          "select enrollment from institution where city = 'Vancouver' or city = 'Calgary'"
        ]
      ]
    },
    {
      "id": 1677,
      "db_id": "institution_sports",
      "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
      "infer_predictions": [
        [
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950",
          "select province from institution where founded <= 1920 intersect select province from institution where founded > 1950"
        ]
      ]
    },
    {
      "id": 1678,
      "db_id": "institution_sports",
      "gold": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
      "infer_predictions": [
        [
          "select province from institution where founded < 1920 intersect select province from institution where founded > 1950",
          "select province from institution where founded <= 1920 intersect select province from institution where founded > 1950",
          "select province from institution where founded < 1920 intersect select province from institution where founded >> 1950"
        ]
      ]
    },
    {
      "id": 1679,
      "db_id": "institution_sports",
      "gold": "SELECT count(DISTINCT Province) FROM institution",
      "infer_predictions": [
        [
          "select count ( distinct province ) from institution",
          "select count ( distinct province ) from institution",
          "select count ( distinct province ) from institution",
          "select count ( distinct province ) from institution"
        ]
      ]
    },
    {
      "id": 1680,
      "db_id": "institution_sports",
      "gold": "SELECT count(DISTINCT Province) FROM institution",
      "infer_predictions": [
        [
          "select count ( distinct province ) from institution",
          "select count ( distinct province ) from institution",
          "select count ( distinct province ) from institution"
        ]
      ]
    },
    {
      "id": 1681,
      "db_id": "warehouse_1",
      "gold": "SELECT * FROM warehouses",
      "infer_predictions": [
        [
          "select * from warehouses",
          "select distinct * from warehouses",
          "select * from warehouses",
          "select * from warehouses",
          "select * from warehouses"
        ]
      ]
    },
    {
      "id": 1682,
      "db_id": "warehouse_1",
      "gold": "SELECT * FROM warehouses",
      "infer_predictions": [
        [
          "select * from warehouses"
        ]
      ]
    },
    {
      "id": 1683,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
      "infer_predictions": [
        [
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york city'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York City'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'new york city'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York City'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'NYC'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'NYC'"
        ]
      ]
    },
    {
      "id": 1684,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
      "infer_predictions": [
        [
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'new york city'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York City'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'NYC'",
          "select distinct contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'NY'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york city'",
          "select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'"
        ]
      ]
    },
    {
      "id": 1685,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
      "infer_predictions": [
        [
          "select contents from boxes where value > 150",
          "select contents from boxes where value >150"
        ]
      ]
    },
    {
      "id": 1686,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
      "infer_predictions": [
        [
          "select contents from boxes where value > 150",
          "select contents from boxes where value >150"
        ]
      ]
    },
    {
      "id": 1687,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouse , avg ( value ) from boxes group by warehouse",
          "select warehouses.code , avg ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , avg ( value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select avg ( value ) , warehouse from boxes group by warehouse",
          "select warehouses.code , avg ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , avg ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , avg ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1688,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select avg ( value ) , warehouse from boxes group by warehouse",
          "select avg ( boxes.value ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouse , avg ( value ) from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1689,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) , sum ( value ) from boxes",
          "select value , avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1690,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  sum(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) , sum ( value ) from boxes",
          "select value , avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes",
          "select avg ( value ) , sum ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1691,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select avg ( capacity ) , sum ( capacity ) from warehouses",
          "select ( capacity ) , avg ( capacity ) , sum ( capacity ) from warehouses",
          "select capacity , avg ( capacity ) , sum ( capacity ) from warehouses",
          "select avg ( capacity ) , sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1692,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select avg ( capacity ) , sum ( capacity ) from warehouses",
          "select ( capacity ) , avg ( capacity ) , sum ( capacity ) from warehouses",
          "select capacity , avg ( capacity ) , sum ( capacity ) from warehouses",
          "select capacity , avg ( capacity ) , sum ( capacity ) from warehouses",
          "select avg ( capacity ) , sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1693,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , avg ( value ) , max ( value ) from boxes group by contents",
          "select avg ( value ) , max ( value ) , contents from boxes group by contents",
          "select count ( * ) , avg ( value ) , max ( value ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1694,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , avg ( value ) , max ( value ) from boxes group by contents",
          "select count ( * ) , avg ( value ) , max ( value ) from boxes group by contents",
          "select avg ( value ) , max ( value ) , contents from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1695,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
      "infer_predictions": [
        [
          "select contents from boxes group by contents order by sum ( value ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1696,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
      "infer_predictions": [
        [
          "select contents from boxes order by value desc limit 1",
          "select contents from boxes group by contents order by sum ( value ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1697,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) from boxes",
          "select value , avg ( value ) from boxes group by value",
          "select value , avg ( value ) from boxes group by value",
          "select avg ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1698,
      "db_id": "warehouse_1",
      "gold": "SELECT avg(value) FROM boxes",
      "infer_predictions": [
        [
          "select avg ( value ) from boxes",
          "select value , avg ( value ) from boxes group by value",
          "select value , avg ( value ) from boxes group by value",
          "select avg ( value ) from boxes"
        ]
      ]
    },
    {
      "id": 1699,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes",
      "infer_predictions": [
        [
          "select distinct contents from boxes",
          "select distinct ( contents ) from boxes",
          "select distinct contents from boxes"
        ]
      ]
    },
    {
      "id": 1700,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes",
      "infer_predictions": [
        [
          "select distinct contents from boxes",
          "select distinct ( contents ) from boxes",
          "select distinct contents from boxes",
          "select distinct contents from boxes"
        ]
      ]
    },
    {
      "id": 1701,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
      "infer_predictions": [
        [
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes"
        ]
      ]
    },
    {
      "id": 1702,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) FROM boxes",
      "infer_predictions": [
        [
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes",
          "select count ( distinct contents ) from boxes"
        ]
      ]
    },
    {
      "id": 1703,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
      "infer_predictions": [
        [
          "select distinct location from warehouses",
          "select distinct ( location ) from warehouses",
          "select distinct location from warehouses",
          "select distinct location from warehouses"
        ]
      ]
    },
    {
      "id": 1704,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM warehouses",
      "infer_predictions": [
        [
          "select distinct location from warehouses",
          "select distinct ( location ) from warehouses",
          "select distinct location from warehouses"
        ]
      ]
    },
    {
      "id": 1705,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'new york city'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New york'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'new york'"
        ]
      ]
    },
    {
      "id": 1706,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'new york city'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New york'"
        ]
      ]
    },
    {
      "id": 1707,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'new york city'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New york'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'NewYork'"
        ]
      ]
    },
    {
      "id": 1708,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New york'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'New York'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' or warehouses.location = 'New York City'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' or warehouses.location = 'new york city'"
        ]
      ]
    },
    {
      "id": 1709,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' union select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' union select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New york'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york'"
        ]
      ]
    },
    {
      "id": 1710,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York City'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york city'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' intersect select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New york'"
        ]
      ]
    },
    {
      "id": 1711,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes except select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'new york city'",
          "select distinct contents from boxes except select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york city'",
          "select distinct contents from boxes except select distinct boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'NY'"
        ]
      ]
    },
    {
      "id": 1712,
      "db_id": "warehouse_1",
      "gold": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
      "infer_predictions": [
        [
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York'",
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'new york city'",
          "select distinct contents from boxes except select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'New York'",
          "select distinct contents from boxes except select boxes.contents from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'new york city'",
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'NY'",
          "select distinct contents from boxes except select boxes.contents from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'New York City'"
        ]
      ]
    },
    {
      "id": 1713,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' except select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rock' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1714,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rock' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' except select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'ROCKS' except select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'SCISSORS'"
        ]
      ]
    },
    {
      "id": 1715,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rocks' or contents = 'Scissors'",
          "select warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rocks' or contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' or contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1716,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
      "infer_predictions": [
        [
          "select distinct warehouse from boxes where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' or boxes.contents = 'Scissors'",
          "select distinct warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rock' or contents = 'Scissors'",
          "select distinct warehouse from boxes where contents = 'Rock' or contents = 'Scissors'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Scissors' or contents = 'Rocks'",
          "select distinct warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code where contents = 'Rolling Rocks' or contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1717,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' and 'Scissors'",
          "select warehouses.location from Warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks And Scissors'"
        ]
      ]
    },
    {
      "id": 1718,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
      "infer_predictions": [
        [
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks' and boxes.contents = 'Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents like '%Rocks% and %Scissors%'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents like '%Rocks%' and boxes.contents like '%Scissors%'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks And Scissors'",
          "select warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from Warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks and Scissors'",
          "select warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks' and contents = 'Scissors'"
        ]
      ]
    },
    {
      "id": 1719,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc",
          "select code ,contents from boxes order by value asc",
          "select code , contents from boxes order by value asc"
        ]
      ]
    },
    {
      "id": 1720,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc",
          "select code ,contents from boxes order by value asc"
        ]
      ]
    },
    {
      "id": 1721,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc limit 1",
          "select code ,contents from boxes order by value asc limit 1",
          "select code , contents from boxes order by value asc limit 1"
        ]
      ]
    },
    {
      "id": 1722,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
      "infer_predictions": [
        [
          "select code , contents from boxes order by value asc limit 1",
          "select code ,contents from boxes order by value asc limit 1",
          "select code , contents from boxes order by value asc limit 1"
        ]
      ]
    },
    {
      "id": 1723,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
      "infer_predictions": [
        [
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where value > ( Select avg ( value ) from boxes )"
        ]
      ]
    },
    {
      "id": 1724,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
      "infer_predictions": [
        [
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )",
          "select distinct contents from boxes where value > ( select avg ( value ) from boxes )"
        ]
      ]
    },
    {
      "id": 1725,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
      "infer_predictions": [
        [
          "select distinct contents from boxes order by contents asc"
        ]
      ]
    },
    {
      "id": 1726,
      "db_id": "warehouse_1",
      "gold": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
      "infer_predictions": [
        [
          "select distinct contents from boxes order by contents asc",
          "select distinct ( contents ) from boxes order by contents asc",
          "Select distinct contents from boxes order by contents asc",
          "select distinct contents from boxes order by contents asc"
        ]
      ]
    },
    {
      "id": 1727,
      "db_id": "warehouse_1",
      "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
      "infer_predictions": [
        [
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes where value > ( select min ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rock' )"
        ]
      ]
    },
    {
      "id": 1728,
      "db_id": "warehouse_1",
      "gold": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
      "infer_predictions": [
        [
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes where value > ( select min ( value ) from boxes where contents = 'Rocks' )",
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rock' )",
          "select code from boxes where value > ( select max ( value ) from boxes where contents = 'Rocks' )"
        ]
      ]
    },
    {
      "id": 1729,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
      "infer_predictions": [
        [
          "select code , contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select code , contents from boxes where value > ( select min ( value ) from boxes where contents = 'Scissors' )"
        ]
      ]
    },
    {
      "id": 1730,
      "db_id": "warehouse_1",
      "gold": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
      "infer_predictions": [
        [
          "select code , contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissors' )",
          "select code , contents from boxes where value > ( select min ( value ) from boxes where contents = 'Scissors' )",
          "select code ,contents from boxes where value > ( select max ( value ) from boxes where contents = 'Scissors' )"
        ]
      ]
    },
    {
      "id": 1731,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )"
        ]
      ]
    },
    {
      "id": 1732,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
      "infer_predictions": [
        [
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity = ( select max ( capacity ) from warehouses )",
          "select sum ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.capacity = ( select max ( capacity ) from warehouses )"
        ]
      ]
    },
    {
      "id": 1733,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
      "infer_predictions": [
        [
          "select warehouses.code , avg ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( boxes.value ) > 150",
          "select warehouses.code , avg ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code having avg ( boxes.value ) > 150",
          "select warehouses.code , avg ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( value ) > 150",
          "select warehouses.code , avg ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( boxes.value ) >= 150",
          "select warehouses.code , avg ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code having avg ( boxes.value ) >= 150",
          "select warehouses.code , avg ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( value ) >= 150",
          "select warehouses.code , avg ( value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code having avg ( value ) > 150",
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) > 150"
        ]
      ]
    },
    {
      "id": 1734,
      "db_id": "warehouse_1",
      "gold": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
      "infer_predictions": [
        [
          "select avg ( value ) , warehouse from boxes group by warehouse having avg ( value ) >= 150",
          "select avg ( value ) , warehouse from boxes group by warehouse having avg ( value ) > 150",
          "select avg ( boxes.value ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( boxes.value ) >= 150",
          "select avg ( boxes.value ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code having avg ( boxes.value ) > 150",
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) > 150",
          "select warehouse , avg ( value ) from boxes group by warehouse having avg ( value ) >= 150"
        ]
      ]
    },
    {
      "id": 1735,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , count ( * ) , sum ( value ) from boxes group by contents",
          "select contents , sum ( value ) , count ( * ) from boxes group by contents",
          "select contents , sum ( value ) , count ( * ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1736,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
      "infer_predictions": [
        [
          "select contents , count ( * ) from boxes group by contents",
          "select contents , sum ( value ) from boxes group by contents",
          "select contents , sum ( value ) , count ( * ) from boxes group by contents"
        ]
      ]
    },
    {
      "id": 1737,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location",
          "select sum ( capacity ) ,avg ( capacity ) , max ( capacity ) , location from warehouses group by location",
          "select sum ( capacity ) ,avg ( capacity ) , max ( capacity ) , location from warehouses group by location"
        ]
      ]
    },
    {
      "id": 1738,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
      "infer_predictions": [
        [
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location",
          "select sum ( capacity ) ,avg ( capacity ) , max ( capacity ) , location from warehouses group by location",
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses Group by location",
          "select sum ( capacity ) , avg ( capacity ) , max ( capacity ) , location from warehouses group by location"
        ]
      ]
    },
    {
      "id": 1739,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select sum ( capacity ) from warehouses",
          "select sum ( capacity ) , location from warehouses",
          "select sum ( capacity ) , location from warehouses group by location",
          "select sum ( capacity ) from warehouses",
          "select sum ( capacity ) from warehouses",
          "select sum ( capacity ) from ( select capacity from warehouses )"
        ]
      ]
    },
    {
      "id": 1740,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(capacity) FROM warehouses",
      "infer_predictions": [
        [
          "select sum ( capacity ) from warehouses"
        ]
      ]
    },
    {
      "id": 1741,
      "db_id": "warehouse_1",
      "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
      "infer_predictions": [
        [
          "select warehouses.location , max ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select boxes.value , warehouses.location , max ( boxes.value ) , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select boxes.value , warehouses.location , max ( boxes.value ) , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , boxes.warehouse from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , boxes.warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select boxes.value , warehouse , max ( boxes.value ) , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select boxes.value , warehouses.location , max ( boxes.value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location"
        ]
      ]
    },
    {
      "id": 1742,
      "db_id": "warehouse_1",
      "gold": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
      "infer_predictions": [
        [
          "select warehouses.location , max ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.location , max ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.capacity > 100 group by warehouses.location",
          "select warehouses.location , max ( boxes.value ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.location"
        ]
      ]
    },
    {
      "id": 1743,
      "db_id": "warehouse_1",
      "gold": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , count ( * ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1744,
      "db_id": "warehouse_1",
      "gold": "select warehouse ,  count(*) from boxes group by warehouse",
      "infer_predictions": [
        [
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select count ( * ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouse from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1745,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
      "infer_predictions": [
        [
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rock'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where contents = 'Rocks'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Rocks'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Raw Materials'",
          "select count ( distinct warehouses.location ) from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents = 'Stones'"
        ]
      ]
    },
    {
      "id": 1746,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
      "infer_predictions": [
        [
          "select count ( distinct warehouse ) from boxes where contents = 'Rocks'",
          "select count ( distinct warehouse ) from boxes where contents = 'Rock'",
          "select count ( distinct warehouse ) from boxes where contents = 'River Rocks'",
          "select count ( distinct warehouse ) from boxes where contents = 'Raw Materials'",
          "select count ( distinct warehouse ) from boxes where contents = 'Rivers'",
          "select count ( distinct warehouse ) from boxes where contents = 'Raw Material'"
        ]
      ]
    },
    {
      "id": 1747,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
      "infer_predictions": [
        [
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code",
          "select warehouses.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select warehouses.location , boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from Warehouses join boxes on warehouses.code = boxes.warehouse"
        ]
      ]
    },
    {
      "id": 1748,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
      "infer_predictions": [
        [
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from boxes join warehouses on boxes.warehouse = warehouses.code",
          "select boxes.code , warehouses.location from warehouses join boxes on warehouses.code = boxes.warehouse",
          "select boxes.code , warehouses.location from Warehouses join boxes on warehouses.code = boxes.warehouse"
        ]
      ]
    },
    {
      "id": 1749,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicagoland'"
        ]
      ]
    },
    {
      "id": 1750,
      "db_id": "warehouse_1",
      "gold": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
      "infer_predictions": [
        [
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'",
          "select boxes.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicagoland'"
        ]
      ]
    },
    {
      "id": 1751,
      "db_id": "warehouse_1",
      "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , count ( * ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouse , count ( * ) from boxes group by warehouse",
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1752,
      "db_id": "warehouse_1",
      "gold": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( * ) , warehouse from boxes group by warehouse",
          "select count ( * ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( * ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , count ( * ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select warehouses.code , count ( * ) from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select count ( * ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1753,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouse from boxes group by warehouse"
        ]
      ]
    },
    {
      "id": 1754,
      "db_id": "warehouse_1",
      "gold": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
      "infer_predictions": [
        [
          "select count ( distinct contents ) , warehouse from boxes group by warehouse",
          "select count ( distinct contents ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct boxes.contents ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouse from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouses.code from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code",
          "select count ( distinct contents ) , warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse group by warehouses.code",
          "select warehouses.code , count ( distinct contents ) from boxes join warehouses on boxes.warehouse = warehouses.code group by warehouses.code"
        ]
      ]
    },
    {
      "id": 1755,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
      "infer_predictions": [
        [
          "select code from warehouses where capacity > capacity",
          "select code from warehouses where capacity > ( select max ( capacity ) from warehouses )",
          "select code from warehouses where capacity > capacity",
          "select code from warehouses where capacity > 0"
        ]
      ]
    },
    {
      "id": 1756,
      "db_id": "warehouse_1",
      "gold": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
      "infer_predictions": [
        [
          "select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents > warehouses.capacity",
          "select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents > warehouses.capacity",
          "select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents > ( select max ( contents ) from boxes )",
          "select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where boxes.contents > warehouses.capacity"
        ]
      ]
    },
    {
      "id": 1757,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
      "infer_predictions": [
        [
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicagoland' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse != 'Chicago'",
          "select sum ( value ) from boxes where warehouse not in ( select code from warehouses where location = 'Chicago' )"
        ]
      ]
    },
    {
      "id": 1758,
      "db_id": "warehouse_1",
      "gold": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
      "infer_predictions": [
        [
          "select sum ( value ) from boxes where warehouse != 'Chicago'",
          "select sum ( boxes.value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'Chicago'",
          "select sum ( boxes.value ) from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicago'",
          "select sum ( value ) from boxes join warehouses on boxes.warehouse = warehouses.code where warehouses.location != 'Chicago'",
          "select sum ( value ) from boxes where warehouse not in ( select warehouse from warehouses where location = 'Chicago' )",
          "select sum ( value ) from boxes where warehouse not in ( select warehouses.code from warehouses join boxes on warehouses.code = boxes.warehouse where warehouses.location != 'Chicago' )"
        ]
      ]
    },
    {
      "id": 1759,
      "db_id": "university_rank",
      "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
      "infer_predictions": [
        [
          "select university_name , city , state from university order by university_name asc",
          "Select university_name , city , state from university order by university_name asc"
        ]
      ]
    },
    {
      "id": 1760,
      "db_id": "university_rank",
      "gold": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
      "infer_predictions": [
        [
          "select university_name , city , state from university order by university_name asc",
          "Select university_name , city , state from university order by university_name asc",
          "select university_name , city , state from university order by university_name asc"
        ]
      ]
    },
    {
      "id": 1761,
      "db_id": "university_rank",
      "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
      "infer_predictions": [
        [
          "select count ( * ) from university where state = 'IL' or state = 'OH'",
          "select count ( * ) from university where state = 'IL' or state = 'OHIO'",
          "select count ( * ) from university where state = 'IL' or state = 'OHI'",
          "select count ( * ) from university where state = 'Illinois' or state = 'Ohio'",
          "select count ( * ) from university where state = 'IL' or state = 'OHio'",
          "select count ( * ) from university where state = 'ILLINOIS' or state = 'OHIO'",
          "select count ( * ) from university where state = 'IL' or state = 'OH'",
          "select count ( * ) from university where state = 'IL' or state = 'OHIA'"
        ]
      ]
    },
    {
      "id": 1762,
      "db_id": "university_rank",
      "gold": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
      "infer_predictions": [
        [
          "select count ( * ) from university where state = 'IL' or state = 'OH'",
          "select count ( * ) from university where state = 'IL' or state = 'OHIO'",
          "select count ( * ) from university where state = 'IL' or state = 'OHI'",
          "select count ( * ) from university where state = 'Illinois' or state = 'Ohio'",
          "select count ( * ) from university where state = 'ILLINOIS' or state = 'OHIO'",
          "select count ( * ) from university where state = 'IL' or state = 'OHio'",
          "select count ( * ) from university where state = 'IL' or state = 'OH'"
        ]
      ]
    },
    {
      "id": 1763,
      "db_id": "university_rank",
      "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
      "infer_predictions": [
        [
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select avg ( enrollment ) , max ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) and min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) and min ( enrollment ) from university",
          "select max ( enrollment ) ,avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university"
        ]
      ]
    },
    {
      "id": 1764,
      "db_id": "university_rank",
      "gold": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
      "infer_predictions": [
        [
          "select max ( enrollment ) , avg ( enrollment ) , min ( enrollment ) from university",
          "select avg ( enrollment ) , max ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) and min ( enrollment ) from university",
          "select max ( enrollment ) , avg ( enrollment ) and min ( enrollment ) from university",
          "select max ( enrollment ) ,avg ( enrollment ) , min ( enrollment ) from university",
          "select max ( enrollment ) ,avg ( enrollment ) , min ( enrollment ) from university"
        ]
      ]
    },
    {
      "id": 1765,
      "db_id": "university_rank",
      "gold": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
      "infer_predictions": [
        [
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )"
        ]
      ]
    },
    {
      "id": 1766,
      "db_id": "university_rank",
      "gold": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
      "infer_predictions": [
        [
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )",
          "select team_name from university where enrollment > ( select avg ( enrollment ) from university )"
        ]
      ]
    },
    {
      "id": 1767,
      "db_id": "university_rank",
      "gold": "SELECT DISTINCT home_conference FROM University",
      "infer_predictions": [
        [
          "select distinct home_conference from university",
          "select distinct ( home_conference ) from university"
        ]
      ]
    },
    {
      "id": 1768,
      "db_id": "university_rank",
      "gold": "SELECT DISTINCT home_conference FROM University",
      "infer_predictions": [
        [
          "select distinct home_conference from university",
          "select distinct ( home_conference ) from university",
          "select distinct home_conference from university"
        ]
      ]
    },
    {
      "id": 1769,
      "db_id": "university_rank",
      "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
      "infer_predictions": [
        [
          "select home_conference , count ( * ) from university group by home_conference",
          "select home_conference , count ( * ) from university group by home_conference",
          "select home_conference , count ( * ) from university"
        ]
      ]
    },
    {
      "id": 1770,
      "db_id": "university_rank",
      "gold": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
      "infer_predictions": [
        [
          "select home_conference , count ( * ) from university group by home_conference",
          "select home_conference , count ( * ) from university group by home_conference",
          "select home_conference , count ( * ) from university group by home_conference order by count ( * ) desc",
          "select home_conference , count ( * ) from university"
        ]
      ]
    },
    {
      "id": 1771,
      "db_id": "university_rank",
      "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state , count ( * ) from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1 != 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1772,
      "db_id": "university_rank",
      "gold": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state , count ( * ) from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1",
          "select state from university group by state order by count ( * ) desc limit 1 != 1",
          "select state from university group by state order by count ( * ) desc limit 10",
          "select state from university group by state order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1773,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) >= 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000"
        ]
      ]
    },
    {
      "id": 1774,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) >= 2000",
          "select home_conference from university group by home_conference having avg ( enrollment ) > 2000"
        ]
      ]
    },
    {
      "id": 1775,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference order by sum ( enrollment ) asc limit 1",
          "select home_conference from university group by home_conference order by sum ( enrollment ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1776,
      "db_id": "university_rank",
      "gold": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
      "infer_predictions": [
        [
          "select home_conference from university group by home_conference order by sum ( enrollment ) asc limit 1",
          "select home_conference from university group by home_conference order by count ( * ) asc limit 1",
          "select home_conference from university order by enrollment asc limit 1"
        ]
      ]
    },
    {
      "id": 1777,
      "db_id": "university_rank",
      "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
      "infer_predictions": [
        [
          "select major_name , major_code from major order by major_code asc",
          "select major.major_name , major.major_code from major join major_ranking on major.major_id = major_ranking.major_id order by major.major_code asc"
        ]
      ]
    },
    {
      "id": 1778,
      "db_id": "university_rank",
      "gold": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
      "infer_predictions": [
        [
          "select major_name , major_code from major order by major_code asc",
          "select major.major_name , major.major_code from major join major_ranking on major.major_id = major_ranking.major_id order by major.major_code asc",
          "select major.major_name , major.major_code from major join major_ranking on major.major_id = major_ranking.major_id order by major_code asc"
        ]
      ]
    },
    {
      "id": 1779,
      "db_id": "university_rank",
      "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
      "infer_predictions": [
        [
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major.major_name , major_ranking.rank from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'"
        ]
      ]
    },
    {
      "id": 1780,
      "db_id": "university_rank",
      "gold": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
      "infer_predictions": [
        [
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from major_ranking join university on major_ranking.university_id = university.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Augustana College'",
          "select major_ranking.rank , major.major_name from major_ranking join major on major_ranking.major_id = major.major_id join university on major_ranking.university_id = university.university_id where university.university_name = 'Augsburg College'"
        ]
      ]
    },
    {
      "id": 1781,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
      "infer_predictions": [
        [
          "select university.university_name , university.city , university.state from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major_ranking.rank = 1 and major.major_name = 'Accounting'"
        ]
      ]
    },
    {
      "id": 1782,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
      "infer_predictions": [
        [
          "select university.university_name , university.city , university.state from university join major_ranking on university.university_id = major_ranking.university_id order by major_ranking.rank desc limit 1",
          "select university.university_name , university.city , university.state from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = ( select major_ranking.rank from overall_ranking join university on overall_ranking.university_id = university.university_id where major_ranking.rank = 1 )",
          "select university.university_name , university.city , university.state from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = ( select major_ranking.rank from major_ranking join university on major_ranking.university_id = university.university_id where major_ranking.rank = 1 )",
          "select university.university_name , university.city , university.state from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = ( select major_ranking.rank from overall_ranking join university on overall_ranking.university_id = university.university_id where major_ranking.rank = 1 )"
        ]
      ]
    },
    {
      "id": 1783,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by university.university_name order by count ( * ) desc limit 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by major_ranking.university_id order by count ( * ) desc limit 1",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id where major_ranking.rank = 1 group by major_ranking.university_id order by count ( * ) desc limit 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = '1' group by university.university_name order by count ( * ) desc limit 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by university.university_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1784,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by major_ranking.university_id order by count ( * ) desc limit 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1 group by university.university_name order by count ( * ) desc limit 1",
          "select university.university_name from major_ranking join university on major_ranking.university_id = university.university_id where major_ranking.rank = 1 group by major_ranking.university_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1785,
      "db_id": "university_rank",
      "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
      "infer_predictions": [
        [
          "select university_name from university except select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id except select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1"
        ]
      ]
    },
    {
      "id": 1786,
      "db_id": "university_rank",
      "gold": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
      "infer_predictions": [
        [
          "select university_name from university except select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id except select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank = 1"
        ]
      ]
    },
    {
      "id": 1787,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'"
        ]
      ]
    },
    {
      "id": 1788,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Accounting' intersect select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id join major on major_ranking.major_id = major.major_id where major.major_name = 'Urban Education'"
        ]
      ]
    },
    {
      "id": 1789,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
      "infer_predictions": [
        [
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'"
        ]
      ]
    },
    {
      "id": 1790,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
      "infer_predictions": [
        [
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select overall_ranking.rank , university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'Wisconsin'",
          "select university.university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where university.state = 'WI'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'Wisconsin'",
          "select university_name , overall_ranking.rank from university join overall_ranking on university.university_id = overall_ranking.university_id where state = 'WI'"
        ]
      ]
    },
    {
      "id": 1791,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.research_point desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by research_point desc limit 1",
          "select university.university_name from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.research_point desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.research_point desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by total desc limit 1"
        ]
      ]
    },
    {
      "id": 1792,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
      "infer_predictions": [
        [
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.research_point desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id group by overall_ranking.university_id order by sum ( overall_ranking.research_point ) desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by research_point desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id group by university.university_name order by sum ( overall_ranking.research_point ) desc limit 1",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id group by overall_ranking.university_id order by sum ( research_point ) desc limit 1",
          "select university.university_name from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.research_point desc limit 1"
        ]
      ]
    },
    {
      "id": 1793,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
      "infer_predictions": [
        [
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point asc",
          "select university.university_name from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.reputation_point asc",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc"
        ]
      ]
    },
    {
      "id": 1794,
      "db_id": "university_rank",
      "gold": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
      "infer_predictions": [
        [
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc",
          "select university.university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point asc",
          "select university.university_name from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.reputation_point asc",
          "select university.university_name from overall_ranking join university on overall_ranking.university_id = university.university_id order by reputation_point asc",
          "select university_name from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point asc"
        ]
      ]
    },
    {
      "id": 1795,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.major_id = 'Accounting' and major_ranking.rank <= 3",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.major_id = 'Accounting' and major_ranking.rank < 3"
        ]
      ]
    },
    {
      "id": 1796,
      "db_id": "university_rank",
      "gold": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
      "infer_predictions": [
        [
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank >= 3",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank >= 3 or major_ranking.rank <= 3",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank >= 3 and major_ranking.major_id = 4",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank >= 3 and major_ranking.major_id = 3",
          "select university.university_name from university join major_ranking on university.university_id = major_ranking.university_id where major_ranking.rank >= 3 or major_ranking.rank < 3"
        ]
      ]
    },
    {
      "id": 1797,
      "db_id": "university_rank",
      "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
      "infer_predictions": [
        [
          "select sum ( enrollment ) from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank <= 5",
          "select sum ( enrollment ) from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank < 5"
        ]
      ]
    },
    {
      "id": 1798,
      "db_id": "university_rank",
      "gold": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
      "infer_predictions": [
        [
          "select sum ( enrollment ) from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank <= 5",
          "select sum ( enrollment ) from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.rank < 5"
        ]
      ]
    },
    {
      "id": 1799,
      "db_id": "university_rank",
      "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3",
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id where overall_ranking.reputation_point >= 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3 order by overall_ranking.reputation_point desc limit 1",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3 order by overall_ranking.reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point > 3",
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id where overall_ranking.reputation_point > 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3 order by reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id where overall_ranking.reputation_point >= 3"
        ]
      ]
    },
    {
      "id": 1800,
      "db_id": "university_rank",
      "gold": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
      "infer_predictions": [
        [
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id order by overall_ranking.reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from university join overall_ranking on university.university_id = overall_ranking.university_id order by reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id order by overall_ranking.reputation_point desc limit 3",
          "select university.university_name , overall_ranking.citation_point from overall_ranking join university on overall_ranking.university_id = university.university_id order by reputation_point desc limit 3"
        ]
      ]
    },
    {
      "id": 1801,
      "db_id": "university_rank",
      "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment <= 3000 group by state having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 1802,
      "db_id": "university_rank",
      "gold": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select state from university where enrollment < 3000 group by state having count ( * ) > 2",
          "select state from university where enrollment <= 3000 group by state having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 1803,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where rating = 'null'",
          "select title from movies where rating not in ( select distinct title from movies )"
        ]
      ]
    },
    {
      "id": 1804,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select title from movies where rating not in ( select rating from movies )",
          "select title from movies where title not in ( select title from movies )",
          "select title from movies where rating not in ( select rating from movies )"
        ]
      ]
    },
    {
      "id": 1805,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select title from movies where rating = 'G'",
          "select title from movies where rating = 'G' != 'PG-13'",
          "select title from movies where rating = 'G' != 'PG'",
          "select title from movies where rating = 'G' != 'R'"
        ]
      ]
    },
    {
      "id": 1806,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select title from movies where rating = 'G'",
          "select title from movies where rating = 'G'"
        ]
      ]
    },
    {
      "id": 1807,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'ODEON'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Od\u00e9on'"
        ]
      ]
    },
    {
      "id": 1808,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select distinct movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'ODEON'"
        ]
      ]
    },
    {
      "id": 1809,
      "db_id": "movie_2",
      "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code",
          "select movietheaters.name , movies.title from movietheaters join movies on movietheaters.movie = movies.code"
        ]
      ]
    },
    {
      "id": 1810,
      "db_id": "movie_2",
      "gold": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.code",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.title"
        ]
      ]
    },
    {
      "id": 1811,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G' != 'A'"
        ]
      ]
    },
    {
      "id": 1812,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies WHERE rating  =  'G'",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'T'",
          "select count ( * ) from movies where rating = 'G'",
          "select count ( * ) from movies where rating = 'G'"
        ]
      ]
    },
    {
      "id": 1813,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( * ) from movietheaters",
          "select count ( * ) from ( select movie from movietheaters )",
          "select count ( distinct movie ) from movietheaters",
          "select count ( * ) from ( select movie from movietheaters )",
          "select count ( * ) from movietheaters",
          "select count ( * ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1814,
      "db_id": "movie_2",
      "gold": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( * ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( * ) from ( select count ( * ) from movietheaters )",
          "select count ( * ) from ( select movie from movietheaters )",
          "select count ( * ) from movietheaters",
          "select count ( * ) from ( select count ( movie ) from movietheaters )"
        ]
      ]
    },
    {
      "id": 1815,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1816,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
      "infer_predictions": [
        [
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie ) from movietheaters",
          "select count ( distinct movie) from movietheaters",
          "select count ( distinct movie ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1817,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT name) FROM movietheaters",
      "infer_predictions": [
        [
          "select count ( distinct name ) from movietheaters",
          "select count ( * ) from movietheaters",
          "select count ( distinct code ) from movietheaters",
          "select count ( distinct name ) from movietheaters",
          "select count ( distinct name ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1818,
      "db_id": "movie_2",
      "gold": "SELECT count(DISTINCT name) FROM movietheaters",
      "infer_predictions": [
        [
          "select count ( distinct name ) from movietheaters",
          "select count ( * ) from movietheaters",
          "select count ( distinct name ) from movietheaters",
          "select count ( distinct name ) from movietheaters",
          "select count ( distinct name ) from movietheaters",
          "select count ( distinct name ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1819,
      "db_id": "movie_2",
      "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
      "infer_predictions": [
        [
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where title like '%CITIZEN%'",
          "select rating from movies where title like '%CITizen%'",
          "select rating from movies where title like '%Citizen%'"
        ]
      ]
    },
    {
      "id": 1820,
      "db_id": "movie_2",
      "gold": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
      "infer_predictions": [
        [
          "select rating from movies where title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' != '%Citizen%'",
          "select rating from movies where title like '%Citizen%' or title like '%Citizen%'",
          "select rating from movies where title like '%Citizen%' != 'Citizen%'",
          "select rating from movies where title like '%Citizen%' - '%Citizen%'",
          "select rating from movies where title like '%CITizen%'"
        ]
      ]
    },
    {
      "id": 1821,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
      "infer_predictions": [
        [
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select distinct movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'",
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'PG' or movies.rating = 'G'"
        ]
      ]
    },
    {
      "id": 1822,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G' or movies.rating = 'PG'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'",
          "select distinct movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G' or movies.rating = 'PG'"
        ]
      ]
    },
    {
      "id": 1823,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select distinct movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select distinct movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperialist'"
        ]
      ]
    },
    {
      "id": 1824,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperialist'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'ODEON' or movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' or movietheaters.name = 'Imperium'"
        ]
      ]
    },
    {
      "id": 1825,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' intersect select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperialist'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperium'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Empire'"
        ]
      ]
    },
    {
      "id": 1826,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
      "infer_predictions": [
        [
          "select movie from movietheaters where name = 'Odeon' intersect select movie from movietheaters where name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' intersect select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Imperial'",
          "select movie from movietheaters where name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'",
          "select movie from movietheaters where name = 'Odeon' intersect select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Imperial'",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperialist'",
          "select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon' intersect select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Imperial'"
        ]
      ]
    },
    {
      "id": 1827,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select distinct title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select title from movies except select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select distinct title from movies except select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where name = 'Odeon'"
        ]
      ]
    },
    {
      "id": 1828,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
      "infer_predictions": [
        [
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select title from movies except select movies.title from movietheaters join movies on movietheaters.movie = movies.code where movietheaters.name = 'Odeon'",
          "select distinct title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'Odeon'",
          "select title from movies where code not in ( select movie from movietheaters where name = 'Odeon' )",
          "select title from movies except select movies.title from movies join movietheaters on movies.code = movietheaters.movie where movietheaters.name = 'The Odeon'"
        ]
      ]
    },
    {
      "id": 1829,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY title",
      "infer_predictions": [
        [
          "select title from movies order by title asc",
          "select distinct title from movies order by title asc",
          "Select title from movies order by title asc"
        ]
      ]
    },
    {
      "id": 1830,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY title",
      "infer_predictions": [
        [
          "select title from movies order by title asc",
          "select distinct title from movies order by title asc",
          "Select title from movies order by title asc"
        ]
      ]
    },
    {
      "id": 1831,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY rating",
      "infer_predictions": [
        [
          "select title from movies order by rating asc",
          "Select title from movies order by rating asc"
        ]
      ]
    },
    {
      "id": 1832,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies ORDER BY rating",
      "infer_predictions": [
        [
          "select title from movies order by rating asc",
          "select distinct title from movies order by rating asc",
          "Select title from movies order by rating asc"
        ]
      ]
    },
    {
      "id": 1833,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from movietheaters group by name order by count ( * ) desc limit 1",
          "select name from movietheaters group by code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1834,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from movietheaters group by name order by count ( * ) desc limit 1",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movietheaters.name order by count ( * ) desc limit 1",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movies.code order by count ( * ) desc limit 1",
          "select name from movietheaters group by code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1835,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movietheaters.name order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movietheaters.name order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.title order by count ( * ) desc limit 1",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movies.title order by count ( * ) desc limit 1",
          "select movies.title , movies.code from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1836,
      "db_id": "movie_2",
      "gold": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movietheaters.name order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie group by movies.title order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movietheaters.name order by count ( * ) desc limit 1",
          "select movies.title from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1",
          "select movies.title , movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code group by movies.title order by count ( * ) desc limit 1",
          "select movies.title , movies.code from movies join movietheaters on movies.code = movietheaters.movie group by movies.code order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1837,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
      "infer_predictions": [
        [
          "select count ( * ) , rating from movies group by rating",
          "select rating , count ( * ) from movies group by rating",
          "select count ( * ) , rating from movies group by rating"
        ]
      ]
    },
    {
      "id": 1838,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
      "infer_predictions": [
        [
          "select rating , count ( * ) from movies group by rating",
          "select count ( * ) , rating from movies group by rating",
          "select rating , count ( * ) from movies group by rating",
          "select count ( * ) , rating from movies group by rating"
        ]
      ]
    },
    {
      "id": 1839,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating > 'null'",
          "select count ( * ) from movies where rating + 'null'",
          "select count ( * ) from movies where rating = 'null'"
        ]
      ]
    },
    {
      "id": 1840,
      "db_id": "movie_2",
      "gold": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
      "infer_predictions": [
        [
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating > 'null'",
          "select count ( * ) from movies where rating",
          "select count ( * ) from movies where rating != 'null'",
          "select count ( * ) from movies where rating >= 'null'",
          "select count ( * ) from movies where rating = 'null'",
          "select count ( distinct title ) from movies where rating != 'null'"
        ]
      ]
    },
    {
      "id": 1841,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select distinct name from movietheaters",
          "select name from movietheaters",
          "select name from movietheaters group by name having count ( * ) >= 1",
          "select distinct ( name ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1842,
      "db_id": "movie_2",
      "gold": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select name from movietheaters",
          "select distinct name from movietheaters",
          "select name from movietheaters group by name having count ( * ) >= 1",
          "select name from movietheaters where movie = 1",
          "select count ( * ) from movietheaters"
        ]
      ]
    },
    {
      "id": 1843,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
      "infer_predictions": [
        [
          "select name from movietheaters where code not in ( select code from movietheaters )",
          "select name from movietheaters where code not in ( select movie from movietheaters )",
          "select name from movietheaters where movie not in ( select movie from movietheaters )",
          "select name from movietheaters where code not in ( select code from movies )"
        ]
      ]
    },
    {
      "id": 1844,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
      "infer_predictions": [
        [
          "select name from movietheaters where code not in ( select code from movietheaters )",
          "select name from movietheaters where code not in ( select movie from movietheaters )",
          "select name from movietheaters where code not in ( select code from movies )",
          "select name from movietheaters where movie not in ( select movie from movietheaters )"
        ]
      ]
    },
    {
      "id": 1845,
      "db_id": "movie_2",
      "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
      "infer_predictions": [
        [
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'",
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select distinct movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'"
        ]
      ]
    },
    {
      "id": 1846,
      "db_id": "movie_2",
      "gold": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
      "infer_predictions": [
        [
          "select movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'",
          "select distinct movietheaters.name from movies join movietheaters on movies.code = movietheaters.movie where movies.rating = 'G'",
          "select distinct movietheaters.name from movietheaters join movies on movietheaters.movie = movies.code where movies.rating = 'G'"
        ]
      ]
    },
    {
      "id": 1847,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies",
      "infer_predictions": [
        [
          "select title from movies",
          "select title from movies",
          "select distinct title from movies",
          "select title from movies"
        ]
      ]
    },
    {
      "id": 1848,
      "db_id": "movie_2",
      "gold": "SELECT title FROM movies",
      "infer_predictions": [
        [
          "select title from movies",
          "select distinct title from movies",
          "select distinct ( title ) from movies",
          "select sum ( title ) from movies",
          "select distinct title from movies",
          "select distinct title from movies"
        ]
      ]
    },
    {
      "id": 1849,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT rating FROM movies",
      "infer_predictions": [
        [
          "select distinct rating from movies",
          "select distinct ( rating ) from movies",
          "select distinct rating from movies"
        ]
      ]
    },
    {
      "id": 1850,
      "db_id": "movie_2",
      "gold": "SELECT DISTINCT rating FROM movies",
      "infer_predictions": [
        [
          "select distinct rating from movies",
          "select count ( distinct rating ) from movies",
          "select distinct ( rating ) from movies",
          "select distinct rating from movies"
        ]
      ]
    },
    {
      "id": 1851,
      "db_id": "movie_2",
      "gold": "SELECT * FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select * from movies where rating = 'null'",
          "select * from movies where rating = 'unrated'",
          "select * from movies where rating = 'N/A'",
          "select * from movies where rating = 'Unrated'",
          "select * from movies where rating = 'No'",
          "select * from movies where rating = 'N'",
          "select * from movies where rating = 'UNRATED'",
          "select * from movies where rating = '0'"
        ]
      ]
    },
    {
      "id": 1852,
      "db_id": "movie_2",
      "gold": "SELECT * FROM movies WHERE rating  =  'null'",
      "infer_predictions": [
        [
          "select * from movies where rating = 'null'",
          "select * from movies where rating = 'unrated'",
          "select * from movies where rating = 'Unrated'",
          "select * from movies where rating = 'N/A'",
          "select * from movies where rating = 'UNRATED'",
          "select * from movies where rating = 'No'",
          "select * from movies where rating = '0'",
          "select * from movies where rating = 'N'"
        ]
      ]
    },
    {
      "id": 1853,
      "db_id": "movie_2",
      "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters )",
          "select title from movies where code not in ( select movietheaters.movie from movietheaters join movies on movietheaters.movie = movies.code )"
        ]
      ]
    },
    {
      "id": 1854,
      "db_id": "movie_2",
      "gold": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
      "infer_predictions": [
        [
          "select title from movies where code not in ( select movie from movietheaters )"
        ]
      ]
    },
    {
      "id": 1855,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
      "infer_predictions": [
        [
          "select recipient from package order by weight desc limit 1",
          "select recipient from package order by weight asc limit 1"
        ]
      ]
    },
    {
      "id": 1856,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.recipient order by package.weight desc limit 1",
          "select client.name from client join package on client.accountnumber = package.recipient where package.weight = ( select max ( weight ) from package )",
          "select client.name from package join client on package.recipient = client.accountnumber order by package.weight desc limit 1",
          "select client.name from client join package on client.accountnumber = package.recipient order by weight desc limit 1"
        ]
      ]
    },
    {
      "id": 1857,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select sum ( weight ) from package where sender = 'Leo Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'Loo Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'L\u00e9o Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'Leo Wong'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'LEO WONG'",
          "select sum ( weight ) from package join client on package.sender = client.accountnumber where client.name = 'Leo' and recipient = 'Wong'"
        ]
      ]
    },
    {
      "id": 1858,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select sum ( weight ) from package where sender = 'Leo Wong'",
          "select sum ( weight ) from package where sender = 'Loo Wong'",
          "select sum ( weight ) from package where sender = 'L\u00e9o Wong'",
          "select sum ( weight ) from package where sender = 'Leo Wong'",
          "select sum ( weight ) from package where sender = 'LEO WONG'",
          "select sum ( weight ) from package where sender = 'Lo Wong'"
        ]
      ]
    },
    {
      "id": 1859,
      "db_id": "planet_1",
      "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
      "infer_predictions": [
        [
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy' and name = 'Wong'",
          "select position from employee where name = 'Amy' and salary = '$5000'",
          "select position from employee where name = 'Amy' and salary = '6000'",
          "select position from employee where name = 'Amy' and salary = '$2000'"
        ]
      ]
    },
    {
      "id": 1860,
      "db_id": "planet_1",
      "gold": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
      "infer_predictions": [
        [
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy Wong'",
          "select position from employee where name = 'Amy' and name = 'Wong'",
          "select position from employee where name = 'Amy' and employeeid = 1",
          "select position from employee where name = 'Amy' and salary = '$5000'",
          "select position from employee where name = 'Amy' and salary = '$2000'",
          "select position from employee where name = 'Amy' and salary = '6000'"
        ]
      ]
    },
    {
      "id": 1861,
      "db_id": "planet_1",
      "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turlanga Leela'",
          "select salary , position from employee where name = 'Turangal Leela'",
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turranga Leela'",
          "select salary , position from employee where name = 'Turanga'",
          "select salary , position from employee where name = 'Turinga Leela'"
        ]
      ]
    },
    {
      "id": 1862,
      "db_id": "planet_1",
      "gold": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turlanga Leela'",
          "select salary , position from employee where name = 'Turangal Leela'",
          "select salary , position from employee where name = 'Turranga Leela'",
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turanga Leela'",
          "select salary , position from employee where name = 'Turangala Leela'"
        ]
      ]
    },
    {
      "id": 1863,
      "db_id": "planet_1",
      "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
      "infer_predictions": [
        [
          "select avg ( salary ) from employee where position = 'INTERN'",
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'Intern'",
          "select avg ( salary ) from employee where position = 'INTERN'",
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'INTER'",
          "select avg ( salary ) from employee where position = 'INTERN'"
        ]
      ]
    },
    {
      "id": 1864,
      "db_id": "planet_1",
      "gold": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
      "infer_predictions": [
        [
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'INTERN'",
          "select avg ( salary ) from employee where position = 'Intern'",
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'intern'",
          "select avg ( salary ) from employee where position = 'Intern'",
          "select avg ( salary ) from employee where position = 'INTERN'",
          "select avg ( salary ) from employee where position = 'INTERN'"
        ]
      ]
    },
    {
      "id": 1865,
      "db_id": "planet_1",
      "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
      "infer_predictions": [
        [
          "select level from has_clearance where employee = 'Physician'",
          "select level from has_clearance where employee = 1",
          "select level from has_clearance where employee = 'Medicine'"
        ]
      ]
    },
    {
      "id": 1866,
      "db_id": "planet_1",
      "gold": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
      "infer_predictions": [
        [
          "select level from has_clearance where employee = 1",
          "select level from has_clearance where employee = '1'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'DOCTOR'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'Dr.'",
          "select level from has_clearance where employee = 'DOCTOR'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.name = 'MD'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.position = 'DOCTOR'",
          "select level from has_clearance join employee on has_clearance.employee = employee.employeeid where employee.position = 'PROF'"
        ]
      ]
    },
    {
      "id": 1867,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package where sender = 'Leo Wong'",
          "select packagenumber from package where sender = 'L\u00e9o Wong'",
          "select packagenumber from package where sender = 'Leo Wong'",
          "select packagenumber from package where sender = 'Loo Wong'",
          "select packagenumber from package where sender = 'LeoWong'",
          "select packagenumber from package where sender = 'LEO WONG'"
        ]
      ]
    },
    {
      "id": 1868,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
      "infer_predictions": [
        [
          "select count ( * ) from package where sender = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1869,
      "db_id": "planet_1",
      "gold": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select packagenumber from package where recipient = 'Leo Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo' and client.name = 'Wong'"
        ]
      ]
    },
    {
      "id": 1870,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
      "infer_predictions": [
        [
          "select packagenumber from package where recipient = 'Leo Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo' and client.name = 'Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where recipient = 'Leo Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'L\u00e9o Wong'",
          "select packagenumber from package join client on package.recipient = client.accountnumber where client.name = 'Leo' and package.recipient = 'Wong'"
        ]
      ]
    },
    {
      "id": 1871,
      "db_id": "planet_1",
      "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select package.contents from package join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.contents from package join client on package.recipient = client.accountnumber join employee on client.accountnumber = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.contents from package join client on package.sender = client.accountnumber join employee on client.accountnumber = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.shipment from package join client on package.recipient = client.accountnumber join employee on client.accountnumber = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.contents from package join client on package.recipient = client.accountnumber join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.shipment from package join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'",
          "select package.shipment , package.recipient from package join employee on package.sender = employee.employeeid where employee.name = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1872,
      "db_id": "planet_1",
      "gold": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select distinct packagenumber from package where sender = 'Leo Wong' or recipient = 'Leo Wong'",
          "select count ( distinct packagenumber ) from package where sender = 'Leo Wong' or recipient = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1873,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package where sender = 'Ogden' and recipient = 'Leo'",
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'"
        ]
      ]
    },
    {
      "id": 1874,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
      "infer_predictions": [
        [
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package where sender = 'Ogden' and recipient = 'Leo'",
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Leo Wong'",
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'Loo Wong'",
          "select count ( * ) from package where sender = 'Ogden Wernstrom' and recipient = 'L\u00e9o Wong'"
        ]
      ]
    },
    {
      "id": 1875,
      "db_id": "planet_1",
      "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
      "infer_predictions": [
        [
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'John Zoidsfarb'",
          "select contents from package where sender = 'John Z\u00f3idfarb'",
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'John Zaidfarb'",
          "select contents from package where sender = 'John Zoniadfarb'"
        ]
      ]
    },
    {
      "id": 1876,
      "db_id": "planet_1",
      "gold": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
      "infer_predictions": [
        [
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'John Zoidsfarb'",
          "select contents from package where sender = 'John Z\u00f3idfarb'",
          "select contents from package where sender = 'John Zoidfarb'",
          "select contents from package where sender = 'john zoidfarb'",
          "select contents from package where sender = 'John Zaidfarb'"
        ]
      ]
    },
    {
      "id": 1877,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
      "infer_predictions": [
        [
          "select package.packagenumber , package.weight from package join client on package.recipient = client.accountnumber where client.name like '%John%'",
          "select package.packagenumber , package.weight from package join client on package.sender = client.accountnumber where client.name like '%John%'",
          "select max ( package.weight ) from package join client on package.sender = client.accountnumber where client.name like '%John%'",
          "select package.packagenumber , package.weight from client join package on client.accountnumber = package.sender where client.name like '%John%'",
          "select max ( package.weight ) from package join client on package.recipient = client.accountnumber where client.name like '%John%'",
          "select package.packagenumber , package.weight from package join client on package.recipient = client.accountnumber where client.name like '%John%' order by package.weight desc limit 1",
          "select package.packagenumber , package.weight from package join client on package.sender = client.accountnumber where client.name like '%John%' order by package.weight desc limit 1",
          "select max ( package.weight ) from client join package on client.accountnumber = package.sender where client.name like '%John%'"
        ]
      ]
    },
    {
      "id": 1878,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
      "infer_predictions": [
        [
          "select package.packagenumber , package.weight from package join client on package.sender = client.accountnumber where client.name = 'John' order by package.weight desc limit 1",
          "select package.packagenumber , package.weight from client join package on client.accountnumber = package.sender where client.name = 'John' order by package.weight desc limit 1",
          "select max ( package.weight ) from package join client on package.sender = client.accountnumber where client.name = 'John' or client.name like '%John%'",
          "select max ( package.weight ) , package.packagenumber from package join client on package.sender = client.accountnumber where client.name = 'John' or client.name like '%John%'",
          "select max ( package.weight ) from package join client on package.sender = client.accountnumber where client.name = 'John'",
          "select packagenumber , weight from package join client on package.sender = client.accountnumber where client.name = 'John' order by package.weight desc limit 1"
        ]
      ]
    },
    {
      "id": 1879,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight desc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber from package order by weight asc limit 3"
        ]
      ]
    },
    {
      "id": 1880,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3",
          "select packagenumber , weight from package order by weight asc limit 3"
        ]
      ]
    },
    {
      "id": 1881,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.name order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.name order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.recipient = client.accountnumber group by client.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1882,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.name order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.sender group by client.accountnumber order by count ( * ) desc limit 1",
          "select client.name , count ( * ) from package join client on package.sender = client.accountnumber group by client.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1883,
      "db_id": "planet_1",
      "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
      "infer_predictions": [
        [
          "select client.name , count ( * ) from client join package on client.accountnumber = package.recipient group by client.name order by count ( * ) asc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.recipient group by client.accountnumber order by count ( * ) asc limit 1",
          "select client.name , count ( * ) from package join client on package.recipient = client.accountnumber group by client.name order by count ( * ) asc limit 1",
          "select client.name , count ( * ) from package join client on package.recipient = client.accountnumber group by client.accountnumber order by count ( * ) asc limit 1",
          "select client.name , count ( * ) from client join package on client.accountnumber = package.recipient group by package.recipient order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 1884,
      "db_id": "planet_1",
      "gold": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
      "infer_predictions": [
        [
          "select recipient , count ( * ) from package group by recipient order by count ( * ) asc limit 1",
          "select recipient , count ( * ) from package group by recipient order by count ( * ) asc limit 1",
          "select recipient from package group by recipient order by count ( * ) asc limit 1",
          "select count ( * ) , recipient from package group by recipient order by count ( * ) asc limit 1",
          "select recipient , shipment from package group by recipient order by count ( * ) asc limit 1",
          "select min ( shipment ) , recipient from package group by recipient"
        ]
      ]
    },
    {
      "id": 1885,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.sender group by client.accountnumber having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by client.name having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by client.accountnumber having count ( * ) > 1",
          "select client.name from client join package on client.accountnumber = package.sender group by package.sender having count ( * ) > 1",
          "select count ( * ) from ( select client.name from client join package on client.accountnumber = package.sender group by client.accountnumber having count ( * ) > 1 )",
          "select client.name from client join package on client.accountnumber = package.sender group by client.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1886,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
      "infer_predictions": [
        [
          "select client.name from client join package on client.accountnumber = package.sender group by client.accountnumber having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by client.accountnumber having count ( * ) > 1",
          "select client.name from client join package on client.accountnumber = package.sender group by package.sender having count ( * ) > 1",
          "select client.name from client join package on client.accountnumber = package.sender group by accountnumber having count ( * ) > 1",
          "select client.name from client join package on client.accountnumber = package.sender group by client.name having count ( * ) > 1",
          "select client.name from package join client on package.sender = client.accountnumber group by client.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 1887,
      "db_id": "planet_1",
      "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select coordinates from planet where name = 'Mars'",
          "select coordinates from planet where name = 'Marius'",
          "select coordinates from planet where name = 'Mars' != 'Earth'",
          "select coordinates from planet where name = 'Mars' != 'Mars'",
          "select coordinates from planet where name = 'Mas'",
          "select coordinates from planet where name = 'Madagascar'",
          "select coordinates from planet where name = 'Mars' != 'Planetid'"
        ]
      ]
    },
    {
      "id": 1888,
      "db_id": "planet_1",
      "gold": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select coordinates from planet where name = 'Mars'",
          "select coordinates from planet where name = 'Marius'",
          "select coordinates from planet where name = 'Mars' != 'Earth'",
          "select coordinates from planet where name = 'Mas'",
          "select coordinates from planet where name = 'Mars' != 'Coordinates'",
          "select coordinates from planet where name = 'Mars'"
        ]
      ]
    },
    {
      "id": 1889,
      "db_id": "planet_1",
      "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
      "infer_predictions": [
        [
          "select name , coordinates from planet order by name asc",
          "select name and coordinates from planet order by name asc",
          "select name , coordinates from planet order by name asc",
          "Select name , coordinates from planet order by name asc",
          "select name from planet order by name asc"
        ]
      ]
    },
    {
      "id": 1890,
      "db_id": "planet_1",
      "gold": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
      "infer_predictions": [
        [
          "select name , coordinates from planet order by name asc",
          "select name , coordinates from planet order by name asc",
          "select name and coordinates from planet order by name asc",
          "Select name , coordinates from planet order by name asc"
        ]
      ]
    },
    {
      "id": 1891,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where manager = 'Phillip J. Fry'",
          "select shipmentid from shipment where manager = 'Philip J. Fry'",
          "select shipmentid from shipment where manager = 'Phillip J Fry'",
          "select shipmentid from shipment where manager = 'Phillip J.Fry'",
          "select shipmentid from shipment where manager = 'Philip J Fry'",
          "select shipmentid from shipment where manager = 'Phillip JFry'",
          "select shipmentid from shipment where manager = 'Phillip James Fry'",
          "select shipmentid from shipment where manager = 'Phillip Fry'"
        ]
      ]
    },
    {
      "id": 1892,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where manager = 'Phillip J Fry'",
          "select shipment.shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J Fry'",
          "select shipmentid from shipment where manager = 'Phillip J. Fry'",
          "select shipment.shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J Fry'",
          "select shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J Fry'",
          "select shipmentid from shipment where manager = 'Philip J Fry'",
          "select shipment.shipmentid from shipment join employee on shipment.manager = employee.employeeid where employee.name = 'Phillip J. Fry'",
          "select shipment.shipmentid from employee join shipment on employee.employeeid = shipment.manager where employee.name = 'Phillip J. Fry'"
        ]
      ]
    },
    {
      "id": 1893,
      "db_id": "planet_1",
      "gold": "SELECT Date FROM Shipment;",
      "infer_predictions": [
        [
          "select date from shipment"
        ]
      ]
    },
    {
      "id": 1894,
      "db_id": "planet_1",
      "gold": "SELECT Date FROM Shipment;",
      "infer_predictions": [
        [
          "select date from shipment"
        ]
      ]
    },
    {
      "id": 1895,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars'",
          "select shipmentid from shipment where planet = 'Madrid'",
          "select shipmentid from shipment where planet = 'Mas'",
          "select shipmentid from shipment where planet = 'Madagascar'",
          "select shipmentid from shipment where planet = 'Maer'"
        ]
      ]
    },
    {
      "id": 1896,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars'",
          "select shipment.shipmentid from shipment join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select shipmentid from shipment where planet = 'Madrid'",
          "select shipmentid from shipment where planet = 'Mas'",
          "select shipmentid from shipment where planet = 'Madagascar'",
          "select shipmentid from shipment where planet = 'Mars' != 'Earth'"
        ]
      ]
    },
    {
      "id": 1897,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where manager = 'Turanga Leela' and planet = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Merlin' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turlanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turangalelela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turranga Leela'"
        ]
      ]
    },
    {
      "id": 1898,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where manager = 'Turanga Leela' and planet = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turlanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turranga Leela'",
          "select shipmentid from shipment where planet = 'Madrid' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turangal Leela'",
          "select shipmentid from shipment where planet = 'Mas' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'"
        ]
      ]
    },
    {
      "id": 1899,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' or manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turranga Leela'",
          "select shipmentid from shipment where planet = 'Merlin' union select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turangalelela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turlanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' union select shipmentid from shipment where manager = 'Turangal Leela'"
        ]
      ]
    },
    {
      "id": 1900,
      "db_id": "planet_1",
      "gold": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
      "infer_predictions": [
        [
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where manager = 'Turanga Leela' and planet = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turlanga Leela'",
          "select shipmentid from shipment where manager = 'Turlanga Leela' and planet = 'Mars'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turranga Leela'",
          "select shipmentid from shipment where planet = 'Mas' and manager = 'Turanga Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turangal Leela'",
          "select shipmentid from shipment where planet = 'Mars' and manager = 'Turangalelela'"
        ]
      ]
    },
    {
      "id": 1901,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
      "infer_predictions": [
        [
          "select planet.name , count ( * ) from planet join shipment on planet.planetid = shipment.planet group by shipment.planet",
          "select planet.name , count ( * ) from planet join shipment on planet.planetid = shipment.planet group by planet.planetid",
          "select planet.name , sum ( shipment.shipmentid ) from shipment join planet on shipment.planet = planet.planetid group by shipment.planet"
        ]
      ]
    },
    {
      "id": 1902,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
      "infer_predictions": [
        [
          "select planet.name , count ( * ) from shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select planet.name , count ( * ) from planet join shipment on planet.planetid = shipment.planet group by planet.name",
          "select count ( * ) , planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select count ( * ) , planet.name from planet join shipment on planet.planetid = shipment.planet group by planet.name",
          "select planet.name , count ( * ) from planet join shipment on planet.planetid = shipment.planet group by planet.planetid"
        ]
      ]
    },
    {
      "id": 1903,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.planetid order by count ( * ) desc limit 1",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1904,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
      "infer_predictions": [
        [
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from planet join shipment on planet.planetid = shipment.planet group by shipment.planet order by count ( * ) desc limit 1",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.planetid order by count ( * ) desc limit 1",
          "select planet.name from shipment join planet on shipment.planet = planet.planetid group by planet.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1905,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
      "infer_predictions": [
        [
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by manager",
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by employee.employeeid",
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by manager",
          "select employee.name , count ( * ) from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager"
        ]
      ]
    },
    {
      "id": 1906,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
      "infer_predictions": [
        [
          "select count ( * ) , employee.name from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select count ( * ) , employee.name from shipment join employee on shipment.manager = employee.employeeid group by employee.employeeid",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by employee.employeeid",
          "select employee.name , count ( * ) , shipment.manager from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager",
          "select employee.name , count ( * ) , shipment.manager from shipment join employee on shipment.manager = employee.employeeid group by shipment.manager",
          "select count ( * ) , employee.name from shipment join employee on shipment.manager = employee.employeeid group by manager",
          "select count ( * ) , employee.name from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager",
          "select employee.name , count ( * ) from employee join shipment on employee.employeeid = shipment.manager group by shipment.manager"
        ]
      ]
    },
    {
      "id": 1907,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Madrid'"
        ]
      ]
    },
    {
      "id": 1908,
      "db_id": "planet_1",
      "gold": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Mars'",
          "select sum ( package.weight ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Mars'",
          "select sum ( package.weight ) from shipment join package on shipment.shipmentid = package.shipment where planet = 'Mars'"
        ]
      ]
    },
    {
      "id": 1909,
      "db_id": "planet_1",
      "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
      "infer_predictions": [
        [
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.name",
          "select sum ( package.weight ) , planet.name from shipment join package on shipment.shipmentid = package.shipment join planet on shipment.planet = planet.planetid group by planet.name",
          "select sum ( package.weight ) , planet.name from shipment join planet on shipment.planet = planet.planetid join package on shipment.shipmentid = package.shipment group by planet.name"
        ]
      ]
    },
    {
      "id": 1910,
      "db_id": "planet_1",
      "gold": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
      "infer_predictions": [
        [
          "select sum ( package.weight ) , planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.name"
        ]
      ]
    },
    {
      "id": 1911,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
      "infer_predictions": [
        [
          "select planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.planetid having sum ( package.weight ) > 30",
          "select planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by shipment.planet having sum ( package.weight ) > 30"
        ]
      ]
    },
    {
      "id": 1912,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
      "infer_predictions": [
        [
          "select planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid group by planet.planetid having sum ( package.weight ) > 30",
          "select planet.name from package join shipment on package.shipment = shipment.shipmentid join planet on planet.planetid = shipment.planet group by planet.planetid having sum ( package.weight ) > 30"
        ]
      ]
    },
    {
      "id": 1913,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Omicron Persei 8' and package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' where planet.name = 'Omicron Persei 8'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' and package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' where planet.name = 'Omicron Persei 8' and shipment.manager = 'Zapp'"
        ]
      ]
    },
    {
      "id": 1914,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid where package.sender = 'Zapp Brannigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where package.sender = 'Zapp Brannigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid where package.sender = 'Zapp' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid where package.sender = 'Zapp Branigan' and shipment.planet = 'Omicron Persei 8'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' and shipment.shipmentid = 'Omicron Persei 8'"
        ]
      ]
    },
    {
      "id": 1915,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' or shipment.planet = 'Omicron Persei 8'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Omicron Persei 8' union select packagenumber from package where sender = 'Zapp Brannigan'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid and package.sender = 'Zapp Brannigan' or planet.name = 'Omicron Persei 8'",
          "select packagenumber from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or sender = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1916,
      "db_id": "planet_1",
      "gold": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
      "infer_predictions": [
        [
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from shipment join package on shipment.shipmentid = package.shipment where shipment.planet = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from shipment join package on shipment.shipmentid = package.shipment join planet on shipment.planet = planet.planetid where planet.name = 'Omicron Persei 8' or package.sender = 'Zapp Brannigan'",
          "select count ( * ) from package join shipment on package.shipment = shipment.shipmentid where shipment.planet = 'Omicron Persei 8' union select package.shipment from package join shipment on package.shipment = shipment.shipmentid where package.sender = 'Zapp Brannigan'"
        ]
      ]
    },
    {
      "id": 1917,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber from package where weight between 10 and 30",
          "select packagenumber and weight from package where weight between 10 and 30"
        ]
      ]
    },
    {
      "id": 1918,
      "db_id": "planet_1",
      "gold": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
      "infer_predictions": [
        [
          "select packagenumber , weight from package where weight between 10 and 30",
          "select packagenumber , weight from package where weight between 10 and 30"
        ]
      ]
    },
    {
      "id": 1919,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 4 and has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 4",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 3 and has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 2 and has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 1 and has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on planet.planetid = has_clearance.planet where has_clearance.planet = 'Mars'"
        ]
      ]
    },
    {
      "id": 1920,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
      "infer_predictions": [
        [
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where planet.name = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.planet = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on planet.planetid = has_clearance.planet where planet.name = 'Mars'",
          "select name from employee except select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Mars'"
        ]
      ]
    },
    {
      "id": 1921,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
      "infer_predictions": [
        [
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'Omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 3",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'Omega 3'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'Alpha III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'Omega-3'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.level = 'Omega'"
        ]
      ]
    },
    {
      "id": 1922,
      "db_id": "planet_1",
      "gold": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
      "infer_predictions": [
        [
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 3",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Alpha III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Omicron III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Omega-3'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on has_clearance.planet = planet.planetid where has_clearance.level = 'Omega III'",
          "select employee.name from employee join has_clearance on employee.employeeid = has_clearance.employee where has_clearance.planet = 'Omega 3'"
        ]
      ]
    },
    {
      "id": 1923,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from planet join has_clearance on planet.planetid = has_clearance.planet group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid group by planet.planetid having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1924,
      "db_id": "planet_1",
      "gold": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
      "infer_predictions": [
        [
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid join employee on has_clearance.employee = employee.employeeid group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid join employee on has_clearance.employee = employee.employeeid group by planet.planetid having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid join employee on has_clearance.employee = employee.employeeid where has_clearance.level = 1 group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from has_clearance join employee on has_clearance.employee = employee.employeeid join planet on has_clearance.planet = planet.planetid group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from planet join has_clearance on planet.planetid = has_clearance.planet join employee on has_clearance.employee = employee.employeeid group by has_clearance.planet having count ( * ) = 1",
          "select planet.name from has_clearance join planet on has_clearance.planet = planet.planetid join employee on has_clearance.employee = employee.employeeid where has_clearance.level = 1 group by planet.planetid having count ( * ) = 1",
          "select planet.name from employee join has_clearance on employee.employeeid = has_clearance.employee join planet on planet.planetid = has_clearance.planet group by has_clearance.planet having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 1925,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
      "infer_predictions": [
        [
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 50000 and 10000",
          "select name from employee where salary between 500 and 10000",
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 5500 and 10000",
          "select name from employee where salary between 5000 and 10000"
        ]
      ]
    },
    {
      "id": 1926,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
      "infer_predictions": [
        [
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 50000 and 10000",
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 500 and 10000",
          "select name from employee where salary between 5000 and 10000",
          "select name from employee where salary between 5000 and 10000"
        ]
      ]
    },
    {
      "id": 1927,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
      "infer_predictions": [
        [
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select max ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select max ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select avg ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000"
        ]
      ]
    },
    {
      "id": 1928,
      "db_id": "planet_1",
      "gold": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
      "infer_predictions": [
        [
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select max ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select max ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > ( select avg ( salary ) from employee )",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000",
          "select name from employee where salary > ( select avg ( salary ) from employee ) or salary > 5000"
        ]
      ]
    },
    {
      "id": 1929,
      "db_id": "planet_1",
      "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
      "infer_predictions": [
        [
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employeeid from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Madrid' )"
        ]
      ]
    },
    {
      "id": 1930,
      "db_id": "planet_1",
      "gold": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
      "infer_predictions": [
        [
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employeeid from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Mars' )",
          "select count ( * ) from employee where employeeid not in ( select employee from has_clearance where planet = 'Madrid' )"
        ]
      ]
    },
    {
      "id": 1931,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM game",
      "infer_predictions": [
        [
          "select count ( * ) from game",
          "select count ( * ) from game",
          "select count ( * ) from game",
          "select count ( * ) from game"
        ]
      ]
    },
    {
      "id": 1932,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM game",
      "infer_predictions": [
        [
          "select count ( * ) from game"
        ]
      ]
    },
    {
      "id": 1933,
      "db_id": "video_game",
      "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
      "infer_predictions": [
        [
          "select title , developers from game order by units_sold_millions desc",
          "select title , developers from game order by units_sold_millions asc",
          "select title , developers from game order by units_sold_millions desc",
          "select title , developers from game order by units_sold_millions desc"
        ]
      ]
    },
    {
      "id": 1934,
      "db_id": "video_game",
      "gold": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
      "infer_predictions": [
        [
          "select title , developers from game order by units_sold_millions desc",
          "select title , developers from game order by units_sold_millions desc"
        ]
      ]
    },
    {
      "id": 1935,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'",
          "select avg ( units_sold_millions ) from game where developers not in ( select developers from game where developers = 'Nintendo' )",
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'"
        ]
      ]
    },
    {
      "id": 1936,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
      "infer_predictions": [
        [
          "select avg ( units_sold_millions ) from game where developers not in ( select developers from game where developers = 'Nintendo' )",
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'",
          "select avg ( units_sold_millions ) from game where developers != 'Nintendo'"
        ]
      ]
    },
    {
      "id": 1937,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Market_district FROM platform",
      "infer_predictions": [
        [
          "select platform_name , market_district from platform"
        ]
      ]
    },
    {
      "id": 1938,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Market_district FROM platform",
      "infer_predictions": [
        [
          "select platform_name , market_district from platform",
          "select platform_name , market_district from platform",
          "select platform_name , market_District from platform",
          "select platform_name , market_district from platform"
        ]
      ]
    },
    {
      "id": 1939,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
      "infer_predictions": [
        [
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform.platform_name , platform.platform_id from platform join game on platform.platform_id = game.platform_id where platform.download_rank = 1"
        ]
      ]
    },
    {
      "id": 1940,
      "db_id": "video_game",
      "gold": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
      "infer_predictions": [
        [
          "select platform_name , platform_id from platform where download_rank = 1",
          "select platform.platform_name , platform.platform_id from platform join game on platform.platform_id = game.platform_id where platform.download_rank = 1"
        ]
      ]
    },
    {
      "id": 1941,
      "db_id": "video_game",
      "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
      "infer_predictions": [
        [
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player",
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player"
        ]
      ]
    },
    {
      "id": 1942,
      "db_id": "video_game",
      "gold": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
      "infer_predictions": [
        [
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player",
          "select max ( rank_of_the_year ) , min ( rank_of_the_year ) from player"
        ]
      ]
    },
    {
      "id": 1943,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
      "infer_predictions": [
        [
          "select count ( * ) from player where rank_of_the_year < 3",
          "select count ( * ) from player where rank_of_the_year <= 3",
          "select count ( * ) from player where rank_of_the_year < 3",
          "select count ( * ) from player where rank_of_the_year <3"
        ]
      ]
    },
    {
      "id": 1944,
      "db_id": "video_game",
      "gold": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
      "infer_predictions": [
        [
          "select count ( * ) from player where rank_of_the_year <= 3",
          "select count ( * ) from player where rank_of_the_year <= 3 group by player_id having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year <= 3 group by player.player_id having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year <= 3 group by rank_of_the_year having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year < 3 group by player_id having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year < 3 group by rank_of_the_year having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year < 3 group by player.player_id having count ( * ) <= 3",
          "select count ( * ) from player where rank_of_the_year <= 3 order by rank_of_the_year asc limit 3"
        ]
      ]
    },
    {
      "id": 1945,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
      "infer_predictions": [
        [
          "select player_name from player order by player_name asc",
          "select distinct player_name from player order by player_name asc",
          "Select player_name from player order by player_name asc",
          "select player_name from player order by player_name asc"
        ]
      ]
    },
    {
      "id": 1946,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player ORDER BY Player_name ASC",
      "infer_predictions": [
        [
          "select player_name from player order by player_name asc",
          "select distinct player_name from player order by player_name asc",
          "Select player_name from player order by player_name asc",
          "select player_name from player order by player_name asc"
        ]
      ]
    },
    {
      "id": 1947,
      "db_id": "video_game",
      "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
      "infer_predictions": [
        [
          "select player_name , college from player order by rank_of_the_year desc",
          "select player.player_name , college from player join game_player on player.player_id = game_player.player_id order by rank_of_the_year desc",
          "select player.player_name , college from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id order by rank_of_the_year desc",
          "select player.player_name , college from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game_player.game_id order by rank_of_the_year desc"
        ]
      ]
    },
    {
      "id": 1948,
      "db_id": "video_game",
      "gold": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
      "infer_predictions": [
        [
          "select player_name , college from player order by rank_of_the_year desc",
          "select player.player_name , college from player order by rank_of_the_year desc",
          "select player_name , college from player order by rank_of_the_year desc"
        ]
      ]
    },
    {
      "id": 1949,
      "db_id": "video_game",
      "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
      "infer_predictions": [
        [
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where game.title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1950,
      "db_id": "video_game",
      "gold": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
      "infer_predictions": [
        [
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where game.title = 'Super Mario World'",
          "select player.player_name , player.rank_of_the_year from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id and game.title = 'Super Mario World'"
        ]
      ]
    },
    {
      "id": 1951,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select distinct game.developers from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on player.player_id = game_player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from player join game_player on player.player_id = game_player.player_id join game on game.game_id = game_player.game_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1952,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select distinct game.developers from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select distinct game.developers from game_player join game on game_player.game_id = game.game_id join player on player.player_id = game_player.player_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1953,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'"
        ]
      ]
    },
    {
      "id": 1954,
      "db_id": "video_game",
      "gold": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select avg ( game.units_sold_millions ) from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'",
          "select avg ( game.units_sold_millions ) from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'"
        ]
      ]
    },
    {
      "id": 1955,
      "db_id": "video_game",
      "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
      "infer_predictions": [
        [
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from platform join game on platform.platform_id = game.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id != game.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id and game.title = game.title"
        ]
      ]
    },
    {
      "id": 1956,
      "db_id": "video_game",
      "gold": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
      "infer_predictions": [
        [
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id",
          "select game.title , platform.platform_name from platform join game on platform.platform_id = game.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id where game.franchise = 'Unlimited'",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id != game.platform_id",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id and game.title = game.title",
          "select game.title , platform.platform_name from game join platform on game.platform_id = platform.platform_id where game.franchise = 1"
        ]
      ]
    },
    {
      "id": 1957,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
      "infer_predictions": [
        [
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from platform join game on platform.platform_id = game.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select game.title from platform join game on platform.platform_id = game.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'North America'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'APAC' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'ASIA' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia/USA' or platform.market_district = 'Europe'"
        ]
      ]
    },
    {
      "id": 1958,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
      "infer_predictions": [
        [
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from platform join game on platform.platform_id = game.platform_id where platform.market_district = 'Asia' or platform.market_district = 'USA'",
          "select game.title from platform join game on platform.platform_id = game.platform_id where platform.market_district = 'Asia' or platform.market_district = 'United States'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'North America'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'APAC' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'ASIA' or platform.market_district = 'USA'",
          "select game.title from game join platform on game.platform_id = platform.platform_id where platform.market_district = 'Asia' or platform.market_district = 'US'"
        ]
      ]
    },
    {
      "id": 1959,
      "db_id": "video_game",
      "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
      "infer_predictions": [
        [
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by Franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise"
        ]
      ]
    },
    {
      "id": 1960,
      "db_id": "video_game",
      "gold": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
      "infer_predictions": [
        [
          "select franchise , count ( * ) from game group by franchise",
          "select count ( * ) , franchise from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by Franchise",
          "select count ( * ) , franchise from game group by franchise",
          "select franchise , count ( * ) from game group by franchise",
          "select franchise , count ( * ) from game group by franchise"
        ]
      ]
    },
    {
      "id": 1961,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( *) desc limit 1"
        ]
      ]
    },
    {
      "id": 1962,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1",
          "select franchise from game group by franchise order by count ( *) desc limit 1",
          "select franchise from game group by franchise order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 1963,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( *) >= 2"
        ]
      ]
    },
    {
      "id": 1964,
      "db_id": "video_game",
      "gold": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
      "infer_predictions": [
        [
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >= 2",
          "select franchise from game group by franchise having count ( * ) >=2",
          "select franchise from game group by franchise having count ( * )>= 2"
        ]
      ]
    },
    {
      "id": 1965,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
      "infer_predictions": [
        [
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_Id not in ( select player_id from game_player )"
        ]
      ]
    },
    {
      "id": 1966,
      "db_id": "video_game",
      "gold": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
      "infer_predictions": [
        [
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player except select player.player_name from game_player join player on game_player.player_id = player.player_id",
          "select player_name from player except select player.player_name from player join game_player on player.player_id = game_player.player_id",
          "select player_name from player where player_id not in ( select player_id from game_player )",
          "select player_name from player where player_Id not in ( select player_id from game_player )"
        ]
      ]
    },
    {
      "id": 1967,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' intersect select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' intersect select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' intersect select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id and player.player_id = player.player_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' intersect select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' intersect select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' intersect select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id and player.player_id = game_player.player_id where player.college = 'Auburn'",
          "select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' intersect select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1968,
      "db_id": "video_game",
      "gold": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
      "infer_predictions": [
        [
          "select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' or player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' or player.college = 'Auburn'",
          "select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' union select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' union select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Auburn'",
          "select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' or player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' union select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id and player.player_id = player.player_id where player.college = 'Auburn'",
          "select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.college = 'Oklahoma' union select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'",
          "select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Oklahoma' union select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.college = 'Auburn'"
        ]
      ]
    },
    {
      "id": 1969,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT Franchise FROM game",
      "infer_predictions": [
        [
          "select distinct franchise from game",
          "select distinct ( franchise ) from game",
          "select distinct franchise from game",
          "select distinct franchise from game"
        ]
      ]
    },
    {
      "id": 1970,
      "db_id": "video_game",
      "gold": "SELECT DISTINCT Franchise FROM game",
      "infer_predictions": [
        [
          "select distinct franchise from game",
          "select distinct ( franchise ) from game",
          "select distinct franchise from game",
          "select distinct ( franchise ) from game"
        ]
      ]
    },
    {
      "id": 1971,
      "db_id": "video_game",
      "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'",
          "select title from game except select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select title from game except select game.title from player join game_player on player.player_id = game_player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Gard'",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game.game_id = game_player.game_id where player.position = 'Guard'",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Gardner'"
        ]
      ]
    },
    {
      "id": 1972,
      "db_id": "video_game",
      "gold": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
      "infer_predictions": [
        [
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guard'",
          "select title from game except select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guard'",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where player.position = 'Guard' )",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Guardian'",
          "select title from game except select game.title from game_player join game on game_player.game_id = game.game_id join player on game_player.player_id = player.player_id where player.position = 'Guardian'",
          "select title from game where game_id not in ( select game_id from game_player join player on game_player.player_id = player.player_id where position = 'Guard' )",
          "select title from game except select game.title from game_player join player on game_player.player_id = player.player_id join game on game_player.game_id = game.game_id where player.position = 'Gard'"
        ]
      ]
    },
    {
      "id": 1973,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
      "infer_predictions": [
        [
          "select name from press order by year_profits_billion desc",
          "select name from press order by year_profits_billion desc",
          "select name from press order by year_profits_billion desc"
        ]
      ]
    },
    {
      "id": 1974,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
      "infer_predictions": [
        [
          "select name from press order by year_profits_billion desc"
        ]
      ]
    },
    {
      "id": 1975,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
      "infer_predictions": [
        [
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1",
          "select name from press where year_profits_billion > 15 and month_profits_billion > 1",
          "select name from press where month_profits_billion > 1 or year_profits_billion > 15",
          "select name from press where year_profits_billion > 15 or month_profits_billion = 1",
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1000",
          "select name from press where year_profits_billion = 15 or month_profits_billion = 1"
        ]
      ]
    },
    {
      "id": 1976,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
      "infer_predictions": [
        [
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1",
          "select name from press where year_profits_billion > 15 and month_profits_billion > 1",
          "select name from press where year_profits_billion > 15 or month_profits_billion > 1000"
        ]
      ]
    },
    {
      "id": 1977,
      "db_id": "book_press",
      "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
      "infer_predictions": [
        [
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion) from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press",
          "select avg ( year_profits_billion) , max ( year_profits_billion ) from press",
          "select avg ( year_profits_billion ) and max ( year_profits_billion ) from press"
        ]
      ]
    },
    {
      "id": 1978,
      "db_id": "book_press",
      "gold": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
      "infer_predictions": [
        [
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) , name from press group by name",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) , name from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press",
          "select name , avg ( year_profits_billion ) , max ( year_profits_billion ) from press group by name",
          "select avg ( year_profits_billion ) , max ( year_profits_billion) from press",
          "select avg ( year_profits_billion ) , max ( year_profits_billion ) from press"
        ]
      ]
    },
    {
      "id": 1979,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1"
        ]
      ]
    },
    {
      "id": 1980,
      "db_id": "book_press",
      "gold": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1"
        ]
      ]
    },
    {
      "id": 1981,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1"
        ]
      ]
    },
    {
      "id": 1982,
      "db_id": "book_press",
      "gold": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
      "infer_predictions": [
        [
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1",
          "select name from press order by month_profits_billion desc limit 1"
        ]
      ]
    },
    {
      "id": 1983,
      "db_id": "book_press",
      "gold": "SELECT count(*) FROM author WHERE age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from author where age < 30",
          "select count ( * ) from author where age <= 30",
          "select count ( * ) from author where age < 30"
        ]
      ]
    },
    {
      "id": 1984,
      "db_id": "book_press",
      "gold": "SELECT count(*) FROM author WHERE age  <  30",
      "infer_predictions": [
        [
          "select count ( * ) from author where age < 30",
          "select count ( * ) from author where age <= 30",
          "select count ( * ) from author where age < 30"
        ]
      ]
    },
    {
      "id": 1985,
      "db_id": "book_press",
      "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
      "infer_predictions": [
        [
          "select avg ( age ) , gender from author group by gender",
          "select avg ( age ) , gender from author group by gender",
          "select gender , avg ( age ) from author group by gender",
          "select avg ( age ) , gender from author group by gender",
          "select gender , avg ( age ) from author group by gender",
          "select gender , avg ( age ) from author group by gender",
          "select avg ( age )  , gender from author group by gender"
        ]
      ]
    },
    {
      "id": 1986,
      "db_id": "book_press",
      "gold": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
      "infer_predictions": [
        [
          "select gender , avg ( age ) from author group by gender",
          "select gender , age , avg ( age ) from author group by gender",
          "select gender , avg ( age ) from author group by gender",
          "select gender , avg ( age ) from author group by gender",
          "select avg ( age ) , gender from author group by gender",
          "select gender , avg (+ age ) from author group by gender",
          "select gender , avg (10 ) from author group by gender"
        ]
      ]
    },
    {
      "id": 1987,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
      "infer_predictions": [
        [
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age >30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender"
        ]
      ]
    },
    {
      "id": 1988,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
      "infer_predictions": [
        [
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age >30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender",
          "select gender , count ( * ) from author where age > 30 group by gender",
          "select count ( * ) , gender from author where age > 30 group by gender"
        ]
      ]
    },
    {
      "id": 1989,
      "db_id": "book_press",
      "gold": "SELECT title FROM book ORDER BY release_date DESC",
      "infer_predictions": [
        [
          "select title from book order by release_date desc",
          "select title from book order by release_date desc",
          "select title from book order by release_date desc"
        ]
      ]
    },
    {
      "id": 1990,
      "db_id": "book_press",
      "gold": "SELECT title FROM book ORDER BY release_date DESC",
      "infer_predictions": [
        [
          "select title from book order by release_date desc",
          "select title from book order by release_date desc",
          "select title from book order by release_date desc"
        ]
      ]
    },
    {
      "id": 1991,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
      "infer_predictions": [
        [
          "select book_series , count ( * ) from book group by book_series",
          "select count ( * ) , book_series from book group by book_series",
          "select book_Series , count ( * ) from book group by book_series",
          "select book_Series , count ( * ) from book group by book_Series"
        ]
      ]
    },
    {
      "id": 1992,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
      "infer_predictions": [
        [
          "select count ( * ) , book_series from book group by book_series",
          "select book_series , count ( * ) from book group by book_series"
        ]
      ]
    },
    {
      "id": 1993,
      "db_id": "book_press",
      "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
      "infer_predictions": [
        [
          "select title , release_date from book order by sale_amount desc limit 5"
        ]
      ]
    },
    {
      "id": 1994,
      "db_id": "book_press",
      "gold": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
      "infer_predictions": [
        [
          "select title , release_date from book order by sale_amount desc limit 5",
          "select title , release_date from book order by sale_amount asc limit 5"
        ]
      ]
    },
    {
      "id": 1995,
      "db_id": "book_press",
      "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
      "infer_predictions": [
        [
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount <= 500"
        ]
      ]
    },
    {
      "id": 1996,
      "db_id": "book_press",
      "gold": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
      "infer_predictions": [
        [
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount < 500",
          "select book_series from book where sale_amount > 1000 intersect select book_series from book where sale_amount <= 500"
        ]
      ]
    },
    {
      "id": 1997,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'",
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'",
          "select author.name from book join author on book.author_id = author.author_id where book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book_series = 'LT'"
        ]
      ]
    },
    {
      "id": 1998,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'",
          "select author.name from book join author on book.author_id = author.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from author join book on author.author_id = book.author_id where book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'LT' intersect select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM'",
          "select author.name from book join author on book.author_id = author.author_id where book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book_series = 'LT'",
          "select author.name from author join book on author.author_id = book.author_id where book.book_series = 'MM' intersect select author.name from book join author on book.author_id = author.author_id where book.book_series = 'LT'"
        ]
      ]
    },
    {
      "id": 1999,
      "db_id": "book_press",
      "gold": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
      "infer_predictions": [
        [
          "select name , age from author where author_id not in ( select author_id from book )",
          "select name , age from author except select author.name , author.age from author join book on author.author_id = book.author_id",
          "select name , age from author except select author.name , author.age from book join author on book.author_id = author.author_id",
          "select name , age from author where author_id not in ( select author_id from book )",
          "select name , age from author except select author.name , author.age from author join book on author.author_id = book.author_id"
        ]
      ]
    },
    {
      "id": 2000,
      "db_id": "book_press",
      "gold": "select name from author where author_id not in (select author_id from book)",
      "infer_predictions": [
        [
          "select name from author except select author.name from author join book on author.author_id = book.author_id",
          "select name from author except select author.name from book join author on book.author_id = author.author_id",
          "select name from author where author_id not in ( select author_id from book )",
          "select name from author except select author.name from author join book on author.author_id = book.author_id != book.author_id"
        ]
      ]
    },
    {
      "id": 2001,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.name having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.name having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by book.author_id having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 2002,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.name having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by author.author_id having count ( * ) > 1",
          "select author.name from book join author on book.author_id = author.author_id group by book.author_id having count ( * ) > 1",
          "select author.name from author join book on author.author_id = book.author_id group by author.name having count ( * ) > 1"
        ]
      ]
    },
    {
      "id": 2003,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
      "infer_predictions": [
        [
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.author_id = author.author_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3"
        ]
      ]
    },
    {
      "id": 2004,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
      "infer_predictions": [
        [
          "select book.title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by book.sale_amount desc limit 3",
          "select book.title , author.name , press.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id order by sale_amount desc limit 3"
        ]
      ]
    },
    {
      "id": 2005,
      "db_id": "book_press",
      "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
      "infer_predictions": [
        [
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by book.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by book.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.name"
        ]
      ]
    },
    {
      "id": 2006,
      "db_id": "book_press",
      "gold": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
      "infer_predictions": [
        [
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by book.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.press_id",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by book.press_id",
          "select press.name , sum ( book.sale_amount ) from book join press on book.press_id = press.press_id group by press.name",
          "select press.name , sum ( book.sale_amount ) from press join book on press.press_id = book.press_id group by press.press_id"
        ]
      ]
    },
    {
      "id": 2007,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
      "infer_predictions": [
        [
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select count ( * ) , press.name from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount >1000 group by press.name",
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id group by press.name",
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name"
        ]
      ]
    },
    {
      "id": 2008,
      "db_id": "book_press",
      "gold": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
      "infer_predictions": [
        [
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select count ( * ) , press.name from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name",
          "select press.name , count ( * ) from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.press_id",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.press_id",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount >1000 group by press.name",
          "select press.name , count ( * ) from book join press on book.press_id = press.press_id where book.sale_amount > 1000 group by press.name",
          "select count ( * ) , press.name from press join book on press.press_id = book.press_id where book.sale_amount > 1000 group by press.name"
        ]
      ]
    },
    {
      "id": 2009,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id order by book.sale_amount desc limit 1",
          "select author.name from book join author on book.author_id = author.author_id order by book.sale_amount desc limit 1",
          "select author.name from author join book on author.author_id = book.author_id order by sale_amount desc limit 1",
          "select author.name from author join book on author.author_id = book.author_id where book.sale_amount = ( select max ( sale_amount ) from book )",
          "select author.name from book join author on book.author_id = author.author_id order by sale_amount desc limit 1"
        ]
      ]
    },
    {
      "id": 2010,
      "db_id": "book_press",
      "gold": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name from author join book on author.author_id = book.author_id order by book.sale_amount desc limit 1",
          "select author.name from book join author on book.author_id = author.author_id order by book.sale_amount desc limit 1",
          "select author.name from author join book on author.author_id = book.author_id order by sale_amount desc limit 1",
          "select author.name from book join author on book.author_id = author.author_id order by sale_amount desc limit 1"
        ]
      ]
    },
    {
      "id": 2011,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.name order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by book.author_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2012,
      "db_id": "book_press",
      "gold": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by author.name order by count ( * ) desc limit 1",
          "select author.name , author.gender from book join author on book.author_id = author.author_id group by book.author_id order by count ( * ) desc limit 1",
          "select author.name , author.gender from author join book on author.author_id = book.author_id group by author.name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2013,
      "db_id": "book_press",
      "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
      "infer_predictions": [
        [
          "select name from author except select author.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select name from author except select author.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select name from author except select author.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'ACCOR'",
          "select name from author except select author.name from press join book on press.press_id = book.press_id join author on book.author_id = author.author_id where press.name = 'Accor'",
          "select name from author except select author.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id where press.name = 'ACCOR'"
        ]
      ]
    },
    {
      "id": 2014,
      "db_id": "book_press",
      "gold": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
      "infer_predictions": [
        [
          "select name from author except select author.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select name from author except select author.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select distinct name from author except select author.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select distinct name from author except select author.name from book join author on book.author_id = author.author_id join press on book.press_id = press.press_id where press.name = 'Accor'",
          "select name from author except select author.name from press join book on press.press_id = book.press_id join author on book.author_id = author.author_id where press.name = 'Accor'",
          "select name from author where author_id not in ( select author_id from book join press on book.press_id = press.press_id where press.name = 'Accor' )",
          "select name from author except select author.name from author join book on author.author_id = book.author_id join press on book.press_id = press.press_id where press.name = 'ACCOR'"
        ]
      ]
    },
    {
      "id": 2015,
      "db_id": "book_press",
      "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.name having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 2016,
      "db_id": "book_press",
      "gold": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
      "infer_predictions": [
        [
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by book.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from press join book on press.press_id = book.press_id group by press.press_id having count ( * ) > 2",
          "select press.name , press.year_profits_billion from book join press on book.press_id = press.press_id group by press.name having count ( * ) > 2",
          "select press.name and press.year_profits_billion from book join press on book.press_id = press.press_id group by press.press_id having count ( * ) > 2"
        ]
      ]
    },
    {
      "id": 2017,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Authors",
      "infer_predictions": [
        [
          "select count ( * ) from authors",
          "select count ( distinct author_name ) from authors",
          "select count ( * ) from authors"
        ]
      ]
    },
    {
      "id": 2018,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Authors",
      "infer_predictions": [
        [
          "select author_name from authors",
          "select distinct author_name from authors",
          "select author_name from authors",
          "select author_name from authors",
          "select author_name from authors",
          "select author_name from authors"
        ]
      ]
    },
    {
      "id": 2019,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name ,  other_details FROM Authors",
      "infer_predictions": [
        [
          "select author_name , other_details from authors",
          "select author_name , other_details from authors",
          "select author_name , other_details from authors",
          "select author_name , other_details from authors"
        ]
      ]
    },
    {
      "id": 2020,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
      "infer_predictions": [
        [
          "select other_details from authors where author_name = 'Addison Denesik'",
          "select other_details from authors where author_name = 'Addison' and other_details = 'Denesik'",
          "select other_details from authors where author_name = 'Addison Denesik'",
          "select other_details from authors where author_name = 'Addison Deneski'",
          "select other_details from authors where author_name = 'Addison' and other_details = 'Denesik'",
          "select other_details from authors where author_name = 'Adison Denesik'",
          "select other_details from authors where author_name = 'Addision Denesik'",
          "select other_details from authors where author_name = 'Addison Deneshik'"
        ]
      ]
    },
    {
      "id": 2021,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Documents",
      "infer_predictions": [
        [
          "select count ( * ) from documents"
        ]
      ]
    },
    {
      "id": 2022,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents WHERE document_id  =  4",
      "infer_predictions": [
        [
          "select author_name from documents where document_id = 4",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_id = 4"
        ]
      ]
    },
    {
      "id": 2023,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
      "infer_predictions": [
        [
          "select author_name from documents where document_name = 'Travel to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to Brazil'",
          "select authors.author_name from documents join authors on documents.author_name = authors.author_name where documents.document_name = 'Travel to Brazil'",
          "select author_name from documents where document_name = 'Travelling to Brazil'",
          "select author_name from documents where document_name = 'Traveling to Brazil'",
          "select author_name from documents where document_name = 'Trip to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travelling to Brazil'",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Traveling to Brazil'"
        ]
      ]
    },
    {
      "id": 2024,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
      "infer_predictions": [
        [
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Era Kerluke'",
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.other_details = 'Era Kerluke'",
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.other_details = 'Era'",
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.other_details = 'Era Kerluke'",
          "select count ( * ) from documents where author_name = 'Era Kerluke'",
          "select count ( * ) from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Era Kerluke'",
          "select count ( * ) from documents join authors on documents.author_name = authors.author_name where authors.other_details = 'Era' and authors.other_details = 'Kerluke'"
        ]
      ]
    },
    {
      "id": 2025,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_name ,  document_description FROM Documents",
      "infer_predictions": [
        [
          "select document_name , document_description from documents",
          "select document_name , document_description from documents",
          "select document_name , document_description from documents",
          "select document_name , document_description from documents"
        ]
      ]
    },
    {
      "id": 2026,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
      "infer_predictions": [
        [
          "select document_id , document_name from documents where author_name = 'Bianka Cummings'",
          "select documents.document_id , documents.document_name from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Bianka Cummings'",
          "select document_id , document_name from documents join authors on documents.author_name = authors.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , documents.document_name from authors join documents on authors.author_name = documents.author_name where authors.author_name = 'Bianka Cummings'",
          "select documents.document_id , documents.document_name from documents join authors on documents.author_name = authors.author_name where authors.other_details = 'Bianka Cummings'"
        ]
      ]
    },
    {
      "id": 2027,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
      "infer_predictions": [
        [
          "select authors.author_name , authors.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , documents.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , authors.other_details from authors join documents on documents.author_name = authors.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , authors.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travelling to China'",
          "select authors.author_name , authors.other_details from documents join authors on documents.author_name = authors.author_name where documents.document_name = 'Travel to China'",
          "select authors.author_name , authors.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Traveling to China'",
          "select authors.author_name , authors.other_details from authors join documents on authors.author_name = documents.author_name where documents.document_name = 'Travel To China'",
          "select authors.author_name , authors.other_details from authors join documents on authors.author_name = documents.author_name where document_name = 'Travel to China'"
        ]
      ]
    },
    {
      "id": 2028,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
      "infer_predictions": [
        [
          "select authors.author_name , count ( * ) from authors join documents on authors.author_name = documents.author_name group by authors.author_name",
          "select authors.author_name , count ( * ) from authors join documents on documents.author_name = authors.author_name group by authors.author_name",
          "select authors.author_name , count ( * ) from documents join authors on documents.author_name = authors.author_name group by authors.author_name",
          "select author_name , count ( * ) from documents group by author_name"
        ]
      ]
    },
    {
      "id": 2029,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name order by count ( * ) desc limit 1",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name order by count ( documents.document_id ) desc limit 1",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name order by count ( documents.author_name ) desc limit 1",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by documents.author_name order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2030,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( documents.document_id ) >= 2",
          "select authors.author_name from documents join authors on documents.author_name = authors.author_name group by authors.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by documents.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on documents.author_name = authors.author_name group by authors.author_name having count ( * ) >= 2",
          "select authors.author_name from authors join documents on authors.author_name = documents.author_name group by authors.author_name having count ( *) >= 2"
        ]
      ]
    },
    {
      "id": 2031,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Business_processes",
      "infer_predictions": [
        [
          "select count ( * ) from business_processes"
        ]
      ]
    },
    {
      "id": 2032,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
      "infer_predictions": [
        [
          "select next_process_id , process_name , process_description from business_processes where process_id = 9",
          "select next_process_id , process_name , process_description from business_processes where process_id = 9",
          "select next_process_id , process_name , process_description from business_processes where process_id = 09",
          "select next_process_id , process_name , process_description from business_processes where process_id = 9.",
          "select next_process_id , process_name , process_description from business_processes where process_id = 10"
        ]
      ]
    },
    {
      "id": 2033,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
      "infer_predictions": [
        [
          "select process_name from business_processes where next_process_id = 9",
          "select process_name from business_processes where next_process_id = ( select next_process_id from business_processes where process_id = 9 )",
          "select process_name from business_processes where next_process_id = ( select process_id from business_processes where process_id = 9 )",
          "select process_name from business_processes where next_process_id = 9 order by process_id asc limit 1",
          "select process_name from business_processes where next_process_id = ( select next_process_id from business_processes where process_id = '9' )",
          "select process_name from business_processes where process_id = 9",
          "select process_name from business_processes where next_process_id = 9 order by next_process_id asc limit 1",
          "select process_name from business_processes where next_process_id = ( select next_process_id from business_processes where process_id = 9)"
        ]
      ]
    },
    {
      "id": 2034,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Process_outcomes",
      "infer_predictions": [
        [
          "select count ( * ) from process_outcomes"
        ]
      ]
    },
    {
      "id": 2035,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
      "infer_predictions": [
        [
          "select process_outcome_code , process_outcome_description from process_outcomes",
          "select process_outcome_code , process_outcome_description from process_outcomes",
          "select process_outcome_code , process_outcome_description from process_outcomes",
          "select process_outcome_code , process_outcome_description from process_outcomes",
          "select process_outcome_code , process_outcome_description from process_outcomes",
          "select process_outcome_code ,process_outcome_description from process_outcomes"
        ]
      ]
    },
    {
      "id": 2036,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
      "infer_predictions": [
        [
          "select process_outcome_description from process_outcomes where process_outcome_code = 'working'",
          "select process_outcome_description from process_outcomes where process_outcome_code = 'working'",
          "select process_outcome_description from process_outcomes where process_outcome_code like '%working%'",
          "select process_outcome_description from process_outcomes where process_outcome_code = 'working'"
        ]
      ]
    },
    {
      "id": 2037,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Process_status",
      "infer_predictions": [
        [
          "select count ( * ) from process_status"
        ]
      ]
    },
    {
      "id": 2038,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_status_code ,  process_status_description FROM Process_status",
      "infer_predictions": [
        [
          "select process_status_code , process_status_description from process_status",
          "select process_status_code , process_status_description from process_status",
          "select process_status_code , process_status_description from process_status",
          "select process_status_code , process_status_description from process_status",
          "select process_status_code ,process_status_description from process_status"
        ]
      ]
    },
    {
      "id": 2039,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
      "infer_predictions": [
        [
          "select process_status_description from process_status where process_status_code = 'ct'",
          "select process_status_description from process_status where process_status_code = 'ct' != 'continue'",
          "select process_status_description from process_status where process_status_code = 'ct' or process_status.process_status_code = 'x'",
          "select process_status_description from process_status where process_status_code = 'ct' or process_status.process_status_code = 'ct'"
        ]
      ]
    },
    {
      "id": 2040,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2041,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_id ,  staff_details FROM Staff",
      "infer_predictions": [
        [
          "select staff_id , staff_details from staff",
          "select staff_Id , staff_details from staff",
          "select staff_id ,staff_details from staff",
          "select staff_id , staff_details from staff",
          "select staff_id , staff_details from staff"
        ]
      ]
    },
    {
      "id": 2042,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
      "infer_predictions": [
        [
          "select staff_details from staff where staff_id = 100"
        ]
      ]
    },
    {
      "id": 2043,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Ref_staff_roles",
      "infer_predictions": [
        [
          "select count ( * ) from ref_staff_roles",
          "select count ( * ) from ref_staff_roles",
          "select count ( * ) from ref_staff_roles"
        ]
      ]
    },
    {
      "id": 2044,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
      "infer_predictions": [
        [
          "select staff_role_code , staff_role_description from ref_staff_roles",
          "select staff_role_code ,staff_role_description from ref_staff_roles",
          "select staff_role_code , staff_role_description from ref_staff_roles",
          "select staff_role_code , staff_role_description from ref_staff_roles"
        ]
      ]
    },
    {
      "id": 2045,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
      "infer_predictions": [
        [
          "select staff_role_description from ref_staff_roles where staff_role_code = 'HR'",
          "select staff_role_description from ref_staff_roles where staff_role_code = 'HR'",
          "select staff_role_description from ref_staff_roles where staff_role_code = 'Hr'",
          "select staff_role_description from ref_staff_roles where staff_role_code = 'HRT'"
        ]
      ]
    },
    {
      "id": 2046,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(DISTINCT document_id) FROM Documents_processes",
      "infer_predictions": [
        [
          "select count ( distinct document_id ) from documents_processes",
          "select count ( * ) from documents_processes",
          "select count ( distinct document_id ) from documents_processes",
          "select count ( distinct document_id ) from documents_processes",
          "select count ( distinct document_id ) from documents_processes"
        ]
      ]
    },
    {
      "id": 2047,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT DISTINCT process_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select process_id from documents_processes",
          "select process_id from documents_processes group by process_id having count ( * ) >= 1",
          "select distinct process_id from documents_processes",
          "select process_id from documents_processes union select process_id from documents_processes",
          "select process_id from documents_processes group by process_id having count ( * ) > 100",
          "select process_id from documents_processes group by process_id",
          "select process_id from documents_processes group by process_id having document_id = 1",
          "select process_id from documents_processes group by process_id having document_id = 1"
        ]
      ]
    },
    {
      "id": 2048,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select document_id from documents except select document_id from documents_processes",
          "select document_id from documents_processes where document_id not in ( select document_id from documents_processes )",
          "select document_id from documents except select document_id from documents_processes",
          "select document_id from documents except select document_id from documents_processes"
        ]
      ]
    },
    {
      "id": 2049,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
      "infer_predictions": [
        [
          "select process_id from documents_processes except select process_id from documents_processes",
          "select process_id from documents_processes except select process_id from documents_processes",
          "select process_id from documents_processes except select process_id from documents_processes",
          "select process_id from documents_processes where process_id not in ( select process_id from documents_processes )",
          "select process_id from documents_processes except select process_id from documents_processes"
        ]
      ]
    },
    {
      "id": 2050,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
      "infer_predictions": [
        [
          "select process_outcomes.process_outcome_description , process_status.process_status_description from documents_processes join process_outcomes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on process_outcomes.process_outcome_code = documents_processes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where documents_processes.document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from documents_processes join process_outcomes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where document_id = 0",
          "select process_outcomes.process_outcome_description , process_status.process_status_description from process_outcomes join documents_processes on documents_processes.process_outcome_code = process_outcomes.process_outcome_code join process_status on documents_processes.process_status_code = process_status.process_status_code where document_id = 0"
        ]
      ]
    },
    {
      "id": 2051,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
      "infer_predictions": [
        [
          "select business_processes.process_name from business_processes join documents_processes on business_processes.process_id = documents_processes.process_id join documents on documents_processes.document_id = documents.document_id where documents.document_name = 'Travel to Brazil'",
          "select business_processes.process_name from documents join documents_processes on documents.document_id = documents_processes.document_id join business_processes on documents_processes.process_id = business_processes.process_id where documents.document_name = 'Travel to Brazil'",
          "select business_processes.process_name from business_processes join documents_processes on documents_processes.process_id = business_processes.process_id join documents on documents_processes.document_id = documents.document_id where documents.document_name = 'Travel to Brazil'",
          "select business_processes.process_name from business_processes join documents_processes on business_processes.process_id = documents_processes.process_id join documents on documents_processes.document_id = documents.document_id where documents.document_name = 'Traveling to Brazil'",
          "select business_processes.process_name from business_processes join documents_processes on business_processes.process_id = documents_processes.process_id join documents on documents_processes.document_id = documents.document_id where documents.document_name = 'Travelling to Brazil'",
          "select business_processes.process_name from business_processes join documents_processes on business_processes.process_id = documents_processes.process_id join documents on documents_processes.document_id = documents.document_id where documents.document_name = 'Travel To Brazil'"
        ]
      ]
    },
    {
      "id": 2052,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
      "infer_predictions": [
        [
          "select process_id , count ( * ) from documents_processes group by process_id",
          "select process_id , count ( * ) from documents_processes group by process_id",
          "select process_id , count ( * ) from documents_processes group by process_id"
        ]
      ]
    },
    {
      "id": 2053,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
      "infer_predictions": [
        [
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on documents_processes.process_id = staff_in_processes.process_id where documents_processes.document_id = 0 and documents_processes.process_id = 9",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on documents_processes.process_id = staff_in_processes.process_id where documents_processes.document_id = 0 and staff_in_processes.process_id = 9",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on staff_in_processes.process_id = documents_processes.process_id where documents_processes.document_id = 0 and documents_processes.process_id = 9",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on documents_processes.process_id = staff_in_processes.process_id where documents_processes.document_id = '0' and documents_processes.process_id = '9'",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on staff_in_processes.document_id = documents_processes.document_id and staff_in_processes.process_id = documents_processes.process_id where documents_processes.document_id = 0 and staff_in_processes.process_id = 9",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on staff_in_processes.process_id = documents_processes.process_id where documents_processes.document_id = '0' and documents_processes.process_id = '9'",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on documents_processes.process_id = staff_in_processes.process_id where documents_processes.document_id = '0' and documents_processes.process_id = 9",
          "select count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id join documents_processes on documents_processes.document_id = staff_in_processes.document_id and staff_in_processes.process_id = documents_processes.process_id where documents_processes.document_id = 0 and staff_in_processes.process_id = 9"
        ]
      ]
    },
    {
      "id": 2054,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
      "infer_predictions": [
        [
          "select staff.staff_id , count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id group by staff.staff_id",
          "select staff.staff_id , count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id group by staff_in_processes.staff_id",
          "select staff.staff_details , count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id group by staff.staff_details",
          "select staff.staff_id , count ( * ) from staff_in_processes join staff on staff_in_processes.staff_id = staff.staff_id group by staff.staff_id",
          "select staff.staff_details , count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id group by staff.staff_id",
          "select staff.staff_id , count ( * ) from staff join staff_in_processes on staff.staff_id = staff_in_processes.staff_id group by Staff.staff_id"
        ]
      ]
    },
    {
      "id": 2055,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
      "infer_predictions": [
        [
          "select staff_role_code , count ( * ) from staff_in_processes group by staff_role_code",
          "select staff_in_processes.staff_role_code , count ( * ) from staff_in_processes join documents_processes on staff_in_processes.process_id = documents_processes.process_id group by staff_in_processes.staff_role_code",
          "select staff_in_processes.staff_role_code , count ( * ) from staff_in_processes join documents_processes on staff_in_processes.process_id = documents_processes.process_id group by staff_role_code",
          "select staff_in_processes.staff_role_code , count ( * ) from staff_in_processes join documents_processes on documents_processes.process_id = staff_in_processes.process_id group by staff_in_processes.staff_role_code",
          "select staff_role_code , count ( * ) from staff_in_processes group by staff_role_code",
          "select staff_role_code , count ( * ) from staff_in_processes group by staff_role_code"
        ]
      ]
    },
    {
      "id": 2056,
      "db_id": "cre_Doc_Workflow",
      "gold": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 2057,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Agencies",
      "infer_predictions": [
        [
          "select count ( * ) from agencies",
          "select count ( distinct agency_id ) from agencies"
        ]
      ]
    },
    {
      "id": 2058,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Agencies",
      "infer_predictions": [
        [
          "select count ( * ) from agencies",
          "select count ( distinct agency_id ) from agencies",
          "select count ( * ) from agencies",
          "select count ( * ) from agencies",
          "select count ( * ) from agencies",
          "select count ( * )from agencies"
        ]
      ]
    },
    {
      "id": 2059,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  agency_details FROM Agencies",
      "infer_predictions": [
        [
          "select agency_id , agency_details from agencies",
          "select agency_Id , agency_details from agencies",
          "select agency_id , agency_details from agencies",
          "select agency_details , agency_id from agencies"
        ]
      ]
    },
    {
      "id": 2060,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  agency_details FROM Agencies",
      "infer_predictions": [
        [
          "select agency_id , agency_details from agencies",
          "select agency_id , agency_details from agencies",
          "select agency_id , agency_details from agencies"
        ]
      ]
    },
    {
      "id": 2061,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Clients",
      "infer_predictions": [
        [
          "select count ( * ) from clients",
          "select count ( * ) from clients",
          "select count ( * ) from clients",
          "select count ( * )from clients"
        ]
      ]
    },
    {
      "id": 2062,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Clients",
      "infer_predictions": [
        [
          "select count ( * ) from clients"
        ]
      ]
    },
    {
      "id": 2063,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients",
      "infer_predictions": [
        [
          "select client_id , client_details from clients",
          "select client_id , client_details from clients",
          "select client_id , client_details from clients"
        ]
      ]
    },
    {
      "id": 2064,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients",
      "infer_predictions": [
        [
          "select client_id , client_details from clients",
          "select client_id , client_details from clients"
        ]
      ]
    },
    {
      "id": 2065,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
      "infer_predictions": [
        [
          "select agency_id , count ( * ) from clients group by agency_id",
          "select agencies.agency_id , count ( * ) from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2066,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
      "infer_predictions": [
        [
          "select count ( * ) , agencies.agency_id from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id",
          "select agencies.agency_id , count ( * ) from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id",
          "select count ( * ) , agency_id from clients group by agency_id",
          "select count ( * ) , agencies.agency_id from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id",
          "select count ( * ) , agencies.agency_id from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2067,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2068,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id order by count ( * ) desc limit 1",
          "select clients.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2069,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2070,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , clients.client_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id having count ( * ) >= 2",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id group by agencies.agency_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2071,
      "db_id": "advertising_agencies",
      "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
      "infer_predictions": [
        [
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'MAC'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'mac'",
          "select agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'"
        ]
      ]
    },
    {
      "id": 2072,
      "db_id": "advertising_agencies",
      "gold": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
      "infer_predictions": [
        [
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'Mac'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'MAC'",
          "select agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id where clients.client_details = 'mac'",
          "select agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id where clients.client_details = 'MAC'"
        ]
      ]
    },
    {
      "id": 2073,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id"
        ]
      ]
    },
    {
      "id": 2074,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select clients.client_details , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select clients.client_details , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.client_details , agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select clients.client_details , agency_details from clients join agencies on clients.agency_id = agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2075,
      "db_id": "advertising_agencies",
      "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
      "infer_predictions": [
        [
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code"
        ]
      ]
    },
    {
      "id": 2076,
      "db_id": "advertising_agencies",
      "gold": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
      "infer_predictions": [
        [
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code",
          "select sic_code , count ( * ) from clients group by sic_code",
          "select count ( * ) , sic_code from clients group by sic_code"
        ]
      ]
    },
    {
      "id": 2077,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
      "infer_predictions": [
        [
          "select client_id , client_details from clients where sic_code = 'Bad'",
          "select client_id , client_details from clients where sic_code = 'Bad'",
          "select client_details , client_id from clients where sic_code = 'Bad'",
          "select client_Id , client_details from clients where sic_code = 'Bad'"
        ]
      ]
    },
    {
      "id": 2078,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
      "infer_predictions": [
        [
          "select client_id , client_details from clients where sic_code = 'Bad'"
        ]
      ]
    },
    {
      "id": 2079,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by agencies.agency_id having count ( * ) >= 1",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select clients.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id group by clients.agency_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 2080,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agencies.agency_id , agencies.agency_details from clients join agencies on clients.agency_id = agencies.agency_id",
          "select distinct agencies.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select clients.agency_id , agencies.agency_details from agencies join clients on agencies.agency_id = clients.agency_id",
          "select agencies.agency_id , agency_details from agencies join clients on agencies.agency_id = clients.agency_id"
        ]
      ]
    },
    {
      "id": 2081,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
      "infer_predictions": [
        [
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from clients except select agency_id from clients"
        ]
      ]
    },
    {
      "id": 2082,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
      "infer_predictions": [
        [
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies where agency_id not in ( select agency_id from clients )",
          "select agency_id from agencies except select agency_id from clients",
          "select agency_id from agencies except select agency_id from clients"
        ]
      ]
    },
    {
      "id": 2083,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Invoices",
      "infer_predictions": [
        [
          "select count ( * ) from invoices"
        ]
      ]
    },
    {
      "id": 2084,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Invoices",
      "infer_predictions": [
        [
          "select count ( * ) from invoices",
          "select count ( * ) from invoices",
          "select count ( * ) from invoices",
          "select count ( * ) from invoices",
          "select count ( * ) from invoices"
        ]
      ]
    },
    {
      "id": 2085,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
      "infer_predictions": [
        [
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where clients.sic_code = 'A'",
          "select invoices.invoice_id , invoices.invoice_status , invoice_details from invoices join clients on invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where clients.sic_code = '1'",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where invoices.invoice_status = 'Processing'",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where invoices.client_id = clients.client_id",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where invoices.invoice_status = 'Provisional'",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join clients on invoices.client_id = clients.client_id where clients.client_details = 'Security'"
        ]
      ]
    },
    {
      "id": 2086,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status , invoice_details from invoices"
        ]
      ]
    },
    {
      "id": 2087,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from invoices group by client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id",
          "select client_id , count ( * ) from invoices group by client_id",
          "select client_id , count ( * ) from invoices group by client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id"
        ]
      ]
    },
    {
      "id": 2088,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from invoices group by client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id",
          "select count ( * ) , client_id from invoices group by client_id",
          "select clients.client_id , count ( * ) from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id",
          "select client_id , count ( * ) from invoices group by client_id",
          "select client_id , count ( * ) from invoices group by client_id"
        ]
      ]
    },
    {
      "id": 2089,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by invoices.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2090,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id group by clients.client_details order by count ( * ) desc limit 1",
          "select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id group by clients.client_details order by count ( * ) desc limit 1",
          "select invoices.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2091,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select client_id from invoices group by client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select clients.client_id from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2092,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
      "infer_predictions": [
        [
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select client_id from invoices group by client_id having count ( * ) >= 2",
          "select clients.client_id from clients join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) > 2",
          "select invoices.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select clients.client_id from invoices join clients on invoices.client_id = clients.client_id group by invoices.client_id having count ( * ) >= 2",
          "select clients.client_id from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id having count ( * ) >= 2"
        ]
      ]
    },
    {
      "id": 2093,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
      "infer_predictions": [
        [
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) , invoices.invoice_id from invoices join clients on invoices.client_id = clients.client_id group by invoice_status"
        ]
      ]
    },
    {
      "id": 2094,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
      "infer_predictions": [
        [
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status  , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status",
          "select invoice_status , count ( * ) from invoices group by invoice_status"
        ]
      ]
    },
    {
      "id": 2095,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status , count ( * ) from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2096,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status , count ( * ) from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1",
          "select invoice_status from invoices group by invoice_status order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2097,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
      "infer_predictions": [
        [
          "select invoices.invoice_status , invoices.invoice_details , clients.client_id , agencies.agency_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id join agencies on clients.agency_id = agencies.agency_id",
          "select invoices.invoice_status , invoices.invoice_details , clients.client_id , agencies.agency_id from invoices join clients on invoices.client_id = clients.client_id join agencies on clients.agency_id = agencies.agency_id",
          "select invoices.invoice_status , invoices.invoice_details , clients.client_id , agencies.agency_details from invoices join clients on invoices.client_id = clients.client_id join agencies on clients.agency_id = agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2098,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 2099,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  other_details FROM meetings",
      "infer_predictions": [
        [
          "select meeting_type , other_details from meetings",
          "select meeting_type , other_details from meetings",
          "select meeting_type , other_details from meetings",
          "select distinct meeting_type , other_details from meetings",
          "select meeting_type , other_details from meetings"
        ]
      ]
    },
    {
      "id": 2100,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  other_details FROM meetings",
      "infer_predictions": [
        [
          "select meeting_type , other_details from meetings",
          "select distinct meeting_type , other_details from meetings",
          "select meeting_type , other_details from meetings"
        ]
      ]
    },
    {
      "id": 2101,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
      "infer_predictions": [
        [
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings"
        ]
      ]
    },
    {
      "id": 2102,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
      "infer_predictions": [
        [
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings union select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings union select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings",
          "select meeting_outcome , purpose_of_meeting from meetings"
        ]
      ]
    },
    {
      "id": 2103,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
      "infer_predictions": [
        [
          "select payments.payment_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.invoice_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payment_id , payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payment_id , payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2104,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
      "infer_predictions": [
        [
          "select payments.payment_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payment_id , payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payment_id , payment_details from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'",
          "select payments.payment_id , payments.payment_details from payments join invoices on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Working'"
        ]
      ]
    },
    {
      "id": 2105,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status from invoices where invoice_id not in ( select invoice_id from payments )",
          "select invoice_id , invoice_status from invoices except select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where payments.payment_id not in ( select invoice_id from payments )",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where payments.invoice_id not in ( select invoice_id from payments )",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where payments.payment_id not in ( select invoice_id from payments )"
        ]
      ]
    },
    {
      "id": 2106,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , invoice_status from invoices where invoice_id not in ( select invoice_id from payments )",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where payments.invoice_id not in ( select invoice_id from payments )",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where payments.payment_id not in ( select invoice_id from payments )",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Paid'",
          "select invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id where invoices.invoice_status = 'Pending'"
        ]
      ]
    },
    {
      "id": 2107,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Payments",
      "infer_predictions": [
        [
          "select count ( * ) from payments",
          "select count ( distinct payment_id ) from payments",
          "select count ( * ) from payments",
          "select count ( * ) from payments",
          "select count ( * ) from payments"
        ]
      ]
    },
    {
      "id": 2108,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Payments",
      "infer_predictions": [
        [
          "select count ( * ) from payments",
          "select count ( distinct payment_id ) from payments",
          "select count ( * ) from payments",
          "select count ( * ) from payments",
          "select count ( * ) from payments",
          "select count ( * ) from payments"
        ]
      ]
    },
    {
      "id": 2109,
      "db_id": "advertising_agencies",
      "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
      "infer_predictions": [
        [
          "select payment_id , invoice_id , payment_details from payments",
          "select payments.payment_id , invoices.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , invoices.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , payments.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select payments.payment_id , invoices.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id where payments.payment_id = 'Y'",
          "select payments.payment_id , invoices.invoice_id , invoices.invoice_details from payments join invoices on payments.invoice_id = invoices.invoice_id and payments.payment_id = payments.payment_id",
          "select payments.payment_id , invoices.invoice_id , payments.payment_details from payments join invoices on payments.invoice_id = invoices.invoice_id where payments.payment_id = 'Y'"
        ]
      ]
    },
    {
      "id": 2110,
      "db_id": "advertising_agencies",
      "gold": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
      "infer_predictions": [
        [
          "select payment_id , invoice_id , payment_details from payments",
          "select payment_id , invoice_id , payment_details from payments",
          "select payment_id , invoice_id , payment_details from payments"
        ]
      ]
    },
    {
      "id": 2111,
      "db_id": "advertising_agencies",
      "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select distinct invoice_id , invoice_status from invoices",
          "select distinct invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2112,
      "db_id": "advertising_agencies",
      "gold": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
      "infer_predictions": [
        [
          "select distinct invoices.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct invoice_id , invoice_status from invoices",
          "select distinct payments.invoice_id , invoices.invoice_status from invoices join payments on invoices.invoice_id = payments.invoice_id",
          "select distinct payments.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id",
          "select distinct invoices.invoice_id , invoices.invoice_status from payments join invoices on payments.invoice_id = invoices.invoice_id"
        ]
      ]
    },
    {
      "id": 2113,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , count ( * ) from payments group by invoice_id",
          "select invoice_id , count ( * ) from payments group by invoice_id",
          "select invoice_id , count ( * ) from payments group by invoice_id",
          "select invoice_id , count ( * )from payments group by invoice_id",
          "select invoice_id , count ( * ) from payments group by invoice_id"
        ]
      ]
    },
    {
      "id": 2114,
      "db_id": "advertising_agencies",
      "gold": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
      "infer_predictions": [
        [
          "select invoice_id , count ( * ) from payments group by invoice_id",
          "select invoices.invoice_id , count ( * ) from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by invoices.invoice_id",
          "select count ( * ) , invoice_id from payments group by invoice_id",
          "select invoices.invoice_id , count ( * ) from invoices join payments on invoices.invoice_id = payments.invoice_id group by payments.invoice_id",
          "select invoices.invoice_id , count ( * ) from payments join invoices on payments.invoice_id = invoices.invoice_id group by payments.invoice_id"
        ]
      ]
    },
    {
      "id": 2115,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on payments.invoice_id = invoices.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2116,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by payments.invoice_id order by count ( * ) desc limit 1",
          "select invoices.invoice_id , invoices.invoice_status , invoices.invoice_details from invoices join payments on invoices.invoice_id = payments.invoice_id group by invoices.invoice_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2117,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2118,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff",
      "infer_predictions": [
        [
          "select count ( * ) from staff",
          "select count ( * ) from staff",
          "select count ( * ) from staff",
          "select count ( * ) from staff"
        ]
      ]
    },
    {
      "id": 2119,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
      "infer_predictions": [
        [
          "select agency_id , count ( * ) from staff group by agency_id",
          "select agencies.agency_id , count ( * ) from staff join agencies on staff.agency_id = agencies.agency_id group by agencies.agency_id"
        ]
      ]
    },
    {
      "id": 2120,
      "db_id": "advertising_agencies",
      "gold": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
      "infer_predictions": [
        [
          "select agency_id , count ( * ) from staff group by agency_id",
          "select agency_id , count ( * ) from staff group by agency_id",
          "select count ( * ) , agency_id from staff group by agency_id",
          "select agency_id , count ( *) from staff group by agency_id",
          "select agency_id , count ( * )from staff group by agency_id",
          "select agency_id , count ( * ) from staff group by agency_id"
        ]
      ]
    },
    {
      "id": 2121,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from staff join agencies on staff.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from staff join agencies on staff.agency_id = agencies.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by agencies.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2122,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
      "infer_predictions": [
        [
          "select agencies.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from staff join agencies on staff.agency_id = agencies.agency_id group by agencies.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from staff join agencies on staff.agency_id = agencies.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select staff.agency_id , agencies.agency_details from staff join agencies on staff.agency_id = agencies.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select staff.agency_id , agencies.agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by staff.agency_id order by count ( * ) desc limit 1",
          "select agencies.agency_id , agency_details from agencies join staff on agencies.agency_id = staff.agency_id group by agencies.agency_id order by count ( * ) desc limit 1"
        ]
      ]
    },
    {
      "id": 2123,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
      "infer_predictions": [
        [
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome  , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * )from meetings group by meeting_outcome"
        ]
      ]
    },
    {
      "id": 2124,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
      "infer_predictions": [
        [
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome  , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome",
          "select meeting_outcome , count ( * ) from meetings group by meeting_outcome"
        ]
      ]
    },
    {
      "id": 2125,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from meetings group by client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select clients.client_id , count ( * ) from clients join meetings on clients.client_id = meetings.client_id group by clients.client_id",
          "select meetings.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id"
        ]
      ]
    },
    {
      "id": 2126,
      "db_id": "advertising_agencies",
      "gold": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
      "infer_predictions": [
        [
          "select client_id , count ( * ) from meetings group by client_id",
          "select count ( * ) , client_id from meetings group by client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id",
          "select clients.client_id , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select count ( * ) , client_id from meetings group by client_id",
          "select client_id , count ( * ) from meetings group by client_id"
        ]
      ]
    },
    {
      "id": 2127,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
      "infer_predictions": [
        [
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.meeting_type",
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meeting_type",
          "select meetings.meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.meeting_type",
          "select meetings.meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.client_id",
          "select meeting_type , count ( * ) from meetings join clients on meetings.client_id = clients.client_id group by meetings.meeting_type"
        ]
      ]
    },
    {
      "id": 2128,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
      "infer_predictions": [
        [
          "select meeting_type , count ( * ) from meetings group by meeting_type",
          "select meeting_type  , count ( * ) from meetings group by meeting_type",
          "select meeting_type , count ( * ) from meetings group by meeting_type"
        ]
      ]
    },
    {
      "id": 2129,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select meetings.meeting_id , meetings.meeting_outcome , meetings.meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meetings.meeting_id , meetings.meeting_outcome , meetings.meeting_type , clients.client_details from clients join meetings on clients.client_id = meetings.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meetings.meeting_id , meetings.meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meetings.meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2130,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meetings.meeting_id , meetings.meeting_outcome , meetings.meeting_type , clients.client_details from meetings join clients on meetings.client_id = clients.client_id",
          "select meeting_id , meeting_outcome , meeting_type , clients.client_details from clients join meetings on clients.client_id = meetings.client_id"
        ]
      ]
    },
    {
      "id": 2131,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
      "infer_predictions": [
        [
          "select meeting_id , count ( * ) from staff_in_meetings group by meeting_id",
          "select meetings.meeting_id , count ( * ) from staff_in_meetings join meetings on staff_in_meetings.meeting_id = meetings.meeting_id group by meetings.meeting_id",
          "select meeting_id , count ( * ) from staff_in_meetings group by meeting_id",
          "select meeting_id , count ( * ) from staff_in_meetings group by meeting_id"
        ]
      ]
    },
    {
      "id": 2132,
      "db_id": "advertising_agencies",
      "gold": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
      "infer_predictions": [
        [
          "select count ( * ) , meeting_id from staff_in_meetings group by meeting_id",
          "select meeting_id , count ( * ) from staff_in_meetings group by meeting_id",
          "select count ( * ) , meeting_id from staff_in_meetings group by meeting_id order by count ( * ) desc",
          "select count ( * ) , meeting_id from staff_in_meetings group by meeting_id",
          "select count ( * ) , meeting_id from staff_in_meetings Group by meeting_id"
        ]
      ]
    },
    {
      "id": 2133,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        [
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id join meetings on staff_in_meetings.meeting_id = meetings.meeting_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id , count ( * ) from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff_in_meetings.staff_id order by count ( * ) asc limit 1",
          "select staff_id , count ( * ) from staff_in_meetings group by staff_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 2134,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
      "infer_predictions": [
        [
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff_id from staff_in_meetings except select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff_in_meetings.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff_in_meetings.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1",
          "select staff.staff_id from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id group by staff.staff_id order by count ( * ) asc limit 1"
        ]
      ]
    },
    {
      "id": 2135,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
      "infer_predictions": [
        [
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( * ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings"
        ]
      ]
    },
    {
      "id": 2136,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
      "infer_predictions": [
        [
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings",
          "select count ( distinct staff_id ) from staff_in_meetings"
        ]
      ]
    },
    {
      "id": 2137,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
      "infer_predictions": [
        [
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )"
        ]
      ]
    },
    {
      "id": 2138,
      "db_id": "advertising_agencies",
      "gold": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
      "infer_predictions": [
        [
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )",
          "select count ( * ) from staff where staff_id not in ( select staff_id from staff_in_meetings )"
        ]
      ]
    },
    {
      "id": 2139,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from clients join invoices on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id",
          "select clients.client_id , clients.client_details from meetings join clients on meetings.client_id = clients.client_id union select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_details , clients.client_id from clients join invoices on invoices.client_id = clients.client_id",
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2140,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.client_details from clients join meetings on clients.client_id = meetings.client_id union select clients.client_id , clients.client_details from clients join invoices on clients.client_id = invoices.client_id",
          "select clients.client_id , clients.client_details from meetings join clients on meetings.client_id = clients.client_id union select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id",
          "select meetings.client_id , clients.client_details from meetings join clients on meetings.client_id = clients.client_id union select clients.client_id , clients.client_details from invoices join clients on invoices.client_id = clients.client_id"
        ]
      ]
    },
    {
      "id": 2141,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff.staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_details like '%s%'",
          "select staff_in_meetings.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff.staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id = 1 and staff.staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id and staff.staff_details like '%s%'",
          "select staff_in_meetings.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_details like '%s%'"
        ]
      ]
    },
    {
      "id": 2142,
      "db_id": "advertising_agencies",
      "gold": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
      "infer_predictions": [
        [
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_details like '%s'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff.staff_details like '%s'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff.staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_details like '%s%'",
          "select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id intersect select staff.staff_id , staff.staff_details from staff join staff_in_meetings on staff.staff_id = staff_in_meetings.staff_id where staff_in_meetings.meeting_id like '%s%'"
        ]
      ]
    },
    {
      "id": 2143,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) >= 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from clients join meetings on clients.client_id = meetings.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from clients join invoices on clients.client_id = invoices.client_id group by clients.client_id having count ( * ) >= 1"
        ]
      ]
    },
    {
      "id": 2144,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
      "infer_predictions": [
        [
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) >= 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) >= 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id group by clients.client_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by meetings.meeting_id having count ( * ) = 1",
          "select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on invoices.client_id = clients.client_id group by clients.client_id having count ( * ) = 1 intersect select clients.client_id , clients.sic_code , clients.agency_id from meetings join clients on meetings.client_id = clients.client_id join invoices on clients.client_id = invoices.client_id group by clients.client_id having count ( * ) = 1"
        ]
      ]
    },
    {
      "id": 2145,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
      "infer_predictions": [
        []
      ]
    },
    {
      "id": 2146,
      "db_id": "advertising_agencies",
      "gold": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
      "infer_predictions": [
        []
      ]
    }
  ]